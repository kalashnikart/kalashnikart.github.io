{"version":3,"file":"vendors-node_modules_css-loader_dist_runtime_api_js-node_modules_css-loader_dist_runtime_sour-a19e5f.bundle.js","mappings":";;;;;;;;;AAAa;;AAEb;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;;AAEA;AACA,qDAAqD;AACrD;;AAEA;AACA,gDAAgD;AAChD;;AAEA;AACA,qFAAqF;AACrF;;AAEA;;AAEA;AACA,qBAAqB;AACrB;;AAEA;AACA,qBAAqB;AACrB;;AAEA;AACA,qBAAqB;AACrB;;AAEA;AACA,KAAK;AACL,KAAK;;;AAGL;AACA;AACA;AACA;;AAEA;;AAEA;AACA,sBAAsB,iBAAiB;AACvC;;AAEA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,qBAAqB;AAC1C;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV,sFAAsF,qBAAqB;AAC3G;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV,iDAAiD,qBAAqB;AACtE;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV,sDAAsD,qBAAqB;AAC3E;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;ACrGa;;AAEb;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uDAAuD,cAAc;AACrE;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;;;;;;;;;;ACrBa;;AAEb;;AAEA;AACA;;AAEA,kBAAkB,wBAAwB;AAC1C;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,kBAAkB,iBAAiB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAM;AACN;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,4BAA4B;AAChD;AACA;AACA;AACA;;AAEA;;AAEA,qBAAqB,6BAA6B;AAClD;;AAEA;;AAEA;AACA;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AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,2BAA2B;AAC3B,2BAA2B;AAC3B;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;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A;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,IAAI;;AAEJ;;AAEA;AACA;AACA;AACA;;AAEA,IAAI;;AAEJ;;AAEA;AACA;AACA;AACA;;AAEA,IAAI;;AAEJ;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;;AAEA,IAAI;;AAEJ,kCAAkC;;AAElC;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,IAAI;;AAEJ;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,IAAI;;AAEJ;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA,qCAAqC;;AAErC;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,2BAA2B;AAC3B,2BAA2B;AAC3B,2BAA2B;AAC3B;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,qCAAqC,OAAO;;AAE5C;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,wCAAwC,OAAO;;AAE/C;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,uCAAuC,QAAQ;;AAE/C;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,wCAAwC,OAAO;;AAE/C;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA,IAAI;;AAEJ;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA,IAAI;;AAEJ;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA,IAAI;;AAEJ;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA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;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,uCAAuC,gBAAgB;;AAEvD;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA,qBAAqB;;AAErB;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,IAAI;;AAEJ;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA,IAAI;;AAEJ;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AA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CA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,mBAAmB,OAAO;;AAE1B;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA,mBAAmB,OAAO;;AAE1B;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,mBAAmB,OAAO;;AAE1B;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,mBAAmB,OAAO;;AAE1B;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA,GAAG;;AAE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AEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA,IAAI;;AAEJ;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,IAAI;;AAEJ;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,cAAc;;AAEd;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,KAAK;;AAEL;;AAEA;;AAEA,IAAI;;AAEJ;AACA;;AAEA;;AAEA,6BAA6B;;AAE7B;;AAEA,oBAAoB,eAAe;;AAEnC;;AAEA;;AAEA;AACA;AACA;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,qCAAqC,eAAe;;AAEpD;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,IAAI;;AAEJ;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA,MAAM;;AAEN;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,OAAO;;AAEP;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6DAA6D;;AAE7D;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gEAAgE;;AAEhE;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,QAAQ,iCAAiC;AACzC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,mBAAmB,uBAAuB;;AAE1C;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,+BAA+B;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAE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AEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,IAAI;;AAEJ;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,IAAI;;AAEJ;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,IAAI;;AAEJ;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,IAAI;;AAEJ;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,IAAI;;AAEJ;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA,GAAG;;AAEH;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA,KAAK;;AAEL;;AAEA;;AAE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AAEJ;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,IAAI;;AAEJ;AACA;;AAEA,IAAI;;AAEJ;AACA;;AAEA,IAAI;;AAEJ;AACA;;AAEA,IAAI;;AAEJ;;AAEA;;AAEA;;AAEA,KAAK;;AAEL;;AAEA;;AAEA,IAAI;;AAEJ;AACA;;AAEA,IAAI;;AAEJ;AACA;;AAEA,IAAI;;AAEJ;AACA;;AAEA,IAAI;;AAEJ;AACA;;AAEA,IAAI;;AAEJ;;AAEA;;AAEA;;AAEA;;AAEA,IAAI;;AAEJ;;AAEA,IAAI;;AAEJ;;AAEA,IAAI;;AAEJ;AACA;;AAEA,IAAI;;AAEJ,wCAAwC;;AAExC;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,IAAI;;AAEJ;;AAEA,IAAI;;AAEJ;;AAEA,IAAI;;AAEJ;;AAEA,IAAI;;AAEJ;;AAEA,IAAI;;AAEJ;;AAEA,IAAI;;AAEJ;;AAEA,IAAI;;AAEJ;;AAEA,IAAI;;AAEJ;;AAEA,IAAI;;AAEJ;;AAEA,IAAI;;AAEJ;;AAEA,IAAI;;AAEJ;;AAEA,IAAI;;AAEJ;;AAEA,IAAI;;AAEJ;;AAEA,IAAI;;AAEJ;;AAEA,IAAI;;AAEJ;;AAEA,IAAI;;AAEJ;;AAEA,IAAI;;AAEJ;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,IAAI;;AAEJ;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA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B;;AAEzC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA,mBAAmB,qBAAqB;;AAExC,oBAAoB,sBAAsB;;AAE1C;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,mBAAmB,qBAAqB;;AAExC,oBAAoB,sBAAsB;;AAE1C;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,mBAAmB,sBAAsB;;AAEzC;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,oBAAoB,qBAAqB;;AAEzC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,mBAAmB,sBAAsB;;AAEzC,oBAAoB,qBAAqB;;AAEzC;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,oBAAoB,qBAAqB;;AAEzC;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA,oBAAoB,qBAAqB;;AAEzC;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,oBAAoB,sBAAsB;;AAE1C,qBAAqB,qBAAqB;;AAE1C;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,oBAAoB,sBAAsB;;AAE1C,qBAAqB,qBAAqB;;AAE1C;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA,kBAAkB,mDAAmD;;AAErE;;AAEA;;AAEA,yCAAyC,QAAQ;;AAEjD;;AAEA;AACA;;AAEA,gEAAgE,OAAO;;AAEvE,uBAAuB,OAAO;;AAE9B;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,KAAK;;AAEL;;AAEA;;AAEA,iDAAiD,OAAO;;AAExD,sBAAsB,OAAO;;AAE7B;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,kBAAkB,QAAQ,GAAG,QAAQ,GAAG,QAAQ,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM;AAC3E,kBAAkB,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,QAAQ,GAAG,QAAQ,GAAG,QAAQ,GAAG;;AAE9E;;AAEA;;AAEA,GAAG;;AAEH;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,mBAAmB;;AAEnB;;AAEA,sCAAsC;AACtC;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,mBAAmB;;AAEnB;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA,IAAI;AACJ;;AAEA;;AAEA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC;AACtmBAAmB;;AAEnsCAAsC;;AAEtC;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;A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;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,2EAA2E;;AAE3E;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA,IAAI;;AAEJ;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAI;;AAEJ;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;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;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,uCAAuC,QAAQ;;AAE/C;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA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","sources":["webpack://webxr-image-recognizer/./node_modules/css-loader/dist/runtime/api.js","webpack://webxr-image-recognizer/./node_modules/css-loader/dist/runtime/sourceMaps.js","webpack://webxr-image-recognizer/./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js","webpack://webxr-image-recognizer/./node_modules/style-loader/dist/runtime/insertBySelector.js","webpack://webxr-image-recognizer/./node_modules/style-loader/dist/runtime/insertStyleElement.js","webpack://webxr-image-recognizer/./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js","webpack://webxr-image-recognizer/./node_modules/style-loader/dist/runtime/styleDomAPI.js","webpack://webxr-image-recognizer/./node_modules/style-loader/dist/runtime/styleTagTransform.js","webpack://webxr-image-recognizer/./node_modules/three/build/three.module.js","webpack://webxr-image-recognizer/./node_modules/mind-ar/dist/mindar-image-three.prod.js"],"sourcesContent":["\"use strict\";\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = \"\";\n      var needLayer = typeof item[5] !== \"undefined\";\n\n      if (item[4]) {\n        content += \"@supports (\".concat(item[4], \") {\");\n      }\n\n      if (item[2]) {\n        content += \"@media \".concat(item[2], \" {\");\n      }\n\n      if (needLayer) {\n        content += \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\");\n      }\n\n      content += cssWithMappingToString(item);\n\n      if (needLayer) {\n        content += \"}\";\n      }\n\n      if (item[2]) {\n        content += \"}\";\n      }\n\n      if (item[4]) {\n        content += \"}\";\n      }\n\n      return content;\n    }).join(\"\");\n  }; // import a list of modules into the list\n\n\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === \"string\") {\n      modules = [[null, modules, undefined]];\n    }\n\n    var alreadyImportedModules = {};\n\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n\n      if (typeof layer !== \"undefined\") {\n        if (typeof item[5] === \"undefined\") {\n          item[5] = layer;\n        } else {\n          item[1] = \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\").concat(item[1], \"}\");\n          item[5] = layer;\n        }\n      }\n\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = \"@media \".concat(item[2], \" {\").concat(item[1], \"}\");\n          item[2] = media;\n        }\n      }\n\n      if (supports) {\n        if (!item[4]) {\n          item[4] = \"\".concat(supports);\n        } else {\n          item[1] = \"@supports (\".concat(item[4], \") {\").concat(item[1], \"}\");\n          item[4] = supports;\n        }\n      }\n\n      list.push(item);\n    }\n  };\n\n  return list;\n};","\"use strict\";\n\nmodule.exports = function (item) {\n  var content = item[1];\n  var cssMapping = item[3];\n\n  if (!cssMapping) {\n    return content;\n  }\n\n  if (typeof btoa === \"function\") {\n    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));\n    var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n    var sourceMapping = \"/*# \".concat(data, \" */\");\n    var sourceURLs = cssMapping.sources.map(function (source) {\n      return \"/*# sourceURL=\".concat(cssMapping.sourceRoot || \"\").concat(source, \" */\");\n    });\n    return [content].concat(sourceURLs).concat([sourceMapping]).join(\"\\n\");\n  }\n\n  return [content].join(\"\\n\");\n};","\"use strict\";\n\nvar stylesInDOM = [];\n\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n\n  return result;\n}\n\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n\n    identifiers.push(identifier);\n  }\n\n  return identifiers;\n}\n\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n\n  return updater;\n}\n\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n\n    var newLastIdentifiers = modulesToDom(newList, options);\n\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n\n      var _index = getIndexByIdentifier(_identifier);\n\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n\n    lastIdentifiers = newLastIdentifiers;\n  };\n};","\"use strict\";\n\nvar memo = {};\n/* istanbul ignore next  */\n\nfunction getTarget(target) {\n  if (typeof memo[target] === \"undefined\") {\n    var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n\n    memo[target] = styleTarget;\n  }\n\n  return memo[target];\n}\n/* istanbul ignore next  */\n\n\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n\n  if (!target) {\n    throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n  }\n\n  target.appendChild(style);\n}\n\nmodule.exports = insertBySelector;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement(\"style\");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\n\nmodule.exports = insertStyleElement;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce = typeof __webpack_nonce__ !== \"undefined\" ? __webpack_nonce__ : null;\n\n  if (nonce) {\n    styleElement.setAttribute(\"nonce\", nonce);\n  }\n}\n\nmodule.exports = setAttributesWithoutAttributes;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = \"\";\n\n  if (obj.supports) {\n    css += \"@supports (\".concat(obj.supports, \") {\");\n  }\n\n  if (obj.media) {\n    css += \"@media \".concat(obj.media, \" {\");\n  }\n\n  var needLayer = typeof obj.layer !== \"undefined\";\n\n  if (needLayer) {\n    css += \"@layer\".concat(obj.layer.length > 0 ? \" \".concat(obj.layer) : \"\", \" {\");\n  }\n\n  css += obj.css;\n\n  if (needLayer) {\n    css += \"}\";\n  }\n\n  if (obj.media) {\n    css += \"}\";\n  }\n\n  if (obj.supports) {\n    css += \"}\";\n  }\n\n  var sourceMap = obj.sourceMap;\n\n  if (sourceMap && typeof btoa !== \"undefined\") {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  } // For old IE\n\n  /* istanbul ignore if  */\n\n\n  options.styleTagTransform(css, styleElement, options.options);\n}\n\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n\n  styleElement.parentNode.removeChild(styleElement);\n}\n/* istanbul ignore next  */\n\n\nfunction domAPI(options) {\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\n\nmodule.exports = domAPI;","\"use strict\";\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\n\nmodule.exports = styleTagTransform;","/**\n * @license\n * Copyright 2010-2021 Three.js Authors\n * SPDX-License-Identifier: MIT\n */\nconst REVISION = '135';\nconst MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };\nconst TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };\nconst CullFaceNone = 0;\nconst CullFaceBack = 1;\nconst CullFaceFront = 2;\nconst CullFaceFrontBack = 3;\nconst BasicShadowMap = 0;\nconst PCFShadowMap = 1;\nconst PCFSoftShadowMap = 2;\nconst VSMShadowMap = 3;\nconst FrontSide = 0;\nconst BackSide = 1;\nconst DoubleSide = 2;\nconst FlatShading = 1;\nconst SmoothShading = 2;\nconst NoBlending = 0;\nconst NormalBlending = 1;\nconst AdditiveBlending = 2;\nconst SubtractiveBlending = 3;\nconst MultiplyBlending = 4;\nconst CustomBlending = 5;\nconst AddEquation = 100;\nconst SubtractEquation = 101;\nconst ReverseSubtractEquation = 102;\nconst MinEquation = 103;\nconst MaxEquation = 104;\nconst ZeroFactor = 200;\nconst OneFactor = 201;\nconst SrcColorFactor = 202;\nconst OneMinusSrcColorFactor = 203;\nconst SrcAlphaFactor = 204;\nconst OneMinusSrcAlphaFactor = 205;\nconst DstAlphaFactor = 206;\nconst OneMinusDstAlphaFactor = 207;\nconst DstColorFactor = 208;\nconst OneMinusDstColorFactor = 209;\nconst SrcAlphaSaturateFactor = 210;\nconst NeverDepth = 0;\nconst AlwaysDepth = 1;\nconst LessDepth = 2;\nconst LessEqualDepth = 3;\nconst EqualDepth = 4;\nconst GreaterEqualDepth = 5;\nconst GreaterDepth = 6;\nconst NotEqualDepth = 7;\nconst MultiplyOperation = 0;\nconst MixOperation = 1;\nconst AddOperation = 2;\nconst NoToneMapping = 0;\nconst LinearToneMapping = 1;\nconst ReinhardToneMapping = 2;\nconst CineonToneMapping = 3;\nconst ACESFilmicToneMapping = 4;\nconst CustomToneMapping = 5;\n\nconst UVMapping = 300;\nconst CubeReflectionMapping = 301;\nconst CubeRefractionMapping = 302;\nconst EquirectangularReflectionMapping = 303;\nconst EquirectangularRefractionMapping = 304;\nconst CubeUVReflectionMapping = 306;\nconst CubeUVRefractionMapping = 307;\nconst RepeatWrapping = 1000;\nconst ClampToEdgeWrapping = 1001;\nconst MirroredRepeatWrapping = 1002;\nconst NearestFilter = 1003;\nconst NearestMipmapNearestFilter = 1004;\nconst NearestMipMapNearestFilter = 1004;\nconst NearestMipmapLinearFilter = 1005;\nconst NearestMipMapLinearFilter = 1005;\nconst LinearFilter = 1006;\nconst LinearMipmapNearestFilter = 1007;\nconst LinearMipMapNearestFilter = 1007;\nconst LinearMipmapLinearFilter = 1008;\nconst LinearMipMapLinearFilter = 1008;\nconst UnsignedByteType = 1009;\nconst ByteType = 1010;\nconst ShortType = 1011;\nconst UnsignedShortType = 1012;\nconst IntType = 1013;\nconst UnsignedIntType = 1014;\nconst FloatType = 1015;\nconst HalfFloatType = 1016;\nconst UnsignedShort4444Type = 1017;\nconst UnsignedShort5551Type = 1018;\nconst UnsignedShort565Type = 1019;\nconst UnsignedInt248Type = 1020;\nconst AlphaFormat = 1021;\nconst RGBFormat = 1022;\nconst RGBAFormat = 1023;\nconst LuminanceFormat = 1024;\nconst LuminanceAlphaFormat = 1025;\nconst RGBEFormat = RGBAFormat;\nconst DepthFormat = 1026;\nconst DepthStencilFormat = 1027;\nconst RedFormat = 1028;\nconst RedIntegerFormat = 1029;\nconst RGFormat = 1030;\nconst RGIntegerFormat = 1031;\nconst RGBIntegerFormat = 1032;\nconst RGBAIntegerFormat = 1033;\n\nconst RGB_S3TC_DXT1_Format = 33776;\nconst RGBA_S3TC_DXT1_Format = 33777;\nconst RGBA_S3TC_DXT3_Format = 33778;\nconst RGBA_S3TC_DXT5_Format = 33779;\nconst RGB_PVRTC_4BPPV1_Format = 35840;\nconst RGB_PVRTC_2BPPV1_Format = 35841;\nconst RGBA_PVRTC_4BPPV1_Format = 35842;\nconst RGBA_PVRTC_2BPPV1_Format = 35843;\nconst RGB_ETC1_Format = 36196;\nconst RGB_ETC2_Format = 37492;\nconst RGBA_ETC2_EAC_Format = 37496;\nconst RGBA_ASTC_4x4_Format = 37808;\nconst RGBA_ASTC_5x4_Format = 37809;\nconst RGBA_ASTC_5x5_Format = 37810;\nconst RGBA_ASTC_6x5_Format = 37811;\nconst RGBA_ASTC_6x6_Format = 37812;\nconst RGBA_ASTC_8x5_Format = 37813;\nconst RGBA_ASTC_8x6_Format = 37814;\nconst RGBA_ASTC_8x8_Format = 37815;\nconst RGBA_ASTC_10x5_Format = 37816;\nconst RGBA_ASTC_10x6_Format = 37817;\nconst RGBA_ASTC_10x8_Format = 37818;\nconst RGBA_ASTC_10x10_Format = 37819;\nconst RGBA_ASTC_12x10_Format = 37820;\nconst RGBA_ASTC_12x12_Format = 37821;\nconst RGBA_BPTC_Format = 36492;\nconst SRGB8_ALPHA8_ASTC_4x4_Format = 37840;\nconst SRGB8_ALPHA8_ASTC_5x4_Format = 37841;\nconst SRGB8_ALPHA8_ASTC_5x5_Format = 37842;\nconst SRGB8_ALPHA8_ASTC_6x5_Format = 37843;\nconst SRGB8_ALPHA8_ASTC_6x6_Format = 37844;\nconst SRGB8_ALPHA8_ASTC_8x5_Format = 37845;\nconst SRGB8_ALPHA8_ASTC_8x6_Format = 37846;\nconst SRGB8_ALPHA8_ASTC_8x8_Format = 37847;\nconst SRGB8_ALPHA8_ASTC_10x5_Format = 37848;\nconst SRGB8_ALPHA8_ASTC_10x6_Format = 37849;\nconst SRGB8_ALPHA8_ASTC_10x8_Format = 37850;\nconst SRGB8_ALPHA8_ASTC_10x10_Format = 37851;\nconst SRGB8_ALPHA8_ASTC_12x10_Format = 37852;\nconst SRGB8_ALPHA8_ASTC_12x12_Format = 37853;\nconst LoopOnce = 2200;\nconst LoopRepeat = 2201;\nconst LoopPingPong = 2202;\nconst InterpolateDiscrete = 2300;\nconst InterpolateLinear = 2301;\nconst InterpolateSmooth = 2302;\nconst ZeroCurvatureEnding = 2400;\nconst ZeroSlopeEnding = 2401;\nconst WrapAroundEnding = 2402;\nconst NormalAnimationBlendMode = 2500;\nconst AdditiveAnimationBlendMode = 2501;\nconst TrianglesDrawMode = 0;\nconst TriangleStripDrawMode = 1;\nconst TriangleFanDrawMode = 2;\nconst LinearEncoding = 3000;\nconst sRGBEncoding = 3001;\nconst GammaEncoding = 3007;\nconst RGBEEncoding = 3002;\nconst RGBM7Encoding = 3004;\nconst RGBM16Encoding = 3005;\nconst RGBDEncoding = 3006;\nconst BasicDepthPacking = 3200;\nconst RGBADepthPacking = 3201;\nconst TangentSpaceNormalMap = 0;\nconst ObjectSpaceNormalMap = 1;\n\nconst ZeroStencilOp = 0;\nconst KeepStencilOp = 7680;\nconst ReplaceStencilOp = 7681;\nconst IncrementStencilOp = 7682;\nconst DecrementStencilOp = 7683;\nconst IncrementWrapStencilOp = 34055;\nconst DecrementWrapStencilOp = 34056;\nconst InvertStencilOp = 5386;\n\nconst NeverStencilFunc = 512;\nconst LessStencilFunc = 513;\nconst EqualStencilFunc = 514;\nconst LessEqualStencilFunc = 515;\nconst GreaterStencilFunc = 516;\nconst NotEqualStencilFunc = 517;\nconst GreaterEqualStencilFunc = 518;\nconst AlwaysStencilFunc = 519;\n\nconst StaticDrawUsage = 35044;\nconst DynamicDrawUsage = 35048;\nconst StreamDrawUsage = 35040;\nconst StaticReadUsage = 35045;\nconst DynamicReadUsage = 35049;\nconst StreamReadUsage = 35041;\nconst StaticCopyUsage = 35046;\nconst DynamicCopyUsage = 35050;\nconst StreamCopyUsage = 35042;\n\nconst GLSL1 = '100';\nconst GLSL3 = '300 es';\n\n/**\n * https://github.com/mrdoob/eventdispatcher.js/\n */\n\nclass EventDispatcher {\n\n\taddEventListener( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) this._listeners = {};\n\n\t\tconst listeners = this._listeners;\n\n\t\tif ( listeners[ type ] === undefined ) {\n\n\t\t\tlisteners[ type ] = [];\n\n\t\t}\n\n\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\n\n\t\t\tlisteners[ type ].push( listener );\n\n\t\t}\n\n\t}\n\n\thasEventListener( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) return false;\n\n\t\tconst listeners = this._listeners;\n\n\t\treturn listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;\n\n\t}\n\n\tremoveEventListener( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) return;\n\n\t\tconst listeners = this._listeners;\n\t\tconst listenerArray = listeners[ type ];\n\n\t\tif ( listenerArray !== undefined ) {\n\n\t\t\tconst index = listenerArray.indexOf( listener );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\tlistenerArray.splice( index, 1 );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tdispatchEvent( event ) {\n\n\t\tif ( this._listeners === undefined ) return;\n\n\t\tconst listeners = this._listeners;\n\t\tconst listenerArray = listeners[ event.type ];\n\n\t\tif ( listenerArray !== undefined ) {\n\n\t\t\tevent.target = this;\n\n\t\t\t// Make a copy, in case listeners are removed while iterating.\n\t\t\tconst array = listenerArray.slice( 0 );\n\n\t\t\tfor ( let i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\tarray[ i ].call( this, event );\n\n\t\t\t}\n\n\t\t\tevent.target = null;\n\n\t\t}\n\n\t}\n\n}\n\nconst _lut = [];\n\nfor ( let i = 0; i < 256; i ++ ) {\n\n\t_lut[ i ] = ( i < 16 ? '0' : '' ) + ( i ).toString( 16 );\n\n}\n\nlet _seed = 1234567;\n\n\nconst DEG2RAD = Math.PI / 180;\nconst RAD2DEG = 180 / Math.PI;\n\n// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\nfunction generateUUID() {\n\n\tconst d0 = Math.random() * 0xffffffff | 0;\n\tconst d1 = Math.random() * 0xffffffff | 0;\n\tconst d2 = Math.random() * 0xffffffff | 0;\n\tconst d3 = Math.random() * 0xffffffff | 0;\n\tconst uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +\n\t\t\t_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +\n\t\t\t_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +\n\t\t\t_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];\n\n\t// .toUpperCase() here flattens concatenated strings to save heap memory space.\n\treturn uuid.toUpperCase();\n\n}\n\nfunction clamp( value, min, max ) {\n\n\treturn Math.max( min, Math.min( max, value ) );\n\n}\n\n// compute euclidian modulo of m % n\n// https://en.wikipedia.org/wiki/Modulo_operation\nfunction euclideanModulo( n, m ) {\n\n\treturn ( ( n % m ) + m ) % m;\n\n}\n\n// Linear mapping from range <a1, a2> to range <b1, b2>\nfunction mapLinear( x, a1, a2, b1, b2 ) {\n\n\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\n}\n\n// https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/\nfunction inverseLerp( x, y, value ) {\n\n\tif ( x !== y ) {\n\n\t\treturn ( value - x ) / ( y - x );\n\n\t} else {\n\n\t\treturn 0;\n\n\t}\n\n}\n\n// https://en.wikipedia.org/wiki/Linear_interpolation\nfunction lerp( x, y, t ) {\n\n\treturn ( 1 - t ) * x + t * y;\n\n}\n\n// http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/\nfunction damp( x, y, lambda, dt ) {\n\n\treturn lerp( x, y, 1 - Math.exp( - lambda * dt ) );\n\n}\n\n// https://www.desmos.com/calculator/vcsjnyz7x4\nfunction pingpong( x, length = 1 ) {\n\n\treturn length - Math.abs( euclideanModulo( x, length * 2 ) - length );\n\n}\n\n// http://en.wikipedia.org/wiki/Smoothstep\nfunction smoothstep( x, min, max ) {\n\n\tif ( x <= min ) return 0;\n\tif ( x >= max ) return 1;\n\n\tx = ( x - min ) / ( max - min );\n\n\treturn x * x * ( 3 - 2 * x );\n\n}\n\nfunction smootherstep( x, min, max ) {\n\n\tif ( x <= min ) return 0;\n\tif ( x >= max ) return 1;\n\n\tx = ( x - min ) / ( max - min );\n\n\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\n}\n\n// Random integer from <low, high> interval\nfunction randInt( low, high ) {\n\n\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\n}\n\n// Random float from <low, high> interval\nfunction randFloat( low, high ) {\n\n\treturn low + Math.random() * ( high - low );\n\n}\n\n// Random float from <-range/2, range/2> interval\nfunction randFloatSpread( range ) {\n\n\treturn range * ( 0.5 - Math.random() );\n\n}\n\n// Deterministic pseudo-random float in the interval [ 0, 1 ]\nfunction seededRandom( s ) {\n\n\tif ( s !== undefined ) _seed = s % 2147483647;\n\n\t// Park-Miller algorithm\n\n\t_seed = _seed * 16807 % 2147483647;\n\n\treturn ( _seed - 1 ) / 2147483646;\n\n}\n\nfunction degToRad( degrees ) {\n\n\treturn degrees * DEG2RAD;\n\n}\n\nfunction radToDeg( radians ) {\n\n\treturn radians * RAD2DEG;\n\n}\n\nfunction isPowerOfTwo( value ) {\n\n\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n}\n\nfunction ceilPowerOfTwo( value ) {\n\n\treturn Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );\n\n}\n\nfunction floorPowerOfTwo( value ) {\n\n\treturn Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );\n\n}\n\nfunction setQuaternionFromProperEuler( q, a, b, c, order ) {\n\n\t// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles\n\n\t// rotations are applied to the axes in the order specified by 'order'\n\t// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'\n\t// angles are in radians\n\n\tconst cos = Math.cos;\n\tconst sin = Math.sin;\n\n\tconst c2 = cos( b / 2 );\n\tconst s2 = sin( b / 2 );\n\n\tconst c13 = cos( ( a + c ) / 2 );\n\tconst s13 = sin( ( a + c ) / 2 );\n\n\tconst c1_3 = cos( ( a - c ) / 2 );\n\tconst s1_3 = sin( ( a - c ) / 2 );\n\n\tconst c3_1 = cos( ( c - a ) / 2 );\n\tconst s3_1 = sin( ( c - a ) / 2 );\n\n\tswitch ( order ) {\n\n\t\tcase 'XYX':\n\t\t\tq.set( c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'YZY':\n\t\t\tq.set( s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'ZXZ':\n\t\t\tq.set( s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'XZX':\n\t\t\tq.set( c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'YXY':\n\t\t\tq.set( s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'ZYZ':\n\t\t\tq.set( s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13 );\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tconsole.warn( 'THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order );\n\n\t}\n\n}\n\nvar MathUtils = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tDEG2RAD: DEG2RAD,\n\tRAD2DEG: RAD2DEG,\n\tgenerateUUID: generateUUID,\n\tclamp: clamp,\n\teuclideanModulo: euclideanModulo,\n\tmapLinear: mapLinear,\n\tinverseLerp: inverseLerp,\n\tlerp: lerp,\n\tdamp: damp,\n\tpingpong: pingpong,\n\tsmoothstep: smoothstep,\n\tsmootherstep: smootherstep,\n\trandInt: randInt,\n\trandFloat: randFloat,\n\trandFloatSpread: randFloatSpread,\n\tseededRandom: seededRandom,\n\tdegToRad: degToRad,\n\tradToDeg: radToDeg,\n\tisPowerOfTwo: isPowerOfTwo,\n\tceilPowerOfTwo: ceilPowerOfTwo,\n\tfloorPowerOfTwo: floorPowerOfTwo,\n\tsetQuaternionFromProperEuler: setQuaternionFromProperEuler\n});\n\nclass Vector2 {\n\n\tconstructor( x = 0, y = 0 ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t}\n\n\tget width() {\n\n\t\treturn this.x;\n\n\t}\n\n\tset width( value ) {\n\n\t\tthis.x = value;\n\n\t}\n\n\tget height() {\n\n\t\treturn this.y;\n\n\t}\n\n\tset height( value ) {\n\n\t\tthis.y = value;\n\n\t}\n\n\tset( x, y ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetScalar( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\n\t\treturn this;\n\n\t}\n\n\tsetX( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t}\n\n\tsetY( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetComponent( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetComponent( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.x, this.y );\n\n\t}\n\n\tcopy( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\n\t\treturn this;\n\n\t}\n\n\tadd( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\treturn this.addVectors( v, w );\n\n\t\t}\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\n\t\treturn this;\n\n\t}\n\n\taddScalar( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\n\t\treturn this;\n\n\t}\n\n\taddVectors( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\n\t\treturn this;\n\n\t}\n\n\taddScaledVector( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\n\t\treturn this;\n\n\t}\n\n\tsub( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\treturn this.subVectors( v, w );\n\n\t\t}\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\n\t\treturn this;\n\n\t}\n\n\tsubScalar( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\n\t\treturn this;\n\n\t}\n\n\tsubVectors( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( v ) {\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyScalar( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\n\t\treturn this;\n\n\t}\n\n\tdivide( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\n\t\treturn this;\n\n\t}\n\n\tdivideScalar( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t}\n\n\tapplyMatrix3( m ) {\n\n\t\tconst x = this.x, y = this.y;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];\n\n\t\treturn this;\n\n\t}\n\n\tmin( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\n\t\treturn this;\n\n\t}\n\n\tmax( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\n\t\treturn this;\n\n\t}\n\n\tclamp( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampScalar( minVal, maxVal ) {\n\n\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampLength( min, max ) {\n\n\t\tconst length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t}\n\n\tfloor() {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\n\t\treturn this;\n\n\t}\n\n\tceil() {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\n\t\treturn this;\n\n\t}\n\n\tround() {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\n\t\treturn this;\n\n\t}\n\n\troundToZero() {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\n\t\treturn this;\n\n\t}\n\n\tnegate() {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\n\t\treturn this;\n\n\t}\n\n\tdot( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y;\n\n\t}\n\n\tcross( v ) {\n\n\t\treturn this.x * v.y - this.y * v.x;\n\n\t}\n\n\tlengthSq() {\n\n\t\treturn this.x * this.x + this.y * this.y;\n\n\t}\n\n\tlength() {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\n\t}\n\n\tmanhattanLength() {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y );\n\n\t}\n\n\tnormalize() {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t}\n\n\tangle() {\n\n\t\t// computes the angle in radians with respect to the positive x-axis\n\n\t\tconst angle = Math.atan2( - this.y, - this.x ) + Math.PI;\n\n\t\treturn angle;\n\n\t}\n\n\tdistanceTo( v ) {\n\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t}\n\n\tdistanceToSquared( v ) {\n\n\t\tconst dx = this.x - v.x, dy = this.y - v.y;\n\t\treturn dx * dx + dy * dy;\n\n\t}\n\n\tmanhattanDistanceTo( v ) {\n\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\n\n\t}\n\n\tsetLength( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t}\n\n\tlerp( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tlerpVectors( v1, v2, alpha ) {\n\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tequals( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\n\t\treturn array;\n\n\t}\n\n\tfromBufferAttribute( attribute, index, offset ) {\n\n\t\tif ( offset !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector2: offset has been removed from .fromBufferAttribute().' );\n\n\t\t}\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\n\t\treturn this;\n\n\t}\n\n\trotateAround( center, angle ) {\n\n\t\tconst c = Math.cos( angle ), s = Math.sin( angle );\n\n\t\tconst x = this.x - center.x;\n\t\tconst y = this.y - center.y;\n\n\t\tthis.x = x * c - y * s + center.x;\n\t\tthis.y = x * s + y * c + center.y;\n\n\t\treturn this;\n\n\t}\n\n\trandom() {\n\n\t\tthis.x = Math.random();\n\t\tthis.y = Math.random();\n\n\t\treturn this;\n\n\t}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this.x;\n\t\tyield this.y;\n\n\t}\n\n}\n\nVector2.prototype.isVector2 = true;\n\nclass Matrix3 {\n\n\tconstructor() {\n\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t\t0, 0, 1\n\n\t\t];\n\n\t\tif ( arguments.length > 0 ) {\n\n\t\t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\n\n\t\t}\n\n\t}\n\n\tset( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\n\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\n\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\n\n\t\treturn this;\n\n\t}\n\n\tidentity() {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t\t0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tcopy( m ) {\n\n\t\tconst te = this.elements;\n\t\tconst me = m.elements;\n\n\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];\n\t\tte[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];\n\t\tte[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];\n\n\t\treturn this;\n\n\t}\n\n\textractBasis( xAxis, yAxis, zAxis ) {\n\n\t\txAxis.setFromMatrix3Column( this, 0 );\n\t\tyAxis.setFromMatrix3Column( this, 1 );\n\t\tzAxis.setFromMatrix3Column( this, 2 );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromMatrix4( m ) {\n\n\t\tconst me = m.elements;\n\n\t\tthis.set(\n\n\t\t\tme[ 0 ], me[ 4 ], me[ 8 ],\n\t\t\tme[ 1 ], me[ 5 ], me[ 9 ],\n\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( m ) {\n\n\t\treturn this.multiplyMatrices( this, m );\n\n\t}\n\n\tpremultiply( m ) {\n\n\t\treturn this.multiplyMatrices( m, this );\n\n\t}\n\n\tmultiplyMatrices( a, b ) {\n\n\t\tconst ae = a.elements;\n\t\tconst be = b.elements;\n\t\tconst te = this.elements;\n\n\t\tconst a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];\n\t\tconst a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];\n\t\tconst a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];\n\n\t\tconst b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];\n\t\tconst b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];\n\t\tconst b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];\n\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;\n\t\tte[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;\n\t\tte[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;\n\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;\n\t\tte[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;\n\t\tte[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;\n\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;\n\t\tte[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;\n\t\tte[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyScalar( s ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\n\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\n\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\n\n\t\treturn this;\n\n\t}\n\n\tdeterminant() {\n\n\t\tconst te = this.elements;\n\n\t\tconst a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\n\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\n\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\n\n\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\n\t}\n\n\tinvert() {\n\n\t\tconst te = this.elements,\n\n\t\t\tn11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ],\n\t\t\tn12 = te[ 3 ], n22 = te[ 4 ], n32 = te[ 5 ],\n\t\t\tn13 = te[ 6 ], n23 = te[ 7 ], n33 = te[ 8 ],\n\n\t\t\tt11 = n33 * n22 - n32 * n23,\n\t\t\tt12 = n32 * n13 - n33 * n12,\n\t\t\tt13 = n23 * n12 - n22 * n13,\n\n\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\n\t\tif ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0 );\n\n\t\tconst detInv = 1 / det;\n\n\t\tte[ 0 ] = t11 * detInv;\n\t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\n\t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\n\n\t\tte[ 3 ] = t12 * detInv;\n\t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\n\t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\n\n\t\tte[ 6 ] = t13 * detInv;\n\t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\n\t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\n\n\t\treturn this;\n\n\t}\n\n\ttranspose() {\n\n\t\tlet tmp;\n\t\tconst m = this.elements;\n\n\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\n\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\n\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\n\n\t\treturn this;\n\n\t}\n\n\tgetNormalMatrix( matrix4 ) {\n\n\t\treturn this.setFromMatrix4( matrix4 ).invert().transpose();\n\n\t}\n\n\ttransposeIntoArray( r ) {\n\n\t\tconst m = this.elements;\n\n\t\tr[ 0 ] = m[ 0 ];\n\t\tr[ 1 ] = m[ 3 ];\n\t\tr[ 2 ] = m[ 6 ];\n\t\tr[ 3 ] = m[ 1 ];\n\t\tr[ 4 ] = m[ 4 ];\n\t\tr[ 5 ] = m[ 7 ];\n\t\tr[ 6 ] = m[ 2 ];\n\t\tr[ 7 ] = m[ 5 ];\n\t\tr[ 8 ] = m[ 8 ];\n\n\t\treturn this;\n\n\t}\n\n\tsetUvTransform( tx, ty, sx, sy, rotation, cx, cy ) {\n\n\t\tconst c = Math.cos( rotation );\n\t\tconst s = Math.sin( rotation );\n\n\t\tthis.set(\n\t\t\tsx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,\n\t\t\t- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,\n\t\t\t0, 0, 1\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tscale( sx, sy ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] *= sx; te[ 3 ] *= sx; te[ 6 ] *= sx;\n\t\tte[ 1 ] *= sy; te[ 4 ] *= sy; te[ 7 ] *= sy;\n\n\t\treturn this;\n\n\t}\n\n\trotate( theta ) {\n\n\t\tconst c = Math.cos( theta );\n\t\tconst s = Math.sin( theta );\n\n\t\tconst te = this.elements;\n\n\t\tconst a11 = te[ 0 ], a12 = te[ 3 ], a13 = te[ 6 ];\n\t\tconst a21 = te[ 1 ], a22 = te[ 4 ], a23 = te[ 7 ];\n\n\t\tte[ 0 ] = c * a11 + s * a21;\n\t\tte[ 3 ] = c * a12 + s * a22;\n\t\tte[ 6 ] = c * a13 + s * a23;\n\n\t\tte[ 1 ] = - s * a11 + c * a21;\n\t\tte[ 4 ] = - s * a12 + c * a22;\n\t\tte[ 7 ] = - s * a13 + c * a23;\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( tx, ty ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] += tx * te[ 2 ]; te[ 3 ] += tx * te[ 5 ]; te[ 6 ] += tx * te[ 8 ];\n\t\tte[ 1 ] += ty * te[ 2 ]; te[ 4 ] += ty * te[ 5 ]; te[ 7 ] += ty * te[ 8 ];\n\n\t\treturn this;\n\n\t}\n\n\tequals( matrix ) {\n\n\t\tconst te = this.elements;\n\t\tconst me = matrix.elements;\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tconst te = this.elements;\n\n\t\tarray[ offset ] = te[ 0 ];\n\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\tarray[ offset + 2 ] = te[ 2 ];\n\n\t\tarray[ offset + 3 ] = te[ 3 ];\n\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\tarray[ offset + 5 ] = te[ 5 ];\n\n\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\tarray[ offset + 7 ] = te[ 7 ];\n\t\tarray[ offset + 8 ] = te[ 8 ];\n\n\t\treturn array;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().fromArray( this.elements );\n\n\t}\n\n}\n\nMatrix3.prototype.isMatrix3 = true;\n\nfunction arrayMax( array ) {\n\n\tif ( array.length === 0 ) return - Infinity;\n\n\tlet max = array[ 0 ];\n\n\tfor ( let i = 1, l = array.length; i < l; ++ i ) {\n\n\t\tif ( array[ i ] > max ) max = array[ i ];\n\n\t}\n\n\treturn max;\n\n}\n\nconst TYPED_ARRAYS = {\n\tInt8Array: Int8Array,\n\tUint8Array: Uint8Array,\n\tUint8ClampedArray: Uint8ClampedArray,\n\tInt16Array: Int16Array,\n\tUint16Array: Uint16Array,\n\tInt32Array: Int32Array,\n\tUint32Array: Uint32Array,\n\tFloat32Array: Float32Array,\n\tFloat64Array: Float64Array\n};\n\nfunction getTypedArray( type, buffer ) {\n\n\treturn new TYPED_ARRAYS[ type ]( buffer );\n\n}\n\nfunction createElementNS( name ) {\n\n\treturn document.createElementNS( 'http://www.w3.org/1999/xhtml', name );\n\n}\n\n/**\n  * cyrb53 hash for string from: https://stackoverflow.com/a/52171480\n  *\n  * Public Domain, @bryc - https://stackoverflow.com/users/815680/bryc\n  *\n  * It is roughly similar to the well-known MurmurHash/xxHash algorithms. It uses a combination\n  * of multiplication and Xorshift to generate the hash, but not as thorough. As a result it's\n  * faster than either would be in JavaScript and significantly simpler to implement. Keep in\n  * mind this is not a secure algorithm, if privacy/security is a concern, this is not for you.\n  *\n  * @param {string} str\n  * @param {number} seed, default 0\n  * @returns number\n  */\nfunction hashString( str, seed = 0 ) {\n\n\tlet h1 = 0xdeadbeef ^ seed, h2 = 0x41c6ce57 ^ seed;\n\n\tfor ( let i = 0, ch; i < str.length; i ++ ) {\n\n\t\tch = str.charCodeAt( i );\n\n\t\th1 = Math.imul( h1 ^ ch, 2654435761 );\n\n\t\th2 = Math.imul( h2 ^ ch, 1597334677 );\n\n\t}\n\n\th1 = Math.imul( h1 ^ ( h1 >>> 16 ), 2246822507 ) ^ Math.imul( h2 ^ ( h2 >>> 13 ), 3266489909 );\n\n\th2 = Math.imul( h2 ^ ( h2 >>> 16 ), 2246822507 ) ^ Math.imul( h1 ^ ( h1 >>> 13 ), 3266489909 );\n\n\treturn 4294967296 * ( 2097151 & h2 ) + ( h1 >>> 0 );\n\n}\n\nlet _canvas;\n\nclass ImageUtils {\n\n\tstatic getDataURL( image ) {\n\n\t\tif ( /^data:/i.test( image.src ) ) {\n\n\t\t\treturn image.src;\n\n\t\t}\n\n\t\tif ( typeof HTMLCanvasElement == 'undefined' ) {\n\n\t\t\treturn image.src;\n\n\t\t}\n\n\t\tlet canvas;\n\n\t\tif ( image instanceof HTMLCanvasElement ) {\n\n\t\t\tcanvas = image;\n\n\t\t} else {\n\n\t\t\tif ( _canvas === undefined ) _canvas = createElementNS( 'canvas' );\n\n\t\t\t_canvas.width = image.width;\n\t\t\t_canvas.height = image.height;\n\n\t\t\tconst context = _canvas.getContext( '2d' );\n\n\t\t\tif ( image instanceof ImageData ) {\n\n\t\t\t\tcontext.putImageData( image, 0, 0 );\n\n\t\t\t} else {\n\n\t\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height );\n\n\t\t\t}\n\n\t\t\tcanvas = _canvas;\n\n\t\t}\n\n\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\n\n\t\t\tconsole.warn( 'THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons', image );\n\n\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\n\n\t\t} else {\n\n\t\t\treturn canvas.toDataURL( 'image/png' );\n\n\t\t}\n\n\t}\n\n}\n\nlet textureId = 0;\n\nclass Texture extends EventDispatcher {\n\n\tconstructor( image = Texture.DEFAULT_IMAGE, mapping = Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy = 1, encoding = LinearEncoding ) {\n\n\t\tsuper();\n\n\t\tObject.defineProperty( this, 'id', { value: textureId ++ } );\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.name = '';\n\n\t\tthis.image = image;\n\t\tthis.mipmaps = [];\n\n\t\tthis.mapping = mapping;\n\n\t\tthis.wrapS = wrapS;\n\t\tthis.wrapT = wrapT;\n\n\t\tthis.magFilter = magFilter;\n\t\tthis.minFilter = minFilter;\n\n\t\tthis.anisotropy = anisotropy;\n\n\t\tthis.format = format;\n\t\tthis.internalFormat = null;\n\t\tthis.type = type;\n\n\t\tthis.offset = new Vector2( 0, 0 );\n\t\tthis.repeat = new Vector2( 1, 1 );\n\t\tthis.center = new Vector2( 0, 0 );\n\t\tthis.rotation = 0;\n\n\t\tthis.matrixAutoUpdate = true;\n\t\tthis.matrix = new Matrix3();\n\n\t\tthis.generateMipmaps = true;\n\t\tthis.premultiplyAlpha = false;\n\t\tthis.flipY = true;\n\t\tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\n\t\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\n\t\t//\n\t\t// Also changing the encoding after already used by a Material will not automatically make the Material\n\t\t// update. You need to explicitly call Material.needsUpdate to trigger it to recompile.\n\t\tthis.encoding = encoding;\n\n\t\tthis.userData = {};\n\n\t\tthis.version = 0;\n\t\tthis.onUpdate = null;\n\n\t\tthis.isRenderTargetTexture = false;\n\n\t}\n\n\tupdateMatrix() {\n\n\t\tthis.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.image = source.image;\n\t\tthis.mipmaps = source.mipmaps.slice( 0 );\n\n\t\tthis.mapping = source.mapping;\n\n\t\tthis.wrapS = source.wrapS;\n\t\tthis.wrapT = source.wrapT;\n\n\t\tthis.magFilter = source.magFilter;\n\t\tthis.minFilter = source.minFilter;\n\n\t\tthis.anisotropy = source.anisotropy;\n\n\t\tthis.format = source.format;\n\t\tthis.internalFormat = source.internalFormat;\n\t\tthis.type = source.type;\n\n\t\tthis.offset.copy( source.offset );\n\t\tthis.repeat.copy( source.repeat );\n\t\tthis.center.copy( source.center );\n\t\tthis.rotation = source.rotation;\n\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\tthis.matrix.copy( source.matrix );\n\n\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\tthis.flipY = source.flipY;\n\t\tthis.unpackAlignment = source.unpackAlignment;\n\t\tthis.encoding = source.encoding;\n\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tif ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {\n\n\t\t\treturn meta.textures[ this.uuid ];\n\n\t\t}\n\n\t\tconst output = {\n\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Texture',\n\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t},\n\n\t\t\tuuid: this.uuid,\n\t\t\tname: this.name,\n\n\t\t\tmapping: this.mapping,\n\n\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\n\t\t\toffset: [ this.offset.x, this.offset.y ],\n\t\t\tcenter: [ this.center.x, this.center.y ],\n\t\t\trotation: this.rotation,\n\n\t\t\twrap: [ this.wrapS, this.wrapT ],\n\n\t\t\tformat: this.format,\n\t\t\ttype: this.type,\n\t\t\tencoding: this.encoding,\n\n\t\t\tminFilter: this.minFilter,\n\t\t\tmagFilter: this.magFilter,\n\t\t\tanisotropy: this.anisotropy,\n\n\t\t\tflipY: this.flipY,\n\n\t\t\tpremultiplyAlpha: this.premultiplyAlpha,\n\t\t\tunpackAlignment: this.unpackAlignment\n\n\t\t};\n\n\t\tif ( this.image !== undefined ) {\n\n\t\t\t// TODO: Move to THREE.Image\n\n\t\t\tconst image = this.image;\n\n\t\t\tif ( image.uuid === undefined ) {\n\n\t\t\t\timage.uuid = generateUUID(); // UGH\n\n\t\t\t}\n\n\t\t\tif ( ! isRootObject && meta.images[ image.uuid ] === undefined ) {\n\n\t\t\t\tlet url;\n\n\t\t\t\tif ( Array.isArray( image ) ) {\n\n\t\t\t\t\t// process array of images e.g. CubeTexture\n\n\t\t\t\t\turl = [];\n\n\t\t\t\t\tfor ( let i = 0, l = image.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t// check cube texture with data textures\n\n\t\t\t\t\t\tif ( image[ i ].isDataTexture ) {\n\n\t\t\t\t\t\t\turl.push( serializeImage( image[ i ].image ) );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\turl.push( serializeImage( image[ i ] ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// process single image\n\n\t\t\t\t\turl = serializeImage( image );\n\n\t\t\t\t}\n\n\t\t\t\tmeta.images[ image.uuid ] = {\n\t\t\t\t\tuuid: image.uuid,\n\t\t\t\t\turl: url\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\toutput.image = image.uuid;\n\n\t\t}\n\n\t\tif ( JSON.stringify( this.userData ) !== '{}' ) output.userData = this.userData;\n\n\t\tif ( ! isRootObject ) {\n\n\t\t\tmeta.textures[ this.uuid ] = output;\n\n\t\t}\n\n\t\treturn output;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n\ttransformUv( uv ) {\n\n\t\tif ( this.mapping !== UVMapping ) return uv;\n\n\t\tuv.applyMatrix3( this.matrix );\n\n\t\tif ( uv.x < 0 || uv.x > 1 ) {\n\n\t\t\tswitch ( this.wrapS ) {\n\n\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( uv.y < 0 || uv.y > 1 ) {\n\n\t\t\tswitch ( this.wrapT ) {\n\n\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.flipY ) {\n\n\t\t\tuv.y = 1 - uv.y;\n\n\t\t}\n\n\t\treturn uv;\n\n\t}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n}\n\nTexture.DEFAULT_IMAGE = undefined;\nTexture.DEFAULT_MAPPING = UVMapping;\n\nTexture.prototype.isTexture = true;\n\nfunction serializeImage( image ) {\n\n\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\n\n\t\t// default images\n\n\t\treturn ImageUtils.getDataURL( image );\n\n\t} else {\n\n\t\tif ( image.data ) {\n\n\t\t\t// images of DataTexture\n\n\t\t\treturn {\n\t\t\t\tdata: Array.prototype.slice.call( image.data ),\n\t\t\t\twidth: image.width,\n\t\t\t\theight: image.height,\n\t\t\t\ttype: image.data.constructor.name\n\t\t\t};\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.Texture: Unable to serialize Texture.' );\n\t\t\treturn {};\n\n\t\t}\n\n\t}\n\n}\n\nclass Vector4 {\n\n\tconstructor( x = 0, y = 0, z = 0, w = 1 ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\tthis.w = w;\n\n\t}\n\n\tget width() {\n\n\t\treturn this.z;\n\n\t}\n\n\tset width( value ) {\n\n\t\tthis.z = value;\n\n\t}\n\n\tget height() {\n\n\t\treturn this.w;\n\n\t}\n\n\tset height( value ) {\n\n\t\tthis.w = value;\n\n\t}\n\n\tset( x, y, z, w ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\tthis.w = w;\n\n\t\treturn this;\n\n\t}\n\n\tsetScalar( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\t\tthis.z = scalar;\n\t\tthis.w = scalar;\n\n\t\treturn this;\n\n\t}\n\n\tsetX( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t}\n\n\tsetY( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetZ( z ) {\n\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetW( w ) {\n\n\t\tthis.w = w;\n\n\t\treturn this;\n\n\t}\n\n\tsetComponent( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tcase 2: this.z = value; break;\n\t\t\tcase 3: this.w = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetComponent( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tcase 2: return this.z;\n\t\t\tcase 3: return this.w;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\n\n\t}\n\n\tcopy( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\tthis.z = v.z;\n\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\n\n\t\treturn this;\n\n\t}\n\n\tadd( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\treturn this.addVectors( v, w );\n\n\t\t}\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\t\tthis.z += v.z;\n\t\tthis.w += v.w;\n\n\t\treturn this;\n\n\t}\n\n\taddScalar( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\t\tthis.z += s;\n\t\tthis.w += s;\n\n\t\treturn this;\n\n\t}\n\n\taddVectors( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\t\tthis.z = a.z + b.z;\n\t\tthis.w = a.w + b.w;\n\n\t\treturn this;\n\n\t}\n\n\taddScaledVector( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\t\tthis.z += v.z * s;\n\t\tthis.w += v.w * s;\n\n\t\treturn this;\n\n\t}\n\n\tsub( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\treturn this.subVectors( v, w );\n\n\t\t}\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\t\tthis.z -= v.z;\n\t\tthis.w -= v.w;\n\n\t\treturn this;\n\n\t}\n\n\tsubScalar( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\t\tthis.z -= s;\n\t\tthis.w -= s;\n\n\t\treturn this;\n\n\t}\n\n\tsubVectors( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\t\tthis.z = a.z - b.z;\n\t\tthis.w = a.w - b.w;\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( v ) {\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\t\tthis.z *= v.z;\n\t\tthis.w *= v.w;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyScalar( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\t\tthis.z *= scalar;\n\t\tthis.w *= scalar;\n\n\t\treturn this;\n\n\t}\n\n\tapplyMatrix4( m ) {\n\n\t\tconst x = this.x, y = this.y, z = this.z, w = this.w;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n\n\t\treturn this;\n\n\t}\n\n\tdivideScalar( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t}\n\n\tsetAxisAngleFromQuaternion( q ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\n\t\t// q is assumed to be normalized\n\n\t\tthis.w = 2 * Math.acos( q.w );\n\n\t\tconst s = Math.sqrt( 1 - q.w * q.w );\n\n\t\tif ( s < 0.0001 ) {\n\n\t\t\tthis.x = 1;\n\t\t\tthis.y = 0;\n\t\t\tthis.z = 0;\n\n\t\t} else {\n\n\t\t\tthis.x = q.x / s;\n\t\t\tthis.y = q.y / s;\n\t\t\tthis.z = q.z / s;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetAxisAngleFromRotationMatrix( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tlet angle, x, y, z; // variables for result\n\t\tconst epsilon = 0.01,\t\t// margin to allow for rounding errors\n\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n\n\t\t\tte = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\n\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\n\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\n\t\t\t// singularity found\n\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t// in leading diagonal and zero in other terms\n\n\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\n\t\t\t\t// this singularity is identity matrix so angle = 0\n\n\t\t\t\tthis.set( 1, 0, 0, 0 );\n\n\t\t\t\treturn this; // zero angle, arbitrary axis\n\n\t\t\t}\n\n\t\t\t// otherwise this singularity is angle = 180\n\n\t\t\tangle = Math.PI;\n\n\t\t\tconst xx = ( m11 + 1 ) / 2;\n\t\t\tconst yy = ( m22 + 1 ) / 2;\n\t\t\tconst zz = ( m33 + 1 ) / 2;\n\t\t\tconst xy = ( m12 + m21 ) / 4;\n\t\t\tconst xz = ( m13 + m31 ) / 4;\n\t\t\tconst yz = ( m23 + m32 ) / 4;\n\n\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\n\n\t\t\t\t// m11 is the largest diagonal term\n\n\t\t\t\tif ( xx < epsilon ) {\n\n\t\t\t\t\tx = 0;\n\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tx = Math.sqrt( xx );\n\t\t\t\t\ty = xy / x;\n\t\t\t\t\tz = xz / x;\n\n\t\t\t\t}\n\n\t\t\t} else if ( yy > zz ) {\n\n\t\t\t\t// m22 is the largest diagonal term\n\n\t\t\t\tif ( yy < epsilon ) {\n\n\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\ty = 0;\n\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ty = Math.sqrt( yy );\n\t\t\t\t\tx = xy / y;\n\t\t\t\t\tz = yz / y;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// m33 is the largest diagonal term so base result on this\n\n\t\t\t\tif ( zz < epsilon ) {\n\n\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\tz = 0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tz = Math.sqrt( zz );\n\t\t\t\t\tx = xz / z;\n\t\t\t\t\ty = yz / z;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.set( x, y, z, angle );\n\n\t\t\treturn this; // return 180 deg rotation\n\n\t\t}\n\n\t\t// as we have reached here there are no singularities so we can handle normally\n\n\t\tlet s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\n\t\t\t( m13 - m31 ) * ( m13 - m31 ) +\n\t\t\t( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\n\t\tif ( Math.abs( s ) < 0.001 ) s = 1;\n\n\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\tthis.x = ( m32 - m23 ) / s;\n\t\tthis.y = ( m13 - m31 ) / s;\n\t\tthis.z = ( m21 - m12 ) / s;\n\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\n\t\treturn this;\n\n\t}\n\n\tmin( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\t\tthis.z = Math.min( this.z, v.z );\n\t\tthis.w = Math.min( this.w, v.w );\n\n\t\treturn this;\n\n\t}\n\n\tmax( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\t\tthis.z = Math.max( this.z, v.z );\n\t\tthis.w = Math.max( this.w, v.w );\n\n\t\treturn this;\n\n\t}\n\n\tclamp( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampScalar( minVal, maxVal ) {\n\n\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\n\t\tthis.w = Math.max( minVal, Math.min( maxVal, this.w ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampLength( min, max ) {\n\n\t\tconst length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t}\n\n\tfloor() {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\t\tthis.z = Math.floor( this.z );\n\t\tthis.w = Math.floor( this.w );\n\n\t\treturn this;\n\n\t}\n\n\tceil() {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\t\tthis.z = Math.ceil( this.z );\n\t\tthis.w = Math.ceil( this.w );\n\n\t\treturn this;\n\n\t}\n\n\tround() {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\t\tthis.z = Math.round( this.z );\n\t\tthis.w = Math.round( this.w );\n\n\t\treturn this;\n\n\t}\n\n\troundToZero() {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\n\n\t\treturn this;\n\n\t}\n\n\tnegate() {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\t\tthis.z = - this.z;\n\t\tthis.w = - this.w;\n\n\t\treturn this;\n\n\t}\n\n\tdot( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\n\t}\n\n\tlengthSq() {\n\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\n\t}\n\n\tlength() {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\n\t}\n\n\tmanhattanLength() {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\n\t}\n\n\tnormalize() {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t}\n\n\tsetLength( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t}\n\n\tlerp( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\tthis.z += ( v.z - this.z ) * alpha;\n\t\tthis.w += ( v.w - this.w ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tlerpVectors( v1, v2, alpha ) {\n\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\n\t\tthis.z = v1.z + ( v2.z - v1.z ) * alpha;\n\t\tthis.w = v1.w + ( v2.w - v1.w ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tequals( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\t\tthis.z = array[ offset + 2 ];\n\t\tthis.w = array[ offset + 3 ];\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\t\tarray[ offset + 2 ] = this.z;\n\t\tarray[ offset + 3 ] = this.w;\n\n\t\treturn array;\n\n\t}\n\n\tfromBufferAttribute( attribute, index, offset ) {\n\n\t\tif ( offset !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector4: offset has been removed from .fromBufferAttribute().' );\n\n\t\t}\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\t\tthis.z = attribute.getZ( index );\n\t\tthis.w = attribute.getW( index );\n\n\t\treturn this;\n\n\t}\n\n\trandom() {\n\n\t\tthis.x = Math.random();\n\t\tthis.y = Math.random();\n\t\tthis.z = Math.random();\n\t\tthis.w = Math.random();\n\n\t\treturn this;\n\n\t}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this.x;\n\t\tyield this.y;\n\t\tyield this.z;\n\t\tyield this.w;\n\n\t}\n\n}\n\nVector4.prototype.isVector4 = true;\n\n/*\n In options, we can specify:\n * Texture parameters for an auto-generated target texture\n * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n*/\nclass WebGLRenderTarget extends EventDispatcher {\n\n\tconstructor( width, height, options = {} ) {\n\n\t\tsuper();\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t\tthis.depth = 1;\n\n\t\tthis.scissor = new Vector4( 0, 0, width, height );\n\t\tthis.scissorTest = false;\n\n\t\tthis.viewport = new Vector4( 0, 0, width, height );\n\n\t\tthis.texture = new Texture( undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\n\t\tthis.texture.isRenderTargetTexture = true;\n\n\t\tthis.texture.image = { width: width, height: height, depth: 1 };\n\n\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\t\tthis.texture.internalFormat = options.internalFormat !== undefined ? options.internalFormat : null;\n\t\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\n\t\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\n\t\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : false;\n\t\tthis.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;\n\n\t}\n\n\tsetTexture( texture ) {\n\n\t\ttexture.image = {\n\t\t\twidth: this.width,\n\t\t\theight: this.height,\n\t\t\tdepth: this.depth\n\t\t};\n\n\t\tthis.texture = texture;\n\n\t}\n\n\tsetSize( width, height, depth = 1 ) {\n\n\t\tif ( this.width !== width || this.height !== height || this.depth !== depth ) {\n\n\t\t\tthis.width = width;\n\t\t\tthis.height = height;\n\t\t\tthis.depth = depth;\n\n\t\t\tthis.texture.image.width = width;\n\t\t\tthis.texture.image.height = height;\n\t\t\tthis.texture.image.depth = depth;\n\n\t\t\tthis.dispose();\n\n\t\t}\n\n\t\tthis.viewport.set( 0, 0, width, height );\n\t\tthis.scissor.set( 0, 0, width, height );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.width = source.width;\n\t\tthis.height = source.height;\n\t\tthis.depth = source.depth;\n\n\t\tthis.viewport.copy( source.viewport );\n\n\t\tthis.texture = source.texture.clone();\n\t\tthis.texture.image = { ...this.texture.image }; // See #20328.\n\n\t\tthis.depthBuffer = source.depthBuffer;\n\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\tthis.depthTexture = source.depthTexture;\n\n\t\treturn this;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n}\n\nWebGLRenderTarget.prototype.isWebGLRenderTarget = true;\n\nclass WebGLMultipleRenderTargets extends WebGLRenderTarget {\n\n\tconstructor( width, height, count ) {\n\n\t\tsuper( width, height );\n\n\t\tconst texture = this.texture;\n\n\t\tthis.texture = [];\n\n\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\tthis.texture[ i ] = texture.clone();\n\n\t\t}\n\n\t}\n\n\tsetSize( width, height, depth = 1 ) {\n\n\t\tif ( this.width !== width || this.height !== height || this.depth !== depth ) {\n\n\t\t\tthis.width = width;\n\t\t\tthis.height = height;\n\t\t\tthis.depth = depth;\n\n\t\t\tfor ( let i = 0, il = this.texture.length; i < il; i ++ ) {\n\n\t\t\t\tthis.texture[ i ].image.width = width;\n\t\t\t\tthis.texture[ i ].image.height = height;\n\t\t\t\tthis.texture[ i ].image.depth = depth;\n\n\t\t\t}\n\n\t\t\tthis.dispose();\n\n\t\t}\n\n\t\tthis.viewport.set( 0, 0, width, height );\n\t\tthis.scissor.set( 0, 0, width, height );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.dispose();\n\n\t\tthis.width = source.width;\n\t\tthis.height = source.height;\n\t\tthis.depth = source.depth;\n\n\t\tthis.viewport.set( 0, 0, this.width, this.height );\n\t\tthis.scissor.set( 0, 0, this.width, this.height );\n\n\t\tthis.depthBuffer = source.depthBuffer;\n\t\tthis.stencilBuffer = source.stencilBuffer;\n\t\tthis.depthTexture = source.depthTexture;\n\n\t\tthis.texture.length = 0;\n\n\t\tfor ( let i = 0, il = source.texture.length; i < il; i ++ ) {\n\n\t\t\tthis.texture[ i ] = source.texture[ i ].clone();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nWebGLMultipleRenderTargets.prototype.isWebGLMultipleRenderTargets = true;\n\nclass WebGLMultisampleRenderTarget extends WebGLRenderTarget {\n\n\tconstructor( width, height, options = {} ) {\n\n\t\tsuper( width, height, options );\n\n\t\tthis.samples = 4;\n\n\t\tthis.ignoreDepthForMultisampleCopy = options.ignoreDepth !== undefined ? options.ignoreDepth : true;\n\t\tthis.useRenderToTexture = ( options.useRenderToTexture !== undefined ) ? options.useRenderToTexture : false;\n\t\tthis.useRenderbuffer = this.useRenderToTexture === false;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy.call( this, source );\n\n\t\tthis.samples = source.samples;\n\t\tthis.useRenderToTexture = source.useRenderToTexture;\n\t\tthis.useRenderbuffer = source.useRenderbuffer;\n\n\t\treturn this;\n\n\t}\n\n}\n\nWebGLMultisampleRenderTarget.prototype.isWebGLMultisampleRenderTarget = true;\n\nclass Quaternion {\n\n\tconstructor( x = 0, y = 0, z = 0, w = 1 ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._w = w;\n\n\t}\n\n\tstatic slerp( qa, qb, qm, t ) {\n\n\t\tconsole.warn( 'THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead.' );\n\t\treturn qm.slerpQuaternions( qa, qb, t );\n\n\t}\n\n\tstatic slerpFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\n\t\t// fuzz-free, array-based Quaternion SLERP operation\n\n\t\tlet x0 = src0[ srcOffset0 + 0 ],\n\t\t\ty0 = src0[ srcOffset0 + 1 ],\n\t\t\tz0 = src0[ srcOffset0 + 2 ],\n\t\t\tw0 = src0[ srcOffset0 + 3 ];\n\n\t\tconst x1 = src1[ srcOffset1 + 0 ],\n\t\t\ty1 = src1[ srcOffset1 + 1 ],\n\t\t\tz1 = src1[ srcOffset1 + 2 ],\n\t\t\tw1 = src1[ srcOffset1 + 3 ];\n\n\t\tif ( t === 0 ) {\n\n\t\t\tdst[ dstOffset + 0 ] = x0;\n\t\t\tdst[ dstOffset + 1 ] = y0;\n\t\t\tdst[ dstOffset + 2 ] = z0;\n\t\t\tdst[ dstOffset + 3 ] = w0;\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( t === 1 ) {\n\n\t\t\tdst[ dstOffset + 0 ] = x1;\n\t\t\tdst[ dstOffset + 1 ] = y1;\n\t\t\tdst[ dstOffset + 2 ] = z1;\n\t\t\tdst[ dstOffset + 3 ] = w1;\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\n\t\t\tlet s = 1 - t;\n\t\t\tconst cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n\t\t\t\tsqrSin = 1 - cos * cos;\n\n\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n\t\t\tif ( sqrSin > Number.EPSILON ) {\n\n\t\t\t\tconst sin = Math.sqrt( sqrSin ),\n\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\n\t\t\t\ts = Math.sin( s * len ) / sin;\n\t\t\t\tt = Math.sin( t * len ) / sin;\n\n\t\t\t}\n\n\t\t\tconst tDir = t * dir;\n\n\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\tw0 = w0 * s + w1 * tDir;\n\n\t\t\t// Normalize in case we just did a lerp:\n\t\t\tif ( s === 1 - t ) {\n\n\t\t\t\tconst f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\n\t\t\t\tx0 *= f;\n\t\t\t\ty0 *= f;\n\t\t\t\tz0 *= f;\n\t\t\t\tw0 *= f;\n\n\t\t\t}\n\n\t\t}\n\n\t\tdst[ dstOffset ] = x0;\n\t\tdst[ dstOffset + 1 ] = y0;\n\t\tdst[ dstOffset + 2 ] = z0;\n\t\tdst[ dstOffset + 3 ] = w0;\n\n\t}\n\n\tstatic multiplyQuaternionsFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1 ) {\n\n\t\tconst x0 = src0[ srcOffset0 ];\n\t\tconst y0 = src0[ srcOffset0 + 1 ];\n\t\tconst z0 = src0[ srcOffset0 + 2 ];\n\t\tconst w0 = src0[ srcOffset0 + 3 ];\n\n\t\tconst x1 = src1[ srcOffset1 ];\n\t\tconst y1 = src1[ srcOffset1 + 1 ];\n\t\tconst z1 = src1[ srcOffset1 + 2 ];\n\t\tconst w1 = src1[ srcOffset1 + 3 ];\n\n\t\tdst[ dstOffset ] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;\n\t\tdst[ dstOffset + 1 ] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;\n\t\tdst[ dstOffset + 2 ] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;\n\t\tdst[ dstOffset + 3 ] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;\n\n\t\treturn dst;\n\n\t}\n\n\tget x() {\n\n\t\treturn this._x;\n\n\t}\n\n\tset x( value ) {\n\n\t\tthis._x = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget y() {\n\n\t\treturn this._y;\n\n\t}\n\n\tset y( value ) {\n\n\t\tthis._y = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget z() {\n\n\t\treturn this._z;\n\n\t}\n\n\tset z( value ) {\n\n\t\tthis._z = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget w() {\n\n\t\treturn this._w;\n\n\t}\n\n\tset w( value ) {\n\n\t\tthis._w = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tset( x, y, z, w ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._w = w;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\n\t}\n\n\tcopy( quaternion ) {\n\n\t\tthis._x = quaternion.x;\n\t\tthis._y = quaternion.y;\n\t\tthis._z = quaternion.z;\n\t\tthis._w = quaternion.w;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromEuler( euler, update ) {\n\n\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t}\n\n\t\tconst x = euler._x, y = euler._y, z = euler._z, order = euler._order;\n\n\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t//\tcontent/SpinCalc.m\n\n\t\tconst cos = Math.cos;\n\t\tconst sin = Math.sin;\n\n\t\tconst c1 = cos( x / 2 );\n\t\tconst c2 = cos( y / 2 );\n\t\tconst c3 = cos( z / 2 );\n\n\t\tconst s1 = sin( x / 2 );\n\t\tconst s2 = sin( y / 2 );\n\t\tconst s3 = sin( z / 2 );\n\n\t\tswitch ( order ) {\n\n\t\t\tcase 'XYZ':\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'YXZ':\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZXY':\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZYX':\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'YZX':\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'XZY':\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn( 'THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order );\n\n\t\t}\n\n\t\tif ( update !== false ) this._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromAxisAngle( axis, angle ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n\t\t// assumes axis is normalized\n\n\t\tconst halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n\t\tthis._x = axis.x * s;\n\t\tthis._y = axis.y * s;\n\t\tthis._z = axis.z * s;\n\t\tthis._w = Math.cos( halfAngle );\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromRotationMatrix( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tconst te = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\n\t\t\ttrace = m11 + m22 + m33;\n\n\t\tif ( trace > 0 ) {\n\n\t\t\tconst s = 0.5 / Math.sqrt( trace + 1.0 );\n\n\t\t\tthis._w = 0.25 / s;\n\t\t\tthis._x = ( m32 - m23 ) * s;\n\t\t\tthis._y = ( m13 - m31 ) * s;\n\t\t\tthis._z = ( m21 - m12 ) * s;\n\n\t\t} else if ( m11 > m22 && m11 > m33 ) {\n\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n\t\t\tthis._w = ( m32 - m23 ) / s;\n\t\t\tthis._x = 0.25 * s;\n\t\t\tthis._y = ( m12 + m21 ) / s;\n\t\t\tthis._z = ( m13 + m31 ) / s;\n\n\t\t} else if ( m22 > m33 ) {\n\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n\t\t\tthis._w = ( m13 - m31 ) / s;\n\t\t\tthis._x = ( m12 + m21 ) / s;\n\t\t\tthis._y = 0.25 * s;\n\t\t\tthis._z = ( m23 + m32 ) / s;\n\n\t\t} else {\n\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n\t\t\tthis._w = ( m21 - m12 ) / s;\n\t\t\tthis._x = ( m13 + m31 ) / s;\n\t\t\tthis._y = ( m23 + m32 ) / s;\n\t\t\tthis._z = 0.25 * s;\n\n\t\t}\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromUnitVectors( vFrom, vTo ) {\n\n\t\t// assumes direction vectors vFrom and vTo are normalized\n\n\t\tlet r = vFrom.dot( vTo ) + 1;\n\n\t\tif ( r < Number.EPSILON ) {\n\n\t\t\t// vFrom and vTo point in opposite directions\n\n\t\t\tr = 0;\n\n\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\n\t\t\t\tthis._x = - vFrom.y;\n\t\t\t\tthis._y = vFrom.x;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = r;\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = - vFrom.z;\n\t\t\t\tthis._z = vFrom.y;\n\t\t\t\tthis._w = r;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n\n\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n\t\t\tthis._w = r;\n\n\t\t}\n\n\t\treturn this.normalize();\n\n\t}\n\n\tangleTo( q ) {\n\n\t\treturn 2 * Math.acos( Math.abs( clamp( this.dot( q ), - 1, 1 ) ) );\n\n\t}\n\n\trotateTowards( q, step ) {\n\n\t\tconst angle = this.angleTo( q );\n\n\t\tif ( angle === 0 ) return this;\n\n\t\tconst t = Math.min( 1, step / angle );\n\n\t\tthis.slerp( q, t );\n\n\t\treturn this;\n\n\t}\n\n\tidentity() {\n\n\t\treturn this.set( 0, 0, 0, 1 );\n\n\t}\n\n\tinvert() {\n\n\t\t// quaternion is assumed to have unit length\n\n\t\treturn this.conjugate();\n\n\t}\n\n\tconjugate() {\n\n\t\tthis._x *= - 1;\n\t\tthis._y *= - 1;\n\t\tthis._z *= - 1;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tdot( v ) {\n\n\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\n\t}\n\n\tlengthSq() {\n\n\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n\t}\n\n\tlength() {\n\n\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n\t}\n\n\tnormalize() {\n\n\t\tlet l = this.length();\n\n\t\tif ( l === 0 ) {\n\n\t\t\tthis._x = 0;\n\t\t\tthis._y = 0;\n\t\t\tthis._z = 0;\n\t\t\tthis._w = 1;\n\n\t\t} else {\n\n\t\t\tl = 1 / l;\n\n\t\t\tthis._x = this._x * l;\n\t\t\tthis._y = this._y * l;\n\t\t\tthis._z = this._z * l;\n\t\t\tthis._w = this._w * l;\n\n\t\t}\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( q, p ) {\n\n\t\tif ( p !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\n\t\t\treturn this.multiplyQuaternions( q, p );\n\n\t\t}\n\n\t\treturn this.multiplyQuaternions( this, q );\n\n\t}\n\n\tpremultiply( q ) {\n\n\t\treturn this.multiplyQuaternions( q, this );\n\n\t}\n\n\tmultiplyQuaternions( a, b ) {\n\n\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n\t\tconst qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t\tconst qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tslerp( qb, t ) {\n\n\t\tif ( t === 0 ) return this;\n\t\tif ( t === 1 ) return this.copy( qb );\n\n\t\tconst x = this._x, y = this._y, z = this._z, w = this._w;\n\n\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\tlet cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\tif ( cosHalfTheta < 0 ) {\n\n\t\t\tthis._w = - qb._w;\n\t\t\tthis._x = - qb._x;\n\t\t\tthis._y = - qb._y;\n\t\t\tthis._z = - qb._z;\n\n\t\t\tcosHalfTheta = - cosHalfTheta;\n\n\t\t} else {\n\n\t\t\tthis.copy( qb );\n\n\t\t}\n\n\t\tif ( cosHalfTheta >= 1.0 ) {\n\n\t\t\tthis._w = w;\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n\t\tif ( sqrSinHalfTheta <= Number.EPSILON ) {\n\n\t\t\tconst s = 1 - t;\n\t\t\tthis._w = s * w + t * this._w;\n\t\t\tthis._x = s * x + t * this._x;\n\t\t\tthis._y = s * y + t * this._y;\n\t\t\tthis._z = s * z + t * this._z;\n\n\t\t\tthis.normalize();\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst sinHalfTheta = Math.sqrt( sqrSinHalfTheta );\n\t\tconst halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n\t\tconst ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n\t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t\tthis._z = ( z * ratioA + this._z * ratioB );\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tslerpQuaternions( qa, qb, t ) {\n\n\t\tthis.copy( qa ).slerp( qb, t );\n\n\t}\n\n\trandom() {\n\n\t\t// Derived from http://planning.cs.uiuc.edu/node198.html\n\t\t// Note, this source uses w, x, y, z ordering,\n\t\t// so we swap the order below.\n\n\t\tconst u1 = Math.random();\n\t\tconst sqrt1u1 = Math.sqrt( 1 - u1 );\n\t\tconst sqrtu1 = Math.sqrt( u1 );\n\n\t\tconst u2 = 2 * Math.PI * Math.random();\n\n\t\tconst u3 = 2 * Math.PI * Math.random();\n\n\t\treturn this.set(\n\t\t\tsqrt1u1 * Math.cos( u2 ),\n\t\t\tsqrtu1 * Math.sin( u3 ),\n\t\t\tsqrtu1 * Math.cos( u3 ),\n\t\t\tsqrt1u1 * Math.sin( u2 ),\n\t\t);\n\n\t}\n\n\tequals( quaternion ) {\n\n\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis._x = array[ offset ];\n\t\tthis._y = array[ offset + 1 ];\n\t\tthis._z = array[ offset + 2 ];\n\t\tthis._w = array[ offset + 3 ];\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._w;\n\n\t\treturn array;\n\n\t}\n\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis._x = attribute.getX( index );\n\t\tthis._y = attribute.getY( index );\n\t\tthis._z = attribute.getZ( index );\n\t\tthis._w = attribute.getW( index );\n\n\t\treturn this;\n\n\t}\n\n\t_onChange( callback ) {\n\n\t\tthis._onChangeCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\t_onChangeCallback() {}\n\n}\n\nQuaternion.prototype.isQuaternion = true;\n\nclass Vector3 {\n\n\tconstructor( x = 0, y = 0, z = 0 ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\n\t}\n\n\tset( x, y, z ) {\n\n\t\tif ( z === undefined ) z = this.z; // sprite.scale.set(x,y)\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetScalar( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\t\tthis.z = scalar;\n\n\t\treturn this;\n\n\t}\n\n\tsetX( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t}\n\n\tsetY( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetZ( z ) {\n\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetComponent( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tcase 2: this.z = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetComponent( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tcase 2: return this.z;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.x, this.y, this.z );\n\n\t}\n\n\tcopy( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\tthis.z = v.z;\n\n\t\treturn this;\n\n\t}\n\n\tadd( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\n\t\t\treturn this.addVectors( v, w );\n\n\t\t}\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\t\tthis.z += v.z;\n\n\t\treturn this;\n\n\t}\n\n\taddScalar( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\t\tthis.z += s;\n\n\t\treturn this;\n\n\t}\n\n\taddVectors( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\t\tthis.z = a.z + b.z;\n\n\t\treturn this;\n\n\t}\n\n\taddScaledVector( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\t\tthis.z += v.z * s;\n\n\t\treturn this;\n\n\t}\n\n\tsub( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\n\t\t\treturn this.subVectors( v, w );\n\n\t\t}\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\t\tthis.z -= v.z;\n\n\t\treturn this;\n\n\t}\n\n\tsubScalar( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\t\tthis.z -= s;\n\n\t\treturn this;\n\n\t}\n\n\tsubVectors( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\t\tthis.z = a.z - b.z;\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\n\t\t\treturn this.multiplyVectors( v, w );\n\n\t\t}\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\t\tthis.z *= v.z;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyScalar( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\t\tthis.z *= scalar;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyVectors( a, b ) {\n\n\t\tthis.x = a.x * b.x;\n\t\tthis.y = a.y * b.y;\n\t\tthis.z = a.z * b.z;\n\n\t\treturn this;\n\n\t}\n\n\tapplyEuler( euler ) {\n\n\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\n\n\t\t}\n\n\t\treturn this.applyQuaternion( _quaternion$4.setFromEuler( euler ) );\n\n\t}\n\n\tapplyAxisAngle( axis, angle ) {\n\n\t\treturn this.applyQuaternion( _quaternion$4.setFromAxisAngle( axis, angle ) );\n\n\t}\n\n\tapplyMatrix3( m ) {\n\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\n\t\treturn this;\n\n\t}\n\n\tapplyNormalMatrix( m ) {\n\n\t\treturn this.applyMatrix3( m ).normalize();\n\n\t}\n\n\tapplyMatrix4( m ) {\n\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst e = m.elements;\n\n\t\tconst w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );\n\n\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;\n\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;\n\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;\n\n\t\treturn this;\n\n\t}\n\n\tapplyQuaternion( q ) {\n\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\n\t\t// calculate quat * vector\n\n\t\tconst ix = qw * x + qy * z - qz * y;\n\t\tconst iy = qw * y + qz * x - qx * z;\n\t\tconst iz = qw * z + qx * y - qy * x;\n\t\tconst iw = - qx * x - qy * y - qz * z;\n\n\t\t// calculate result * inverse quat\n\n\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\n\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\n\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\n\n\t\treturn this;\n\n\t}\n\n\tproject( camera ) {\n\n\t\treturn this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );\n\n\t}\n\n\tunproject( camera ) {\n\n\t\treturn this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );\n\n\t}\n\n\ttransformDirection( m ) {\n\n\t\t// input: THREE.Matrix4 affine matrix\n\t\t// vector interpreted as a direction\n\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\n\t\treturn this.normalize();\n\n\t}\n\n\tdivide( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\t\tthis.z /= v.z;\n\n\t\treturn this;\n\n\t}\n\n\tdivideScalar( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t}\n\n\tmin( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\t\tthis.z = Math.min( this.z, v.z );\n\n\t\treturn this;\n\n\t}\n\n\tmax( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\t\tthis.z = Math.max( this.z, v.z );\n\n\t\treturn this;\n\n\t}\n\n\tclamp( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampScalar( minVal, maxVal ) {\n\n\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampLength( min, max ) {\n\n\t\tconst length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t}\n\n\tfloor() {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\t\tthis.z = Math.floor( this.z );\n\n\t\treturn this;\n\n\t}\n\n\tceil() {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\t\tthis.z = Math.ceil( this.z );\n\n\t\treturn this;\n\n\t}\n\n\tround() {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\t\tthis.z = Math.round( this.z );\n\n\t\treturn this;\n\n\t}\n\n\troundToZero() {\n\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\n\n\t\treturn this;\n\n\t}\n\n\tnegate() {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\t\tthis.z = - this.z;\n\n\t\treturn this;\n\n\t}\n\n\tdot( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\n\t}\n\n\t// TODO lengthSquared?\n\n\tlengthSq() {\n\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\n\t}\n\n\tlength() {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\n\t}\n\n\tmanhattanLength() {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\n\t}\n\n\tnormalize() {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t}\n\n\tsetLength( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t}\n\n\tlerp( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\tthis.z += ( v.z - this.z ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tlerpVectors( v1, v2, alpha ) {\n\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\n\t\tthis.z = v1.z + ( v2.z - v1.z ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tcross( v, w ) {\n\n\t\tif ( w !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\n\t\t\treturn this.crossVectors( v, w );\n\n\t\t}\n\n\t\treturn this.crossVectors( this, v );\n\n\t}\n\n\tcrossVectors( a, b ) {\n\n\t\tconst ax = a.x, ay = a.y, az = a.z;\n\t\tconst bx = b.x, by = b.y, bz = b.z;\n\n\t\tthis.x = ay * bz - az * by;\n\t\tthis.y = az * bx - ax * bz;\n\t\tthis.z = ax * by - ay * bx;\n\n\t\treturn this;\n\n\t}\n\n\tprojectOnVector( v ) {\n\n\t\tconst denominator = v.lengthSq();\n\n\t\tif ( denominator === 0 ) return this.set( 0, 0, 0 );\n\n\t\tconst scalar = v.dot( this ) / denominator;\n\n\t\treturn this.copy( v ).multiplyScalar( scalar );\n\n\t}\n\n\tprojectOnPlane( planeNormal ) {\n\n\t\t_vector$c.copy( this ).projectOnVector( planeNormal );\n\n\t\treturn this.sub( _vector$c );\n\n\t}\n\n\treflect( normal ) {\n\n\t\t// reflect incident vector off plane orthogonal to normal\n\t\t// normal is assumed to have unit length\n\n\t\treturn this.sub( _vector$c.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\n\t}\n\n\tangleTo( v ) {\n\n\t\tconst denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );\n\n\t\tif ( denominator === 0 ) return Math.PI / 2;\n\n\t\tconst theta = this.dot( v ) / denominator;\n\n\t\t// clamp, to handle numerical problems\n\n\t\treturn Math.acos( clamp( theta, - 1, 1 ) );\n\n\t}\n\n\tdistanceTo( v ) {\n\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t}\n\n\tdistanceToSquared( v ) {\n\n\t\tconst dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n\n\t\treturn dx * dx + dy * dy + dz * dz;\n\n\t}\n\n\tmanhattanDistanceTo( v ) {\n\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\n\n\t}\n\n\tsetFromSpherical( s ) {\n\n\t\treturn this.setFromSphericalCoords( s.radius, s.phi, s.theta );\n\n\t}\n\n\tsetFromSphericalCoords( radius, phi, theta ) {\n\n\t\tconst sinPhiRadius = Math.sin( phi ) * radius;\n\n\t\tthis.x = sinPhiRadius * Math.sin( theta );\n\t\tthis.y = Math.cos( phi ) * radius;\n\t\tthis.z = sinPhiRadius * Math.cos( theta );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromCylindrical( c ) {\n\n\t\treturn this.setFromCylindricalCoords( c.radius, c.theta, c.y );\n\n\t}\n\n\tsetFromCylindricalCoords( radius, theta, y ) {\n\n\t\tthis.x = radius * Math.sin( theta );\n\t\tthis.y = y;\n\t\tthis.z = radius * Math.cos( theta );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromMatrixPosition( m ) {\n\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 12 ];\n\t\tthis.y = e[ 13 ];\n\t\tthis.z = e[ 14 ];\n\n\t\treturn this;\n\n\t}\n\n\tsetFromMatrixScale( m ) {\n\n\t\tconst sx = this.setFromMatrixColumn( m, 0 ).length();\n\t\tconst sy = this.setFromMatrixColumn( m, 1 ).length();\n\t\tconst sz = this.setFromMatrixColumn( m, 2 ).length();\n\n\t\tthis.x = sx;\n\t\tthis.y = sy;\n\t\tthis.z = sz;\n\n\t\treturn this;\n\n\t}\n\n\tsetFromMatrixColumn( m, index ) {\n\n\t\treturn this.fromArray( m.elements, index * 4 );\n\n\t}\n\n\tsetFromMatrix3Column( m, index ) {\n\n\t\treturn this.fromArray( m.elements, index * 3 );\n\n\t}\n\n\tequals( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\t\tthis.z = array[ offset + 2 ];\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\t\tarray[ offset + 2 ] = this.z;\n\n\t\treturn array;\n\n\t}\n\n\tfromBufferAttribute( attribute, index, offset ) {\n\n\t\tif ( offset !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Vector3: offset has been removed from .fromBufferAttribute().' );\n\n\t\t}\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\t\tthis.z = attribute.getZ( index );\n\n\t\treturn this;\n\n\t}\n\n\trandom() {\n\n\t\tthis.x = Math.random();\n\t\tthis.y = Math.random();\n\t\tthis.z = Math.random();\n\n\t\treturn this;\n\n\t}\n\n\trandomDirection() {\n\n\t\t// Derived from https://mathworld.wolfram.com/SpherePointPicking.html\n\n\t\tconst u = ( Math.random() - 0.5 ) * 2;\n\t\tconst t = Math.random() * Math.PI * 2;\n\t\tconst f = Math.sqrt( 1 - u ** 2 );\n\n\t\tthis.x = f * Math.cos( t );\n\t\tthis.y = f * Math.sin( t );\n\t\tthis.z = u;\n\n\t\treturn this;\n\n\t}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this.x;\n\t\tyield this.y;\n\t\tyield this.z;\n\n\t}\n\n}\n\nVector3.prototype.isVector3 = true;\n\nconst _vector$c = /*@__PURE__*/ new Vector3();\nconst _quaternion$4 = /*@__PURE__*/ new Quaternion();\n\nclass Box3 {\n\n\tconstructor( min = new Vector3( + Infinity, + Infinity, + Infinity ), max = new Vector3( - Infinity, - Infinity, - Infinity ) ) {\n\n\t\tthis.min = min;\n\t\tthis.max = max;\n\n\t}\n\n\tset( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromArray( array ) {\n\n\t\tlet minX = + Infinity;\n\t\tlet minY = + Infinity;\n\t\tlet minZ = + Infinity;\n\n\t\tlet maxX = - Infinity;\n\t\tlet maxY = - Infinity;\n\t\tlet maxZ = - Infinity;\n\n\t\tfor ( let i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\tconst x = array[ i ];\n\t\t\tconst y = array[ i + 1 ];\n\t\t\tconst z = array[ i + 2 ];\n\n\t\t\tif ( x < minX ) minX = x;\n\t\t\tif ( y < minY ) minY = y;\n\t\t\tif ( z < minZ ) minZ = z;\n\n\t\t\tif ( x > maxX ) maxX = x;\n\t\t\tif ( y > maxY ) maxY = y;\n\t\t\tif ( z > maxZ ) maxZ = z;\n\n\t\t}\n\n\t\tthis.min.set( minX, minY, minZ );\n\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromBufferAttribute( attribute ) {\n\n\t\tlet minX = + Infinity;\n\t\tlet minY = + Infinity;\n\t\tlet minZ = + Infinity;\n\n\t\tlet maxX = - Infinity;\n\t\tlet maxY = - Infinity;\n\t\tlet maxZ = - Infinity;\n\n\t\tfor ( let i = 0, l = attribute.count; i < l; i ++ ) {\n\n\t\t\tconst x = attribute.getX( i );\n\t\t\tconst y = attribute.getY( i );\n\t\t\tconst z = attribute.getZ( i );\n\n\t\t\tif ( x < minX ) minX = x;\n\t\t\tif ( y < minY ) minY = y;\n\t\t\tif ( z < minZ ) minZ = z;\n\n\t\t\tif ( x > maxX ) maxX = x;\n\t\t\tif ( y > maxY ) maxY = y;\n\t\t\tif ( z > maxZ ) maxZ = z;\n\n\t\t}\n\n\t\tthis.min.set( minX, minY, minZ );\n\t\tthis.max.set( maxX, maxY, maxZ );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPoints( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetFromCenterAndSize( center, size ) {\n\n\t\tconst halfSize = _vector$b.copy( size ).multiplyScalar( 0.5 );\n\n\t\tthis.min.copy( center ).sub( halfSize );\n\t\tthis.max.copy( center ).add( halfSize );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromObject( object ) {\n\n\t\tthis.makeEmpty();\n\n\t\treturn this.expandByObject( object );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t}\n\n\tmakeEmpty() {\n\n\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\n\t\treturn this;\n\n\t}\n\n\tisEmpty() {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\n\t}\n\n\tgetCenter( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t}\n\n\tgetSize( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t}\n\n\texpandByPoint( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\n\t}\n\n\texpandByVector( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\n\t}\n\n\texpandByScalar( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\n\t}\n\n\texpandByObject( object ) {\n\n\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t// accounting for both the object's, and children's, world transforms\n\n\t\tobject.updateWorldMatrix( false, false );\n\n\t\tconst geometry = object.geometry;\n\n\t\tif ( geometry !== undefined ) {\n\n\t\t\tif ( geometry.boundingBox === null ) {\n\n\t\t\t\tgeometry.computeBoundingBox();\n\n\t\t\t}\n\n\t\t\t_box$3.copy( geometry.boundingBox );\n\t\t\t_box$3.applyMatrix4( object.matrixWorld );\n\n\t\t\tthis.union( _box$3 );\n\n\t\t}\n\n\t\tconst children = object.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tthis.expandByObject( children[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\tpoint.y < this.min.y || point.y > this.max.y ||\n\t\t\tpoint.z < this.min.z || point.z > this.max.z ? false : true;\n\n\t}\n\n\tcontainsBox( box ) {\n\n\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y &&\n\t\t\tthis.min.z <= box.min.z && box.max.z <= this.max.z;\n\n\t}\n\n\tgetParameter( point, target ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\treturn target.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n\t\t);\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\t// using 6 splitting planes to rule out intersections.\n\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ||\n\t\t\tbox.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\t// Find the point on the AABB closest to the sphere center.\n\t\tthis.clampPoint( sphere.center, _vector$b );\n\n\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n\t\treturn _vector$b.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t}\n\n\tintersectsPlane( plane ) {\n\n\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\n\t\tlet min, max;\n\n\t\tif ( plane.normal.x > 0 ) {\n\n\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\tmax = plane.normal.x * this.max.x;\n\n\t\t} else {\n\n\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\tmax = plane.normal.x * this.min.x;\n\n\t\t}\n\n\t\tif ( plane.normal.y > 0 ) {\n\n\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\tmax += plane.normal.y * this.max.y;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\tmax += plane.normal.y * this.min.y;\n\n\t\t}\n\n\t\tif ( plane.normal.z > 0 ) {\n\n\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\tmax += plane.normal.z * this.max.z;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\tmax += plane.normal.z * this.min.z;\n\n\t\t}\n\n\t\treturn ( min <= - plane.constant && max >= - plane.constant );\n\n\t}\n\n\tintersectsTriangle( triangle ) {\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// compute box center and extents\n\t\tthis.getCenter( _center );\n\t\t_extents.subVectors( this.max, _center );\n\n\t\t// translate triangle to aabb origin\n\t\t_v0$2.subVectors( triangle.a, _center );\n\t\t_v1$7.subVectors( triangle.b, _center );\n\t\t_v2$3.subVectors( triangle.c, _center );\n\n\t\t// compute edge vectors for triangle\n\t\t_f0.subVectors( _v1$7, _v0$2 );\n\t\t_f1.subVectors( _v2$3, _v1$7 );\n\t\t_f2.subVectors( _v0$2, _v2$3 );\n\n\t\t// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n\t\tlet axes = [\n\t\t\t0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,\n\t\t\t_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,\n\t\t\t- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0\n\t\t];\n\t\tif ( ! satForAxes( axes, _v0$2, _v1$7, _v2$3, _extents ) ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// test 3 face normals from the aabb\n\t\taxes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];\n\t\tif ( ! satForAxes( axes, _v0$2, _v1$7, _v2$3, _extents ) ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// finally testing the face normal of the triangle\n\t\t// use already existing triangle edge vectors here\n\t\t_triangleNormal.crossVectors( _f0, _f1 );\n\t\taxes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];\n\n\t\treturn satForAxes( axes, _v0$2, _v1$7, _v2$3, _extents );\n\n\t}\n\n\tclampPoint( point, target ) {\n\n\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\tconst clampedPoint = _vector$b.copy( point ).clamp( this.min, this.max );\n\n\t\treturn clampedPoint.sub( point ).length();\n\n\t}\n\n\tgetBoundingSphere( target ) {\n\n\t\tthis.getCenter( target.center );\n\n\t\ttarget.radius = this.getSize( _vector$b ).length() * 0.5;\n\n\t\treturn target;\n\n\t}\n\n\tintersect( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\t\tif ( this.isEmpty() ) this.makeEmpty();\n\n\t\treturn this;\n\n\t}\n\n\tunion( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t}\n\n\tapplyMatrix4( matrix ) {\n\n\t\t// transform of empty box is an empty box.\n\t\tif ( this.isEmpty() ) return this;\n\n\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\t\t_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n\t\t_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n\t\t_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n\t\t_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n\t\t_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n\t\t_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n\t\t_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n\t\t_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111\n\n\t\tthis.setFromPoints( _points );\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t}\n\n\tequals( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t}\n\n}\n\nBox3.prototype.isBox3 = true;\n\nconst _points = [\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3()\n];\n\nconst _vector$b = /*@__PURE__*/ new Vector3();\n\nconst _box$3 = /*@__PURE__*/ new Box3();\n\n// triangle centered vertices\n\nconst _v0$2 = /*@__PURE__*/ new Vector3();\nconst _v1$7 = /*@__PURE__*/ new Vector3();\nconst _v2$3 = /*@__PURE__*/ new Vector3();\n\n// triangle edge vectors\n\nconst _f0 = /*@__PURE__*/ new Vector3();\nconst _f1 = /*@__PURE__*/ new Vector3();\nconst _f2 = /*@__PURE__*/ new Vector3();\n\nconst _center = /*@__PURE__*/ new Vector3();\nconst _extents = /*@__PURE__*/ new Vector3();\nconst _triangleNormal = /*@__PURE__*/ new Vector3();\nconst _testAxis = /*@__PURE__*/ new Vector3();\n\nfunction satForAxes( axes, v0, v1, v2, extents ) {\n\n\tfor ( let i = 0, j = axes.length - 3; i <= j; i += 3 ) {\n\n\t\t_testAxis.fromArray( axes, i );\n\t\t// project the aabb onto the seperating axis\n\t\tconst r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );\n\t\t// project all 3 vertices of the triangle onto the seperating axis\n\t\tconst p0 = v0.dot( _testAxis );\n\t\tconst p1 = v1.dot( _testAxis );\n\t\tconst p2 = v2.dot( _testAxis );\n\t\t// actual test, basically see if either of the most extreme of the triangle points intersects r\n\t\tif ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {\n\n\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\n\t\t\t// the axis is seperating and we can exit\n\t\t\treturn false;\n\n\t\t}\n\n\t}\n\n\treturn true;\n\n}\n\nconst _box$2 = /*@__PURE__*/ new Box3();\nconst _v1$6 = /*@__PURE__*/ new Vector3();\nconst _toFarthestPoint = /*@__PURE__*/ new Vector3();\nconst _toPoint = /*@__PURE__*/ new Vector3();\n\nclass Sphere {\n\n\tconstructor( center = new Vector3(), radius = - 1 ) {\n\n\t\tthis.center = center;\n\t\tthis.radius = radius;\n\n\t}\n\n\tset( center, radius ) {\n\n\t\tthis.center.copy( center );\n\t\tthis.radius = radius;\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPoints( points, optionalCenter ) {\n\n\t\tconst center = this.center;\n\n\t\tif ( optionalCenter !== undefined ) {\n\n\t\t\tcenter.copy( optionalCenter );\n\n\t\t} else {\n\n\t\t\t_box$2.setFromPoints( points ).getCenter( center );\n\n\t\t}\n\n\t\tlet maxRadiusSq = 0;\n\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\n\t\t}\n\n\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( sphere ) {\n\n\t\tthis.center.copy( sphere.center );\n\t\tthis.radius = sphere.radius;\n\n\t\treturn this;\n\n\t}\n\n\tisEmpty() {\n\n\t\treturn ( this.radius < 0 );\n\n\t}\n\n\tmakeEmpty() {\n\n\t\tthis.center.set( 0, 0, 0 );\n\t\tthis.radius = - 1;\n\n\t\treturn this;\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\treturn ( point.distanceTo( this.center ) - this.radius );\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\tconst radiusSum = this.radius + sphere.radius;\n\n\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\treturn box.intersectsSphere( this );\n\n\t}\n\n\tintersectsPlane( plane ) {\n\n\t\treturn Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;\n\n\t}\n\n\tclampPoint( point, target ) {\n\n\t\tconst deltaLengthSq = this.center.distanceToSquared( point );\n\n\t\ttarget.copy( point );\n\n\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\ttarget.sub( this.center ).normalize();\n\t\t\ttarget.multiplyScalar( this.radius ).add( this.center );\n\n\t\t}\n\n\t\treturn target;\n\n\t}\n\n\tgetBoundingBox( target ) {\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\t// Empty sphere produces empty bounding box\n\t\t\ttarget.makeEmpty();\n\t\t\treturn target;\n\n\t\t}\n\n\t\ttarget.set( this.center, this.center );\n\t\ttarget.expandByScalar( this.radius );\n\n\t\treturn target;\n\n\t}\n\n\tapplyMatrix4( matrix ) {\n\n\t\tthis.center.applyMatrix4( matrix );\n\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( offset ) {\n\n\t\tthis.center.add( offset );\n\n\t\treturn this;\n\n\t}\n\n\texpandByPoint( point ) {\n\n\t\t// from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L649-L671\n\n\t\t_toPoint.subVectors( point, this.center );\n\n\t\tconst lengthSq = _toPoint.lengthSq();\n\n\t\tif ( lengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\tconst length = Math.sqrt( lengthSq );\n\t\t\tconst missingRadiusHalf = ( length - this.radius ) * 0.5;\n\n\t\t\t// Nudge this sphere towards the target point. Add half the missing distance to radius,\n\t\t\t// and the other half to position. This gives a tighter enclosure, instead of if\n\t\t\t// the whole missing distance were just added to radius.\n\n\t\t\tthis.center.add( _toPoint.multiplyScalar( missingRadiusHalf / length ) );\n\t\t\tthis.radius += missingRadiusHalf;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tunion( sphere ) {\n\n\t\t// from https://github.com/juj/MathGeoLib/blob/2940b99b99cfe575dd45103ef20f4019dee15b54/src/Geometry/Sphere.cpp#L759-L769\n\n\t\t// To enclose another sphere into this sphere, we only need to enclose two points:\n\t\t// 1) Enclose the farthest point on the other sphere into this sphere.\n\t\t// 2) Enclose the opposite point of the farthest point into this sphere.\n\n\t\t_toFarthestPoint.subVectors( sphere.center, this.center ).normalize().multiplyScalar( sphere.radius );\n\n\t\tthis.expandByPoint( _v1$6.copy( sphere.center ).add( _toFarthestPoint ) );\n\t\tthis.expandByPoint( _v1$6.copy( sphere.center ).sub( _toFarthestPoint ) );\n\n\t\treturn this;\n\n\t}\n\n\tequals( sphere ) {\n\n\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nconst _vector$a = /*@__PURE__*/ new Vector3();\nconst _segCenter = /*@__PURE__*/ new Vector3();\nconst _segDir = /*@__PURE__*/ new Vector3();\nconst _diff = /*@__PURE__*/ new Vector3();\n\nconst _edge1 = /*@__PURE__*/ new Vector3();\nconst _edge2 = /*@__PURE__*/ new Vector3();\nconst _normal$1 = /*@__PURE__*/ new Vector3();\n\nclass Ray {\n\n\tconstructor( origin = new Vector3(), direction = new Vector3( 0, 0, - 1 ) ) {\n\n\t\tthis.origin = origin;\n\t\tthis.direction = direction;\n\n\t}\n\n\tset( origin, direction ) {\n\n\t\tthis.origin.copy( origin );\n\t\tthis.direction.copy( direction );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( ray ) {\n\n\t\tthis.origin.copy( ray.origin );\n\t\tthis.direction.copy( ray.direction );\n\n\t\treturn this;\n\n\t}\n\n\tat( t, target ) {\n\n\t\treturn target.copy( this.direction ).multiplyScalar( t ).add( this.origin );\n\n\t}\n\n\tlookAt( v ) {\n\n\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\n\n\t\treturn this;\n\n\t}\n\n\trecast( t ) {\n\n\t\tthis.origin.copy( this.at( t, _vector$a ) );\n\n\t\treturn this;\n\n\t}\n\n\tclosestPointToPoint( point, target ) {\n\n\t\ttarget.subVectors( point, this.origin );\n\n\t\tconst directionDistance = target.dot( this.direction );\n\n\t\tif ( directionDistance < 0 ) {\n\n\t\t\treturn target.copy( this.origin );\n\n\t\t}\n\n\t\treturn target.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\n\n\t}\n\n\tdistanceSqToPoint( point ) {\n\n\t\tconst directionDistance = _vector$a.subVectors( point, this.origin ).dot( this.direction );\n\n\t\t// point behind the ray\n\n\t\tif ( directionDistance < 0 ) {\n\n\t\t\treturn this.origin.distanceToSquared( point );\n\n\t\t}\n\n\t\t_vector$a.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\n\n\t\treturn _vector$a.distanceToSquared( point );\n\n\t}\n\n\tdistanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\n\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t// It returns the min distance between the ray and the segment\n\t\t// defined by v0 and v1\n\t\t// It can also set two optional targets :\n\t\t// - The closest point on the ray\n\t\t// - The closest point on the segment\n\n\t\t_segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n\t\t_segDir.copy( v1 ).sub( v0 ).normalize();\n\t\t_diff.copy( this.origin ).sub( _segCenter );\n\n\t\tconst segExtent = v0.distanceTo( v1 ) * 0.5;\n\t\tconst a01 = - this.direction.dot( _segDir );\n\t\tconst b0 = _diff.dot( this.direction );\n\t\tconst b1 = - _diff.dot( _segDir );\n\t\tconst c = _diff.lengthSq();\n\t\tconst det = Math.abs( 1 - a01 * a01 );\n\t\tlet s0, s1, sqrDist, extDet;\n\n\t\tif ( det > 0 ) {\n\n\t\t\t// The ray and segment are not parallel.\n\n\t\t\ts0 = a01 * b1 - b0;\n\t\t\ts1 = a01 * b0 - b1;\n\t\t\textDet = segExtent * det;\n\n\t\t\tif ( s0 >= 0 ) {\n\n\t\t\t\tif ( s1 >= - extDet ) {\n\n\t\t\t\t\tif ( s1 <= extDet ) {\n\n\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\n\t\t\t\t\t\tconst invDet = 1 / det;\n\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// region 1\n\n\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// region 5\n\n\t\t\t\t\ts1 = - segExtent;\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( s1 <= - extDet ) {\n\n\t\t\t\t\t// region 4\n\n\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t} else if ( s1 <= extDet ) {\n\n\t\t\t\t\t// region 3\n\n\t\t\t\t\ts0 = 0;\n\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// region 2\n\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// Ray and segment are parallel.\n\n\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t}\n\n\t\tif ( optionalPointOnRay ) {\n\n\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\n\n\t\t}\n\n\t\tif ( optionalPointOnSegment ) {\n\n\t\t\toptionalPointOnSegment.copy( _segDir ).multiplyScalar( s1 ).add( _segCenter );\n\n\t\t}\n\n\t\treturn sqrDist;\n\n\t}\n\n\tintersectSphere( sphere, target ) {\n\n\t\t_vector$a.subVectors( sphere.center, this.origin );\n\t\tconst tca = _vector$a.dot( this.direction );\n\t\tconst d2 = _vector$a.dot( _vector$a ) - tca * tca;\n\t\tconst radius2 = sphere.radius * sphere.radius;\n\n\t\tif ( d2 > radius2 ) return null;\n\n\t\tconst thc = Math.sqrt( radius2 - d2 );\n\n\t\t// t0 = first intersect point - entrance on front of sphere\n\t\tconst t0 = tca - thc;\n\n\t\t// t1 = second intersect point - exit point on back of sphere\n\t\tconst t1 = tca + thc;\n\n\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\n\t\tif ( t0 < 0 && t1 < 0 ) return null;\n\n\t\t// test to see if t0 is behind the ray:\n\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t// in order to always return an intersect point that is in front of the ray.\n\t\tif ( t0 < 0 ) return this.at( t1, target );\n\n\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\n\t\treturn this.at( t0, target );\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\treturn this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t}\n\n\tdistanceToPlane( plane ) {\n\n\t\tconst denominator = plane.normal.dot( this.direction );\n\n\t\tif ( denominator === 0 ) {\n\n\t\t\t// line is coplanar, return origin\n\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\n\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\n\t\t// Return if the ray never intersects the plane\n\n\t\treturn t >= 0 ? t : null;\n\n\t}\n\n\tintersectPlane( plane, target ) {\n\n\t\tconst t = this.distanceToPlane( plane );\n\n\t\tif ( t === null ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\treturn this.at( t, target );\n\n\t}\n\n\tintersectsPlane( plane ) {\n\n\t\t// check if the ray lies on the plane first\n\n\t\tconst distToPoint = plane.distanceToPoint( this.origin );\n\n\t\tif ( distToPoint === 0 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tconst denominator = plane.normal.dot( this.direction );\n\n\t\tif ( denominator * distToPoint < 0 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\t// ray origin is behind the plane (and is pointing behind it)\n\n\t\treturn false;\n\n\t}\n\n\tintersectBox( box, target ) {\n\n\t\tlet tmin, tmax, tymin, tymax, tzmin, tzmax;\n\n\t\tconst invdirx = 1 / this.direction.x,\n\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\tinvdirz = 1 / this.direction.z;\n\n\t\tconst origin = this.origin;\n\n\t\tif ( invdirx >= 0 ) {\n\n\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\n\t\t} else {\n\n\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\n\t\t}\n\n\t\tif ( invdiry >= 0 ) {\n\n\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\n\t\t} else {\n\n\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\n\t\t}\n\n\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\n\n\t\t// These lines also handle the case where tmin or tmax is NaN\n\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\n\n\t\tif ( tymin > tmin || tmin !== tmin ) tmin = tymin;\n\n\t\tif ( tymax < tmax || tmax !== tmax ) tmax = tymax;\n\n\t\tif ( invdirz >= 0 ) {\n\n\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\n\t\t} else {\n\n\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\n\t\t}\n\n\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\n\n\t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\n\n\t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\n\n\t\t//return point closest to the ray (positive side)\n\n\t\tif ( tmax < 0 ) return null;\n\n\t\treturn this.at( tmin >= 0 ? tmin : tmax, target );\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\treturn this.intersectBox( box, _vector$a ) !== null;\n\n\t}\n\n\tintersectTriangle( a, b, c, backfaceCulling, target ) {\n\n\t\t// Compute the offset origin, edges, and normal.\n\n\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\n\t\t_edge1.subVectors( b, a );\n\t\t_edge2.subVectors( c, a );\n\t\t_normal$1.crossVectors( _edge1, _edge2 );\n\n\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\t\tlet DdN = this.direction.dot( _normal$1 );\n\t\tlet sign;\n\n\t\tif ( DdN > 0 ) {\n\n\t\t\tif ( backfaceCulling ) return null;\n\t\t\tsign = 1;\n\n\t\t} else if ( DdN < 0 ) {\n\n\t\t\tsign = - 1;\n\t\t\tDdN = - DdN;\n\n\t\t} else {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t_diff.subVectors( this.origin, a );\n\t\tconst DdQxE2 = sign * this.direction.dot( _edge2.crossVectors( _diff, _edge2 ) );\n\n\t\t// b1 < 0, no intersection\n\t\tif ( DdQxE2 < 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst DdE1xQ = sign * this.direction.dot( _edge1.cross( _diff ) );\n\n\t\t// b2 < 0, no intersection\n\t\tif ( DdE1xQ < 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// b1+b2 > 1, no intersection\n\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// Line intersects triangle, check if ray does.\n\t\tconst QdN = - sign * _diff.dot( _normal$1 );\n\n\t\t// t < 0, no intersection\n\t\tif ( QdN < 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// Ray intersects triangle.\n\t\treturn this.at( QdN / DdN, target );\n\n\t}\n\n\tapplyMatrix4( matrix4 ) {\n\n\t\tthis.origin.applyMatrix4( matrix4 );\n\t\tthis.direction.transformDirection( matrix4 );\n\n\t\treturn this;\n\n\t}\n\n\tequals( ray ) {\n\n\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nclass Matrix4 {\n\n\tconstructor() {\n\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t];\n\n\t\tif ( arguments.length > 0 ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\n\n\t\t}\n\n\t}\n\n\tset( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n\n\t\treturn this;\n\n\t}\n\n\tidentity() {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new Matrix4().fromArray( this.elements );\n\n\t}\n\n\tcopy( m ) {\n\n\t\tconst te = this.elements;\n\t\tconst me = m.elements;\n\n\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];\n\t\tte[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];\n\t\tte[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];\n\t\tte[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];\n\n\t\treturn this;\n\n\t}\n\n\tcopyPosition( m ) {\n\n\t\tconst te = this.elements, me = m.elements;\n\n\t\tte[ 12 ] = me[ 12 ];\n\t\tte[ 13 ] = me[ 13 ];\n\t\tte[ 14 ] = me[ 14 ];\n\n\t\treturn this;\n\n\t}\n\n\tsetFromMatrix3( m ) {\n\n\t\tconst me = m.elements;\n\n\t\tthis.set(\n\n\t\t\tme[ 0 ], me[ 3 ], me[ 6 ], 0,\n\t\t\tme[ 1 ], me[ 4 ], me[ 7 ], 0,\n\t\t\tme[ 2 ], me[ 5 ], me[ 8 ], 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\textractBasis( xAxis, yAxis, zAxis ) {\n\n\t\txAxis.setFromMatrixColumn( this, 0 );\n\t\tyAxis.setFromMatrixColumn( this, 1 );\n\t\tzAxis.setFromMatrixColumn( this, 2 );\n\n\t\treturn this;\n\n\t}\n\n\tmakeBasis( xAxis, yAxis, zAxis ) {\n\n\t\tthis.set(\n\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\n\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\n\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\n\t\t\t0, 0, 0, 1\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\textractRotation( m ) {\n\n\t\t// this method does not support reflection matrices\n\n\t\tconst te = this.elements;\n\t\tconst me = m.elements;\n\n\t\tconst scaleX = 1 / _v1$5.setFromMatrixColumn( m, 0 ).length();\n\t\tconst scaleY = 1 / _v1$5.setFromMatrixColumn( m, 1 ).length();\n\t\tconst scaleZ = 1 / _v1$5.setFromMatrixColumn( m, 2 ).length();\n\n\t\tte[ 0 ] = me[ 0 ] * scaleX;\n\t\tte[ 1 ] = me[ 1 ] * scaleX;\n\t\tte[ 2 ] = me[ 2 ] * scaleX;\n\t\tte[ 3 ] = 0;\n\n\t\tte[ 4 ] = me[ 4 ] * scaleY;\n\t\tte[ 5 ] = me[ 5 ] * scaleY;\n\t\tte[ 6 ] = me[ 6 ] * scaleY;\n\t\tte[ 7 ] = 0;\n\n\t\tte[ 8 ] = me[ 8 ] * scaleZ;\n\t\tte[ 9 ] = me[ 9 ] * scaleZ;\n\t\tte[ 10 ] = me[ 10 ] * scaleZ;\n\t\tte[ 11 ] = 0;\n\n\t\tte[ 12 ] = 0;\n\t\tte[ 13 ] = 0;\n\t\tte[ 14 ] = 0;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t}\n\n\tmakeRotationFromEuler( euler ) {\n\n\t\tif ( ! ( euler && euler.isEuler ) ) {\n\n\t\t\tconsole.error( 'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\n\n\t\t}\n\n\t\tconst te = this.elements;\n\n\t\tconst x = euler.x, y = euler.y, z = euler.z;\n\t\tconst a = Math.cos( x ), b = Math.sin( x );\n\t\tconst c = Math.cos( y ), d = Math.sin( y );\n\t\tconst e = Math.cos( z ), f = Math.sin( z );\n\n\t\tif ( euler.order === 'XYZ' ) {\n\n\t\t\tconst ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = - c * f;\n\t\t\tte[ 8 ] = d;\n\n\t\t\tte[ 1 ] = af + be * d;\n\t\t\tte[ 5 ] = ae - bf * d;\n\t\t\tte[ 9 ] = - b * c;\n\n\t\t\tte[ 2 ] = bf - ae * d;\n\t\t\tte[ 6 ] = be + af * d;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'YXZ' ) {\n\n\t\t\tconst ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\tte[ 0 ] = ce + df * b;\n\t\t\tte[ 4 ] = de * b - cf;\n\t\t\tte[ 8 ] = a * d;\n\n\t\t\tte[ 1 ] = a * f;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = - b;\n\n\t\t\tte[ 2 ] = cf * b - de;\n\t\t\tte[ 6 ] = df + ce * b;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'ZXY' ) {\n\n\t\t\tconst ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\tte[ 0 ] = ce - df * b;\n\t\t\tte[ 4 ] = - a * f;\n\t\t\tte[ 8 ] = de + cf * b;\n\n\t\t\tte[ 1 ] = cf + de * b;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = df - ce * b;\n\n\t\t\tte[ 2 ] = - a * d;\n\t\t\tte[ 6 ] = b;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'ZYX' ) {\n\n\t\t\tconst ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = be * d - af;\n\t\t\tte[ 8 ] = ae * d + bf;\n\n\t\t\tte[ 1 ] = c * f;\n\t\t\tte[ 5 ] = bf * d + ae;\n\t\t\tte[ 9 ] = af * d - be;\n\n\t\t\tte[ 2 ] = - d;\n\t\t\tte[ 6 ] = b * c;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'YZX' ) {\n\n\t\t\tconst ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = bd - ac * f;\n\t\t\tte[ 8 ] = bc * f + ad;\n\n\t\t\tte[ 1 ] = f;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = - b * e;\n\n\t\t\tte[ 2 ] = - d * e;\n\t\t\tte[ 6 ] = ad * f + bc;\n\t\t\tte[ 10 ] = ac - bd * f;\n\n\t\t} else if ( euler.order === 'XZY' ) {\n\n\t\t\tconst ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = - f;\n\t\t\tte[ 8 ] = d * e;\n\n\t\t\tte[ 1 ] = ac * f + bd;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = ad * f - bc;\n\n\t\t\tte[ 2 ] = bc * f - ad;\n\t\t\tte[ 6 ] = b * e;\n\t\t\tte[ 10 ] = bd * f + ac;\n\n\t\t}\n\n\t\t// bottom row\n\t\tte[ 3 ] = 0;\n\t\tte[ 7 ] = 0;\n\t\tte[ 11 ] = 0;\n\n\t\t// last column\n\t\tte[ 12 ] = 0;\n\t\tte[ 13 ] = 0;\n\t\tte[ 14 ] = 0;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t}\n\n\tmakeRotationFromQuaternion( q ) {\n\n\t\treturn this.compose( _zero, q, _one );\n\n\t}\n\n\tlookAt( eye, target, up ) {\n\n\t\tconst te = this.elements;\n\n\t\t_z.subVectors( eye, target );\n\n\t\tif ( _z.lengthSq() === 0 ) {\n\n\t\t\t// eye and target are in the same position\n\n\t\t\t_z.z = 1;\n\n\t\t}\n\n\t\t_z.normalize();\n\t\t_x.crossVectors( up, _z );\n\n\t\tif ( _x.lengthSq() === 0 ) {\n\n\t\t\t// up and z are parallel\n\n\t\t\tif ( Math.abs( up.z ) === 1 ) {\n\n\t\t\t\t_z.x += 0.0001;\n\n\t\t\t} else {\n\n\t\t\t\t_z.z += 0.0001;\n\n\t\t\t}\n\n\t\t\t_z.normalize();\n\t\t\t_x.crossVectors( up, _z );\n\n\t\t}\n\n\t\t_x.normalize();\n\t\t_y.crossVectors( _z, _x );\n\n\t\tte[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;\n\t\tte[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;\n\t\tte[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( m, n ) {\n\n\t\tif ( n !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\n\t\t\treturn this.multiplyMatrices( m, n );\n\n\t\t}\n\n\t\treturn this.multiplyMatrices( this, m );\n\n\t}\n\n\tpremultiply( m ) {\n\n\t\treturn this.multiplyMatrices( m, this );\n\n\t}\n\n\tmultiplyMatrices( a, b ) {\n\n\t\tconst ae = a.elements;\n\t\tconst be = b.elements;\n\t\tconst te = this.elements;\n\n\t\tconst a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n\t\tconst a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n\t\tconst a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n\t\tconst a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n\n\t\tconst b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n\t\tconst b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n\t\tconst b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n\t\tconst b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyScalar( s ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\n\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\n\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\n\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\n\n\t\treturn this;\n\n\t}\n\n\tdeterminant() {\n\n\t\tconst te = this.elements;\n\n\t\tconst n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\n\t\tconst n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\n\t\tconst n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\n\t\tconst n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\n\n\t\t//TODO: make this more efficient\n\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n\t\treturn (\n\t\t\tn41 * (\n\t\t\t\t+ n14 * n23 * n32\n\t\t\t\t - n13 * n24 * n32\n\t\t\t\t - n14 * n22 * n33\n\t\t\t\t + n12 * n24 * n33\n\t\t\t\t + n13 * n22 * n34\n\t\t\t\t - n12 * n23 * n34\n\t\t\t) +\n\t\t\tn42 * (\n\t\t\t\t+ n11 * n23 * n34\n\t\t\t\t - n11 * n24 * n33\n\t\t\t\t + n14 * n21 * n33\n\t\t\t\t - n13 * n21 * n34\n\t\t\t\t + n13 * n24 * n31\n\t\t\t\t - n14 * n23 * n31\n\t\t\t) +\n\t\t\tn43 * (\n\t\t\t\t+ n11 * n24 * n32\n\t\t\t\t - n11 * n22 * n34\n\t\t\t\t - n14 * n21 * n32\n\t\t\t\t + n12 * n21 * n34\n\t\t\t\t + n14 * n22 * n31\n\t\t\t\t - n12 * n24 * n31\n\t\t\t) +\n\t\t\tn44 * (\n\t\t\t\t- n13 * n22 * n31\n\t\t\t\t - n11 * n23 * n32\n\t\t\t\t + n11 * n22 * n33\n\t\t\t\t + n13 * n21 * n32\n\t\t\t\t - n12 * n21 * n33\n\t\t\t\t + n12 * n23 * n31\n\t\t\t)\n\n\t\t);\n\n\t}\n\n\ttranspose() {\n\n\t\tconst te = this.elements;\n\t\tlet tmp;\n\n\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\n\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\n\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\n\n\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\n\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\n\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\n\n\t\treturn this;\n\n\t}\n\n\tsetPosition( x, y, z ) {\n\n\t\tconst te = this.elements;\n\n\t\tif ( x.isVector3 ) {\n\n\t\t\tte[ 12 ] = x.x;\n\t\t\tte[ 13 ] = x.y;\n\t\t\tte[ 14 ] = x.z;\n\n\t\t} else {\n\n\t\t\tte[ 12 ] = x;\n\t\t\tte[ 13 ] = y;\n\t\t\tte[ 14 ] = z;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tinvert() {\n\n\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\tconst te = this.elements,\n\n\t\t\tn11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ], n41 = te[ 3 ],\n\t\t\tn12 = te[ 4 ], n22 = te[ 5 ], n32 = te[ 6 ], n42 = te[ 7 ],\n\t\t\tn13 = te[ 8 ], n23 = te[ 9 ], n33 = te[ 10 ], n43 = te[ 11 ],\n\t\t\tn14 = te[ 12 ], n24 = te[ 13 ], n34 = te[ 14 ], n44 = te[ 15 ],\n\n\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\n\t\tconst det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\n\t\tif ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 );\n\n\t\tconst detInv = 1 / det;\n\n\t\tte[ 0 ] = t11 * detInv;\n\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\n\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\n\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\n\n\t\tte[ 4 ] = t12 * detInv;\n\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\n\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\n\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\n\n\t\tte[ 8 ] = t13 * detInv;\n\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\n\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\n\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\n\n\t\tte[ 12 ] = t14 * detInv;\n\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\n\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\n\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\n\n\t\treturn this;\n\n\t}\n\n\tscale( v ) {\n\n\t\tconst te = this.elements;\n\t\tconst x = v.x, y = v.y, z = v.z;\n\n\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\n\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\n\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\n\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\n\n\t\treturn this;\n\n\t}\n\n\tgetMaxScaleOnAxis() {\n\n\t\tconst te = this.elements;\n\n\t\tconst scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\n\t\tconst scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\n\t\tconst scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\n\n\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\n\n\t}\n\n\tmakeTranslation( x, y, z ) {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, x,\n\t\t\t0, 1, 0, y,\n\t\t\t0, 0, 1, z,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmakeRotationX( theta ) {\n\n\t\tconst c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, c, - s, 0,\n\t\t\t0, s, c, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmakeRotationY( theta ) {\n\n\t\tconst c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\t c, 0, s, 0,\n\t\t\t 0, 1, 0, 0,\n\t\t\t- s, 0, c, 0,\n\t\t\t 0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmakeRotationZ( theta ) {\n\n\t\tconst c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\tc, - s, 0, 0,\n\t\t\ts, c, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmakeRotationAxis( axis, angle ) {\n\n\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n\t\tconst c = Math.cos( angle );\n\t\tconst s = Math.sin( angle );\n\t\tconst t = 1 - c;\n\t\tconst x = axis.x, y = axis.y, z = axis.z;\n\t\tconst tx = t * x, ty = t * y;\n\n\t\tthis.set(\n\n\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmakeScale( x, y, z ) {\n\n\t\tthis.set(\n\n\t\t\tx, 0, 0, 0,\n\t\t\t0, y, 0, 0,\n\t\t\t0, 0, z, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmakeShear( xy, xz, yx, yz, zx, zy ) {\n\n\t\tthis.set(\n\n\t\t\t1, yx, zx, 0,\n\t\t\txy, 1, zy, 0,\n\t\t\txz, yz, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tcompose( position, quaternion, scale ) {\n\n\t\tconst te = this.elements;\n\n\t\tconst x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;\n\t\tconst x2 = x + x,\ty2 = y + y, z2 = z + z;\n\t\tconst xx = x * x2, xy = x * y2, xz = x * z2;\n\t\tconst yy = y * y2, yz = y * z2, zz = z * z2;\n\t\tconst wx = w * x2, wy = w * y2, wz = w * z2;\n\n\t\tconst sx = scale.x, sy = scale.y, sz = scale.z;\n\n\t\tte[ 0 ] = ( 1 - ( yy + zz ) ) * sx;\n\t\tte[ 1 ] = ( xy + wz ) * sx;\n\t\tte[ 2 ] = ( xz - wy ) * sx;\n\t\tte[ 3 ] = 0;\n\n\t\tte[ 4 ] = ( xy - wz ) * sy;\n\t\tte[ 5 ] = ( 1 - ( xx + zz ) ) * sy;\n\t\tte[ 6 ] = ( yz + wx ) * sy;\n\t\tte[ 7 ] = 0;\n\n\t\tte[ 8 ] = ( xz + wy ) * sz;\n\t\tte[ 9 ] = ( yz - wx ) * sz;\n\t\tte[ 10 ] = ( 1 - ( xx + yy ) ) * sz;\n\t\tte[ 11 ] = 0;\n\n\t\tte[ 12 ] = position.x;\n\t\tte[ 13 ] = position.y;\n\t\tte[ 14 ] = position.z;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t}\n\n\tdecompose( position, quaternion, scale ) {\n\n\t\tconst te = this.elements;\n\n\t\tlet sx = _v1$5.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\n\t\tconst sy = _v1$5.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\n\t\tconst sz = _v1$5.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\n\n\t\t// if determine is negative, we need to invert one scale\n\t\tconst det = this.determinant();\n\t\tif ( det < 0 ) sx = - sx;\n\n\t\tposition.x = te[ 12 ];\n\t\tposition.y = te[ 13 ];\n\t\tposition.z = te[ 14 ];\n\n\t\t// scale the rotation part\n\t\t_m1$2.copy( this );\n\n\t\tconst invSX = 1 / sx;\n\t\tconst invSY = 1 / sy;\n\t\tconst invSZ = 1 / sz;\n\n\t\t_m1$2.elements[ 0 ] *= invSX;\n\t\t_m1$2.elements[ 1 ] *= invSX;\n\t\t_m1$2.elements[ 2 ] *= invSX;\n\n\t\t_m1$2.elements[ 4 ] *= invSY;\n\t\t_m1$2.elements[ 5 ] *= invSY;\n\t\t_m1$2.elements[ 6 ] *= invSY;\n\n\t\t_m1$2.elements[ 8 ] *= invSZ;\n\t\t_m1$2.elements[ 9 ] *= invSZ;\n\t\t_m1$2.elements[ 10 ] *= invSZ;\n\n\t\tquaternion.setFromRotationMatrix( _m1$2 );\n\n\t\tscale.x = sx;\n\t\tscale.y = sy;\n\t\tscale.z = sz;\n\n\t\treturn this;\n\n\t}\n\n\tmakePerspective( left, right, top, bottom, near, far ) {\n\n\t\tif ( far === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.' );\n\n\t\t}\n\n\t\tconst te = this.elements;\n\t\tconst x = 2 * near / ( right - left );\n\t\tconst y = 2 * near / ( top - bottom );\n\n\t\tconst a = ( right + left ) / ( right - left );\n\t\tconst b = ( top + bottom ) / ( top - bottom );\n\t\tconst c = - ( far + near ) / ( far - near );\n\t\tconst d = - 2 * far * near / ( far - near );\n\n\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\n\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\n\n\t\treturn this;\n\n\t}\n\n\tmakeOrthographic( left, right, top, bottom, near, far ) {\n\n\t\tconst te = this.elements;\n\t\tconst w = 1.0 / ( right - left );\n\t\tconst h = 1.0 / ( top - bottom );\n\t\tconst p = 1.0 / ( far - near );\n\n\t\tconst x = ( right + left ) * w;\n\t\tconst y = ( top + bottom ) * h;\n\t\tconst z = ( far + near ) * p;\n\n\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\n\t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t}\n\n\tequals( matrix ) {\n\n\t\tconst te = this.elements;\n\t\tconst me = matrix.elements;\n\n\t\tfor ( let i = 0; i < 16; i ++ ) {\n\n\t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tfor ( let i = 0; i < 16; i ++ ) {\n\n\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tconst te = this.elements;\n\n\t\tarray[ offset ] = te[ 0 ];\n\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\tarray[ offset + 2 ] = te[ 2 ];\n\t\tarray[ offset + 3 ] = te[ 3 ];\n\n\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\tarray[ offset + 5 ] = te[ 5 ];\n\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\tarray[ offset + 7 ] = te[ 7 ];\n\n\t\tarray[ offset + 8 ] = te[ 8 ];\n\t\tarray[ offset + 9 ] = te[ 9 ];\n\t\tarray[ offset + 10 ] = te[ 10 ];\n\t\tarray[ offset + 11 ] = te[ 11 ];\n\n\t\tarray[ offset + 12 ] = te[ 12 ];\n\t\tarray[ offset + 13 ] = te[ 13 ];\n\t\tarray[ offset + 14 ] = te[ 14 ];\n\t\tarray[ offset + 15 ] = te[ 15 ];\n\n\t\treturn array;\n\n\t}\n\n}\n\nMatrix4.prototype.isMatrix4 = true;\n\nconst _v1$5 = /*@__PURE__*/ new Vector3();\nconst _m1$2 = /*@__PURE__*/ new Matrix4();\nconst _zero = /*@__PURE__*/ new Vector3( 0, 0, 0 );\nconst _one = /*@__PURE__*/ new Vector3( 1, 1, 1 );\nconst _x = /*@__PURE__*/ new Vector3();\nconst _y = /*@__PURE__*/ new Vector3();\nconst _z = /*@__PURE__*/ new Vector3();\n\nconst _matrix$1 = /*@__PURE__*/ new Matrix4();\nconst _quaternion$3 = /*@__PURE__*/ new Quaternion();\n\nclass Euler {\n\n\tconstructor( x = 0, y = 0, z = 0, order = Euler.DefaultOrder ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._order = order;\n\n\t}\n\n\tget x() {\n\n\t\treturn this._x;\n\n\t}\n\n\tset x( value ) {\n\n\t\tthis._x = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget y() {\n\n\t\treturn this._y;\n\n\t}\n\n\tset y( value ) {\n\n\t\tthis._y = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget z() {\n\n\t\treturn this._z;\n\n\t}\n\n\tset z( value ) {\n\n\t\tthis._z = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget order() {\n\n\t\treturn this._order;\n\n\t}\n\n\tset order( value ) {\n\n\t\tthis._order = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tset( x, y, z, order = this._order ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._order = order;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\n\n\t}\n\n\tcopy( euler ) {\n\n\t\tthis._x = euler._x;\n\t\tthis._y = euler._y;\n\t\tthis._z = euler._z;\n\t\tthis._order = euler._order;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromRotationMatrix( m, order = this._order, update = true ) {\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tconst te = m.elements;\n\t\tconst m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n\t\tconst m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n\t\tconst m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\tswitch ( order ) {\n\n\t\t\tcase 'XYZ':\n\n\t\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m13 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'YXZ':\n\n\t\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m23 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZXY':\n\n\t\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m32 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = 0;\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZYX':\n\n\t\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m31 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'YZX':\n\n\t\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m21 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m22 );\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'XZY':\n\n\t\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m12 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._y = Math.atan2( m13, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._y = 0;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order );\n\n\t\t}\n\n\t\tthis._order = order;\n\n\t\tif ( update === true ) this._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromQuaternion( q, order, update ) {\n\n\t\t_matrix$1.makeRotationFromQuaternion( q );\n\n\t\treturn this.setFromRotationMatrix( _matrix$1, order, update );\n\n\t}\n\n\tsetFromVector3( v, order = this._order ) {\n\n\t\treturn this.set( v.x, v.y, v.z, order );\n\n\t}\n\n\treorder( newOrder ) {\n\n\t\t// WARNING: this discards revolution information -bhouston\n\n\t\t_quaternion$3.setFromEuler( this );\n\n\t\treturn this.setFromQuaternion( _quaternion$3, newOrder );\n\n\t}\n\n\tequals( euler ) {\n\n\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\n\t}\n\n\tfromArray( array ) {\n\n\t\tthis._x = array[ 0 ];\n\t\tthis._y = array[ 1 ];\n\t\tthis._z = array[ 2 ];\n\t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._order;\n\n\t\treturn array;\n\n\t}\n\n\ttoVector3( optionalResult ) {\n\n\t\tif ( optionalResult ) {\n\n\t\t\treturn optionalResult.set( this._x, this._y, this._z );\n\n\t\t} else {\n\n\t\t\treturn new Vector3( this._x, this._y, this._z );\n\n\t\t}\n\n\t}\n\n\t_onChange( callback ) {\n\n\t\tthis._onChangeCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\t_onChangeCallback() {}\n\n}\n\nEuler.prototype.isEuler = true;\n\nEuler.DefaultOrder = 'XYZ';\nEuler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\n\nclass Layers {\n\n\tconstructor() {\n\n\t\tthis.mask = 1 | 0;\n\n\t}\n\n\tset( channel ) {\n\n\t\tthis.mask = ( 1 << channel | 0 ) >>> 0;\n\n\t}\n\n\tenable( channel ) {\n\n\t\tthis.mask |= 1 << channel | 0;\n\n\t}\n\n\tenableAll() {\n\n\t\tthis.mask = 0xffffffff | 0;\n\n\t}\n\n\ttoggle( channel ) {\n\n\t\tthis.mask ^= 1 << channel | 0;\n\n\t}\n\n\tdisable( channel ) {\n\n\t\tthis.mask &= ~ ( 1 << channel | 0 );\n\n\t}\n\n\tdisableAll() {\n\n\t\tthis.mask = 0;\n\n\t}\n\n\ttest( layers ) {\n\n\t\treturn ( this.mask & layers.mask ) !== 0;\n\n\t}\n\n\tisEnabled( channel ) {\n\n\t\treturn ( this.mask & ( 1 << channel | 0 ) ) !== 0;\n\n\t}\n\n}\n\nlet _object3DId = 0;\n\nconst _v1$4 = /*@__PURE__*/ new Vector3();\nconst _q1 = /*@__PURE__*/ new Quaternion();\nconst _m1$1 = /*@__PURE__*/ new Matrix4();\nconst _target = /*@__PURE__*/ new Vector3();\n\nconst _position$3 = /*@__PURE__*/ new Vector3();\nconst _scale$2 = /*@__PURE__*/ new Vector3();\nconst _quaternion$2 = /*@__PURE__*/ new Quaternion();\n\nconst _xAxis = /*@__PURE__*/ new Vector3( 1, 0, 0 );\nconst _yAxis = /*@__PURE__*/ new Vector3( 0, 1, 0 );\nconst _zAxis = /*@__PURE__*/ new Vector3( 0, 0, 1 );\n\nconst _addedEvent = { type: 'added' };\nconst _removedEvent = { type: 'removed' };\n\nclass Object3D extends EventDispatcher {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tObject.defineProperty( this, 'id', { value: _object3DId ++ } );\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Object3D';\n\n\t\tthis.parent = null;\n\t\tthis.children = [];\n\n\t\tthis.up = Object3D.DefaultUp.clone();\n\n\t\tconst position = new Vector3();\n\t\tconst rotation = new Euler();\n\t\tconst quaternion = new Quaternion();\n\t\tconst scale = new Vector3( 1, 1, 1 );\n\n\t\tfunction onRotationChange() {\n\n\t\t\tquaternion.setFromEuler( rotation, false );\n\n\t\t}\n\n\t\tfunction onQuaternionChange() {\n\n\t\t\trotation.setFromQuaternion( quaternion, undefined, false );\n\n\t\t}\n\n\t\trotation._onChange( onRotationChange );\n\t\tquaternion._onChange( onQuaternionChange );\n\n\t\tObject.defineProperties( this, {\n\t\t\tposition: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: position\n\t\t\t},\n\t\t\trotation: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: rotation\n\t\t\t},\n\t\t\tquaternion: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: quaternion\n\t\t\t},\n\t\t\tscale: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: scale\n\t\t\t},\n\t\t\tmodelViewMatrix: {\n\t\t\t\tvalue: new Matrix4()\n\t\t\t},\n\t\t\tnormalMatrix: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t} );\n\n\t\tthis.matrix = new Matrix4();\n\t\tthis.matrixWorld = new Matrix4();\n\n\t\tthis.matrixAutoUpdate = Object3D.DefaultMatrixAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\tthis.layers = new Layers();\n\t\tthis.visible = true;\n\n\t\tthis.castShadow = false;\n\t\tthis.receiveShadow = false;\n\n\t\tthis.frustumCulled = true;\n\t\tthis.renderOrder = 0;\n\n\t\tthis.animations = [];\n\n\t\tthis.userData = {};\n\n\t}\n\n\tonBeforeRender( /* renderer, scene, camera, geometry, material, group */ ) {}\n\n\tonAfterRender( /* renderer, scene, camera, geometry, material, group */ ) {}\n\n\tapplyMatrix4( matrix ) {\n\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\n\n\t\tthis.matrix.premultiply( matrix );\n\n\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\n\t}\n\n\tapplyQuaternion( q ) {\n\n\t\tthis.quaternion.premultiply( q );\n\n\t\treturn this;\n\n\t}\n\n\tsetRotationFromAxisAngle( axis, angle ) {\n\n\t\t// assumes axis is normalized\n\n\t\tthis.quaternion.setFromAxisAngle( axis, angle );\n\n\t}\n\n\tsetRotationFromEuler( euler ) {\n\n\t\tthis.quaternion.setFromEuler( euler, true );\n\n\t}\n\n\tsetRotationFromMatrix( m ) {\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tthis.quaternion.setFromRotationMatrix( m );\n\n\t}\n\n\tsetRotationFromQuaternion( q ) {\n\n\t\t// assumes q is normalized\n\n\t\tthis.quaternion.copy( q );\n\n\t}\n\n\trotateOnAxis( axis, angle ) {\n\n\t\t// rotate object on axis in object space\n\t\t// axis is assumed to be normalized\n\n\t\t_q1.setFromAxisAngle( axis, angle );\n\n\t\tthis.quaternion.multiply( _q1 );\n\n\t\treturn this;\n\n\t}\n\n\trotateOnWorldAxis( axis, angle ) {\n\n\t\t// rotate object on axis in world space\n\t\t// axis is assumed to be normalized\n\t\t// method assumes no rotated parent\n\n\t\t_q1.setFromAxisAngle( axis, angle );\n\n\t\tthis.quaternion.premultiply( _q1 );\n\n\t\treturn this;\n\n\t}\n\n\trotateX( angle ) {\n\n\t\treturn this.rotateOnAxis( _xAxis, angle );\n\n\t}\n\n\trotateY( angle ) {\n\n\t\treturn this.rotateOnAxis( _yAxis, angle );\n\n\t}\n\n\trotateZ( angle ) {\n\n\t\treturn this.rotateOnAxis( _zAxis, angle );\n\n\t}\n\n\ttranslateOnAxis( axis, distance ) {\n\n\t\t// translate object by distance along axis in object space\n\t\t// axis is assumed to be normalized\n\n\t\t_v1$4.copy( axis ).applyQuaternion( this.quaternion );\n\n\t\tthis.position.add( _v1$4.multiplyScalar( distance ) );\n\n\t\treturn this;\n\n\t}\n\n\ttranslateX( distance ) {\n\n\t\treturn this.translateOnAxis( _xAxis, distance );\n\n\t}\n\n\ttranslateY( distance ) {\n\n\t\treturn this.translateOnAxis( _yAxis, distance );\n\n\t}\n\n\ttranslateZ( distance ) {\n\n\t\treturn this.translateOnAxis( _zAxis, distance );\n\n\t}\n\n\tlocalToWorld( vector ) {\n\n\t\treturn vector.applyMatrix4( this.matrixWorld );\n\n\t}\n\n\tworldToLocal( vector ) {\n\n\t\treturn vector.applyMatrix4( _m1$1.copy( this.matrixWorld ).invert() );\n\n\t}\n\n\tlookAt( x, y, z ) {\n\n\t\t// This method does not support objects having non-uniformly-scaled parent(s)\n\n\t\tif ( x.isVector3 ) {\n\n\t\t\t_target.copy( x );\n\n\t\t} else {\n\n\t\t\t_target.set( x, y, z );\n\n\t\t}\n\n\t\tconst parent = this.parent;\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\t_position$3.setFromMatrixPosition( this.matrixWorld );\n\n\t\tif ( this.isCamera || this.isLight ) {\n\n\t\t\t_m1$1.lookAt( _position$3, _target, this.up );\n\n\t\t} else {\n\n\t\t\t_m1$1.lookAt( _target, _position$3, this.up );\n\n\t\t}\n\n\t\tthis.quaternion.setFromRotationMatrix( _m1$1 );\n\n\t\tif ( parent ) {\n\n\t\t\t_m1$1.extractRotation( parent.matrixWorld );\n\t\t\t_q1.setFromRotationMatrix( _m1$1 );\n\t\t\tthis.quaternion.premultiply( _q1.invert() );\n\n\t\t}\n\n\t}\n\n\tadd( object ) {\n\n\t\tif ( arguments.length > 1 ) {\n\n\t\t\tfor ( let i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\tthis.add( arguments[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( object === this ) {\n\n\t\t\tconsole.error( 'THREE.Object3D.add: object can\\'t be added as a child of itself.', object );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( object && object.isObject3D ) {\n\n\t\t\tif ( object.parent !== null ) {\n\n\t\t\t\tobject.parent.remove( object );\n\n\t\t\t}\n\n\t\t\tobject.parent = this;\n\t\t\tthis.children.push( object );\n\n\t\t\tobject.dispatchEvent( _addedEvent );\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.Object3D.add: object not an instance of THREE.Object3D.', object );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tremove( object ) {\n\n\t\tif ( arguments.length > 1 ) {\n\n\t\t\tfor ( let i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\tthis.remove( arguments[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst index = this.children.indexOf( object );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tobject.parent = null;\n\t\t\tthis.children.splice( index, 1 );\n\n\t\t\tobject.dispatchEvent( _removedEvent );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tremoveFromParent() {\n\n\t\tconst parent = this.parent;\n\n\t\tif ( parent !== null ) {\n\n\t\t\tparent.remove( this );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tclear() {\n\n\t\tfor ( let i = 0; i < this.children.length; i ++ ) {\n\n\t\t\tconst object = this.children[ i ];\n\n\t\t\tobject.parent = null;\n\n\t\t\tobject.dispatchEvent( _removedEvent );\n\n\t\t}\n\n\t\tthis.children.length = 0;\n\n\t\treturn this;\n\n\n\t}\n\n\tattach( object ) {\n\n\t\t// adds object as a child of this, while maintaining the object's world transform\n\n\t\t// Note: This method does not support scene graphs having non-uniformly-scaled nodes(s)\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\t_m1$1.copy( this.matrixWorld ).invert();\n\n\t\tif ( object.parent !== null ) {\n\n\t\t\tobject.parent.updateWorldMatrix( true, false );\n\n\t\t\t_m1$1.multiply( object.parent.matrixWorld );\n\n\t\t}\n\n\t\tobject.applyMatrix4( _m1$1 );\n\n\t\tthis.add( object );\n\n\t\tobject.updateWorldMatrix( false, true );\n\n\t\treturn this;\n\n\t}\n\n\tgetObjectById( id ) {\n\n\t\treturn this.getObjectByProperty( 'id', id );\n\n\t}\n\n\tgetObjectByName( name ) {\n\n\t\treturn this.getObjectByProperty( 'name', name );\n\n\t}\n\n\tgetObjectByProperty( name, value ) {\n\n\t\tif ( this[ name ] === value ) return this;\n\n\t\tfor ( let i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\tconst child = this.children[ i ];\n\t\t\tconst object = child.getObjectByProperty( name, value );\n\n\t\t\tif ( object !== undefined ) {\n\n\t\t\t\treturn object;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn undefined;\n\n\t}\n\n\tgetWorldPosition( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\treturn target.setFromMatrixPosition( this.matrixWorld );\n\n\t}\n\n\tgetWorldQuaternion( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\tthis.matrixWorld.decompose( _position$3, target, _scale$2 );\n\n\t\treturn target;\n\n\t}\n\n\tgetWorldScale( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\tthis.matrixWorld.decompose( _position$3, _quaternion$2, target );\n\n\t\treturn target;\n\n\t}\n\n\tgetWorldDirection( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\tconst e = this.matrixWorld.elements;\n\n\t\treturn target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();\n\n\t}\n\n\traycast() {}\n\n\ttraverse( callback ) {\n\n\t\tcallback( this );\n\n\t\tconst children = this.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].traverse( callback );\n\n\t\t}\n\n\t}\n\n\ttraverseVisible( callback ) {\n\n\t\tif ( this.visible === false ) return;\n\n\t\tcallback( this );\n\n\t\tconst children = this.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].traverseVisible( callback );\n\n\t\t}\n\n\t}\n\n\ttraverseAncestors( callback ) {\n\n\t\tconst parent = this.parent;\n\n\t\tif ( parent !== null ) {\n\n\t\t\tcallback( parent );\n\n\t\t\tparent.traverseAncestors( callback );\n\n\t\t}\n\n\t}\n\n\tupdateMatrix() {\n\n\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\n\n\t\tthis.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\n\n\t\tif ( this.matrixWorldNeedsUpdate || force ) {\n\n\t\t\tif ( this.parent === null ) {\n\n\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t}\n\n\t\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\t\tforce = true;\n\n\t\t}\n\n\t\t// update children\n\n\t\tconst children = this.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].updateMatrixWorld( force );\n\n\t\t}\n\n\t}\n\n\tupdateWorldMatrix( updateParents, updateChildren ) {\n\n\t\tconst parent = this.parent;\n\n\t\tif ( updateParents === true && parent !== null ) {\n\n\t\t\tparent.updateWorldMatrix( true, false );\n\n\t\t}\n\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\n\n\t\tif ( this.parent === null ) {\n\n\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t} else {\n\n\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t}\n\n\t\t// update children\n\n\t\tif ( updateChildren === true ) {\n\n\t\t\tconst children = this.children;\n\n\t\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].updateWorldMatrix( false, true );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\t// meta is a string when called from JSON.stringify\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tconst output = {};\n\n\t\t// meta is a hash used to collect geometries, materials.\n\t\t// not providing it implies that this is the root object\n\t\t// being serialized.\n\t\tif ( isRootObject ) {\n\n\t\t\t// initialize meta obj\n\t\t\tmeta = {\n\t\t\t\tgeometries: {},\n\t\t\t\tmaterials: {},\n\t\t\t\ttextures: {},\n\t\t\t\timages: {},\n\t\t\t\tshapes: {},\n\t\t\t\tskeletons: {},\n\t\t\t\tanimations: {}\n\t\t\t};\n\n\t\t\toutput.metadata = {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Object',\n\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t};\n\n\t\t}\n\n\t\t// standard Object3D serialization\n\n\t\tconst object = {};\n\n\t\tobject.uuid = this.uuid;\n\t\tobject.type = this.type;\n\n\t\tif ( this.name !== '' ) object.name = this.name;\n\t\tif ( this.castShadow === true ) object.castShadow = true;\n\t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\n\t\tif ( this.visible === false ) object.visible = false;\n\t\tif ( this.frustumCulled === false ) object.frustumCulled = false;\n\t\tif ( this.renderOrder !== 0 ) object.renderOrder = this.renderOrder;\n\t\tif ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;\n\n\t\tobject.layers = this.layers.mask;\n\t\tobject.matrix = this.matrix.toArray();\n\n\t\tif ( this.matrixAutoUpdate === false ) object.matrixAutoUpdate = false;\n\n\t\t// object specific properties\n\n\t\tif ( this.isInstancedMesh ) {\n\n\t\t\tobject.type = 'InstancedMesh';\n\t\t\tobject.count = this.count;\n\t\t\tobject.instanceMatrix = this.instanceMatrix.toJSON();\n\t\t\tif ( this.instanceColor !== null ) object.instanceColor = this.instanceColor.toJSON();\n\n\t\t}\n\n\t\t//\n\n\t\tfunction serialize( library, element ) {\n\n\t\t\tif ( library[ element.uuid ] === undefined ) {\n\n\t\t\t\tlibrary[ element.uuid ] = element.toJSON( meta );\n\n\t\t\t}\n\n\t\t\treturn element.uuid;\n\n\t\t}\n\n\t\tif ( this.isScene ) {\n\n\t\t\tif ( this.background ) {\n\n\t\t\t\tif ( this.background.isColor ) {\n\n\t\t\t\t\tobject.background = this.background.toJSON();\n\n\t\t\t\t} else if ( this.background.isTexture ) {\n\n\t\t\t\t\tobject.background = this.background.toJSON( meta ).uuid;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.environment && this.environment.isTexture ) {\n\n\t\t\t\tobject.environment = this.environment.toJSON( meta ).uuid;\n\n\t\t\t}\n\n\t\t} else if ( this.isMesh || this.isLine || this.isPoints ) {\n\n\t\t\tobject.geometry = serialize( meta.geometries, this.geometry );\n\n\t\t\tconst parameters = this.geometry.parameters;\n\n\t\t\tif ( parameters !== undefined && parameters.shapes !== undefined ) {\n\n\t\t\t\tconst shapes = parameters.shapes;\n\n\t\t\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\t\t\tfor ( let i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tconst shape = shapes[ i ];\n\n\t\t\t\t\t\tserialize( meta.shapes, shape );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tserialize( meta.shapes, shapes );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.isSkinnedMesh ) {\n\n\t\t\tobject.bindMode = this.bindMode;\n\t\t\tobject.bindMatrix = this.bindMatrix.toArray();\n\n\t\t\tif ( this.skeleton !== undefined ) {\n\n\t\t\t\tserialize( meta.skeletons, this.skeleton );\n\n\t\t\t\tobject.skeleton = this.skeleton.uuid;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.material !== undefined ) {\n\n\t\t\tif ( Array.isArray( this.material ) ) {\n\n\t\t\t\tconst uuids = [];\n\n\t\t\t\tfor ( let i = 0, l = this.material.length; i < l; i ++ ) {\n\n\t\t\t\t\tuuids.push( serialize( meta.materials, this.material[ i ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tobject.material = uuids;\n\n\t\t\t} else {\n\n\t\t\t\tobject.material = serialize( meta.materials, this.material );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tif ( this.children.length > 0 ) {\n\n\t\t\tobject.children = [];\n\n\t\t\tfor ( let i = 0; i < this.children.length; i ++ ) {\n\n\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tif ( this.animations.length > 0 ) {\n\n\t\t\tobject.animations = [];\n\n\t\t\tfor ( let i = 0; i < this.animations.length; i ++ ) {\n\n\t\t\t\tconst animation = this.animations[ i ];\n\n\t\t\t\tobject.animations.push( serialize( meta.animations, animation ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( isRootObject ) {\n\n\t\t\tconst geometries = extractFromCache( meta.geometries );\n\t\t\tconst materials = extractFromCache( meta.materials );\n\t\t\tconst textures = extractFromCache( meta.textures );\n\t\t\tconst images = extractFromCache( meta.images );\n\t\t\tconst shapes = extractFromCache( meta.shapes );\n\t\t\tconst skeletons = extractFromCache( meta.skeletons );\n\t\t\tconst animations = extractFromCache( meta.animations );\n\n\t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\n\t\t\tif ( materials.length > 0 ) output.materials = materials;\n\t\t\tif ( textures.length > 0 ) output.textures = textures;\n\t\t\tif ( images.length > 0 ) output.images = images;\n\t\t\tif ( shapes.length > 0 ) output.shapes = shapes;\n\t\t\tif ( skeletons.length > 0 ) output.skeletons = skeletons;\n\t\t\tif ( animations.length > 0 ) output.animations = animations;\n\n\t\t}\n\n\t\toutput.object = object;\n\n\t\treturn output;\n\n\t\t// extract data from the cache hash\n\t\t// remove metadata on each item\n\t\t// and return as array\n\t\tfunction extractFromCache( cache ) {\n\n\t\t\tconst values = [];\n\t\t\tfor ( const key in cache ) {\n\n\t\t\t\tconst data = cache[ key ];\n\t\t\t\tdelete data.metadata;\n\t\t\t\tvalues.push( data );\n\n\t\t\t}\n\n\t\t\treturn values;\n\n\t\t}\n\n\t}\n\n\tclone( recursive ) {\n\n\t\treturn new this.constructor().copy( this, recursive );\n\n\t}\n\n\tcopy( source, recursive = true ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.up.copy( source.up );\n\n\t\tthis.position.copy( source.position );\n\t\tthis.rotation.order = source.rotation.order;\n\t\tthis.quaternion.copy( source.quaternion );\n\t\tthis.scale.copy( source.scale );\n\n\t\tthis.matrix.copy( source.matrix );\n\t\tthis.matrixWorld.copy( source.matrixWorld );\n\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\n\t\tthis.layers.mask = source.layers.mask;\n\t\tthis.visible = source.visible;\n\n\t\tthis.castShadow = source.castShadow;\n\t\tthis.receiveShadow = source.receiveShadow;\n\n\t\tthis.frustumCulled = source.frustumCulled;\n\t\tthis.renderOrder = source.renderOrder;\n\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\tif ( recursive === true ) {\n\n\t\t\tfor ( let i = 0; i < source.children.length; i ++ ) {\n\n\t\t\t\tconst child = source.children[ i ];\n\t\t\t\tthis.add( child.clone() );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nObject3D.DefaultUp = new Vector3( 0, 1, 0 );\nObject3D.DefaultMatrixAutoUpdate = true;\n\nObject3D.prototype.isObject3D = true;\n\nconst _v0$1 = /*@__PURE__*/ new Vector3();\nconst _v1$3 = /*@__PURE__*/ new Vector3();\nconst _v2$2 = /*@__PURE__*/ new Vector3();\nconst _v3$1 = /*@__PURE__*/ new Vector3();\n\nconst _vab = /*@__PURE__*/ new Vector3();\nconst _vac = /*@__PURE__*/ new Vector3();\nconst _vbc = /*@__PURE__*/ new Vector3();\nconst _vap = /*@__PURE__*/ new Vector3();\nconst _vbp = /*@__PURE__*/ new Vector3();\nconst _vcp = /*@__PURE__*/ new Vector3();\n\nclass Triangle {\n\n\tconstructor( a = new Vector3(), b = new Vector3(), c = new Vector3() ) {\n\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\tthis.c = c;\n\n\t}\n\n\tstatic getNormal( a, b, c, target ) {\n\n\t\ttarget.subVectors( c, b );\n\t\t_v0$1.subVectors( a, b );\n\t\ttarget.cross( _v0$1 );\n\n\t\tconst targetLengthSq = target.lengthSq();\n\t\tif ( targetLengthSq > 0 ) {\n\n\t\t\treturn target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );\n\n\t\t}\n\n\t\treturn target.set( 0, 0, 0 );\n\n\t}\n\n\t// static/instance method to calculate barycentric coordinates\n\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\tstatic getBarycoord( point, a, b, c, target ) {\n\n\t\t_v0$1.subVectors( c, a );\n\t\t_v1$3.subVectors( b, a );\n\t\t_v2$2.subVectors( point, a );\n\n\t\tconst dot00 = _v0$1.dot( _v0$1 );\n\t\tconst dot01 = _v0$1.dot( _v1$3 );\n\t\tconst dot02 = _v0$1.dot( _v2$2 );\n\t\tconst dot11 = _v1$3.dot( _v1$3 );\n\t\tconst dot12 = _v1$3.dot( _v2$2 );\n\n\t\tconst denom = ( dot00 * dot11 - dot01 * dot01 );\n\n\t\t// collinear or singular triangle\n\t\tif ( denom === 0 ) {\n\n\t\t\t// arbitrary location outside of triangle?\n\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\treturn target.set( - 2, - 1, - 1 );\n\n\t\t}\n\n\t\tconst invDenom = 1 / denom;\n\t\tconst u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n\t\tconst v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\n\t\t// barycentric coordinates must always sum to 1\n\t\treturn target.set( 1 - u - v, v, u );\n\n\t}\n\n\tstatic containsPoint( point, a, b, c ) {\n\n\t\tthis.getBarycoord( point, a, b, c, _v3$1 );\n\n\t\treturn ( _v3$1.x >= 0 ) && ( _v3$1.y >= 0 ) && ( ( _v3$1.x + _v3$1.y ) <= 1 );\n\n\t}\n\n\tstatic getUV( point, p1, p2, p3, uv1, uv2, uv3, target ) {\n\n\t\tthis.getBarycoord( point, p1, p2, p3, _v3$1 );\n\n\t\ttarget.set( 0, 0 );\n\t\ttarget.addScaledVector( uv1, _v3$1.x );\n\t\ttarget.addScaledVector( uv2, _v3$1.y );\n\t\ttarget.addScaledVector( uv3, _v3$1.z );\n\n\t\treturn target;\n\n\t}\n\n\tstatic isFrontFacing( a, b, c, direction ) {\n\n\t\t_v0$1.subVectors( c, b );\n\t\t_v1$3.subVectors( a, b );\n\n\t\t// strictly front facing\n\t\treturn ( _v0$1.cross( _v1$3 ).dot( direction ) < 0 ) ? true : false;\n\n\t}\n\n\tset( a, b, c ) {\n\n\t\tthis.a.copy( a );\n\t\tthis.b.copy( b );\n\t\tthis.c.copy( c );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPointsAndIndices( points, i0, i1, i2 ) {\n\n\t\tthis.a.copy( points[ i0 ] );\n\t\tthis.b.copy( points[ i1 ] );\n\t\tthis.c.copy( points[ i2 ] );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromAttributeAndIndices( attribute, i0, i1, i2 ) {\n\n\t\tthis.a.fromBufferAttribute( attribute, i0 );\n\t\tthis.b.fromBufferAttribute( attribute, i1 );\n\t\tthis.c.fromBufferAttribute( attribute, i2 );\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( triangle ) {\n\n\t\tthis.a.copy( triangle.a );\n\t\tthis.b.copy( triangle.b );\n\t\tthis.c.copy( triangle.c );\n\n\t\treturn this;\n\n\t}\n\n\tgetArea() {\n\n\t\t_v0$1.subVectors( this.c, this.b );\n\t\t_v1$3.subVectors( this.a, this.b );\n\n\t\treturn _v0$1.cross( _v1$3 ).length() * 0.5;\n\n\t}\n\n\tgetMidpoint( target ) {\n\n\t\treturn target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\n\t}\n\n\tgetNormal( target ) {\n\n\t\treturn Triangle.getNormal( this.a, this.b, this.c, target );\n\n\t}\n\n\tgetPlane( target ) {\n\n\t\treturn target.setFromCoplanarPoints( this.a, this.b, this.c );\n\n\t}\n\n\tgetBarycoord( point, target ) {\n\n\t\treturn Triangle.getBarycoord( point, this.a, this.b, this.c, target );\n\n\t}\n\n\tgetUV( point, uv1, uv2, uv3, target ) {\n\n\t\treturn Triangle.getUV( point, this.a, this.b, this.c, uv1, uv2, uv3, target );\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\n\n\t}\n\n\tisFrontFacing( direction ) {\n\n\t\treturn Triangle.isFrontFacing( this.a, this.b, this.c, direction );\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\treturn box.intersectsTriangle( this );\n\n\t}\n\n\tclosestPointToPoint( p, target ) {\n\n\t\tconst a = this.a, b = this.b, c = this.c;\n\t\tlet v, w;\n\n\t\t// algorithm thanks to Real-Time Collision Detection by Christer Ericson,\n\t\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\n\t\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\n\t\t// basically, we're distinguishing which of the voronoi regions of the triangle\n\t\t// the point lies in with the minimum amount of redundant computation.\n\n\t\t_vab.subVectors( b, a );\n\t\t_vac.subVectors( c, a );\n\t\t_vap.subVectors( p, a );\n\t\tconst d1 = _vab.dot( _vap );\n\t\tconst d2 = _vac.dot( _vap );\n\t\tif ( d1 <= 0 && d2 <= 0 ) {\n\n\t\t\t// vertex region of A; barycentric coords (1, 0, 0)\n\t\t\treturn target.copy( a );\n\n\t\t}\n\n\t\t_vbp.subVectors( p, b );\n\t\tconst d3 = _vab.dot( _vbp );\n\t\tconst d4 = _vac.dot( _vbp );\n\t\tif ( d3 >= 0 && d4 <= d3 ) {\n\n\t\t\t// vertex region of B; barycentric coords (0, 1, 0)\n\t\t\treturn target.copy( b );\n\n\t\t}\n\n\t\tconst vc = d1 * d4 - d3 * d2;\n\t\tif ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {\n\n\t\t\tv = d1 / ( d1 - d3 );\n\t\t\t// edge region of AB; barycentric coords (1-v, v, 0)\n\t\t\treturn target.copy( a ).addScaledVector( _vab, v );\n\n\t\t}\n\n\t\t_vcp.subVectors( p, c );\n\t\tconst d5 = _vab.dot( _vcp );\n\t\tconst d6 = _vac.dot( _vcp );\n\t\tif ( d6 >= 0 && d5 <= d6 ) {\n\n\t\t\t// vertex region of C; barycentric coords (0, 0, 1)\n\t\t\treturn target.copy( c );\n\n\t\t}\n\n\t\tconst vb = d5 * d2 - d1 * d6;\n\t\tif ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {\n\n\t\t\tw = d2 / ( d2 - d6 );\n\t\t\t// edge region of AC; barycentric coords (1-w, 0, w)\n\t\t\treturn target.copy( a ).addScaledVector( _vac, w );\n\n\t\t}\n\n\t\tconst va = d3 * d6 - d5 * d4;\n\t\tif ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {\n\n\t\t\t_vbc.subVectors( c, b );\n\t\t\tw = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );\n\t\t\t// edge region of BC; barycentric coords (0, 1-w, w)\n\t\t\treturn target.copy( b ).addScaledVector( _vbc, w ); // edge region of BC\n\n\t\t}\n\n\t\t// face region\n\t\tconst denom = 1 / ( va + vb + vc );\n\t\t// u = va * denom\n\t\tv = vb * denom;\n\t\tw = vc * denom;\n\n\t\treturn target.copy( a ).addScaledVector( _vab, v ).addScaledVector( _vac, w );\n\n\t}\n\n\tequals( triangle ) {\n\n\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\n\t}\n\n}\n\nlet materialId = 0;\n\nclass Material extends EventDispatcher {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tObject.defineProperty( this, 'id', { value: materialId ++ } );\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Material';\n\n\t\tthis.fog = true;\n\n\t\tthis.blending = NormalBlending;\n\t\tthis.side = FrontSide;\n\t\tthis.vertexColors = false;\n\n\t\tthis.opacity = 1;\n\t\tthis.format = RGBAFormat;\n\t\tthis.transparent = false;\n\n\t\tthis.blendSrc = SrcAlphaFactor;\n\t\tthis.blendDst = OneMinusSrcAlphaFactor;\n\t\tthis.blendEquation = AddEquation;\n\t\tthis.blendSrcAlpha = null;\n\t\tthis.blendDstAlpha = null;\n\t\tthis.blendEquationAlpha = null;\n\n\t\tthis.depthFunc = LessEqualDepth;\n\t\tthis.depthTest = true;\n\t\tthis.depthWrite = true;\n\n\t\tthis.stencilWriteMask = 0xff;\n\t\tthis.stencilFunc = AlwaysStencilFunc;\n\t\tthis.stencilRef = 0;\n\t\tthis.stencilFuncMask = 0xff;\n\t\tthis.stencilFail = KeepStencilOp;\n\t\tthis.stencilZFail = KeepStencilOp;\n\t\tthis.stencilZPass = KeepStencilOp;\n\t\tthis.stencilWrite = false;\n\n\t\tthis.clippingPlanes = null;\n\t\tthis.clipIntersection = false;\n\t\tthis.clipShadows = false;\n\n\t\tthis.shadowSide = null;\n\n\t\tthis.colorWrite = true;\n\n\t\tthis.precision = null; // override the renderer's default precision for this material\n\n\t\tthis.polygonOffset = false;\n\t\tthis.polygonOffsetFactor = 0;\n\t\tthis.polygonOffsetUnits = 0;\n\n\t\tthis.dithering = false;\n\n\t\tthis.alphaToCoverage = false;\n\t\tthis.premultipliedAlpha = false;\n\n\t\tthis.visible = true;\n\n\t\tthis.toneMapped = true;\n\n\t\tthis.userData = {};\n\n\t\tthis.version = 0;\n\n\t\tthis._alphaTest = 0;\n\n\t}\n\n\tget alphaTest() {\n\n\t\treturn this._alphaTest;\n\n\t}\n\n\tset alphaTest( value ) {\n\n\t\tif ( this._alphaTest > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._alphaTest = value;\n\n\t}\n\n\tonBuild( /* shaderobject, renderer */ ) {}\n\n\tonBeforeRender( /* renderer, scene, camera, geometry, object, group */ ) {}\n\n\tonBeforeCompile( /* shaderobject, renderer */ ) {}\n\n\tcustomProgramCacheKey() {\n\n\t\treturn this.onBeforeCompile.toString();\n\n\t}\n\n\tsetValues( values ) {\n\n\t\tif ( values === undefined ) return;\n\n\t\tfor ( const key in values ) {\n\n\t\t\tconst newValue = values[ key ];\n\n\t\t\tif ( newValue === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Material: \\'' + key + '\\' parameter is undefined.' );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\t// for backward compatability if shading is set in the constructor\n\t\t\tif ( key === 'shading' ) {\n\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\t\t\t\tthis.flatShading = ( newValue === FlatShading ) ? true : false;\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tconst currentValue = this[ key ];\n\n\t\t\tif ( currentValue === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.' + this.type + ': \\'' + key + '\\' is not a property of this material.' );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tif ( currentValue && currentValue.isColor ) {\n\n\t\t\t\tcurrentValue.set( newValue );\n\n\t\t\t} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {\n\n\t\t\t\tcurrentValue.copy( newValue );\n\n\t\t\t} else {\n\n\t\t\t\tthis[ key ] = newValue;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst isRoot = ( meta === undefined || typeof meta === 'string' );\n\n\t\tif ( isRoot ) {\n\n\t\t\tmeta = {\n\t\t\t\ttextures: {},\n\t\t\t\timages: {}\n\t\t\t};\n\n\t\t}\n\n\t\tconst data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Material',\n\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard Material serialization\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\n\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\tif ( this.color && this.color.isColor ) data.color = this.color.getHex();\n\n\t\tif ( this.roughness !== undefined ) data.roughness = this.roughness;\n\t\tif ( this.metalness !== undefined ) data.metalness = this.metalness;\n\n\t\tif ( this.sheen !== undefined ) data.sheen = this.sheen;\n\t\tif ( this.sheenColor && this.sheenColor.isColor ) data.sheenColor = this.sheenColor.getHex();\n\t\tif ( this.sheenRoughness !== undefined ) data.sheenRoughness = this.sheenRoughness;\n\t\tif ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();\n\t\tif ( this.emissiveIntensity && this.emissiveIntensity !== 1 ) data.emissiveIntensity = this.emissiveIntensity;\n\n\t\tif ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();\n\t\tif ( this.specularIntensity !== undefined ) data.specularIntensity = this.specularIntensity;\n\t\tif ( this.specularColor && this.specularColor.isColor ) data.specularColor = this.specularColor.getHex();\n\t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\n\t\tif ( this.clearcoat !== undefined ) data.clearcoat = this.clearcoat;\n\t\tif ( this.clearcoatRoughness !== undefined ) data.clearcoatRoughness = this.clearcoatRoughness;\n\n\t\tif ( this.clearcoatMap && this.clearcoatMap.isTexture ) {\n\n\t\t\tdata.clearcoatMap = this.clearcoatMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture ) {\n\n\t\t\tdata.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture ) {\n\n\t\t\tdata.clearcoatNormalMap = this.clearcoatNormalMap.toJSON( meta ).uuid;\n\t\t\tdata.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\n\n\t\t}\n\n\t\tif ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;\n\t\tif ( this.matcap && this.matcap.isTexture ) data.matcap = this.matcap.toJSON( meta ).uuid;\n\t\tif ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\n\n\t\tif ( this.lightMap && this.lightMap.isTexture ) {\n\n\t\t\tdata.lightMap = this.lightMap.toJSON( meta ).uuid;\n\t\t\tdata.lightMapIntensity = this.lightMapIntensity;\n\n\t\t}\n\n\t\tif ( this.aoMap && this.aoMap.isTexture ) {\n\n\t\t\tdata.aoMap = this.aoMap.toJSON( meta ).uuid;\n\t\t\tdata.aoMapIntensity = this.aoMapIntensity;\n\n\t\t}\n\n\t\tif ( this.bumpMap && this.bumpMap.isTexture ) {\n\n\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n\t\t\tdata.bumpScale = this.bumpScale;\n\n\t\t}\n\n\t\tif ( this.normalMap && this.normalMap.isTexture ) {\n\n\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n\t\t\tdata.normalMapType = this.normalMapType;\n\t\t\tdata.normalScale = this.normalScale.toArray();\n\n\t\t}\n\n\t\tif ( this.displacementMap && this.displacementMap.isTexture ) {\n\n\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\tdata.displacementBias = this.displacementBias;\n\n\t\t}\n\n\t\tif ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\n\t\tif ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\n\n\t\tif ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\n\t\tif ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\n\t\tif ( this.specularIntensityMap && this.specularIntensityMap.isTexture ) data.specularIntensityMap = this.specularIntensityMap.toJSON( meta ).uuid;\n\t\tif ( this.specularColorMap && this.specularColorMap.isTexture ) data.specularColorMap = this.specularColorMap.toJSON( meta ).uuid;\n\n\t\tif ( this.envMap && this.envMap.isTexture ) {\n\n\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n\n\t\t\tif ( this.combine !== undefined ) data.combine = this.combine;\n\n\t\t}\n\n\t\tif ( this.envMapIntensity !== undefined ) data.envMapIntensity = this.envMapIntensity;\n\t\tif ( this.reflectivity !== undefined ) data.reflectivity = this.reflectivity;\n\t\tif ( this.refractionRatio !== undefined ) data.refractionRatio = this.refractionRatio;\n\n\t\tif ( this.gradientMap && this.gradientMap.isTexture ) {\n\n\t\t\tdata.gradientMap = this.gradientMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.transmission !== undefined ) data.transmission = this.transmission;\n\t\tif ( this.transmissionMap && this.transmissionMap.isTexture ) data.transmissionMap = this.transmissionMap.toJSON( meta ).uuid;\n\t\tif ( this.thickness !== undefined ) data.thickness = this.thickness;\n\t\tif ( this.thicknessMap && this.thicknessMap.isTexture ) data.thicknessMap = this.thicknessMap.toJSON( meta ).uuid;\n\t\tif ( this.attenuationDistance !== undefined ) data.attenuationDistance = this.attenuationDistance;\n\t\tif ( this.attenuationColor !== undefined ) data.attenuationColor = this.attenuationColor.getHex();\n\n\t\tif ( this.size !== undefined ) data.size = this.size;\n\t\tif ( this.shadowSide !== null ) data.shadowSide = this.shadowSide;\n\t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\n\n\t\tif ( this.blending !== NormalBlending ) data.blending = this.blending;\n\t\tif ( this.side !== FrontSide ) data.side = this.side;\n\t\tif ( this.vertexColors ) data.vertexColors = true;\n\n\t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\n\t\tif ( this.format !== RGBAFormat ) data.format = this.format;\n\t\tif ( this.transparent === true ) data.transparent = this.transparent;\n\n\t\tdata.depthFunc = this.depthFunc;\n\t\tdata.depthTest = this.depthTest;\n\t\tdata.depthWrite = this.depthWrite;\n\t\tdata.colorWrite = this.colorWrite;\n\n\t\tdata.stencilWrite = this.stencilWrite;\n\t\tdata.stencilWriteMask = this.stencilWriteMask;\n\t\tdata.stencilFunc = this.stencilFunc;\n\t\tdata.stencilRef = this.stencilRef;\n\t\tdata.stencilFuncMask = this.stencilFuncMask;\n\t\tdata.stencilFail = this.stencilFail;\n\t\tdata.stencilZFail = this.stencilZFail;\n\t\tdata.stencilZPass = this.stencilZPass;\n\n\t\t// rotation (SpriteMaterial)\n\t\tif ( this.rotation && this.rotation !== 0 ) data.rotation = this.rotation;\n\n\t\tif ( this.polygonOffset === true ) data.polygonOffset = true;\n\t\tif ( this.polygonOffsetFactor !== 0 ) data.polygonOffsetFactor = this.polygonOffsetFactor;\n\t\tif ( this.polygonOffsetUnits !== 0 ) data.polygonOffsetUnits = this.polygonOffsetUnits;\n\n\t\tif ( this.linewidth && this.linewidth !== 1 ) data.linewidth = this.linewidth;\n\t\tif ( this.dashSize !== undefined ) data.dashSize = this.dashSize;\n\t\tif ( this.gapSize !== undefined ) data.gapSize = this.gapSize;\n\t\tif ( this.scale !== undefined ) data.scale = this.scale;\n\n\t\tif ( this.dithering === true ) data.dithering = true;\n\n\t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\n\t\tif ( this.alphaToCoverage === true ) data.alphaToCoverage = this.alphaToCoverage;\n\t\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;\n\n\t\tif ( this.wireframe === true ) data.wireframe = this.wireframe;\n\t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\n\t\tif ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;\n\t\tif ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;\n\n\t\tif ( this.flatShading === true ) data.flatShading = this.flatShading;\n\n\t\tif ( this.visible === false ) data.visible = false;\n\n\t\tif ( this.toneMapped === false ) data.toneMapped = false;\n\n\t\tif ( JSON.stringify( this.userData ) !== '{}' ) data.userData = this.userData;\n\n\t\t// TODO: Copied from Object3D.toJSON\n\n\t\tfunction extractFromCache( cache ) {\n\n\t\t\tconst values = [];\n\n\t\t\tfor ( const key in cache ) {\n\n\t\t\t\tconst data = cache[ key ];\n\t\t\t\tdelete data.metadata;\n\t\t\t\tvalues.push( data );\n\n\t\t\t}\n\n\t\t\treturn values;\n\n\t\t}\n\n\t\tif ( isRoot ) {\n\n\t\t\tconst textures = extractFromCache( meta.textures );\n\t\t\tconst images = extractFromCache( meta.images );\n\n\t\t\tif ( textures.length > 0 ) data.textures = textures;\n\t\t\tif ( images.length > 0 ) data.images = images;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.fog = source.fog;\n\n\t\tthis.blending = source.blending;\n\t\tthis.side = source.side;\n\t\tthis.vertexColors = source.vertexColors;\n\n\t\tthis.opacity = source.opacity;\n\t\tthis.format = source.format;\n\t\tthis.transparent = source.transparent;\n\n\t\tthis.blendSrc = source.blendSrc;\n\t\tthis.blendDst = source.blendDst;\n\t\tthis.blendEquation = source.blendEquation;\n\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\n\t\tthis.depthFunc = source.depthFunc;\n\t\tthis.depthTest = source.depthTest;\n\t\tthis.depthWrite = source.depthWrite;\n\n\t\tthis.stencilWriteMask = source.stencilWriteMask;\n\t\tthis.stencilFunc = source.stencilFunc;\n\t\tthis.stencilRef = source.stencilRef;\n\t\tthis.stencilFuncMask = source.stencilFuncMask;\n\t\tthis.stencilFail = source.stencilFail;\n\t\tthis.stencilZFail = source.stencilZFail;\n\t\tthis.stencilZPass = source.stencilZPass;\n\t\tthis.stencilWrite = source.stencilWrite;\n\n\t\tconst srcPlanes = source.clippingPlanes;\n\t\tlet dstPlanes = null;\n\n\t\tif ( srcPlanes !== null ) {\n\n\t\t\tconst n = srcPlanes.length;\n\t\t\tdstPlanes = new Array( n );\n\n\t\t\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\t\t\tdstPlanes[ i ] = srcPlanes[ i ].clone();\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.clippingPlanes = dstPlanes;\n\t\tthis.clipIntersection = source.clipIntersection;\n\t\tthis.clipShadows = source.clipShadows;\n\n\t\tthis.shadowSide = source.shadowSide;\n\n\t\tthis.colorWrite = source.colorWrite;\n\n\t\tthis.precision = source.precision;\n\n\t\tthis.polygonOffset = source.polygonOffset;\n\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\n\t\tthis.dithering = source.dithering;\n\n\t\tthis.alphaTest = source.alphaTest;\n\t\tthis.alphaToCoverage = source.alphaToCoverage;\n\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\n\t\tthis.visible = source.visible;\n\n\t\tthis.toneMapped = source.toneMapped;\n\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\treturn this;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n}\n\nMaterial.prototype.isMaterial = true;\n\nconst _colorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n\t'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n\t'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n\t'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n\t'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n\t'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n\t'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n\t'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n\t'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n\t'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n\t'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n\t'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n\t'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n\t'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n\t'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n\t'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n\t'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n\t'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n\t'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n\t'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n\t'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n\t'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n\t'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n\t'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\n\nconst _hslA = { h: 0, s: 0, l: 0 };\nconst _hslB = { h: 0, s: 0, l: 0 };\n\nfunction hue2rgb( p, q, t ) {\n\n\tif ( t < 0 ) t += 1;\n\tif ( t > 1 ) t -= 1;\n\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\n\tif ( t < 1 / 2 ) return q;\n\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\n\treturn p;\n\n}\n\nfunction SRGBToLinear( c ) {\n\n\treturn ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );\n\n}\n\nfunction LinearToSRGB( c ) {\n\n\treturn ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;\n\n}\n\nclass Color {\n\n\tconstructor( r, g, b ) {\n\n\t\tif ( g === undefined && b === undefined ) {\n\n\t\t\t// r is THREE.Color, hex or string\n\t\t\treturn this.set( r );\n\n\t\t}\n\n\t\treturn this.setRGB( r, g, b );\n\n\t}\n\n\tset( value ) {\n\n\t\tif ( value && value.isColor ) {\n\n\t\t\tthis.copy( value );\n\n\t\t} else if ( typeof value === 'number' ) {\n\n\t\t\tthis.setHex( value );\n\n\t\t} else if ( typeof value === 'string' ) {\n\n\t\t\tthis.setStyle( value );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetScalar( scalar ) {\n\n\t\tthis.r = scalar;\n\t\tthis.g = scalar;\n\t\tthis.b = scalar;\n\n\t\treturn this;\n\n\t}\n\n\tsetHex( hex ) {\n\n\t\thex = Math.floor( hex );\n\n\t\tthis.r = ( hex >> 16 & 255 ) / 255;\n\t\tthis.g = ( hex >> 8 & 255 ) / 255;\n\t\tthis.b = ( hex & 255 ) / 255;\n\n\t\treturn this;\n\n\t}\n\n\tsetRGB( r, g, b ) {\n\n\t\tthis.r = r;\n\t\tthis.g = g;\n\t\tthis.b = b;\n\n\t\treturn this;\n\n\t}\n\n\tsetHSL( h, s, l ) {\n\n\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\th = euclideanModulo( h, 1 );\n\t\ts = clamp( s, 0, 1 );\n\t\tl = clamp( l, 0, 1 );\n\n\t\tif ( s === 0 ) {\n\n\t\t\tthis.r = this.g = this.b = l;\n\n\t\t} else {\n\n\t\t\tconst p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n\t\t\tconst q = ( 2 * l ) - p;\n\n\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\n\t\t\tthis.g = hue2rgb( q, p, h );\n\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetStyle( style ) {\n\n\t\tfunction handleAlpha( string ) {\n\n\t\t\tif ( string === undefined ) return;\n\n\t\t\tif ( parseFloat( string ) < 1 ) {\n\n\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\n\n\t\t\t}\n\n\t\t}\n\n\n\t\tlet m;\n\n\t\tif ( m = /^((?:rgb|hsl)a?)\\(([^\\)]*)\\)/.exec( style ) ) {\n\n\t\t\t// rgb / hsl\n\n\t\t\tlet color;\n\t\t\tconst name = m[ 1 ];\n\t\t\tconst components = m[ 2 ];\n\n\t\t\tswitch ( name ) {\n\n\t\t\t\tcase 'rgb':\n\t\t\t\tcase 'rgba':\n\n\t\t\t\t\tif ( color = /^\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\n\t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\n\t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\n\n\t\t\t\t\t\thandleAlpha( color[ 4 ] );\n\n\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( color = /^\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\n\t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\n\t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\n\n\t\t\t\t\t\thandleAlpha( color[ 4 ] );\n\n\t\t\t\t\t\treturn this;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'hsl':\n\t\t\t\tcase 'hsla':\n\n\t\t\t\t\tif ( color = /^\\s*(\\d*\\.?\\d+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\t\t\t\t\t\tconst h = parseFloat( color[ 1 ] ) / 360;\n\t\t\t\t\t\tconst s = parseInt( color[ 2 ], 10 ) / 100;\n\t\t\t\t\t\tconst l = parseInt( color[ 3 ], 10 ) / 100;\n\n\t\t\t\t\t\thandleAlpha( color[ 4 ] );\n\n\t\t\t\t\t\treturn this.setHSL( h, s, l );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t} else if ( m = /^\\#([A-Fa-f\\d]+)$/.exec( style ) ) {\n\n\t\t\t// hex color\n\n\t\t\tconst hex = m[ 1 ];\n\t\t\tconst size = hex.length;\n\n\t\t\tif ( size === 3 ) {\n\n\t\t\t\t// #ff0\n\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\n\t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\n\n\t\t\t\treturn this;\n\n\t\t\t} else if ( size === 6 ) {\n\n\t\t\t\t// #ff0000\n\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\n\t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\n\t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\n\n\t\t\t\treturn this;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( style && style.length > 0 ) {\n\n\t\t\treturn this.setColorName( style );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetColorName( style ) {\n\n\t\t// color keywords\n\t\tconst hex = _colorKeywords[ style.toLowerCase() ];\n\n\t\tif ( hex !== undefined ) {\n\n\t\t\t// red\n\t\t\tthis.setHex( hex );\n\n\t\t} else {\n\n\t\t\t// unknown color\n\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.r, this.g, this.b );\n\n\t}\n\n\tcopy( color ) {\n\n\t\tthis.r = color.r;\n\t\tthis.g = color.g;\n\t\tthis.b = color.b;\n\n\t\treturn this;\n\n\t}\n\n\tcopyGammaToLinear( color, gammaFactor = 2.0 ) {\n\n\t\tthis.r = Math.pow( color.r, gammaFactor );\n\t\tthis.g = Math.pow( color.g, gammaFactor );\n\t\tthis.b = Math.pow( color.b, gammaFactor );\n\n\t\treturn this;\n\n\t}\n\n\tcopyLinearToGamma( color, gammaFactor = 2.0 ) {\n\n\t\tconst safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\n\n\t\tthis.r = Math.pow( color.r, safeInverse );\n\t\tthis.g = Math.pow( color.g, safeInverse );\n\t\tthis.b = Math.pow( color.b, safeInverse );\n\n\t\treturn this;\n\n\t}\n\n\tconvertGammaToLinear( gammaFactor ) {\n\n\t\tthis.copyGammaToLinear( this, gammaFactor );\n\n\t\treturn this;\n\n\t}\n\n\tconvertLinearToGamma( gammaFactor ) {\n\n\t\tthis.copyLinearToGamma( this, gammaFactor );\n\n\t\treturn this;\n\n\t}\n\n\tcopySRGBToLinear( color ) {\n\n\t\tthis.r = SRGBToLinear( color.r );\n\t\tthis.g = SRGBToLinear( color.g );\n\t\tthis.b = SRGBToLinear( color.b );\n\n\t\treturn this;\n\n\t}\n\n\tcopyLinearToSRGB( color ) {\n\n\t\tthis.r = LinearToSRGB( color.r );\n\t\tthis.g = LinearToSRGB( color.g );\n\t\tthis.b = LinearToSRGB( color.b );\n\n\t\treturn this;\n\n\t}\n\n\tconvertSRGBToLinear() {\n\n\t\tthis.copySRGBToLinear( this );\n\n\t\treturn this;\n\n\t}\n\n\tconvertLinearToSRGB() {\n\n\t\tthis.copyLinearToSRGB( this );\n\n\t\treturn this;\n\n\t}\n\n\tgetHex() {\n\n\t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\n\n\t}\n\n\tgetHexString() {\n\n\t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\n\n\t}\n\n\tgetHSL( target ) {\n\n\t\t// h,s,l ranges are in 0.0 - 1.0\n\n\t\tconst r = this.r, g = this.g, b = this.b;\n\n\t\tconst max = Math.max( r, g, b );\n\t\tconst min = Math.min( r, g, b );\n\n\t\tlet hue, saturation;\n\t\tconst lightness = ( min + max ) / 2.0;\n\n\t\tif ( min === max ) {\n\n\t\t\thue = 0;\n\t\t\tsaturation = 0;\n\n\t\t} else {\n\n\t\t\tconst delta = max - min;\n\n\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n\n\t\t\tswitch ( max ) {\n\n\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\n\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\n\n\t\t\t}\n\n\t\t\thue /= 6;\n\n\t\t}\n\n\t\ttarget.h = hue;\n\t\ttarget.s = saturation;\n\t\ttarget.l = lightness;\n\n\t\treturn target;\n\n\t}\n\n\tgetStyle() {\n\n\t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\n\n\t}\n\n\toffsetHSL( h, s, l ) {\n\n\t\tthis.getHSL( _hslA );\n\n\t\t_hslA.h += h; _hslA.s += s; _hslA.l += l;\n\n\t\tthis.setHSL( _hslA.h, _hslA.s, _hslA.l );\n\n\t\treturn this;\n\n\t}\n\n\tadd( color ) {\n\n\t\tthis.r += color.r;\n\t\tthis.g += color.g;\n\t\tthis.b += color.b;\n\n\t\treturn this;\n\n\t}\n\n\taddColors( color1, color2 ) {\n\n\t\tthis.r = color1.r + color2.r;\n\t\tthis.g = color1.g + color2.g;\n\t\tthis.b = color1.b + color2.b;\n\n\t\treturn this;\n\n\t}\n\n\taddScalar( s ) {\n\n\t\tthis.r += s;\n\t\tthis.g += s;\n\t\tthis.b += s;\n\n\t\treturn this;\n\n\t}\n\n\tsub( color ) {\n\n\t\tthis.r = Math.max( 0, this.r - color.r );\n\t\tthis.g = Math.max( 0, this.g - color.g );\n\t\tthis.b = Math.max( 0, this.b - color.b );\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( color ) {\n\n\t\tthis.r *= color.r;\n\t\tthis.g *= color.g;\n\t\tthis.b *= color.b;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyScalar( s ) {\n\n\t\tthis.r *= s;\n\t\tthis.g *= s;\n\t\tthis.b *= s;\n\n\t\treturn this;\n\n\t}\n\n\tlerp( color, alpha ) {\n\n\t\tthis.r += ( color.r - this.r ) * alpha;\n\t\tthis.g += ( color.g - this.g ) * alpha;\n\t\tthis.b += ( color.b - this.b ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tlerpColors( color1, color2, alpha ) {\n\n\t\tthis.r = color1.r + ( color2.r - color1.r ) * alpha;\n\t\tthis.g = color1.g + ( color2.g - color1.g ) * alpha;\n\t\tthis.b = color1.b + ( color2.b - color1.b ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tlerpHSL( color, alpha ) {\n\n\t\tthis.getHSL( _hslA );\n\t\tcolor.getHSL( _hslB );\n\n\t\tconst h = lerp( _hslA.h, _hslB.h, alpha );\n\t\tconst s = lerp( _hslA.s, _hslB.s, alpha );\n\t\tconst l = lerp( _hslA.l, _hslB.l, alpha );\n\n\t\tthis.setHSL( h, s, l );\n\n\t\treturn this;\n\n\t}\n\n\tequals( c ) {\n\n\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis.r = array[ offset ];\n\t\tthis.g = array[ offset + 1 ];\n\t\tthis.b = array[ offset + 2 ];\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this.r;\n\t\tarray[ offset + 1 ] = this.g;\n\t\tarray[ offset + 2 ] = this.b;\n\n\t\treturn array;\n\n\t}\n\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis.r = attribute.getX( index );\n\t\tthis.g = attribute.getY( index );\n\t\tthis.b = attribute.getZ( index );\n\n\t\tif ( attribute.normalized === true ) {\n\n\t\t\t// assuming Uint8Array\n\n\t\t\tthis.r /= 255;\n\t\t\tthis.g /= 255;\n\t\t\tthis.b /= 255;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\treturn this.getHex();\n\n\t}\n\n}\n\nColor.NAMES = _colorKeywords;\n\nColor.prototype.isColor = true;\nColor.prototype.r = 1;\nColor.prototype.g = 1;\nColor.prototype.b = 1;\n\n/**\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.Multiply,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  depthTest: <bool>,\n *  depthWrite: <bool>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n * }\n */\n\nclass MeshBasicMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'MeshBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // emissive\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\treturn this;\n\n\t}\n\n}\n\nMeshBasicMaterial.prototype.isMeshBasicMaterial = true;\n\nconst _vector$9 = /*@__PURE__*/ new Vector3();\nconst _vector2$1 = /*@__PURE__*/ new Vector2();\n\nclass BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tif ( Array.isArray( array ) ) {\n\n\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n\t\t}\n\n\t\tthis.name = '';\n\n\t\tthis.array = array;\n\t\tthis.itemSize = itemSize;\n\t\tthis.count = array !== undefined ? array.length / itemSize : 0;\n\t\tthis.normalized = normalized === true;\n\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.updateRange = { offset: 0, count: - 1 };\n\n\t\tthis.version = 0;\n\n\t}\n\n\tonUploadCallback() {}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n\tsetUsage( value ) {\n\n\t\tthis.usage = value;\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.name = source.name;\n\t\tthis.array = new source.array.constructor( source.array );\n\t\tthis.itemSize = source.itemSize;\n\t\tthis.count = source.count;\n\t\tthis.normalized = source.normalized;\n\n\t\tthis.usage = source.usage;\n\n\t\treturn this;\n\n\t}\n\n\tcopyAt( index1, attribute, index2 ) {\n\n\t\tindex1 *= this.itemSize;\n\t\tindex2 *= attribute.itemSize;\n\n\t\tfor ( let i = 0, l = this.itemSize; i < l; i ++ ) {\n\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tcopyArray( array ) {\n\n\t\tthis.array.set( array );\n\n\t\treturn this;\n\n\t}\n\n\tcopyColorsArray( colors ) {\n\n\t\tconst array = this.array;\n\t\tlet offset = 0;\n\n\t\tfor ( let i = 0, l = colors.length; i < l; i ++ ) {\n\n\t\t\tlet color = colors[ i ];\n\n\t\t\tif ( color === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\n\t\t\t\tcolor = new Color();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = color.r;\n\t\t\tarray[ offset ++ ] = color.g;\n\t\t\tarray[ offset ++ ] = color.b;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tcopyVector2sArray( vectors ) {\n\n\t\tconst array = this.array;\n\t\tlet offset = 0;\n\n\t\tfor ( let i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\tlet vector = vectors[ i ];\n\n\t\t\tif ( vector === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\n\t\t\t\tvector = new Vector2();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\tarray[ offset ++ ] = vector.y;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tcopyVector3sArray( vectors ) {\n\n\t\tconst array = this.array;\n\t\tlet offset = 0;\n\n\t\tfor ( let i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\tlet vector = vectors[ i ];\n\n\t\t\tif ( vector === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\n\t\t\t\tvector = new Vector3();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\tarray[ offset ++ ] = vector.z;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tcopyVector4sArray( vectors ) {\n\n\t\tconst array = this.array;\n\t\tlet offset = 0;\n\n\t\tfor ( let i = 0, l = vectors.length; i < l; i ++ ) {\n\n\t\t\tlet vector = vectors[ i ];\n\n\t\t\tif ( vector === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\n\t\t\t\tvector = new Vector4();\n\n\t\t\t}\n\n\t\t\tarray[ offset ++ ] = vector.x;\n\t\t\tarray[ offset ++ ] = vector.y;\n\t\t\tarray[ offset ++ ] = vector.z;\n\t\t\tarray[ offset ++ ] = vector.w;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tapplyMatrix3( m ) {\n\n\t\tif ( this.itemSize === 2 ) {\n\n\t\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector2$1.fromBufferAttribute( this, i );\n\t\t\t\t_vector2$1.applyMatrix3( m );\n\n\t\t\t\tthis.setXY( i, _vector2$1.x, _vector2$1.y );\n\n\t\t\t}\n\n\t\t} else if ( this.itemSize === 3 ) {\n\n\t\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector$9.fromBufferAttribute( this, i );\n\t\t\t\t_vector$9.applyMatrix3( m );\n\n\t\t\t\tthis.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tapplyMatrix4( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$9.x = this.getX( i );\n\t\t\t_vector$9.y = this.getY( i );\n\t\t\t_vector$9.z = this.getZ( i );\n\n\t\t\t_vector$9.applyMatrix4( m );\n\n\t\t\tthis.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tapplyNormalMatrix( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$9.x = this.getX( i );\n\t\t\t_vector$9.y = this.getY( i );\n\t\t\t_vector$9.z = this.getZ( i );\n\n\t\t\t_vector$9.applyNormalMatrix( m );\n\n\t\t\tthis.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttransformDirection( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$9.x = this.getX( i );\n\t\t\t_vector$9.y = this.getY( i );\n\t\t\t_vector$9.z = this.getZ( i );\n\n\t\t\t_vector$9.transformDirection( m );\n\n\t\t\tthis.setXYZ( i, _vector$9.x, _vector$9.y, _vector$9.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tset( value, offset = 0 ) {\n\n\t\tthis.array.set( value, offset );\n\n\t\treturn this;\n\n\t}\n\n\tgetX( index ) {\n\n\t\treturn this.array[ index * this.itemSize ];\n\n\t}\n\n\tsetX( index, x ) {\n\n\t\tthis.array[ index * this.itemSize ] = x;\n\n\t\treturn this;\n\n\t}\n\n\tgetY( index ) {\n\n\t\treturn this.array[ index * this.itemSize + 1 ];\n\n\t}\n\n\tsetY( index, y ) {\n\n\t\tthis.array[ index * this.itemSize + 1 ] = y;\n\n\t\treturn this;\n\n\t}\n\n\tgetZ( index ) {\n\n\t\treturn this.array[ index * this.itemSize + 2 ];\n\n\t}\n\n\tsetZ( index, z ) {\n\n\t\tthis.array[ index * this.itemSize + 2 ] = z;\n\n\t\treturn this;\n\n\t}\n\n\tgetW( index ) {\n\n\t\treturn this.array[ index * this.itemSize + 3 ];\n\n\t}\n\n\tsetW( index, w ) {\n\n\t\tthis.array[ index * this.itemSize + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n\tsetXY( index, x, y ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetXYZ( index, x, y, z ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\t\tthis.array[ index + 2 ] = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetXYZW( index, x, y, z, w ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\t\tthis.array[ index + 2 ] = z;\n\t\tthis.array[ index + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n\tonUpload( callback ) {\n\n\t\tthis.onUploadCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.array, this.itemSize ).copy( this );\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = {\n\t\t\titemSize: this.itemSize,\n\t\t\ttype: this.array.constructor.name,\n\t\t\tarray: Array.prototype.slice.call( this.array ),\n\t\t\tnormalized: this.normalized\n\t\t};\n\n\t\tif ( this.name !== '' ) data.name = this.name;\n\t\tif ( this.usage !== StaticDrawUsage ) data.usage = this.usage;\n\t\tif ( this.updateRange.offset !== 0 || this.updateRange.count !== - 1 ) data.updateRange = this.updateRange;\n\n\t\treturn data;\n\n\t}\n\n}\n\nBufferAttribute.prototype.isBufferAttribute = true;\n\n//\n\nclass Int8BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Int8Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Uint8BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint8Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Uint8ClampedBufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint8ClampedArray( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Int16BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Int16Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Uint16BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint16Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Int32BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Int32Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Uint32BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint32Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Float16BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint16Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nFloat16BufferAttribute.prototype.isFloat16BufferAttribute = true;\n\nclass Float32BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Float32Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Float64BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Float64Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nlet _id = 0;\n\nconst _m1 = /*@__PURE__*/ new Matrix4();\nconst _obj = /*@__PURE__*/ new Object3D();\nconst _offset = /*@__PURE__*/ new Vector3();\nconst _box$1 = /*@__PURE__*/ new Box3();\nconst _boxMorphTargets = /*@__PURE__*/ new Box3();\nconst _vector$8 = /*@__PURE__*/ new Vector3();\n\nclass BufferGeometry extends EventDispatcher {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tObject.defineProperty( this, 'id', { value: _id ++ } );\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'BufferGeometry';\n\n\t\tthis.index = null;\n\t\tthis.attributes = {};\n\n\t\tthis.morphAttributes = {};\n\t\tthis.morphTargetsRelative = false;\n\n\t\tthis.groups = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\tthis.drawRange = { start: 0, count: Infinity };\n\n\t\tthis.userData = {};\n\n\t}\n\n\tgetIndex() {\n\n\t\treturn this.index;\n\n\t}\n\n\tsetIndex( index ) {\n\n\t\tif ( Array.isArray( index ) ) {\n\n\t\t\tthis.index = new ( arrayMax( index ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );\n\n\t\t} else {\n\n\t\t\tthis.index = index;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetAttribute( name ) {\n\n\t\treturn this.attributes[ name ];\n\n\t}\n\n\tsetAttribute( name, attribute ) {\n\n\t\tthis.attributes[ name ] = attribute;\n\n\t\treturn this;\n\n\t}\n\n\tdeleteAttribute( name ) {\n\n\t\tdelete this.attributes[ name ];\n\n\t\treturn this;\n\n\t}\n\n\thasAttribute( name ) {\n\n\t\treturn this.attributes[ name ] !== undefined;\n\n\t}\n\n\taddGroup( start, count, materialIndex = 0 ) {\n\n\t\tthis.groups.push( {\n\n\t\t\tstart: start,\n\t\t\tcount: count,\n\t\t\tmaterialIndex: materialIndex\n\n\t\t} );\n\n\t}\n\n\tclearGroups() {\n\n\t\tthis.groups = [];\n\n\t}\n\n\tsetDrawRange( start, count ) {\n\n\t\tthis.drawRange.start = start;\n\t\tthis.drawRange.count = count;\n\n\t}\n\n\tapplyMatrix4( matrix ) {\n\n\t\tconst position = this.attributes.position;\n\n\t\tif ( position !== undefined ) {\n\n\t\t\tposition.applyMatrix4( matrix );\n\n\t\t\tposition.needsUpdate = true;\n\n\t\t}\n\n\t\tconst normal = this.attributes.normal;\n\n\t\tif ( normal !== undefined ) {\n\n\t\t\tconst normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\tnormal.applyNormalMatrix( normalMatrix );\n\n\t\t\tnormal.needsUpdate = true;\n\n\t\t}\n\n\t\tconst tangent = this.attributes.tangent;\n\n\t\tif ( tangent !== undefined ) {\n\n\t\t\ttangent.transformDirection( matrix );\n\n\t\t\ttangent.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( this.boundingBox !== null ) {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t}\n\n\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tapplyQuaternion( q ) {\n\n\t\t_m1.makeRotationFromQuaternion( q );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\trotateX( angle ) {\n\n\t\t// rotate geometry around world x-axis\n\n\t\t_m1.makeRotationX( angle );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\trotateY( angle ) {\n\n\t\t// rotate geometry around world y-axis\n\n\t\t_m1.makeRotationY( angle );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\trotateZ( angle ) {\n\n\t\t// rotate geometry around world z-axis\n\n\t\t_m1.makeRotationZ( angle );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( x, y, z ) {\n\n\t\t// translate geometry\n\n\t\t_m1.makeTranslation( x, y, z );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\tscale( x, y, z ) {\n\n\t\t// scale geometry\n\n\t\t_m1.makeScale( x, y, z );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\tlookAt( vector ) {\n\n\t\t_obj.lookAt( vector );\n\n\t\t_obj.updateMatrix();\n\n\t\tthis.applyMatrix4( _obj.matrix );\n\n\t\treturn this;\n\n\t}\n\n\tcenter() {\n\n\t\tthis.computeBoundingBox();\n\n\t\tthis.boundingBox.getCenter( _offset ).negate();\n\n\t\tthis.translate( _offset.x, _offset.y, _offset.z );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPoints( points ) {\n\n\t\tconst position = [];\n\n\t\tfor ( let i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\tconst point = points[ i ];\n\t\t\tposition.push( point.x, point.y, point.z || 0 );\n\n\t\t}\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );\n\n\t\treturn this;\n\n\t}\n\n\tcomputeBoundingBox() {\n\n\t\tif ( this.boundingBox === null ) {\n\n\t\t\tthis.boundingBox = new Box3();\n\n\t\t}\n\n\t\tconst position = this.attributes.position;\n\t\tconst morphAttributesPosition = this.morphAttributes.position;\n\n\t\tif ( position && position.isGLBufferAttribute ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set \"mesh.frustumCulled\" to \"false\".', this );\n\n\t\t\tthis.boundingBox.set(\n\t\t\t\tnew Vector3( - Infinity, - Infinity, - Infinity ),\n\t\t\t\tnew Vector3( + Infinity, + Infinity, + Infinity )\n\t\t\t);\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( position !== undefined ) {\n\n\t\t\tthis.boundingBox.setFromBufferAttribute( position );\n\n\t\t\t// process morph attributes if present\n\n\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\tfor ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t_box$1.setFromBufferAttribute( morphAttribute );\n\n\t\t\t\t\tif ( this.morphTargetsRelative ) {\n\n\t\t\t\t\t\t_vector$8.addVectors( this.boundingBox.min, _box$1.min );\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector$8 );\n\n\t\t\t\t\t\t_vector$8.addVectors( this.boundingBox.max, _box$1.max );\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector$8 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box$1.min );\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box$1.max );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthis.boundingBox.makeEmpty();\n\n\t\t}\n\n\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t}\n\n\t}\n\n\tcomputeBoundingSphere() {\n\n\t\tif ( this.boundingSphere === null ) {\n\n\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t}\n\n\t\tconst position = this.attributes.position;\n\t\tconst morphAttributesPosition = this.morphAttributes.position;\n\n\t\tif ( position && position.isGLBufferAttribute ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set \"mesh.frustumCulled\" to \"false\".', this );\n\n\t\t\tthis.boundingSphere.set( new Vector3(), Infinity );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( position ) {\n\n\t\t\t// first, find the center of the bounding sphere\n\n\t\t\tconst center = this.boundingSphere.center;\n\n\t\t\t_box$1.setFromBufferAttribute( position );\n\n\t\t\t// process morph attributes if present\n\n\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\tfor ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t_boxMorphTargets.setFromBufferAttribute( morphAttribute );\n\n\t\t\t\t\tif ( this.morphTargetsRelative ) {\n\n\t\t\t\t\t\t_vector$8.addVectors( _box$1.min, _boxMorphTargets.min );\n\t\t\t\t\t\t_box$1.expandByPoint( _vector$8 );\n\n\t\t\t\t\t\t_vector$8.addVectors( _box$1.max, _boxMorphTargets.max );\n\t\t\t\t\t\t_box$1.expandByPoint( _vector$8 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t_box$1.expandByPoint( _boxMorphTargets.min );\n\t\t\t\t\t\t_box$1.expandByPoint( _boxMorphTargets.max );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_box$1.getCenter( center );\n\n\t\t\t// second, try to find a boundingSphere with a radius smaller than the\n\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\t\t\tlet maxRadiusSq = 0;\n\n\t\t\tfor ( let i = 0, il = position.count; i < il; i ++ ) {\n\n\t\t\t\t_vector$8.fromBufferAttribute( position, i );\n\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$8 ) );\n\n\t\t\t}\n\n\t\t\t// process morph attributes if present\n\n\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\tfor ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\tconst morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t\t\tfor ( let j = 0, jl = morphAttribute.count; j < jl; j ++ ) {\n\n\t\t\t\t\t\t_vector$8.fromBufferAttribute( morphAttribute, j );\n\n\t\t\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t\t\t_offset.fromBufferAttribute( position, j );\n\t\t\t\t\t\t\t_vector$8.add( _offset );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$8 ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tcomputeTangents() {\n\n\t\tconst index = this.index;\n\t\tconst attributes = this.attributes;\n\n\t\t// based on http://www.terathon.com/code/tangent.html\n\t\t// (per vertex tangents)\n\n\t\tif ( index === null ||\n\t\t\t attributes.position === undefined ||\n\t\t\t attributes.normal === undefined ||\n\t\t\t attributes.uv === undefined ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tconst indices = index.array;\n\t\tconst positions = attributes.position.array;\n\t\tconst normals = attributes.normal.array;\n\t\tconst uvs = attributes.uv.array;\n\n\t\tconst nVertices = positions.length / 3;\n\n\t\tif ( attributes.tangent === undefined ) {\n\n\t\t\tthis.setAttribute( 'tangent', new BufferAttribute( new Float32Array( 4 * nVertices ), 4 ) );\n\n\t\t}\n\n\t\tconst tangents = attributes.tangent.array;\n\n\t\tconst tan1 = [], tan2 = [];\n\n\t\tfor ( let i = 0; i < nVertices; i ++ ) {\n\n\t\t\ttan1[ i ] = new Vector3();\n\t\t\ttan2[ i ] = new Vector3();\n\n\t\t}\n\n\t\tconst vA = new Vector3(),\n\t\t\tvB = new Vector3(),\n\t\t\tvC = new Vector3(),\n\n\t\t\tuvA = new Vector2(),\n\t\t\tuvB = new Vector2(),\n\t\t\tuvC = new Vector2(),\n\n\t\t\tsdir = new Vector3(),\n\t\t\ttdir = new Vector3();\n\n\t\tfunction handleTriangle( a, b, c ) {\n\n\t\t\tvA.fromArray( positions, a * 3 );\n\t\t\tvB.fromArray( positions, b * 3 );\n\t\t\tvC.fromArray( positions, c * 3 );\n\n\t\t\tuvA.fromArray( uvs, a * 2 );\n\t\t\tuvB.fromArray( uvs, b * 2 );\n\t\t\tuvC.fromArray( uvs, c * 2 );\n\n\t\t\tvB.sub( vA );\n\t\t\tvC.sub( vA );\n\n\t\t\tuvB.sub( uvA );\n\t\t\tuvC.sub( uvA );\n\n\t\t\tconst r = 1.0 / ( uvB.x * uvC.y - uvC.x * uvB.y );\n\n\t\t\t// silently ignore degenerate uv triangles having coincident or colinear vertices\n\n\t\t\tif ( ! isFinite( r ) ) return;\n\n\t\t\tsdir.copy( vB ).multiplyScalar( uvC.y ).addScaledVector( vC, - uvB.y ).multiplyScalar( r );\n\t\t\ttdir.copy( vC ).multiplyScalar( uvB.x ).addScaledVector( vB, - uvC.x ).multiplyScalar( r );\n\n\t\t\ttan1[ a ].add( sdir );\n\t\t\ttan1[ b ].add( sdir );\n\t\t\ttan1[ c ].add( sdir );\n\n\t\t\ttan2[ a ].add( tdir );\n\t\t\ttan2[ b ].add( tdir );\n\t\t\ttan2[ c ].add( tdir );\n\n\t\t}\n\n\t\tlet groups = this.groups;\n\n\t\tif ( groups.length === 0 ) {\n\n\t\t\tgroups = [ {\n\t\t\t\tstart: 0,\n\t\t\t\tcount: indices.length\n\t\t\t} ];\n\n\t\t}\n\n\t\tfor ( let i = 0, il = groups.length; i < il; ++ i ) {\n\n\t\t\tconst group = groups[ i ];\n\n\t\t\tconst start = group.start;\n\t\t\tconst count = group.count;\n\n\t\t\tfor ( let j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\thandleTriangle(\n\t\t\t\t\tindices[ j + 0 ],\n\t\t\t\t\tindices[ j + 1 ],\n\t\t\t\t\tindices[ j + 2 ]\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst tmp = new Vector3(), tmp2 = new Vector3();\n\t\tconst n = new Vector3(), n2 = new Vector3();\n\n\t\tfunction handleVertex( v ) {\n\n\t\t\tn.fromArray( normals, v * 3 );\n\t\t\tn2.copy( n );\n\n\t\t\tconst t = tan1[ v ];\n\n\t\t\t// Gram-Schmidt orthogonalize\n\n\t\t\ttmp.copy( t );\n\t\t\ttmp.sub( n.multiplyScalar( n.dot( t ) ) ).normalize();\n\n\t\t\t// Calculate handedness\n\n\t\t\ttmp2.crossVectors( n2, t );\n\t\t\tconst test = tmp2.dot( tan2[ v ] );\n\t\t\tconst w = ( test < 0.0 ) ? - 1.0 : 1.0;\n\n\t\t\ttangents[ v * 4 ] = tmp.x;\n\t\t\ttangents[ v * 4 + 1 ] = tmp.y;\n\t\t\ttangents[ v * 4 + 2 ] = tmp.z;\n\t\t\ttangents[ v * 4 + 3 ] = w;\n\n\t\t}\n\n\t\tfor ( let i = 0, il = groups.length; i < il; ++ i ) {\n\n\t\t\tconst group = groups[ i ];\n\n\t\t\tconst start = group.start;\n\t\t\tconst count = group.count;\n\n\t\t\tfor ( let j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\thandleVertex( indices[ j + 0 ] );\n\t\t\t\thandleVertex( indices[ j + 1 ] );\n\t\t\t\thandleVertex( indices[ j + 2 ] );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tcomputeVertexNormals() {\n\n\t\tconst index = this.index;\n\t\tconst positionAttribute = this.getAttribute( 'position' );\n\n\t\tif ( positionAttribute !== undefined ) {\n\n\t\t\tlet normalAttribute = this.getAttribute( 'normal' );\n\n\t\t\tif ( normalAttribute === undefined ) {\n\n\t\t\t\tnormalAttribute = new BufferAttribute( new Float32Array( positionAttribute.count * 3 ), 3 );\n\t\t\t\tthis.setAttribute( 'normal', normalAttribute );\n\n\t\t\t} else {\n\n\t\t\t\t// reset existing normals to zero\n\n\t\t\t\tfor ( let i = 0, il = normalAttribute.count; i < il; i ++ ) {\n\n\t\t\t\t\tnormalAttribute.setXYZ( i, 0, 0, 0 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst pA = new Vector3(), pB = new Vector3(), pC = new Vector3();\n\t\t\tconst nA = new Vector3(), nB = new Vector3(), nC = new Vector3();\n\t\t\tconst cb = new Vector3(), ab = new Vector3();\n\n\t\t\t// indexed elements\n\n\t\t\tif ( index ) {\n\n\t\t\t\tfor ( let i = 0, il = index.count; i < il; i += 3 ) {\n\n\t\t\t\t\tconst vA = index.getX( i + 0 );\n\t\t\t\t\tconst vB = index.getX( i + 1 );\n\t\t\t\t\tconst vC = index.getX( i + 2 );\n\n\t\t\t\t\tpA.fromBufferAttribute( positionAttribute, vA );\n\t\t\t\t\tpB.fromBufferAttribute( positionAttribute, vB );\n\t\t\t\t\tpC.fromBufferAttribute( positionAttribute, vC );\n\n\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tnA.fromBufferAttribute( normalAttribute, vA );\n\t\t\t\t\tnB.fromBufferAttribute( normalAttribute, vB );\n\t\t\t\t\tnC.fromBufferAttribute( normalAttribute, vC );\n\n\t\t\t\t\tnA.add( cb );\n\t\t\t\t\tnB.add( cb );\n\t\t\t\t\tnC.add( cb );\n\n\t\t\t\t\tnormalAttribute.setXYZ( vA, nA.x, nA.y, nA.z );\n\t\t\t\t\tnormalAttribute.setXYZ( vB, nB.x, nB.y, nB.z );\n\t\t\t\t\tnormalAttribute.setXYZ( vC, nC.x, nC.y, nC.z );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\n\t\t\t\tfor ( let i = 0, il = positionAttribute.count; i < il; i += 3 ) {\n\n\t\t\t\t\tpA.fromBufferAttribute( positionAttribute, i + 0 );\n\t\t\t\t\tpB.fromBufferAttribute( positionAttribute, i + 1 );\n\t\t\t\t\tpC.fromBufferAttribute( positionAttribute, i + 2 );\n\n\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tnormalAttribute.setXYZ( i + 0, cb.x, cb.y, cb.z );\n\t\t\t\t\tnormalAttribute.setXYZ( i + 1, cb.x, cb.y, cb.z );\n\t\t\t\t\tnormalAttribute.setXYZ( i + 2, cb.x, cb.y, cb.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.normalizeNormals();\n\n\t\t\tnormalAttribute.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n\tmerge( geometry, offset ) {\n\n\t\tif ( ! ( geometry && geometry.isBufferGeometry ) ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( offset === undefined ) {\n\n\t\t\toffset = 0;\n\n\t\t\tconsole.warn(\n\t\t\t\t'THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. '\n\t\t\t\t+ 'Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.'\n\t\t\t);\n\n\t\t}\n\n\t\tconst attributes = this.attributes;\n\n\t\tfor ( const key in attributes ) {\n\n\t\t\tif ( geometry.attributes[ key ] === undefined ) continue;\n\n\t\t\tconst attribute1 = attributes[ key ];\n\t\t\tconst attributeArray1 = attribute1.array;\n\n\t\t\tconst attribute2 = geometry.attributes[ key ];\n\t\t\tconst attributeArray2 = attribute2.array;\n\n\t\t\tconst attributeOffset = attribute2.itemSize * offset;\n\t\t\tconst length = Math.min( attributeArray2.length, attributeArray1.length - attributeOffset );\n\n\t\t\tfor ( let i = 0, j = attributeOffset; i < length; i ++, j ++ ) {\n\n\t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tnormalizeNormals() {\n\n\t\tconst normals = this.attributes.normal;\n\n\t\tfor ( let i = 0, il = normals.count; i < il; i ++ ) {\n\n\t\t\t_vector$8.fromBufferAttribute( normals, i );\n\n\t\t\t_vector$8.normalize();\n\n\t\t\tnormals.setXYZ( i, _vector$8.x, _vector$8.y, _vector$8.z );\n\n\t\t}\n\n\t}\n\n\ttoNonIndexed() {\n\n\t\tfunction convertBufferAttribute( attribute, indices ) {\n\n\t\t\tconst array = attribute.array;\n\t\t\tconst itemSize = attribute.itemSize;\n\t\t\tconst normalized = attribute.normalized;\n\n\t\t\tconst array2 = new array.constructor( indices.length * itemSize );\n\n\t\t\tlet index = 0, index2 = 0;\n\n\t\t\tfor ( let i = 0, l = indices.length; i < l; i ++ ) {\n\n\t\t\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\tindex = indices[ i ] * attribute.data.stride + attribute.offset;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tindex = indices[ i ] * itemSize;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let j = 0; j < itemSize; j ++ ) {\n\n\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new BufferAttribute( array2, itemSize, normalized );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( this.index === null ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.' );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst geometry2 = new BufferGeometry();\n\n\t\tconst indices = this.index.array;\n\t\tconst attributes = this.attributes;\n\n\t\t// attributes\n\n\t\tfor ( const name in attributes ) {\n\n\t\t\tconst attribute = attributes[ name ];\n\n\t\t\tconst newAttribute = convertBufferAttribute( attribute, indices );\n\n\t\t\tgeometry2.setAttribute( name, newAttribute );\n\n\t\t}\n\n\t\t// morph attributes\n\n\t\tconst morphAttributes = this.morphAttributes;\n\n\t\tfor ( const name in morphAttributes ) {\n\n\t\t\tconst morphArray = [];\n\t\t\tconst morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\tfor ( let i = 0, il = morphAttribute.length; i < il; i ++ ) {\n\n\t\t\t\tconst attribute = morphAttribute[ i ];\n\n\t\t\t\tconst newAttribute = convertBufferAttribute( attribute, indices );\n\n\t\t\t\tmorphArray.push( newAttribute );\n\n\t\t\t}\n\n\t\t\tgeometry2.morphAttributes[ name ] = morphArray;\n\n\t\t}\n\n\t\tgeometry2.morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t// groups\n\n\t\tconst groups = this.groups;\n\n\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\tconst group = groups[ i ];\n\t\t\tgeometry2.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t}\n\n\t\treturn geometry2;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard BufferGeometry serialization\n\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\t\tif ( this.name !== '' ) data.name = this.name;\n\t\tif ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;\n\n\t\tif ( this.parameters !== undefined ) {\n\n\t\t\tconst parameters = this.parameters;\n\n\t\t\tfor ( const key in parameters ) {\n\n\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\t// for simplicity the code assumes attributes are not shared across geometries, see #15811\n\n\t\tdata.data = { attributes: {} };\n\n\t\tconst index = this.index;\n\n\t\tif ( index !== null ) {\n\n\t\t\tdata.data.index = {\n\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\tarray: Array.prototype.slice.call( index.array )\n\t\t\t};\n\n\t\t}\n\n\t\tconst attributes = this.attributes;\n\n\t\tfor ( const key in attributes ) {\n\n\t\t\tconst attribute = attributes[ key ];\n\n\t\t\tdata.data.attributes[ key ] = attribute.toJSON( data.data );\n\n\t\t}\n\n\t\tconst morphAttributes = {};\n\t\tlet hasMorphAttributes = false;\n\n\t\tfor ( const key in this.morphAttributes ) {\n\n\t\t\tconst attributeArray = this.morphAttributes[ key ];\n\n\t\t\tconst array = [];\n\n\t\t\tfor ( let i = 0, il = attributeArray.length; i < il; i ++ ) {\n\n\t\t\t\tconst attribute = attributeArray[ i ];\n\n\t\t\t\tarray.push( attribute.toJSON( data.data ) );\n\n\t\t\t}\n\n\t\t\tif ( array.length > 0 ) {\n\n\t\t\t\tmorphAttributes[ key ] = array;\n\n\t\t\t\thasMorphAttributes = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( hasMorphAttributes ) {\n\n\t\t\tdata.data.morphAttributes = morphAttributes;\n\t\t\tdata.data.morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t}\n\n\t\tconst groups = this.groups;\n\n\t\tif ( groups.length > 0 ) {\n\n\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\n\n\t\t}\n\n\t\tconst boundingSphere = this.boundingSphere;\n\n\t\tif ( boundingSphere !== null ) {\n\n\t\t\tdata.data.boundingSphere = {\n\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\tradius: boundingSphere.radius\n\t\t\t};\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tclone() {\n\n\t\t return new this.constructor().copy( this );\n\n\t}\n\n\tcopy( source ) {\n\n\t\t// reset\n\n\t\tthis.index = null;\n\t\tthis.attributes = {};\n\t\tthis.morphAttributes = {};\n\t\tthis.groups = [];\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// used for storing cloned, shared data\n\n\t\tconst data = {};\n\n\t\t// name\n\n\t\tthis.name = source.name;\n\n\t\t// index\n\n\t\tconst index = source.index;\n\n\t\tif ( index !== null ) {\n\n\t\t\tthis.setIndex( index.clone( data ) );\n\n\t\t}\n\n\t\t// attributes\n\n\t\tconst attributes = source.attributes;\n\n\t\tfor ( const name in attributes ) {\n\n\t\t\tconst attribute = attributes[ name ];\n\t\t\tthis.setAttribute( name, attribute.clone( data ) );\n\n\t\t}\n\n\t\t// morph attributes\n\n\t\tconst morphAttributes = source.morphAttributes;\n\n\t\tfor ( const name in morphAttributes ) {\n\n\t\t\tconst array = [];\n\t\t\tconst morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\tfor ( let i = 0, l = morphAttribute.length; i < l; i ++ ) {\n\n\t\t\t\tarray.push( morphAttribute[ i ].clone( data ) );\n\n\t\t\t}\n\n\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t}\n\n\t\tthis.morphTargetsRelative = source.morphTargetsRelative;\n\n\t\t// groups\n\n\t\tconst groups = source.groups;\n\n\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\tconst group = groups[ i ];\n\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t}\n\n\t\t// bounding box\n\n\t\tconst boundingBox = source.boundingBox;\n\n\t\tif ( boundingBox !== null ) {\n\n\t\t\tthis.boundingBox = boundingBox.clone();\n\n\t\t}\n\n\t\t// bounding sphere\n\n\t\tconst boundingSphere = source.boundingSphere;\n\n\t\tif ( boundingSphere !== null ) {\n\n\t\t\tthis.boundingSphere = boundingSphere.clone();\n\n\t\t}\n\n\t\t// draw range\n\n\t\tthis.drawRange.start = source.drawRange.start;\n\t\tthis.drawRange.count = source.drawRange.count;\n\n\t\t// user data\n\n\t\tthis.userData = source.userData;\n\n\t\t// geometry generator parameters\n\n\t\tif ( source.parameters !== undefined ) this.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n}\n\nBufferGeometry.prototype.isBufferGeometry = true;\n\nconst _inverseMatrix$2 = /*@__PURE__*/ new Matrix4();\nconst _ray$2 = /*@__PURE__*/ new Ray();\nconst _sphere$3 = /*@__PURE__*/ new Sphere();\n\nconst _vA$1 = /*@__PURE__*/ new Vector3();\nconst _vB$1 = /*@__PURE__*/ new Vector3();\nconst _vC$1 = /*@__PURE__*/ new Vector3();\n\nconst _tempA = /*@__PURE__*/ new Vector3();\nconst _tempB = /*@__PURE__*/ new Vector3();\nconst _tempC = /*@__PURE__*/ new Vector3();\n\nconst _morphA = /*@__PURE__*/ new Vector3();\nconst _morphB = /*@__PURE__*/ new Vector3();\nconst _morphC = /*@__PURE__*/ new Vector3();\n\nconst _uvA$1 = /*@__PURE__*/ new Vector2();\nconst _uvB$1 = /*@__PURE__*/ new Vector2();\nconst _uvC$1 = /*@__PURE__*/ new Vector2();\n\nconst _intersectionPoint = /*@__PURE__*/ new Vector3();\nconst _intersectionPointWorld = /*@__PURE__*/ new Vector3();\n\nclass Mesh extends Object3D {\n\n\tconstructor( geometry = new BufferGeometry(), material = new MeshBasicMaterial() ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'Mesh';\n\n\t\tthis.geometry = geometry;\n\t\tthis.material = material;\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tif ( source.morphTargetInfluences !== undefined ) {\n\n\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\n\n\t\t}\n\n\t\tif ( source.morphTargetDictionary !== undefined ) {\n\n\t\t\tthis.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );\n\n\t\t}\n\n\t\tthis.material = source.material;\n\t\tthis.geometry = source.geometry;\n\n\t\treturn this;\n\n\t}\n\n\tupdateMorphTargets() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tconst morphAttributes = geometry.morphAttributes;\n\t\t\tconst keys = Object.keys( morphAttributes );\n\n\t\t\tif ( keys.length > 0 ) {\n\n\t\t\t\tconst morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\tfor ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\tconst name = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst morphTargets = geometry.morphTargets;\n\n\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst geometry = this.geometry;\n\t\tconst material = this.material;\n\t\tconst matrixWorld = this.matrixWorld;\n\n\t\tif ( material === undefined ) return;\n\n\t\t// Checking boundingSphere distance to ray\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t_sphere$3.copy( geometry.boundingSphere );\n\t\t_sphere$3.applyMatrix4( matrixWorld );\n\n\t\tif ( raycaster.ray.intersectsSphere( _sphere$3 ) === false ) return;\n\n\t\t//\n\n\t\t_inverseMatrix$2.copy( matrixWorld ).invert();\n\t\t_ray$2.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$2 );\n\n\t\t// Check boundingBox before continuing\n\n\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\tif ( _ray$2.intersectsBox( geometry.boundingBox ) === false ) return;\n\n\t\t}\n\n\t\tlet intersection;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tconst index = geometry.index;\n\t\t\tconst position = geometry.attributes.position;\n\t\t\tconst morphPosition = geometry.morphAttributes.position;\n\t\t\tconst morphTargetsRelative = geometry.morphTargetsRelative;\n\t\t\tconst uv = geometry.attributes.uv;\n\t\t\tconst uv2 = geometry.attributes.uv2;\n\t\t\tconst groups = geometry.groups;\n\t\t\tconst drawRange = geometry.drawRange;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\t// indexed buffer geometry\n\n\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\tfor ( let i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tconst group = groups[ i ];\n\t\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\tconst start = Math.max( group.start, drawRange.start );\n\t\t\t\t\t\tconst end = Math.min( index.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );\n\n\t\t\t\t\t\tfor ( let j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\t\tconst a = index.getX( j );\n\t\t\t\t\t\t\tconst b = index.getX( j + 1 );\n\t\t\t\t\t\t\tconst c = index.getX( j + 2 );\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\t\t\tconst end = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\tfor ( let i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\t\tconst a = index.getX( i );\n\t\t\t\t\t\tconst b = index.getX( i + 1 );\n\t\t\t\t\t\tconst c = index.getX( i + 2 );\n\n\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( position !== undefined ) {\n\n\t\t\t\t// non-indexed buffer geometry\n\n\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\tfor ( let i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tconst group = groups[ i ];\n\t\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\tconst start = Math.max( group.start, drawRange.start );\n\t\t\t\t\t\tconst end = Math.min( position.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );\n\n\t\t\t\t\t\tfor ( let j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\t\tconst a = j;\n\t\t\t\t\t\t\tconst b = j + 1;\n\t\t\t\t\t\t\tconst c = j + 2;\n\n\t\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, groupMaterial, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\t\t\tconst end = Math.min( position.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\t\tfor ( let i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\t\tconst a = i;\n\t\t\t\t\t\tconst b = i + 1;\n\t\t\t\t\t\tconst c = i + 2;\n\n\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, material, raycaster, _ray$2, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\tconsole.error( 'THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t}\n\n\t}\n\n}\n\nMesh.prototype.isMesh = true;\n\nfunction checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {\n\n\tlet intersect;\n\n\tif ( material.side === BackSide ) {\n\n\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n\t} else {\n\n\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== DoubleSide, point );\n\n\t}\n\n\tif ( intersect === null ) return null;\n\n\t_intersectionPointWorld.copy( point );\n\t_intersectionPointWorld.applyMatrix4( object.matrixWorld );\n\n\tconst distance = raycaster.ray.origin.distanceTo( _intersectionPointWorld );\n\n\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\n\n\treturn {\n\t\tdistance: distance,\n\t\tpoint: _intersectionPointWorld.clone(),\n\t\tobject: object\n\t};\n\n}\n\nfunction checkBufferGeometryIntersection( object, material, raycaster, ray, position, morphPosition, morphTargetsRelative, uv, uv2, a, b, c ) {\n\n\t_vA$1.fromBufferAttribute( position, a );\n\t_vB$1.fromBufferAttribute( position, b );\n\t_vC$1.fromBufferAttribute( position, c );\n\n\tconst morphInfluences = object.morphTargetInfluences;\n\n\tif ( morphPosition && morphInfluences ) {\n\n\t\t_morphA.set( 0, 0, 0 );\n\t\t_morphB.set( 0, 0, 0 );\n\t\t_morphC.set( 0, 0, 0 );\n\n\t\tfor ( let i = 0, il = morphPosition.length; i < il; i ++ ) {\n\n\t\t\tconst influence = morphInfluences[ i ];\n\t\t\tconst morphAttribute = morphPosition[ i ];\n\n\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t_tempA.fromBufferAttribute( morphAttribute, a );\n\t\t\t_tempB.fromBufferAttribute( morphAttribute, b );\n\t\t\t_tempC.fromBufferAttribute( morphAttribute, c );\n\n\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t_morphA.addScaledVector( _tempA, influence );\n\t\t\t\t_morphB.addScaledVector( _tempB, influence );\n\t\t\t\t_morphC.addScaledVector( _tempC, influence );\n\n\t\t\t} else {\n\n\t\t\t\t_morphA.addScaledVector( _tempA.sub( _vA$1 ), influence );\n\t\t\t\t_morphB.addScaledVector( _tempB.sub( _vB$1 ), influence );\n\t\t\t\t_morphC.addScaledVector( _tempC.sub( _vC$1 ), influence );\n\n\t\t\t}\n\n\t\t}\n\n\t\t_vA$1.add( _morphA );\n\t\t_vB$1.add( _morphB );\n\t\t_vC$1.add( _morphC );\n\n\t}\n\n\tif ( object.isSkinnedMesh ) {\n\n\t\tobject.boneTransform( a, _vA$1 );\n\t\tobject.boneTransform( b, _vB$1 );\n\t\tobject.boneTransform( c, _vC$1 );\n\n\t}\n\n\tconst intersection = checkIntersection( object, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint );\n\n\tif ( intersection ) {\n\n\t\tif ( uv ) {\n\n\t\t\t_uvA$1.fromBufferAttribute( uv, a );\n\t\t\t_uvB$1.fromBufferAttribute( uv, b );\n\t\t\t_uvC$1.fromBufferAttribute( uv, c );\n\n\t\t\tintersection.uv = Triangle.getUV( _intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() );\n\n\t\t}\n\n\t\tif ( uv2 ) {\n\n\t\t\t_uvA$1.fromBufferAttribute( uv2, a );\n\t\t\t_uvB$1.fromBufferAttribute( uv2, b );\n\t\t\t_uvC$1.fromBufferAttribute( uv2, c );\n\n\t\t\tintersection.uv2 = Triangle.getUV( _intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() );\n\n\t\t}\n\n\t\tconst face = {\n\t\t\ta: a,\n\t\t\tb: b,\n\t\t\tc: c,\n\t\t\tnormal: new Vector3(),\n\t\t\tmaterialIndex: 0\n\t\t};\n\n\t\tTriangle.getNormal( _vA$1, _vB$1, _vC$1, face.normal );\n\n\t\tintersection.face = face;\n\n\t}\n\n\treturn intersection;\n\n}\n\nclass BoxGeometry extends BufferGeometry {\n\n\tconstructor( width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'BoxGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\tdepth: depth,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tdepthSegments: depthSegments\n\t\t};\n\n\t\tconst scope = this;\n\n\t\t// segments\n\n\t\twidthSegments = Math.floor( widthSegments );\n\t\theightSegments = Math.floor( heightSegments );\n\t\tdepthSegments = Math.floor( depthSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tlet numberOfVertices = 0;\n\t\tlet groupStart = 0;\n\n\t\t// build each side of the box geometry\n\n\t\tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px\n\t\tbuildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx\n\t\tbuildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py\n\t\tbuildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny\n\t\tbuildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz\n\t\tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\tfunction buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\n\n\t\t\tconst segmentWidth = width / gridX;\n\t\t\tconst segmentHeight = height / gridY;\n\n\t\t\tconst widthHalf = width / 2;\n\t\t\tconst heightHalf = height / 2;\n\t\t\tconst depthHalf = depth / 2;\n\n\t\t\tconst gridX1 = gridX + 1;\n\t\t\tconst gridY1 = gridY + 1;\n\n\t\t\tlet vertexCounter = 0;\n\t\t\tlet groupCount = 0;\n\n\t\t\tconst vector = new Vector3();\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( let iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\t\tconst y = iy * segmentHeight - heightHalf;\n\n\t\t\t\tfor ( let ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\t\tconst x = ix * segmentWidth - widthHalf;\n\n\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\tvector[ u ] = x * udir;\n\t\t\t\t\tvector[ v ] = y * vdir;\n\t\t\t\t\tvector[ w ] = depthHalf;\n\n\t\t\t\t\t// now apply vector to vertex buffer\n\n\t\t\t\t\tvertices.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\tvector[ u ] = 0;\n\t\t\t\t\tvector[ v ] = 0;\n\t\t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\n\n\t\t\t\t\t// now apply vector to normal buffer\n\n\t\t\t\t\tnormals.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t// uvs\n\n\t\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t\t\t// counters\n\n\t\t\t\t\tvertexCounter += 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// indices\n\n\t\t\t// 1. you need three indices to draw a single face\n\t\t\t// 2. a single segment consists of two faces\n\t\t\t// 3. so we need to generate six (2*3) indices per segment\n\n\t\t\tfor ( let iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\t\tfor ( let ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\t\tconst a = numberOfVertices + ix + gridX1 * iy;\n\t\t\t\t\tconst b = numberOfVertices + ix + gridX1 * ( iy + 1 );\n\t\t\t\t\tconst c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\t\tconst d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t\t// increase counter\n\n\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, materialIndex );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t\t// update total number of vertices\n\n\t\t\tnumberOfVertices += vertexCounter;\n\n\t\t}\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new BoxGeometry( data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments );\n\n\t}\n\n}\n\n/**\n * Uniform Utilities\n */\n\nfunction cloneUniforms( src ) {\n\n\tconst dst = {};\n\n\tfor ( const u in src ) {\n\n\t\tdst[ u ] = {};\n\n\t\tfor ( const p in src[ u ] ) {\n\n\t\t\tconst property = src[ u ][ p ];\n\n\t\t\tif ( property && ( property.isColor ||\n\t\t\t\tproperty.isMatrix3 || property.isMatrix4 ||\n\t\t\t\tproperty.isVector2 || property.isVector3 || property.isVector4 ||\n\t\t\t\tproperty.isTexture || property.isQuaternion ) ) {\n\n\t\t\t\tdst[ u ][ p ] = property.clone();\n\n\t\t\t} else if ( Array.isArray( property ) ) {\n\n\t\t\t\tdst[ u ][ p ] = property.slice();\n\n\t\t\t} else {\n\n\t\t\t\tdst[ u ][ p ] = property;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn dst;\n\n}\n\nfunction mergeUniforms( uniforms ) {\n\n\tconst merged = {};\n\n\tfor ( let u = 0; u < uniforms.length; u ++ ) {\n\n\t\tconst tmp = cloneUniforms( uniforms[ u ] );\n\n\t\tfor ( const p in tmp ) {\n\n\t\t\tmerged[ p ] = tmp[ p ];\n\n\t\t}\n\n\t}\n\n\treturn merged;\n\n}\n\n// Legacy\n\nconst UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };\n\nvar default_vertex = \"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\";\n\nvar default_fragment = \"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\";\n\n/**\n * parameters = {\n *  defines: { \"label\" : \"value\" },\n *  uniforms: { \"parameter1\": { value: 1.0 }, \"parameter2\": { value2: 2 } },\n *\n *  fragmentShader: <string>,\n *  vertexShader: <string>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  lights: <bool>\n * }\n */\n\nclass ShaderMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'ShaderMaterial';\n\n\t\tthis.defines = {};\n\t\tthis.uniforms = {};\n\n\t\tthis.vertexShader = default_vertex;\n\t\tthis.fragmentShader = default_fragment;\n\n\t\tthis.linewidth = 1;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false; // set to use scene fog\n\t\tthis.lights = false; // set to use scene lights\n\t\tthis.clipping = false; // set to use user-defined clipping planes\n\n\t\tthis.extensions = {\n\t\t\tderivatives: false, // set to use derivatives\n\t\t\tfragDepth: false, // set to use fragment depth values\n\t\t\tdrawBuffers: false, // set to use draw buffers\n\t\t\tshaderTextureLOD: false // set to use shader texture LOD\n\t\t};\n\n\t\t// When rendered geometry doesn't include these attributes but the material does,\n\t\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\t\tthis.defaultAttributeValues = {\n\t\t\t'color': [ 1, 1, 1 ],\n\t\t\t'uv': [ 0, 0 ],\n\t\t\t'uv2': [ 0, 0 ]\n\t\t};\n\n\t\tthis.index0AttributeName = undefined;\n\t\tthis.uniformsNeedUpdate = false;\n\n\t\tthis.glslVersion = null;\n\n\t\tif ( parameters !== undefined ) {\n\n\t\t\tif ( parameters.attributes !== undefined ) {\n\n\t\t\t\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\n\n\t\t\t}\n\n\t\t\tthis.setValues( parameters );\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.fragmentShader = source.fragmentShader;\n\t\tthis.vertexShader = source.vertexShader;\n\n\t\tthis.uniforms = cloneUniforms( source.uniforms );\n\n\t\tthis.defines = Object.assign( {}, source.defines );\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.lights = source.lights;\n\t\tthis.clipping = source.clipping;\n\n\t\tthis.extensions = Object.assign( {}, source.extensions );\n\n\t\tthis.glslVersion = source.glslVersion;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.glslVersion = this.glslVersion;\n\t\tdata.uniforms = {};\n\n\t\tfor ( const name in this.uniforms ) {\n\n\t\t\tconst uniform = this.uniforms[ name ];\n\t\t\tconst value = uniform.value;\n\n\t\t\tif ( value && value.isTexture ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 't',\n\t\t\t\t\tvalue: value.toJSON( meta ).uuid\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isColor ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'c',\n\t\t\t\t\tvalue: value.getHex()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector2 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v2',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector3 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector4 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isMatrix3 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'm3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isMatrix4 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'm4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\tvalue: value\n\t\t\t\t};\n\n\t\t\t\t// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( Object.keys( this.defines ).length > 0 ) data.defines = this.defines;\n\n\t\tdata.vertexShader = this.vertexShader;\n\t\tdata.fragmentShader = this.fragmentShader;\n\n\t\tconst extensions = {};\n\n\t\tfor ( const key in this.extensions ) {\n\n\t\t\tif ( this.extensions[ key ] === true ) extensions[ key ] = true;\n\n\t\t}\n\n\t\tif ( Object.keys( extensions ).length > 0 ) data.extensions = extensions;\n\n\t\treturn data;\n\n\t}\n\n}\n\nShaderMaterial.prototype.isShaderMaterial = true;\n\nclass Camera extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.type = 'Camera';\n\n\t\tthis.matrixWorldInverse = new Matrix4();\n\n\t\tthis.projectionMatrix = new Matrix4();\n\t\tthis.projectionMatrixInverse = new Matrix4();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n\n\t\tthis.projectionMatrix.copy( source.projectionMatrix );\n\t\tthis.projectionMatrixInverse.copy( source.projectionMatrixInverse );\n\n\t\treturn this;\n\n\t}\n\n\tgetWorldDirection( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\tconst e = this.matrixWorld.elements;\n\n\t\treturn target.set( - e[ 8 ], - e[ 9 ], - e[ 10 ] ).normalize();\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tthis.matrixWorldInverse.copy( this.matrixWorld ).invert();\n\n\t}\n\n\tupdateWorldMatrix( updateParents, updateChildren ) {\n\n\t\tsuper.updateWorldMatrix( updateParents, updateChildren );\n\n\t\tthis.matrixWorldInverse.copy( this.matrixWorld ).invert();\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nCamera.prototype.isCamera = true;\n\nclass PerspectiveCamera extends Camera {\n\n\tconstructor( fov = 50, aspect = 1, near = 0.1, far = 2000 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'PerspectiveCamera';\n\n\t\tthis.fov = fov;\n\t\tthis.zoom = 1;\n\n\t\tthis.near = near;\n\t\tthis.far = far;\n\t\tthis.focus = 10;\n\n\t\tthis.aspect = aspect;\n\t\tthis.view = null;\n\n\t\tthis.filmGauge = 35;\t// width of the film (default in millimeters)\n\t\tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.fov = source.fov;\n\t\tthis.zoom = source.zoom;\n\n\t\tthis.near = source.near;\n\t\tthis.far = source.far;\n\t\tthis.focus = source.focus;\n\n\t\tthis.aspect = source.aspect;\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\tthis.filmGauge = source.filmGauge;\n\t\tthis.filmOffset = source.filmOffset;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t *\n\t * The default film gauge is 35, so that the focal length can be specified for\n\t * a 35mm (full frame) camera.\n\t *\n\t * Values for focal length and film gauge must have the same unit.\n\t */\n\tsetFocalLength( focalLength ) {\n\n\t\t/** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */\n\t\tconst vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\n\t\tthis.fov = RAD2DEG * 2 * Math.atan( vExtentSlope );\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\t/**\n\t * Calculates the focal length from the current .fov and .filmGauge.\n\t */\n\tgetFocalLength() {\n\n\t\tconst vExtentSlope = Math.tan( DEG2RAD * 0.5 * this.fov );\n\n\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\n\t}\n\n\tgetEffectiveFOV() {\n\n\t\treturn RAD2DEG * 2 * Math.atan(\n\t\t\tMath.tan( DEG2RAD * 0.5 * this.fov ) / this.zoom );\n\n\t}\n\n\tgetFilmWidth() {\n\n\t\t// film not completely covered in portrait format (aspect < 1)\n\t\treturn this.filmGauge * Math.min( this.aspect, 1 );\n\n\t}\n\n\tgetFilmHeight() {\n\n\t\t// film not completely covered in landscape format (aspect > 1)\n\t\treturn this.filmGauge / Math.max( this.aspect, 1 );\n\n\t}\n\n\t/**\n\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t * multi-monitor/multi-machine setups.\n\t *\n\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t * the monitors are in grid like this\n\t *\n\t *   +---+---+---+\n\t *   | A | B | C |\n\t *   +---+---+---+\n\t *   | D | E | F |\n\t *   +---+---+---+\n\t *\n\t * then for each monitor you would call it like this\n\t *\n\t *   const w = 1920;\n\t *   const h = 1080;\n\t *   const fullWidth = w * 3;\n\t *   const fullHeight = h * 2;\n\t *\n\t *   --A--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t *   --B--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t *   --C--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t *   --D--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t *   --E--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t *   --F--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t *\n\t *   Note there is no reason monitors have to be the same size or in a grid.\n\t */\n\tsetViewOffset( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\tif ( this.view === null ) {\n\n\t\t\tthis.view = {\n\t\t\t\tenabled: true,\n\t\t\t\tfullWidth: 1,\n\t\t\t\tfullHeight: 1,\n\t\t\t\toffsetX: 0,\n\t\t\t\toffsetY: 0,\n\t\t\t\twidth: 1,\n\t\t\t\theight: 1\n\t\t\t};\n\n\t\t}\n\n\t\tthis.view.enabled = true;\n\t\tthis.view.fullWidth = fullWidth;\n\t\tthis.view.fullHeight = fullHeight;\n\t\tthis.view.offsetX = x;\n\t\tthis.view.offsetY = y;\n\t\tthis.view.width = width;\n\t\tthis.view.height = height;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tclearViewOffset() {\n\n\t\tif ( this.view !== null ) {\n\n\t\t\tthis.view.enabled = false;\n\n\t\t}\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tupdateProjectionMatrix() {\n\n\t\tconst near = this.near;\n\t\tlet top = near * Math.tan( DEG2RAD * 0.5 * this.fov ) / this.zoom;\n\t\tlet height = 2 * top;\n\t\tlet width = this.aspect * height;\n\t\tlet left = - 0.5 * width;\n\t\tconst view = this.view;\n\n\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\tconst fullWidth = view.fullWidth,\n\t\t\t\tfullHeight = view.fullHeight;\n\n\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\twidth *= view.width / fullWidth;\n\t\t\theight *= view.height / fullHeight;\n\n\t\t}\n\n\t\tconst skew = this.filmOffset;\n\t\tif ( skew !== 0 ) left += near * skew / this.getFilmWidth();\n\n\t\tthis.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far );\n\n\t\tthis.projectionMatrixInverse.copy( this.projectionMatrix ).invert();\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.fov = this.fov;\n\t\tdata.object.zoom = this.zoom;\n\n\t\tdata.object.near = this.near;\n\t\tdata.object.far = this.far;\n\t\tdata.object.focus = this.focus;\n\n\t\tdata.object.aspect = this.aspect;\n\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\tdata.object.filmGauge = this.filmGauge;\n\t\tdata.object.filmOffset = this.filmOffset;\n\n\t\treturn data;\n\n\t}\n\n}\n\nPerspectiveCamera.prototype.isPerspectiveCamera = true;\n\nconst fov = 90, aspect = 1;\n\nclass CubeCamera extends Object3D {\n\n\tconstructor( near, far, renderTarget ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'CubeCamera';\n\n\t\tif ( renderTarget.isWebGLCubeRenderTarget !== true ) {\n\n\t\t\tconsole.error( 'THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.renderTarget = renderTarget;\n\n\t\tconst cameraPX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPX.layers = this.layers;\n\t\tcameraPX.up.set( 0, - 1, 0 );\n\t\tcameraPX.lookAt( new Vector3( 1, 0, 0 ) );\n\t\tthis.add( cameraPX );\n\n\t\tconst cameraNX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNX.layers = this.layers;\n\t\tcameraNX.up.set( 0, - 1, 0 );\n\t\tcameraNX.lookAt( new Vector3( - 1, 0, 0 ) );\n\t\tthis.add( cameraNX );\n\n\t\tconst cameraPY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPY.layers = this.layers;\n\t\tcameraPY.up.set( 0, 0, 1 );\n\t\tcameraPY.lookAt( new Vector3( 0, 1, 0 ) );\n\t\tthis.add( cameraPY );\n\n\t\tconst cameraNY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNY.layers = this.layers;\n\t\tcameraNY.up.set( 0, 0, - 1 );\n\t\tcameraNY.lookAt( new Vector3( 0, - 1, 0 ) );\n\t\tthis.add( cameraNY );\n\n\t\tconst cameraPZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPZ.layers = this.layers;\n\t\tcameraPZ.up.set( 0, - 1, 0 );\n\t\tcameraPZ.lookAt( new Vector3( 0, 0, 1 ) );\n\t\tthis.add( cameraPZ );\n\n\t\tconst cameraNZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNZ.layers = this.layers;\n\t\tcameraNZ.up.set( 0, - 1, 0 );\n\t\tcameraNZ.lookAt( new Vector3( 0, 0, - 1 ) );\n\t\tthis.add( cameraNZ );\n\n\t}\n\n\tupdate( renderer, scene ) {\n\n\t\tif ( this.parent === null ) this.updateMatrixWorld();\n\n\t\tconst renderTarget = this.renderTarget;\n\n\t\tconst [ cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ ] = this.children;\n\n\t\tconst currentXrEnabled = renderer.xr.enabled;\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\trenderer.xr.enabled = false;\n\n\t\tconst generateMipmaps = renderTarget.texture.generateMipmaps;\n\n\t\trenderTarget.texture.generateMipmaps = false;\n\n\t\trenderer.setRenderTarget( renderTarget, 0 );\n\t\trenderer.render( scene, cameraPX );\n\n\t\trenderer.setRenderTarget( renderTarget, 1 );\n\t\trenderer.render( scene, cameraNX );\n\n\t\trenderer.setRenderTarget( renderTarget, 2 );\n\t\trenderer.render( scene, cameraPY );\n\n\t\trenderer.setRenderTarget( renderTarget, 3 );\n\t\trenderer.render( scene, cameraNY );\n\n\t\trenderer.setRenderTarget( renderTarget, 4 );\n\t\trenderer.render( scene, cameraPZ );\n\n\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\n\t\trenderer.setRenderTarget( renderTarget, 5 );\n\t\trenderer.render( scene, cameraNZ );\n\n\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\trenderer.xr.enabled = currentXrEnabled;\n\n\t}\n\n}\n\nclass CubeTexture extends Texture {\n\n\tconstructor( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\n\n\t\timages = images !== undefined ? images : [];\n\t\tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\n\t\tsuper( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.flipY = false;\n\n\t}\n\n\tget images() {\n\n\t\treturn this.image;\n\n\t}\n\n\tset images( value ) {\n\n\t\tthis.image = value;\n\n\t}\n\n}\n\nCubeTexture.prototype.isCubeTexture = true;\n\nclass WebGLCubeRenderTarget extends WebGLRenderTarget {\n\n\tconstructor( size, options, dummy ) {\n\n\t\tif ( Number.isInteger( options ) ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )' );\n\n\t\t\toptions = dummy;\n\n\t\t}\n\n\t\tsuper( size, size, options );\n\n\t\toptions = options || {};\n\n\t\t// By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)\n\t\t// in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,\n\t\t// in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.\n\n\t\t// three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped\n\t\t// and the flag isRenderTargetTexture controls this conversion. The flip is not required when using WebGLCubeRenderTarget.texture\n\t\t// as a cube texture (this is detected when isRenderTargetTexture is set to true for cube textures).\n\n\t\tthis.texture = new CubeTexture( undefined, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\n\t\tthis.texture.isRenderTargetTexture = true;\n\n\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\t\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\n\t\tthis.texture._needsFlipEnvMap = false;\n\n\t}\n\n\tfromEquirectangularTexture( renderer, texture ) {\n\n\t\tthis.texture.type = texture.type;\n\t\tthis.texture.format = RGBAFormat; // see #18859\n\t\tthis.texture.encoding = texture.encoding;\n\n\t\tthis.texture.generateMipmaps = texture.generateMipmaps;\n\t\tthis.texture.minFilter = texture.minFilter;\n\t\tthis.texture.magFilter = texture.magFilter;\n\n\t\tconst shader = {\n\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: { value: null },\n\t\t\t},\n\n\t\t\tvertexShader: /* glsl */`\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t`,\n\n\t\t\tfragmentShader: /* glsl */`\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t`\n\t\t};\n\n\t\tconst geometry = new BoxGeometry( 5, 5, 5 );\n\n\t\tconst material = new ShaderMaterial( {\n\n\t\t\tname: 'CubemapFromEquirect',\n\n\t\t\tuniforms: cloneUniforms( shader.uniforms ),\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\tside: BackSide,\n\t\t\tblending: NoBlending\n\n\t\t} );\n\n\t\tmaterial.uniforms.tEquirect.value = texture;\n\n\t\tconst mesh = new Mesh( geometry, material );\n\n\t\tconst currentMinFilter = texture.minFilter;\n\n\t\t// Avoid blurred poles\n\t\tif ( texture.minFilter === LinearMipmapLinearFilter ) texture.minFilter = LinearFilter;\n\n\t\tconst camera = new CubeCamera( 1, 10, this );\n\t\tcamera.update( renderer, mesh );\n\n\t\ttexture.minFilter = currentMinFilter;\n\n\t\tmesh.geometry.dispose();\n\t\tmesh.material.dispose();\n\n\t\treturn this;\n\n\t}\n\n\tclear( renderer, color, depth, stencil ) {\n\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\trenderer.setRenderTarget( this, i );\n\n\t\t\trenderer.clear( color, depth, stencil );\n\n\t\t}\n\n\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t}\n\n}\n\nWebGLCubeRenderTarget.prototype.isWebGLCubeRenderTarget = true;\n\nconst _vector1 = /*@__PURE__*/ new Vector3();\nconst _vector2 = /*@__PURE__*/ new Vector3();\nconst _normalMatrix = /*@__PURE__*/ new Matrix3();\n\nclass Plane {\n\n\tconstructor( normal = new Vector3( 1, 0, 0 ), constant = 0 ) {\n\n\t\t// normal is assumed to be normalized\n\n\t\tthis.normal = normal;\n\t\tthis.constant = constant;\n\n\t}\n\n\tset( normal, constant ) {\n\n\t\tthis.normal.copy( normal );\n\t\tthis.constant = constant;\n\n\t\treturn this;\n\n\t}\n\n\tsetComponents( x, y, z, w ) {\n\n\t\tthis.normal.set( x, y, z );\n\t\tthis.constant = w;\n\n\t\treturn this;\n\n\t}\n\n\tsetFromNormalAndCoplanarPoint( normal, point ) {\n\n\t\tthis.normal.copy( normal );\n\t\tthis.constant = - point.dot( this.normal );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromCoplanarPoints( a, b, c ) {\n\n\t\tconst normal = _vector1.subVectors( c, b ).cross( _vector2.subVectors( a, b ) ).normalize();\n\n\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( plane ) {\n\n\t\tthis.normal.copy( plane.normal );\n\t\tthis.constant = plane.constant;\n\n\t\treturn this;\n\n\t}\n\n\tnormalize() {\n\n\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\n\t\tconst inverseNormalLength = 1.0 / this.normal.length();\n\t\tthis.normal.multiplyScalar( inverseNormalLength );\n\t\tthis.constant *= inverseNormalLength;\n\n\t\treturn this;\n\n\t}\n\n\tnegate() {\n\n\t\tthis.constant *= - 1;\n\t\tthis.normal.negate();\n\n\t\treturn this;\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\treturn this.normal.dot( point ) + this.constant;\n\n\t}\n\n\tdistanceToSphere( sphere ) {\n\n\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\n\n\t}\n\n\tprojectPoint( point, target ) {\n\n\t\treturn target.copy( this.normal ).multiplyScalar( - this.distanceToPoint( point ) ).add( point );\n\n\t}\n\n\tintersectLine( line, target ) {\n\n\t\tconst direction = line.delta( _vector1 );\n\n\t\tconst denominator = this.normal.dot( direction );\n\n\t\tif ( denominator === 0 ) {\n\n\t\t\t// line is coplanar, return origin\n\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\n\n\t\t\t\treturn target.copy( line.start );\n\n\t\t\t}\n\n\t\t\t// Unsure if this is the correct method to handle this case.\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\n\t\tif ( t < 0 || t > 1 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\treturn target.copy( direction ).multiplyScalar( t ).add( line.start );\n\n\t}\n\n\tintersectsLine( line ) {\n\n\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\n\t\tconst startSign = this.distanceToPoint( line.start );\n\t\tconst endSign = this.distanceToPoint( line.end );\n\n\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\treturn box.intersectsPlane( this );\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\treturn sphere.intersectsPlane( this );\n\n\t}\n\n\tcoplanarPoint( target ) {\n\n\t\treturn target.copy( this.normal ).multiplyScalar( - this.constant );\n\n\t}\n\n\tapplyMatrix4( matrix, optionalNormalMatrix ) {\n\n\t\tconst normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix( matrix );\n\n\t\tconst referencePoint = this.coplanarPoint( _vector1 ).applyMatrix4( matrix );\n\n\t\tconst normal = this.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\tthis.constant = - referencePoint.dot( normal );\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( offset ) {\n\n\t\tthis.constant -= offset.dot( this.normal );\n\n\t\treturn this;\n\n\t}\n\n\tequals( plane ) {\n\n\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nPlane.prototype.isPlane = true;\n\nconst _sphere$2 = /*@__PURE__*/ new Sphere();\nconst _vector$7 = /*@__PURE__*/ new Vector3();\n\nclass Frustum {\n\n\tconstructor( p0 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane() ) {\n\n\t\tthis.planes = [ p0, p1, p2, p3, p4, p5 ];\n\n\t}\n\n\tset( p0, p1, p2, p3, p4, p5 ) {\n\n\t\tconst planes = this.planes;\n\n\t\tplanes[ 0 ].copy( p0 );\n\t\tplanes[ 1 ].copy( p1 );\n\t\tplanes[ 2 ].copy( p2 );\n\t\tplanes[ 3 ].copy( p3 );\n\t\tplanes[ 4 ].copy( p4 );\n\t\tplanes[ 5 ].copy( p5 );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( frustum ) {\n\n\t\tconst planes = this.planes;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetFromProjectionMatrix( m ) {\n\n\t\tconst planes = this.planes;\n\t\tconst me = m.elements;\n\t\tconst me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n\t\tconst me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n\t\tconst me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n\t\tconst me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\n\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\n\t\treturn this;\n\n\t}\n\n\tintersectsObject( object ) {\n\n\t\tconst geometry = object.geometry;\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t_sphere$2.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );\n\n\t\treturn this.intersectsSphere( _sphere$2 );\n\n\t}\n\n\tintersectsSprite( sprite ) {\n\n\t\t_sphere$2.center.set( 0, 0, 0 );\n\t\t_sphere$2.radius = 0.7071067811865476;\n\t\t_sphere$2.applyMatrix4( sprite.matrixWorld );\n\n\t\treturn this.intersectsSphere( _sphere$2 );\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\tconst planes = this.planes;\n\t\tconst center = sphere.center;\n\t\tconst negRadius = - sphere.radius;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tconst distance = planes[ i ].distanceToPoint( center );\n\n\t\t\tif ( distance < negRadius ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\tconst planes = this.planes;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tconst plane = planes[ i ];\n\n\t\t\t// corner at max distance\n\n\t\t\t_vector$7.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t_vector$7.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t_vector$7.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\tif ( plane.distanceToPoint( _vector$7 ) < 0 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\tconst planes = this.planes;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nfunction WebGLAnimation() {\n\n\tlet context = null;\n\tlet isAnimating = false;\n\tlet animationLoop = null;\n\tlet requestId = null;\n\n\tfunction onAnimationFrame( time, frame ) {\n\n\t\tanimationLoop( time, frame );\n\n\t\trequestId = context.requestAnimationFrame( onAnimationFrame );\n\n\t}\n\n\treturn {\n\n\t\tstart: function () {\n\n\t\t\tif ( isAnimating === true ) return;\n\t\t\tif ( animationLoop === null ) return;\n\n\t\t\trequestId = context.requestAnimationFrame( onAnimationFrame );\n\n\t\t\tisAnimating = true;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tcontext.cancelAnimationFrame( requestId );\n\n\t\t\tisAnimating = false;\n\n\t\t},\n\n\t\tsetAnimationLoop: function ( callback ) {\n\n\t\t\tanimationLoop = callback;\n\n\t\t},\n\n\t\tsetContext: function ( value ) {\n\n\t\t\tcontext = value;\n\n\t\t}\n\n\t};\n\n}\n\nfunction WebGLAttributes( gl, capabilities ) {\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\n\tconst buffers = new WeakMap();\n\n\tfunction createBuffer( attribute, bufferType ) {\n\n\t\tconst array = attribute.array;\n\t\tconst usage = attribute.usage;\n\n\t\tconst buffer = gl.createBuffer();\n\n\t\tgl.bindBuffer( bufferType, buffer );\n\t\tgl.bufferData( bufferType, array, usage );\n\n\t\tattribute.onUploadCallback();\n\n\t\tlet type = 5126;\n\n\t\tif ( array instanceof Float32Array ) {\n\n\t\t\ttype = 5126;\n\n\t\t} else if ( array instanceof Float64Array ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.' );\n\n\t\t} else if ( array instanceof Uint16Array ) {\n\n\t\t\tif ( attribute.isFloat16BufferAttribute ) {\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\ttype = 5131;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.' );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\ttype = 5123;\n\n\t\t\t}\n\n\t\t} else if ( array instanceof Int16Array ) {\n\n\t\t\ttype = 5122;\n\n\t\t} else if ( array instanceof Uint32Array ) {\n\n\t\t\ttype = 5125;\n\n\t\t} else if ( array instanceof Int32Array ) {\n\n\t\t\ttype = 5124;\n\n\t\t} else if ( array instanceof Int8Array ) {\n\n\t\t\ttype = 5120;\n\n\t\t} else if ( array instanceof Uint8Array ) {\n\n\t\t\ttype = 5121;\n\n\t\t} else if ( array instanceof Uint8ClampedArray ) {\n\n\t\t\ttype = 5121;\n\n\t\t}\n\n\t\treturn {\n\t\t\tbuffer: buffer,\n\t\t\ttype: type,\n\t\t\tbytesPerElement: array.BYTES_PER_ELEMENT,\n\t\t\tversion: attribute.version\n\t\t};\n\n\t}\n\n\tfunction updateBuffer( buffer, attribute, bufferType ) {\n\n\t\tconst array = attribute.array;\n\t\tconst updateRange = attribute.updateRange;\n\n\t\tgl.bindBuffer( bufferType, buffer );\n\n\t\tif ( updateRange.count === - 1 ) {\n\n\t\t\t// Not using update ranges\n\n\t\t\tgl.bufferSubData( bufferType, 0, array );\n\n\t\t} else {\n\n\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\tgl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,\n\t\t\t\t\tarray, updateRange.offset, updateRange.count );\n\n\t\t\t} else {\n\n\t\t\t\tgl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,\n\t\t\t\t\tarray.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );\n\n\t\t\t}\n\n\t\t\tupdateRange.count = - 1; // reset range\n\n\t\t}\n\n\t}\n\n\t//\n\n\tfunction get( attribute ) {\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\treturn buffers.get( attribute );\n\n\t}\n\n\tfunction remove( attribute ) {\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\tconst data = buffers.get( attribute );\n\n\t\tif ( data ) {\n\n\t\t\tgl.deleteBuffer( data.buffer );\n\n\t\t\tbuffers.delete( attribute );\n\n\t\t}\n\n\t}\n\n\tfunction update( attribute, bufferType ) {\n\n\t\tif ( attribute.isGLBufferAttribute ) {\n\n\t\t\tconst cached = buffers.get( attribute );\n\n\t\t\tif ( ! cached || cached.version < attribute.version ) {\n\n\t\t\t\tbuffers.set( attribute, {\n\t\t\t\t\tbuffer: attribute.buffer,\n\t\t\t\t\ttype: attribute.type,\n\t\t\t\t\tbytesPerElement: attribute.elementSize,\n\t\t\t\t\tversion: attribute.version\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\tconst data = buffers.get( attribute );\n\n\t\tif ( data === undefined ) {\n\n\t\t\tbuffers.set( attribute, createBuffer( attribute, bufferType ) );\n\n\t\t} else if ( data.version < attribute.version ) {\n\n\t\t\tupdateBuffer( data.buffer, attribute, bufferType );\n\n\t\t\tdata.version = attribute.version;\n\n\t\t}\n\n\t}\n\n\treturn {\n\n\t\tget: get,\n\t\tremove: remove,\n\t\tupdate: update\n\n\t};\n\n}\n\nclass PlaneGeometry extends BufferGeometry {\n\n\tconstructor( width = 1, height = 1, widthSegments = 1, heightSegments = 1 ) {\n\n\t\tsuper();\n\t\tthis.type = 'PlaneGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments\n\t\t};\n\n\t\tconst width_half = width / 2;\n\t\tconst height_half = height / 2;\n\n\t\tconst gridX = Math.floor( widthSegments );\n\t\tconst gridY = Math.floor( heightSegments );\n\n\t\tconst gridX1 = gridX + 1;\n\t\tconst gridY1 = gridY + 1;\n\n\t\tconst segment_width = width / gridX;\n\t\tconst segment_height = height / gridY;\n\n\t\t//\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\tfor ( let iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\tconst y = iy * segment_height - height_half;\n\n\t\t\tfor ( let ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\tconst x = ix * segment_width - width_half;\n\n\t\t\t\tvertices.push( x, - y, 0 );\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( let iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\tfor ( let ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\tconst a = ix + gridX1 * iy;\n\t\t\t\tconst b = ix + gridX1 * ( iy + 1 );\n\t\t\t\tconst c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\tconst d = ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new PlaneGeometry( data.width, data.height, data.widthSegments, data.heightSegments );\n\n\t}\n\n}\n\nvar alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\";\n\nvar alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\nvar alphatest_fragment = \"#ifdef USE_ALPHATEST\\n\\tif ( diffuseColor.a < alphaTest ) discard;\\n#endif\";\n\nvar alphatest_pars_fragment = \"#ifdef USE_ALPHATEST\\n\\tuniform float alphaTest;\\n#endif\";\n\nvar aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\\n\\t#endif\\n#endif\";\n\nvar aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\nvar begin_vertex = \"vec3 transformed = vec3( position );\";\n\nvar beginnormal_vertex = \"vec3 objectNormal = vec3( normal );\\n#ifdef USE_TANGENT\\n\\tvec3 objectTangent = vec3( tangent.xyz );\\n#endif\";\n\nvar bsdfs = \"vec3 BRDF_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\\n\\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\\n\\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\\n}\\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( lightDir + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, lightDir ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\\n\\tvec3 F = F_Schlick( f0, f90, dotVH );\\n\\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( V * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( lightDir + viewDir );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\n#if defined( USE_SHEEN )\\nfloat D_Charlie( float roughness, float dotNH ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tfloat invAlpha = 1.0 / alpha;\\n\\tfloat cos2h = dotNH * dotNH;\\n\\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\\n\\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\\n}\\nfloat V_Neubelt( float dotNV, float dotNL ) {\\n\\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\\n}\\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\\n\\tvec3 halfDir = normalize( lightDir + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, lightDir ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat D = D_Charlie( sheenRoughness, dotNH );\\n\\tfloat V = V_Neubelt( dotNV, dotNL );\\n\\treturn sheenColor * ( D * V );\\n}\\n#endif\";\n\nvar bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\";\n\nvar clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\tplane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t\\tif ( clipped ) discard;\\n\\t#endif\\n#endif\";\n\nvar clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\";\n\nvar clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n#endif\";\n\nvar clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvClipPosition = - mvPosition.xyz;\\n#endif\";\n\nvar color_fragment = \"#if defined( USE_COLOR_ALPHA )\\n\\tdiffuseColor *= vColor;\\n#elif defined( USE_COLOR )\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\nvar color_pars_fragment = \"#if defined( USE_COLOR_ALPHA )\\n\\tvarying vec4 vColor;\\n#elif defined( USE_COLOR )\\n\\tvarying vec3 vColor;\\n#endif\";\n\nvar color_pars_vertex = \"#if defined( USE_COLOR_ALPHA )\\n\\tvarying vec4 vColor;\\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvarying vec3 vColor;\\n#endif\";\n\nvar color_vertex = \"#if defined( USE_COLOR_ALPHA )\\n\\tvColor = vec4( 1.0 );\\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvColor = vec3( 1.0 );\\n#endif\\n#ifdef USE_COLOR\\n\\tvColor *= color;\\n#endif\\n#ifdef USE_INSTANCING_COLOR\\n\\tvColor.xyz *= instanceColor.xyz;\\n#endif\";\n\nvar common = \"#define PI 3.141592653589793\\n#define PI2 6.283185307179586\\n#define PI_HALF 1.5707963267948966\\n#define RECIPROCAL_PI 0.3183098861837907\\n#define RECIPROCAL_PI2 0.15915494309189535\\n#define EPSILON 1e-6\\n#ifndef saturate\\n#define saturate( a ) clamp( a, 0.0, 1.0 )\\n#endif\\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract( sin( sn ) * c );\\n}\\n#ifdef HIGH_PRECISION\\n\\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\\n#else\\n\\tfloat precisionSafeLength( vec3 v ) {\\n\\t\\tfloat maxComponent = max3( abs( v ) );\\n\\t\\treturn length( v / maxComponent ) * maxComponent;\\n\\t}\\n#endif\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n#ifdef USE_CLEARCOAT\\n\\tvec3 clearcoatNormal;\\n#endif\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\n\\treturn dot( weights, color.rgb );\\n}\\nbool isPerspectiveMatrix( mat4 m ) {\\n\\treturn m[ 2 ][ 3 ] == - 1.0;\\n}\\nvec2 equirectUv( in vec3 dir ) {\\n\\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\treturn vec2( u, v );\\n}\";\n\nvar cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n\\t#define cubeUV_maxMipLevel 8.0\\n\\t#define cubeUV_minMipLevel 4.0\\n\\t#define cubeUV_maxTileSize 256.0\\n\\t#define cubeUV_minTileSize 16.0\\n\\tfloat getFace( vec3 direction ) {\\n\\t\\tvec3 absDirection = abs( direction );\\n\\t\\tfloat face = - 1.0;\\n\\t\\tif ( absDirection.x > absDirection.z ) {\\n\\t\\t\\tif ( absDirection.x > absDirection.y )\\n\\t\\t\\t\\tface = direction.x > 0.0 ? 0.0 : 3.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t} else {\\n\\t\\t\\tif ( absDirection.z > absDirection.y )\\n\\t\\t\\t\\tface = direction.z > 0.0 ? 2.0 : 5.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t}\\n\\t\\treturn face;\\n\\t}\\n\\tvec2 getUV( vec3 direction, float face ) {\\n\\t\\tvec2 uv;\\n\\t\\tif ( face == 0.0 ) {\\n\\t\\t\\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 1.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\\n\\t\\t} else if ( face == 2.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\\n\\t\\t} else if ( face == 3.0 ) {\\n\\t\\t\\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 4.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\\n\\t\\t} else {\\n\\t\\t\\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\\n\\t\\t}\\n\\t\\treturn 0.5 * ( uv + 1.0 );\\n\\t}\\n\\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\\n\\t\\tfloat face = getFace( direction );\\n\\t\\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\\n\\t\\tmipInt = max( mipInt, cubeUV_minMipLevel );\\n\\t\\tfloat faceSize = exp2( mipInt );\\n\\t\\tfloat texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\\n\\t\\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );\\n\\t\\tvec2 f = fract( uv );\\n\\t\\tuv += 0.5 - f;\\n\\t\\tif ( face > 2.0 ) {\\n\\t\\t\\tuv.y += faceSize;\\n\\t\\t\\tface -= 3.0;\\n\\t\\t}\\n\\t\\tuv.x += face * faceSize;\\n\\t\\tif ( mipInt < cubeUV_maxMipLevel ) {\\n\\t\\t\\tuv.y += 2.0 * cubeUV_maxTileSize;\\n\\t\\t}\\n\\t\\tuv.y += filterInt * 2.0 * cubeUV_minTileSize;\\n\\t\\tuv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\\n\\t\\tuv *= texelSize;\\n\\t\\tvec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.x += texelSize;\\n\\t\\tvec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.y += texelSize;\\n\\t\\tvec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.x -= texelSize;\\n\\t\\tvec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tvec3 tm = mix( tl, tr, f.x );\\n\\t\\tvec3 bm = mix( bl, br, f.x );\\n\\t\\treturn mix( tm, bm, f.y );\\n\\t}\\n\\t#define r0 1.0\\n\\t#define v0 0.339\\n\\t#define m0 - 2.0\\n\\t#define r1 0.8\\n\\t#define v1 0.276\\n\\t#define m1 - 1.0\\n\\t#define r4 0.4\\n\\t#define v4 0.046\\n\\t#define m4 2.0\\n\\t#define r5 0.305\\n\\t#define v5 0.016\\n\\t#define m5 3.0\\n\\t#define r6 0.21\\n\\t#define v6 0.0038\\n\\t#define m6 4.0\\n\\tfloat roughnessToMip( float roughness ) {\\n\\t\\tfloat mip = 0.0;\\n\\t\\tif ( roughness >= r1 ) {\\n\\t\\t\\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\\n\\t\\t} else if ( roughness >= r4 ) {\\n\\t\\t\\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\\n\\t\\t} else if ( roughness >= r5 ) {\\n\\t\\t\\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\\n\\t\\t} else if ( roughness >= r6 ) {\\n\\t\\t\\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\\n\\t\\t} else {\\n\\t\\t\\tmip = - 2.0 * log2( 1.16 * roughness );\\t\\t}\\n\\t\\treturn mip;\\n\\t}\\n\\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\\n\\t\\tfloat mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\\n\\t\\tfloat mipF = fract( mip );\\n\\t\\tfloat mipInt = floor( mip );\\n\\t\\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\\n\\t\\tif ( mipF == 0.0 ) {\\n\\t\\t\\treturn vec4( color0, 1.0 );\\n\\t\\t} else {\\n\\t\\t\\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\\n\\t\\t\\treturn vec4( mix( color0, color1, mipF ), 1.0 );\\n\\t\\t}\\n\\t}\\n#endif\";\n\nvar defaultnormal_vertex = \"vec3 transformedNormal = objectNormal;\\n#ifdef USE_INSTANCING\\n\\tmat3 m = mat3( instanceMatrix );\\n\\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\\n\\ttransformedNormal = m * transformedNormal;\\n#endif\\ntransformedNormal = normalMatrix * transformedNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n#ifdef USE_TANGENT\\n\\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#ifdef FLIP_SIDED\\n\\t\\ttransformedTangent = - transformedTangent;\\n\\t#endif\\n#endif\";\n\nvar displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\";\n\nvar displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\\n#endif\";\n\nvar emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\";\n\nvar emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\";\n\nvar encodings_fragment = \"gl_FragColor = linearToOutputTexel( gl_FragColor );\";\n\nvar encodings_pars_fragment = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat D = max( maxRange / maxRGB, 1.0 );\\n\\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\";\n\nvar envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvec3 cameraToFrag;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\";\n\nvar envmap_common_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float envMapIntensity;\\n\\tuniform float flipEnvMap;\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\t\\n#endif\";\n\nvar envmap_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float reflectivity;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\";\n\nvar envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\t\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\";\n\nvar envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\nvar fog_vertex = \"#ifdef USE_FOG\\n\\tvFogDepth = - mvPosition.z;\\n#endif\";\n\nvar fog_pars_vertex = \"#ifdef USE_FOG\\n\\tvarying float vFogDepth;\\n#endif\";\n\nvar fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\";\n\nvar fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float vFogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";\n\nvar gradientmap_pars_fragment = \"#ifdef USE_GRADIENTMAP\\n\\tuniform sampler2D gradientMap;\\n#endif\\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\tfloat dotNL = dot( normal, lightDirection );\\n\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t#ifdef USE_GRADIENTMAP\\n\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t#else\\n\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t#endif\\n}\";\n\nvar lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\\n\\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tlightMapIrradiance *= PI;\\n\\t#endif\\n\\treflectedLight.indirectDiffuse += lightMapIrradiance;\\n#endif\";\n\nvar lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\nvar lights_lambert_vertex = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\nvIndirectFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n\\tvIndirectBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry.normal );\\n#ifdef DOUBLE_SIDED\\n\\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\\n\\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry.normal );\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointLightInfo( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotLightInfo( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalLightInfo( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry.normal );\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\";\n\nvar lights_pars_begin = \"uniform bool receiveShadow;\\nuniform vec3 ambientLightColor;\\nuniform vec3 lightProbe[ 9 ];\\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\\n\\tfloat x = normal.x, y = normal.y, z = normal.z;\\n\\tvec3 result = shCoefficients[ 0 ] * 0.886227;\\n\\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\\n\\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\\n\\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\\n\\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\\n\\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\\n\\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\\n\\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\\n\\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\\n\\treturn result;\\n}\\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\\n\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\\n\\treturn irradiance;\\n}\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\treturn irradiance;\\n}\\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\\t#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\t\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\t\\tif ( cutoffDistance > 0.0 ) {\\n\\t\\t\\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t\\t}\\n\\t\\treturn distanceFalloff;\\n\\t#else\\n\\t\\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\\n\\t\\t\\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n\\t\\t}\\n\\t\\treturn 1.0;\\n\\t#endif\\n}\\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\\n\\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\\n\\t\\tlight.color = directionalLight.color;\\n\\t\\tlight.direction = directionalLight.direction;\\n\\t\\tlight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tlight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tlight.color = pointLight.color;\\n\\t\\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tlight.visible = ( light.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tlight.direction = normalize( lVector );\\n\\t\\tfloat angleCos = dot( light.direction, spotLight.direction );\\n\\t\\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\tif ( spotAttenuation > 0.0 ) {\\n\\t\\t\\tfloat lightDistance = length( lVector );\\n\\t\\t\\tlight.color = spotLight.color * spotAttenuation;\\n\\t\\t\\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tlight.visible = ( light.color != vec3( 0.0 ) );\\n\\t\\t} else {\\n\\t\\t\\tlight.color = vec3( 0.0 );\\n\\t\\t\\tlight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\\n\\t\\tfloat dotNL = dot( normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\";\n\nvar envmap_physical_pars_fragment = \"#if defined( USE_ENVMAP )\\n\\t#ifdef ENVMAP_MODE_REFRACTION\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n\\tvec3 getIBLIrradiance( const in vec3 normal ) {\\n\\t\\t#if defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\\n\\t\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t\\t#else\\n\\t\\t\\treturn vec3( 0.0 );\\n\\t\\t#endif\\n\\t}\\n\\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\\n\\t\\t#if defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 reflectVec;\\n\\t\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\t\\treflectVec = reflect( - viewDir, normal );\\n\\t\\t\\t\\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\treflectVec = refract( - viewDir, normal, refractionRatio );\\n\\t\\t\\t#endif\\n\\t\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\\n\\t\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t\\t#else\\n\\t\\t\\treturn vec3( 0.0 );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\nvar lights_toon_fragment = \"ToonMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\";\n\nvar lights_toon_pars_fragment = \"varying vec3 vViewPosition;\\nstruct ToonMaterial {\\n\\tvec3 diffuseColor;\\n};\\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Toon\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Toon\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\nvar lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\";\n\nvar lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\nstruct BlinnPhongMaterial {\\n\\tvec3 diffuseColor;\\n\\tvec3 specularColor;\\n\\tfloat specularShininess;\\n\\tfloat specularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\";\n\nvar lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\\nmaterial.roughness = min( material.roughness, 1.0 );\\n#ifdef IOR\\n\\t#ifdef SPECULAR\\n\\t\\tfloat specularIntensityFactor = specularIntensity;\\n\\t\\tvec3 specularColorFactor = specularColor;\\n\\t\\t#ifdef USE_SPECULARINTENSITYMAP\\n\\t\\t\\tspecularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;\\n\\t\\t#endif\\n\\t\\t#ifdef USE_SPECULARCOLORMAP\\n\\t\\t\\tspecularColorFactor *= specularColorMapTexelToLinear( texture2D( specularColorMap, vUv ) ).rgb;\\n\\t\\t#endif\\n\\t\\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\\n\\t#else\\n\\t\\tfloat specularIntensityFactor = 1.0;\\n\\t\\tvec3 specularColorFactor = vec3( 1.0 );\\n\\t\\tmaterial.specularF90 = 1.0;\\n\\t#endif\\n\\tmaterial.specularColor = mix( min( pow2( ( ior - 1.0 ) / ( ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\\n\\tmaterial.specularF90 = 1.0;\\n#endif\\n#ifdef USE_CLEARCOAT\\n\\tmaterial.clearcoat = clearcoat;\\n\\tmaterial.clearcoatRoughness = clearcoatRoughness;\\n\\tmaterial.clearcoatF0 = vec3( 0.04 );\\n\\tmaterial.clearcoatF90 = 1.0;\\n\\t#ifdef USE_CLEARCOATMAP\\n\\t\\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\\n\\t#endif\\n\\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\t\\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\\n\\t#endif\\n\\tmaterial.clearcoat = saturate( material.clearcoat );\\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\\n\\tmaterial.clearcoatRoughness += geometryRoughness;\\n\\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\\n#endif\\n#ifdef USE_SHEEN\\n\\tmaterial.sheenColor = sheenColor;\\n\\t#ifdef USE_SHEENCOLORMAP\\n\\t\\tmaterial.sheenColor *= sheenColorMapTexelToLinear( texture2D( sheenColorMap, vUv ) ).rgb;\\n\\t#endif\\n\\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\\n\\t#ifdef USE_SHEENROUGHNESSMAP\\n\\t\\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;\\n\\t#endif\\n#endif\";\n\nvar lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3 diffuseColor;\\n\\tfloat roughness;\\n\\tvec3 specularColor;\\n\\tfloat specularF90;\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tfloat clearcoat;\\n\\t\\tfloat clearcoatRoughness;\\n\\t\\tvec3 clearcoatF0;\\n\\t\\tfloat clearcoatF90;\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\tvec3 sheenColor;\\n\\t\\tfloat sheenRoughness;\\n\\t#endif\\n};\\nvec3 clearcoatSpecular = vec3( 0.0 );\\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\\n\\treturn fab;\\n}\\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\\n\\tvec2 fab = DFGApprox( normal, viewDir, roughness );\\n\\treturn specularColor * fab.x + specularF90 * fab.y;\\n}\\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\n\\tvec2 fab = DFGApprox( normal, viewDir, roughness );\\n\\tvec3 FssEss = specularColor * fab.x + specularF90 * fab.y;\\n\\tfloat Ess = fab.x + fab.y;\\n\\tfloat Ems = 1.0 - Ess;\\n\\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\\n\\tsingleScatter += FssEss;\\n\\tmultiScatter += Fms * Ems;\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.roughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(    0, 1,    0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tfloat dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\\n\\t\\tvec3 ccIrradiance = dotNLcc * directLight.color;\\n\\t\\tclearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\treflectedLight.directSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );\\n\\t#endif\\n\\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tclearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\\n\\t#endif\\n\\tvec3 singleScattering = vec3( 0.0 );\\n\\tvec3 multiScattering = vec3( 0.0 );\\n\\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\\n\\tcomputeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\\n\\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\\n\\treflectedLight.indirectSpecular += radiance * singleScattering;\\n\\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\\n\\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\";\n\nvar lights_fragment_begin = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\\n#ifdef USE_CLEARCOAT\\n\\tgeometry.clearcoatNormal = clearcoatNormal;\\n#endif\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointLightInfo( pointLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\\n\\t\\tpointLightShadow = pointLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotLightInfo( spotLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\tspotLightShadow = spotLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalLightInfo( directionalLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\\n\\t\\tdirectionalLightShadow = directionalLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 iblIrradiance = vec3( 0.0 );\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\tirradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tvec3 radiance = vec3( 0.0 );\\n\\tvec3 clearcoatRadiance = vec3( 0.0 );\\n#endif\";\n\nvar lights_fragment_maps = \"#if defined( RE_IndirectDiffuse )\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\\n\\t\\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tiblIrradiance += getIBLIrradiance( geometry.normal );\\n\\t#endif\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tradiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tclearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\\n\\t#endif\\n#endif\";\n\nvar lights_fragment_end = \"#if defined( RE_IndirectDiffuse )\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\\n#endif\";\n\nvar logdepthbuf_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\";\n\nvar logdepthbuf_pars_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tuniform float logDepthBufFC;\\n\\tvarying float vFragDepth;\\n\\tvarying float vIsPerspective;\\n#endif\";\n\nvar logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t\\tvarying float vIsPerspective;\\n\\t#else\\n\\t\\tuniform float logDepthBufFC;\\n\\t#endif\\n#endif\";\n\nvar logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t\\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\\n\\t#else\\n\\t\\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\\n\\t\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\t\\tgl_Position.z *= gl_Position.w;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\nvar map_fragment = \"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\";\n\nvar map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\";\n\nvar map_particle_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n#endif\\n#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, uv );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\\n#endif\";\n\nvar map_particle_pars_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tuniform mat3 uvTransform;\\n#endif\\n#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\nvar metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\";\n\nvar metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\nvar morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal *= morphTargetBaseInfluence;\\n\\t#ifdef MORPHTARGETS_TEXTURE\\n\\t\\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\\n\\t\\t\\tif ( morphTargetInfluences[ i ] > 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1, 2 ) * morphTargetInfluences[ i ];\\n\\t\\t}\\n\\t#else\\n\\t\\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\\n\\t\\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\\n\\t\\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\\n\\t\\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\\n\\t#endif\\n#endif\";\n\nvar morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\tuniform float morphTargetBaseInfluence;\\n\\t#ifdef MORPHTARGETS_TEXTURE\\n\\t\\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\\n\\t\\tuniform sampler2DArray morphTargetsTexture;\\n\\t\\tuniform vec2 morphTargetsTextureSize;\\n\\t\\tvec3 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset, const in int stride ) {\\n\\t\\t\\tfloat texelIndex = float( vertexIndex * stride + offset );\\n\\t\\t\\tfloat y = floor( texelIndex / morphTargetsTextureSize.x );\\n\\t\\t\\tfloat x = texelIndex - y * morphTargetsTextureSize.x;\\n\\t\\t\\tvec3 morphUV = vec3( ( x + 0.5 ) / morphTargetsTextureSize.x, y / morphTargetsTextureSize.y, morphTargetIndex );\\n\\t\\t\\treturn texture( morphTargetsTexture, morphUV ).xyz;\\n\\t\\t}\\n\\t#else\\n\\t\\t#ifndef USE_MORPHNORMALS\\n\\t\\t\\tuniform float morphTargetInfluences[ 8 ];\\n\\t\\t#else\\n\\t\\t\\tuniform float morphTargetInfluences[ 4 ];\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\nvar morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed *= morphTargetBaseInfluence;\\n\\t#ifdef MORPHTARGETS_TEXTURE\\n\\t\\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\\n\\t\\t\\t#ifndef USE_MORPHNORMALS\\n\\t\\t\\t\\tif ( morphTargetInfluences[ i ] > 0.0 ) transformed += getMorph( gl_VertexID, i, 0, 1 ) * morphTargetInfluences[ i ];\\n\\t\\t\\t#else\\n\\t\\t\\t\\tif ( morphTargetInfluences[ i ] > 0.0 ) transformed += getMorph( gl_VertexID, i, 0, 2 ) * morphTargetInfluences[ i ];\\n\\t\\t\\t#endif\\n\\t\\t}\\n\\t#else\\n\\t\\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\\n\\t\\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\\n\\t\\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\\n\\t\\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\\n\\t\\t#ifndef USE_MORPHNORMALS\\n\\t\\t\\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\\n\\t\\t\\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\\n\\t\\t\\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\\n\\t\\t\\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\nvar normal_fragment_begin = \"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\\n#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * faceDirection;\\n\\t#endif\\n\\t#ifdef USE_TANGENT\\n\\t\\tvec3 tangent = normalize( vTangent );\\n\\t\\tvec3 bitangent = normalize( vBitangent );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\ttangent = tangent * faceDirection;\\n\\t\\t\\tbitangent = bitangent * faceDirection;\\n\\t\\t#endif\\n\\t\\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\\n\\t\\t\\tmat3 vTBN = mat3( tangent, bitangent, normal );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\nvec3 geometryNormal = normal;\";\n\nvar normal_fragment_maps = \"#ifdef OBJECTSPACE_NORMALMAP\\n\\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t#ifdef FLIP_SIDED\\n\\t\\tnormal = - normal;\\n\\t#endif\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * faceDirection;\\n\\t#endif\\n\\tnormal = normalize( normalMatrix * normal );\\n#elif defined( TANGENTSPACE_NORMALMAP )\\n\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tmapN.xy *= normalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tnormal = normalize( vTBN * mapN );\\n\\t#else\\n\\t\\tnormal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );\\n\\t#endif\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\\n#endif\";\n\nvar normal_pars_fragment = \"#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\";\n\nvar normal_pars_vertex = \"#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\";\n\nvar normal_vertex = \"#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\";\n\nvar normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n#endif\\n#ifdef OBJECTSPACE_NORMALMAP\\n\\tuniform mat3 normalMatrix;\\n#endif\\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tvec3 N = surf_norm;\\n\\t\\tvec3 q1perp = cross( q1, N );\\n\\t\\tvec3 q0perp = cross( N, q0 );\\n\\t\\tvec3 T = q1perp * st0.x + q0perp * st1.x;\\n\\t\\tvec3 B = q1perp * st0.y + q0perp * st1.y;\\n\\t\\tfloat det = max( dot( T, T ), dot( B, B ) );\\n\\t\\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\\n\\t\\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\\n\\t}\\n#endif\";\n\nvar clearcoat_normal_fragment_begin = \"#ifdef USE_CLEARCOAT\\n\\tvec3 clearcoatNormal = geometryNormal;\\n#endif\";\n\nvar clearcoat_normal_fragment_maps = \"#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tclearcoatMapN.xy *= clearcoatNormalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\\n\\t#else\\n\\t\\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\\n\\t#endif\\n#endif\";\n\nvar clearcoat_pars_fragment = \"#ifdef USE_CLEARCOATMAP\\n\\tuniform sampler2D clearcoatMap;\\n#endif\\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\tuniform sampler2D clearcoatRoughnessMap;\\n#endif\\n#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tuniform sampler2D clearcoatNormalMap;\\n\\tuniform vec2 clearcoatNormalScale;\\n#endif\";\n\nvar output_fragment = \"#ifdef OPAQUE\\ndiffuseColor.a = 1.0;\\n#endif\\n#ifdef USE_TRANSMISSION\\ndiffuseColor.a *= transmissionAlpha + 0.1;\\n#endif\\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );\";\n\nvar packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nvec4 pack2HalfToRGBA( vec2 v ) {\\n\\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\\n\\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\\n}\\nvec2 unpackRGBATo2Half( vec4 v ) {\\n\\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\";\n\nvar premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\";\n\nvar project_vertex = \"vec4 mvPosition = vec4( transformed, 1.0 );\\n#ifdef USE_INSTANCING\\n\\tmvPosition = instanceMatrix * mvPosition;\\n#endif\\nmvPosition = modelViewMatrix * mvPosition;\\ngl_Position = projectionMatrix * mvPosition;\";\n\nvar dithering_fragment = \"#ifdef DITHERING\\n\\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\";\n\nvar dithering_pars_fragment = \"#ifdef DITHERING\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\";\n\nvar roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\";\n\nvar roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\nvar shadowmap_pars_fragment = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\\n\\t\\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\\n\\t}\\n\\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\\n\\t\\tfloat occlusion = 1.0;\\n\\t\\tvec2 distribution = texture2DDistribution( shadow, uv );\\n\\t\\tfloat hard_shadow = step( compare , distribution.x );\\n\\t\\tif (hard_shadow != 1.0 ) {\\n\\t\\t\\tfloat distance = compare - distribution.x ;\\n\\t\\t\\tfloat variance = max( 0.00000, distribution.y * distribution.y );\\n\\t\\t\\tfloat softness_probability = variance / (variance + distance * distance );\\t\\t\\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\\t\\t\\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\\n\\t\\t}\\n\\t\\treturn occlusion;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx2 = dx0 / 2.0;\\n\\t\\t\\tfloat dy2 = dy0 / 2.0;\\n\\t\\t\\tfloat dx3 = dx1 / 2.0;\\n\\t\\t\\tfloat dy3 = dy1 / 2.0;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 17.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx = texelSize.x;\\n\\t\\t\\tfloat dy = texelSize.y;\\n\\t\\t\\tvec2 uv = shadowCoord.xy;\\n\\t\\t\\tvec2 f = fract( uv * shadowMapSize + 0.5 );\\n\\t\\t\\tuv -= f * texelSize;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  f.x ),\\n\\t\\t\\t\\t\\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  f.x ),\\n\\t\\t\\t\\t\\t f.y )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\nvar shadowmap_pars_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n#endif\";\n\nvar shadowmap_vertex = \"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\tvec4 shadowWorldPosition;\\n\\t#endif\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\";\n\nvar shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tspotLight = spotLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tpointLight = pointLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\";\n\nvar skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\nvar skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform highp sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\nvar skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\";\n\nvar skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n\\t#ifdef USE_TANGENT\\n\\t\\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#endif\\n#endif\";\n\nvar specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\nvar specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\nvar tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n\\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\";\n\nvar tonemapping_pars_fragment = \"#ifndef saturate\\n#define saturate( a ) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\nvec3 RRTAndODTFit( vec3 v ) {\\n\\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\\n\\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\\n\\treturn a / b;\\n}\\nvec3 ACESFilmicToneMapping( vec3 color ) {\\n\\tconst mat3 ACESInputMat = mat3(\\n\\t\\tvec3( 0.59719, 0.07600, 0.02840 ),\\t\\tvec3( 0.35458, 0.90834, 0.13383 ),\\n\\t\\tvec3( 0.04823, 0.01566, 0.83777 )\\n\\t);\\n\\tconst mat3 ACESOutputMat = mat3(\\n\\t\\tvec3(  1.60475, -0.10208, -0.00327 ),\\t\\tvec3( -0.53108,  1.10813, -0.07276 ),\\n\\t\\tvec3( -0.07367, -0.00605,  1.07602 )\\n\\t);\\n\\tcolor *= toneMappingExposure / 0.6;\\n\\tcolor = ACESInputMat * color;\\n\\tcolor = RRTAndODTFit( color );\\n\\tcolor = ACESOutputMat * color;\\n\\treturn saturate( color );\\n}\\nvec3 CustomToneMapping( vec3 color ) { return color; }\";\n\nvar transmission_fragment = \"#ifdef USE_TRANSMISSION\\n\\tfloat transmissionAlpha = 1.0;\\n\\tfloat transmissionFactor = transmission;\\n\\tfloat thicknessFactor = thickness;\\n\\t#ifdef USE_TRANSMISSIONMAP\\n\\t\\ttransmissionFactor *= texture2D( transmissionMap, vUv ).r;\\n\\t#endif\\n\\t#ifdef USE_THICKNESSMAP\\n\\t\\tthicknessFactor *= texture2D( thicknessMap, vUv ).g;\\n\\t#endif\\n\\tvec3 pos = vWorldPosition;\\n\\tvec3 v = normalize( cameraPosition - pos );\\n\\tvec3 n = inverseTransformDirection( normal, viewMatrix );\\n\\tvec4 transmission = getIBLVolumeRefraction(\\n\\t\\tn, v, roughnessFactor, material.diffuseColor, material.specularColor, material.specularF90,\\n\\t\\tpos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,\\n\\t\\tattenuationColor, attenuationDistance );\\n\\ttotalDiffuse = mix( totalDiffuse, transmission.rgb, transmissionFactor );\\n\\ttransmissionAlpha = mix( transmissionAlpha, transmission.a, transmissionFactor );\\n#endif\";\n\nvar transmission_pars_fragment = \"#ifdef USE_TRANSMISSION\\n\\tuniform float transmission;\\n\\tuniform float thickness;\\n\\tuniform float attenuationDistance;\\n\\tuniform vec3 attenuationColor;\\n\\t#ifdef USE_TRANSMISSIONMAP\\n\\t\\tuniform sampler2D transmissionMap;\\n\\t#endif\\n\\t#ifdef USE_THICKNESSMAP\\n\\t\\tuniform sampler2D thicknessMap;\\n\\t#endif\\n\\tuniform vec2 transmissionSamplerSize;\\n\\tuniform sampler2D transmissionSamplerMap;\\n\\tuniform mat4 modelMatrix;\\n\\tuniform mat4 projectionMatrix;\\n\\tvarying vec3 vWorldPosition;\\n\\tvec3 getVolumeTransmissionRay( vec3 n, vec3 v, float thickness, float ior, mat4 modelMatrix ) {\\n\\t\\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\\n\\t\\tvec3 modelScale;\\n\\t\\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\\n\\t\\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\\n\\t\\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\\n\\t\\treturn normalize( refractionVector ) * thickness * modelScale;\\n\\t}\\n\\tfloat applyIorToRoughness( float roughness, float ior ) {\\n\\t\\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\\n\\t}\\n\\tvec4 getTransmissionSample( vec2 fragCoord, float roughness, float ior ) {\\n\\t\\tfloat framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\\n\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\treturn texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );\\n\\t\\t#else\\n\\t\\t\\treturn texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );\\n\\t\\t#endif\\n\\t}\\n\\tvec3 applyVolumeAttenuation( vec3 radiance, float transmissionDistance, vec3 attenuationColor, float attenuationDistance ) {\\n\\t\\tif ( attenuationDistance == 0.0 ) {\\n\\t\\t\\treturn radiance;\\n\\t\\t} else {\\n\\t\\t\\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\\n\\t\\t\\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\\t\\t\\treturn transmittance * radiance;\\n\\t\\t}\\n\\t}\\n\\tvec4 getIBLVolumeRefraction( vec3 n, vec3 v, float roughness, vec3 diffuseColor, vec3 specularColor, float specularF90,\\n\\t\\tvec3 position, mat4 modelMatrix, mat4 viewMatrix, mat4 projMatrix, float ior, float thickness,\\n\\t\\tvec3 attenuationColor, float attenuationDistance ) {\\n\\t\\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\\n\\t\\tvec3 refractedRayExit = position + transmissionRay;\\n\\t\\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\\n\\t\\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\\n\\t\\trefractionCoords += 1.0;\\n\\t\\trefractionCoords /= 2.0;\\n\\t\\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\\n\\t\\tvec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );\\n\\t\\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\\n\\t\\treturn vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );\\n\\t}\\n#endif\";\n\nvar uv_pars_fragment = \"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\\n\\tvarying vec2 vUv;\\n#endif\";\n\nvar uv_pars_vertex = \"#ifdef USE_UV\\n\\t#ifdef UVS_VERTEX_ONLY\\n\\t\\tvec2 vUv;\\n\\t#else\\n\\t\\tvarying vec2 vUv;\\n\\t#endif\\n\\tuniform mat3 uvTransform;\\n#endif\";\n\nvar uv_vertex = \"#ifdef USE_UV\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n#endif\";\n\nvar uv2_pars_fragment = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\";\n\nvar uv2_pars_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n\\tuniform mat3 uv2Transform;\\n#endif\";\n\nvar uv2_vertex = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\\n#endif\";\n\nvar worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )\\n\\tvec4 worldPosition = vec4( transformed, 1.0 );\\n\\t#ifdef USE_INSTANCING\\n\\t\\tworldPosition = instanceMatrix * worldPosition;\\n\\t#endif\\n\\tworldPosition = modelMatrix * worldPosition;\\n#endif\";\n\nconst vertex$g = \"varying vec2 vUv;\\nuniform mat3 uvTransform;\\nvoid main() {\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n\\tgl_Position = vec4( position.xy, 1.0, 1.0 );\\n}\";\n\nconst fragment$g = \"uniform sampler2D t2D;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec4 texColor = texture2D( t2D, vUv );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\nconst vertex$f = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\";\n\nconst fragment$f = \"#include <envmap_common_pars_fragment>\\nuniform float opacity;\\nvarying vec3 vWorldDirection;\\n#include <cube_uv_reflection_fragment>\\nvoid main() {\\n\\tvec3 vReflect = vWorldDirection;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = envColor;\\n\\tgl_FragColor.a *= opacity;\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\nconst vertex$e = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvHighPrecisionZW = gl_Position.zw;\\n}\";\n\nconst fragment$e = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( fragCoordZ );\\n\\t#endif\\n}\";\n\nconst vertex$d = \"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\";\n\nconst fragment$d = \"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\";\n\nconst vertex$c = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\";\n\nconst fragment$c = \"uniform sampler2D tEquirect;\\nvarying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldDirection );\\n\\tvec2 sampleUV = equirectUv( direction );\\n\\tvec4 texColor = texture2D( tEquirect, sampleUV );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\";\n\nconst vertex$b = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvLineDistance = scale * lineDistance;\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$b = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\nconst vertex$a = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinbase_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$a = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$9 = \"#define LAMBERT\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$9 = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vIndirectFront;\\n\\t#endif\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$8 = \"#define MATCAP\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <color_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n}\";\n\nconst fragment$8 = \"#define MATCAP\\nuniform vec3 diffuse;\\nuniform float opacity;\\nuniform sampler2D matcap;\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <normal_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tvec3 viewDir = normalize( vViewPosition );\\n\\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\\n\\tvec3 y = cross( viewDir, x );\\n\\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\\n\\t#ifdef USE_MATCAP\\n\\t\\tvec4 matcapColor = texture2D( matcap, uv );\\n\\t\\tmatcapColor = matcapTexelToLinear( matcapColor );\\n\\t#else\\n\\t\\tvec4 matcapColor = vec4( 1.0 );\\n\\t#endif\\n\\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$7 = \"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\";\n\nconst fragment$7 = \"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <normal_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}\";\n\nconst vertex$6 = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$6 = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <normal_pars_fragment>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$5 = \"#define STANDARD\\nvarying vec3 vViewPosition;\\n#ifdef USE_TRANSMISSION\\n\\tvarying vec3 vWorldPosition;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n#ifdef USE_TRANSMISSION\\n\\tvWorldPosition = worldPosition.xyz;\\n#endif\\n}\";\n\nconst fragment$5 = \"#define STANDARD\\n#ifdef PHYSICAL\\n\\t#define IOR\\n\\t#define SPECULAR\\n#endif\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifdef IOR\\n\\tuniform float ior;\\n#endif\\n#ifdef SPECULAR\\n\\tuniform float specularIntensity;\\n\\tuniform vec3 specularColor;\\n\\t#ifdef USE_SPECULARINTENSITYMAP\\n\\t\\tuniform sampler2D specularIntensityMap;\\n\\t#endif\\n\\t#ifdef USE_SPECULARCOLORMAP\\n\\t\\tuniform sampler2D specularColorMap;\\n\\t#endif\\n#endif\\n#ifdef USE_CLEARCOAT\\n\\tuniform float clearcoat;\\n\\tuniform float clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tuniform vec3 sheenColor;\\n\\tuniform float sheenRoughness;\\n\\t#ifdef USE_SHEENCOLORMAP\\n\\t\\tuniform sampler2D sheenColorMap;\\n\\t#endif\\n\\t#ifdef USE_SHEENROUGHNESSMAP\\n\\t\\tuniform sampler2D sheenRoughnessMap;\\n\\t#endif\\n#endif\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_physical_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <lights_pars_begin>\\n#include <normal_pars_fragment>\\n#include <lights_physical_pars_fragment>\\n#include <transmission_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <clearcoat_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <clearcoat_normal_fragment_begin>\\n\\t#include <clearcoat_normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\\n\\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\\n\\t#include <transmission_fragment>\\n\\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tfloat dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\\n\\t\\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\\n\\t\\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;\\n\\t#endif\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$4 = \"#define TOON\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$4 = \"#define TOON\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <normal_pars_fragment>\\n#include <lights_toon_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_toon_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$3 = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\tgl_PointSize = size;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$3 = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\nconst vertex$2 = \"#include <common>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$2 = \"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\nconst vertex$1 = \"uniform float rotation;\\nuniform vec2 center;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\tvec2 scale;\\n\\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\\n\\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\\n\\t#ifndef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) scale *= - mvPosition.z;\\n\\t#endif\\n\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\n\\tvec2 rotatedPosition;\\n\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\n\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\n\\tmvPosition.xy += rotatedPosition;\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$1 = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\nconst ShaderChunk = {\n\talphamap_fragment: alphamap_fragment,\n\talphamap_pars_fragment: alphamap_pars_fragment,\n\talphatest_fragment: alphatest_fragment,\n\talphatest_pars_fragment: alphatest_pars_fragment,\n\taomap_fragment: aomap_fragment,\n\taomap_pars_fragment: aomap_pars_fragment,\n\tbegin_vertex: begin_vertex,\n\tbeginnormal_vertex: beginnormal_vertex,\n\tbsdfs: bsdfs,\n\tbumpmap_pars_fragment: bumpmap_pars_fragment,\n\tclipping_planes_fragment: clipping_planes_fragment,\n\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n\tclipping_planes_vertex: clipping_planes_vertex,\n\tcolor_fragment: color_fragment,\n\tcolor_pars_fragment: color_pars_fragment,\n\tcolor_pars_vertex: color_pars_vertex,\n\tcolor_vertex: color_vertex,\n\tcommon: common,\n\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n\tdefaultnormal_vertex: defaultnormal_vertex,\n\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n\tdisplacementmap_vertex: displacementmap_vertex,\n\temissivemap_fragment: emissivemap_fragment,\n\temissivemap_pars_fragment: emissivemap_pars_fragment,\n\tencodings_fragment: encodings_fragment,\n\tencodings_pars_fragment: encodings_pars_fragment,\n\tenvmap_fragment: envmap_fragment,\n\tenvmap_common_pars_fragment: envmap_common_pars_fragment,\n\tenvmap_pars_fragment: envmap_pars_fragment,\n\tenvmap_pars_vertex: envmap_pars_vertex,\n\tenvmap_physical_pars_fragment: envmap_physical_pars_fragment,\n\tenvmap_vertex: envmap_vertex,\n\tfog_vertex: fog_vertex,\n\tfog_pars_vertex: fog_pars_vertex,\n\tfog_fragment: fog_fragment,\n\tfog_pars_fragment: fog_pars_fragment,\n\tgradientmap_pars_fragment: gradientmap_pars_fragment,\n\tlightmap_fragment: lightmap_fragment,\n\tlightmap_pars_fragment: lightmap_pars_fragment,\n\tlights_lambert_vertex: lights_lambert_vertex,\n\tlights_pars_begin: lights_pars_begin,\n\tlights_toon_fragment: lights_toon_fragment,\n\tlights_toon_pars_fragment: lights_toon_pars_fragment,\n\tlights_phong_fragment: lights_phong_fragment,\n\tlights_phong_pars_fragment: lights_phong_pars_fragment,\n\tlights_physical_fragment: lights_physical_fragment,\n\tlights_physical_pars_fragment: lights_physical_pars_fragment,\n\tlights_fragment_begin: lights_fragment_begin,\n\tlights_fragment_maps: lights_fragment_maps,\n\tlights_fragment_end: lights_fragment_end,\n\tlogdepthbuf_fragment: logdepthbuf_fragment,\n\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n\tlogdepthbuf_vertex: logdepthbuf_vertex,\n\tmap_fragment: map_fragment,\n\tmap_pars_fragment: map_pars_fragment,\n\tmap_particle_fragment: map_particle_fragment,\n\tmap_particle_pars_fragment: map_particle_pars_fragment,\n\tmetalnessmap_fragment: metalnessmap_fragment,\n\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n\tmorphnormal_vertex: morphnormal_vertex,\n\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n\tmorphtarget_vertex: morphtarget_vertex,\n\tnormal_fragment_begin: normal_fragment_begin,\n\tnormal_fragment_maps: normal_fragment_maps,\n\tnormal_pars_fragment: normal_pars_fragment,\n\tnormal_pars_vertex: normal_pars_vertex,\n\tnormal_vertex: normal_vertex,\n\tnormalmap_pars_fragment: normalmap_pars_fragment,\n\tclearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,\n\tclearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,\n\tclearcoat_pars_fragment: clearcoat_pars_fragment,\n\toutput_fragment: output_fragment,\n\tpacking: packing,\n\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n\tproject_vertex: project_vertex,\n\tdithering_fragment: dithering_fragment,\n\tdithering_pars_fragment: dithering_pars_fragment,\n\troughnessmap_fragment: roughnessmap_fragment,\n\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n\tshadowmap_pars_fragment: shadowmap_pars_fragment,\n\tshadowmap_pars_vertex: shadowmap_pars_vertex,\n\tshadowmap_vertex: shadowmap_vertex,\n\tshadowmask_pars_fragment: shadowmask_pars_fragment,\n\tskinbase_vertex: skinbase_vertex,\n\tskinning_pars_vertex: skinning_pars_vertex,\n\tskinning_vertex: skinning_vertex,\n\tskinnormal_vertex: skinnormal_vertex,\n\tspecularmap_fragment: specularmap_fragment,\n\tspecularmap_pars_fragment: specularmap_pars_fragment,\n\ttonemapping_fragment: tonemapping_fragment,\n\ttonemapping_pars_fragment: tonemapping_pars_fragment,\n\ttransmission_fragment: transmission_fragment,\n\ttransmission_pars_fragment: transmission_pars_fragment,\n\tuv_pars_fragment: uv_pars_fragment,\n\tuv_pars_vertex: uv_pars_vertex,\n\tuv_vertex: uv_vertex,\n\tuv2_pars_fragment: uv2_pars_fragment,\n\tuv2_pars_vertex: uv2_pars_vertex,\n\tuv2_vertex: uv2_vertex,\n\tworldpos_vertex: worldpos_vertex,\n\n\tbackground_vert: vertex$g,\n\tbackground_frag: fragment$g,\n\tcube_vert: vertex$f,\n\tcube_frag: fragment$f,\n\tdepth_vert: vertex$e,\n\tdepth_frag: fragment$e,\n\tdistanceRGBA_vert: vertex$d,\n\tdistanceRGBA_frag: fragment$d,\n\tequirect_vert: vertex$c,\n\tequirect_frag: fragment$c,\n\tlinedashed_vert: vertex$b,\n\tlinedashed_frag: fragment$b,\n\tmeshbasic_vert: vertex$a,\n\tmeshbasic_frag: fragment$a,\n\tmeshlambert_vert: vertex$9,\n\tmeshlambert_frag: fragment$9,\n\tmeshmatcap_vert: vertex$8,\n\tmeshmatcap_frag: fragment$8,\n\tmeshnormal_vert: vertex$7,\n\tmeshnormal_frag: fragment$7,\n\tmeshphong_vert: vertex$6,\n\tmeshphong_frag: fragment$6,\n\tmeshphysical_vert: vertex$5,\n\tmeshphysical_frag: fragment$5,\n\tmeshtoon_vert: vertex$4,\n\tmeshtoon_frag: fragment$4,\n\tpoints_vert: vertex$3,\n\tpoints_frag: fragment$3,\n\tshadow_vert: vertex$2,\n\tshadow_frag: fragment$2,\n\tsprite_vert: vertex$1,\n\tsprite_frag: fragment$1\n};\n\n/**\n * Uniforms library for shared webgl shaders\n */\n\nconst UniformsLib = {\n\n\tcommon: {\n\n\t\tdiffuse: { value: new Color( 0xffffff ) },\n\t\topacity: { value: 1.0 },\n\n\t\tmap: { value: null },\n\t\tuvTransform: { value: new Matrix3() },\n\t\tuv2Transform: { value: new Matrix3() },\n\n\t\talphaMap: { value: null },\n\t\talphaTest: { value: 0 }\n\n\t},\n\n\tspecularmap: {\n\n\t\tspecularMap: { value: null },\n\n\t},\n\n\tenvmap: {\n\n\t\tenvMap: { value: null },\n\t\tflipEnvMap: { value: - 1 },\n\t\treflectivity: { value: 1.0 }, // basic, lambert, phong\n\t\tior: { value: 1.5 }, // standard, physical\n\t\trefractionRatio: { value: 0.98 }\n\n\t},\n\n\taomap: {\n\n\t\taoMap: { value: null },\n\t\taoMapIntensity: { value: 1 }\n\n\t},\n\n\tlightmap: {\n\n\t\tlightMap: { value: null },\n\t\tlightMapIntensity: { value: 1 }\n\n\t},\n\n\temissivemap: {\n\n\t\temissiveMap: { value: null }\n\n\t},\n\n\tbumpmap: {\n\n\t\tbumpMap: { value: null },\n\t\tbumpScale: { value: 1 }\n\n\t},\n\n\tnormalmap: {\n\n\t\tnormalMap: { value: null },\n\t\tnormalScale: { value: new Vector2( 1, 1 ) }\n\n\t},\n\n\tdisplacementmap: {\n\n\t\tdisplacementMap: { value: null },\n\t\tdisplacementScale: { value: 1 },\n\t\tdisplacementBias: { value: 0 }\n\n\t},\n\n\troughnessmap: {\n\n\t\troughnessMap: { value: null }\n\n\t},\n\n\tmetalnessmap: {\n\n\t\tmetalnessMap: { value: null }\n\n\t},\n\n\tgradientmap: {\n\n\t\tgradientMap: { value: null }\n\n\t},\n\n\tfog: {\n\n\t\tfogDensity: { value: 0.00025 },\n\t\tfogNear: { value: 1 },\n\t\tfogFar: { value: 2000 },\n\t\tfogColor: { value: new Color( 0xffffff ) }\n\n\t},\n\n\tlights: {\n\n\t\tambientLightColor: { value: [] },\n\n\t\tlightProbe: { value: [] },\n\n\t\tdirectionalLights: { value: [], properties: {\n\t\t\tdirection: {},\n\t\t\tcolor: {}\n\t\t} },\n\n\t\tdirectionalLightShadows: { value: [], properties: {\n\t\t\tshadowBias: {},\n\t\t\tshadowNormalBias: {},\n\t\t\tshadowRadius: {},\n\t\t\tshadowMapSize: {}\n\t\t} },\n\n\t\tdirectionalShadowMap: { value: [] },\n\t\tdirectionalShadowMatrix: { value: [] },\n\n\t\tspotLights: { value: [], properties: {\n\t\t\tcolor: {},\n\t\t\tposition: {},\n\t\t\tdirection: {},\n\t\t\tdistance: {},\n\t\t\tconeCos: {},\n\t\t\tpenumbraCos: {},\n\t\t\tdecay: {}\n\t\t} },\n\n\t\tspotLightShadows: { value: [], properties: {\n\t\t\tshadowBias: {},\n\t\t\tshadowNormalBias: {},\n\t\t\tshadowRadius: {},\n\t\t\tshadowMapSize: {}\n\t\t} },\n\n\t\tspotShadowMap: { value: [] },\n\t\tspotShadowMatrix: { value: [] },\n\n\t\tpointLights: { value: [], properties: {\n\t\t\tcolor: {},\n\t\t\tposition: {},\n\t\t\tdecay: {},\n\t\t\tdistance: {}\n\t\t} },\n\n\t\tpointLightShadows: { value: [], properties: {\n\t\t\tshadowBias: {},\n\t\t\tshadowNormalBias: {},\n\t\t\tshadowRadius: {},\n\t\t\tshadowMapSize: {},\n\t\t\tshadowCameraNear: {},\n\t\t\tshadowCameraFar: {}\n\t\t} },\n\n\t\tpointShadowMap: { value: [] },\n\t\tpointShadowMatrix: { value: [] },\n\n\t\themisphereLights: { value: [], properties: {\n\t\t\tdirection: {},\n\t\t\tskyColor: {},\n\t\t\tgroundColor: {}\n\t\t} },\n\n\t\t// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\n\t\trectAreaLights: { value: [], properties: {\n\t\t\tcolor: {},\n\t\t\tposition: {},\n\t\t\twidth: {},\n\t\t\theight: {}\n\t\t} },\n\n\t\tltc_1: { value: null },\n\t\tltc_2: { value: null }\n\n\t},\n\n\tpoints: {\n\n\t\tdiffuse: { value: new Color( 0xffffff ) },\n\t\topacity: { value: 1.0 },\n\t\tsize: { value: 1.0 },\n\t\tscale: { value: 1.0 },\n\t\tmap: { value: null },\n\t\talphaMap: { value: null },\n\t\talphaTest: { value: 0 },\n\t\tuvTransform: { value: new Matrix3() }\n\n\t},\n\n\tsprite: {\n\n\t\tdiffuse: { value: new Color( 0xffffff ) },\n\t\topacity: { value: 1.0 },\n\t\tcenter: { value: new Vector2( 0.5, 0.5 ) },\n\t\trotation: { value: 0.0 },\n\t\tmap: { value: null },\n\t\talphaMap: { value: null },\n\t\talphaTest: { value: 0 },\n\t\tuvTransform: { value: new Matrix3() }\n\n\t}\n\n};\n\nconst ShaderLib = {\n\n\tbasic: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.specularmap,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.fog\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshbasic_vert,\n\t\tfragmentShader: ShaderChunk.meshbasic_frag\n\n\t},\n\n\tlambert: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.specularmap,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.emissivemap,\n\t\t\tUniformsLib.fog,\n\t\t\tUniformsLib.lights,\n\t\t\t{\n\t\t\t\temissive: { value: new Color( 0x000000 ) }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshlambert_vert,\n\t\tfragmentShader: ShaderChunk.meshlambert_frag\n\n\t},\n\n\tphong: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.specularmap,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.emissivemap,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\tUniformsLib.fog,\n\t\t\tUniformsLib.lights,\n\t\t\t{\n\t\t\t\temissive: { value: new Color( 0x000000 ) },\n\t\t\t\tspecular: { value: new Color( 0x111111 ) },\n\t\t\t\tshininess: { value: 30 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshphong_vert,\n\t\tfragmentShader: ShaderChunk.meshphong_frag\n\n\t},\n\n\tstandard: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.emissivemap,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\tUniformsLib.roughnessmap,\n\t\t\tUniformsLib.metalnessmap,\n\t\t\tUniformsLib.fog,\n\t\t\tUniformsLib.lights,\n\t\t\t{\n\t\t\t\temissive: { value: new Color( 0x000000 ) },\n\t\t\t\troughness: { value: 1.0 },\n\t\t\t\tmetalness: { value: 0.0 },\n\t\t\t\tenvMapIntensity: { value: 1 } // temporary\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\n\t},\n\n\ttoon: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.emissivemap,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\tUniformsLib.gradientmap,\n\t\t\tUniformsLib.fog,\n\t\t\tUniformsLib.lights,\n\t\t\t{\n\t\t\t\temissive: { value: new Color( 0x000000 ) }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshtoon_vert,\n\t\tfragmentShader: ShaderChunk.meshtoon_frag\n\n\t},\n\n\tmatcap: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\tUniformsLib.fog,\n\t\t\t{\n\t\t\t\tmatcap: { value: null }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshmatcap_vert,\n\t\tfragmentShader: ShaderChunk.meshmatcap_frag\n\n\t},\n\n\tpoints: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.points,\n\t\t\tUniformsLib.fog\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.points_vert,\n\t\tfragmentShader: ShaderChunk.points_frag\n\n\t},\n\n\tdashed: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.fog,\n\t\t\t{\n\t\t\t\tscale: { value: 1 },\n\t\t\t\tdashSize: { value: 1 },\n\t\t\t\ttotalSize: { value: 2 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.linedashed_vert,\n\t\tfragmentShader: ShaderChunk.linedashed_frag\n\n\t},\n\n\tdepth: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.displacementmap\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.depth_vert,\n\t\tfragmentShader: ShaderChunk.depth_frag\n\n\t},\n\n\tnormal: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\t{\n\t\t\t\topacity: { value: 1.0 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshnormal_vert,\n\t\tfragmentShader: ShaderChunk.meshnormal_frag\n\n\t},\n\n\tsprite: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.sprite,\n\t\t\tUniformsLib.fog\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.sprite_vert,\n\t\tfragmentShader: ShaderChunk.sprite_frag\n\n\t},\n\n\tbackground: {\n\n\t\tuniforms: {\n\t\t\tuvTransform: { value: new Matrix3() },\n\t\t\tt2D: { value: null },\n\t\t},\n\n\t\tvertexShader: ShaderChunk.background_vert,\n\t\tfragmentShader: ShaderChunk.background_frag\n\n\t},\n\t/* -------------------------------------------------------------------------\n\t//\tCube map shader\n\t ------------------------------------------------------------------------- */\n\n\tcube: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.envmap,\n\t\t\t{\n\t\t\t\topacity: { value: 1.0 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.cube_vert,\n\t\tfragmentShader: ShaderChunk.cube_frag\n\n\t},\n\n\tequirect: {\n\n\t\tuniforms: {\n\t\t\ttEquirect: { value: null },\n\t\t},\n\n\t\tvertexShader: ShaderChunk.equirect_vert,\n\t\tfragmentShader: ShaderChunk.equirect_frag\n\n\t},\n\n\tdistanceRGBA: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.displacementmap,\n\t\t\t{\n\t\t\t\treferencePosition: { value: new Vector3() },\n\t\t\t\tnearDistance: { value: 1 },\n\t\t\t\tfarDistance: { value: 1000 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n\t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\n\t},\n\n\tshadow: {\n\n\t\tuniforms: mergeUniforms( [\n\t\t\tUniformsLib.lights,\n\t\t\tUniformsLib.fog,\n\t\t\t{\n\t\t\t\tcolor: { value: new Color( 0x00000 ) },\n\t\t\t\topacity: { value: 1.0 }\n\t\t\t},\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.shadow_vert,\n\t\tfragmentShader: ShaderChunk.shadow_frag\n\n\t}\n\n};\n\nShaderLib.physical = {\n\n\tuniforms: mergeUniforms( [\n\t\tShaderLib.standard.uniforms,\n\t\t{\n\t\t\tclearcoat: { value: 0 },\n\t\t\tclearcoatMap: { value: null },\n\t\t\tclearcoatRoughness: { value: 0 },\n\t\t\tclearcoatRoughnessMap: { value: null },\n\t\t\tclearcoatNormalScale: { value: new Vector2( 1, 1 ) },\n\t\t\tclearcoatNormalMap: { value: null },\n\t\t\tsheen: { value: 0 },\n\t\t\tsheenColor: { value: new Color( 0x000000 ) },\n\t\t\tsheenColorMap: { value: null },\n\t\t\tsheenRoughness: { value: 0 },\n\t\t\tsheenRoughnessMap: { value: null },\n\t\t\ttransmission: { value: 0 },\n\t\t\ttransmissionMap: { value: null },\n\t\t\ttransmissionSamplerSize: { value: new Vector2() },\n\t\t\ttransmissionSamplerMap: { value: null },\n\t\t\tthickness: { value: 0 },\n\t\t\tthicknessMap: { value: null },\n\t\t\tattenuationDistance: { value: 0 },\n\t\t\tattenuationColor: { value: new Color( 0x000000 ) },\n\t\t\tspecularIntensity: { value: 0 },\n\t\t\tspecularIntensityMap: { value: null },\n\t\t\tspecularColor: { value: new Color( 1, 1, 1 ) },\n\t\t\tspecularColorMap: { value: null },\n\t\t}\n\t] ),\n\n\tvertexShader: ShaderChunk.meshphysical_vert,\n\tfragmentShader: ShaderChunk.meshphysical_frag\n\n};\n\nfunction WebGLBackground( renderer, cubemaps, state, objects, premultipliedAlpha ) {\n\n\tconst clearColor = new Color( 0x000000 );\n\tlet clearAlpha = 0;\n\n\tlet planeMesh;\n\tlet boxMesh;\n\n\tlet currentBackground = null;\n\tlet currentBackgroundVersion = 0;\n\tlet currentTonemapping = null;\n\n\tfunction render( renderList, scene ) {\n\n\t\tlet forceClear = false;\n\t\tlet background = scene.isScene === true ? scene.background : null;\n\n\t\tif ( background && background.isTexture ) {\n\n\t\t\tbackground = cubemaps.get( background );\n\n\t\t}\n\n\t\t// Ignore background in AR\n\t\t// TODO: Reconsider this.\n\n\t\tconst xr = renderer.xr;\n\t\tconst session = xr.getSession && xr.getSession();\n\n\t\tif ( session && session.environmentBlendMode === 'additive' ) {\n\n\t\t\tbackground = null;\n\n\t\t}\n\n\t\tif ( background === null ) {\n\n\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t} else if ( background && background.isColor ) {\n\n\t\t\tsetClear( background, 1 );\n\t\t\tforceClear = true;\n\n\t\t}\n\n\t\tif ( renderer.autoClear || forceClear ) {\n\n\t\t\trenderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\n\t\t}\n\n\t\tif ( background && ( background.isCubeTexture || background.mapping === CubeUVReflectionMapping ) ) {\n\n\t\t\tif ( boxMesh === undefined ) {\n\n\t\t\t\tboxMesh = new Mesh(\n\t\t\t\t\tnew BoxGeometry( 1, 1, 1 ),\n\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\tname: 'BackgroundCubeMaterial',\n\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.cube.uniforms ),\n\t\t\t\t\t\tvertexShader: ShaderLib.cube.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.cube.fragmentShader,\n\t\t\t\t\t\tside: BackSide,\n\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t} )\n\t\t\t\t);\n\n\t\t\t\tboxMesh.geometry.deleteAttribute( 'normal' );\n\t\t\t\tboxMesh.geometry.deleteAttribute( 'uv' );\n\n\t\t\t\tboxMesh.onBeforeRender = function ( renderer, scene, camera ) {\n\n\t\t\t\t\tthis.matrixWorld.copyPosition( camera.matrixWorld );\n\n\t\t\t\t};\n\n\t\t\t\t// enable code injection for non-built-in material\n\t\t\t\tObject.defineProperty( boxMesh.material, 'envMap', {\n\n\t\t\t\t\tget: function () {\n\n\t\t\t\t\t\treturn this.uniforms.envMap.value;\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\tobjects.update( boxMesh );\n\n\t\t\t}\n\n\t\t\tboxMesh.material.uniforms.envMap.value = background;\n\t\t\tboxMesh.material.uniforms.flipEnvMap.value = ( background.isCubeTexture && background.isRenderTargetTexture === false ) ? - 1 : 1;\n\n\t\t\tif ( currentBackground !== background ||\n\t\t\t\tcurrentBackgroundVersion !== background.version ||\n\t\t\t\tcurrentTonemapping !== renderer.toneMapping ) {\n\n\t\t\t\tboxMesh.material.needsUpdate = true;\n\n\t\t\t\tcurrentBackground = background;\n\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\n\t\t\t}\n\n\t\t\t// push to the pre-sorted opaque render list\n\t\t\trenderList.unshift( boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null );\n\n\t\t} else if ( background && background.isTexture ) {\n\n\t\t\tif ( planeMesh === undefined ) {\n\n\t\t\t\tplaneMesh = new Mesh(\n\t\t\t\t\tnew PlaneGeometry( 2, 2 ),\n\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\tname: 'BackgroundMaterial',\n\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.background.uniforms ),\n\t\t\t\t\t\tvertexShader: ShaderLib.background.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.background.fragmentShader,\n\t\t\t\t\t\tside: FrontSide,\n\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t} )\n\t\t\t\t);\n\n\t\t\t\tplaneMesh.geometry.deleteAttribute( 'normal' );\n\n\t\t\t\t// enable code injection for non-built-in material\n\t\t\t\tObject.defineProperty( planeMesh.material, 'map', {\n\n\t\t\t\t\tget: function () {\n\n\t\t\t\t\t\treturn this.uniforms.t2D.value;\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\tobjects.update( planeMesh );\n\n\t\t\t}\n\n\t\t\tplaneMesh.material.uniforms.t2D.value = background;\n\n\t\t\tif ( background.matrixAutoUpdate === true ) {\n\n\t\t\t\tbackground.updateMatrix();\n\n\t\t\t}\n\n\t\t\tplaneMesh.material.uniforms.uvTransform.value.copy( background.matrix );\n\n\t\t\tif ( currentBackground !== background ||\n\t\t\t\tcurrentBackgroundVersion !== background.version ||\n\t\t\t\tcurrentTonemapping !== renderer.toneMapping ) {\n\n\t\t\t\tplaneMesh.material.needsUpdate = true;\n\n\t\t\t\tcurrentBackground = background;\n\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\n\t\t\t}\n\n\n\t\t\t// push to the pre-sorted opaque render list\n\t\t\trenderList.unshift( planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null );\n\n\t\t}\n\n\t}\n\n\tfunction setClear( color, alpha ) {\n\n\t\tstate.buffers.color.setClear( color.r, color.g, color.b, alpha, premultipliedAlpha );\n\n\t}\n\n\treturn {\n\n\t\tgetClearColor: function () {\n\n\t\t\treturn clearColor;\n\n\t\t},\n\t\tsetClearColor: function ( color, alpha = 1 ) {\n\n\t\t\tclearColor.set( color );\n\t\t\tclearAlpha = alpha;\n\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t},\n\t\tgetClearAlpha: function () {\n\n\t\t\treturn clearAlpha;\n\n\t\t},\n\t\tsetClearAlpha: function ( alpha ) {\n\n\t\t\tclearAlpha = alpha;\n\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t},\n\t\trender: render\n\n\t};\n\n}\n\nfunction WebGLBindingStates( gl, extensions, attributes, capabilities ) {\n\n\tconst maxVertexAttributes = gl.getParameter( 34921 );\n\n\tconst extension = capabilities.isWebGL2 ? null : extensions.get( 'OES_vertex_array_object' );\n\tconst vaoAvailable = capabilities.isWebGL2 || extension !== null;\n\n\tconst bindingStates = {};\n\n\tconst defaultState = createBindingState( null );\n\tlet currentState = defaultState;\n\n\tfunction setup( object, material, program, geometry, index ) {\n\n\t\tlet updateBuffers = false;\n\n\t\tif ( vaoAvailable ) {\n\n\t\t\tconst state = getBindingState( geometry, program, material );\n\n\t\t\tif ( currentState !== state ) {\n\n\t\t\t\tcurrentState = state;\n\t\t\t\tbindVertexArrayObject( currentState.object );\n\n\t\t\t}\n\n\t\t\tupdateBuffers = needsUpdate( geometry, index );\n\n\t\t\tif ( updateBuffers ) saveCache( geometry, index );\n\n\t\t} else {\n\n\t\t\tconst wireframe = ( material.wireframe === true );\n\n\t\t\tif ( currentState.geometry !== geometry.id ||\n\t\t\t\tcurrentState.program !== program.id ||\n\t\t\t\tcurrentState.wireframe !== wireframe ) {\n\n\t\t\t\tcurrentState.geometry = geometry.id;\n\t\t\t\tcurrentState.program = program.id;\n\t\t\t\tcurrentState.wireframe = wireframe;\n\n\t\t\t\tupdateBuffers = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( object.isInstancedMesh === true ) {\n\n\t\t\tupdateBuffers = true;\n\n\t\t}\n\n\t\tif ( index !== null ) {\n\n\t\t\tattributes.update( index, 34963 );\n\n\t\t}\n\n\t\tif ( updateBuffers ) {\n\n\t\t\tsetupVertexAttributes( object, material, program, geometry );\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tgl.bindBuffer( 34963, attributes.get( index ).buffer );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction createVertexArrayObject() {\n\n\t\tif ( capabilities.isWebGL2 ) return gl.createVertexArray();\n\n\t\treturn extension.createVertexArrayOES();\n\n\t}\n\n\tfunction bindVertexArrayObject( vao ) {\n\n\t\tif ( capabilities.isWebGL2 ) return gl.bindVertexArray( vao );\n\n\t\treturn extension.bindVertexArrayOES( vao );\n\n\t}\n\n\tfunction deleteVertexArrayObject( vao ) {\n\n\t\tif ( capabilities.isWebGL2 ) return gl.deleteVertexArray( vao );\n\n\t\treturn extension.deleteVertexArrayOES( vao );\n\n\t}\n\n\tfunction getBindingState( geometry, program, material ) {\n\n\t\tconst wireframe = ( material.wireframe === true );\n\n\t\tlet programMap = bindingStates[ geometry.id ];\n\n\t\tif ( programMap === undefined ) {\n\n\t\t\tprogramMap = {};\n\t\t\tbindingStates[ geometry.id ] = programMap;\n\n\t\t}\n\n\t\tlet stateMap = programMap[ program.id ];\n\n\t\tif ( stateMap === undefined ) {\n\n\t\t\tstateMap = {};\n\t\t\tprogramMap[ program.id ] = stateMap;\n\n\t\t}\n\n\t\tlet state = stateMap[ wireframe ];\n\n\t\tif ( state === undefined ) {\n\n\t\t\tstate = createBindingState( createVertexArrayObject() );\n\t\t\tstateMap[ wireframe ] = state;\n\n\t\t}\n\n\t\treturn state;\n\n\t}\n\n\tfunction createBindingState( vao ) {\n\n\t\tconst newAttributes = [];\n\t\tconst enabledAttributes = [];\n\t\tconst attributeDivisors = [];\n\n\t\tfor ( let i = 0; i < maxVertexAttributes; i ++ ) {\n\n\t\t\tnewAttributes[ i ] = 0;\n\t\t\tenabledAttributes[ i ] = 0;\n\t\t\tattributeDivisors[ i ] = 0;\n\n\t\t}\n\n\t\treturn {\n\n\t\t\t// for backward compatibility on non-VAO support browser\n\t\t\tgeometry: null,\n\t\t\tprogram: null,\n\t\t\twireframe: false,\n\n\t\t\tnewAttributes: newAttributes,\n\t\t\tenabledAttributes: enabledAttributes,\n\t\t\tattributeDivisors: attributeDivisors,\n\t\t\tobject: vao,\n\t\t\tattributes: {},\n\t\t\tindex: null\n\n\t\t};\n\n\t}\n\n\tfunction needsUpdate( geometry, index ) {\n\n\t\tconst cachedAttributes = currentState.attributes;\n\t\tconst geometryAttributes = geometry.attributes;\n\n\t\tlet attributesNum = 0;\n\n\t\tfor ( const key in geometryAttributes ) {\n\n\t\t\tconst cachedAttribute = cachedAttributes[ key ];\n\t\t\tconst geometryAttribute = geometryAttributes[ key ];\n\n\t\t\tif ( cachedAttribute === undefined ) return true;\n\n\t\t\tif ( cachedAttribute.attribute !== geometryAttribute ) return true;\n\n\t\t\tif ( cachedAttribute.data !== geometryAttribute.data ) return true;\n\n\t\t\tattributesNum ++;\n\n\t\t}\n\n\t\tif ( currentState.attributesNum !== attributesNum ) return true;\n\n\t\tif ( currentState.index !== index ) return true;\n\n\t\treturn false;\n\n\t}\n\n\tfunction saveCache( geometry, index ) {\n\n\t\tconst cache = {};\n\t\tconst attributes = geometry.attributes;\n\t\tlet attributesNum = 0;\n\n\t\tfor ( const key in attributes ) {\n\n\t\t\tconst attribute = attributes[ key ];\n\n\t\t\tconst data = {};\n\t\t\tdata.attribute = attribute;\n\n\t\t\tif ( attribute.data ) {\n\n\t\t\t\tdata.data = attribute.data;\n\n\t\t\t}\n\n\t\t\tcache[ key ] = data;\n\n\t\t\tattributesNum ++;\n\n\t\t}\n\n\t\tcurrentState.attributes = cache;\n\t\tcurrentState.attributesNum = attributesNum;\n\n\t\tcurrentState.index = index;\n\n\t}\n\n\tfunction initAttributes() {\n\n\t\tconst newAttributes = currentState.newAttributes;\n\n\t\tfor ( let i = 0, il = newAttributes.length; i < il; i ++ ) {\n\n\t\t\tnewAttributes[ i ] = 0;\n\n\t\t}\n\n\t}\n\n\tfunction enableAttribute( attribute ) {\n\n\t\tenableAttributeAndDivisor( attribute, 0 );\n\n\t}\n\n\tfunction enableAttributeAndDivisor( attribute, meshPerAttribute ) {\n\n\t\tconst newAttributes = currentState.newAttributes;\n\t\tconst enabledAttributes = currentState.enabledAttributes;\n\t\tconst attributeDivisors = currentState.attributeDivisors;\n\n\t\tnewAttributes[ attribute ] = 1;\n\n\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\tenabledAttributes[ attribute ] = 1;\n\n\t\t}\n\n\t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\n\n\t\t\tconst extension = capabilities.isWebGL2 ? gl : extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\textension[ capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE' ]( attribute, meshPerAttribute );\n\t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\n\n\t\t}\n\n\t}\n\n\tfunction disableUnusedAttributes() {\n\n\t\tconst newAttributes = currentState.newAttributes;\n\t\tconst enabledAttributes = currentState.enabledAttributes;\n\n\t\tfor ( let i = 0, il = enabledAttributes.length; i < il; i ++ ) {\n\n\t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\n\n\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction vertexAttribPointer( index, size, type, normalized, stride, offset ) {\n\n\t\tif ( capabilities.isWebGL2 === true && ( type === 5124 || type === 5125 ) ) {\n\n\t\t\tgl.vertexAttribIPointer( index, size, type, stride, offset );\n\n\t\t} else {\n\n\t\t\tgl.vertexAttribPointer( index, size, type, normalized, stride, offset );\n\n\t\t}\n\n\t}\n\n\tfunction setupVertexAttributes( object, material, program, geometry ) {\n\n\t\tif ( capabilities.isWebGL2 === false && ( object.isInstancedMesh || geometry.isInstancedBufferGeometry ) ) {\n\n\t\t\tif ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) return;\n\n\t\t}\n\n\t\tinitAttributes();\n\n\t\tconst geometryAttributes = geometry.attributes;\n\n\t\tconst programAttributes = program.getAttributes();\n\n\t\tconst materialDefaultAttributeValues = material.defaultAttributeValues;\n\n\t\tfor ( const name in programAttributes ) {\n\n\t\t\tconst programAttribute = programAttributes[ name ];\n\n\t\t\tif ( programAttribute.location >= 0 ) {\n\n\t\t\t\tlet geometryAttribute = geometryAttributes[ name ];\n\n\t\t\t\tif ( geometryAttribute === undefined ) {\n\n\t\t\t\t\tif ( name === 'instanceMatrix' && object.instanceMatrix ) geometryAttribute = object.instanceMatrix;\n\t\t\t\t\tif ( name === 'instanceColor' && object.instanceColor ) geometryAttribute = object.instanceColor;\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometryAttribute !== undefined ) {\n\n\t\t\t\t\tconst normalized = geometryAttribute.normalized;\n\t\t\t\t\tconst size = geometryAttribute.itemSize;\n\n\t\t\t\t\tconst attribute = attributes.get( geometryAttribute );\n\n\t\t\t\t\t// TODO Attribute may not be available on context restore\n\n\t\t\t\t\tif ( attribute === undefined ) continue;\n\n\t\t\t\t\tconst buffer = attribute.buffer;\n\t\t\t\t\tconst type = attribute.type;\n\t\t\t\t\tconst bytesPerElement = attribute.bytesPerElement;\n\n\t\t\t\t\tif ( geometryAttribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\t\tconst data = geometryAttribute.data;\n\t\t\t\t\t\tconst stride = data.stride;\n\t\t\t\t\t\tconst offset = geometryAttribute.offset;\n\n\t\t\t\t\t\tif ( data && data.isInstancedInterleavedBuffer ) {\n\n\t\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\t\tenableAttributeAndDivisor( programAttribute.location + i, data.meshPerAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined ) {\n\n\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = data.meshPerAttribute * data.count;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\t\tenableAttribute( programAttribute.location + i );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgl.bindBuffer( 34962, buffer );\n\n\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\tvertexAttribPointer(\n\t\t\t\t\t\t\t\tprogramAttribute.location + i,\n\t\t\t\t\t\t\t\tsize / programAttribute.locationSize,\n\t\t\t\t\t\t\t\ttype,\n\t\t\t\t\t\t\t\tnormalized,\n\t\t\t\t\t\t\t\tstride * bytesPerElement,\n\t\t\t\t\t\t\t\t( offset + ( size / programAttribute.locationSize ) * i ) * bytesPerElement\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( geometryAttribute.isInstancedBufferAttribute ) {\n\n\t\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\t\tenableAttributeAndDivisor( programAttribute.location + i, geometryAttribute.meshPerAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined ) {\n\n\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\t\tenableAttribute( programAttribute.location + i );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgl.bindBuffer( 34962, buffer );\n\n\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\tvertexAttribPointer(\n\t\t\t\t\t\t\t\tprogramAttribute.location + i,\n\t\t\t\t\t\t\t\tsize / programAttribute.locationSize,\n\t\t\t\t\t\t\t\ttype,\n\t\t\t\t\t\t\t\tnormalized,\n\t\t\t\t\t\t\t\tsize * bytesPerElement,\n\t\t\t\t\t\t\t\t( size / programAttribute.locationSize ) * i * bytesPerElement\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\n\n\t\t\t\t\tconst value = materialDefaultAttributeValues[ name ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\tswitch ( value.length ) {\n\n\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\tgl.vertexAttrib2fv( programAttribute.location, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\tgl.vertexAttrib3fv( programAttribute.location, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\tgl.vertexAttrib4fv( programAttribute.location, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tgl.vertexAttrib1fv( programAttribute.location, value );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tdisableUnusedAttributes();\n\n\t}\n\n\tfunction dispose() {\n\n\t\treset();\n\n\t\tfor ( const geometryId in bindingStates ) {\n\n\t\t\tconst programMap = bindingStates[ geometryId ];\n\n\t\t\tfor ( const programId in programMap ) {\n\n\t\t\t\tconst stateMap = programMap[ programId ];\n\n\t\t\t\tfor ( const wireframe in stateMap ) {\n\n\t\t\t\t\tdeleteVertexArrayObject( stateMap[ wireframe ].object );\n\n\t\t\t\t\tdelete stateMap[ wireframe ];\n\n\t\t\t\t}\n\n\t\t\t\tdelete programMap[ programId ];\n\n\t\t\t}\n\n\t\t\tdelete bindingStates[ geometryId ];\n\n\t\t}\n\n\t}\n\n\tfunction releaseStatesOfGeometry( geometry ) {\n\n\t\tif ( bindingStates[ geometry.id ] === undefined ) return;\n\n\t\tconst programMap = bindingStates[ geometry.id ];\n\n\t\tfor ( const programId in programMap ) {\n\n\t\t\tconst stateMap = programMap[ programId ];\n\n\t\t\tfor ( const wireframe in stateMap ) {\n\n\t\t\t\tdeleteVertexArrayObject( stateMap[ wireframe ].object );\n\n\t\t\t\tdelete stateMap[ wireframe ];\n\n\t\t\t}\n\n\t\t\tdelete programMap[ programId ];\n\n\t\t}\n\n\t\tdelete bindingStates[ geometry.id ];\n\n\t}\n\n\tfunction releaseStatesOfProgram( program ) {\n\n\t\tfor ( const geometryId in bindingStates ) {\n\n\t\t\tconst programMap = bindingStates[ geometryId ];\n\n\t\t\tif ( programMap[ program.id ] === undefined ) continue;\n\n\t\t\tconst stateMap = programMap[ program.id ];\n\n\t\t\tfor ( const wireframe in stateMap ) {\n\n\t\t\t\tdeleteVertexArrayObject( stateMap[ wireframe ].object );\n\n\t\t\t\tdelete stateMap[ wireframe ];\n\n\t\t\t}\n\n\t\t\tdelete programMap[ program.id ];\n\n\t\t}\n\n\t}\n\n\tfunction reset() {\n\n\t\tresetDefaultState();\n\n\t\tif ( currentState === defaultState ) return;\n\n\t\tcurrentState = defaultState;\n\t\tbindVertexArrayObject( currentState.object );\n\n\t}\n\n\t// for backward-compatilibity\n\n\tfunction resetDefaultState() {\n\n\t\tdefaultState.geometry = null;\n\t\tdefaultState.program = null;\n\t\tdefaultState.wireframe = false;\n\n\t}\n\n\treturn {\n\n\t\tsetup: setup,\n\t\treset: reset,\n\t\tresetDefaultState: resetDefaultState,\n\t\tdispose: dispose,\n\t\treleaseStatesOfGeometry: releaseStatesOfGeometry,\n\t\treleaseStatesOfProgram: releaseStatesOfProgram,\n\n\t\tinitAttributes: initAttributes,\n\t\tenableAttribute: enableAttribute,\n\t\tdisableUnusedAttributes: disableUnusedAttributes\n\n\t};\n\n}\n\nfunction WebGLBufferRenderer( gl, extensions, info, capabilities ) {\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\n\tlet mode;\n\n\tfunction setMode( value ) {\n\n\t\tmode = value;\n\n\t}\n\n\tfunction render( start, count ) {\n\n\t\tgl.drawArrays( mode, start, count );\n\n\t\tinfo.update( count, mode, 1 );\n\n\t}\n\n\tfunction renderInstances( start, count, primcount ) {\n\n\t\tif ( primcount === 0 ) return;\n\n\t\tlet extension, methodName;\n\n\t\tif ( isWebGL2 ) {\n\n\t\t\textension = gl;\n\t\t\tmethodName = 'drawArraysInstanced';\n\n\t\t} else {\n\n\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\t\tmethodName = 'drawArraysInstancedANGLE';\n\n\t\t\tif ( extension === null ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\textension[ methodName ]( mode, start, count, primcount );\n\n\t\tinfo.update( count, mode, primcount );\n\n\t}\n\n\t//\n\n\tthis.setMode = setMode;\n\tthis.render = render;\n\tthis.renderInstances = renderInstances;\n\n}\n\nfunction WebGLCapabilities( gl, extensions, parameters ) {\n\n\tlet maxAnisotropy;\n\n\tfunction getMaxAnisotropy() {\n\n\t\tif ( maxAnisotropy !== undefined ) return maxAnisotropy;\n\n\t\tif ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {\n\n\t\t\tconst extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\n\t\t} else {\n\n\t\t\tmaxAnisotropy = 0;\n\n\t\t}\n\n\t\treturn maxAnisotropy;\n\n\t}\n\n\tfunction getMaxPrecision( precision ) {\n\n\t\tif ( precision === 'highp' ) {\n\n\t\t\tif ( gl.getShaderPrecisionFormat( 35633, 36338 ).precision > 0 &&\n\t\t\t\tgl.getShaderPrecisionFormat( 35632, 36338 ).precision > 0 ) {\n\n\t\t\t\treturn 'highp';\n\n\t\t\t}\n\n\t\t\tprecision = 'mediump';\n\n\t\t}\n\n\t\tif ( precision === 'mediump' ) {\n\n\t\t\tif ( gl.getShaderPrecisionFormat( 35633, 36337 ).precision > 0 &&\n\t\t\t\tgl.getShaderPrecisionFormat( 35632, 36337 ).precision > 0 ) {\n\n\t\t\t\treturn 'mediump';\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn 'lowp';\n\n\t}\n\n\t/* eslint-disable no-undef */\n\tconst isWebGL2 = ( typeof WebGL2RenderingContext !== 'undefined' && gl instanceof WebGL2RenderingContext ) ||\n\t\t( typeof WebGL2ComputeRenderingContext !== 'undefined' && gl instanceof WebGL2ComputeRenderingContext );\n\t/* eslint-enable no-undef */\n\n\tlet precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\tconst maxPrecision = getMaxPrecision( precision );\n\n\tif ( maxPrecision !== precision ) {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\n\t\tprecision = maxPrecision;\n\n\t}\n\n\tconst drawBuffers = isWebGL2 || extensions.has( 'WEBGL_draw_buffers' );\n\n\tconst logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n\n\tconst maxTextures = gl.getParameter( 34930 );\n\tconst maxVertexTextures = gl.getParameter( 35660 );\n\tconst maxTextureSize = gl.getParameter( 3379 );\n\tconst maxCubemapSize = gl.getParameter( 34076 );\n\n\tconst maxAttributes = gl.getParameter( 34921 );\n\tconst maxVertexUniforms = gl.getParameter( 36347 );\n\tconst maxVaryings = gl.getParameter( 36348 );\n\tconst maxFragmentUniforms = gl.getParameter( 36349 );\n\n\tconst vertexTextures = maxVertexTextures > 0;\n\tconst floatFragmentTextures = isWebGL2 || extensions.has( 'OES_texture_float' );\n\tconst floatVertexTextures = vertexTextures && floatFragmentTextures;\n\n\tconst maxSamples = isWebGL2 ? gl.getParameter( 36183 ) : 0;\n\n\treturn {\n\n\t\tisWebGL2: isWebGL2,\n\n\t\tdrawBuffers: drawBuffers,\n\n\t\tgetMaxAnisotropy: getMaxAnisotropy,\n\t\tgetMaxPrecision: getMaxPrecision,\n\n\t\tprecision: precision,\n\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n\t\tmaxTextures: maxTextures,\n\t\tmaxVertexTextures: maxVertexTextures,\n\t\tmaxTextureSize: maxTextureSize,\n\t\tmaxCubemapSize: maxCubemapSize,\n\n\t\tmaxAttributes: maxAttributes,\n\t\tmaxVertexUniforms: maxVertexUniforms,\n\t\tmaxVaryings: maxVaryings,\n\t\tmaxFragmentUniforms: maxFragmentUniforms,\n\n\t\tvertexTextures: vertexTextures,\n\t\tfloatFragmentTextures: floatFragmentTextures,\n\t\tfloatVertexTextures: floatVertexTextures,\n\n\t\tmaxSamples: maxSamples\n\n\t};\n\n}\n\nfunction WebGLClipping( properties ) {\n\n\tconst scope = this;\n\n\tlet globalState = null,\n\t\tnumGlobalPlanes = 0,\n\t\tlocalClippingEnabled = false,\n\t\trenderingShadows = false;\n\n\tconst plane = new Plane(),\n\t\tviewNormalMatrix = new Matrix3(),\n\n\t\tuniform = { value: null, needsUpdate: false };\n\n\tthis.uniform = uniform;\n\tthis.numPlanes = 0;\n\tthis.numIntersection = 0;\n\n\tthis.init = function ( planes, enableLocalClipping, camera ) {\n\n\t\tconst enabled =\n\t\t\tplanes.length !== 0 ||\n\t\t\tenableLocalClipping ||\n\t\t\t// enable state of previous frame - the clipping code has to\n\t\t\t// run another frame in order to reset the state:\n\t\t\tnumGlobalPlanes !== 0 ||\n\t\t\tlocalClippingEnabled;\n\n\t\tlocalClippingEnabled = enableLocalClipping;\n\n\t\tglobalState = projectPlanes( planes, camera, 0 );\n\t\tnumGlobalPlanes = planes.length;\n\n\t\treturn enabled;\n\n\t};\n\n\tthis.beginShadows = function () {\n\n\t\trenderingShadows = true;\n\t\tprojectPlanes( null );\n\n\t};\n\n\tthis.endShadows = function () {\n\n\t\trenderingShadows = false;\n\t\tresetGlobalState();\n\n\t};\n\n\tthis.setState = function ( material, camera, useCache ) {\n\n\t\tconst planes = material.clippingPlanes,\n\t\t\tclipIntersection = material.clipIntersection,\n\t\t\tclipShadows = material.clipShadows;\n\n\t\tconst materialProperties = properties.get( material );\n\n\t\tif ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {\n\n\t\t\t// there's no local clipping\n\n\t\t\tif ( renderingShadows ) {\n\n\t\t\t\t// there's no global clipping\n\n\t\t\t\tprojectPlanes( null );\n\n\t\t\t} else {\n\n\t\t\t\tresetGlobalState();\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t\t\t\tlGlobal = nGlobal * 4;\n\n\t\t\tlet dstArray = materialProperties.clippingState || null;\n\n\t\t\tuniform.value = dstArray; // ensure unique state\n\n\t\t\tdstArray = projectPlanes( planes, camera, lGlobal, useCache );\n\n\t\t\tfor ( let i = 0; i !== lGlobal; ++ i ) {\n\n\t\t\t\tdstArray[ i ] = globalState[ i ];\n\n\t\t\t}\n\n\t\t\tmaterialProperties.clippingState = dstArray;\n\t\t\tthis.numIntersection = clipIntersection ? this.numPlanes : 0;\n\t\t\tthis.numPlanes += nGlobal;\n\n\t\t}\n\n\n\t};\n\n\tfunction resetGlobalState() {\n\n\t\tif ( uniform.value !== globalState ) {\n\n\t\t\tuniform.value = globalState;\n\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\n\t\t}\n\n\t\tscope.numPlanes = numGlobalPlanes;\n\t\tscope.numIntersection = 0;\n\n\t}\n\n\tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\n\n\t\tconst nPlanes = planes !== null ? planes.length : 0;\n\t\tlet dstArray = null;\n\n\t\tif ( nPlanes !== 0 ) {\n\n\t\t\tdstArray = uniform.value;\n\n\t\t\tif ( skipTransform !== true || dstArray === null ) {\n\n\t\t\t\tconst flatSize = dstOffset + nPlanes * 4,\n\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\n\t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\n\n\t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\n\n\t\t\t\t\tdstArray = new Float32Array( flatSize );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {\n\n\t\t\t\t\tplane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );\n\n\t\t\t\t\tplane.normal.toArray( dstArray, i4 );\n\t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tuniform.value = dstArray;\n\t\t\tuniform.needsUpdate = true;\n\n\t\t}\n\n\t\tscope.numPlanes = nPlanes;\n\t\tscope.numIntersection = 0;\n\n\t\treturn dstArray;\n\n\t}\n\n}\n\nfunction WebGLCubeMaps( renderer ) {\n\n\tlet cubemaps = new WeakMap();\n\n\tfunction mapTextureMapping( texture, mapping ) {\n\n\t\tif ( mapping === EquirectangularReflectionMapping ) {\n\n\t\t\ttexture.mapping = CubeReflectionMapping;\n\n\t\t} else if ( mapping === EquirectangularRefractionMapping ) {\n\n\t\t\ttexture.mapping = CubeRefractionMapping;\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\tfunction get( texture ) {\n\n\t\tif ( texture && texture.isTexture && texture.isRenderTargetTexture === false ) {\n\n\t\t\tconst mapping = texture.mapping;\n\n\t\t\tif ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping ) {\n\n\t\t\t\tif ( cubemaps.has( texture ) ) {\n\n\t\t\t\t\tconst cubemap = cubemaps.get( texture ).texture;\n\t\t\t\t\treturn mapTextureMapping( cubemap, texture.mapping );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst image = texture.image;\n\n\t\t\t\t\tif ( image && image.height > 0 ) {\n\n\t\t\t\t\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\t\t\t\tconst renderTarget = new WebGLCubeRenderTarget( image.height / 2 );\n\t\t\t\t\t\trenderTarget.fromEquirectangularTexture( renderer, texture );\n\t\t\t\t\t\tcubemaps.set( texture, renderTarget );\n\n\t\t\t\t\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\t\t\treturn mapTextureMapping( renderTarget.texture, texture.mapping );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// image not yet ready. try the conversion next frame\n\n\t\t\t\t\t\treturn null;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\tfunction onTextureDispose( event ) {\n\n\t\tconst texture = event.target;\n\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\tconst cubemap = cubemaps.get( texture );\n\n\t\tif ( cubemap !== undefined ) {\n\n\t\t\tcubemaps.delete( texture );\n\t\t\tcubemap.dispose();\n\n\t\t}\n\n\t}\n\n\tfunction dispose() {\n\n\t\tcubemaps = new WeakMap();\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tdispose: dispose\n\t};\n\n}\n\nclass OrthographicCamera extends Camera {\n\n\tconstructor( left = - 1, right = 1, top = 1, bottom = - 1, near = 0.1, far = 2000 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'OrthographicCamera';\n\n\t\tthis.zoom = 1;\n\t\tthis.view = null;\n\n\t\tthis.left = left;\n\t\tthis.right = right;\n\t\tthis.top = top;\n\t\tthis.bottom = bottom;\n\n\t\tthis.near = near;\n\t\tthis.far = far;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.left = source.left;\n\t\tthis.right = source.right;\n\t\tthis.top = source.top;\n\t\tthis.bottom = source.bottom;\n\t\tthis.near = source.near;\n\t\tthis.far = source.far;\n\n\t\tthis.zoom = source.zoom;\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\treturn this;\n\n\t}\n\n\tsetViewOffset( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\tif ( this.view === null ) {\n\n\t\t\tthis.view = {\n\t\t\t\tenabled: true,\n\t\t\t\tfullWidth: 1,\n\t\t\t\tfullHeight: 1,\n\t\t\t\toffsetX: 0,\n\t\t\t\toffsetY: 0,\n\t\t\t\twidth: 1,\n\t\t\t\theight: 1\n\t\t\t};\n\n\t\t}\n\n\t\tthis.view.enabled = true;\n\t\tthis.view.fullWidth = fullWidth;\n\t\tthis.view.fullHeight = fullHeight;\n\t\tthis.view.offsetX = x;\n\t\tthis.view.offsetY = y;\n\t\tthis.view.width = width;\n\t\tthis.view.height = height;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tclearViewOffset() {\n\n\t\tif ( this.view !== null ) {\n\n\t\t\tthis.view.enabled = false;\n\n\t\t}\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tupdateProjectionMatrix() {\n\n\t\tconst dx = ( this.right - this.left ) / ( 2 * this.zoom );\n\t\tconst dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n\t\tconst cx = ( this.right + this.left ) / 2;\n\t\tconst cy = ( this.top + this.bottom ) / 2;\n\n\t\tlet left = cx - dx;\n\t\tlet right = cx + dx;\n\t\tlet top = cy + dy;\n\t\tlet bottom = cy - dy;\n\n\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\tconst scaleW = ( this.right - this.left ) / this.view.fullWidth / this.zoom;\n\t\t\tconst scaleH = ( this.top - this.bottom ) / this.view.fullHeight / this.zoom;\n\n\t\t\tleft += scaleW * this.view.offsetX;\n\t\t\tright = left + scaleW * this.view.width;\n\t\t\ttop -= scaleH * this.view.offsetY;\n\t\t\tbottom = top - scaleH * this.view.height;\n\n\t\t}\n\n\t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far );\n\n\t\tthis.projectionMatrixInverse.copy( this.projectionMatrix ).invert();\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.zoom = this.zoom;\n\t\tdata.object.left = this.left;\n\t\tdata.object.right = this.right;\n\t\tdata.object.top = this.top;\n\t\tdata.object.bottom = this.bottom;\n\t\tdata.object.near = this.near;\n\t\tdata.object.far = this.far;\n\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\treturn data;\n\n\t}\n\n}\n\nOrthographicCamera.prototype.isOrthographicCamera = true;\n\nclass RawShaderMaterial extends ShaderMaterial {\n\n\tconstructor( parameters ) {\n\n\t\tsuper( parameters );\n\n\t\tthis.type = 'RawShaderMaterial';\n\n\t}\n\n}\n\nRawShaderMaterial.prototype.isRawShaderMaterial = true;\n\nconst LOD_MIN = 4;\nconst LOD_MAX = 8;\nconst SIZE_MAX = Math.pow( 2, LOD_MAX );\n\n// The standard deviations (radians) associated with the extra mips. These are\n// chosen to approximate a Trowbridge-Reitz distribution function times the\n// geometric shadowing function. These sigma values squared must match the\n// variance #defines in cube_uv_reflection_fragment.glsl.js.\nconst EXTRA_LOD_SIGMA = [ 0.125, 0.215, 0.35, 0.446, 0.526, 0.582 ];\n\nconst TOTAL_LODS = LOD_MAX - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;\n\n// The maximum length of the blur for loop. Smaller sigmas will use fewer\n// samples and exit early, but not recompile the shader.\nconst MAX_SAMPLES = 20;\n\nconst ENCODINGS = {\n\t[ LinearEncoding ]: 0,\n\t[ sRGBEncoding ]: 1,\n\t[ RGBEEncoding ]: 2,\n\t[ RGBM7Encoding ]: 3,\n\t[ RGBM16Encoding ]: 4,\n\t[ RGBDEncoding ]: 5,\n\t[ GammaEncoding ]: 6\n};\n\nconst _flatCamera = /*@__PURE__*/ new OrthographicCamera();\nconst { _lodPlanes, _sizeLods, _sigmas } = /*@__PURE__*/ _createPlanes();\nconst _clearColor = /*@__PURE__*/ new Color();\nlet _oldTarget = null;\n\n// Golden Ratio\nconst PHI = ( 1 + Math.sqrt( 5 ) ) / 2;\nconst INV_PHI = 1 / PHI;\n\n// Vertices of a dodecahedron (except the opposites, which represent the\n// same axis), used as axis directions evenly spread on a sphere.\nconst _axisDirections = [\n\t/*@__PURE__*/ new Vector3( 1, 1, 1 ),\n\t/*@__PURE__*/ new Vector3( - 1, 1, 1 ),\n\t/*@__PURE__*/ new Vector3( 1, 1, - 1 ),\n\t/*@__PURE__*/ new Vector3( - 1, 1, - 1 ),\n\t/*@__PURE__*/ new Vector3( 0, PHI, INV_PHI ),\n\t/*@__PURE__*/ new Vector3( 0, PHI, - INV_PHI ),\n\t/*@__PURE__*/ new Vector3( INV_PHI, 0, PHI ),\n\t/*@__PURE__*/ new Vector3( - INV_PHI, 0, PHI ),\n\t/*@__PURE__*/ new Vector3( PHI, INV_PHI, 0 ),\n\t/*@__PURE__*/ new Vector3( - PHI, INV_PHI, 0 ) ];\n\n/**\n * This class generates a Prefiltered, Mipmapped Radiance Environment Map\n * (PMREM) from a cubeMap environment texture. This allows different levels of\n * blur to be quickly accessed based on material roughness. It is packed into a\n * special CubeUV format that allows us to perform custom interpolation so that\n * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap\n * chain, it only goes down to the LOD_MIN level (above), and then creates extra\n * even more filtered 'mips' at the same LOD_MIN resolution, associated with\n * higher roughness levels. In this way we maintain resolution to smoothly\n * interpolate diffuse lighting while limiting sampling computation.\n *\n * Paper: Fast, Accurate Image-Based Lighting\n * https://drive.google.com/file/d/15y8r_UpKlU9SvV4ILb0C3qCPecS8pvLz/view\n*/\n\nclass PMREMGenerator {\n\n\tconstructor( renderer ) {\n\n\t\tthis._renderer = renderer;\n\t\tthis._pingPongRenderTarget = null;\n\n\t\tthis._blurMaterial = _getBlurShader( MAX_SAMPLES );\n\t\tthis._equirectShader = null;\n\t\tthis._cubemapShader = null;\n\n\t\tthis._compileMaterial( this._blurMaterial );\n\n\t}\n\n\t/**\n\t * Generates a PMREM from a supplied Scene, which can be faster than using an\n\t * image if networking bandwidth is low. Optional sigma specifies a blur radius\n\t * in radians to be applied to the scene before PMREM generation. Optional near\n\t * and far planes ensure the scene is rendered in its entirety (the cubeCamera\n\t * is placed at the origin).\n\t */\n\tfromScene( scene, sigma = 0, near = 0.1, far = 100 ) {\n\n\t\t_oldTarget = this._renderer.getRenderTarget();\n\t\tconst cubeUVRenderTarget = this._allocateTargets();\n\n\t\tthis._sceneToCubeUV( scene, near, far, cubeUVRenderTarget );\n\t\tif ( sigma > 0 ) {\n\n\t\t\tthis._blur( cubeUVRenderTarget, 0, 0, sigma );\n\n\t\t}\n\n\t\tthis._applyPMREM( cubeUVRenderTarget );\n\t\tthis._cleanup( cubeUVRenderTarget );\n\n\t\treturn cubeUVRenderTarget;\n\n\t}\n\n\t/**\n\t * Generates a PMREM from an equirectangular texture, which can be either LDR\n\t * (RGBFormat) or HDR (RGBEFormat). The ideal input image size is 1k (1024 x 512),\n\t * as this matches best with the 256 x 256 cubemap output.\n\t */\n\tfromEquirectangular( equirectangular ) {\n\n\t\treturn this._fromTexture( equirectangular );\n\n\t}\n\n\t/**\n\t * Generates a PMREM from an cubemap texture, which can be either LDR\n\t * (RGBFormat) or HDR (RGBEFormat). The ideal input cube size is 256 x 256,\n\t * as this matches best with the 256 x 256 cubemap output.\n\t */\n\tfromCubemap( cubemap ) {\n\n\t\treturn this._fromTexture( cubemap );\n\n\t}\n\n\t/**\n\t * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during\n\t * your texture's network fetch for increased concurrency.\n\t */\n\tcompileCubemapShader() {\n\n\t\tif ( this._cubemapShader === null ) {\n\n\t\t\tthis._cubemapShader = _getCubemapShader();\n\t\t\tthis._compileMaterial( this._cubemapShader );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during\n\t * your texture's network fetch for increased concurrency.\n\t */\n\tcompileEquirectangularShader() {\n\n\t\tif ( this._equirectShader === null ) {\n\n\t\t\tthis._equirectShader = _getEquirectShader();\n\t\t\tthis._compileMaterial( this._equirectShader );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,\n\t * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on\n\t * one of them will cause any others to also become unusable.\n\t */\n\tdispose() {\n\n\t\tthis._blurMaterial.dispose();\n\n\t\tif ( this._cubemapShader !== null ) this._cubemapShader.dispose();\n\t\tif ( this._equirectShader !== null ) this._equirectShader.dispose();\n\n\t\tfor ( let i = 0; i < _lodPlanes.length; i ++ ) {\n\n\t\t\t_lodPlanes[ i ].dispose();\n\n\t\t}\n\n\t}\n\n\t// private interface\n\n\t_cleanup( outputTarget ) {\n\n\t\tthis._pingPongRenderTarget.dispose();\n\t\tthis._renderer.setRenderTarget( _oldTarget );\n\t\toutputTarget.scissorTest = false;\n\t\t_setViewport( outputTarget, 0, 0, outputTarget.width, outputTarget.height );\n\n\t}\n\n\t_fromTexture( texture ) {\n\n\t\t_oldTarget = this._renderer.getRenderTarget();\n\t\tconst cubeUVRenderTarget = this._allocateTargets( texture );\n\t\tthis._textureToCubeUV( texture, cubeUVRenderTarget );\n\t\tthis._applyPMREM( cubeUVRenderTarget );\n\t\tthis._cleanup( cubeUVRenderTarget );\n\n\t\treturn cubeUVRenderTarget;\n\n\t}\n\n\t_allocateTargets( texture ) { // warning: null texture is valid\n\n\t\tconst params = {\n\t\t\tmagFilter: NearestFilter,\n\t\t\tminFilter: NearestFilter,\n\t\t\tgenerateMipmaps: false,\n\t\t\ttype: UnsignedByteType,\n\t\t\tformat: RGBEFormat,\n\t\t\tencoding: _isLDR( texture ) ? texture.encoding : RGBEEncoding,\n\t\t\tdepthBuffer: false\n\t\t};\n\n\t\tconst cubeUVRenderTarget = _createRenderTarget( params );\n\t\tcubeUVRenderTarget.depthBuffer = texture ? false : true;\n\t\tthis._pingPongRenderTarget = _createRenderTarget( params );\n\t\treturn cubeUVRenderTarget;\n\n\t}\n\n\t_compileMaterial( material ) {\n\n\t\tconst tmpMesh = new Mesh( _lodPlanes[ 0 ], material );\n\t\tthis._renderer.compile( tmpMesh, _flatCamera );\n\n\t}\n\n\t_sceneToCubeUV( scene, near, far, cubeUVRenderTarget ) {\n\n\t\tconst fov = 90;\n\t\tconst aspect = 1;\n\t\tconst cubeCamera = new PerspectiveCamera( fov, aspect, near, far );\n\t\tconst upSign = [ 1, - 1, 1, 1, 1, 1 ];\n\t\tconst forwardSign = [ 1, 1, 1, - 1, - 1, - 1 ];\n\t\tconst renderer = this._renderer;\n\n\t\tconst originalAutoClear = renderer.autoClear;\n\t\tconst outputEncoding = renderer.outputEncoding;\n\t\tconst toneMapping = renderer.toneMapping;\n\t\trenderer.getClearColor( _clearColor );\n\n\t\trenderer.toneMapping = NoToneMapping;\n\t\trenderer.outputEncoding = LinearEncoding;\n\t\trenderer.autoClear = false;\n\n\t\tconst backgroundMaterial = new MeshBasicMaterial( {\n\t\t\tname: 'PMREM.Background',\n\t\t\tside: BackSide,\n\t\t\tdepthWrite: false,\n\t\t\tdepthTest: false,\n\t\t} );\n\n\t\tconst backgroundBox = new Mesh( new BoxGeometry(), backgroundMaterial );\n\n\t\tlet useSolidColor = false;\n\t\tconst background = scene.background;\n\n\t\tif ( background ) {\n\n\t\t\tif ( background.isColor ) {\n\n\t\t\t\tbackgroundMaterial.color.copy( background );\n\t\t\t\tscene.background = null;\n\t\t\t\tuseSolidColor = true;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tbackgroundMaterial.color.copy( _clearColor );\n\t\t\tuseSolidColor = true;\n\n\t\t}\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tconst col = i % 3;\n\t\t\tif ( col == 0 ) {\n\n\t\t\t\tcubeCamera.up.set( 0, upSign[ i ], 0 );\n\t\t\t\tcubeCamera.lookAt( forwardSign[ i ], 0, 0 );\n\n\t\t\t} else if ( col == 1 ) {\n\n\t\t\t\tcubeCamera.up.set( 0, 0, upSign[ i ] );\n\t\t\t\tcubeCamera.lookAt( 0, forwardSign[ i ], 0 );\n\n\t\t\t} else {\n\n\t\t\t\tcubeCamera.up.set( 0, upSign[ i ], 0 );\n\t\t\t\tcubeCamera.lookAt( 0, 0, forwardSign[ i ] );\n\n\t\t\t}\n\n\t\t\t_setViewport( cubeUVRenderTarget,\n\t\t\t\tcol * SIZE_MAX, i > 2 ? SIZE_MAX : 0, SIZE_MAX, SIZE_MAX );\n\t\t\trenderer.setRenderTarget( cubeUVRenderTarget );\n\n\t\t\tif ( useSolidColor ) {\n\n\t\t\t\trenderer.render( backgroundBox, cubeCamera );\n\n\t\t\t}\n\n\t\t\trenderer.render( scene, cubeCamera );\n\n\t\t}\n\n\t\tbackgroundBox.geometry.dispose();\n\t\tbackgroundBox.material.dispose();\n\n\t\trenderer.toneMapping = toneMapping;\n\t\trenderer.outputEncoding = outputEncoding;\n\t\trenderer.autoClear = originalAutoClear;\n\t\tscene.background = background;\n\n\t}\n\n\t_setEncoding( uniform, texture ) {\n\n\t\t/* if ( this._renderer.capabilities.isWebGL2 === true && texture.format === RGBAFormat && texture.type === UnsignedByteType && texture.encoding === sRGBEncoding ) {\n\n\t\t\tuniform.value = ENCODINGS[ LinearEncoding ];\n\n\t\t} else {\n\n\t\t\tuniform.value = ENCODINGS[ texture.encoding ];\n\n\t\t} */\n\n\t\tuniform.value = ENCODINGS[ texture.encoding ];\n\n\t}\n\n\t_textureToCubeUV( texture, cubeUVRenderTarget ) {\n\n\t\tconst renderer = this._renderer;\n\n\t\tconst isCubeTexture = ( texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping );\n\n\t\tif ( isCubeTexture ) {\n\n\t\t\tif ( this._cubemapShader == null ) {\n\n\t\t\t\tthis._cubemapShader = _getCubemapShader();\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( this._equirectShader == null ) {\n\n\t\t\t\tthis._equirectShader = _getEquirectShader();\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst material = isCubeTexture ? this._cubemapShader : this._equirectShader;\n\t\tconst mesh = new Mesh( _lodPlanes[ 0 ], material );\n\n\t\tconst uniforms = material.uniforms;\n\n\t\tuniforms[ 'envMap' ].value = texture;\n\n\t\tif ( ! isCubeTexture ) {\n\n\t\t\tuniforms[ 'texelSize' ].value.set( 1.0 / texture.image.width, 1.0 / texture.image.height );\n\n\t\t}\n\n\t\tthis._setEncoding( uniforms[ 'inputEncoding' ], texture );\n\t\tthis._setEncoding( uniforms[ 'outputEncoding' ], cubeUVRenderTarget.texture );\n\n\t\t_setViewport( cubeUVRenderTarget, 0, 0, 3 * SIZE_MAX, 2 * SIZE_MAX );\n\n\t\trenderer.setRenderTarget( cubeUVRenderTarget );\n\t\trenderer.render( mesh, _flatCamera );\n\n\t}\n\n\t_applyPMREM( cubeUVRenderTarget ) {\n\n\t\tconst renderer = this._renderer;\n\t\tconst autoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\tfor ( let i = 1; i < TOTAL_LODS; i ++ ) {\n\n\t\t\tconst sigma = Math.sqrt( _sigmas[ i ] * _sigmas[ i ] - _sigmas[ i - 1 ] * _sigmas[ i - 1 ] );\n\n\t\t\tconst poleAxis = _axisDirections[ ( i - 1 ) % _axisDirections.length ];\n\n\t\t\tthis._blur( cubeUVRenderTarget, i - 1, i, sigma, poleAxis );\n\n\t\t}\n\n\t\trenderer.autoClear = autoClear;\n\n\t}\n\n\t/**\n\t * This is a two-pass Gaussian blur for a cubemap. Normally this is done\n\t * vertically and horizontally, but this breaks down on a cube. Here we apply\n\t * the blur latitudinally (around the poles), and then longitudinally (towards\n\t * the poles) to approximate the orthogonally-separable blur. It is least\n\t * accurate at the poles, but still does a decent job.\n\t */\n\t_blur( cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis ) {\n\n\t\tconst pingPongRenderTarget = this._pingPongRenderTarget;\n\n\t\tthis._halfBlur(\n\t\t\tcubeUVRenderTarget,\n\t\t\tpingPongRenderTarget,\n\t\t\tlodIn,\n\t\t\tlodOut,\n\t\t\tsigma,\n\t\t\t'latitudinal',\n\t\t\tpoleAxis );\n\n\t\tthis._halfBlur(\n\t\t\tpingPongRenderTarget,\n\t\t\tcubeUVRenderTarget,\n\t\t\tlodOut,\n\t\t\tlodOut,\n\t\t\tsigma,\n\t\t\t'longitudinal',\n\t\t\tpoleAxis );\n\n\t}\n\n\t_halfBlur( targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis ) {\n\n\t\tconst renderer = this._renderer;\n\t\tconst blurMaterial = this._blurMaterial;\n\n\t\tif ( direction !== 'latitudinal' && direction !== 'longitudinal' ) {\n\n\t\t\tconsole.error(\n\t\t\t\t'blur direction must be either latitudinal or longitudinal!' );\n\n\t\t}\n\n\t\t// Number of standard deviations at which to cut off the discrete approximation.\n\t\tconst STANDARD_DEVIATIONS = 3;\n\n\t\tconst blurMesh = new Mesh( _lodPlanes[ lodOut ], blurMaterial );\n\t\tconst blurUniforms = blurMaterial.uniforms;\n\n\t\tconst pixels = _sizeLods[ lodIn ] - 1;\n\t\tconst radiansPerPixel = isFinite( sigmaRadians ) ? Math.PI / ( 2 * pixels ) : 2 * Math.PI / ( 2 * MAX_SAMPLES - 1 );\n\t\tconst sigmaPixels = sigmaRadians / radiansPerPixel;\n\t\tconst samples = isFinite( sigmaRadians ) ? 1 + Math.floor( STANDARD_DEVIATIONS * sigmaPixels ) : MAX_SAMPLES;\n\n\t\tif ( samples > MAX_SAMPLES ) {\n\n\t\t\tconsole.warn( `sigmaRadians, ${\n\t\t\t\tsigmaRadians}, is too large and will clip, as it requested ${\n\t\t\t\tsamples} samples when the maximum is set to ${MAX_SAMPLES}` );\n\n\t\t}\n\n\t\tconst weights = [];\n\t\tlet sum = 0;\n\n\t\tfor ( let i = 0; i < MAX_SAMPLES; ++ i ) {\n\n\t\t\tconst x = i / sigmaPixels;\n\t\t\tconst weight = Math.exp( - x * x / 2 );\n\t\t\tweights.push( weight );\n\n\t\t\tif ( i == 0 ) {\n\n\t\t\t\tsum += weight;\n\n\t\t\t} else if ( i < samples ) {\n\n\t\t\t\tsum += 2 * weight;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( let i = 0; i < weights.length; i ++ ) {\n\n\t\t\tweights[ i ] = weights[ i ] / sum;\n\n\t\t}\n\n\t\tblurUniforms[ 'envMap' ].value = targetIn.texture;\n\t\tblurUniforms[ 'samples' ].value = samples;\n\t\tblurUniforms[ 'weights' ].value = weights;\n\t\tblurUniforms[ 'latitudinal' ].value = direction === 'latitudinal';\n\n\t\tif ( poleAxis ) {\n\n\t\t\tblurUniforms[ 'poleAxis' ].value = poleAxis;\n\n\t\t}\n\n\t\tblurUniforms[ 'dTheta' ].value = radiansPerPixel;\n\t\tblurUniforms[ 'mipInt' ].value = LOD_MAX - lodIn;\n\n\t\tthis._setEncoding( blurUniforms[ 'inputEncoding' ], targetIn.texture );\n\t\tthis._setEncoding( blurUniforms[ 'outputEncoding' ], targetIn.texture );\n\n\t\tconst outputSize = _sizeLods[ lodOut ];\n\t\tconst x = 3 * Math.max( 0, SIZE_MAX - 2 * outputSize );\n\t\tconst y = ( lodOut === 0 ? 0 : 2 * SIZE_MAX ) + 2 * outputSize * ( lodOut > LOD_MAX - LOD_MIN ? lodOut - LOD_MAX + LOD_MIN : 0 );\n\n\t\t_setViewport( targetOut, x, y, 3 * outputSize, 2 * outputSize );\n\t\trenderer.setRenderTarget( targetOut );\n\t\trenderer.render( blurMesh, _flatCamera );\n\n\t}\n\n}\n\nfunction _isLDR( texture ) {\n\n\tif ( texture === undefined || texture.type !== UnsignedByteType ) return false;\n\n\treturn texture.encoding === LinearEncoding || texture.encoding === sRGBEncoding || texture.encoding === GammaEncoding;\n\n}\n\nfunction _createPlanes() {\n\n\tconst _lodPlanes = [];\n\tconst _sizeLods = [];\n\tconst _sigmas = [];\n\n\tlet lod = LOD_MAX;\n\n\tfor ( let i = 0; i < TOTAL_LODS; i ++ ) {\n\n\t\tconst sizeLod = Math.pow( 2, lod );\n\t\t_sizeLods.push( sizeLod );\n\t\tlet sigma = 1.0 / sizeLod;\n\n\t\tif ( i > LOD_MAX - LOD_MIN ) {\n\n\t\t\tsigma = EXTRA_LOD_SIGMA[ i - LOD_MAX + LOD_MIN - 1 ];\n\n\t\t} else if ( i == 0 ) {\n\n\t\t\tsigma = 0;\n\n\t\t}\n\n\t\t_sigmas.push( sigma );\n\n\t\tconst texelSize = 1.0 / ( sizeLod - 1 );\n\t\tconst min = - texelSize / 2;\n\t\tconst max = 1 + texelSize / 2;\n\t\tconst uv1 = [ min, min, max, min, max, max, min, min, max, max, min, max ];\n\n\t\tconst cubeFaces = 6;\n\t\tconst vertices = 6;\n\t\tconst positionSize = 3;\n\t\tconst uvSize = 2;\n\t\tconst faceIndexSize = 1;\n\n\t\tconst position = new Float32Array( positionSize * vertices * cubeFaces );\n\t\tconst uv = new Float32Array( uvSize * vertices * cubeFaces );\n\t\tconst faceIndex = new Float32Array( faceIndexSize * vertices * cubeFaces );\n\n\t\tfor ( let face = 0; face < cubeFaces; face ++ ) {\n\n\t\t\tconst x = ( face % 3 ) * 2 / 3 - 1;\n\t\t\tconst y = face > 2 ? 0 : - 1;\n\t\t\tconst coordinates = [\n\t\t\t\tx, y, 0,\n\t\t\t\tx + 2 / 3, y, 0,\n\t\t\t\tx + 2 / 3, y + 1, 0,\n\t\t\t\tx, y, 0,\n\t\t\t\tx + 2 / 3, y + 1, 0,\n\t\t\t\tx, y + 1, 0\n\t\t\t];\n\t\t\tposition.set( coordinates, positionSize * vertices * face );\n\t\t\tuv.set( uv1, uvSize * vertices * face );\n\t\t\tconst fill = [ face, face, face, face, face, face ];\n\t\t\tfaceIndex.set( fill, faceIndexSize * vertices * face );\n\n\t\t}\n\n\t\tconst planes = new BufferGeometry();\n\t\tplanes.setAttribute( 'position', new BufferAttribute( position, positionSize ) );\n\t\tplanes.setAttribute( 'uv', new BufferAttribute( uv, uvSize ) );\n\t\tplanes.setAttribute( 'faceIndex', new BufferAttribute( faceIndex, faceIndexSize ) );\n\t\t_lodPlanes.push( planes );\n\n\t\tif ( lod > LOD_MIN ) {\n\n\t\t\tlod --;\n\n\t\t}\n\n\t}\n\n\treturn { _lodPlanes, _sizeLods, _sigmas };\n\n}\n\nfunction _createRenderTarget( params ) {\n\n\tconst cubeUVRenderTarget = new WebGLRenderTarget( 3 * SIZE_MAX, 3 * SIZE_MAX, params );\n\tcubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;\n\tcubeUVRenderTarget.texture.name = 'PMREM.cubeUv';\n\tcubeUVRenderTarget.scissorTest = true;\n\treturn cubeUVRenderTarget;\n\n}\n\nfunction _setViewport( target, x, y, width, height ) {\n\n\ttarget.viewport.set( x, y, width, height );\n\ttarget.scissor.set( x, y, width, height );\n\n}\n\nfunction _getBlurShader( maxSamples ) {\n\n\tconst weights = new Float32Array( maxSamples );\n\tconst poleAxis = new Vector3( 0, 1, 0 );\n\tconst shaderMaterial = new RawShaderMaterial( {\n\n\t\tname: 'SphericalGaussianBlur',\n\n\t\tdefines: { 'n': maxSamples },\n\n\t\tuniforms: {\n\t\t\t'envMap': { value: null },\n\t\t\t'samples': { value: 1 },\n\t\t\t'weights': { value: weights },\n\t\t\t'latitudinal': { value: false },\n\t\t\t'dTheta': { value: 0 },\n\t\t\t'mipInt': { value: 0 },\n\t\t\t'poleAxis': { value: poleAxis },\n\t\t\t'inputEncoding': { value: ENCODINGS[ LinearEncoding ] },\n\t\t\t'outputEncoding': { value: ENCODINGS[ LinearEncoding ] }\n\t\t},\n\n\t\tvertexShader: _getCommonVertexShader(),\n\n\t\tfragmentShader: /* glsl */`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t${ _getEncodings() }\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t`,\n\n\t\tblending: NoBlending,\n\t\tdepthTest: false,\n\t\tdepthWrite: false\n\n\t} );\n\n\treturn shaderMaterial;\n\n}\n\nfunction _getEquirectShader() {\n\n\tconst texelSize = new Vector2( 1, 1 );\n\tconst shaderMaterial = new RawShaderMaterial( {\n\n\t\tname: 'EquirectangularToCubeUV',\n\n\t\tuniforms: {\n\t\t\t'envMap': { value: null },\n\t\t\t'texelSize': { value: texelSize },\n\t\t\t'inputEncoding': { value: ENCODINGS[ LinearEncoding ] },\n\t\t\t'outputEncoding': { value: ENCODINGS[ LinearEncoding ] }\n\t\t},\n\n\t\tvertexShader: _getCommonVertexShader(),\n\n\t\tfragmentShader: /* glsl */`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform vec2 texelSize;\n\n\t\t\t${ _getEncodings() }\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tvec2 f = fract( uv / texelSize - 0.5 );\n\t\t\t\tuv -= f * texelSize;\n\t\t\t\tvec3 tl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.x += texelSize.x;\n\t\t\t\tvec3 tr = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.y += texelSize.y;\n\t\t\t\tvec3 br = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.x -= texelSize.x;\n\t\t\t\tvec3 bl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\n\t\t\t\tvec3 tm = mix( tl, tr, f.x );\n\t\t\t\tvec3 bm = mix( bl, br, f.x );\n\t\t\t\tgl_FragColor.rgb = mix( tm, bm, f.y );\n\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t`,\n\n\t\tblending: NoBlending,\n\t\tdepthTest: false,\n\t\tdepthWrite: false\n\n\t} );\n\n\treturn shaderMaterial;\n\n}\n\nfunction _getCubemapShader() {\n\n\tconst shaderMaterial = new RawShaderMaterial( {\n\n\t\tname: 'CubemapToCubeUV',\n\n\t\tuniforms: {\n\t\t\t'envMap': { value: null },\n\t\t\t'inputEncoding': { value: ENCODINGS[ LinearEncoding ] },\n\t\t\t'outputEncoding': { value: ENCODINGS[ LinearEncoding ] }\n\t\t},\n\n\t\tvertexShader: _getCommonVertexShader(),\n\n\t\tfragmentShader: /* glsl */`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\t${ _getEncodings() }\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb = envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) ).rgb;\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t`,\n\n\t\tblending: NoBlending,\n\t\tdepthTest: false,\n\t\tdepthWrite: false\n\n\t} );\n\n\treturn shaderMaterial;\n\n}\n\nfunction _getCommonVertexShader() {\n\n\treturn /* glsl */`\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute vec3 position;\n\t\tattribute vec2 uv;\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t`;\n\n}\n\nfunction _getEncodings() {\n\n\treturn /* glsl */`\n\n\t\tuniform int inputEncoding;\n\t\tuniform int outputEncoding;\n\n\t\t#include <encodings_pars_fragment>\n\n\t\tvec4 inputTexelToLinear( vec4 value ) {\n\n\t\t\tif ( inputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( inputEncoding == 1 ) {\n\n\t\t\t\treturn sRGBToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 2 ) {\n\n\t\t\t\treturn RGBEToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 3 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 7.0 );\n\n\t\t\t} else if ( inputEncoding == 4 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 16.0 );\n\n\t\t\t} else if ( inputEncoding == 5 ) {\n\n\t\t\t\treturn RGBDToLinear( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn GammaToLinear( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 linearToOutputTexel( vec4 value ) {\n\n\t\t\tif ( outputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( outputEncoding == 1 ) {\n\n\t\t\t\treturn LinearTosRGB( value );\n\n\t\t\t} else if ( outputEncoding == 2 ) {\n\n\t\t\t\treturn LinearToRGBE( value );\n\n\t\t\t} else if ( outputEncoding == 3 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 7.0 );\n\n\t\t\t} else if ( outputEncoding == 4 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 16.0 );\n\n\t\t\t} else if ( outputEncoding == 5 ) {\n\n\t\t\t\treturn LinearToRGBD( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn LinearToGamma( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 envMapTexelToLinear( vec4 color ) {\n\n\t\t\treturn inputTexelToLinear( color );\n\n\t\t}\n\t`;\n\n}\n\nfunction WebGLCubeUVMaps( renderer ) {\n\n\tlet cubeUVmaps = new WeakMap();\n\n\tlet pmremGenerator = null;\n\n\tfunction get( texture ) {\n\n\t\tif ( texture && texture.isTexture && texture.isRenderTargetTexture === false ) {\n\n\t\t\tconst mapping = texture.mapping;\n\n\t\t\tconst isEquirectMap = ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping );\n\t\t\tconst isCubeMap = ( mapping === CubeReflectionMapping || mapping === CubeRefractionMapping );\n\n\t\t\tif ( isEquirectMap || isCubeMap ) {\n\n\t\t\t\t// equirect/cube map to cubeUV conversion\n\n\t\t\t\tif ( cubeUVmaps.has( texture ) ) {\n\n\t\t\t\t\treturn cubeUVmaps.get( texture ).texture;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst image = texture.image;\n\n\t\t\t\t\tif ( ( isEquirectMap && image && image.height > 0 ) || ( isCubeMap && image && isCubeTextureComplete( image ) ) ) {\n\n\t\t\t\t\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\t\t\t\tif ( pmremGenerator === null ) pmremGenerator = new PMREMGenerator( renderer );\n\n\t\t\t\t\t\tconst renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular( texture ) : pmremGenerator.fromCubemap( texture );\n\t\t\t\t\t\tcubeUVmaps.set( texture, renderTarget );\n\n\t\t\t\t\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\t\t\treturn renderTarget.texture;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// image not yet ready. try the conversion next frame\n\n\t\t\t\t\t\treturn null;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\tfunction isCubeTextureComplete( image ) {\n\n\t\tlet count = 0;\n\t\tconst length = 6;\n\n\t\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\t\tif ( image[ i ] !== undefined ) count ++;\n\n\t\t}\n\n\t\treturn count === length;\n\n\n\t}\n\n\tfunction onTextureDispose( event ) {\n\n\t\tconst texture = event.target;\n\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\tconst cubemapUV = cubeUVmaps.get( texture );\n\n\t\tif ( cubemapUV !== undefined ) {\n\n\t\t\tcubeUVmaps.delete( texture );\n\t\t\tcubemapUV.dispose();\n\n\t\t}\n\n\t}\n\n\tfunction dispose() {\n\n\t\tcubeUVmaps = new WeakMap();\n\n\t\tif ( pmremGenerator !== null ) {\n\n\t\t\tpmremGenerator.dispose();\n\t\t\tpmremGenerator = null;\n\n\t\t}\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tdispose: dispose\n\t};\n\n}\n\nfunction WebGLExtensions( gl ) {\n\n\tconst extensions = {};\n\n\tfunction getExtension( name ) {\n\n\t\tif ( extensions[ name ] !== undefined ) {\n\n\t\t\treturn extensions[ name ];\n\n\t\t}\n\n\t\tlet extension;\n\n\t\tswitch ( name ) {\n\n\t\t\tcase 'WEBGL_depth_texture':\n\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\textension = gl.getExtension( name );\n\n\t\t}\n\n\t\textensions[ name ] = extension;\n\n\t\treturn extension;\n\n\t}\n\n\treturn {\n\n\t\thas: function ( name ) {\n\n\t\t\treturn getExtension( name ) !== null;\n\n\t\t},\n\n\t\tinit: function ( capabilities ) {\n\n\t\t\tif ( capabilities.isWebGL2 ) {\n\n\t\t\t\tgetExtension( 'EXT_color_buffer_float' );\n\n\t\t\t} else {\n\n\t\t\t\tgetExtension( 'WEBGL_depth_texture' );\n\t\t\t\tgetExtension( 'OES_texture_float' );\n\t\t\t\tgetExtension( 'OES_texture_half_float' );\n\t\t\t\tgetExtension( 'OES_texture_half_float_linear' );\n\t\t\t\tgetExtension( 'OES_standard_derivatives' );\n\t\t\t\tgetExtension( 'OES_element_index_uint' );\n\t\t\t\tgetExtension( 'OES_vertex_array_object' );\n\t\t\t\tgetExtension( 'ANGLE_instanced_arrays' );\n\n\t\t\t}\n\n\t\t\tgetExtension( 'OES_texture_float_linear' );\n\t\t\tgetExtension( 'EXT_color_buffer_half_float' );\n\t\t\tgetExtension( 'WEBGL_multisampled_render_to_texture' );\n\n\t\t},\n\n\t\tget: function ( name ) {\n\n\t\t\tconst extension = getExtension( name );\n\n\t\t\tif ( extension === null ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\n\t\t\t}\n\n\t\t\treturn extension;\n\n\t\t}\n\n\t};\n\n}\n\nfunction WebGLGeometries( gl, attributes, info, bindingStates ) {\n\n\tconst geometries = {};\n\tconst wireframeAttributes = new WeakMap();\n\n\tfunction onGeometryDispose( event ) {\n\n\t\tconst geometry = event.target;\n\n\t\tif ( geometry.index !== null ) {\n\n\t\t\tattributes.remove( geometry.index );\n\n\t\t}\n\n\t\tfor ( const name in geometry.attributes ) {\n\n\t\t\tattributes.remove( geometry.attributes[ name ] );\n\n\t\t}\n\n\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\n\n\t\tdelete geometries[ geometry.id ];\n\n\t\tconst attribute = wireframeAttributes.get( geometry );\n\n\t\tif ( attribute ) {\n\n\t\t\tattributes.remove( attribute );\n\t\t\twireframeAttributes.delete( geometry );\n\n\t\t}\n\n\t\tbindingStates.releaseStatesOfGeometry( geometry );\n\n\t\tif ( geometry.isInstancedBufferGeometry === true ) {\n\n\t\t\tdelete geometry._maxInstanceCount;\n\n\t\t}\n\n\t\t//\n\n\t\tinfo.memory.geometries --;\n\n\t}\n\n\tfunction get( object, geometry ) {\n\n\t\tif ( geometries[ geometry.id ] === true ) return geometry;\n\n\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\n\n\t\tgeometries[ geometry.id ] = true;\n\n\t\tinfo.memory.geometries ++;\n\n\t\treturn geometry;\n\n\t}\n\n\tfunction update( geometry ) {\n\n\t\tconst geometryAttributes = geometry.attributes;\n\n\t\t// Updating index buffer in VAO now. See WebGLBindingStates.\n\n\t\tfor ( const name in geometryAttributes ) {\n\n\t\t\tattributes.update( geometryAttributes[ name ], 34962 );\n\n\t\t}\n\n\t\t// morph targets\n\n\t\tconst morphAttributes = geometry.morphAttributes;\n\n\t\tfor ( const name in morphAttributes ) {\n\n\t\t\tconst array = morphAttributes[ name ];\n\n\t\t\tfor ( let i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\tattributes.update( array[ i ], 34962 );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction updateWireframeAttribute( geometry ) {\n\n\t\tconst indices = [];\n\n\t\tconst geometryIndex = geometry.index;\n\t\tconst geometryPosition = geometry.attributes.position;\n\t\tlet version = 0;\n\n\t\tif ( geometryIndex !== null ) {\n\n\t\t\tconst array = geometryIndex.array;\n\t\t\tversion = geometryIndex.version;\n\n\t\t\tfor ( let i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\t\tconst a = array[ i + 0 ];\n\t\t\t\tconst b = array[ i + 1 ];\n\t\t\t\tconst c = array[ i + 2 ];\n\n\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst array = geometryPosition.array;\n\t\t\tversion = geometryPosition.version;\n\n\t\t\tfor ( let i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\n\n\t\t\t\tconst a = i + 0;\n\t\t\t\tconst b = i + 1;\n\t\t\t\tconst c = i + 2;\n\n\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst attribute = new ( arrayMax( indices ) > 65535 ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );\n\t\tattribute.version = version;\n\n\t\t// Updating index buffer in VAO now. See WebGLBindingStates\n\n\t\t//\n\n\t\tconst previousAttribute = wireframeAttributes.get( geometry );\n\n\t\tif ( previousAttribute ) attributes.remove( previousAttribute );\n\n\t\t//\n\n\t\twireframeAttributes.set( geometry, attribute );\n\n\t}\n\n\tfunction getWireframeAttribute( geometry ) {\n\n\t\tconst currentAttribute = wireframeAttributes.get( geometry );\n\n\t\tif ( currentAttribute ) {\n\n\t\t\tconst geometryIndex = geometry.index;\n\n\t\t\tif ( geometryIndex !== null ) {\n\n\t\t\t\t// if the attribute is obsolete, create a new one\n\n\t\t\t\tif ( currentAttribute.version < geometryIndex.version ) {\n\n\t\t\t\t\tupdateWireframeAttribute( geometry );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tupdateWireframeAttribute( geometry );\n\n\t\t}\n\n\t\treturn wireframeAttributes.get( geometry );\n\n\t}\n\n\treturn {\n\n\t\tget: get,\n\t\tupdate: update,\n\n\t\tgetWireframeAttribute: getWireframeAttribute\n\n\t};\n\n}\n\nfunction WebGLIndexedBufferRenderer( gl, extensions, info, capabilities ) {\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\n\tlet mode;\n\n\tfunction setMode( value ) {\n\n\t\tmode = value;\n\n\t}\n\n\tlet type, bytesPerElement;\n\n\tfunction setIndex( value ) {\n\n\t\ttype = value.type;\n\t\tbytesPerElement = value.bytesPerElement;\n\n\t}\n\n\tfunction render( start, count ) {\n\n\t\tgl.drawElements( mode, count, type, start * bytesPerElement );\n\n\t\tinfo.update( count, mode, 1 );\n\n\t}\n\n\tfunction renderInstances( start, count, primcount ) {\n\n\t\tif ( primcount === 0 ) return;\n\n\t\tlet extension, methodName;\n\n\t\tif ( isWebGL2 ) {\n\n\t\t\textension = gl;\n\t\t\tmethodName = 'drawElementsInstanced';\n\n\t\t} else {\n\n\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\t\tmethodName = 'drawElementsInstancedANGLE';\n\n\t\t\tif ( extension === null ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\textension[ methodName ]( mode, count, type, start * bytesPerElement, primcount );\n\n\t\tinfo.update( count, mode, primcount );\n\n\t}\n\n\t//\n\n\tthis.setMode = setMode;\n\tthis.setIndex = setIndex;\n\tthis.render = render;\n\tthis.renderInstances = renderInstances;\n\n}\n\nfunction WebGLInfo( gl ) {\n\n\tconst memory = {\n\t\tgeometries: 0,\n\t\ttextures: 0\n\t};\n\n\tconst render = {\n\t\tframe: 0,\n\t\tcalls: 0,\n\t\ttriangles: 0,\n\t\tpoints: 0,\n\t\tlines: 0\n\t};\n\n\tfunction update( count, mode, instanceCount ) {\n\n\t\trender.calls ++;\n\n\t\tswitch ( mode ) {\n\n\t\t\tcase 4:\n\t\t\t\trender.triangles += instanceCount * ( count / 3 );\n\t\t\t\tbreak;\n\n\t\t\tcase 1:\n\t\t\t\trender.lines += instanceCount * ( count / 2 );\n\t\t\t\tbreak;\n\n\t\t\tcase 3:\n\t\t\t\trender.lines += instanceCount * ( count - 1 );\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\t\t\t\trender.lines += instanceCount * count;\n\t\t\t\tbreak;\n\n\t\t\tcase 0:\n\t\t\t\trender.points += instanceCount * count;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.error( 'THREE.WebGLInfo: Unknown draw mode:', mode );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tfunction reset() {\n\n\t\trender.frame ++;\n\t\trender.calls = 0;\n\t\trender.triangles = 0;\n\t\trender.points = 0;\n\t\trender.lines = 0;\n\n\t}\n\n\treturn {\n\t\tmemory: memory,\n\t\trender: render,\n\t\tprograms: null,\n\t\tautoReset: true,\n\t\treset: reset,\n\t\tupdate: update\n\t};\n\n}\n\nclass DataTexture2DArray extends Texture {\n\n\tconstructor( data = null, width = 1, height = 1, depth = 1 ) {\n\n\t\tsuper( null );\n\n\t\tthis.image = { data, width, height, depth };\n\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.unpackAlignment = 1;\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n}\n\nDataTexture2DArray.prototype.isDataTexture2DArray = true;\n\nfunction numericalSort( a, b ) {\n\n\treturn a[ 0 ] - b[ 0 ];\n\n}\n\nfunction absNumericalSort( a, b ) {\n\n\treturn Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );\n\n}\n\nfunction denormalize( morph, attribute ) {\n\n\tlet denominator = 1;\n\tconst array = attribute.isInterleavedBufferAttribute ? attribute.data.array : attribute.array;\n\n\tif ( array instanceof Int8Array ) denominator = 127;\n\telse if ( array instanceof Int16Array ) denominator = 32767;\n\telse if ( array instanceof Int32Array ) denominator = 2147483647;\n\telse console.error( 'THREE.WebGLMorphtargets: Unsupported morph attribute data type: ', array );\n\n\tmorph.divideScalar( denominator );\n\n}\n\nfunction WebGLMorphtargets( gl, capabilities, textures ) {\n\n\tconst influencesList = {};\n\tconst morphInfluences = new Float32Array( 8 );\n\tconst morphTextures = new WeakMap();\n\tconst morph = new Vector3();\n\n\tconst workInfluences = [];\n\n\tfor ( let i = 0; i < 8; i ++ ) {\n\n\t\tworkInfluences[ i ] = [ i, 0 ];\n\n\t}\n\n\tfunction update( object, geometry, material, program ) {\n\n\t\tconst objectInfluences = object.morphTargetInfluences;\n\n\t\tif ( capabilities.isWebGL2 === true ) {\n\n\t\t\t// instead of using attributes, the WebGL 2 code path encodes morph targets\n\t\t\t// into an array of data textures. Each layer represents a single morph target.\n\n\t\t\tconst numberOfMorphTargets = geometry.morphAttributes.position.length;\n\n\t\t\tlet entry = morphTextures.get( geometry );\n\n\t\t\tif ( entry === undefined || entry.count !== numberOfMorphTargets ) {\n\n\t\t\t\tif ( entry !== undefined ) entry.texture.dispose();\n\n\t\t\t\tconst hasMorphNormals = geometry.morphAttributes.normal !== undefined;\n\n\t\t\t\tconst morphTargets = geometry.morphAttributes.position;\n\t\t\t\tconst morphNormals = geometry.morphAttributes.normal || [];\n\n\t\t\t\tconst numberOfVertices = geometry.attributes.position.count;\n\t\t\t\tconst numberOfVertexData = ( hasMorphNormals === true ) ? 2 : 1; // (v,n) vs. (v)\n\n\t\t\t\tlet width = numberOfVertices * numberOfVertexData;\n\t\t\t\tlet height = 1;\n\n\t\t\t\tif ( width > capabilities.maxTextureSize ) {\n\n\t\t\t\t\theight = Math.ceil( width / capabilities.maxTextureSize );\n\t\t\t\t\twidth = capabilities.maxTextureSize;\n\n\t\t\t\t}\n\n\t\t\t\tconst buffer = new Float32Array( width * height * 4 * numberOfMorphTargets );\n\n\t\t\t\tconst texture = new DataTexture2DArray( buffer, width, height, numberOfMorphTargets );\n\t\t\t\ttexture.format = RGBAFormat; // using RGBA since RGB might be emulated (and is thus slower)\n\t\t\t\ttexture.type = FloatType;\n\n\t\t\t\t// fill buffer\n\n\t\t\t\tconst vertexDataStride = numberOfVertexData * 4;\n\n\t\t\t\tfor ( let i = 0; i < numberOfMorphTargets; i ++ ) {\n\n\t\t\t\t\tconst morphTarget = morphTargets[ i ];\n\t\t\t\t\tconst morphNormal = morphNormals[ i ];\n\n\t\t\t\t\tconst offset = width * height * 4 * i;\n\n\t\t\t\t\tfor ( let j = 0; j < morphTarget.count; j ++ ) {\n\n\t\t\t\t\t\tmorph.fromBufferAttribute( morphTarget, j );\n\n\t\t\t\t\t\tif ( morphTarget.normalized === true ) denormalize( morph, morphTarget );\n\n\t\t\t\t\t\tconst stride = j * vertexDataStride;\n\n\t\t\t\t\t\tbuffer[ offset + stride + 0 ] = morph.x;\n\t\t\t\t\t\tbuffer[ offset + stride + 1 ] = morph.y;\n\t\t\t\t\t\tbuffer[ offset + stride + 2 ] = morph.z;\n\t\t\t\t\t\tbuffer[ offset + stride + 3 ] = 0;\n\n\t\t\t\t\t\tif ( hasMorphNormals === true ) {\n\n\t\t\t\t\t\t\tmorph.fromBufferAttribute( morphNormal, j );\n\n\t\t\t\t\t\t\tif ( morphNormal.normalized === true ) denormalize( morph, morphNormal );\n\n\t\t\t\t\t\t\tbuffer[ offset + stride + 4 ] = morph.x;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 5 ] = morph.y;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 6 ] = morph.z;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 7 ] = 0;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tentry = {\n\t\t\t\t\tcount: numberOfMorphTargets,\n\t\t\t\t\ttexture: texture,\n\t\t\t\t\tsize: new Vector2( width, height )\n\t\t\t\t};\n\n\t\t\t\tmorphTextures.set( geometry, entry );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tlet morphInfluencesSum = 0;\n\n\t\t\tfor ( let i = 0; i < objectInfluences.length; i ++ ) {\n\n\t\t\t\tmorphInfluencesSum += objectInfluences[ i ];\n\n\t\t\t}\n\n\t\t\tconst morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetInfluences', objectInfluences );\n\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetsTexture', entry.texture, textures );\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetsTextureSize', entry.size );\n\n\n\t\t} else {\n\n\t\t\t// When object doesn't have morph target influences defined, we treat it as a 0-length array\n\t\t\t// This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences\n\n\t\t\tconst length = objectInfluences === undefined ? 0 : objectInfluences.length;\n\n\t\t\tlet influences = influencesList[ geometry.id ];\n\n\t\t\tif ( influences === undefined || influences.length !== length ) {\n\n\t\t\t\t// initialise list\n\n\t\t\t\tinfluences = [];\n\n\t\t\t\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\t\t\t\tinfluences[ i ] = [ i, 0 ];\n\n\t\t\t\t}\n\n\t\t\t\tinfluencesList[ geometry.id ] = influences;\n\n\t\t\t}\n\n\t\t\t// Collect influences\n\n\t\t\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\t\t\tconst influence = influences[ i ];\n\n\t\t\t\tinfluence[ 0 ] = i;\n\t\t\t\tinfluence[ 1 ] = objectInfluences[ i ];\n\n\t\t\t}\n\n\t\t\tinfluences.sort( absNumericalSort );\n\n\t\t\tfor ( let i = 0; i < 8; i ++ ) {\n\n\t\t\t\tif ( i < length && influences[ i ][ 1 ] ) {\n\n\t\t\t\t\tworkInfluences[ i ][ 0 ] = influences[ i ][ 0 ];\n\t\t\t\t\tworkInfluences[ i ][ 1 ] = influences[ i ][ 1 ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tworkInfluences[ i ][ 0 ] = Number.MAX_SAFE_INTEGER;\n\t\t\t\t\tworkInfluences[ i ][ 1 ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tworkInfluences.sort( numericalSort );\n\n\t\t\tconst morphTargets = geometry.morphAttributes.position;\n\t\t\tconst morphNormals = geometry.morphAttributes.normal;\n\n\t\t\tlet morphInfluencesSum = 0;\n\n\t\t\tfor ( let i = 0; i < 8; i ++ ) {\n\n\t\t\t\tconst influence = workInfluences[ i ];\n\t\t\t\tconst index = influence[ 0 ];\n\t\t\t\tconst value = influence[ 1 ];\n\n\t\t\t\tif ( index !== Number.MAX_SAFE_INTEGER && value ) {\n\n\t\t\t\t\tif ( morphTargets && geometry.getAttribute( 'morphTarget' + i ) !== morphTargets[ index ] ) {\n\n\t\t\t\t\t\tgeometry.setAttribute( 'morphTarget' + i, morphTargets[ index ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( morphNormals && geometry.getAttribute( 'morphNormal' + i ) !== morphNormals[ index ] ) {\n\n\t\t\t\t\t\tgeometry.setAttribute( 'morphNormal' + i, morphNormals[ index ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmorphInfluences[ i ] = value;\n\t\t\t\t\tmorphInfluencesSum += value;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( morphTargets && geometry.hasAttribute( 'morphTarget' + i ) === true ) {\n\n\t\t\t\t\t\tgeometry.deleteAttribute( 'morphTarget' + i );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( morphNormals && geometry.hasAttribute( 'morphNormal' + i ) === true ) {\n\n\t\t\t\t\t\tgeometry.deleteAttribute( 'morphNormal' + i );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmorphInfluences[ i ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// GLSL shader uses formula baseinfluence * base + sum(target * influence)\n\t\t\t// This allows us to switch between absolute morphs and relative morphs without changing shader code\n\t\t\t// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)\n\t\t\tconst morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );\n\n\t\t}\n\n\t}\n\n\treturn {\n\n\t\tupdate: update\n\n\t};\n\n}\n\nfunction WebGLObjects( gl, geometries, attributes, info ) {\n\n\tlet updateMap = new WeakMap();\n\n\tfunction update( object ) {\n\n\t\tconst frame = info.render.frame;\n\n\t\tconst geometry = object.geometry;\n\t\tconst buffergeometry = geometries.get( object, geometry );\n\n\t\t// Update once per frame\n\n\t\tif ( updateMap.get( buffergeometry ) !== frame ) {\n\n\t\t\tgeometries.update( buffergeometry );\n\n\t\t\tupdateMap.set( buffergeometry, frame );\n\n\t\t}\n\n\t\tif ( object.isInstancedMesh ) {\n\n\t\t\tif ( object.hasEventListener( 'dispose', onInstancedMeshDispose ) === false ) {\n\n\t\t\t\tobject.addEventListener( 'dispose', onInstancedMeshDispose );\n\n\t\t\t}\n\n\t\t\tattributes.update( object.instanceMatrix, 34962 );\n\n\t\t\tif ( object.instanceColor !== null ) {\n\n\t\t\t\tattributes.update( object.instanceColor, 34962 );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn buffergeometry;\n\n\t}\n\n\tfunction dispose() {\n\n\t\tupdateMap = new WeakMap();\n\n\t}\n\n\tfunction onInstancedMeshDispose( event ) {\n\n\t\tconst instancedMesh = event.target;\n\n\t\tinstancedMesh.removeEventListener( 'dispose', onInstancedMeshDispose );\n\n\t\tattributes.remove( instancedMesh.instanceMatrix );\n\n\t\tif ( instancedMesh.instanceColor !== null ) attributes.remove( instancedMesh.instanceColor );\n\n\t}\n\n\treturn {\n\n\t\tupdate: update,\n\t\tdispose: dispose\n\n\t};\n\n}\n\nclass DataTexture3D extends Texture {\n\n\tconstructor( data = null, width = 1, height = 1, depth = 1 ) {\n\n\t\t// We're going to add .setXXX() methods for setting properties later.\n\t\t// Users can still set in DataTexture3D directly.\n\t\t//\n\t\t//\tconst texture = new THREE.DataTexture3D( data, width, height, depth );\n\t\t// \ttexture.anisotropy = 16;\n\t\t//\n\t\t// See #14839\n\n\t\tsuper( null );\n\n\t\tthis.image = { data, width, height, depth };\n\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.unpackAlignment = 1;\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n}\n\nDataTexture3D.prototype.isDataTexture3D = true;\n\n/**\n * Uniforms of a program.\n * Those form a tree structure with a special top-level container for the root,\n * which you get by calling 'new WebGLUniforms( gl, program )'.\n *\n *\n * Properties of inner nodes including the top-level container:\n *\n * .seq - array of nested uniforms\n * .map - nested uniforms by name\n *\n *\n * Methods of all nodes except the top-level container:\n *\n * .setValue( gl, value, [textures] )\n *\n * \t\tuploads a uniform value(s)\n *  \tthe 'textures' parameter is needed for sampler uniforms\n *\n *\n * Static methods of the top-level container (textures factorizations):\n *\n * .upload( gl, seq, values, textures )\n *\n * \t\tsets uniforms in 'seq' to 'values[id].value'\n *\n * .seqWithValue( seq, values ) : filteredSeq\n *\n * \t\tfilters 'seq' entries with corresponding entry in values\n *\n *\n * Methods of the top-level container (textures factorizations):\n *\n * .setValue( gl, name, value, textures )\n *\n * \t\tsets uniform with  name 'name' to 'value'\n *\n * .setOptional( gl, obj, prop )\n *\n * \t\tlike .set for an optional property of the object\n *\n */\n\nconst emptyTexture = new Texture();\nconst emptyTexture2dArray = new DataTexture2DArray();\nconst emptyTexture3d = new DataTexture3D();\nconst emptyCubeTexture = new CubeTexture();\n\n// --- Utilities ---\n\n// Array Caches (provide typed arrays for temporary by size)\n\nconst arrayCacheF32 = [];\nconst arrayCacheI32 = [];\n\n// Float32Array caches used for uploading Matrix uniforms\n\nconst mat4array = new Float32Array( 16 );\nconst mat3array = new Float32Array( 9 );\nconst mat2array = new Float32Array( 4 );\n\n// Flattening for arrays of vectors and matrices\n\nfunction flatten( array, nBlocks, blockSize ) {\n\n\tconst firstElem = array[ 0 ];\n\n\tif ( firstElem <= 0 || firstElem > 0 ) return array;\n\t// unoptimized: ! isNaN( firstElem )\n\t// see http://jacksondunstan.com/articles/983\n\n\tconst n = nBlocks * blockSize;\n\tlet r = arrayCacheF32[ n ];\n\n\tif ( r === undefined ) {\n\n\t\tr = new Float32Array( n );\n\t\tarrayCacheF32[ n ] = r;\n\n\t}\n\n\tif ( nBlocks !== 0 ) {\n\n\t\tfirstElem.toArray( r, 0 );\n\n\t\tfor ( let i = 1, offset = 0; i !== nBlocks; ++ i ) {\n\n\t\t\toffset += blockSize;\n\t\t\tarray[ i ].toArray( r, offset );\n\n\t\t}\n\n\t}\n\n\treturn r;\n\n}\n\nfunction arraysEqual( a, b ) {\n\n\tif ( a.length !== b.length ) return false;\n\n\tfor ( let i = 0, l = a.length; i < l; i ++ ) {\n\n\t\tif ( a[ i ] !== b[ i ] ) return false;\n\n\t}\n\n\treturn true;\n\n}\n\nfunction copyArray( a, b ) {\n\n\tfor ( let i = 0, l = b.length; i < l; i ++ ) {\n\n\t\ta[ i ] = b[ i ];\n\n\t}\n\n}\n\n// Texture unit allocation\n\nfunction allocTexUnits( textures, n ) {\n\n\tlet r = arrayCacheI32[ n ];\n\n\tif ( r === undefined ) {\n\n\t\tr = new Int32Array( n );\n\t\tarrayCacheI32[ n ] = r;\n\n\t}\n\n\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\tr[ i ] = textures.allocateTextureUnit();\n\n\t}\n\n\treturn r;\n\n}\n\n// --- Setters ---\n\n// Note: Defining these methods externally, because they come in a bunch\n// and this way their names minify.\n\n// Single scalar\n\nfunction setValueV1f( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( cache[ 0 ] === v ) return;\n\n\tgl.uniform1f( this.addr, v );\n\n\tcache[ 0 ] = v;\n\n}\n\n// Single float vector (from flat array or THREE.VectorN)\n\nfunction setValueV2f( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {\n\n\t\t\tgl.uniform2f( this.addr, v.x, v.y );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform2fv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\nfunction setValueV3f( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {\n\n\t\t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\t\t\tcache[ 2 ] = v.z;\n\n\t\t}\n\n\t} else if ( v.r !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.r || cache[ 1 ] !== v.g || cache[ 2 ] !== v.b ) {\n\n\t\t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\n\n\t\t\tcache[ 0 ] = v.r;\n\t\t\tcache[ 1 ] = v.g;\n\t\t\tcache[ 2 ] = v.b;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform3fv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\nfunction setValueV4f( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {\n\n\t\t\tgl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\t\t\tcache[ 2 ] = v.z;\n\t\t\tcache[ 3 ] = v.w;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform4fv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\n// Single matrix (from flat array or THREE.MatrixN)\n\nfunction setValueM2( gl, v ) {\n\n\tconst cache = this.cache;\n\tconst elements = v.elements;\n\n\tif ( elements === undefined ) {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniformMatrix2fv( this.addr, false, v );\n\n\t\tcopyArray( cache, v );\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, elements ) ) return;\n\n\t\tmat2array.set( elements );\n\n\t\tgl.uniformMatrix2fv( this.addr, false, mat2array );\n\n\t\tcopyArray( cache, elements );\n\n\t}\n\n}\n\nfunction setValueM3( gl, v ) {\n\n\tconst cache = this.cache;\n\tconst elements = v.elements;\n\n\tif ( elements === undefined ) {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniformMatrix3fv( this.addr, false, v );\n\n\t\tcopyArray( cache, v );\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, elements ) ) return;\n\n\t\tmat3array.set( elements );\n\n\t\tgl.uniformMatrix3fv( this.addr, false, mat3array );\n\n\t\tcopyArray( cache, elements );\n\n\t}\n\n}\n\nfunction setValueM4( gl, v ) {\n\n\tconst cache = this.cache;\n\tconst elements = v.elements;\n\n\tif ( elements === undefined ) {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniformMatrix4fv( this.addr, false, v );\n\n\t\tcopyArray( cache, v );\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, elements ) ) return;\n\n\t\tmat4array.set( elements );\n\n\t\tgl.uniformMatrix4fv( this.addr, false, mat4array );\n\n\t\tcopyArray( cache, elements );\n\n\t}\n\n}\n\n// Single integer / boolean\n\nfunction setValueV1i( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( cache[ 0 ] === v ) return;\n\n\tgl.uniform1i( this.addr, v );\n\n\tcache[ 0 ] = v;\n\n}\n\n// Single integer / boolean vector (from flat array)\n\nfunction setValueV2i( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( arraysEqual( cache, v ) ) return;\n\n\tgl.uniform2iv( this.addr, v );\n\n\tcopyArray( cache, v );\n\n}\n\nfunction setValueV3i( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( arraysEqual( cache, v ) ) return;\n\n\tgl.uniform3iv( this.addr, v );\n\n\tcopyArray( cache, v );\n\n}\n\nfunction setValueV4i( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( arraysEqual( cache, v ) ) return;\n\n\tgl.uniform4iv( this.addr, v );\n\n\tcopyArray( cache, v );\n\n}\n\n// Single unsigned integer\n\nfunction setValueV1ui( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( cache[ 0 ] === v ) return;\n\n\tgl.uniform1ui( this.addr, v );\n\n\tcache[ 0 ] = v;\n\n}\n\n// Single unsigned integer vector (from flat array)\n\nfunction setValueV2ui( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( arraysEqual( cache, v ) ) return;\n\n\tgl.uniform2uiv( this.addr, v );\n\n\tcopyArray( cache, v );\n\n}\n\nfunction setValueV3ui( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( arraysEqual( cache, v ) ) return;\n\n\tgl.uniform3uiv( this.addr, v );\n\n\tcopyArray( cache, v );\n\n}\n\nfunction setValueV4ui( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( arraysEqual( cache, v ) ) return;\n\n\tgl.uniform4uiv( this.addr, v );\n\n\tcopyArray( cache, v );\n\n}\n\n\n// Single texture (2D / Cube)\n\nfunction setValueT1( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\tconst unit = textures.allocateTextureUnit();\n\n\tif ( cache[ 0 ] !== unit ) {\n\n\t\tgl.uniform1i( this.addr, unit );\n\t\tcache[ 0 ] = unit;\n\n\t}\n\n\ttextures.safeSetTexture2D( v || emptyTexture, unit );\n\n}\n\nfunction setValueT3D1( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\tconst unit = textures.allocateTextureUnit();\n\n\tif ( cache[ 0 ] !== unit ) {\n\n\t\tgl.uniform1i( this.addr, unit );\n\t\tcache[ 0 ] = unit;\n\n\t}\n\n\ttextures.setTexture3D( v || emptyTexture3d, unit );\n\n}\n\nfunction setValueT6( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\tconst unit = textures.allocateTextureUnit();\n\n\tif ( cache[ 0 ] !== unit ) {\n\n\t\tgl.uniform1i( this.addr, unit );\n\t\tcache[ 0 ] = unit;\n\n\t}\n\n\ttextures.safeSetTextureCube( v || emptyCubeTexture, unit );\n\n}\n\nfunction setValueT2DArray1( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\tconst unit = textures.allocateTextureUnit();\n\n\tif ( cache[ 0 ] !== unit ) {\n\n\t\tgl.uniform1i( this.addr, unit );\n\t\tcache[ 0 ] = unit;\n\n\t}\n\n\ttextures.setTexture2DArray( v || emptyTexture2dArray, unit );\n\n}\n\n// Helper to pick the right setter for the singular case\n\nfunction getSingularSetter( type ) {\n\n\tswitch ( type ) {\n\n\t\tcase 0x1406: return setValueV1f; // FLOAT\n\t\tcase 0x8b50: return setValueV2f; // _VEC2\n\t\tcase 0x8b51: return setValueV3f; // _VEC3\n\t\tcase 0x8b52: return setValueV4f; // _VEC4\n\n\t\tcase 0x8b5a: return setValueM2; // _MAT2\n\t\tcase 0x8b5b: return setValueM3; // _MAT3\n\t\tcase 0x8b5c: return setValueM4; // _MAT4\n\n\t\tcase 0x1404: case 0x8b56: return setValueV1i; // INT, BOOL\n\t\tcase 0x8b53: case 0x8b57: return setValueV2i; // _VEC2\n\t\tcase 0x8b54: case 0x8b58: return setValueV3i; // _VEC3\n\t\tcase 0x8b55: case 0x8b59: return setValueV4i; // _VEC4\n\n\t\tcase 0x1405: return setValueV1ui; // UINT\n\t\tcase 0x8dc6: return setValueV2ui; // _VEC2\n\t\tcase 0x8dc7: return setValueV3ui; // _VEC3\n\t\tcase 0x8dc8: return setValueV4ui; // _VEC4\n\n\t\tcase 0x8b5e: // SAMPLER_2D\n\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\t\tcase 0x8dca: // INT_SAMPLER_2D\n\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\t\tcase 0x8b62: // SAMPLER_2D_SHADOW\n\t\t\treturn setValueT1;\n\n\t\tcase 0x8b5f: // SAMPLER_3D\n\t\tcase 0x8dcb: // INT_SAMPLER_3D\n\t\tcase 0x8dd3: // UNSIGNED_INT_SAMPLER_3D\n\t\t\treturn setValueT3D1;\n\n\t\tcase 0x8b60: // SAMPLER_CUBE\n\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\t\tcase 0x8dc5: // SAMPLER_CUBE_SHADOW\n\t\t\treturn setValueT6;\n\n\t\tcase 0x8dc1: // SAMPLER_2D_ARRAY\n\t\tcase 0x8dcf: // INT_SAMPLER_2D_ARRAY\n\t\tcase 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY\n\t\tcase 0x8dc4: // SAMPLER_2D_ARRAY_SHADOW\n\t\t\treturn setValueT2DArray1;\n\n\t}\n\n}\n\n\n// Array of scalars\n\nfunction setValueV1fArray( gl, v ) {\n\n\tgl.uniform1fv( this.addr, v );\n\n}\n\n// Array of vectors (from flat array or array of THREE.VectorN)\n\nfunction setValueV2fArray( gl, v ) {\n\n\tconst data = flatten( v, this.size, 2 );\n\n\tgl.uniform2fv( this.addr, data );\n\n}\n\nfunction setValueV3fArray( gl, v ) {\n\n\tconst data = flatten( v, this.size, 3 );\n\n\tgl.uniform3fv( this.addr, data );\n\n}\n\nfunction setValueV4fArray( gl, v ) {\n\n\tconst data = flatten( v, this.size, 4 );\n\n\tgl.uniform4fv( this.addr, data );\n\n}\n\n// Array of matrices (from flat array or array of THREE.MatrixN)\n\nfunction setValueM2Array( gl, v ) {\n\n\tconst data = flatten( v, this.size, 4 );\n\n\tgl.uniformMatrix2fv( this.addr, false, data );\n\n}\n\nfunction setValueM3Array( gl, v ) {\n\n\tconst data = flatten( v, this.size, 9 );\n\n\tgl.uniformMatrix3fv( this.addr, false, data );\n\n}\n\nfunction setValueM4Array( gl, v ) {\n\n\tconst data = flatten( v, this.size, 16 );\n\n\tgl.uniformMatrix4fv( this.addr, false, data );\n\n}\n\n// Array of integer / boolean\n\nfunction setValueV1iArray( gl, v ) {\n\n\tgl.uniform1iv( this.addr, v );\n\n}\n\n// Array of integer / boolean vectors (from flat array)\n\nfunction setValueV2iArray( gl, v ) {\n\n\tgl.uniform2iv( this.addr, v );\n\n}\n\nfunction setValueV3iArray( gl, v ) {\n\n\tgl.uniform3iv( this.addr, v );\n\n}\n\nfunction setValueV4iArray( gl, v ) {\n\n\tgl.uniform4iv( this.addr, v );\n\n}\n\n// Array of unsigned integer\n\nfunction setValueV1uiArray( gl, v ) {\n\n\tgl.uniform1uiv( this.addr, v );\n\n}\n\n// Array of unsigned integer vectors (from flat array)\n\nfunction setValueV2uiArray( gl, v ) {\n\n\tgl.uniform2uiv( this.addr, v );\n\n}\n\nfunction setValueV3uiArray( gl, v ) {\n\n\tgl.uniform3uiv( this.addr, v );\n\n}\n\nfunction setValueV4uiArray( gl, v ) {\n\n\tgl.uniform4uiv( this.addr, v );\n\n}\n\n\n// Array of textures (2D / 3D / Cube / 2DArray)\n\nfunction setValueT1Array( gl, v, textures ) {\n\n\tconst n = v.length;\n\n\tconst units = allocTexUnits( textures, n );\n\n\tgl.uniform1iv( this.addr, units );\n\n\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\ttextures.safeSetTexture2D( v[ i ] || emptyTexture, units[ i ] );\n\n\t}\n\n}\n\nfunction setValueT3DArray( gl, v, textures ) {\n\n\tconst n = v.length;\n\n\tconst units = allocTexUnits( textures, n );\n\n\tgl.uniform1iv( this.addr, units );\n\n\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\ttextures.setTexture3D( v[ i ] || emptyTexture3d, units[ i ] );\n\n\t}\n\n}\n\nfunction setValueT6Array( gl, v, textures ) {\n\n\tconst n = v.length;\n\n\tconst units = allocTexUnits( textures, n );\n\n\tgl.uniform1iv( this.addr, units );\n\n\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\ttextures.safeSetTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\n\n\t}\n\n}\n\nfunction setValueT2DArrayArray( gl, v, textures ) {\n\n\tconst n = v.length;\n\n\tconst units = allocTexUnits( textures, n );\n\n\tgl.uniform1iv( this.addr, units );\n\n\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\ttextures.setTexture2DArray( v[ i ] || emptyTexture2dArray, units[ i ] );\n\n\t}\n\n}\n\n\n// Helper to pick the right setter for a pure (bottom-level) array\n\nfunction getPureArraySetter( type ) {\n\n\tswitch ( type ) {\n\n\t\tcase 0x1406: return setValueV1fArray; // FLOAT\n\t\tcase 0x8b50: return setValueV2fArray; // _VEC2\n\t\tcase 0x8b51: return setValueV3fArray; // _VEC3\n\t\tcase 0x8b52: return setValueV4fArray; // _VEC4\n\n\t\tcase 0x8b5a: return setValueM2Array; // _MAT2\n\t\tcase 0x8b5b: return setValueM3Array; // _MAT3\n\t\tcase 0x8b5c: return setValueM4Array; // _MAT4\n\n\t\tcase 0x1404: case 0x8b56: return setValueV1iArray; // INT, BOOL\n\t\tcase 0x8b53: case 0x8b57: return setValueV2iArray; // _VEC2\n\t\tcase 0x8b54: case 0x8b58: return setValueV3iArray; // _VEC3\n\t\tcase 0x8b55: case 0x8b59: return setValueV4iArray; // _VEC4\n\n\t\tcase 0x1405: return setValueV1uiArray; // UINT\n\t\tcase 0x8dc6: return setValueV2uiArray; // _VEC2\n\t\tcase 0x8dc7: return setValueV3uiArray; // _VEC3\n\t\tcase 0x8dc8: return setValueV4uiArray; // _VEC4\n\n\t\tcase 0x8b5e: // SAMPLER_2D\n\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\t\tcase 0x8dca: // INT_SAMPLER_2D\n\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\t\tcase 0x8b62: // SAMPLER_2D_SHADOW\n\t\t\treturn setValueT1Array;\n\n\t\tcase 0x8b5f: // SAMPLER_3D\n\t\tcase 0x8dcb: // INT_SAMPLER_3D\n\t\tcase 0x8dd3: // UNSIGNED_INT_SAMPLER_3D\n\t\t\treturn setValueT3DArray;\n\n\t\tcase 0x8b60: // SAMPLER_CUBE\n\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\t\tcase 0x8dc5: // SAMPLER_CUBE_SHADOW\n\t\t\treturn setValueT6Array;\n\n\t\tcase 0x8dc1: // SAMPLER_2D_ARRAY\n\t\tcase 0x8dcf: // INT_SAMPLER_2D_ARRAY\n\t\tcase 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY\n\t\tcase 0x8dc4: // SAMPLER_2D_ARRAY_SHADOW\n\t\t\treturn setValueT2DArrayArray;\n\n\t}\n\n}\n\n// --- Uniform Classes ---\n\nfunction SingleUniform( id, activeInfo, addr ) {\n\n\tthis.id = id;\n\tthis.addr = addr;\n\tthis.cache = [];\n\tthis.setValue = getSingularSetter( activeInfo.type );\n\n\t// this.path = activeInfo.name; // DEBUG\n\n}\n\nfunction PureArrayUniform( id, activeInfo, addr ) {\n\n\tthis.id = id;\n\tthis.addr = addr;\n\tthis.cache = [];\n\tthis.size = activeInfo.size;\n\tthis.setValue = getPureArraySetter( activeInfo.type );\n\n\t// this.path = activeInfo.name; // DEBUG\n\n}\n\nPureArrayUniform.prototype.updateCache = function ( data ) {\n\n\tconst cache = this.cache;\n\n\tif ( data instanceof Float32Array && cache.length !== data.length ) {\n\n\t\tthis.cache = new Float32Array( data.length );\n\n\t}\n\n\tcopyArray( cache, data );\n\n};\n\nfunction StructuredUniform( id ) {\n\n\tthis.id = id;\n\n\tthis.seq = [];\n\tthis.map = {};\n\n}\n\nStructuredUniform.prototype.setValue = function ( gl, value, textures ) {\n\n\tconst seq = this.seq;\n\n\tfor ( let i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\tconst u = seq[ i ];\n\t\tu.setValue( gl, value[ u.id ], textures );\n\n\t}\n\n};\n\n// --- Top-level ---\n\n// Parser - builds up the property tree from the path strings\n\nconst RePathPart = /(\\w+)(\\])?(\\[|\\.)?/g;\n\n// extracts\n// \t- the identifier (member name or array index)\n//  - followed by an optional right bracket (found when array index)\n//  - followed by an optional left bracket or dot (type of subscript)\n//\n// Note: These portions can be read in a non-overlapping fashion and\n// allow straightforward parsing of the hierarchy that WebGL encodes\n// in the uniform names.\n\nfunction addUniform( container, uniformObject ) {\n\n\tcontainer.seq.push( uniformObject );\n\tcontainer.map[ uniformObject.id ] = uniformObject;\n\n}\n\nfunction parseUniform( activeInfo, addr, container ) {\n\n\tconst path = activeInfo.name,\n\t\tpathLength = path.length;\n\n\t// reset RegExp object, because of the early exit of a previous run\n\tRePathPart.lastIndex = 0;\n\n\twhile ( true ) {\n\n\t\tconst match = RePathPart.exec( path ),\n\t\t\tmatchEnd = RePathPart.lastIndex;\n\n\t\tlet id = match[ 1 ];\n\t\tconst idIsIndex = match[ 2 ] === ']',\n\t\t\tsubscript = match[ 3 ];\n\n\t\tif ( idIsIndex ) id = id | 0; // convert to integer\n\n\t\tif ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {\n\n\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\n\t\t\taddUniform( container, subscript === undefined ?\n\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\n\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\n\n\t\t\tbreak;\n\n\t\t} else {\n\n\t\t\t// step into inner node / create it in case it doesn't exist\n\n\t\t\tconst map = container.map;\n\t\t\tlet next = map[ id ];\n\n\t\t\tif ( next === undefined ) {\n\n\t\t\t\tnext = new StructuredUniform( id );\n\t\t\t\taddUniform( container, next );\n\n\t\t\t}\n\n\t\t\tcontainer = next;\n\n\t\t}\n\n\t}\n\n}\n\n// Root Container\n\nfunction WebGLUniforms( gl, program ) {\n\n\tthis.seq = [];\n\tthis.map = {};\n\n\tconst n = gl.getProgramParameter( program, 35718 );\n\n\tfor ( let i = 0; i < n; ++ i ) {\n\n\t\tconst info = gl.getActiveUniform( program, i ),\n\t\t\taddr = gl.getUniformLocation( program, info.name );\n\n\t\tparseUniform( info, addr, this );\n\n\t}\n\n}\n\nWebGLUniforms.prototype.setValue = function ( gl, name, value, textures ) {\n\n\tconst u = this.map[ name ];\n\n\tif ( u !== undefined ) u.setValue( gl, value, textures );\n\n};\n\nWebGLUniforms.prototype.setOptional = function ( gl, object, name ) {\n\n\tconst v = object[ name ];\n\n\tif ( v !== undefined ) this.setValue( gl, name, v );\n\n};\n\n\n// Static interface\n\nWebGLUniforms.upload = function ( gl, seq, values, textures ) {\n\n\tfor ( let i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\tconst u = seq[ i ],\n\t\t\tv = values[ u.id ];\n\n\t\tif ( v.needsUpdate !== false ) {\n\n\t\t\t// note: always updating when .needsUpdate is undefined\n\t\t\tu.setValue( gl, v.value, textures );\n\n\t\t}\n\n\t}\n\n};\n\nWebGLUniforms.seqWithValue = function ( seq, values ) {\n\n\tconst r = [];\n\n\tfor ( let i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\tconst u = seq[ i ];\n\t\tif ( u.id in values ) r.push( u );\n\n\t}\n\n\treturn r;\n\n};\n\nfunction WebGLShader( gl, type, string ) {\n\n\tconst shader = gl.createShader( type );\n\n\tgl.shaderSource( shader, string );\n\tgl.compileShader( shader );\n\n\treturn shader;\n\n}\n\nlet programIdCount = 0;\n\nfunction addLineNumbers( string ) {\n\n\tconst lines = string.split( '\\n' );\n\n\tfor ( let i = 0; i < lines.length; i ++ ) {\n\n\t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\n\n\t}\n\n\treturn lines.join( '\\n' );\n\n}\n\nfunction getEncodingComponents( encoding ) {\n\n\tswitch ( encoding ) {\n\n\t\tcase LinearEncoding:\n\t\t\treturn [ 'Linear', '( value )' ];\n\t\tcase sRGBEncoding:\n\t\t\treturn [ 'sRGB', '( value )' ];\n\t\tcase RGBEEncoding:\n\t\t\treturn [ 'RGBE', '( value )' ];\n\t\tcase RGBM7Encoding:\n\t\t\treturn [ 'RGBM', '( value, 7.0 )' ];\n\t\tcase RGBM16Encoding:\n\t\t\treturn [ 'RGBM', '( value, 16.0 )' ];\n\t\tcase RGBDEncoding:\n\t\t\treturn [ 'RGBD', '( value, 256.0 )' ];\n\t\tcase GammaEncoding:\n\t\t\treturn [ 'Gamma', '( value, float( GAMMA_FACTOR ) )' ];\n\t\tdefault:\n\t\t\tconsole.warn( 'THREE.WebGLProgram: Unsupported encoding:', encoding );\n\t\t\treturn [ 'Linear', '( value )' ];\n\n\t}\n\n}\n\nfunction getShaderErrors( gl, shader, type ) {\n\n\tconst status = gl.getShaderParameter( shader, 35713 );\n\tconst errors = gl.getShaderInfoLog( shader ).trim();\n\n\tif ( status && errors === '' ) return '';\n\n\t// --enable-privileged-webgl-extension\n\t// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n\treturn type.toUpperCase() + '\\n\\n' + errors + '\\n\\n' + addLineNumbers( gl.getShaderSource( shader ) );\n\n}\n\nfunction getTexelDecodingFunction( functionName, encoding ) {\n\n\tconst components = getEncodingComponents( encoding );\n\treturn 'vec4 ' + functionName + '( vec4 value ) { return ' + components[ 0 ] + 'ToLinear' + components[ 1 ] + '; }';\n\n}\n\nfunction getTexelEncodingFunction( functionName, encoding ) {\n\n\tconst components = getEncodingComponents( encoding );\n\treturn 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[ 0 ] + components[ 1 ] + '; }';\n\n}\n\nfunction getToneMappingFunction( functionName, toneMapping ) {\n\n\tlet toneMappingName;\n\n\tswitch ( toneMapping ) {\n\n\t\tcase LinearToneMapping:\n\t\t\ttoneMappingName = 'Linear';\n\t\t\tbreak;\n\n\t\tcase ReinhardToneMapping:\n\t\t\ttoneMappingName = 'Reinhard';\n\t\t\tbreak;\n\n\t\tcase CineonToneMapping:\n\t\t\ttoneMappingName = 'OptimizedCineon';\n\t\t\tbreak;\n\n\t\tcase ACESFilmicToneMapping:\n\t\t\ttoneMappingName = 'ACESFilmic';\n\t\t\tbreak;\n\n\t\tcase CustomToneMapping:\n\t\t\ttoneMappingName = 'Custom';\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tconsole.warn( 'THREE.WebGLProgram: Unsupported toneMapping:', toneMapping );\n\t\t\ttoneMappingName = 'Linear';\n\n\t}\n\n\treturn 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';\n\n}\n\nfunction generateExtensions( parameters ) {\n\n\tconst chunks = [\n\t\t( parameters.extensionDerivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.tangentSpaceNormalMap || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === 'physical' ) ? '#extension GL_OES_standard_derivatives : enable' : '',\n\t\t( parameters.extensionFragDepth || parameters.logarithmicDepthBuffer ) && parameters.rendererExtensionFragDepth ? '#extension GL_EXT_frag_depth : enable' : '',\n\t\t( parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ) ? '#extension GL_EXT_draw_buffers : require' : '',\n\t\t( parameters.extensionShaderTextureLOD || parameters.envMap || parameters.transmission ) && parameters.rendererExtensionShaderTextureLod ? '#extension GL_EXT_shader_texture_lod : enable' : ''\n\t];\n\n\treturn chunks.filter( filterEmptyLine ).join( '\\n' );\n\n}\n\nfunction generateDefines( defines ) {\n\n\tconst chunks = [];\n\n\tfor ( const name in defines ) {\n\n\t\tconst value = defines[ name ];\n\n\t\tif ( value === false ) continue;\n\n\t\tchunks.push( '#define ' + name + ' ' + value );\n\n\t}\n\n\treturn chunks.join( '\\n' );\n\n}\n\nfunction fetchAttributeLocations( gl, program ) {\n\n\tconst attributes = {};\n\n\tconst n = gl.getProgramParameter( program, 35721 );\n\n\tfor ( let i = 0; i < n; i ++ ) {\n\n\t\tconst info = gl.getActiveAttrib( program, i );\n\t\tconst name = info.name;\n\n\t\tlet locationSize = 1;\n\t\tif ( info.type === 35674 ) locationSize = 2;\n\t\tif ( info.type === 35675 ) locationSize = 3;\n\t\tif ( info.type === 35676 ) locationSize = 4;\n\n\t\t// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\n\n\t\tattributes[ name ] = {\n\t\t\ttype: info.type,\n\t\t\tlocation: gl.getAttribLocation( program, name ),\n\t\t\tlocationSize: locationSize\n\t\t};\n\n\t}\n\n\treturn attributes;\n\n}\n\nfunction filterEmptyLine( string ) {\n\n\treturn string !== '';\n\n}\n\nfunction replaceLightNums( string, parameters ) {\n\n\treturn string\n\t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\n\t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\n\t\t.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )\n\t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\n\t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights )\n\t\t.replace( /NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows )\n\t\t.replace( /NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows )\n\t\t.replace( /NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows );\n\n}\n\nfunction replaceClippingPlaneNums( string, parameters ) {\n\n\treturn string\n\t\t.replace( /NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes )\n\t\t.replace( /UNION_CLIPPING_PLANES/g, ( parameters.numClippingPlanes - parameters.numClipIntersection ) );\n\n}\n\n// Resolve Includes\n\nconst includePattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\n\nfunction resolveIncludes( string ) {\n\n\treturn string.replace( includePattern, includeReplacer );\n\n}\n\nfunction includeReplacer( match, include ) {\n\n\tconst string = ShaderChunk[ include ];\n\n\tif ( string === undefined ) {\n\n\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\n\n\t}\n\n\treturn resolveIncludes( string );\n\n}\n\n// Unroll Loops\n\nconst deprecatedUnrollLoopPattern = /#pragma unroll_loop[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\nconst unrollLoopPattern = /#pragma unroll_loop_start\\s+for\\s*\\(\\s*int\\s+i\\s*=\\s*(\\d+)\\s*;\\s*i\\s*<\\s*(\\d+)\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{([\\s\\S]+?)}\\s+#pragma unroll_loop_end/g;\n\nfunction unrollLoops( string ) {\n\n\treturn string\n\t\t.replace( unrollLoopPattern, loopReplacer )\n\t\t.replace( deprecatedUnrollLoopPattern, deprecatedLoopReplacer );\n\n}\n\nfunction deprecatedLoopReplacer( match, start, end, snippet ) {\n\n\tconsole.warn( 'WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.' );\n\treturn loopReplacer( match, start, end, snippet );\n\n}\n\nfunction loopReplacer( match, start, end, snippet ) {\n\n\tlet string = '';\n\n\tfor ( let i = parseInt( start ); i < parseInt( end ); i ++ ) {\n\n\t\tstring += snippet\n\t\t\t.replace( /\\[\\s*i\\s*\\]/g, '[ ' + i + ' ]' )\n\t\t\t.replace( /UNROLLED_LOOP_INDEX/g, i );\n\n\t}\n\n\treturn string;\n\n}\n\n//\n\nfunction generatePrecision( parameters ) {\n\n\tlet precisionstring = 'precision ' + parameters.precision + ' float;\\nprecision ' + parameters.precision + ' int;';\n\n\tif ( parameters.precision === 'highp' ) {\n\n\t\tprecisionstring += '\\n#define HIGH_PRECISION';\n\n\t} else if ( parameters.precision === 'mediump' ) {\n\n\t\tprecisionstring += '\\n#define MEDIUM_PRECISION';\n\n\t} else if ( parameters.precision === 'lowp' ) {\n\n\t\tprecisionstring += '\\n#define LOW_PRECISION';\n\n\t}\n\n\treturn precisionstring;\n\n}\n\nfunction generateShadowMapTypeDefine( parameters ) {\n\n\tlet shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n\tif ( parameters.shadowMapType === PCFShadowMap ) {\n\n\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\n\t} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {\n\n\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\n\t} else if ( parameters.shadowMapType === VSMShadowMap ) {\n\n\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';\n\n\t}\n\n\treturn shadowMapTypeDefine;\n\n}\n\nfunction generateEnvMapTypeDefine( parameters ) {\n\n\tlet envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\n\tif ( parameters.envMap ) {\n\n\t\tswitch ( parameters.envMapMode ) {\n\n\t\t\tcase CubeReflectionMapping:\n\t\t\tcase CubeRefractionMapping:\n\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\t\tbreak;\n\n\t\t\tcase CubeUVReflectionMapping:\n\t\t\tcase CubeUVRefractionMapping:\n\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\treturn envMapTypeDefine;\n\n}\n\nfunction generateEnvMapModeDefine( parameters ) {\n\n\tlet envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\n\tif ( parameters.envMap ) {\n\n\t\tswitch ( parameters.envMapMode ) {\n\n\t\t\tcase CubeRefractionMapping:\n\t\t\tcase CubeUVRefractionMapping:\n\n\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\treturn envMapModeDefine;\n\n}\n\nfunction generateEnvMapBlendingDefine( parameters ) {\n\n\tlet envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';\n\n\tif ( parameters.envMap ) {\n\n\t\tswitch ( parameters.combine ) {\n\n\t\t\tcase MultiplyOperation:\n\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\t\t\tbreak;\n\n\t\t\tcase MixOperation:\n\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t\t\t\tbreak;\n\n\t\t\tcase AddOperation:\n\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\treturn envMapBlendingDefine;\n\n}\n\nfunction WebGLProgram( renderer, cacheKey, parameters, bindingStates ) {\n\n\t// TODO Send this event to Three.js DevTools\n\t// console.log( 'WebGLProgram', cacheKey );\n\n\tconst gl = renderer.getContext();\n\n\tconst defines = parameters.defines;\n\n\tlet vertexShader = parameters.vertexShader;\n\tlet fragmentShader = parameters.fragmentShader;\n\n\tconst shadowMapTypeDefine = generateShadowMapTypeDefine( parameters );\n\tconst envMapTypeDefine = generateEnvMapTypeDefine( parameters );\n\tconst envMapModeDefine = generateEnvMapModeDefine( parameters );\n\tconst envMapBlendingDefine = generateEnvMapBlendingDefine( parameters );\n\n\n\tconst gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\n\n\tconst customExtensions = parameters.isWebGL2 ? '' : generateExtensions( parameters );\n\n\tconst customDefines = generateDefines( defines );\n\n\tconst program = gl.createProgram();\n\n\tlet prefixVertex, prefixFragment;\n\tlet versionString = parameters.glslVersion ? '#version ' + parameters.glslVersion + '\\n' : '';\n\n\tif ( parameters.isRawShaderMaterial ) {\n\n\t\tprefixVertex = [\n\n\t\t\tcustomDefines\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\tif ( prefixVertex.length > 0 ) {\n\n\t\t\tprefixVertex += '\\n';\n\n\t\t}\n\n\t\tprefixFragment = [\n\n\t\t\tcustomExtensions,\n\t\t\tcustomDefines\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\tif ( prefixFragment.length > 0 ) {\n\n\t\t\tprefixFragment += '\\n';\n\n\t\t}\n\n\t} else {\n\n\t\tprefixVertex = [\n\n\t\t\tgeneratePrecision( parameters ),\n\n\t\t\t'#define SHADER_NAME ' + parameters.shaderName,\n\n\t\t\tcustomDefines,\n\n\t\t\tparameters.instancing ? '#define USE_INSTANCING' : '',\n\t\t\tparameters.instancingColor ? '#define USE_INSTANCING_COLOR' : '',\n\n\t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\n\n\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t'#define MAX_BONES ' + parameters.maxBones,\n\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',\n\n\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',\n\t\t\t( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',\n\n\t\t\tparameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',\n\t\t\tparameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',\n\t\t\tparameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\n\n\t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\n\n\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\tparameters.specularIntensityMap ? '#define USE_SPECULARINTENSITYMAP' : '',\n\t\t\tparameters.specularColorMap ? '#define USE_SPECULARCOLORMAP' : '',\n\n\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\n\t\t\tparameters.transmission ? '#define USE_TRANSMISSION' : '',\n\t\t\tparameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',\n\t\t\tparameters.thicknessMap ? '#define USE_THICKNESSMAP' : '',\n\n\t\t\tparameters.sheenColorMap ? '#define USE_SHEENCOLORMAP' : '',\n\t\t\tparameters.sheenRoughnessMap ? '#define USE_SHEENROUGHNESSMAP' : '',\n\n\t\t\tparameters.vertexTangents ? '#define USE_TANGENT' : '',\n\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\t\t\tparameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',\n\t\t\tparameters.vertexUvs ? '#define USE_UV' : '',\n\t\t\tparameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',\n\n\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\n\t\t\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\n\n\t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\n\t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\n\t\t\t( parameters.morphTargets && parameters.isWebGL2 ) ? '#define MORPHTARGETS_TEXTURE' : '',\n\t\t\t( parameters.morphTargets && parameters.isWebGL2 ) ? '#define MORPHTARGETS_COUNT ' + parameters.morphTargetsCount : '',\n\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\n\n\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t'uniform mat4 modelMatrix;',\n\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t'uniform mat3 normalMatrix;',\n\t\t\t'uniform vec3 cameraPosition;',\n\t\t\t'uniform bool isOrthographic;',\n\n\t\t\t'#ifdef USE_INSTANCING',\n\n\t\t\t'\tattribute mat4 instanceMatrix;',\n\n\t\t\t'#endif',\n\n\t\t\t'#ifdef USE_INSTANCING_COLOR',\n\n\t\t\t'\tattribute vec3 instanceColor;',\n\n\t\t\t'#endif',\n\n\t\t\t'attribute vec3 position;',\n\t\t\t'attribute vec3 normal;',\n\t\t\t'attribute vec2 uv;',\n\n\t\t\t'#ifdef USE_TANGENT',\n\n\t\t\t'\tattribute vec4 tangent;',\n\n\t\t\t'#endif',\n\n\t\t\t'#if defined( USE_COLOR_ALPHA )',\n\n\t\t\t'\tattribute vec4 color;',\n\n\t\t\t'#elif defined( USE_COLOR )',\n\n\t\t\t'\tattribute vec3 color;',\n\n\t\t\t'#endif',\n\n\t\t\t'#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )',\n\n\t\t\t'\tattribute vec3 morphTarget0;',\n\t\t\t'\tattribute vec3 morphTarget1;',\n\t\t\t'\tattribute vec3 morphTarget2;',\n\t\t\t'\tattribute vec3 morphTarget3;',\n\n\t\t\t'\t#ifdef USE_MORPHNORMALS',\n\n\t\t\t'\t\tattribute vec3 morphNormal0;',\n\t\t\t'\t\tattribute vec3 morphNormal1;',\n\t\t\t'\t\tattribute vec3 morphNormal2;',\n\t\t\t'\t\tattribute vec3 morphNormal3;',\n\n\t\t\t'\t#else',\n\n\t\t\t'\t\tattribute vec3 morphTarget4;',\n\t\t\t'\t\tattribute vec3 morphTarget5;',\n\t\t\t'\t\tattribute vec3 morphTarget6;',\n\t\t\t'\t\tattribute vec3 morphTarget7;',\n\n\t\t\t'\t#endif',\n\n\t\t\t'#endif',\n\n\t\t\t'#ifdef USE_SKINNING',\n\n\t\t\t'\tattribute vec4 skinIndex;',\n\t\t\t'\tattribute vec4 skinWeight;',\n\n\t\t\t'#endif',\n\n\t\t\t'\\n'\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\tprefixFragment = [\n\n\t\t\tcustomExtensions,\n\n\t\t\tgeneratePrecision( parameters ),\n\n\t\t\t'#define SHADER_NAME ' + parameters.shaderName,\n\n\t\t\tcustomDefines,\n\n\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\n\n\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\n\t\t\t( parameters.useFog && parameters.fogExp2 ) ? '#define FOG_EXP2' : '',\n\n\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\tparameters.matcap ? '#define USE_MATCAP' : '',\n\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\n\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\n\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\t( parameters.normalMap && parameters.objectSpaceNormalMap ) ? '#define OBJECTSPACE_NORMALMAP' : '',\n\t\t\t( parameters.normalMap && parameters.tangentSpaceNormalMap ) ? '#define TANGENTSPACE_NORMALMAP' : '',\n\n\t\t\tparameters.clearcoat ? '#define USE_CLEARCOAT' : '',\n\t\t\tparameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',\n\t\t\tparameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',\n\t\t\tparameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\n\n\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\tparameters.specularIntensityMap ? '#define USE_SPECULARINTENSITYMAP' : '',\n\t\t\tparameters.specularColorMap ? '#define USE_SPECULARCOLORMAP' : '',\n\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\n\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t\t\tparameters.alphaTest ? '#define USE_ALPHATEST' : '',\n\n\t\t\tparameters.sheen ? '#define USE_SHEEN' : '',\n\t\t\tparameters.sheenColorMap ? '#define USE_SHEENCOLORMAP' : '',\n\t\t\tparameters.sheenRoughnessMap ? '#define USE_SHEENROUGHNESSMAP' : '',\n\n\t\t\tparameters.transmission ? '#define USE_TRANSMISSION' : '',\n\t\t\tparameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',\n\t\t\tparameters.thicknessMap ? '#define USE_THICKNESSMAP' : '',\n\n\t\t\tparameters.vertexTangents ? '#define USE_TANGENT' : '',\n\t\t\tparameters.vertexColors || parameters.instancingColor ? '#define USE_COLOR' : '',\n\t\t\tparameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',\n\t\t\tparameters.vertexUvs ? '#define USE_UV' : '',\n\t\t\tparameters.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',\n\n\t\t\tparameters.gradientMap ? '#define USE_GRADIENTMAP' : '',\n\n\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\tparameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',\n\n\t\t\tparameters.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',\n\n\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t( ( parameters.extensionShaderTextureLOD || parameters.envMap ) && parameters.rendererExtensionShaderTextureLod ) ? '#define TEXTURE_LOD_EXT' : '',\n\n\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t'uniform vec3 cameraPosition;',\n\t\t\t'uniform bool isOrthographic;',\n\n\t\t\t( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',\n\t\t\t( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below\n\t\t\t( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',\n\n\t\t\tparameters.dithering ? '#define DITHERING' : '',\n\t\t\tparameters.format === RGBFormat ? '#define OPAQUE' : '',\n\n\t\t\tShaderChunk[ 'encodings_pars_fragment' ], // this code is required here because it is used by the various encoding/decoding function defined below\n\t\t\tparameters.map ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',\n\t\t\tparameters.matcap ? getTexelDecodingFunction( 'matcapTexelToLinear', parameters.matcapEncoding ) : '',\n\t\t\tparameters.envMap ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',\n\t\t\tparameters.emissiveMap ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',\n\t\t\tparameters.specularColorMap ? getTexelDecodingFunction( 'specularColorMapTexelToLinear', parameters.specularColorMapEncoding ) : '',\n\t\t\tparameters.sheenColorMap ? getTexelDecodingFunction( 'sheenColorMapTexelToLinear', parameters.sheenColorMapEncoding ) : '',\n\t\t\tparameters.lightMap ? getTexelDecodingFunction( 'lightMapTexelToLinear', parameters.lightMapEncoding ) : '',\n\t\t\tgetTexelEncodingFunction( 'linearToOutputTexel', parameters.outputEncoding ),\n\n\t\t\tparameters.depthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '',\n\n\t\t\t'\\n'\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t}\n\n\tvertexShader = resolveIncludes( vertexShader );\n\tvertexShader = replaceLightNums( vertexShader, parameters );\n\tvertexShader = replaceClippingPlaneNums( vertexShader, parameters );\n\n\tfragmentShader = resolveIncludes( fragmentShader );\n\tfragmentShader = replaceLightNums( fragmentShader, parameters );\n\tfragmentShader = replaceClippingPlaneNums( fragmentShader, parameters );\n\n\tvertexShader = unrollLoops( vertexShader );\n\tfragmentShader = unrollLoops( fragmentShader );\n\n\tif ( parameters.isWebGL2 && parameters.isRawShaderMaterial !== true ) {\n\n\t\t// GLSL 3.0 conversion for built-in materials and ShaderMaterial\n\n\t\tversionString = '#version 300 es\\n';\n\n\t\tprefixVertex = [\n\t\t\t'precision mediump sampler2DArray;',\n\t\t\t'#define attribute in',\n\t\t\t'#define varying out',\n\t\t\t'#define texture2D texture'\n\t\t].join( '\\n' ) + '\\n' + prefixVertex;\n\n\t\tprefixFragment = [\n\t\t\t'#define varying in',\n\t\t\t( parameters.glslVersion === GLSL3 ) ? '' : 'out highp vec4 pc_fragColor;',\n\t\t\t( parameters.glslVersion === GLSL3 ) ? '' : '#define gl_FragColor pc_fragColor',\n\t\t\t'#define gl_FragDepthEXT gl_FragDepth',\n\t\t\t'#define texture2D texture',\n\t\t\t'#define textureCube texture',\n\t\t\t'#define texture2DProj textureProj',\n\t\t\t'#define texture2DLodEXT textureLod',\n\t\t\t'#define texture2DProjLodEXT textureProjLod',\n\t\t\t'#define textureCubeLodEXT textureLod',\n\t\t\t'#define texture2DGradEXT textureGrad',\n\t\t\t'#define texture2DProjGradEXT textureProjGrad',\n\t\t\t'#define textureCubeGradEXT textureGrad'\n\t\t].join( '\\n' ) + '\\n' + prefixFragment;\n\n\t}\n\n\tconst vertexGlsl = versionString + prefixVertex + vertexShader;\n\tconst fragmentGlsl = versionString + prefixFragment + fragmentShader;\n\n\t// console.log( '*VERTEX*', vertexGlsl );\n\t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n\tconst glVertexShader = WebGLShader( gl, 35633, vertexGlsl );\n\tconst glFragmentShader = WebGLShader( gl, 35632, fragmentGlsl );\n\n\tgl.attachShader( program, glVertexShader );\n\tgl.attachShader( program, glFragmentShader );\n\n\t// Force a particular attribute to index 0.\n\n\tif ( parameters.index0AttributeName !== undefined ) {\n\n\t\tgl.bindAttribLocation( program, 0, parameters.index0AttributeName );\n\n\t} else if ( parameters.morphTargets === true ) {\n\n\t\t// programs with morphTargets displace position out of attribute 0\n\t\tgl.bindAttribLocation( program, 0, 'position' );\n\n\t}\n\n\tgl.linkProgram( program );\n\n\t// check for link errors\n\tif ( renderer.debug.checkShaderErrors ) {\n\n\t\tconst programLog = gl.getProgramInfoLog( program ).trim();\n\t\tconst vertexLog = gl.getShaderInfoLog( glVertexShader ).trim();\n\t\tconst fragmentLog = gl.getShaderInfoLog( glFragmentShader ).trim();\n\n\t\tlet runnable = true;\n\t\tlet haveDiagnostics = true;\n\n\t\tif ( gl.getProgramParameter( program, 35714 ) === false ) {\n\n\t\t\trunnable = false;\n\n\t\t\tconst vertexErrors = getShaderErrors( gl, glVertexShader, 'vertex' );\n\t\t\tconst fragmentErrors = getShaderErrors( gl, glFragmentShader, 'fragment' );\n\n\t\t\tconsole.error(\n\t\t\t\t'THREE.WebGLProgram: Shader Error ' + gl.getError() + ' - ' +\n\t\t\t\t'VALIDATE_STATUS ' + gl.getProgramParameter( program, 35715 ) + '\\n\\n' +\n\t\t\t\t'Program Info Log: ' + programLog + '\\n' +\n\t\t\t\tvertexErrors + '\\n' +\n\t\t\t\tfragmentErrors\n\t\t\t);\n\n\t\t} else if ( programLog !== '' ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLProgram: Program Info Log:', programLog );\n\n\t\t} else if ( vertexLog === '' || fragmentLog === '' ) {\n\n\t\t\thaveDiagnostics = false;\n\n\t\t}\n\n\t\tif ( haveDiagnostics ) {\n\n\t\t\tthis.diagnostics = {\n\n\t\t\t\trunnable: runnable,\n\n\t\t\t\tprogramLog: programLog,\n\n\t\t\t\tvertexShader: {\n\n\t\t\t\t\tlog: vertexLog,\n\t\t\t\t\tprefix: prefixVertex\n\n\t\t\t\t},\n\n\t\t\t\tfragmentShader: {\n\n\t\t\t\t\tlog: fragmentLog,\n\t\t\t\t\tprefix: prefixFragment\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t}\n\n\t// Clean up\n\n\t// Crashes in iOS9 and iOS10. #18402\n\t// gl.detachShader( program, glVertexShader );\n\t// gl.detachShader( program, glFragmentShader );\n\n\tgl.deleteShader( glVertexShader );\n\tgl.deleteShader( glFragmentShader );\n\n\t// set up caching for uniform locations\n\n\tlet cachedUniforms;\n\n\tthis.getUniforms = function () {\n\n\t\tif ( cachedUniforms === undefined ) {\n\n\t\t\tcachedUniforms = new WebGLUniforms( gl, program );\n\n\t\t}\n\n\t\treturn cachedUniforms;\n\n\t};\n\n\t// set up caching for attribute locations\n\n\tlet cachedAttributes;\n\n\tthis.getAttributes = function () {\n\n\t\tif ( cachedAttributes === undefined ) {\n\n\t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\n\n\t\t}\n\n\t\treturn cachedAttributes;\n\n\t};\n\n\t// free resource\n\n\tthis.destroy = function () {\n\n\t\tbindingStates.releaseStatesOfProgram( this );\n\n\t\tgl.deleteProgram( program );\n\t\tthis.program = undefined;\n\n\t};\n\n\t//\n\n\tthis.name = parameters.shaderName;\n\tthis.id = programIdCount ++;\n\tthis.cacheKey = cacheKey;\n\tthis.usedTimes = 1;\n\tthis.program = program;\n\tthis.vertexShader = glVertexShader;\n\tthis.fragmentShader = glFragmentShader;\n\n\treturn this;\n\n}\n\nfunction WebGLPrograms( renderer, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping ) {\n\n\tconst programs = [];\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\tconst logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;\n\tconst floatVertexTextures = capabilities.floatVertexTextures;\n\tconst maxVertexUniforms = capabilities.maxVertexUniforms;\n\tconst vertexTextures = capabilities.vertexTextures;\n\n\tlet precision = capabilities.precision;\n\n\tconst shaderIDs = {\n\t\tMeshDepthMaterial: 'depth',\n\t\tMeshDistanceMaterial: 'distanceRGBA',\n\t\tMeshNormalMaterial: 'normal',\n\t\tMeshBasicMaterial: 'basic',\n\t\tMeshLambertMaterial: 'lambert',\n\t\tMeshPhongMaterial: 'phong',\n\t\tMeshToonMaterial: 'toon',\n\t\tMeshStandardMaterial: 'physical',\n\t\tMeshPhysicalMaterial: 'physical',\n\t\tMeshMatcapMaterial: 'matcap',\n\t\tLineBasicMaterial: 'basic',\n\t\tLineDashedMaterial: 'dashed',\n\t\tPointsMaterial: 'points',\n\t\tShadowMaterial: 'shadow',\n\t\tSpriteMaterial: 'sprite'\n\t};\n\n\tconst parameterNames = [\n\t\t'precision', 'isWebGL2', 'supportsVertexTextures', 'outputEncoding', 'instancing', 'instancingColor',\n\t\t'map', 'mapEncoding', 'matcap', 'matcapEncoding', 'envMap', 'envMapMode', 'envMapEncoding', 'envMapCubeUV',\n\t\t'lightMap', 'lightMapEncoding', 'aoMap', 'emissiveMap', 'emissiveMapEncoding', 'bumpMap', 'normalMap',\n\t\t'objectSpaceNormalMap', 'tangentSpaceNormalMap',\n\t\t'clearcoat', 'clearcoatMap', 'clearcoatRoughnessMap', 'clearcoatNormalMap',\n\t\t'displacementMap', 'specularMap', , 'roughnessMap', 'metalnessMap', 'gradientMap',\n\t\t'alphaMap', 'alphaTest', 'combine', 'vertexColors', 'vertexAlphas', 'vertexTangents', 'vertexUvs', 'uvsVertexOnly', 'fog', 'useFog', 'fogExp2',\n\t\t'flatShading', 'sizeAttenuation', 'logarithmicDepthBuffer', 'skinning',\n\t\t'maxBones', 'useVertexTexture', 'morphTargets', 'morphNormals', 'morphTargetsCount', 'premultipliedAlpha',\n\t\t'numDirLights', 'numPointLights', 'numSpotLights', 'numHemiLights', 'numRectAreaLights',\n\t\t'numDirLightShadows', 'numPointLightShadows', 'numSpotLightShadows',\n\t\t'shadowMapEnabled', 'shadowMapType', 'toneMapping', 'physicallyCorrectLights',\n\t\t'doubleSided', 'flipSided', 'numClippingPlanes', 'numClipIntersection', 'depthPacking', 'dithering', 'format',\n\t\t'specularIntensityMap', 'specularColorMap', 'specularColorMapEncoding',\n\t\t'transmission', 'transmissionMap', 'thicknessMap',\n\t\t'sheen', 'sheenColorMap', 'sheenColorMapEncoding', 'sheenRoughnessMap'\n\t];\n\n\tfunction getMaxBones( object ) {\n\n\t\tconst skeleton = object.skeleton;\n\t\tconst bones = skeleton.bones;\n\n\t\tif ( floatVertexTextures ) {\n\n\t\t\treturn 1024;\n\n\t\t} else {\n\n\t\t\t// default for when object is not specified\n\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\n\t\t\t//\n\t\t\t//  - leave some extra space for other uniforms\n\t\t\t//  - limit here is ANGLE's 254 max uniform vectors\n\t\t\t//    (up to 54 should be safe)\n\n\t\t\tconst nVertexUniforms = maxVertexUniforms;\n\t\t\tconst nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\n\n\t\t\tconst maxBones = Math.min( nVertexMatrices, bones.length );\n\n\t\t\tif ( maxBones < bones.length ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Skeleton has ' + bones.length + ' bones. This GPU supports ' + maxBones + '.' );\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\treturn maxBones;\n\n\t\t}\n\n\t}\n\n\tfunction getTextureEncodingFromMap( map ) {\n\n\t\tlet encoding;\n\n\t\tif ( map && map.isTexture ) {\n\n\t\t\tencoding = map.encoding;\n\n\t\t} else if ( map && map.isWebGLRenderTarget ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLPrograms.getTextureEncodingFromMap: don\\'t use render targets as textures. Use their .texture property instead.' );\n\t\t\tencoding = map.texture.encoding;\n\n\t\t} else {\n\n\t\t\tencoding = LinearEncoding;\n\n\t\t}\n\n\t\t/* if ( isWebGL2 && map && map.isTexture && map.format === RGBAFormat && map.type === UnsignedByteType && map.encoding === sRGBEncoding ) {\n\n\t\t\tencoding = LinearEncoding; // disable inline decode for sRGB textures in WebGL 2\n\n\t\t} */\n\n\t\treturn encoding;\n\n\t}\n\n\tfunction getParameters( material, lights, shadows, scene, object ) {\n\n\t\tconst fog = scene.fog;\n\t\tconst environment = material.isMeshStandardMaterial ? scene.environment : null;\n\n\t\tconst envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || environment );\n\n\t\tconst shaderID = shaderIDs[ material.type ];\n\n\t\t// heuristics to create shader parameters according to lights in the scene\n\t\t// (not to blow over maxLights budget)\n\n\t\tconst maxBones = object.isSkinnedMesh ? getMaxBones( object ) : 0;\n\n\t\tif ( material.precision !== null ) {\n\n\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\n\n\t\t\tif ( precision !== material.precision ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\tlet vertexShader, fragmentShader;\n\n\t\tif ( shaderID ) {\n\n\t\t\tconst shader = ShaderLib[ shaderID ];\n\n\t\t\tvertexShader = shader.vertexShader;\n\t\t\tfragmentShader = shader.fragmentShader;\n\n\t\t} else {\n\n\t\t\tvertexShader = material.vertexShader;\n\t\t\tfragmentShader = material.fragmentShader;\n\n\t\t}\n\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\tconst useAlphaTest = material.alphaTest > 0;\n\t\tconst useClearcoat = material.clearcoat > 0;\n\n\t\tconst parameters = {\n\n\t\t\tisWebGL2: isWebGL2,\n\n\t\t\tshaderID: shaderID,\n\t\t\tshaderName: material.type,\n\n\t\t\tvertexShader: vertexShader,\n\t\t\tfragmentShader: fragmentShader,\n\t\t\tdefines: material.defines,\n\n\t\t\tisRawShaderMaterial: material.isRawShaderMaterial === true,\n\t\t\tglslVersion: material.glslVersion,\n\n\t\t\tprecision: precision,\n\n\t\t\tinstancing: object.isInstancedMesh === true,\n\t\t\tinstancingColor: object.isInstancedMesh === true && object.instanceColor !== null,\n\n\t\t\tsupportsVertexTextures: vertexTextures,\n\t\t\toutputEncoding: ( currentRenderTarget !== null ) ? getTextureEncodingFromMap( currentRenderTarget.texture ) : renderer.outputEncoding,\n\t\t\tmap: !! material.map,\n\t\t\tmapEncoding: getTextureEncodingFromMap( material.map ),\n\t\t\tmatcap: !! material.matcap,\n\t\t\tmatcapEncoding: getTextureEncodingFromMap( material.matcap ),\n\t\t\tenvMap: !! envMap,\n\t\t\tenvMapMode: envMap && envMap.mapping,\n\t\t\tenvMapEncoding: getTextureEncodingFromMap( envMap ),\n\t\t\tenvMapCubeUV: ( !! envMap ) && ( ( envMap.mapping === CubeUVReflectionMapping ) || ( envMap.mapping === CubeUVRefractionMapping ) ),\n\t\t\tlightMap: !! material.lightMap,\n\t\t\tlightMapEncoding: getTextureEncodingFromMap( material.lightMap ),\n\t\t\taoMap: !! material.aoMap,\n\t\t\temissiveMap: !! material.emissiveMap,\n\t\t\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap ),\n\t\t\tbumpMap: !! material.bumpMap,\n\t\t\tnormalMap: !! material.normalMap,\n\t\t\tobjectSpaceNormalMap: material.normalMapType === ObjectSpaceNormalMap,\n\t\t\ttangentSpaceNormalMap: material.normalMapType === TangentSpaceNormalMap,\n\n\t\t\tclearcoat: useClearcoat,\n\t\t\tclearcoatMap: useClearcoat && !! material.clearcoatMap,\n\t\t\tclearcoatRoughnessMap: useClearcoat && !! material.clearcoatRoughnessMap,\n\t\t\tclearcoatNormalMap: useClearcoat && !! material.clearcoatNormalMap,\n\n\t\t\tdisplacementMap: !! material.displacementMap,\n\t\t\troughnessMap: !! material.roughnessMap,\n\t\t\tmetalnessMap: !! material.metalnessMap,\n\t\t\tspecularMap: !! material.specularMap,\n\t\t\tspecularIntensityMap: !! material.specularIntensityMap,\n\t\t\tspecularColorMap: !! material.specularColorMap,\n\t\t\tspecularColorMapEncoding: getTextureEncodingFromMap( material.specularColorMap ),\n\n\t\t\talphaMap: !! material.alphaMap,\n\t\t\talphaTest: useAlphaTest,\n\n\t\t\tgradientMap: !! material.gradientMap,\n\n\t\t\tsheen: material.sheen > 0,\n\t\t\tsheenColorMap: !! material.sheenColorMap,\n\t\t\tsheenColorMapEncoding: getTextureEncodingFromMap( material.sheenColorMap ),\n\t\t\tsheenRoughnessMap: !! material.sheenRoughnessMap,\n\n\t\t\ttransmission: material.transmission > 0,\n\t\t\ttransmissionMap: !! material.transmissionMap,\n\t\t\tthicknessMap: !! material.thicknessMap,\n\n\t\t\tcombine: material.combine,\n\n\t\t\tvertexTangents: ( !! material.normalMap && !! object.geometry && !! object.geometry.attributes.tangent ),\n\t\t\tvertexColors: material.vertexColors,\n\t\t\tvertexAlphas: material.vertexColors === true && !! object.geometry && !! object.geometry.attributes.color && object.geometry.attributes.color.itemSize === 4,\n\t\t\tvertexUvs: !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatMap || !! material.clearcoatRoughnessMap || !! material.clearcoatNormalMap || !! material.displacementMap || !! material.transmissionMap || !! material.thicknessMap || !! material.specularIntensityMap || !! material.specularColorMap || !! material.sheenColorMap || material.sheenRoughnessMap,\n\t\t\tuvsVertexOnly: ! ( !! material.map || !! material.bumpMap || !! material.normalMap || !! material.specularMap || !! material.alphaMap || !! material.emissiveMap || !! material.roughnessMap || !! material.metalnessMap || !! material.clearcoatNormalMap || material.transmission > 0 || !! material.transmissionMap || !! material.thicknessMap || !! material.specularIntensityMap || !! material.specularColorMap || material.sheen > 0 || !! material.sheenColorMap || !! material.sheenRoughnessMap ) && !! material.displacementMap,\n\n\t\t\tfog: !! fog,\n\t\t\tuseFog: material.fog,\n\t\t\tfogExp2: ( fog && fog.isFogExp2 ),\n\n\t\t\tflatShading: !! material.flatShading,\n\n\t\t\tsizeAttenuation: material.sizeAttenuation,\n\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n\t\t\tskinning: object.isSkinnedMesh === true && maxBones > 0,\n\t\t\tmaxBones: maxBones,\n\t\t\tuseVertexTexture: floatVertexTextures,\n\n\t\t\tmorphTargets: !! object.geometry && !! object.geometry.morphAttributes.position,\n\t\t\tmorphNormals: !! object.geometry && !! object.geometry.morphAttributes.normal,\n\t\t\tmorphTargetsCount: ( !! object.geometry && !! object.geometry.morphAttributes.position ) ? object.geometry.morphAttributes.position.length : 0,\n\n\t\t\tnumDirLights: lights.directional.length,\n\t\t\tnumPointLights: lights.point.length,\n\t\t\tnumSpotLights: lights.spot.length,\n\t\t\tnumRectAreaLights: lights.rectArea.length,\n\t\t\tnumHemiLights: lights.hemi.length,\n\n\t\t\tnumDirLightShadows: lights.directionalShadowMap.length,\n\t\t\tnumPointLightShadows: lights.pointShadowMap.length,\n\t\t\tnumSpotLightShadows: lights.spotShadowMap.length,\n\n\t\t\tnumClippingPlanes: clipping.numPlanes,\n\t\t\tnumClipIntersection: clipping.numIntersection,\n\n\t\t\tformat: material.format,\n\t\t\tdithering: material.dithering,\n\n\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,\n\t\t\tshadowMapType: renderer.shadowMap.type,\n\n\t\t\ttoneMapping: material.toneMapped ? renderer.toneMapping : NoToneMapping,\n\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\n\n\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\n\t\t\tdoubleSided: material.side === DoubleSide,\n\t\t\tflipSided: material.side === BackSide,\n\n\t\t\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false,\n\n\t\t\tindex0AttributeName: material.index0AttributeName,\n\n\t\t\textensionDerivatives: material.extensions && material.extensions.derivatives,\n\t\t\textensionFragDepth: material.extensions && material.extensions.fragDepth,\n\t\t\textensionDrawBuffers: material.extensions && material.extensions.drawBuffers,\n\t\t\textensionShaderTextureLOD: material.extensions && material.extensions.shaderTextureLOD,\n\n\t\t\trendererExtensionFragDepth: isWebGL2 || extensions.has( 'EXT_frag_depth' ),\n\t\t\trendererExtensionDrawBuffers: isWebGL2 || extensions.has( 'WEBGL_draw_buffers' ),\n\t\t\trendererExtensionShaderTextureLod: isWebGL2 || extensions.has( 'EXT_shader_texture_lod' ),\n\n\t\t\tcustomProgramCacheKey: material.customProgramCacheKey()\n\n\t\t};\n\n\t\treturn parameters;\n\n\t}\n\n\tfunction getProgramCacheKey( parameters ) {\n\n\t\tconst array = [];\n\n\t\tif ( parameters.shaderID ) {\n\n\t\t\tarray.push( parameters.shaderID );\n\n\t\t} else {\n\n\t\t\tarray.push( hashString( parameters.fragmentShader ) );\n\t\t\tarray.push( hashString( parameters.vertexShader ) );\n\n\t\t}\n\n\t\tif ( parameters.defines !== undefined ) {\n\n\t\t\tfor ( const name in parameters.defines ) {\n\n\t\t\t\tarray.push( name );\n\t\t\t\tarray.push( parameters.defines[ name ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( parameters.isRawShaderMaterial === false ) {\n\n\t\t\tfor ( let i = 0; i < parameterNames.length; i ++ ) {\n\n\t\t\t\tarray.push( parameters[ parameterNames[ i ] ] );\n\n\t\t\t}\n\n\t\t\tarray.push( renderer.outputEncoding );\n\t\t\tarray.push( renderer.gammaFactor );\n\n\t\t}\n\n\t\tarray.push( parameters.customProgramCacheKey );\n\n\t\treturn array.join();\n\n\t}\n\n\tfunction getUniforms( material ) {\n\n\t\tconst shaderID = shaderIDs[ material.type ];\n\t\tlet uniforms;\n\n\t\tif ( shaderID ) {\n\n\t\t\tconst shader = ShaderLib[ shaderID ];\n\t\t\tuniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\t} else {\n\n\t\t\tuniforms = material.uniforms;\n\n\t\t}\n\n\t\treturn uniforms;\n\n\t}\n\n\tfunction acquireProgram( parameters, cacheKey ) {\n\n\t\tlet program;\n\n\t\t// Check if code has been already compiled\n\t\tfor ( let p = 0, pl = programs.length; p < pl; p ++ ) {\n\n\t\t\tconst preexistingProgram = programs[ p ];\n\n\t\t\tif ( preexistingProgram.cacheKey === cacheKey ) {\n\n\t\t\t\tprogram = preexistingProgram;\n\t\t\t\t++ program.usedTimes;\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( program === undefined ) {\n\n\t\t\tprogram = new WebGLProgram( renderer, cacheKey, parameters, bindingStates );\n\t\t\tprograms.push( program );\n\n\t\t}\n\n\t\treturn program;\n\n\t}\n\n\tfunction releaseProgram( program ) {\n\n\t\tif ( -- program.usedTimes === 0 ) {\n\n\t\t\t// Remove from unordered set\n\t\t\tconst i = programs.indexOf( program );\n\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\n\t\t\tprograms.pop();\n\n\t\t\t// Free WebGL resources\n\t\t\tprogram.destroy();\n\n\t\t}\n\n\t}\n\n\treturn {\n\t\tgetParameters: getParameters,\n\t\tgetProgramCacheKey: getProgramCacheKey,\n\t\tgetUniforms: getUniforms,\n\t\tacquireProgram: acquireProgram,\n\t\treleaseProgram: releaseProgram,\n\t\t// Exposed for resource monitoring & error feedback via renderer.info:\n\t\tprograms: programs\n\t};\n\n}\n\nfunction WebGLProperties() {\n\n\tlet properties = new WeakMap();\n\n\tfunction get( object ) {\n\n\t\tlet map = properties.get( object );\n\n\t\tif ( map === undefined ) {\n\n\t\t\tmap = {};\n\t\t\tproperties.set( object, map );\n\n\t\t}\n\n\t\treturn map;\n\n\t}\n\n\tfunction remove( object ) {\n\n\t\tproperties.delete( object );\n\n\t}\n\n\tfunction update( object, key, value ) {\n\n\t\tproperties.get( object )[ key ] = value;\n\n\t}\n\n\tfunction dispose() {\n\n\t\tproperties = new WeakMap();\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tremove: remove,\n\t\tupdate: update,\n\t\tdispose: dispose\n\t};\n\n}\n\nfunction painterSortStable( a, b ) {\n\n\tif ( a.groupOrder !== b.groupOrder ) {\n\n\t\treturn a.groupOrder - b.groupOrder;\n\n\t} else if ( a.renderOrder !== b.renderOrder ) {\n\n\t\treturn a.renderOrder - b.renderOrder;\n\n\t} else if ( a.program !== b.program ) {\n\n\t\treturn a.program.id - b.program.id;\n\n\t} else if ( a.material.id !== b.material.id ) {\n\n\t\treturn a.material.id - b.material.id;\n\n\t} else if ( a.z !== b.z ) {\n\n\t\treturn a.z - b.z;\n\n\t} else {\n\n\t\treturn a.id - b.id;\n\n\t}\n\n}\n\nfunction reversePainterSortStable( a, b ) {\n\n\tif ( a.groupOrder !== b.groupOrder ) {\n\n\t\treturn a.groupOrder - b.groupOrder;\n\n\t} else if ( a.renderOrder !== b.renderOrder ) {\n\n\t\treturn a.renderOrder - b.renderOrder;\n\n\t} else if ( a.z !== b.z ) {\n\n\t\treturn b.z - a.z;\n\n\t} else {\n\n\t\treturn a.id - b.id;\n\n\t}\n\n}\n\n\nfunction WebGLRenderList( properties ) {\n\n\tconst renderItems = [];\n\tlet renderItemsIndex = 0;\n\n\tconst opaque = [];\n\tconst transmissive = [];\n\tconst transparent = [];\n\n\tconst defaultProgram = { id: - 1 };\n\n\tfunction init() {\n\n\t\trenderItemsIndex = 0;\n\n\t\topaque.length = 0;\n\t\ttransmissive.length = 0;\n\t\ttransparent.length = 0;\n\n\t}\n\n\tfunction getNextRenderItem( object, geometry, material, groupOrder, z, group ) {\n\n\t\tlet renderItem = renderItems[ renderItemsIndex ];\n\t\tconst materialProperties = properties.get( material );\n\n\t\tif ( renderItem === undefined ) {\n\n\t\t\trenderItem = {\n\t\t\t\tid: object.id,\n\t\t\t\tobject: object,\n\t\t\t\tgeometry: geometry,\n\t\t\t\tmaterial: material,\n\t\t\t\tprogram: materialProperties.program || defaultProgram,\n\t\t\t\tgroupOrder: groupOrder,\n\t\t\t\trenderOrder: object.renderOrder,\n\t\t\t\tz: z,\n\t\t\t\tgroup: group\n\t\t\t};\n\n\t\t\trenderItems[ renderItemsIndex ] = renderItem;\n\n\t\t} else {\n\n\t\t\trenderItem.id = object.id;\n\t\t\trenderItem.object = object;\n\t\t\trenderItem.geometry = geometry;\n\t\t\trenderItem.material = material;\n\t\t\trenderItem.program = materialProperties.program || defaultProgram;\n\t\t\trenderItem.groupOrder = groupOrder;\n\t\t\trenderItem.renderOrder = object.renderOrder;\n\t\t\trenderItem.z = z;\n\t\t\trenderItem.group = group;\n\n\t\t}\n\n\t\trenderItemsIndex ++;\n\n\t\treturn renderItem;\n\n\t}\n\n\tfunction push( object, geometry, material, groupOrder, z, group ) {\n\n\t\tconst renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\n\n\t\tif ( material.transmission > 0.0 ) {\n\n\t\t\ttransmissive.push( renderItem );\n\n\t\t} else if ( material.transparent === true ) {\n\n\t\t\ttransparent.push( renderItem );\n\n\t\t} else {\n\n\t\t\topaque.push( renderItem );\n\n\t\t}\n\n\t}\n\n\tfunction unshift( object, geometry, material, groupOrder, z, group ) {\n\n\t\tconst renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\n\n\t\tif ( material.transmission > 0.0 ) {\n\n\t\t\ttransmissive.unshift( renderItem );\n\n\t\t} else if ( material.transparent === true ) {\n\n\t\t\ttransparent.unshift( renderItem );\n\n\t\t} else {\n\n\t\t\topaque.unshift( renderItem );\n\n\t\t}\n\n\t}\n\n\tfunction sort( customOpaqueSort, customTransparentSort ) {\n\n\t\tif ( opaque.length > 1 ) opaque.sort( customOpaqueSort || painterSortStable );\n\t\tif ( transmissive.length > 1 ) transmissive.sort( customTransparentSort || reversePainterSortStable );\n\t\tif ( transparent.length > 1 ) transparent.sort( customTransparentSort || reversePainterSortStable );\n\n\t}\n\n\tfunction finish() {\n\n\t\t// Clear references from inactive renderItems in the list\n\n\t\tfor ( let i = renderItemsIndex, il = renderItems.length; i < il; i ++ ) {\n\n\t\t\tconst renderItem = renderItems[ i ];\n\n\t\t\tif ( renderItem.id === null ) break;\n\n\t\t\trenderItem.id = null;\n\t\t\trenderItem.object = null;\n\t\t\trenderItem.geometry = null;\n\t\t\trenderItem.material = null;\n\t\t\trenderItem.program = null;\n\t\t\trenderItem.group = null;\n\n\t\t}\n\n\t}\n\n\treturn {\n\n\t\topaque: opaque,\n\t\ttransmissive: transmissive,\n\t\ttransparent: transparent,\n\n\t\tinit: init,\n\t\tpush: push,\n\t\tunshift: unshift,\n\t\tfinish: finish,\n\n\t\tsort: sort\n\t};\n\n}\n\nfunction WebGLRenderLists( properties ) {\n\n\tlet lists = new WeakMap();\n\n\tfunction get( scene, renderCallDepth ) {\n\n\t\tlet list;\n\n\t\tif ( lists.has( scene ) === false ) {\n\n\t\t\tlist = new WebGLRenderList( properties );\n\t\t\tlists.set( scene, [ list ] );\n\n\t\t} else {\n\n\t\t\tif ( renderCallDepth >= lists.get( scene ).length ) {\n\n\t\t\t\tlist = new WebGLRenderList( properties );\n\t\t\t\tlists.get( scene ).push( list );\n\n\t\t\t} else {\n\n\t\t\t\tlist = lists.get( scene )[ renderCallDepth ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn list;\n\n\t}\n\n\tfunction dispose() {\n\n\t\tlists = new WeakMap();\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tdispose: dispose\n\t};\n\n}\n\nfunction UniformsCache() {\n\n\tconst lights = {};\n\n\treturn {\n\n\t\tget: function ( light ) {\n\n\t\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\t\treturn lights[ light.id ];\n\n\t\t\t}\n\n\t\t\tlet uniforms;\n\n\t\t\tswitch ( light.type ) {\n\n\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\tcolor: new Color()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\tconeCos: 0,\n\t\t\t\t\t\tpenumbraCos: 0,\n\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\tskyColor: new Color(),\n\t\t\t\t\t\tgroundColor: new Color()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\thalfWidth: new Vector3(),\n\t\t\t\t\t\thalfHeight: new Vector3()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tlights[ light.id ] = uniforms;\n\n\t\t\treturn uniforms;\n\n\t\t}\n\n\t};\n\n}\n\nfunction ShadowUniformsCache() {\n\n\tconst lights = {};\n\n\treturn {\n\n\t\tget: function ( light ) {\n\n\t\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\t\treturn lights[ light.id ];\n\n\t\t\t}\n\n\t\t\tlet uniforms;\n\n\t\t\tswitch ( light.type ) {\n\n\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\tshadowMapSize: new Vector2(),\n\t\t\t\t\t\tshadowCameraNear: 1,\n\t\t\t\t\t\tshadowCameraFar: 1000\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\t// TODO (abelnation): set RectAreaLight shadow uniforms\n\n\t\t\t}\n\n\t\t\tlights[ light.id ] = uniforms;\n\n\t\t\treturn uniforms;\n\n\t\t}\n\n\t};\n\n}\n\n\n\nlet nextVersion = 0;\n\nfunction shadowCastingLightsFirst( lightA, lightB ) {\n\n\treturn ( lightB.castShadow ? 1 : 0 ) - ( lightA.castShadow ? 1 : 0 );\n\n}\n\nfunction WebGLLights( extensions, capabilities ) {\n\n\tconst cache = new UniformsCache();\n\n\tconst shadowCache = ShadowUniformsCache();\n\n\tconst state = {\n\n\t\tversion: 0,\n\n\t\thash: {\n\t\t\tdirectionalLength: - 1,\n\t\t\tpointLength: - 1,\n\t\t\tspotLength: - 1,\n\t\t\trectAreaLength: - 1,\n\t\t\themiLength: - 1,\n\n\t\t\tnumDirectionalShadows: - 1,\n\t\t\tnumPointShadows: - 1,\n\t\t\tnumSpotShadows: - 1\n\t\t},\n\n\t\tambient: [ 0, 0, 0 ],\n\t\tprobe: [],\n\t\tdirectional: [],\n\t\tdirectionalShadow: [],\n\t\tdirectionalShadowMap: [],\n\t\tdirectionalShadowMatrix: [],\n\t\tspot: [],\n\t\tspotShadow: [],\n\t\tspotShadowMap: [],\n\t\tspotShadowMatrix: [],\n\t\trectArea: [],\n\t\trectAreaLTC1: null,\n\t\trectAreaLTC2: null,\n\t\tpoint: [],\n\t\tpointShadow: [],\n\t\tpointShadowMap: [],\n\t\tpointShadowMatrix: [],\n\t\themi: []\n\n\t};\n\n\tfor ( let i = 0; i < 9; i ++ ) state.probe.push( new Vector3() );\n\n\tconst vector3 = new Vector3();\n\tconst matrix4 = new Matrix4();\n\tconst matrix42 = new Matrix4();\n\n\tfunction setup( lights, physicallyCorrectLights ) {\n\n\t\tlet r = 0, g = 0, b = 0;\n\n\t\tfor ( let i = 0; i < 9; i ++ ) state.probe[ i ].set( 0, 0, 0 );\n\n\t\tlet directionalLength = 0;\n\t\tlet pointLength = 0;\n\t\tlet spotLength = 0;\n\t\tlet rectAreaLength = 0;\n\t\tlet hemiLength = 0;\n\n\t\tlet numDirectionalShadows = 0;\n\t\tlet numPointShadows = 0;\n\t\tlet numSpotShadows = 0;\n\n\t\tlights.sort( shadowCastingLightsFirst );\n\n\t\t// artist-friendly light intensity scaling factor\n\t\tconst scaleFactor = ( physicallyCorrectLights !== true ) ? Math.PI : 1;\n\n\t\tfor ( let i = 0, l = lights.length; i < l; i ++ ) {\n\n\t\t\tconst light = lights[ i ];\n\n\t\t\tconst color = light.color;\n\t\t\tconst intensity = light.intensity;\n\t\t\tconst distance = light.distance;\n\n\t\t\tconst shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\n\n\t\t\tif ( light.isAmbientLight ) {\n\n\t\t\t\tr += color.r * intensity * scaleFactor;\n\t\t\t\tg += color.g * intensity * scaleFactor;\n\t\t\t\tb += color.b * intensity * scaleFactor;\n\n\t\t\t} else if ( light.isLightProbe ) {\n\n\t\t\t\tfor ( let j = 0; j < 9; j ++ ) {\n\n\t\t\t\t\tstate.probe[ j ].addScaledVector( light.sh.coefficients[ j ], intensity );\n\n\t\t\t\t}\n\n\t\t\t} else if ( light.isDirectionalLight ) {\n\n\t\t\t\tconst uniforms = cache.get( light );\n\n\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity * scaleFactor );\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tconst shadow = light.shadow;\n\n\t\t\t\t\tconst shadowUniforms = shadowCache.get( light );\n\n\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\tstate.directionalShadow[ directionalLength ] = shadowUniforms;\n\t\t\t\t\tstate.directionalShadowMap[ directionalLength ] = shadowMap;\n\t\t\t\t\tstate.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\n\n\t\t\t\t\tnumDirectionalShadows ++;\n\n\t\t\t\t}\n\n\t\t\t\tstate.directional[ directionalLength ] = uniforms;\n\n\t\t\t\tdirectionalLength ++;\n\n\t\t\t} else if ( light.isSpotLight ) {\n\n\t\t\t\tconst uniforms = cache.get( light );\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\n\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity * scaleFactor );\n\t\t\t\tuniforms.distance = distance;\n\n\t\t\t\tuniforms.coneCos = Math.cos( light.angle );\n\t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\n\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tconst shadow = light.shadow;\n\n\t\t\t\t\tconst shadowUniforms = shadowCache.get( light );\n\n\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\tstate.spotShadow[ spotLength ] = shadowUniforms;\n\t\t\t\t\tstate.spotShadowMap[ spotLength ] = shadowMap;\n\t\t\t\t\tstate.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\n\n\t\t\t\t\tnumSpotShadows ++;\n\n\t\t\t\t}\n\n\t\t\t\tstate.spot[ spotLength ] = uniforms;\n\n\t\t\t\tspotLength ++;\n\n\t\t\t} else if ( light.isRectAreaLight ) {\n\n\t\t\t\tconst uniforms = cache.get( light );\n\n\t\t\t\t// (a) intensity is the total visible light emitted\n\t\t\t\t//uniforms.color.copy( color ).multiplyScalar( intensity / ( light.width * light.height * Math.PI ) );\n\n\t\t\t\t// (b) intensity is the brightness of the light\n\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\n\t\t\t\tuniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );\n\t\t\t\tuniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );\n\n\t\t\t\tstate.rectArea[ rectAreaLength ] = uniforms;\n\n\t\t\t\trectAreaLength ++;\n\n\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\tconst uniforms = cache.get( light );\n\n\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity * scaleFactor );\n\t\t\t\tuniforms.distance = light.distance;\n\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tconst shadow = light.shadow;\n\n\t\t\t\t\tconst shadowUniforms = shadowCache.get( light );\n\n\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\tshadowUniforms.shadowCameraNear = shadow.camera.near;\n\t\t\t\t\tshadowUniforms.shadowCameraFar = shadow.camera.far;\n\n\t\t\t\t\tstate.pointShadow[ pointLength ] = shadowUniforms;\n\t\t\t\t\tstate.pointShadowMap[ pointLength ] = shadowMap;\n\t\t\t\t\tstate.pointShadowMatrix[ pointLength ] = light.shadow.matrix;\n\n\t\t\t\t\tnumPointShadows ++;\n\n\t\t\t\t}\n\n\t\t\t\tstate.point[ pointLength ] = uniforms;\n\n\t\t\t\tpointLength ++;\n\n\t\t\t} else if ( light.isHemisphereLight ) {\n\n\t\t\t\tconst uniforms = cache.get( light );\n\n\t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity * scaleFactor );\n\t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity * scaleFactor );\n\n\t\t\t\tstate.hemi[ hemiLength ] = uniforms;\n\n\t\t\t\themiLength ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( rectAreaLength > 0 ) {\n\n\t\t\tif ( capabilities.isWebGL2 ) {\n\n\t\t\t\t// WebGL 2\n\n\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;\n\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;\n\n\t\t\t} else {\n\n\t\t\t\t// WebGL 1\n\n\t\t\t\tif ( extensions.has( 'OES_texture_float_linear' ) === true ) {\n\n\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;\n\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;\n\n\t\t\t\t} else if ( extensions.has( 'OES_texture_half_float_linear' ) === true ) {\n\n\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_HALF_1;\n\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_HALF_2;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.ambient[ 0 ] = r;\n\t\tstate.ambient[ 1 ] = g;\n\t\tstate.ambient[ 2 ] = b;\n\n\t\tconst hash = state.hash;\n\n\t\tif ( hash.directionalLength !== directionalLength ||\n\t\t\thash.pointLength !== pointLength ||\n\t\t\thash.spotLength !== spotLength ||\n\t\t\thash.rectAreaLength !== rectAreaLength ||\n\t\t\thash.hemiLength !== hemiLength ||\n\t\t\thash.numDirectionalShadows !== numDirectionalShadows ||\n\t\t\thash.numPointShadows !== numPointShadows ||\n\t\t\thash.numSpotShadows !== numSpotShadows ) {\n\n\t\t\tstate.directional.length = directionalLength;\n\t\t\tstate.spot.length = spotLength;\n\t\t\tstate.rectArea.length = rectAreaLength;\n\t\t\tstate.point.length = pointLength;\n\t\t\tstate.hemi.length = hemiLength;\n\n\t\t\tstate.directionalShadow.length = numDirectionalShadows;\n\t\t\tstate.directionalShadowMap.length = numDirectionalShadows;\n\t\t\tstate.pointShadow.length = numPointShadows;\n\t\t\tstate.pointShadowMap.length = numPointShadows;\n\t\t\tstate.spotShadow.length = numSpotShadows;\n\t\t\tstate.spotShadowMap.length = numSpotShadows;\n\t\t\tstate.directionalShadowMatrix.length = numDirectionalShadows;\n\t\t\tstate.pointShadowMatrix.length = numPointShadows;\n\t\t\tstate.spotShadowMatrix.length = numSpotShadows;\n\n\t\t\thash.directionalLength = directionalLength;\n\t\t\thash.pointLength = pointLength;\n\t\t\thash.spotLength = spotLength;\n\t\t\thash.rectAreaLength = rectAreaLength;\n\t\t\thash.hemiLength = hemiLength;\n\n\t\t\thash.numDirectionalShadows = numDirectionalShadows;\n\t\t\thash.numPointShadows = numPointShadows;\n\t\t\thash.numSpotShadows = numSpotShadows;\n\n\t\t\tstate.version = nextVersion ++;\n\n\t\t}\n\n\t}\n\n\tfunction setupView( lights, camera ) {\n\n\t\tlet directionalLength = 0;\n\t\tlet pointLength = 0;\n\t\tlet spotLength = 0;\n\t\tlet rectAreaLength = 0;\n\t\tlet hemiLength = 0;\n\n\t\tconst viewMatrix = camera.matrixWorldInverse;\n\n\t\tfor ( let i = 0, l = lights.length; i < l; i ++ ) {\n\n\t\t\tconst light = lights[ i ];\n\n\t\t\tif ( light.isDirectionalLight ) {\n\n\t\t\t\tconst uniforms = state.directional[ directionalLength ];\n\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\tdirectionalLength ++;\n\n\t\t\t} else if ( light.isSpotLight ) {\n\n\t\t\t\tconst uniforms = state.spot[ spotLength ];\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\tspotLength ++;\n\n\t\t\t} else if ( light.isRectAreaLight ) {\n\n\t\t\t\tconst uniforms = state.rectArea[ rectAreaLength ];\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t// extract local rotation of light to derive width/height half vectors\n\t\t\t\tmatrix42.identity();\n\t\t\t\tmatrix4.copy( light.matrixWorld );\n\t\t\t\tmatrix4.premultiply( viewMatrix );\n\t\t\t\tmatrix42.extractRotation( matrix4 );\n\n\t\t\t\tuniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );\n\t\t\t\tuniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );\n\n\t\t\t\tuniforms.halfWidth.applyMatrix4( matrix42 );\n\t\t\t\tuniforms.halfHeight.applyMatrix4( matrix42 );\n\n\t\t\t\trectAreaLength ++;\n\n\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\tconst uniforms = state.point[ pointLength ];\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\tpointLength ++;\n\n\t\t\t} else if ( light.isHemisphereLight ) {\n\n\t\t\t\tconst uniforms = state.hemi[ hemiLength ];\n\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\t\t\t\tuniforms.direction.normalize();\n\n\t\t\t\themiLength ++;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn {\n\t\tsetup: setup,\n\t\tsetupView: setupView,\n\t\tstate: state\n\t};\n\n}\n\nfunction WebGLRenderState( extensions, capabilities ) {\n\n\tconst lights = new WebGLLights( extensions, capabilities );\n\n\tconst lightsArray = [];\n\tconst shadowsArray = [];\n\n\tfunction init() {\n\n\t\tlightsArray.length = 0;\n\t\tshadowsArray.length = 0;\n\n\t}\n\n\tfunction pushLight( light ) {\n\n\t\tlightsArray.push( light );\n\n\t}\n\n\tfunction pushShadow( shadowLight ) {\n\n\t\tshadowsArray.push( shadowLight );\n\n\t}\n\n\tfunction setupLights( physicallyCorrectLights ) {\n\n\t\tlights.setup( lightsArray, physicallyCorrectLights );\n\n\t}\n\n\tfunction setupLightsView( camera ) {\n\n\t\tlights.setupView( lightsArray, camera );\n\n\t}\n\n\tconst state = {\n\t\tlightsArray: lightsArray,\n\t\tshadowsArray: shadowsArray,\n\n\t\tlights: lights\n\t};\n\n\treturn {\n\t\tinit: init,\n\t\tstate: state,\n\t\tsetupLights: setupLights,\n\t\tsetupLightsView: setupLightsView,\n\n\t\tpushLight: pushLight,\n\t\tpushShadow: pushShadow\n\t};\n\n}\n\nfunction WebGLRenderStates( extensions, capabilities ) {\n\n\tlet renderStates = new WeakMap();\n\n\tfunction get( scene, renderCallDepth = 0 ) {\n\n\t\tlet renderState;\n\n\t\tif ( renderStates.has( scene ) === false ) {\n\n\t\t\trenderState = new WebGLRenderState( extensions, capabilities );\n\t\t\trenderStates.set( scene, [ renderState ] );\n\n\t\t} else {\n\n\t\t\tif ( renderCallDepth >= renderStates.get( scene ).length ) {\n\n\t\t\t\trenderState = new WebGLRenderState( extensions, capabilities );\n\t\t\t\trenderStates.get( scene ).push( renderState );\n\n\t\t\t} else {\n\n\t\t\t\trenderState = renderStates.get( scene )[ renderCallDepth ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn renderState;\n\n\t}\n\n\tfunction dispose() {\n\n\t\trenderStates = new WeakMap();\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tdispose: dispose\n\t};\n\n}\n\n/**\n * parameters = {\n *\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>\n * }\n */\n\nclass MeshDepthMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'MeshDepthMaterial';\n\n\t\tthis.depthPacking = BasicDepthPacking;\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.depthPacking = source.depthPacking;\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\treturn this;\n\n\t}\n\n}\n\nMeshDepthMaterial.prototype.isMeshDepthMaterial = true;\n\n/**\n * parameters = {\n *\n *  referencePosition: <float>,\n *  nearDistance: <float>,\n *  farDistance: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>\n *\n * }\n */\n\nclass MeshDistanceMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'MeshDistanceMaterial';\n\n\t\tthis.referencePosition = new Vector3();\n\t\tthis.nearDistance = 1;\n\t\tthis.farDistance = 1000;\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.fog = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.referencePosition.copy( source.referencePosition );\n\t\tthis.nearDistance = source.nearDistance;\n\t\tthis.farDistance = source.farDistance;\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\treturn this;\n\n\t}\n\n}\n\nMeshDistanceMaterial.prototype.isMeshDistanceMaterial = true;\n\nconst vertex = \"void main() {\\n\\tgl_Position = vec4( position, 1.0 );\\n}\";\n\nconst fragment = \"uniform sampler2D shadow_pass;\\nuniform vec2 resolution;\\nuniform float radius;\\n#include <packing>\\nvoid main() {\\n\\tconst float samples = float( VSM_SAMPLES );\\n\\tfloat mean = 0.0;\\n\\tfloat squared_mean = 0.0;\\n\\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\\n\\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\\n\\tfor ( float i = 0.0; i < samples; i ++ ) {\\n\\t\\tfloat uvOffset = uvStart + i * uvStride;\\n\\t\\t#ifdef HORIZONTAL_PASS\\n\\t\\t\\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\\n\\t\\t\\tmean += distribution.x;\\n\\t\\t\\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\\n\\t\\t#else\\n\\t\\t\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\\n\\t\\t\\tmean += depth;\\n\\t\\t\\tsquared_mean += depth * depth;\\n\\t\\t#endif\\n\\t}\\n\\tmean = mean / samples;\\n\\tsquared_mean = squared_mean / samples;\\n\\tfloat std_dev = sqrt( squared_mean - mean * mean );\\n\\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\\n}\";\n\nfunction WebGLShadowMap( _renderer, _objects, _capabilities ) {\n\n\tlet _frustum = new Frustum();\n\n\tconst _shadowMapSize = new Vector2(),\n\t\t_viewportSize = new Vector2(),\n\n\t\t_viewport = new Vector4(),\n\n\t\t_depthMaterial = new MeshDepthMaterial( { depthPacking: RGBADepthPacking } ),\n\t\t_distanceMaterial = new MeshDistanceMaterial(),\n\n\t\t_materialCache = {},\n\n\t\t_maxTextureSize = _capabilities.maxTextureSize;\n\n\tconst shadowSide = { 0: BackSide, 1: FrontSide, 2: DoubleSide };\n\n\tconst shadowMaterialVertical = new ShaderMaterial( {\n\t\tdefines: {\n\t\t\tVSM_SAMPLES: 8\n\t\t},\n\t\tuniforms: {\n\t\t\tshadow_pass: { value: null },\n\t\t\tresolution: { value: new Vector2() },\n\t\t\tradius: { value: 4.0 }\n\t\t},\n\n\t\tvertexShader: vertex,\n\t\tfragmentShader: fragment\n\n\t} );\n\n\tconst shadowMaterialHorizontal = shadowMaterialVertical.clone();\n\tshadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;\n\n\tconst fullScreenTri = new BufferGeometry();\n\tfullScreenTri.setAttribute(\n\t\t'position',\n\t\tnew BufferAttribute(\n\t\t\tnew Float32Array( [ - 1, - 1, 0.5, 3, - 1, 0.5, - 1, 3, 0.5 ] ),\n\t\t\t3\n\t\t)\n\t);\n\n\tconst fullScreenMesh = new Mesh( fullScreenTri, shadowMaterialVertical );\n\n\tconst scope = this;\n\n\tthis.enabled = false;\n\n\tthis.autoUpdate = true;\n\tthis.needsUpdate = false;\n\n\tthis.type = PCFShadowMap;\n\n\tthis.render = function ( lights, scene, camera ) {\n\n\t\tif ( scope.enabled === false ) return;\n\t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) return;\n\n\t\tif ( lights.length === 0 ) return;\n\n\t\tconst currentRenderTarget = _renderer.getRenderTarget();\n\t\tconst activeCubeFace = _renderer.getActiveCubeFace();\n\t\tconst activeMipmapLevel = _renderer.getActiveMipmapLevel();\n\n\t\tconst _state = _renderer.state;\n\n\t\t// Set GL state for depth map.\n\t\t_state.setBlending( NoBlending );\n\t\t_state.buffers.color.setClear( 1, 1, 1, 1 );\n\t\t_state.buffers.depth.setTest( true );\n\t\t_state.setScissorTest( false );\n\n\t\t// render depth map\n\n\t\tfor ( let i = 0, il = lights.length; i < il; i ++ ) {\n\n\t\t\tconst light = lights[ i ];\n\t\t\tconst shadow = light.shadow;\n\n\t\t\tif ( shadow === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tif ( shadow.autoUpdate === false && shadow.needsUpdate === false ) continue;\n\n\t\t\t_shadowMapSize.copy( shadow.mapSize );\n\n\t\t\tconst shadowFrameExtents = shadow.getFrameExtents();\n\n\t\t\t_shadowMapSize.multiply( shadowFrameExtents );\n\n\t\t\t_viewportSize.copy( shadow.mapSize );\n\n\t\t\tif ( _shadowMapSize.x > _maxTextureSize || _shadowMapSize.y > _maxTextureSize ) {\n\n\t\t\t\tif ( _shadowMapSize.x > _maxTextureSize ) {\n\n\t\t\t\t\t_viewportSize.x = Math.floor( _maxTextureSize / shadowFrameExtents.x );\n\t\t\t\t\t_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;\n\t\t\t\t\tshadow.mapSize.x = _viewportSize.x;\n\n\t\t\t\t}\n\n\t\t\t\tif ( _shadowMapSize.y > _maxTextureSize ) {\n\n\t\t\t\t\t_viewportSize.y = Math.floor( _maxTextureSize / shadowFrameExtents.y );\n\t\t\t\t\t_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;\n\t\t\t\t\tshadow.mapSize.y = _viewportSize.y;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( shadow.map === null && ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {\n\n\t\t\t\tconst pars = { minFilter: LinearFilter, magFilter: LinearFilter, format: RGBAFormat };\n\n\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\t\t\t\tshadow.map.texture.name = light.name + '.shadowMap';\n\n\t\t\t\tshadow.mapPass = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\n\t\t\t\tshadow.camera.updateProjectionMatrix();\n\n\t\t\t}\n\n\t\t\tif ( shadow.map === null ) {\n\n\t\t\t\tconst pars = { minFilter: NearestFilter, magFilter: NearestFilter, format: RGBAFormat };\n\n\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\t\t\t\tshadow.map.texture.name = light.name + '.shadowMap';\n\n\t\t\t\tshadow.camera.updateProjectionMatrix();\n\n\t\t\t}\n\n\t\t\t_renderer.setRenderTarget( shadow.map );\n\t\t\t_renderer.clear();\n\n\t\t\tconst viewportCount = shadow.getViewportCount();\n\n\t\t\tfor ( let vp = 0; vp < viewportCount; vp ++ ) {\n\n\t\t\t\tconst viewport = shadow.getViewport( vp );\n\n\t\t\t\t_viewport.set(\n\t\t\t\t\t_viewportSize.x * viewport.x,\n\t\t\t\t\t_viewportSize.y * viewport.y,\n\t\t\t\t\t_viewportSize.x * viewport.z,\n\t\t\t\t\t_viewportSize.y * viewport.w\n\t\t\t\t);\n\n\t\t\t\t_state.viewport( _viewport );\n\n\t\t\t\tshadow.updateMatrices( light, vp );\n\n\t\t\t\t_frustum = shadow.getFrustum();\n\n\t\t\t\trenderObject( scene, camera, shadow.camera, light, this.type );\n\n\t\t\t}\n\n\t\t\t// do blur pass for VSM\n\n\t\t\tif ( ! shadow.isPointLightShadow && this.type === VSMShadowMap ) {\n\n\t\t\t\tVSMPass( shadow, camera );\n\n\t\t\t}\n\n\t\t\tshadow.needsUpdate = false;\n\n\t\t}\n\n\t\tscope.needsUpdate = false;\n\n\t\t_renderer.setRenderTarget( currentRenderTarget, activeCubeFace, activeMipmapLevel );\n\n\t};\n\n\tfunction VSMPass( shadow, camera ) {\n\n\t\tconst geometry = _objects.update( fullScreenMesh );\n\n\t\tif ( shadowMaterialVertical.defines.VSM_SAMPLES !== shadow.blurSamples ) {\n\n\t\t\tshadowMaterialVertical.defines.VSM_SAMPLES = shadow.blurSamples;\n\t\t\tshadowMaterialHorizontal.defines.VSM_SAMPLES = shadow.blurSamples;\n\n\t\t\tshadowMaterialVertical.needsUpdate = true;\n\t\t\tshadowMaterialHorizontal.needsUpdate = true;\n\n\t\t}\n\n\t\t// vertical pass\n\n\t\tshadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;\n\t\tshadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;\n\t\tshadowMaterialVertical.uniforms.radius.value = shadow.radius;\n\t\t_renderer.setRenderTarget( shadow.mapPass );\n\t\t_renderer.clear();\n\t\t_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null );\n\n\t\t// horizontal pass\n\n\t\tshadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;\n\t\tshadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;\n\t\tshadowMaterialHorizontal.uniforms.radius.value = shadow.radius;\n\t\t_renderer.setRenderTarget( shadow.map );\n\t\t_renderer.clear();\n\t\t_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null );\n\n\t}\n\n\tfunction getDepthMaterial( object, geometry, material, light, shadowCameraNear, shadowCameraFar, type ) {\n\n\t\tlet result = null;\n\n\t\tconst customMaterial = ( light.isPointLight === true ) ? object.customDistanceMaterial : object.customDepthMaterial;\n\n\t\tif ( customMaterial !== undefined ) {\n\n\t\t\tresult = customMaterial;\n\n\t\t} else {\n\n\t\t\tresult = ( light.isPointLight === true ) ? _distanceMaterial : _depthMaterial;\n\n\t\t}\n\n\t\tif ( ( _renderer.localClippingEnabled && material.clipShadows === true && material.clippingPlanes.length !== 0 ) ||\n\t\t\t( material.displacementMap && material.displacementScale !== 0 ) ||\n\t\t\t( material.alphaMap && material.alphaTest > 0 ) ) {\n\n\t\t\t// in this case we need a unique material instance reflecting the\n\t\t\t// appropriate state\n\n\t\t\tconst keyA = result.uuid, keyB = material.uuid;\n\n\t\t\tlet materialsForVariant = _materialCache[ keyA ];\n\n\t\t\tif ( materialsForVariant === undefined ) {\n\n\t\t\t\tmaterialsForVariant = {};\n\t\t\t\t_materialCache[ keyA ] = materialsForVariant;\n\n\t\t\t}\n\n\t\t\tlet cachedMaterial = materialsForVariant[ keyB ];\n\n\t\t\tif ( cachedMaterial === undefined ) {\n\n\t\t\t\tcachedMaterial = result.clone();\n\t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\n\n\t\t\t}\n\n\t\t\tresult = cachedMaterial;\n\n\t\t}\n\n\t\tresult.visible = material.visible;\n\t\tresult.wireframe = material.wireframe;\n\n\t\tif ( type === VSMShadowMap ) {\n\n\t\t\tresult.side = ( material.shadowSide !== null ) ? material.shadowSide : material.side;\n\n\t\t} else {\n\n\t\t\tresult.side = ( material.shadowSide !== null ) ? material.shadowSide : shadowSide[ material.side ];\n\n\t\t}\n\n\t\tresult.alphaMap = material.alphaMap;\n\t\tresult.alphaTest = material.alphaTest;\n\n\t\tresult.clipShadows = material.clipShadows;\n\t\tresult.clippingPlanes = material.clippingPlanes;\n\t\tresult.clipIntersection = material.clipIntersection;\n\n\t\tresult.displacementMap = material.displacementMap;\n\t\tresult.displacementScale = material.displacementScale;\n\t\tresult.displacementBias = material.displacementBias;\n\n\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t\tresult.linewidth = material.linewidth;\n\n\t\tif ( light.isPointLight === true && result.isMeshDistanceMaterial === true ) {\n\n\t\t\tresult.referencePosition.setFromMatrixPosition( light.matrixWorld );\n\t\t\tresult.nearDistance = shadowCameraNear;\n\t\t\tresult.farDistance = shadowCameraFar;\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\tfunction renderObject( object, camera, shadowCamera, light, type ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tconst visible = object.layers.test( camera.layers );\n\n\t\tif ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {\n\n\t\t\tif ( ( object.castShadow || ( object.receiveShadow && type === VSMShadowMap ) ) && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {\n\n\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\n\n\t\t\t\tconst geometry = _objects.update( object );\n\t\t\t\tconst material = object.material;\n\n\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\tconst groups = geometry.groups;\n\n\t\t\t\t\tfor ( let k = 0, kl = groups.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\tconst group = groups[ k ];\n\t\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\tconst depthMaterial = getDepthMaterial( object, geometry, groupMaterial, light, shadowCamera.near, shadowCamera.far, type );\n\n\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\tconst depthMaterial = getDepthMaterial( object, geometry, material, light, shadowCamera.near, shadowCamera.far, type );\n\n\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst children = object.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\trenderObject( children[ i ], camera, shadowCamera, light, type );\n\n\t\t}\n\n\t}\n\n}\n\nfunction WebGLState( gl, extensions, capabilities ) {\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\n\tfunction ColorBuffer() {\n\n\t\tlet locked = false;\n\n\t\tconst color = new Vector4();\n\t\tlet currentColorMask = null;\n\t\tconst currentColorClear = new Vector4( 0, 0, 0, 0 );\n\n\t\treturn {\n\n\t\t\tsetMask: function ( colorMask ) {\n\n\t\t\t\tif ( currentColorMask !== colorMask && ! locked ) {\n\n\t\t\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\n\t\t\t\t\tcurrentColorMask = colorMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\tlocked = lock;\n\n\t\t\t},\n\n\t\t\tsetClear: function ( r, g, b, a, premultipliedAlpha ) {\n\n\t\t\t\tif ( premultipliedAlpha === true ) {\n\n\t\t\t\t\tr *= a; g *= a; b *= a;\n\n\t\t\t\t}\n\n\t\t\t\tcolor.set( r, g, b, a );\n\n\t\t\t\tif ( currentColorClear.equals( color ) === false ) {\n\n\t\t\t\t\tgl.clearColor( r, g, b, a );\n\t\t\t\t\tcurrentColorClear.copy( color );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\treset: function () {\n\n\t\t\t\tlocked = false;\n\n\t\t\t\tcurrentColorMask = null;\n\t\t\t\tcurrentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tfunction DepthBuffer() {\n\n\t\tlet locked = false;\n\n\t\tlet currentDepthMask = null;\n\t\tlet currentDepthFunc = null;\n\t\tlet currentDepthClear = null;\n\n\t\treturn {\n\n\t\t\tsetTest: function ( depthTest ) {\n\n\t\t\t\tif ( depthTest ) {\n\n\t\t\t\t\tenable( 2929 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdisable( 2929 );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetMask: function ( depthMask ) {\n\n\t\t\t\tif ( currentDepthMask !== depthMask && ! locked ) {\n\n\t\t\t\t\tgl.depthMask( depthMask );\n\t\t\t\t\tcurrentDepthMask = depthMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetFunc: function ( depthFunc ) {\n\n\t\t\t\tif ( currentDepthFunc !== depthFunc ) {\n\n\t\t\t\t\tif ( depthFunc ) {\n\n\t\t\t\t\t\tswitch ( depthFunc ) {\n\n\t\t\t\t\t\t\tcase NeverDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( 512 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase AlwaysDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( 519 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase LessDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( 513 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase LessEqualDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( 515 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase EqualDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( 514 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase GreaterEqualDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( 518 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase GreaterDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( 516 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase NotEqualDepth:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( 517 );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\t\tgl.depthFunc( 515 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tgl.depthFunc( 515 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentDepthFunc = depthFunc;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\tlocked = lock;\n\n\t\t\t},\n\n\t\t\tsetClear: function ( depth ) {\n\n\t\t\t\tif ( currentDepthClear !== depth ) {\n\n\t\t\t\t\tgl.clearDepth( depth );\n\t\t\t\t\tcurrentDepthClear = depth;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\treset: function () {\n\n\t\t\t\tlocked = false;\n\n\t\t\t\tcurrentDepthMask = null;\n\t\t\t\tcurrentDepthFunc = null;\n\t\t\t\tcurrentDepthClear = null;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tfunction StencilBuffer() {\n\n\t\tlet locked = false;\n\n\t\tlet currentStencilMask = null;\n\t\tlet currentStencilFunc = null;\n\t\tlet currentStencilRef = null;\n\t\tlet currentStencilFuncMask = null;\n\t\tlet currentStencilFail = null;\n\t\tlet currentStencilZFail = null;\n\t\tlet currentStencilZPass = null;\n\t\tlet currentStencilClear = null;\n\n\t\treturn {\n\n\t\t\tsetTest: function ( stencilTest ) {\n\n\t\t\t\tif ( ! locked ) {\n\n\t\t\t\t\tif ( stencilTest ) {\n\n\t\t\t\t\t\tenable( 2960 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tdisable( 2960 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetMask: function ( stencilMask ) {\n\n\t\t\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\n\n\t\t\t\t\tgl.stencilMask( stencilMask );\n\t\t\t\t\tcurrentStencilMask = stencilMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetFunc: function ( stencilFunc, stencilRef, stencilMask ) {\n\n\t\t\t\tif ( currentStencilFunc !== stencilFunc ||\n\t\t\t\t     currentStencilRef !== stencilRef ||\n\t\t\t\t     currentStencilFuncMask !== stencilMask ) {\n\n\t\t\t\t\tgl.stencilFunc( stencilFunc, stencilRef, stencilMask );\n\n\t\t\t\t\tcurrentStencilFunc = stencilFunc;\n\t\t\t\t\tcurrentStencilRef = stencilRef;\n\t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetOp: function ( stencilFail, stencilZFail, stencilZPass ) {\n\n\t\t\t\tif ( currentStencilFail !== stencilFail ||\n\t\t\t\t     currentStencilZFail !== stencilZFail ||\n\t\t\t\t     currentStencilZPass !== stencilZPass ) {\n\n\t\t\t\t\tgl.stencilOp( stencilFail, stencilZFail, stencilZPass );\n\n\t\t\t\t\tcurrentStencilFail = stencilFail;\n\t\t\t\t\tcurrentStencilZFail = stencilZFail;\n\t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\tlocked = lock;\n\n\t\t\t},\n\n\t\t\tsetClear: function ( stencil ) {\n\n\t\t\t\tif ( currentStencilClear !== stencil ) {\n\n\t\t\t\t\tgl.clearStencil( stencil );\n\t\t\t\t\tcurrentStencilClear = stencil;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\treset: function () {\n\n\t\t\t\tlocked = false;\n\n\t\t\t\tcurrentStencilMask = null;\n\t\t\t\tcurrentStencilFunc = null;\n\t\t\t\tcurrentStencilRef = null;\n\t\t\t\tcurrentStencilFuncMask = null;\n\t\t\t\tcurrentStencilFail = null;\n\t\t\t\tcurrentStencilZFail = null;\n\t\t\t\tcurrentStencilZPass = null;\n\t\t\t\tcurrentStencilClear = null;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t//\n\n\tconst colorBuffer = new ColorBuffer();\n\tconst depthBuffer = new DepthBuffer();\n\tconst stencilBuffer = new StencilBuffer();\n\n\tlet enabledCapabilities = {};\n\n\tlet currentBoundFramebuffers = {};\n\n\tlet currentProgram = null;\n\n\tlet currentBlendingEnabled = false;\n\tlet currentBlending = null;\n\tlet currentBlendEquation = null;\n\tlet currentBlendSrc = null;\n\tlet currentBlendDst = null;\n\tlet currentBlendEquationAlpha = null;\n\tlet currentBlendSrcAlpha = null;\n\tlet currentBlendDstAlpha = null;\n\tlet currentPremultipledAlpha = false;\n\n\tlet currentFlipSided = null;\n\tlet currentCullFace = null;\n\n\tlet currentLineWidth = null;\n\n\tlet currentPolygonOffsetFactor = null;\n\tlet currentPolygonOffsetUnits = null;\n\n\tconst maxTextures = gl.getParameter( 35661 );\n\n\tlet lineWidthAvailable = false;\n\tlet version = 0;\n\tconst glVersion = gl.getParameter( 7938 );\n\n\tif ( glVersion.indexOf( 'WebGL' ) !== - 1 ) {\n\n\t\tversion = parseFloat( /^WebGL (\\d)/.exec( glVersion )[ 1 ] );\n\t\tlineWidthAvailable = ( version >= 1.0 );\n\n\t} else if ( glVersion.indexOf( 'OpenGL ES' ) !== - 1 ) {\n\n\t\tversion = parseFloat( /^OpenGL ES (\\d)/.exec( glVersion )[ 1 ] );\n\t\tlineWidthAvailable = ( version >= 2.0 );\n\n\t}\n\n\tlet currentTextureSlot = null;\n\tlet currentBoundTextures = {};\n\n\tconst scissorParam = gl.getParameter( 3088 );\n\tconst viewportParam = gl.getParameter( 2978 );\n\n\tconst currentScissor = new Vector4().fromArray( scissorParam );\n\tconst currentViewport = new Vector4().fromArray( viewportParam );\n\n\tfunction createTexture( type, target, count ) {\n\n\t\tconst data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\n\t\tconst texture = gl.createTexture();\n\n\t\tgl.bindTexture( type, texture );\n\t\tgl.texParameteri( type, 10241, 9728 );\n\t\tgl.texParameteri( type, 10240, 9728 );\n\n\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\tgl.texImage2D( target + i, 0, 6408, 1, 1, 0, 6408, 5121, data );\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\tconst emptyTextures = {};\n\temptyTextures[ 3553 ] = createTexture( 3553, 3553, 1 );\n\temptyTextures[ 34067 ] = createTexture( 34067, 34069, 6 );\n\n\t// init\n\n\tcolorBuffer.setClear( 0, 0, 0, 1 );\n\tdepthBuffer.setClear( 1 );\n\tstencilBuffer.setClear( 0 );\n\n\tenable( 2929 );\n\tdepthBuffer.setFunc( LessEqualDepth );\n\n\tsetFlipSided( false );\n\tsetCullFace( CullFaceBack );\n\tenable( 2884 );\n\n\tsetBlending( NoBlending );\n\n\t//\n\n\tfunction enable( id ) {\n\n\t\tif ( enabledCapabilities[ id ] !== true ) {\n\n\t\t\tgl.enable( id );\n\t\t\tenabledCapabilities[ id ] = true;\n\n\t\t}\n\n\t}\n\n\tfunction disable( id ) {\n\n\t\tif ( enabledCapabilities[ id ] !== false ) {\n\n\t\t\tgl.disable( id );\n\t\t\tenabledCapabilities[ id ] = false;\n\n\t\t}\n\n\t}\n\n\tfunction bindFramebuffer( target, framebuffer ) {\n\n\t\tif ( currentBoundFramebuffers[ target ] !== framebuffer ) {\n\n\t\t\tgl.bindFramebuffer( target, framebuffer );\n\n\t\t\tcurrentBoundFramebuffers[ target ] = framebuffer;\n\n\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t// 36009 is equivalent to 36160\n\n\t\t\t\tif ( target === 36009 ) {\n\n\t\t\t\t\tcurrentBoundFramebuffers[ 36160 ] = framebuffer;\n\n\t\t\t\t}\n\n\t\t\t\tif ( target === 36160 ) {\n\n\t\t\t\t\tcurrentBoundFramebuffers[ 36009 ] = framebuffer;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\tfunction useProgram( program ) {\n\n\t\tif ( currentProgram !== program ) {\n\n\t\t\tgl.useProgram( program );\n\n\t\t\tcurrentProgram = program;\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\tconst equationToGL = {\n\t\t[ AddEquation ]: 32774,\n\t\t[ SubtractEquation ]: 32778,\n\t\t[ ReverseSubtractEquation ]: 32779\n\t};\n\n\tif ( isWebGL2 ) {\n\n\t\tequationToGL[ MinEquation ] = 32775;\n\t\tequationToGL[ MaxEquation ] = 32776;\n\n\t} else {\n\n\t\tconst extension = extensions.get( 'EXT_blend_minmax' );\n\n\t\tif ( extension !== null ) {\n\n\t\t\tequationToGL[ MinEquation ] = extension.MIN_EXT;\n\t\t\tequationToGL[ MaxEquation ] = extension.MAX_EXT;\n\n\t\t}\n\n\t}\n\n\tconst factorToGL = {\n\t\t[ ZeroFactor ]: 0,\n\t\t[ OneFactor ]: 1,\n\t\t[ SrcColorFactor ]: 768,\n\t\t[ SrcAlphaFactor ]: 770,\n\t\t[ SrcAlphaSaturateFactor ]: 776,\n\t\t[ DstColorFactor ]: 774,\n\t\t[ DstAlphaFactor ]: 772,\n\t\t[ OneMinusSrcColorFactor ]: 769,\n\t\t[ OneMinusSrcAlphaFactor ]: 771,\n\t\t[ OneMinusDstColorFactor ]: 775,\n\t\t[ OneMinusDstAlphaFactor ]: 773\n\t};\n\n\tfunction setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\n\n\t\tif ( blending === NoBlending ) {\n\n\t\t\tif ( currentBlendingEnabled === true ) {\n\n\t\t\t\tdisable( 3042 );\n\t\t\t\tcurrentBlendingEnabled = false;\n\n\t\t\t}\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( currentBlendingEnabled === false ) {\n\n\t\t\tenable( 3042 );\n\t\t\tcurrentBlendingEnabled = true;\n\n\t\t}\n\n\t\tif ( blending !== CustomBlending ) {\n\n\t\t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\n\n\t\t\t\tif ( currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation ) {\n\n\t\t\t\t\tgl.blendEquation( 32774 );\n\n\t\t\t\t\tcurrentBlendEquation = AddEquation;\n\t\t\t\t\tcurrentBlendEquationAlpha = AddEquation;\n\n\t\t\t\t}\n\n\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( 1, 771, 1, 771 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\tgl.blendFunc( 1, 1 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( 0, 0, 769, 771 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( 0, 768, 0, 770 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( 770, 771, 1, 771 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\tgl.blendFunc( 770, 1 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\tgl.blendFunc( 0, 769 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\tgl.blendFunc( 0, 768 );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tcurrentBlendSrc = null;\n\t\t\t\tcurrentBlendDst = null;\n\t\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\t\tcurrentBlendDstAlpha = null;\n\n\t\t\t\tcurrentBlending = blending;\n\t\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\n\t\t\t}\n\n\t\t\treturn;\n\n\t\t}\n\n\t\t// custom blending\n\n\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\n\n\t\t\tgl.blendEquationSeparate( equationToGL[ blendEquation ], equationToGL[ blendEquationAlpha ] );\n\n\t\t\tcurrentBlendEquation = blendEquation;\n\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\n\t\t}\n\n\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\n\n\t\t\tgl.blendFuncSeparate( factorToGL[ blendSrc ], factorToGL[ blendDst ], factorToGL[ blendSrcAlpha ], factorToGL[ blendDstAlpha ] );\n\n\t\t\tcurrentBlendSrc = blendSrc;\n\t\t\tcurrentBlendDst = blendDst;\n\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\n\t\t}\n\n\t\tcurrentBlending = blending;\n\t\tcurrentPremultipledAlpha = null;\n\n\t}\n\n\tfunction setMaterial( material, frontFaceCW ) {\n\n\t\tmaterial.side === DoubleSide\n\t\t\t? disable( 2884 )\n\t\t\t: enable( 2884 );\n\n\t\tlet flipSided = ( material.side === BackSide );\n\t\tif ( frontFaceCW ) flipSided = ! flipSided;\n\n\t\tsetFlipSided( flipSided );\n\n\t\t( material.blending === NormalBlending && material.transparent === false )\n\t\t\t? setBlending( NoBlending )\n\t\t\t: setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );\n\n\t\tdepthBuffer.setFunc( material.depthFunc );\n\t\tdepthBuffer.setTest( material.depthTest );\n\t\tdepthBuffer.setMask( material.depthWrite );\n\t\tcolorBuffer.setMask( material.colorWrite );\n\n\t\tconst stencilWrite = material.stencilWrite;\n\t\tstencilBuffer.setTest( stencilWrite );\n\t\tif ( stencilWrite ) {\n\n\t\t\tstencilBuffer.setMask( material.stencilWriteMask );\n\t\t\tstencilBuffer.setFunc( material.stencilFunc, material.stencilRef, material.stencilFuncMask );\n\t\t\tstencilBuffer.setOp( material.stencilFail, material.stencilZFail, material.stencilZPass );\n\n\t\t}\n\n\t\tsetPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\n\t\tmaterial.alphaToCoverage === true\n\t\t\t? enable( 32926 )\n\t\t\t: disable( 32926 );\n\n\t}\n\n\t//\n\n\tfunction setFlipSided( flipSided ) {\n\n\t\tif ( currentFlipSided !== flipSided ) {\n\n\t\t\tif ( flipSided ) {\n\n\t\t\t\tgl.frontFace( 2304 );\n\n\t\t\t} else {\n\n\t\t\t\tgl.frontFace( 2305 );\n\n\t\t\t}\n\n\t\t\tcurrentFlipSided = flipSided;\n\n\t\t}\n\n\t}\n\n\tfunction setCullFace( cullFace ) {\n\n\t\tif ( cullFace !== CullFaceNone ) {\n\n\t\t\tenable( 2884 );\n\n\t\t\tif ( cullFace !== currentCullFace ) {\n\n\t\t\t\tif ( cullFace === CullFaceBack ) {\n\n\t\t\t\t\tgl.cullFace( 1029 );\n\n\t\t\t\t} else if ( cullFace === CullFaceFront ) {\n\n\t\t\t\t\tgl.cullFace( 1028 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.cullFace( 1032 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdisable( 2884 );\n\n\t\t}\n\n\t\tcurrentCullFace = cullFace;\n\n\t}\n\n\tfunction setLineWidth( width ) {\n\n\t\tif ( width !== currentLineWidth ) {\n\n\t\t\tif ( lineWidthAvailable ) gl.lineWidth( width );\n\n\t\t\tcurrentLineWidth = width;\n\n\t\t}\n\n\t}\n\n\tfunction setPolygonOffset( polygonOffset, factor, units ) {\n\n\t\tif ( polygonOffset ) {\n\n\t\t\tenable( 32823 );\n\n\t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\n\n\t\t\t\tgl.polygonOffset( factor, units );\n\n\t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t\t\t\tcurrentPolygonOffsetUnits = units;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdisable( 32823 );\n\n\t\t}\n\n\t}\n\n\tfunction setScissorTest( scissorTest ) {\n\n\t\tif ( scissorTest ) {\n\n\t\t\tenable( 3089 );\n\n\t\t} else {\n\n\t\t\tdisable( 3089 );\n\n\t\t}\n\n\t}\n\n\t// texture\n\n\tfunction activeTexture( webglSlot ) {\n\n\t\tif ( webglSlot === undefined ) webglSlot = 33984 + maxTextures - 1;\n\n\t\tif ( currentTextureSlot !== webglSlot ) {\n\n\t\t\tgl.activeTexture( webglSlot );\n\t\t\tcurrentTextureSlot = webglSlot;\n\n\t\t}\n\n\t}\n\n\tfunction bindTexture( webglType, webglTexture ) {\n\n\t\tif ( currentTextureSlot === null ) {\n\n\t\t\tactiveTexture();\n\n\t\t}\n\n\t\tlet boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\tif ( boundTexture === undefined ) {\n\n\t\t\tboundTexture = { type: undefined, texture: undefined };\n\t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\n\n\t\t}\n\n\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\n\n\t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\n\n\t\t\tboundTexture.type = webglType;\n\t\t\tboundTexture.texture = webglTexture;\n\n\t\t}\n\n\t}\n\n\tfunction unbindTexture() {\n\n\t\tconst boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\tif ( boundTexture !== undefined && boundTexture.type !== undefined ) {\n\n\t\t\tgl.bindTexture( boundTexture.type, null );\n\n\t\t\tboundTexture.type = undefined;\n\t\t\tboundTexture.texture = undefined;\n\n\t\t}\n\n\t}\n\n\tfunction compressedTexImage2D() {\n\n\t\ttry {\n\n\t\t\tgl.compressedTexImage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction texSubImage2D() {\n\n\t\ttry {\n\n\t\t\tgl.texSubImage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction texStorage2D() {\n\n\t\ttry {\n\n\t\t\tgl.texStorage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction texImage2D() {\n\n\t\ttry {\n\n\t\t\tgl.texImage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction texImage3D() {\n\n\t\ttry {\n\n\t\t\tgl.texImage3D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\t//\n\n\tfunction scissor( scissor ) {\n\n\t\tif ( currentScissor.equals( scissor ) === false ) {\n\n\t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\n\t\t\tcurrentScissor.copy( scissor );\n\n\t\t}\n\n\t}\n\n\tfunction viewport( viewport ) {\n\n\t\tif ( currentViewport.equals( viewport ) === false ) {\n\n\t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\n\t\t\tcurrentViewport.copy( viewport );\n\n\t\t}\n\n\t}\n\n\t//\n\n\tfunction reset() {\n\n\t\t// reset state\n\n\t\tgl.disable( 3042 );\n\t\tgl.disable( 2884 );\n\t\tgl.disable( 2929 );\n\t\tgl.disable( 32823 );\n\t\tgl.disable( 3089 );\n\t\tgl.disable( 2960 );\n\t\tgl.disable( 32926 );\n\n\t\tgl.blendEquation( 32774 );\n\t\tgl.blendFunc( 1, 0 );\n\t\tgl.blendFuncSeparate( 1, 0, 1, 0 );\n\n\t\tgl.colorMask( true, true, true, true );\n\t\tgl.clearColor( 0, 0, 0, 0 );\n\n\t\tgl.depthMask( true );\n\t\tgl.depthFunc( 513 );\n\t\tgl.clearDepth( 1 );\n\n\t\tgl.stencilMask( 0xffffffff );\n\t\tgl.stencilFunc( 519, 0, 0xffffffff );\n\t\tgl.stencilOp( 7680, 7680, 7680 );\n\t\tgl.clearStencil( 0 );\n\n\t\tgl.cullFace( 1029 );\n\t\tgl.frontFace( 2305 );\n\n\t\tgl.polygonOffset( 0, 0 );\n\n\t\tgl.activeTexture( 33984 );\n\n\t\tgl.bindFramebuffer( 36160, null );\n\n\t\tif ( isWebGL2 === true ) {\n\n\t\t\tgl.bindFramebuffer( 36009, null );\n\t\t\tgl.bindFramebuffer( 36008, null );\n\n\t\t}\n\n\t\tgl.useProgram( null );\n\n\t\tgl.lineWidth( 1 );\n\n\t\tgl.scissor( 0, 0, gl.canvas.width, gl.canvas.height );\n\t\tgl.viewport( 0, 0, gl.canvas.width, gl.canvas.height );\n\n\t\t// reset internals\n\n\t\tenabledCapabilities = {};\n\n\t\tcurrentTextureSlot = null;\n\t\tcurrentBoundTextures = {};\n\n\t\tcurrentBoundFramebuffers = {};\n\n\t\tcurrentProgram = null;\n\n\t\tcurrentBlendingEnabled = false;\n\t\tcurrentBlending = null;\n\t\tcurrentBlendEquation = null;\n\t\tcurrentBlendSrc = null;\n\t\tcurrentBlendDst = null;\n\t\tcurrentBlendEquationAlpha = null;\n\t\tcurrentBlendSrcAlpha = null;\n\t\tcurrentBlendDstAlpha = null;\n\t\tcurrentPremultipledAlpha = false;\n\n\t\tcurrentFlipSided = null;\n\t\tcurrentCullFace = null;\n\n\t\tcurrentLineWidth = null;\n\n\t\tcurrentPolygonOffsetFactor = null;\n\t\tcurrentPolygonOffsetUnits = null;\n\n\t\tcurrentScissor.set( 0, 0, gl.canvas.width, gl.canvas.height );\n\t\tcurrentViewport.set( 0, 0, gl.canvas.width, gl.canvas.height );\n\n\t\tcolorBuffer.reset();\n\t\tdepthBuffer.reset();\n\t\tstencilBuffer.reset();\n\n\t}\n\n\treturn {\n\n\t\tbuffers: {\n\t\t\tcolor: colorBuffer,\n\t\t\tdepth: depthBuffer,\n\t\t\tstencil: stencilBuffer\n\t\t},\n\n\t\tenable: enable,\n\t\tdisable: disable,\n\n\t\tbindFramebuffer: bindFramebuffer,\n\n\t\tuseProgram: useProgram,\n\n\t\tsetBlending: setBlending,\n\t\tsetMaterial: setMaterial,\n\n\t\tsetFlipSided: setFlipSided,\n\t\tsetCullFace: setCullFace,\n\n\t\tsetLineWidth: setLineWidth,\n\t\tsetPolygonOffset: setPolygonOffset,\n\n\t\tsetScissorTest: setScissorTest,\n\n\t\tactiveTexture: activeTexture,\n\t\tbindTexture: bindTexture,\n\t\tunbindTexture: unbindTexture,\n\t\tcompressedTexImage2D: compressedTexImage2D,\n\t\ttexImage2D: texImage2D,\n\t\ttexImage3D: texImage3D,\n\n\t\ttexStorage2D: texStorage2D,\n\t\ttexSubImage2D: texSubImage2D,\n\n\t\tscissor: scissor,\n\t\tviewport: viewport,\n\n\t\treset: reset\n\n\t};\n\n}\n\nfunction WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\tconst maxTextures = capabilities.maxTextures;\n\tconst maxCubemapSize = capabilities.maxCubemapSize;\n\tconst maxTextureSize = capabilities.maxTextureSize;\n\tconst maxSamples = capabilities.maxSamples;\n\tconst hasMultisampledRenderToTexture = extensions.has( 'WEBGL_multisampled_render_to_texture' );\n\tconst MultisampledRenderToTextureExtension = hasMultisampledRenderToTexture ? extensions.get( 'WEBGL_multisampled_render_to_texture' ) : undefined;\n\n\tconst _videoTextures = new WeakMap();\n\tlet _canvas;\n\n\t// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\n\t// also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\n\t// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).\n\n\tlet useOffscreenCanvas = false;\n\n\ttry {\n\n\t\tuseOffscreenCanvas = typeof OffscreenCanvas !== 'undefined'\n\t\t\t&& ( new OffscreenCanvas( 1, 1 ).getContext( '2d' ) ) !== null;\n\n\t} catch ( err ) {\n\n\t\t// Ignore any errors\n\n\t}\n\n\tfunction createCanvas( width, height ) {\n\n\t\t// Use OffscreenCanvas when available. Specially needed in web workers\n\n\t\treturn useOffscreenCanvas ?\n\t\t\tnew OffscreenCanvas( width, height ) : createElementNS( 'canvas' );\n\n\t}\n\n\tfunction resizeImage( image, needsPowerOfTwo, needsNewCanvas, maxSize ) {\n\n\t\tlet scale = 1;\n\n\t\t// handle case if texture exceeds max size\n\n\t\tif ( image.width > maxSize || image.height > maxSize ) {\n\n\t\t\tscale = maxSize / Math.max( image.width, image.height );\n\n\t\t}\n\n\t\t// only perform resize if necessary\n\n\t\tif ( scale < 1 || needsPowerOfTwo === true ) {\n\n\t\t\t// only perform resize for certain image types\n\n\t\t\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n\t\t\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\n\n\t\t\t\tconst floor = needsPowerOfTwo ? floorPowerOfTwo : Math.floor;\n\n\t\t\t\tconst width = floor( scale * image.width );\n\t\t\t\tconst height = floor( scale * image.height );\n\n\t\t\t\tif ( _canvas === undefined ) _canvas = createCanvas( width, height );\n\n\t\t\t\t// cube textures can't reuse the same canvas\n\n\t\t\t\tconst canvas = needsNewCanvas ? createCanvas( width, height ) : _canvas;\n\n\t\t\t\tcanvas.width = width;\n\t\t\t\tcanvas.height = height;\n\n\t\t\t\tconst context = canvas.getContext( '2d' );\n\t\t\t\tcontext.drawImage( image, 0, 0, width, height );\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').' );\n\n\t\t\t\treturn canvas;\n\n\t\t\t} else {\n\n\t\t\t\tif ( 'data' in image ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').' );\n\n\t\t\t\t}\n\n\t\t\t\treturn image;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn image;\n\n\t}\n\n\tfunction isPowerOfTwo$1( image ) {\n\n\t\treturn isPowerOfTwo( image.width ) && isPowerOfTwo( image.height );\n\n\t}\n\n\tfunction textureNeedsPowerOfTwo( texture ) {\n\n\t\tif ( isWebGL2 ) return false;\n\n\t\treturn ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||\n\t\t\t( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );\n\n\t}\n\n\tfunction textureNeedsGenerateMipmaps( texture, supportsMips ) {\n\n\t\treturn texture.generateMipmaps && supportsMips &&\n\t\t\ttexture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\n\t}\n\n\tfunction generateMipmap( target ) {\n\n\t\t_gl.generateMipmap( target );\n\n\t}\n\n\tfunction getInternalFormat( internalFormatName, glFormat, glType/*, encoding*/ ) {\n\n\t\tif ( isWebGL2 === false ) return glFormat;\n\n\t\tif ( internalFormatName !== null ) {\n\n\t\t\tif ( _gl[ internalFormatName ] !== undefined ) return _gl[ internalFormatName ];\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'' );\n\n\t\t}\n\n\t\tlet internalFormat = glFormat;\n\n\t\tif ( glFormat === 6403 ) {\n\n\t\t\tif ( glType === 5126 ) internalFormat = 33326;\n\t\t\tif ( glType === 5131 ) internalFormat = 33325;\n\t\t\tif ( glType === 5121 ) internalFormat = 33321;\n\n\t\t}\n\n\t\tif ( glFormat === 6407 ) {\n\n\t\t\tif ( glType === 5126 ) internalFormat = 34837;\n\t\t\tif ( glType === 5131 ) internalFormat = 34843;\n\t\t\tif ( glType === 5121 ) internalFormat = 32849;\n\n\t\t}\n\n\t\tif ( glFormat === 6408 ) {\n\n\t\t\tif ( glType === 5126 ) internalFormat = 34836;\n\t\t\tif ( glType === 5131 ) internalFormat = 34842;\n\t\t\t//if ( glType === 5121 ) internalFormat = ( encoding === sRGBEncoding ) ? 35907 : 32856;\n\t\t\tif ( glType === 5121 ) internalFormat = 32856;\n\n\n\t\t}\n\n\t\tif ( internalFormat === 33325 || internalFormat === 33326 ||\n\t\t\tinternalFormat === 34842 || internalFormat === 34836 ) {\n\n\t\t\textensions.get( 'EXT_color_buffer_float' );\n\n\t\t}\n\n\t\treturn internalFormat;\n\n\t}\n\n\tfunction getMipLevels( texture, image, supportsMips ) {\n\n\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) === true ) {\n\n\t\t\t// generated mipmaps via gl.generateMipmap()\n\n\t\t\treturn Math.log2( Math.max( image.width, image.height ) ) + 1;\n\n\t\t} else if ( texture.mipmaps.length > 0 ) {\n\n\t\t\t// user-defined mipmaps\n\n\t\t\treturn texture.mipmaps.length;\n\n\t\t} else {\n\n\t\t\t// texture without mipmaps (only base level)\n\n\t\t\treturn 1;\n\n\t\t}\n\n\t}\n\n\t// Fallback filters for non-power-of-2 textures\n\n\tfunction filterFallback( f ) {\n\n\t\tif ( f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter ) {\n\n\t\t\treturn 9728;\n\n\t\t}\n\n\t\treturn 9729;\n\n\t}\n\n\t//\n\n\tfunction onTextureDispose( event ) {\n\n\t\tconst texture = event.target;\n\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\tdeallocateTexture( texture );\n\n\t\tif ( texture.isVideoTexture ) {\n\n\t\t\t_videoTextures.delete( texture );\n\n\t\t}\n\n\t\tinfo.memory.textures --;\n\n\t}\n\n\tfunction onRenderTargetDispose( event ) {\n\n\t\tconst renderTarget = event.target;\n\n\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\n\t\tdeallocateRenderTarget( renderTarget );\n\n\t}\n\n\t//\n\n\tfunction deallocateTexture( texture ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( textureProperties.__webglInit === undefined ) return;\n\n\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\tproperties.remove( texture );\n\n\t}\n\n\tfunction deallocateRenderTarget( renderTarget ) {\n\n\t\tconst texture = renderTarget.texture;\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( ! renderTarget ) return;\n\n\t\tif ( textureProperties.__webglTexture !== undefined ) {\n\n\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t\tinfo.memory.textures --;\n\n\t\t}\n\n\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\trenderTarget.depthTexture.dispose();\n\n\t\t}\n\n\t\tif ( renderTarget.isWebGLCubeRenderTarget ) {\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\n\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );\n\t\t\tif ( renderTargetProperties.__webglMultisampledFramebuffer ) _gl.deleteFramebuffer( renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\tif ( renderTargetProperties.__webglColorRenderbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglColorRenderbuffer );\n\t\t\tif ( renderTargetProperties.__webglDepthRenderbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthRenderbuffer );\n\n\t\t}\n\n\t\tif ( renderTarget.isWebGLMultipleRenderTargets ) {\n\n\t\t\tfor ( let i = 0, il = texture.length; i < il; i ++ ) {\n\n\t\t\t\tconst attachmentProperties = properties.get( texture[ i ] );\n\n\t\t\t\tif ( attachmentProperties.__webglTexture ) {\n\n\t\t\t\t\t_gl.deleteTexture( attachmentProperties.__webglTexture );\n\n\t\t\t\t\tinfo.memory.textures --;\n\n\t\t\t\t}\n\n\t\t\t\tproperties.remove( texture[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tproperties.remove( texture );\n\t\tproperties.remove( renderTarget );\n\n\t}\n\n\t//\n\n\tlet textureUnits = 0;\n\n\tfunction resetTextureUnits() {\n\n\t\ttextureUnits = 0;\n\n\t}\n\n\tfunction allocateTextureUnit() {\n\n\t\tconst textureUnit = textureUnits;\n\n\t\tif ( textureUnit >= maxTextures ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures );\n\n\t\t}\n\n\t\ttextureUnits += 1;\n\n\t\treturn textureUnit;\n\n\t}\n\n\t//\n\n\tfunction setTexture2D( texture, slot ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( texture.isVideoTexture ) updateVideoTexture( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tconst image = texture.image;\n\n\t\t\tif ( image === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined' );\n\n\t\t\t} else if ( image.complete === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );\n\n\t\t\t} else {\n\n\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.activeTexture( 33984 + slot );\n\t\tstate.bindTexture( 3553, textureProperties.__webglTexture );\n\n\t}\n\n\tfunction setTexture2DArray( texture, slot ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\treturn;\n\n\t\t}\n\n\t\tstate.activeTexture( 33984 + slot );\n\t\tstate.bindTexture( 35866, textureProperties.__webglTexture );\n\n\t}\n\n\tfunction setTexture3D( texture, slot ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\treturn;\n\n\t\t}\n\n\t\tstate.activeTexture( 33984 + slot );\n\t\tstate.bindTexture( 32879, textureProperties.__webglTexture );\n\n\t}\n\n\tfunction setTextureCube( texture, slot ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tuploadCubeTexture( textureProperties, texture, slot );\n\t\t\treturn;\n\n\t\t}\n\n\t\tstate.activeTexture( 33984 + slot );\n\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\n\n\t}\n\n\tconst wrappingToGL = {\n\t\t[ RepeatWrapping ]: 10497,\n\t\t[ ClampToEdgeWrapping ]: 33071,\n\t\t[ MirroredRepeatWrapping ]: 33648\n\t};\n\n\tconst filterToGL = {\n\t\t[ NearestFilter ]: 9728,\n\t\t[ NearestMipmapNearestFilter ]: 9984,\n\t\t[ NearestMipmapLinearFilter ]: 9986,\n\n\t\t[ LinearFilter ]: 9729,\n\t\t[ LinearMipmapNearestFilter ]: 9985,\n\t\t[ LinearMipmapLinearFilter ]: 9987\n\t};\n\n\tfunction setTextureParameters( textureType, texture, supportsMips ) {\n\n\t\tif ( supportsMips ) {\n\n\t\t\t_gl.texParameteri( textureType, 10242, wrappingToGL[ texture.wrapS ] );\n\t\t\t_gl.texParameteri( textureType, 10243, wrappingToGL[ texture.wrapT ] );\n\n\t\t\tif ( textureType === 32879 || textureType === 35866 ) {\n\n\t\t\t\t_gl.texParameteri( textureType, 32882, wrappingToGL[ texture.wrapR ] );\n\n\t\t\t}\n\n\t\t\t_gl.texParameteri( textureType, 10240, filterToGL[ texture.magFilter ] );\n\t\t\t_gl.texParameteri( textureType, 10241, filterToGL[ texture.minFilter ] );\n\n\t\t} else {\n\n\t\t\t_gl.texParameteri( textureType, 10242, 33071 );\n\t\t\t_gl.texParameteri( textureType, 10243, 33071 );\n\n\t\t\tif ( textureType === 32879 || textureType === 35866 ) {\n\n\t\t\t\t_gl.texParameteri( textureType, 32882, 33071 );\n\n\t\t\t}\n\n\t\t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.' );\n\n\t\t\t}\n\n\t\t\t_gl.texParameteri( textureType, 10240, filterFallback( texture.magFilter ) );\n\t\t\t_gl.texParameteri( textureType, 10241, filterFallback( texture.minFilter ) );\n\n\t\t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {\n\n\t\t\tconst extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tif ( texture.type === FloatType && extensions.has( 'OES_texture_float_linear' ) === false ) return; // verify extension for WebGL 1 and WebGL 2\n\t\t\tif ( isWebGL2 === false && ( texture.type === HalfFloatType && extensions.has( 'OES_texture_half_float_linear' ) === false ) ) return; // verify extension for WebGL 1 only\n\n\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\n\n\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction initTexture( textureProperties, texture ) {\n\n\t\tif ( textureProperties.__webglInit === undefined ) {\n\n\t\t\ttextureProperties.__webglInit = true;\n\n\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\tinfo.memory.textures ++;\n\n\t\t}\n\n\t}\n\n\tfunction uploadTexture( textureProperties, texture, slot ) {\n\n\t\tlet textureType = 3553;\n\n\t\tif ( texture.isDataTexture2DArray ) textureType = 35866;\n\t\tif ( texture.isDataTexture3D ) textureType = 32879;\n\n\t\tinitTexture( textureProperties, texture );\n\n\t\tstate.activeTexture( 33984 + slot );\n\t\tstate.bindTexture( textureType, textureProperties.__webglTexture );\n\n\t\t_gl.pixelStorei( 37440, texture.flipY );\n\t\t_gl.pixelStorei( 37441, texture.premultiplyAlpha );\n\t\t_gl.pixelStorei( 3317, texture.unpackAlignment );\n\t\t_gl.pixelStorei( 37443, 0 );\n\n\t\tconst needsPowerOfTwo = textureNeedsPowerOfTwo( texture ) && isPowerOfTwo$1( texture.image ) === false;\n\t\tconst image = resizeImage( texture.image, needsPowerOfTwo, false, maxTextureSize );\n\n\t\tconst supportsMips = isPowerOfTwo$1( image ) || isWebGL2,\n\t\t\tglFormat = utils.convert( texture.format );\n\n\t\tlet glType = utils.convert( texture.type ),\n\t\t\tglInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );\n\n\t\tsetTextureParameters( textureType, texture, supportsMips );\n\n\t\tlet mipmap;\n\t\tconst mipmaps = texture.mipmaps;\n\n\t\tif ( texture.isDepthTexture ) {\n\n\t\t\t// populate depth texture with dummy data\n\n\t\t\tglInternalFormat = 6402;\n\n\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\tif ( texture.type === FloatType ) {\n\n\t\t\t\t\tglInternalFormat = 36012;\n\n\t\t\t\t} else if ( texture.type === UnsignedIntType ) {\n\n\t\t\t\t\tglInternalFormat = 33190;\n\n\t\t\t\t} else if ( texture.type === UnsignedInt248Type ) {\n\n\t\t\t\t\tglInternalFormat = 35056;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tglInternalFormat = 33189; // WebGL2 requires sized internalformat for glTexImage2D\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( texture.type === FloatType ) {\n\n\t\t\t\t\tconsole.error( 'WebGLRenderer: Floating point depth texture requires WebGL2.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// validation checks for WebGL 1\n\n\t\t\tif ( texture.format === DepthFormat && glInternalFormat === 6402 ) {\n\n\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\tif ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );\n\n\t\t\t\t\ttexture.type = UnsignedShortType;\n\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( texture.format === DepthStencilFormat && glInternalFormat === 6402 ) {\n\n\t\t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\tglInternalFormat = 34041;\n\n\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\tif ( texture.type !== UnsignedInt248Type ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );\n\n\t\t\t\t\ttexture.type = UnsignedInt248Type;\n\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );\n\n\t\t} else if ( texture.isDataTexture ) {\n\n\t\t\t// use manually created mipmaps if available\n\t\t\t// if there are no manual mipmaps\n\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\n\n\t\t\t\tfor ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\tmipmap = mipmaps[ i ];\n\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t}\n\n\t\t\t\ttexture.generateMipmaps = false;\n\n\t\t\t} else {\n\n\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\n\t\t\t}\n\n\t\t} else if ( texture.isCompressedTexture ) {\n\n\t\t\tfor ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\tstate.compressedTexImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( texture.isDataTexture2DArray ) {\n\n\t\t\tstate.texImage3D( 35866, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\n\n\t\t} else if ( texture.isDataTexture3D ) {\n\n\t\t\tstate.texImage3D( 32879, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\n\n\t\t} else {\n\n\t\t\t// regular Texture (image, video, canvas)\n\n\t\t\t// use manually created mipmaps if available\n\t\t\t// if there are no manual mipmaps\n\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\tconst levels = getMipLevels( texture, image, supportsMips );\n\t\t\tconst useTexStorage = ( isWebGL2 && texture.isVideoTexture !== true );\n\t\t\tconst allocateMemory = ( textureProperties.__version === undefined );\n\n\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\n\n\t\t\t\tif ( useTexStorage && allocateMemory ) {\n\n\t\t\t\t\tstate.texStorage2D( 3553, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\tstate.texSubImage2D( 3553, i, 0, 0, glFormat, glType, mipmap );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstate.texImage2D( 3553, i, glInternalFormat, glFormat, glType, mipmap );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\ttexture.generateMipmaps = false;\n\n\t\t\t} else {\n\n\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\tif ( allocateMemory ) {\n\n\t\t\t\t\t\tstate.texStorage2D( 3553, levels, glInternalFormat, image.width, image.height );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.texSubImage2D( 3553, 0, 0, 0, glFormat, glType, image );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( 3553, 0, glInternalFormat, glFormat, glType, image );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\tgenerateMipmap( textureType );\n\n\t\t}\n\n\t\ttextureProperties.__version = texture.version;\n\n\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t}\n\n\tfunction uploadCubeTexture( textureProperties, texture, slot ) {\n\n\t\tif ( texture.image.length !== 6 ) return;\n\n\t\tinitTexture( textureProperties, texture );\n\n\t\tstate.activeTexture( 33984 + slot );\n\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\n\n\t\t_gl.pixelStorei( 37440, texture.flipY );\n\t\t_gl.pixelStorei( 37441, texture.premultiplyAlpha );\n\t\t_gl.pixelStorei( 3317, texture.unpackAlignment );\n\t\t_gl.pixelStorei( 37443, 0 );\n\n\t\tconst isCompressed = ( texture && ( texture.isCompressedTexture || texture.image[ 0 ].isCompressedTexture ) );\n\t\tconst isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );\n\n\t\tconst cubeImage = [];\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tif ( ! isCompressed && ! isDataTexture ) {\n\n\t\t\t\tcubeImage[ i ] = resizeImage( texture.image[ i ], false, true, maxCubemapSize );\n\n\t\t\t} else {\n\n\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst image = cubeImage[ 0 ],\n\t\t\tsupportsMips = isPowerOfTwo$1( image ) || isWebGL2,\n\t\t\tglFormat = utils.convert( texture.format ),\n\t\t\tglType = utils.convert( texture.type ),\n\t\t\tglInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );\n\n\t\tsetTextureParameters( 34067, texture, supportsMips );\n\n\t\tlet mipmaps;\n\n\t\tif ( isCompressed ) {\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tmipmaps = cubeImage[ i ].mipmaps;\n\n\t\t\t\tfor ( let j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\tconst mipmap = mipmaps[ j ];\n\n\t\t\t\t\tif ( texture.format !== RGBAFormat && texture.format !== RGBFormat ) {\n\n\t\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\t\tstate.compressedTexImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstate.texImage2D( 34069 + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tmipmaps = texture.mipmaps;\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tif ( isDataTexture ) {\n\n\t\t\t\t\tstate.texImage2D( 34069 + i, 0, glInternalFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\n\n\t\t\t\t\tfor ( let j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\tconst mipmap = mipmaps[ j ];\n\t\t\t\t\t\tconst mipmapImage = mipmap.image[ i ].image;\n\n\t\t\t\t\t\tstate.texImage2D( 34069 + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage2D( 34069 + i, 0, glInternalFormat, glFormat, glType, cubeImage[ i ] );\n\n\t\t\t\t\tfor ( let j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\tconst mipmap = mipmaps[ j ];\n\n\t\t\t\t\t\tstate.texImage2D( 34069 + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t// We assume images for cube map have the same size.\n\t\t\tgenerateMipmap( 34067 );\n\n\t\t}\n\n\t\ttextureProperties.__version = texture.version;\n\n\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t}\n\n\t// Render targets\n\n\t// Setup storage for target texture and bind it to correct framebuffer\n\tfunction setupFrameBufferTexture( framebuffer, renderTarget, texture, attachment, textureTarget ) {\n\n\t\tconst glFormat = utils.convert( texture.format );\n\t\tconst glType = utils.convert( texture.type );\n\t\tconst glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\n\t\tif ( ! renderTargetProperties.__hasExternalTextures ) {\n\n\t\t\tif ( textureTarget === 32879 || textureTarget === 35866 ) {\n\n\t\t\t\tstate.texImage3D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, renderTarget.depth, 0, glFormat, glType, null );\n\n\t\t\t} else {\n\n\t\t\t\tstate.texImage2D( textureTarget, 0, glInternalFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.bindFramebuffer( 36160, framebuffer );\n\t\tif ( renderTarget.useRenderToTexture ) {\n\n\t\t\tMultisampledRenderToTextureExtension.framebufferTexture2DMultisampleEXT( 36160, attachment, textureTarget, properties.get( texture ).__webglTexture, 0, getRenderTargetSamples( renderTarget ) );\n\n\t\t} else {\n\n\t\t\t_gl.framebufferTexture2D( 36160, attachment, textureTarget, properties.get( texture ).__webglTexture, 0 );\n\n\t\t}\n\n\t\tstate.bindFramebuffer( 36160, null );\n\n\t}\n\n\n\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\tfunction setupRenderBufferStorage( renderbuffer, renderTarget, isMultisample ) {\n\n\t\t_gl.bindRenderbuffer( 36161, renderbuffer );\n\n\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\n\t\t\tlet glInternalFormat = 33189;\n\n\t\t\tif ( isMultisample || renderTarget.useRenderToTexture ) {\n\n\t\t\t\tconst depthTexture = renderTarget.depthTexture;\n\n\t\t\t\tif ( depthTexture && depthTexture.isDepthTexture ) {\n\n\t\t\t\t\tif ( depthTexture.type === FloatType ) {\n\n\t\t\t\t\t\tglInternalFormat = 36012;\n\n\t\t\t\t\t} else if ( depthTexture.type === UnsignedIntType ) {\n\n\t\t\t\t\t\tglInternalFormat = 33190;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tconst samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\tif ( renderTarget.useRenderToTexture ) {\n\n\t\t\t\t\tMultisampledRenderToTextureExtension.renderbufferStorageMultisampleEXT( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t_gl.renderbufferStorage( 36161, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\t\t\t_gl.framebufferRenderbuffer( 36160, 36096, 36161, renderbuffer );\n\n\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\n\t\t\tconst samples = getRenderTargetSamples( renderTarget );\n\n\t\t\tif ( isMultisample && renderTarget.useRenderbuffer ) {\n\n\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, 35056, renderTarget.width, renderTarget.height );\n\n\t\t\t} else if ( renderTarget.useRenderToTexture ) {\n\n\t\t\t\tMultisampledRenderToTextureExtension.renderbufferStorageMultisampleEXT( 36161, samples, 35056, renderTarget.width, renderTarget.height );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.renderbufferStorage( 36161, 34041, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\n\t\t\t_gl.framebufferRenderbuffer( 36160, 33306, 36161, renderbuffer );\n\n\t\t} else {\n\n\t\t\t// Use the first texture for MRT so far\n\t\t\tconst texture = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture[ 0 ] : renderTarget.texture;\n\n\t\t\tconst glFormat = utils.convert( texture.format );\n\t\t\tconst glType = utils.convert( texture.type );\n\t\t\tconst glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );\n\t\t\tconst samples = getRenderTargetSamples( renderTarget );\n\n\t\t\tif ( isMultisample && renderTarget.useRenderbuffer ) {\n\n\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t} else if ( renderTarget.useRenderToTexture ) {\n\n\t\t\t\tMultisampledRenderToTextureExtension.renderbufferStorageMultisampleEXT( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.renderbufferStorage( 36161, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\t\t}\n\n\t\t_gl.bindRenderbuffer( 36161, null );\n\n\t}\n\n\t// Setup resources for a Depth Texture for a FBO (needs an extension)\n\tfunction setupDepthTexture( framebuffer, renderTarget ) {\n\n\t\tconst isCube = ( renderTarget && renderTarget.isWebGLCubeRenderTarget );\n\t\tif ( isCube ) throw new Error( 'Depth Texture with cube render targets is not supported' );\n\n\t\tstate.bindFramebuffer( 36160, framebuffer );\n\n\t\tif ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {\n\n\t\t\tthrow new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );\n\n\t\t}\n\n\t\t// upload an empty depth texture with framebuffer size\n\t\tif ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||\n\t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\n\t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\n\n\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\n\t\t}\n\n\t\tsetTexture2D( renderTarget.depthTexture, 0 );\n\n\t\tconst webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\n\t\tconst samples = getRenderTargetSamples( renderTarget );\n\n\t\tif ( renderTarget.depthTexture.format === DepthFormat ) {\n\n\t\t\tif ( renderTarget.useRenderToTexture ) {\n\n\t\t\t\tMultisampledRenderToTextureExtension.framebufferTexture2DMultisampleEXT( 36160, 36096, 3553, webglDepthTexture, 0, samples );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.framebufferTexture2D( 36160, 36096, 3553, webglDepthTexture, 0 );\n\n\t\t\t}\n\n\t\t} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\n\n\t\t\tif ( renderTarget.useRenderToTexture ) {\n\n\t\t\t\tMultisampledRenderToTextureExtension.framebufferTexture2DMultisampleEXT( 36160, 33306, 3553, webglDepthTexture, 0, samples );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.framebufferTexture2D( 36160, 33306, 3553, webglDepthTexture, 0 );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'Unknown depthTexture format' );\n\n\t\t}\n\n\t}\n\n\t// Setup GL resources for a non-texture depth buffer\n\tfunction setupDepthRenderbuffer( renderTarget ) {\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\tconst isCube = ( renderTarget.isWebGLCubeRenderTarget === true );\n\n\t\tif ( renderTarget.depthTexture && ! renderTargetProperties.__autoAllocateDepthBuffer ) {\n\n\t\t\tif ( isCube ) throw new Error( 'target.depthTexture not supported in Cube render targets' );\n\n\t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\n\n\t\t} else {\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n\t\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tstate.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget, false );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tstate.bindFramebuffer( 36160, renderTargetProperties.__webglFramebuffer );\n\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget, false );\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.bindFramebuffer( 36160, null );\n\n\t}\n\n\t// rebind framebuffer with external textures\n\tfunction rebindTextures( renderTarget, colorTexture, depthTexture ) {\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\n\t\tif ( colorTexture !== undefined ) {\n\n\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, renderTarget.texture, 36064, 3553 );\n\n\t\t}\n\n\t\tif ( depthTexture !== undefined ) {\n\n\t\t\tsetupDepthRenderbuffer( renderTarget );\n\n\t\t}\n\n\t}\n\n\t// Set up GL resources for the render target\n\tfunction setupRenderTarget( renderTarget ) {\n\n\t\tconst texture = renderTarget.texture;\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\tconst textureProperties = properties.get( texture );\n\n\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\n\t\tif ( renderTarget.isWebGLMultipleRenderTargets !== true ) {\n\n\t\t\tif ( textureProperties.__webglTexture === undefined ) {\n\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\t}\n\n\t\t\ttextureProperties.__version = texture.version;\n\t\t\tinfo.memory.textures ++;\n\n\t\t}\n\n\t\tconst isCube = ( renderTarget.isWebGLCubeRenderTarget === true );\n\t\tconst isMultipleRenderTargets = ( renderTarget.isWebGLMultipleRenderTargets === true );\n\t\tconst isRenderTarget3D = texture.isDataTexture3D || texture.isDataTexture2DArray;\n\t\tconst supportsMips = isPowerOfTwo$1( renderTarget ) || isWebGL2;\n\n\t\t// Handles WebGL2 RGBFormat fallback - #18858\n\n\t\tif ( isWebGL2 && texture.format === RGBFormat && ( texture.type === FloatType || texture.type === HalfFloatType ) ) {\n\n\t\t\ttexture.format = RGBAFormat;\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.' );\n\n\t\t}\n\n\t\t// Setup framebuffer\n\n\t\tif ( isCube ) {\n\n\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t\tif ( isMultipleRenderTargets ) {\n\n\t\t\t\tif ( capabilities.drawBuffers ) {\n\n\t\t\t\t\tconst textures = renderTarget.texture;\n\n\t\t\t\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tconst attachmentProperties = properties.get( textures[ i ] );\n\n\t\t\t\t\t\tif ( attachmentProperties.__webglTexture === undefined ) {\n\n\t\t\t\t\t\t\tattachmentProperties.__webglTexture = _gl.createTexture();\n\n\t\t\t\t\t\t\tinfo.memory.textures ++;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.' );\n\n\t\t\t\t}\n\n\t\t\t} else if ( renderTarget.useRenderbuffer ) {\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\trenderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\n\t\t\t\t\trenderTargetProperties.__webglColorRenderbuffer = _gl.createRenderbuffer();\n\n\t\t\t\t\t_gl.bindRenderbuffer( 36161, renderTargetProperties.__webglColorRenderbuffer );\n\n\t\t\t\t\tconst glFormat = utils.convert( texture.format );\n\t\t\t\t\tconst glType = utils.convert( texture.type );\n\t\t\t\t\tconst glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.encoding );\n\t\t\t\t\tconst samples = getRenderTargetSamples( renderTarget );\n\t\t\t\t\t_gl.renderbufferStorageMultisample( 36161, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t\tstate.bindFramebuffer( 36160, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\t\t\t_gl.framebufferRenderbuffer( 36160, 36064, 36161, renderTargetProperties.__webglColorRenderbuffer );\n\t\t\t\t\t_gl.bindRenderbuffer( 36161, null );\n\n\t\t\t\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\t\t\t\trenderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\n\t\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.bindFramebuffer( 36160, null );\n\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Setup color buffer\n\n\t\tif ( isCube ) {\n\n\t\t\tstate.bindTexture( 34067, textureProperties.__webglTexture );\n\t\t\tsetTextureParameters( 34067, texture, supportsMips );\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, texture, 36064, 34069 + i );\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tgenerateMipmap( 34067 );\n\n\t\t\t}\n\n\t\t\tstate.unbindTexture();\n\n\t\t} else if ( isMultipleRenderTargets ) {\n\n\t\t\tconst textures = renderTarget.texture;\n\n\t\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\n\n\t\t\t\tconst attachment = textures[ i ];\n\t\t\t\tconst attachmentProperties = properties.get( attachment );\n\n\t\t\t\tstate.bindTexture( 3553, attachmentProperties.__webglTexture );\n\t\t\t\tsetTextureParameters( 3553, attachment, supportsMips );\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, attachment, 36064 + i, 3553 );\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( attachment, supportsMips ) ) {\n\n\t\t\t\t\tgenerateMipmap( 3553 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.unbindTexture();\n\n\t\t} else {\n\n\t\t\tlet glTextureType = 3553;\n\n\t\t\tif ( isRenderTarget3D ) {\n\n\t\t\t\t// Render targets containing layers, i.e: Texture 3D and 2d arrays\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\tconst isTexture3D = texture.isDataTexture3D;\n\t\t\t\t\tglTextureType = isTexture3D ? 32879 : 35866;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.DataTexture3D and THREE.DataTexture2DArray only supported with WebGL2.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.bindTexture( glTextureType, textureProperties.__webglTexture );\n\t\t\tsetTextureParameters( glTextureType, texture, supportsMips );\n\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, texture, 36064, glTextureType );\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tgenerateMipmap( glTextureType );\n\n\t\t\t}\n\n\t\t\tstate.unbindTexture();\n\n\t\t}\n\n\t\t// Setup depth and stencil buffers\n\n\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\tsetupDepthRenderbuffer( renderTarget );\n\n\t\t}\n\n\t}\n\n\tfunction updateRenderTargetMipmap( renderTarget ) {\n\n\t\tconst supportsMips = isPowerOfTwo$1( renderTarget ) || isWebGL2;\n\n\t\tconst textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [ renderTarget.texture ];\n\n\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\n\n\t\t\tconst texture = textures[ i ];\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tconst target = renderTarget.isWebGLCubeRenderTarget ? 34067 : 3553;\n\t\t\t\tconst webglTexture = properties.get( texture ).__webglTexture;\n\n\t\t\t\tstate.bindTexture( target, webglTexture );\n\t\t\t\tgenerateMipmap( target );\n\t\t\t\tstate.unbindTexture();\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction updateMultisampleRenderTarget( renderTarget ) {\n\n\t\tif ( renderTarget.useRenderbuffer ) {\n\n\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\tconst width = renderTarget.width;\n\t\t\t\tconst height = renderTarget.height;\n\t\t\t\tlet mask = 16384;\n\t\t\t\tconst invalidationArray = [ 36064 ];\n\t\t\t\tconst depthStyle = renderTarget.stencilBuffer ? 33306 : 36096;\n\n\t\t\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\t\t\tinvalidationArray.push( depthStyle );\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! renderTarget.ignoreDepthForMultisampleCopy ) {\n\n\t\t\t\t\tif ( renderTarget.depthBuffer ) mask |= 256;\n\t\t\t\t\tif ( renderTarget.stencilBuffer ) mask |= 1024;\n\n\t\t\t\t}\n\n\t\t\t\tconst renderTargetProperties = properties.get( renderTarget );\n\n\t\t\t\tstate.bindFramebuffer( 36008, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\t\tstate.bindFramebuffer( 36009, renderTargetProperties.__webglFramebuffer );\n\n\t\t\t\tif ( renderTarget.ignoreDepthForMultisampleCopy ) {\n\n\t\t\t\t\t_gl.invalidateFramebuffer( 36008, [ depthStyle ] );\n\t\t\t\t\t_gl.invalidateFramebuffer( 36009, [ depthStyle ] );\n\n\t\t\t\t}\n\n\t\t\t\t_gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, 9728 );\n\t\t\t\t_gl.invalidateFramebuffer( 36008, invalidationArray );\n\n\t\t\t\tstate.bindFramebuffer( 36008, null );\n\t\t\t\tstate.bindFramebuffer( 36009, renderTargetProperties.__webglMultisampledFramebuffer );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.' );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction getRenderTargetSamples( renderTarget ) {\n\n\t\treturn ( isWebGL2 && ( renderTarget.useRenderbuffer || renderTarget.useRenderToTexture ) ) ?\n\t\t\tMath.min( maxSamples, renderTarget.samples ) : 0;\n\n\t}\n\n\tfunction updateVideoTexture( texture ) {\n\n\t\tconst frame = info.render.frame;\n\n\t\t// Check the last frame we updated the VideoTexture\n\n\t\tif ( _videoTextures.get( texture ) !== frame ) {\n\n\t\t\t_videoTextures.set( texture, frame );\n\t\t\ttexture.update();\n\n\t\t}\n\n\t}\n\n\t// backwards compatibility\n\n\tlet warnedTexture2D = false;\n\tlet warnedTextureCube = false;\n\n\tfunction safeSetTexture2D( texture, slot ) {\n\n\t\tif ( texture && texture.isWebGLRenderTarget ) {\n\n\t\t\tif ( warnedTexture2D === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLTextures.safeSetTexture2D: don\\'t use render targets as textures. Use their .texture property instead.' );\n\t\t\t\twarnedTexture2D = true;\n\n\t\t\t}\n\n\t\t\ttexture = texture.texture;\n\n\t\t}\n\n\t\tsetTexture2D( texture, slot );\n\n\t}\n\n\tfunction safeSetTextureCube( texture, slot ) {\n\n\t\tif ( texture && texture.isWebGLCubeRenderTarget ) {\n\n\t\t\tif ( warnedTextureCube === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLTextures.safeSetTextureCube: don\\'t use cube render targets as textures. Use their .texture property instead.' );\n\t\t\t\twarnedTextureCube = true;\n\n\t\t\t}\n\n\t\t\ttexture = texture.texture;\n\n\t\t}\n\n\n\t\tsetTextureCube( texture, slot );\n\n\t}\n\n\t//\n\n\tthis.allocateTextureUnit = allocateTextureUnit;\n\tthis.resetTextureUnits = resetTextureUnits;\n\n\tthis.setTexture2D = setTexture2D;\n\tthis.setTexture2DArray = setTexture2DArray;\n\tthis.setTexture3D = setTexture3D;\n\tthis.setTextureCube = setTextureCube;\n\tthis.rebindTextures = rebindTextures;\n\tthis.setupRenderTarget = setupRenderTarget;\n\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\tthis.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\n\tthis.setupDepthRenderbuffer = setupDepthRenderbuffer;\n\tthis.setupFrameBufferTexture = setupFrameBufferTexture;\n\n\tthis.safeSetTexture2D = safeSetTexture2D;\n\tthis.safeSetTextureCube = safeSetTextureCube;\n\n}\n\nfunction WebGLUtils( gl, extensions, capabilities ) {\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\n\tfunction convert( p ) {\n\n\t\tlet extension;\n\n\t\tif ( p === UnsignedByteType ) return 5121;\n\t\tif ( p === UnsignedShort4444Type ) return 32819;\n\t\tif ( p === UnsignedShort5551Type ) return 32820;\n\t\tif ( p === UnsignedShort565Type ) return 33635;\n\n\t\tif ( p === ByteType ) return 5120;\n\t\tif ( p === ShortType ) return 5122;\n\t\tif ( p === UnsignedShortType ) return 5123;\n\t\tif ( p === IntType ) return 5124;\n\t\tif ( p === UnsignedIntType ) return 5125;\n\t\tif ( p === FloatType ) return 5126;\n\n\t\tif ( p === HalfFloatType ) {\n\n\t\t\tif ( isWebGL2 ) return 5131;\n\n\t\t\textension = extensions.get( 'OES_texture_half_float' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\treturn extension.HALF_FLOAT_OES;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( p === AlphaFormat ) return 6406;\n\t\tif ( p === RGBFormat ) return 6407;\n\t\tif ( p === RGBAFormat ) return 6408;\n\t\tif ( p === LuminanceFormat ) return 6409;\n\t\tif ( p === LuminanceAlphaFormat ) return 6410;\n\t\tif ( p === DepthFormat ) return 6402;\n\t\tif ( p === DepthStencilFormat ) return 34041;\n\t\tif ( p === RedFormat ) return 6403;\n\n\t\t// WebGL2 formats.\n\n\t\tif ( p === RedIntegerFormat ) return 36244;\n\t\tif ( p === RGFormat ) return 33319;\n\t\tif ( p === RGIntegerFormat ) return 33320;\n\t\tif ( p === RGBIntegerFormat ) return 36248;\n\t\tif ( p === RGBAIntegerFormat ) return 36249;\n\n\t\tif ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format ||\n\t\t\tp === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n\t\t\t\tif ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n\t\t\t\tif ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n\t\t\t\tif ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format ||\n\t\t\tp === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n\t\t\t\tif ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n\t\t\t\tif ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n\t\t\t\tif ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( p === RGB_ETC1_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\treturn extension.COMPRESSED_RGB_ETC1_WEBGL;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGB_ETC2_Format ) return extension.COMPRESSED_RGB8_ETC2;\n\t\t\t\tif ( p === RGBA_ETC2_EAC_Format ) return extension.COMPRESSED_RGBA8_ETC2_EAC;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||\n\t\t\tp === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||\n\t\t\tp === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||\n\t\t\tp === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||\n\t\t\tp === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ||\n\t\t\tp === SRGB8_ALPHA8_ASTC_4x4_Format || p === SRGB8_ALPHA8_ASTC_5x4_Format || p === SRGB8_ALPHA8_ASTC_5x5_Format ||\n\t\t\tp === SRGB8_ALPHA8_ASTC_6x5_Format || p === SRGB8_ALPHA8_ASTC_6x6_Format || p === SRGB8_ALPHA8_ASTC_8x5_Format ||\n\t\t\tp === SRGB8_ALPHA8_ASTC_8x6_Format || p === SRGB8_ALPHA8_ASTC_8x8_Format || p === SRGB8_ALPHA8_ASTC_10x5_Format ||\n\t\t\tp === SRGB8_ALPHA8_ASTC_10x6_Format || p === SRGB8_ALPHA8_ASTC_10x8_Format || p === SRGB8_ALPHA8_ASTC_10x10_Format ||\n\t\t\tp === SRGB8_ALPHA8_ASTC_12x10_Format || p === SRGB8_ALPHA8_ASTC_12x12_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_astc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\t// TODO Complete?\n\n\t\t\t\treturn p;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( p === RGBA_BPTC_Format ) {\n\n\t\t\textension = extensions.get( 'EXT_texture_compression_bptc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\t// TODO Complete?\n\n\t\t\t\treturn p;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( p === UnsignedInt248Type ) {\n\n\t\t\tif ( isWebGL2 ) return 34042;\n\n\t\t\textension = extensions.get( 'WEBGL_depth_texture' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\treturn extension.UNSIGNED_INT_24_8_WEBGL;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn { convert: convert };\n\n}\n\nclass ArrayCamera extends PerspectiveCamera {\n\n\tconstructor( array = [] ) {\n\n\t\tsuper();\n\n\t\tthis.cameras = array;\n\n\t}\n\n}\n\nArrayCamera.prototype.isArrayCamera = true;\n\nclass Group extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.type = 'Group';\n\n\t}\n\n}\n\nGroup.prototype.isGroup = true;\n\nconst _moveEvent = { type: 'move' };\n\nclass WebXRController {\n\n\tconstructor() {\n\n\t\tthis._targetRay = null;\n\t\tthis._grip = null;\n\t\tthis._hand = null;\n\n\t}\n\n\tgetHandSpace() {\n\n\t\tif ( this._hand === null ) {\n\n\t\t\tthis._hand = new Group();\n\t\t\tthis._hand.matrixAutoUpdate = false;\n\t\t\tthis._hand.visible = false;\n\n\t\t\tthis._hand.joints = {};\n\t\t\tthis._hand.inputState = { pinching: false };\n\n\t\t}\n\n\t\treturn this._hand;\n\n\t}\n\n\tgetTargetRaySpace() {\n\n\t\tif ( this._targetRay === null ) {\n\n\t\t\tthis._targetRay = new Group();\n\t\t\tthis._targetRay.matrixAutoUpdate = false;\n\t\t\tthis._targetRay.visible = false;\n\t\t\tthis._targetRay.hasLinearVelocity = false;\n\t\t\tthis._targetRay.linearVelocity = new Vector3();\n\t\t\tthis._targetRay.hasAngularVelocity = false;\n\t\t\tthis._targetRay.angularVelocity = new Vector3();\n\n\t\t}\n\n\t\treturn this._targetRay;\n\n\t}\n\n\tgetGripSpace() {\n\n\t\tif ( this._grip === null ) {\n\n\t\t\tthis._grip = new Group();\n\t\t\tthis._grip.matrixAutoUpdate = false;\n\t\t\tthis._grip.visible = false;\n\t\t\tthis._grip.hasLinearVelocity = false;\n\t\t\tthis._grip.linearVelocity = new Vector3();\n\t\t\tthis._grip.hasAngularVelocity = false;\n\t\t\tthis._grip.angularVelocity = new Vector3();\n\n\t\t}\n\n\t\treturn this._grip;\n\n\t}\n\n\tdispatchEvent( event ) {\n\n\t\tif ( this._targetRay !== null ) {\n\n\t\t\tthis._targetRay.dispatchEvent( event );\n\n\t\t}\n\n\t\tif ( this._grip !== null ) {\n\n\t\t\tthis._grip.dispatchEvent( event );\n\n\t\t}\n\n\t\tif ( this._hand !== null ) {\n\n\t\t\tthis._hand.dispatchEvent( event );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tdisconnect( inputSource ) {\n\n\t\tthis.dispatchEvent( { type: 'disconnected', data: inputSource } );\n\n\t\tif ( this._targetRay !== null ) {\n\n\t\t\tthis._targetRay.visible = false;\n\n\t\t}\n\n\t\tif ( this._grip !== null ) {\n\n\t\t\tthis._grip.visible = false;\n\n\t\t}\n\n\t\tif ( this._hand !== null ) {\n\n\t\t\tthis._hand.visible = false;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tupdate( inputSource, frame, referenceSpace ) {\n\n\t\tlet inputPose = null;\n\t\tlet gripPose = null;\n\t\tlet handPose = null;\n\n\t\tconst targetRay = this._targetRay;\n\t\tconst grip = this._grip;\n\t\tconst hand = this._hand;\n\n\t\tif ( inputSource && frame.session.visibilityState !== 'visible-blurred' ) {\n\n\t\t\tif ( targetRay !== null ) {\n\n\t\t\t\tinputPose = frame.getPose( inputSource.targetRaySpace, referenceSpace );\n\n\t\t\t\tif ( inputPose !== null ) {\n\n\t\t\t\t\ttargetRay.matrix.fromArray( inputPose.transform.matrix );\n\t\t\t\t\ttargetRay.matrix.decompose( targetRay.position, targetRay.rotation, targetRay.scale );\n\n\t\t\t\t\tif ( inputPose.linearVelocity ) {\n\n\t\t\t\t\t\ttargetRay.hasLinearVelocity = true;\n\t\t\t\t\t\ttargetRay.linearVelocity.copy( inputPose.linearVelocity );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttargetRay.hasLinearVelocity = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( inputPose.angularVelocity ) {\n\n\t\t\t\t\t\ttargetRay.hasAngularVelocity = true;\n\t\t\t\t\t\ttargetRay.angularVelocity.copy( inputPose.angularVelocity );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttargetRay.hasAngularVelocity = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.dispatchEvent( _moveEvent );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( hand && inputSource.hand ) {\n\n\t\t\t\thandPose = true;\n\n\t\t\t\tfor ( const inputjoint of inputSource.hand.values() ) {\n\n\t\t\t\t\t// Update the joints groups with the XRJoint poses\n\t\t\t\t\tconst jointPose = frame.getJointPose( inputjoint, referenceSpace );\n\n\t\t\t\t\tif ( hand.joints[ inputjoint.jointName ] === undefined ) {\n\n\t\t\t\t\t\t// The transform of this joint will be updated with the joint pose on each frame\n\t\t\t\t\t\tconst joint = new Group();\n\t\t\t\t\t\tjoint.matrixAutoUpdate = false;\n\t\t\t\t\t\tjoint.visible = false;\n\t\t\t\t\t\thand.joints[ inputjoint.jointName ] = joint;\n\t\t\t\t\t\t// ??\n\t\t\t\t\t\thand.add( joint );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst joint = hand.joints[ inputjoint.jointName ];\n\n\t\t\t\t\tif ( jointPose !== null ) {\n\n\t\t\t\t\t\tjoint.matrix.fromArray( jointPose.transform.matrix );\n\t\t\t\t\t\tjoint.matrix.decompose( joint.position, joint.rotation, joint.scale );\n\t\t\t\t\t\tjoint.jointRadius = jointPose.radius;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tjoint.visible = jointPose !== null;\n\n\t\t\t\t}\n\n\t\t\t\t// Custom events\n\n\t\t\t\t// Check pinchz\n\t\t\t\tconst indexTip = hand.joints[ 'index-finger-tip' ];\n\t\t\t\tconst thumbTip = hand.joints[ 'thumb-tip' ];\n\t\t\t\tconst distance = indexTip.position.distanceTo( thumbTip.position );\n\n\t\t\t\tconst distanceToPinch = 0.02;\n\t\t\t\tconst threshold = 0.005;\n\n\t\t\t\tif ( hand.inputState.pinching && distance > distanceToPinch + threshold ) {\n\n\t\t\t\t\thand.inputState.pinching = false;\n\t\t\t\t\tthis.dispatchEvent( {\n\t\t\t\t\t\ttype: 'pinchend',\n\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\ttarget: this\n\t\t\t\t\t} );\n\n\t\t\t\t} else if ( ! hand.inputState.pinching && distance <= distanceToPinch - threshold ) {\n\n\t\t\t\t\thand.inputState.pinching = true;\n\t\t\t\t\tthis.dispatchEvent( {\n\t\t\t\t\t\ttype: 'pinchstart',\n\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\ttarget: this\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( grip !== null && inputSource.gripSpace ) {\n\n\t\t\t\t\tgripPose = frame.getPose( inputSource.gripSpace, referenceSpace );\n\n\t\t\t\t\tif ( gripPose !== null ) {\n\n\t\t\t\t\t\tgrip.matrix.fromArray( gripPose.transform.matrix );\n\t\t\t\t\t\tgrip.matrix.decompose( grip.position, grip.rotation, grip.scale );\n\n\t\t\t\t\t\tif ( gripPose.linearVelocity ) {\n\n\t\t\t\t\t\t\tgrip.hasLinearVelocity = true;\n\t\t\t\t\t\t\tgrip.linearVelocity.copy( gripPose.linearVelocity );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgrip.hasLinearVelocity = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( gripPose.angularVelocity ) {\n\n\t\t\t\t\t\t\tgrip.hasAngularVelocity = true;\n\t\t\t\t\t\t\tgrip.angularVelocity.copy( gripPose.angularVelocity );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgrip.hasAngularVelocity = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( targetRay !== null ) {\n\n\t\t\ttargetRay.visible = ( inputPose !== null );\n\n\t\t}\n\n\t\tif ( grip !== null ) {\n\n\t\t\tgrip.visible = ( gripPose !== null );\n\n\t\t}\n\n\t\tif ( hand !== null ) {\n\n\t\t\thand.visible = ( handPose !== null );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass DepthTexture extends Texture {\n\n\tconstructor( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {\n\n\t\tformat = format !== undefined ? format : DepthFormat;\n\n\t\tif ( format !== DepthFormat && format !== DepthStencilFormat ) {\n\n\t\t\tthrow new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );\n\n\t\t}\n\n\t\tif ( type === undefined && format === DepthFormat ) type = UnsignedShortType;\n\t\tif ( type === undefined && format === DepthStencilFormat ) type = UnsignedInt248Type;\n\n\t\tsuper( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.image = { width: width, height: height };\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n\t\tthis.flipY = false;\n\t\tthis.generateMipmaps\t= false;\n\n\t}\n\n\n}\n\nDepthTexture.prototype.isDepthTexture = true;\n\nclass WebXRManager extends EventDispatcher {\n\n\tconstructor( renderer, gl ) {\n\n\t\tsuper();\n\n\t\tconst scope = this;\n\n\t\tlet session = null;\n\t\tlet framebufferScaleFactor = 1.0;\n\n\t\tlet referenceSpace = null;\n\t\tlet referenceSpaceType = 'local-floor';\n\t\tconst hasMultisampledRenderToTexture = renderer.extensions.has( 'WEBGL_multisampled_render_to_texture' );\n\n\t\tlet pose = null;\n\t\tlet glBinding = null;\n\t\tlet glProjLayer = null;\n\t\tlet glBaseLayer = null;\n\t\tlet isMultisample = false;\n\t\tlet xrFrame = null;\n\t\tconst attributes = gl.getContextAttributes();\n\t\tlet initialRenderTarget = null;\n\t\tlet newRenderTarget = null;\n\n\t\tconst controllers = [];\n\t\tconst inputSourcesMap = new Map();\n\n\t\t//\n\n\t\tconst cameraL = new PerspectiveCamera();\n\t\tcameraL.layers.enable( 1 );\n\t\tcameraL.viewport = new Vector4();\n\n\t\tconst cameraR = new PerspectiveCamera();\n\t\tcameraR.layers.enable( 2 );\n\t\tcameraR.viewport = new Vector4();\n\n\t\tconst cameras = [ cameraL, cameraR ];\n\n\t\tconst cameraVR = new ArrayCamera();\n\t\tcameraVR.layers.enable( 1 );\n\t\tcameraVR.layers.enable( 2 );\n\n\t\tlet _currentDepthNear = null;\n\t\tlet _currentDepthFar = null;\n\n\t\t//\n\n\t\tthis.cameraAutoUpdate = true;\n\t\tthis.enabled = false;\n\n\t\tthis.isPresenting = false;\n\n\t\tthis.getController = function ( index ) {\n\n\t\t\tlet controller = controllers[ index ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[ index ] = controller;\n\n\t\t\t}\n\n\t\t\treturn controller.getTargetRaySpace();\n\n\t\t};\n\n\t\tthis.getControllerGrip = function ( index ) {\n\n\t\t\tlet controller = controllers[ index ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[ index ] = controller;\n\n\t\t\t}\n\n\t\t\treturn controller.getGripSpace();\n\n\t\t};\n\n\t\tthis.getHand = function ( index ) {\n\n\t\t\tlet controller = controllers[ index ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[ index ] = controller;\n\n\t\t\t}\n\n\t\t\treturn controller.getHandSpace();\n\n\t\t};\n\n\t\t//\n\n\t\tfunction onSessionEvent( event ) {\n\n\t\t\tconst controller = inputSourcesMap.get( event.inputSource );\n\n\t\t\tif ( controller ) {\n\n\t\t\t\tcontroller.dispatchEvent( { type: event.type, data: event.inputSource } );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onSessionEnd() {\n\n\t\t\tinputSourcesMap.forEach( function ( controller, inputSource ) {\n\n\t\t\t\tcontroller.disconnect( inputSource );\n\n\t\t\t} );\n\n\t\t\tinputSourcesMap.clear();\n\n\t\t\t_currentDepthNear = null;\n\t\t\t_currentDepthFar = null;\n\n\t\t\t// restore framebuffer/rendering state\n\n\t\t\trenderer.setRenderTarget( initialRenderTarget );\n\n\t\t\tglBaseLayer = null;\n\t\t\tglProjLayer = null;\n\t\t\tglBinding = null;\n\t\t\tsession = null;\n\t\t\tnewRenderTarget = null;\n\n\t\t\t//\n\n\t\t\tanimation.stop();\n\n\t\t\tscope.isPresenting = false;\n\n\t\t\tscope.dispatchEvent( { type: 'sessionend' } );\n\n\t\t}\n\n\t\tthis.setFramebufferScaleFactor = function ( value ) {\n\n\t\t\tframebufferScaleFactor = value;\n\n\t\t\tif ( scope.isPresenting === true ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebXRManager: Cannot change framebuffer scale while presenting.' );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.setReferenceSpaceType = function ( value ) {\n\n\t\t\treferenceSpaceType = value;\n\n\t\t\tif ( scope.isPresenting === true ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebXRManager: Cannot change reference space type while presenting.' );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.getReferenceSpace = function () {\n\n\t\t\treturn referenceSpace;\n\n\t\t};\n\n\t\tthis.getBaseLayer = function () {\n\n\t\t\treturn glProjLayer !== null ? glProjLayer : glBaseLayer;\n\n\t\t};\n\n\t\tthis.getBinding = function () {\n\n\t\t\treturn glBinding;\n\n\t\t};\n\n\t\tthis.getFrame = function () {\n\n\t\t\treturn xrFrame;\n\n\t\t};\n\n\t\tthis.getSession = function () {\n\n\t\t\treturn session;\n\n\t\t};\n\n\t\tthis.setSession = async function ( value ) {\n\n\t\t\tsession = value;\n\n\t\t\tif ( session !== null ) {\n\n\t\t\t\tinitialRenderTarget = renderer.getRenderTarget();\n\n\t\t\t\tsession.addEventListener( 'select', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'selectstart', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'selectend', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeeze', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeezestart', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeezeend', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'end', onSessionEnd );\n\t\t\t\tsession.addEventListener( 'inputsourceschange', onInputSourcesChange );\n\n\t\t\t\tif ( attributes.xrCompatible !== true ) {\n\n\t\t\t\t\tawait gl.makeXRCompatible();\n\n\t\t\t\t}\n\n\t\t\t\tif ( ( session.renderState.layers === undefined ) || ( renderer.capabilities.isWebGL2 === false ) ) {\n\n\t\t\t\t\tconst layerInit = {\n\t\t\t\t\t\tantialias: ( session.renderState.layers === undefined ) ? attributes.antialias : true,\n\t\t\t\t\t\talpha: attributes.alpha,\n\t\t\t\t\t\tdepth: attributes.depth,\n\t\t\t\t\t\tstencil: attributes.stencil,\n\t\t\t\t\t\tframebufferScaleFactor: framebufferScaleFactor\n\t\t\t\t\t};\n\n\t\t\t\t\tglBaseLayer = new XRWebGLLayer( session, gl, layerInit );\n\n\t\t\t\t\tsession.updateRenderState( { baseLayer: glBaseLayer } );\n\n\t\t\t\t\tnewRenderTarget = new WebGLRenderTarget(\n\t\t\t\t\t\tglBaseLayer.framebufferWidth,\n\t\t\t\t\t\tglBaseLayer.framebufferHeight\n\t\t\t\t\t);\n\n\t\t\t\t} else {\n\n\t\t\t\t\tisMultisample = attributes.antialias;\n\t\t\t\t\tlet depthFormat = null;\n\t\t\t\t\tlet depthType = null;\n\t\t\t\t\tlet glDepthFormat = null;\n\n\t\t\t\t\tif ( attributes.depth ) {\n\n\t\t\t\t\t\tglDepthFormat = attributes.stencil ? 35056 : 33189;\n\t\t\t\t\t\tdepthFormat = attributes.stencil ? DepthStencilFormat : DepthFormat;\n\t\t\t\t\t\tdepthType = attributes.stencil ? UnsignedInt248Type : UnsignedShortType;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst projectionlayerInit = {\n\t\t\t\t\t\tcolorFormat: ( attributes.alpha || isMultisample ) ? 32856 : 32849,\n\t\t\t\t\t\tdepthFormat: glDepthFormat,\n\t\t\t\t\t\tscaleFactor: framebufferScaleFactor\n\t\t\t\t\t};\n\n\t\t\t\t\tglBinding = new XRWebGLBinding( session, gl );\n\n\t\t\t\t\tglProjLayer = glBinding.createProjectionLayer( projectionlayerInit );\n\n\t\t\t\t\tsession.updateRenderState( { layers: [ glProjLayer ] } );\n\n\t\t\t\t\tif ( isMultisample ) {\n\n\t\t\t\t\t\tnewRenderTarget = new WebGLMultisampleRenderTarget(\n\t\t\t\t\t\t\tglProjLayer.textureWidth,\n\t\t\t\t\t\t\tglProjLayer.textureHeight,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tformat: RGBAFormat,\n\t\t\t\t\t\t\t\ttype: UnsignedByteType,\n\t\t\t\t\t\t\t\tdepthTexture: new DepthTexture( glProjLayer.textureWidth, glProjLayer.textureHeight, depthType, undefined, undefined, undefined, undefined, undefined, undefined, depthFormat ),\n\t\t\t\t\t\t\t\tstencilBuffer: attributes.stencil,\n\t\t\t\t\t\t\t\tignoreDepth: glProjLayer.ignoreDepthValues,\n\t\t\t\t\t\t\t\tuseRenderToTexture: hasMultisampledRenderToTexture,\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tnewRenderTarget = new WebGLRenderTarget(\n\t\t\t\t\t\t\tglProjLayer.textureWidth,\n\t\t\t\t\t\t\tglProjLayer.textureHeight,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tformat: attributes.alpha ? RGBAFormat : RGBFormat,\n\t\t\t\t\t\t\t\ttype: UnsignedByteType,\n\t\t\t\t\t\t\t\tdepthTexture: new DepthTexture( glProjLayer.textureWidth, glProjLayer.textureHeight, depthType, undefined, undefined, undefined, undefined, undefined, undefined, depthFormat ),\n\t\t\t\t\t\t\t\tstencilBuffer: attributes.stencil,\n\t\t\t\t\t\t\t\tignoreDepth: glProjLayer.ignoreDepthValues,\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// Set foveation to maximum.\n\t\t\t\tthis.setFoveation( 0 );\n\n\t\t\t\treferenceSpace = await session.requestReferenceSpace( referenceSpaceType );\n\n\t\t\t\tanimation.setContext( session );\n\t\t\t\tanimation.start();\n\n\t\t\t\tscope.isPresenting = true;\n\n\t\t\t\tscope.dispatchEvent( { type: 'sessionstart' } );\n\n\t\t\t}\n\n\t\t};\n\n\t\tfunction onInputSourcesChange( event ) {\n\n\t\t\tconst inputSources = session.inputSources;\n\n\t\t\t// Assign inputSources to available controllers\n\n\t\t\tfor ( let i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\tinputSourcesMap.set( inputSources[ i ], controllers[ i ] );\n\n\t\t\t}\n\n\t\t\t// Notify disconnected\n\n\t\t\tfor ( let i = 0; i < event.removed.length; i ++ ) {\n\n\t\t\t\tconst inputSource = event.removed[ i ];\n\t\t\t\tconst controller = inputSourcesMap.get( inputSource );\n\n\t\t\t\tif ( controller ) {\n\n\t\t\t\t\tcontroller.dispatchEvent( { type: 'disconnected', data: inputSource } );\n\t\t\t\t\tinputSourcesMap.delete( inputSource );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Notify connected\n\n\t\t\tfor ( let i = 0; i < event.added.length; i ++ ) {\n\n\t\t\t\tconst inputSource = event.added[ i ];\n\t\t\t\tconst controller = inputSourcesMap.get( inputSource );\n\n\t\t\t\tif ( controller ) {\n\n\t\t\t\t\tcontroller.dispatchEvent( { type: 'connected', data: inputSource } );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tconst cameraLPos = new Vector3();\n\t\tconst cameraRPos = new Vector3();\n\n\t\t/**\n\t\t * Assumes 2 cameras that are parallel and share an X-axis, and that\n\t\t * the cameras' projection and world matrices have already been set.\n\t\t * And that near and far planes are identical for both cameras.\n\t\t * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765\n\t\t */\n\t\tfunction setProjectionFromUnion( camera, cameraL, cameraR ) {\n\n\t\t\tcameraLPos.setFromMatrixPosition( cameraL.matrixWorld );\n\t\t\tcameraRPos.setFromMatrixPosition( cameraR.matrixWorld );\n\n\t\t\tconst ipd = cameraLPos.distanceTo( cameraRPos );\n\n\t\t\tconst projL = cameraL.projectionMatrix.elements;\n\t\t\tconst projR = cameraR.projectionMatrix.elements;\n\n\t\t\t// VR systems will have identical far and near planes, and\n\t\t\t// most likely identical top and bottom frustum extents.\n\t\t\t// Use the left camera for these values.\n\t\t\tconst near = projL[ 14 ] / ( projL[ 10 ] - 1 );\n\t\t\tconst far = projL[ 14 ] / ( projL[ 10 ] + 1 );\n\t\t\tconst topFov = ( projL[ 9 ] + 1 ) / projL[ 5 ];\n\t\t\tconst bottomFov = ( projL[ 9 ] - 1 ) / projL[ 5 ];\n\n\t\t\tconst leftFov = ( projL[ 8 ] - 1 ) / projL[ 0 ];\n\t\t\tconst rightFov = ( projR[ 8 ] + 1 ) / projR[ 0 ];\n\t\t\tconst left = near * leftFov;\n\t\t\tconst right = near * rightFov;\n\n\t\t\t// Calculate the new camera's position offset from the\n\t\t\t// left camera. xOffset should be roughly half `ipd`.\n\t\t\tconst zOffset = ipd / ( - leftFov + rightFov );\n\t\t\tconst xOffset = zOffset * - leftFov;\n\n\t\t\t// TODO: Better way to apply this offset?\n\t\t\tcameraL.matrixWorld.decompose( camera.position, camera.quaternion, camera.scale );\n\t\t\tcamera.translateX( xOffset );\n\t\t\tcamera.translateZ( zOffset );\n\t\t\tcamera.matrixWorld.compose( camera.position, camera.quaternion, camera.scale );\n\t\t\tcamera.matrixWorldInverse.copy( camera.matrixWorld ).invert();\n\n\t\t\t// Find the union of the frustum values of the cameras and scale\n\t\t\t// the values so that the near plane's position does not change in world space,\n\t\t\t// although must now be relative to the new union camera.\n\t\t\tconst near2 = near + zOffset;\n\t\t\tconst far2 = far + zOffset;\n\t\t\tconst left2 = left - xOffset;\n\t\t\tconst right2 = right + ( ipd - xOffset );\n\t\t\tconst top2 = topFov * far / far2 * near2;\n\t\t\tconst bottom2 = bottomFov * far / far2 * near2;\n\n\t\t\tcamera.projectionMatrix.makePerspective( left2, right2, top2, bottom2, near2, far2 );\n\n\t\t}\n\n\t\tfunction updateCamera( camera, parent ) {\n\n\t\t\tif ( parent === null ) {\n\n\t\t\t\tcamera.matrixWorld.copy( camera.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tcamera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );\n\n\t\t\t}\n\n\t\t\tcamera.matrixWorldInverse.copy( camera.matrixWorld ).invert();\n\n\t\t}\n\n\t\tthis.updateCamera = function ( camera ) {\n\n\t\t\tif ( session === null ) return;\n\n\t\t\tcameraVR.near = cameraR.near = cameraL.near = camera.near;\n\t\t\tcameraVR.far = cameraR.far = cameraL.far = camera.far;\n\n\t\t\tif ( _currentDepthNear !== cameraVR.near || _currentDepthFar !== cameraVR.far ) {\n\n\t\t\t\t// Note that the new renderState won't apply until the next frame. See #18320\n\n\t\t\t\tsession.updateRenderState( {\n\t\t\t\t\tdepthNear: cameraVR.near,\n\t\t\t\t\tdepthFar: cameraVR.far\n\t\t\t\t} );\n\n\t\t\t\t_currentDepthNear = cameraVR.near;\n\t\t\t\t_currentDepthFar = cameraVR.far;\n\n\t\t\t}\n\n\t\t\tconst parent = camera.parent;\n\t\t\tconst cameras = cameraVR.cameras;\n\n\t\t\tupdateCamera( cameraVR, parent );\n\n\t\t\tfor ( let i = 0; i < cameras.length; i ++ ) {\n\n\t\t\t\tupdateCamera( cameras[ i ], parent );\n\n\t\t\t}\n\n\t\t\tcameraVR.matrixWorld.decompose( cameraVR.position, cameraVR.quaternion, cameraVR.scale );\n\n\t\t\t// update user camera and its children\n\n\t\t\tcamera.position.copy( cameraVR.position );\n\t\t\tcamera.quaternion.copy( cameraVR.quaternion );\n\t\t\tcamera.scale.copy( cameraVR.scale );\n\t\t\tcamera.matrix.copy( cameraVR.matrix );\n\t\t\tcamera.matrixWorld.copy( cameraVR.matrixWorld );\n\n\t\t\tconst children = camera.children;\n\n\t\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tchildren[ i ].updateMatrixWorld( true );\n\n\t\t\t}\n\n\t\t\t// update projection matrix for proper view frustum culling\n\n\t\t\tif ( cameras.length === 2 ) {\n\n\t\t\t\tsetProjectionFromUnion( cameraVR, cameraL, cameraR );\n\n\t\t\t} else {\n\n\t\t\t\t// assume single camera setup (AR)\n\n\t\t\t\tcameraVR.projectionMatrix.copy( cameraL.projectionMatrix );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.getCamera = function () {\n\n\t\t\treturn cameraVR;\n\n\t\t};\n\n\t\tthis.getFoveation = function () {\n\n\t\t\tif ( glProjLayer !== null ) {\n\n\t\t\t\treturn glProjLayer.fixedFoveation;\n\n\t\t\t}\n\n\t\t\tif ( glBaseLayer !== null ) {\n\n\t\t\t\treturn glBaseLayer.fixedFoveation;\n\n\t\t\t}\n\n\t\t\treturn undefined;\n\n\t\t};\n\n\t\tthis.setFoveation = function ( foveation ) {\n\n\t\t\t// 0 = no foveation = full resolution\n\t\t\t// 1 = maximum foveation = the edges render at lower resolution\n\n\t\t\tif ( glProjLayer !== null ) {\n\n\t\t\t\tglProjLayer.fixedFoveation = foveation;\n\n\t\t\t}\n\n\t\t\tif ( glBaseLayer !== null && glBaseLayer.fixedFoveation !== undefined ) {\n\n\t\t\t\tglBaseLayer.fixedFoveation = foveation;\n\n\t\t\t}\n\n\t\t};\n\n\t\t// Animation Loop\n\n\t\tlet onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame( time, frame ) {\n\n\t\t\tpose = frame.getViewerPose( referenceSpace );\n\t\t\txrFrame = frame;\n\n\t\t\tif ( pose !== null ) {\n\n\t\t\t\tconst views = pose.views;\n\n\t\t\t\tif ( glBaseLayer !== null ) {\n\n\t\t\t\t\trenderer.setRenderTargetFramebuffer( newRenderTarget, glBaseLayer.framebuffer );\n\t\t\t\t\trenderer.setRenderTarget( newRenderTarget );\n\n\t\t\t\t}\n\n\t\t\t\tlet cameraVRNeedsUpdate = false;\n\n\t\t\t\t// check if it's necessary to rebuild cameraVR's camera list\n\n\t\t\t\tif ( views.length !== cameraVR.cameras.length ) {\n\n\t\t\t\t\tcameraVR.cameras.length = 0;\n\t\t\t\t\tcameraVRNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0; i < views.length; i ++ ) {\n\n\t\t\t\t\tconst view = views[ i ];\n\n\t\t\t\t\tlet viewport = null;\n\n\t\t\t\t\tif ( glBaseLayer !== null ) {\n\n\t\t\t\t\t\tviewport = glBaseLayer.getViewport( view );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst glSubImage = glBinding.getViewSubImage( glProjLayer, view );\n\t\t\t\t\t\tviewport = glSubImage.viewport;\n\n\t\t\t\t\t\t// For side-by-side projection, we only produce a single texture for both eyes.\n\t\t\t\t\t\tif ( i === 0 ) {\n\n\t\t\t\t\t\t\trenderer.setRenderTargetTextures(\n\t\t\t\t\t\t\t\tnewRenderTarget,\n\t\t\t\t\t\t\t\tglSubImage.colorTexture,\n\t\t\t\t\t\t\t\tglProjLayer.ignoreDepthValues ? undefined : glSubImage.depthStencilTexture );\n\n\t\t\t\t\t\t\trenderer.setRenderTarget( newRenderTarget );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst camera = cameras[ i ];\n\n\t\t\t\t\tcamera.matrix.fromArray( view.transform.matrix );\n\t\t\t\t\tcamera.projectionMatrix.fromArray( view.projectionMatrix );\n\t\t\t\t\tcamera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );\n\n\t\t\t\t\tif ( i === 0 ) {\n\n\t\t\t\t\t\tcameraVR.matrix.copy( camera.matrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( cameraVRNeedsUpdate === true ) {\n\n\t\t\t\t\t\tcameraVR.cameras.push( camera );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tconst inputSources = session.inputSources;\n\n\t\t\tfor ( let i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\tconst controller = controllers[ i ];\n\t\t\t\tconst inputSource = inputSources[ i ];\n\n\t\t\t\tcontroller.update( inputSource, frame, referenceSpace );\n\n\t\t\t}\n\n\t\t\tif ( onAnimationFrameCallback ) onAnimationFrameCallback( time, frame );\n\n\t\t\txrFrame = null;\n\n\t\t}\n\n\t\tconst animation = new WebGLAnimation();\n\n\t\tanimation.setAnimationLoop( onAnimationFrame );\n\n\t\tthis.setAnimationLoop = function ( callback ) {\n\n\t\t\tonAnimationFrameCallback = callback;\n\n\t\t};\n\n\t\tthis.dispose = function () {};\n\n\t}\n\n}\n\nfunction WebGLMaterials( properties ) {\n\n\tfunction refreshFogUniforms( uniforms, fog ) {\n\n\t\tuniforms.fogColor.value.copy( fog.color );\n\n\t\tif ( fog.isFog ) {\n\n\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\tuniforms.fogFar.value = fog.far;\n\n\t\t} else if ( fog.isFogExp2 ) {\n\n\t\t\tuniforms.fogDensity.value = fog.density;\n\n\t\t}\n\n\t}\n\n\tfunction refreshMaterialUniforms( uniforms, material, pixelRatio, height, transmissionRenderTarget ) {\n\n\t\tif ( material.isMeshBasicMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\n\t\t} else if ( material.isMeshLambertMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsLambert( uniforms, material );\n\n\t\t} else if ( material.isMeshToonMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsToon( uniforms, material );\n\n\t\t} else if ( material.isMeshPhongMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsPhong( uniforms, material );\n\n\t\t} else if ( material.isMeshStandardMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\n\t\t\tif ( material.isMeshPhysicalMaterial ) {\n\n\t\t\t\trefreshUniformsPhysical( uniforms, material, transmissionRenderTarget );\n\n\t\t\t} else {\n\n\t\t\t\trefreshUniformsStandard( uniforms, material );\n\n\t\t\t}\n\n\t\t} else if ( material.isMeshMatcapMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsMatcap( uniforms, material );\n\n\t\t} else if ( material.isMeshDepthMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsDepth( uniforms, material );\n\n\t\t} else if ( material.isMeshDistanceMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsDistance( uniforms, material );\n\n\t\t} else if ( material.isMeshNormalMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsNormal( uniforms, material );\n\n\t\t} else if ( material.isLineBasicMaterial ) {\n\n\t\t\trefreshUniformsLine( uniforms, material );\n\n\t\t\tif ( material.isLineDashedMaterial ) {\n\n\t\t\t\trefreshUniformsDash( uniforms, material );\n\n\t\t\t}\n\n\t\t} else if ( material.isPointsMaterial ) {\n\n\t\t\trefreshUniformsPoints( uniforms, material, pixelRatio, height );\n\n\t\t} else if ( material.isSpriteMaterial ) {\n\n\t\t\trefreshUniformsSprites( uniforms, material );\n\n\t\t} else if ( material.isShadowMaterial ) {\n\n\t\t\tuniforms.color.value.copy( material.color );\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t} else if ( material.isShaderMaterial ) {\n\n\t\t\tmaterial.uniformsNeedUpdate = false; // #15581\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsCommon( uniforms, material ) {\n\n\t\tuniforms.opacity.value = material.opacity;\n\n\t\tif ( material.color ) {\n\n\t\t\tuniforms.diffuse.value.copy( material.color );\n\n\t\t}\n\n\t\tif ( material.emissive ) {\n\n\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\n\t\t}\n\n\t\tif ( material.map ) {\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t}\n\n\t\tif ( material.alphaMap ) {\n\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t}\n\n\t\tif ( material.specularMap ) {\n\n\t\t\tuniforms.specularMap.value = material.specularMap;\n\n\t\t}\n\n\t\tif ( material.alphaTest > 0 ) {\n\n\t\t\tuniforms.alphaTest.value = material.alphaTest;\n\n\t\t}\n\n\t\tconst envMap = properties.get( material ).envMap;\n\n\t\tif ( envMap ) {\n\n\t\t\tuniforms.envMap.value = envMap;\n\n\t\t\tuniforms.flipEnvMap.value = ( envMap.isCubeTexture && envMap.isRenderTargetTexture === false ) ? - 1 : 1;\n\n\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\tuniforms.ior.value = material.ior;\n\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t\t}\n\n\t\tif ( material.lightMap ) {\n\n\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n\t\t}\n\n\t\tif ( material.aoMap ) {\n\n\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\n\t\t}\n\n\t\t// uv repeat and offset setting priorities\n\t\t// 1. color map\n\t\t// 2. specular map\n\t\t// 3. displacementMap map\n\t\t// 4. normal map\n\t\t// 5. bump map\n\t\t// 6. roughnessMap map\n\t\t// 7. metalnessMap map\n\t\t// 8. alphaMap map\n\t\t// 9. emissiveMap map\n\t\t// 10. clearcoat map\n\t\t// 11. clearcoat normal map\n\t\t// 12. clearcoat roughnessMap map\n\t\t// 13. specular intensity map\n\t\t// 14. specular tint map\n\t\t// 15. transmission map\n\t\t// 16. thickness map\n\n\t\tlet uvScaleMap;\n\n\t\tif ( material.map ) {\n\n\t\t\tuvScaleMap = material.map;\n\n\t\t} else if ( material.specularMap ) {\n\n\t\t\tuvScaleMap = material.specularMap;\n\n\t\t} else if ( material.displacementMap ) {\n\n\t\t\tuvScaleMap = material.displacementMap;\n\n\t\t} else if ( material.normalMap ) {\n\n\t\t\tuvScaleMap = material.normalMap;\n\n\t\t} else if ( material.bumpMap ) {\n\n\t\t\tuvScaleMap = material.bumpMap;\n\n\t\t} else if ( material.roughnessMap ) {\n\n\t\t\tuvScaleMap = material.roughnessMap;\n\n\t\t} else if ( material.metalnessMap ) {\n\n\t\t\tuvScaleMap = material.metalnessMap;\n\n\t\t} else if ( material.alphaMap ) {\n\n\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t} else if ( material.emissiveMap ) {\n\n\t\t\tuvScaleMap = material.emissiveMap;\n\n\t\t} else if ( material.clearcoatMap ) {\n\n\t\t\tuvScaleMap = material.clearcoatMap;\n\n\t\t} else if ( material.clearcoatNormalMap ) {\n\n\t\t\tuvScaleMap = material.clearcoatNormalMap;\n\n\t\t} else if ( material.clearcoatRoughnessMap ) {\n\n\t\t\tuvScaleMap = material.clearcoatRoughnessMap;\n\n\t\t} else if ( material.specularIntensityMap ) {\n\n\t\t\tuvScaleMap = material.specularIntensityMap;\n\n\t\t} else if ( material.specularColorMap ) {\n\n\t\t\tuvScaleMap = material.specularColorMap;\n\n\t\t} else if ( material.transmissionMap ) {\n\n\t\t\tuvScaleMap = material.transmissionMap;\n\n\t\t} else if ( material.thicknessMap ) {\n\n\t\t\tuvScaleMap = material.thicknessMap;\n\n\t\t} else if ( material.sheenColorMap ) {\n\n\t\t\tuvScaleMap = material.sheenColorMap;\n\n\t\t} else if ( material.sheenRoughnessMap ) {\n\n\t\t\tuvScaleMap = material.sheenRoughnessMap;\n\n\t\t}\n\n\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t// backwards compatibility\n\t\t\tif ( uvScaleMap.isWebGLRenderTarget ) {\n\n\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\n\t\t\t}\n\n\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t}\n\n\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t}\n\n\t\t// uv repeat and offset setting priorities for uv2\n\t\t// 1. ao map\n\t\t// 2. light map\n\n\t\tlet uv2ScaleMap;\n\n\t\tif ( material.aoMap ) {\n\n\t\t\tuv2ScaleMap = material.aoMap;\n\n\t\t} else if ( material.lightMap ) {\n\n\t\t\tuv2ScaleMap = material.lightMap;\n\n\t\t}\n\n\t\tif ( uv2ScaleMap !== undefined ) {\n\n\t\t\t// backwards compatibility\n\t\t\tif ( uv2ScaleMap.isWebGLRenderTarget ) {\n\n\t\t\t\tuv2ScaleMap = uv2ScaleMap.texture;\n\n\t\t\t}\n\n\t\t\tif ( uv2ScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\tuv2ScaleMap.updateMatrix();\n\n\t\t\t}\n\n\t\t\tuniforms.uv2Transform.value.copy( uv2ScaleMap.matrix );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsLine( uniforms, material ) {\n\n\t\tuniforms.diffuse.value.copy( material.color );\n\t\tuniforms.opacity.value = material.opacity;\n\n\t}\n\n\tfunction refreshUniformsDash( uniforms, material ) {\n\n\t\tuniforms.dashSize.value = material.dashSize;\n\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\tuniforms.scale.value = material.scale;\n\n\t}\n\n\tfunction refreshUniformsPoints( uniforms, material, pixelRatio, height ) {\n\n\t\tuniforms.diffuse.value.copy( material.color );\n\t\tuniforms.opacity.value = material.opacity;\n\t\tuniforms.size.value = material.size * pixelRatio;\n\t\tuniforms.scale.value = height * 0.5;\n\n\t\tif ( material.map ) {\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t}\n\n\t\tif ( material.alphaMap ) {\n\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t}\n\n\t\tif ( material.alphaTest > 0 ) {\n\n\t\t\tuniforms.alphaTest.value = material.alphaTest;\n\n\t\t}\n\n\t\t// uv repeat and offset setting priorities\n\t\t// 1. color map\n\t\t// 2. alpha map\n\n\t\tlet uvScaleMap;\n\n\t\tif ( material.map ) {\n\n\t\t\tuvScaleMap = material.map;\n\n\t\t} else if ( material.alphaMap ) {\n\n\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t}\n\n\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t}\n\n\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsSprites( uniforms, material ) {\n\n\t\tuniforms.diffuse.value.copy( material.color );\n\t\tuniforms.opacity.value = material.opacity;\n\t\tuniforms.rotation.value = material.rotation;\n\n\t\tif ( material.map ) {\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t}\n\n\t\tif ( material.alphaMap ) {\n\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t}\n\n\t\tif ( material.alphaTest > 0 ) {\n\n\t\t\tuniforms.alphaTest.value = material.alphaTest;\n\n\t\t}\n\n\t\t// uv repeat and offset setting priorities\n\t\t// 1. color map\n\t\t// 2. alpha map\n\n\t\tlet uvScaleMap;\n\n\t\tif ( material.map ) {\n\n\t\t\tuvScaleMap = material.map;\n\n\t\t} else if ( material.alphaMap ) {\n\n\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t}\n\n\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t}\n\n\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsLambert( uniforms, material ) {\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsPhong( uniforms, material ) {\n\n\t\tuniforms.specular.value.copy( material.specular );\n\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t}\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\tif ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\tif ( material.side === BackSide ) uniforms.normalScale.value.negate();\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsToon( uniforms, material ) {\n\n\t\tif ( material.gradientMap ) {\n\n\t\t\tuniforms.gradientMap.value = material.gradientMap;\n\n\t\t}\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t}\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\tif ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\tif ( material.side === BackSide ) uniforms.normalScale.value.negate();\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsStandard( uniforms, material ) {\n\n\t\tuniforms.roughness.value = material.roughness;\n\t\tuniforms.metalness.value = material.metalness;\n\n\t\tif ( material.roughnessMap ) {\n\n\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\n\t\t}\n\n\t\tif ( material.metalnessMap ) {\n\n\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\n\t\t}\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t}\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\tif ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\tif ( material.side === BackSide ) uniforms.normalScale.value.negate();\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t\tconst envMap = properties.get( material ).envMap;\n\n\t\tif ( envMap ) {\n\n\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsPhysical( uniforms, material, transmissionRenderTarget ) {\n\n\t\trefreshUniformsStandard( uniforms, material );\n\n\t\tuniforms.ior.value = material.ior; // also part of uniforms common\n\n\t\tif ( material.sheen > 0 ) {\n\n\t\t\tuniforms.sheenColor.value.copy( material.sheenColor ).multiplyScalar( material.sheen );\n\n\t\t\tuniforms.sheenRoughness.value = material.sheenRoughness;\n\n\t\t\tif ( material.sheenColorMap ) {\n\n\t\t\t\tuniforms.sheenColorMap.value = material.sheenColorMap;\n\n\t\t\t}\n\n\t\t\tif ( material.sheenRoughnessMap ) {\n\n\t\t\t\tuniforms.sheenRoughnessMap.value = material.sheenRoughnessMap;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.clearcoat > 0 ) {\n\n\t\t\tuniforms.clearcoat.value = material.clearcoat;\n\t\t\tuniforms.clearcoatRoughness.value = material.clearcoatRoughness;\n\n\t\t\tif ( material.clearcoatMap ) {\n\n\t\t\t\tuniforms.clearcoatMap.value = material.clearcoatMap;\n\n\t\t\t}\n\n\t\t\tif ( material.clearcoatRoughnessMap ) {\n\n\t\t\t\tuniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;\n\n\t\t\t}\n\n\t\t\tif ( material.clearcoatNormalMap ) {\n\n\t\t\t\tuniforms.clearcoatNormalScale.value.copy( material.clearcoatNormalScale );\n\t\t\t\tuniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\n\n\t\t\t\tif ( material.side === BackSide ) {\n\n\t\t\t\t\tuniforms.clearcoatNormalScale.value.negate();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.transmission > 0 ) {\n\n\t\t\tuniforms.transmission.value = material.transmission;\n\t\t\tuniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;\n\t\t\tuniforms.transmissionSamplerSize.value.set( transmissionRenderTarget.width, transmissionRenderTarget.height );\n\n\t\t\tif ( material.transmissionMap ) {\n\n\t\t\t\tuniforms.transmissionMap.value = material.transmissionMap;\n\n\t\t\t}\n\n\t\t\tuniforms.thickness.value = material.thickness;\n\n\t\t\tif ( material.thicknessMap ) {\n\n\t\t\t\tuniforms.thicknessMap.value = material.thicknessMap;\n\n\t\t\t}\n\n\t\t\tuniforms.attenuationDistance.value = material.attenuationDistance;\n\t\t\tuniforms.attenuationColor.value.copy( material.attenuationColor );\n\n\t\t}\n\n\t\tuniforms.specularIntensity.value = material.specularIntensity;\n\t\tuniforms.specularColor.value.copy( material.specularColor );\n\n\t\tif ( material.specularIntensityMap ) {\n\n\t\t\tuniforms.specularIntensityMap.value = material.specularIntensityMap;\n\n\t\t}\n\n\t\tif ( material.specularColorMap ) {\n\n\t\t\tuniforms.specularColorMap.value = material.specularColorMap;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsMatcap( uniforms, material ) {\n\n\t\tif ( material.matcap ) {\n\n\t\t\tuniforms.matcap.value = material.matcap;\n\n\t\t}\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\tif ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\tif ( material.side === BackSide ) uniforms.normalScale.value.negate();\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsDepth( uniforms, material ) {\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsDistance( uniforms, material ) {\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t\tuniforms.referencePosition.value.copy( material.referencePosition );\n\t\tuniforms.nearDistance.value = material.nearDistance;\n\t\tuniforms.farDistance.value = material.farDistance;\n\n\t}\n\n\tfunction refreshUniformsNormal( uniforms, material ) {\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\t\t\tif ( material.side === BackSide ) uniforms.bumpScale.value *= - 1;\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\t\t\tif ( material.side === BackSide ) uniforms.normalScale.value.negate();\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t}\n\n\treturn {\n\t\trefreshFogUniforms: refreshFogUniforms,\n\t\trefreshMaterialUniforms: refreshMaterialUniforms\n\t};\n\n}\n\nfunction createCanvasElement() {\n\n\tconst canvas = createElementNS( 'canvas' );\n\tcanvas.style.display = 'block';\n\treturn canvas;\n\n}\n\nfunction WebGLRenderer( parameters = {} ) {\n\n\tconst _canvas = parameters.canvas !== undefined ? parameters.canvas : createCanvasElement(),\n\t\t_context = parameters.context !== undefined ? parameters.context : null,\n\n\t\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\n\t\t_depth = parameters.depth !== undefined ? parameters.depth : true,\n\t\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\n\t\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\n\t\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\n\t\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,\n\t\t_powerPreference = parameters.powerPreference !== undefined ? parameters.powerPreference : 'default',\n\t\t_failIfMajorPerformanceCaveat = parameters.failIfMajorPerformanceCaveat !== undefined ? parameters.failIfMajorPerformanceCaveat : false;\n\n\tlet currentRenderList = null;\n\tlet currentRenderState = null;\n\n\t// render() can be called from within a callback triggered by another render.\n\t// We track this so that the nested render call gets its list and state isolated from the parent render call.\n\n\tconst renderListStack = [];\n\tconst renderStateStack = [];\n\n\t// public properties\n\n\tthis.domElement = _canvas;\n\n\t// Debug configuration container\n\tthis.debug = {\n\n\t\t/**\n\t\t * Enables error checking and reporting when shader programs are being compiled\n\t\t * @type {boolean}\n\t\t */\n\t\tcheckShaderErrors: true\n\t};\n\n\t// clearing\n\n\tthis.autoClear = true;\n\tthis.autoClearColor = true;\n\tthis.autoClearDepth = true;\n\tthis.autoClearStencil = true;\n\n\t// scene graph\n\n\tthis.sortObjects = true;\n\n\t// user-defined clipping\n\n\tthis.clippingPlanes = [];\n\tthis.localClippingEnabled = false;\n\n\t// physically based shading\n\n\tthis.gammaFactor = 2.0;\t// for backwards compatibility\n\tthis.outputEncoding = LinearEncoding;\n\n\t// physical lights\n\n\tthis.physicallyCorrectLights = false;\n\n\t// tone mapping\n\n\tthis.toneMapping = NoToneMapping;\n\tthis.toneMappingExposure = 1.0;\n\n\t// internal properties\n\n\tconst _this = this;\n\n\tlet _isContextLost = false;\n\n\t// internal state cache\n\n\tlet _currentActiveCubeFace = 0;\n\tlet _currentActiveMipmapLevel = 0;\n\tlet _currentRenderTarget = null;\n\tlet _currentMaterialId = - 1;\n\n\tlet _currentCamera = null;\n\n\tconst _currentViewport = new Vector4();\n\tconst _currentScissor = new Vector4();\n\tlet _currentScissorTest = null;\n\n\t//\n\n\tlet _width = _canvas.width;\n\tlet _height = _canvas.height;\n\n\tlet _pixelRatio = 1;\n\tlet _opaqueSort = null;\n\tlet _transparentSort = null;\n\n\tconst _viewport = new Vector4( 0, 0, _width, _height );\n\tconst _scissor = new Vector4( 0, 0, _width, _height );\n\tlet _scissorTest = false;\n\n\t//\n\n\tconst _currentDrawBuffers = [];\n\n\t// frustum\n\n\tconst _frustum = new Frustum();\n\n\t// clipping\n\n\tlet _clippingEnabled = false;\n\tlet _localClippingEnabled = false;\n\n\t// transmission\n\n\tlet _transmissionRenderTarget = null;\n\n\t// camera matrices cache\n\n\tconst _projScreenMatrix = new Matrix4();\n\n\tconst _vector3 = new Vector3();\n\n\tconst _emptyScene = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: true };\n\n\tfunction getTargetPixelRatio() {\n\n\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\n\t}\n\n\t// initialize\n\n\tlet _gl = _context;\n\n\tfunction getContext( contextNames, contextAttributes ) {\n\n\t\tfor ( let i = 0; i < contextNames.length; i ++ ) {\n\n\t\t\tconst contextName = contextNames[ i ];\n\t\t\tconst context = _canvas.getContext( contextName, contextAttributes );\n\t\t\tif ( context !== null ) return context;\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\ttry {\n\n\t\tconst contextAttributes = {\n\t\t\talpha: _alpha,\n\t\t\tdepth: _depth,\n\t\t\tstencil: _stencil,\n\t\t\tantialias: _antialias,\n\t\t\tpremultipliedAlpha: _premultipliedAlpha,\n\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer,\n\t\t\tpowerPreference: _powerPreference,\n\t\t\tfailIfMajorPerformanceCaveat: _failIfMajorPerformanceCaveat\n\t\t};\n\n\t\t// OffscreenCanvas does not have setAttribute, see #22811\n\t\tif ( 'setAttribute' in _canvas ) _canvas.setAttribute( 'data-engine', `three.js r${REVISION}` );\n\n\t\t// event listeners must be registered before WebGL context is created, see #12753\n\t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\n\t\t_canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );\n\n\t\tif ( _gl === null ) {\n\n\t\t\tconst contextNames = [ 'webgl2', 'webgl', 'experimental-webgl' ];\n\n\t\t\tif ( _this.isWebGL1Renderer === true ) {\n\n\t\t\t\tcontextNames.shift();\n\n\t\t\t}\n\n\t\t\t_gl = getContext( contextNames, contextAttributes );\n\n\t\t\tif ( _gl === null ) {\n\n\t\t\t\tif ( getContext( contextNames ) ) {\n\n\t\t\t\t\tthrow new Error( 'Error creating WebGL context with your selected attributes.' );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( 'Error creating WebGL context.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\n\n\t\t\t_gl.getShaderPrecisionFormat = function () {\n\n\t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\n\n\t\t\t};\n\n\t\t}\n\n\t} catch ( error ) {\n\n\t\tconsole.error( 'THREE.WebGLRenderer: ' + error.message );\n\t\tthrow error;\n\n\t}\n\n\tlet extensions, capabilities, state, info;\n\tlet properties, textures, cubemaps, cubeuvmaps, attributes, geometries, objects;\n\tlet programCache, materials, renderLists, renderStates, clipping, shadowMap;\n\n\tlet background, morphtargets, bufferRenderer, indexedBufferRenderer;\n\n\tlet utils, bindingStates;\n\n\tfunction initGLContext() {\n\n\t\textensions = new WebGLExtensions( _gl );\n\n\t\tcapabilities = new WebGLCapabilities( _gl, extensions, parameters );\n\n\t\textensions.init( capabilities );\n\n\t\tutils = new WebGLUtils( _gl, extensions, capabilities );\n\n\t\tstate = new WebGLState( _gl, extensions, capabilities );\n\n\t\t_currentDrawBuffers[ 0 ] = 1029;\n\n\t\tinfo = new WebGLInfo( _gl );\n\t\tproperties = new WebGLProperties();\n\t\ttextures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );\n\t\tcubemaps = new WebGLCubeMaps( _this );\n\t\tcubeuvmaps = new WebGLCubeUVMaps( _this );\n\t\tattributes = new WebGLAttributes( _gl, capabilities );\n\t\tbindingStates = new WebGLBindingStates( _gl, extensions, attributes, capabilities );\n\t\tgeometries = new WebGLGeometries( _gl, attributes, info, bindingStates );\n\t\tobjects = new WebGLObjects( _gl, geometries, attributes, info );\n\t\tmorphtargets = new WebGLMorphtargets( _gl, capabilities, textures );\n\t\tclipping = new WebGLClipping( properties );\n\t\tprogramCache = new WebGLPrograms( _this, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping );\n\t\tmaterials = new WebGLMaterials( properties );\n\t\trenderLists = new WebGLRenderLists( properties );\n\t\trenderStates = new WebGLRenderStates( extensions, capabilities );\n\t\tbackground = new WebGLBackground( _this, cubemaps, state, objects, _premultipliedAlpha );\n\t\tshadowMap = new WebGLShadowMap( _this, objects, capabilities );\n\n\t\tbufferRenderer = new WebGLBufferRenderer( _gl, extensions, info, capabilities );\n\t\tindexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info, capabilities );\n\n\t\tinfo.programs = programCache.programs;\n\n\t\t_this.capabilities = capabilities;\n\t\t_this.extensions = extensions;\n\t\t_this.properties = properties;\n\t\t_this.renderLists = renderLists;\n\t\t_this.shadowMap = shadowMap;\n\t\t_this.state = state;\n\t\t_this.info = info;\n\n\t}\n\n\tinitGLContext();\n\n\t// xr\n\n\tconst xr = new WebXRManager( _this, _gl );\n\n\tthis.xr = xr;\n\n\t// API\n\n\tthis.getContext = function () {\n\n\t\treturn _gl;\n\n\t};\n\n\tthis.getContextAttributes = function () {\n\n\t\treturn _gl.getContextAttributes();\n\n\t};\n\n\tthis.forceContextLoss = function () {\n\n\t\tconst extension = extensions.get( 'WEBGL_lose_context' );\n\t\tif ( extension ) extension.loseContext();\n\n\t};\n\n\tthis.forceContextRestore = function () {\n\n\t\tconst extension = extensions.get( 'WEBGL_lose_context' );\n\t\tif ( extension ) extension.restoreContext();\n\n\t};\n\n\tthis.getPixelRatio = function () {\n\n\t\treturn _pixelRatio;\n\n\t};\n\n\tthis.setPixelRatio = function ( value ) {\n\n\t\tif ( value === undefined ) return;\n\n\t\t_pixelRatio = value;\n\n\t\tthis.setSize( _width, _height, false );\n\n\t};\n\n\tthis.getSize = function ( target ) {\n\n\t\treturn target.set( _width, _height );\n\n\t};\n\n\tthis.setSize = function ( width, height, updateStyle ) {\n\n\t\tif ( xr.isPresenting ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\t_width = width;\n\t\t_height = height;\n\n\t\t_canvas.width = Math.floor( width * _pixelRatio );\n\t\t_canvas.height = Math.floor( height * _pixelRatio );\n\n\t\tif ( updateStyle !== false ) {\n\n\t\t\t_canvas.style.width = width + 'px';\n\t\t\t_canvas.style.height = height + 'px';\n\n\t\t}\n\n\t\tthis.setViewport( 0, 0, width, height );\n\n\t};\n\n\tthis.getDrawingBufferSize = function ( target ) {\n\n\t\treturn target.set( _width * _pixelRatio, _height * _pixelRatio ).floor();\n\n\t};\n\n\tthis.setDrawingBufferSize = function ( width, height, pixelRatio ) {\n\n\t\t_width = width;\n\t\t_height = height;\n\n\t\t_pixelRatio = pixelRatio;\n\n\t\t_canvas.width = Math.floor( width * pixelRatio );\n\t\t_canvas.height = Math.floor( height * pixelRatio );\n\n\t\tthis.setViewport( 0, 0, width, height );\n\n\t};\n\n\tthis.getCurrentViewport = function ( target ) {\n\n\t\treturn target.copy( _currentViewport );\n\n\t};\n\n\tthis.getViewport = function ( target ) {\n\n\t\treturn target.copy( _viewport );\n\n\t};\n\n\tthis.setViewport = function ( x, y, width, height ) {\n\n\t\tif ( x.isVector4 ) {\n\n\t\t\t_viewport.set( x.x, x.y, x.z, x.w );\n\n\t\t} else {\n\n\t\t\t_viewport.set( x, y, width, height );\n\n\t\t}\n\n\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );\n\n\t};\n\n\tthis.getScissor = function ( target ) {\n\n\t\treturn target.copy( _scissor );\n\n\t};\n\n\tthis.setScissor = function ( x, y, width, height ) {\n\n\t\tif ( x.isVector4 ) {\n\n\t\t\t_scissor.set( x.x, x.y, x.z, x.w );\n\n\t\t} else {\n\n\t\t\t_scissor.set( x, y, width, height );\n\n\t\t}\n\n\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );\n\n\t};\n\n\tthis.getScissorTest = function () {\n\n\t\treturn _scissorTest;\n\n\t};\n\n\tthis.setScissorTest = function ( boolean ) {\n\n\t\tstate.setScissorTest( _scissorTest = boolean );\n\n\t};\n\n\tthis.setOpaqueSort = function ( method ) {\n\n\t\t_opaqueSort = method;\n\n\t};\n\n\tthis.setTransparentSort = function ( method ) {\n\n\t\t_transparentSort = method;\n\n\t};\n\n\t// Clearing\n\n\tthis.getClearColor = function ( target ) {\n\n\t\treturn target.copy( background.getClearColor() );\n\n\t};\n\n\tthis.setClearColor = function () {\n\n\t\tbackground.setClearColor.apply( background, arguments );\n\n\t};\n\n\tthis.getClearAlpha = function () {\n\n\t\treturn background.getClearAlpha();\n\n\t};\n\n\tthis.setClearAlpha = function () {\n\n\t\tbackground.setClearAlpha.apply( background, arguments );\n\n\t};\n\n\tthis.clear = function ( color, depth, stencil ) {\n\n\t\tlet bits = 0;\n\n\t\tif ( color === undefined || color ) bits |= 16384;\n\t\tif ( depth === undefined || depth ) bits |= 256;\n\t\tif ( stencil === undefined || stencil ) bits |= 1024;\n\n\t\t_gl.clear( bits );\n\n\t};\n\n\tthis.clearColor = function () {\n\n\t\tthis.clear( true, false, false );\n\n\t};\n\n\tthis.clearDepth = function () {\n\n\t\tthis.clear( false, true, false );\n\n\t};\n\n\tthis.clearStencil = function () {\n\n\t\tthis.clear( false, false, true );\n\n\t};\n\n\t//\n\n\tthis.dispose = function () {\n\n\t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\n\t\t_canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );\n\n\t\trenderLists.dispose();\n\t\trenderStates.dispose();\n\t\tproperties.dispose();\n\t\tcubemaps.dispose();\n\t\tcubeuvmaps.dispose();\n\t\tobjects.dispose();\n\t\tbindingStates.dispose();\n\n\t\txr.dispose();\n\n\t\txr.removeEventListener( 'sessionstart', onXRSessionStart );\n\t\txr.removeEventListener( 'sessionend', onXRSessionEnd );\n\n\t\tif ( _transmissionRenderTarget ) {\n\n\t\t\t_transmissionRenderTarget.dispose();\n\t\t\t_transmissionRenderTarget = null;\n\n\t\t}\n\n\t\tanimation.stop();\n\n\t};\n\n\t// Events\n\n\tfunction onContextLost( event ) {\n\n\t\tevent.preventDefault();\n\n\t\tconsole.log( 'THREE.WebGLRenderer: Context Lost.' );\n\n\t\t_isContextLost = true;\n\n\t}\n\n\tfunction onContextRestore( /* event */ ) {\n\n\t\tconsole.log( 'THREE.WebGLRenderer: Context Restored.' );\n\n\t\t_isContextLost = false;\n\n\t\tconst infoAutoReset = info.autoReset;\n\t\tconst shadowMapEnabled = shadowMap.enabled;\n\t\tconst shadowMapAutoUpdate = shadowMap.autoUpdate;\n\t\tconst shadowMapNeedsUpdate = shadowMap.needsUpdate;\n\t\tconst shadowMapType = shadowMap.type;\n\n\t\tinitGLContext();\n\n\t\tinfo.autoReset = infoAutoReset;\n\t\tshadowMap.enabled = shadowMapEnabled;\n\t\tshadowMap.autoUpdate = shadowMapAutoUpdate;\n\t\tshadowMap.needsUpdate = shadowMapNeedsUpdate;\n\t\tshadowMap.type = shadowMapType;\n\n\t}\n\n\tfunction onMaterialDispose( event ) {\n\n\t\tconst material = event.target;\n\n\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\n\n\t\tdeallocateMaterial( material );\n\n\t}\n\n\t// Buffer deallocation\n\n\tfunction deallocateMaterial( material ) {\n\n\t\treleaseMaterialProgramReferences( material );\n\n\t\tproperties.remove( material );\n\n\t}\n\n\n\tfunction releaseMaterialProgramReferences( material ) {\n\n\t\tconst programs = properties.get( material ).programs;\n\n\t\tif ( programs !== undefined ) {\n\n\t\t\tprograms.forEach( function ( program ) {\n\n\t\t\t\tprogramCache.releaseProgram( program );\n\n\t\t\t} );\n\n\t\t}\n\n\t}\n\n\t// Buffer rendering\n\n\tthis.renderBufferDirect = function ( camera, scene, geometry, material, object, group ) {\n\n\t\tif ( scene === null ) scene = _emptyScene; // renderBufferDirect second parameter used to be fog (could be null)\n\n\t\tconst frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );\n\n\t\tconst program = setProgram( camera, scene, geometry, material, object );\n\n\t\tstate.setMaterial( material, frontFaceCW );\n\n\t\t//\n\n\t\tlet index = geometry.index;\n\t\tconst position = geometry.attributes.position;\n\n\t\t//\n\n\t\tif ( index === null ) {\n\n\t\t\tif ( position === undefined || position.count === 0 ) return;\n\n\t\t} else if ( index.count === 0 ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\t//\n\n\t\tlet rangeFactor = 1;\n\n\t\tif ( material.wireframe === true ) {\n\n\t\t\tindex = geometries.getWireframeAttribute( geometry );\n\t\t\trangeFactor = 2;\n\n\t\t}\n\n\t\tbindingStates.setup( object, material, program, geometry, index );\n\n\t\tlet attribute;\n\t\tlet renderer = bufferRenderer;\n\n\t\tif ( index !== null ) {\n\n\t\t\tattribute = attributes.get( index );\n\n\t\t\trenderer = indexedBufferRenderer;\n\t\t\trenderer.setIndex( attribute );\n\n\t\t}\n\n\t\t//\n\n\t\tconst dataCount = ( index !== null ) ? index.count : position.count;\n\n\t\tconst rangeStart = geometry.drawRange.start * rangeFactor;\n\t\tconst rangeCount = geometry.drawRange.count * rangeFactor;\n\n\t\tconst groupStart = group !== null ? group.start * rangeFactor : 0;\n\t\tconst groupCount = group !== null ? group.count * rangeFactor : Infinity;\n\n\t\tconst drawStart = Math.max( rangeStart, groupStart );\n\t\tconst drawEnd = Math.min( dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\n\n\t\tconst drawCount = Math.max( 0, drawEnd - drawStart + 1 );\n\n\t\tif ( drawCount === 0 ) return;\n\n\t\t//\n\n\t\tif ( object.isMesh ) {\n\n\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\n\t\t\t\trenderer.setMode( 1 );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.setMode( 4 );\n\n\t\t\t}\n\n\t\t} else if ( object.isLine ) {\n\n\t\t\tlet lineWidth = material.linewidth;\n\n\t\t\tif ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material\n\n\t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\n\n\t\t\tif ( object.isLineSegments ) {\n\n\t\t\t\trenderer.setMode( 1 );\n\n\t\t\t} else if ( object.isLineLoop ) {\n\n\t\t\t\trenderer.setMode( 2 );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.setMode( 3 );\n\n\t\t\t}\n\n\t\t} else if ( object.isPoints ) {\n\n\t\t\trenderer.setMode( 0 );\n\n\t\t} else if ( object.isSprite ) {\n\n\t\t\trenderer.setMode( 4 );\n\n\t\t}\n\n\t\tif ( object.isInstancedMesh ) {\n\n\t\t\trenderer.renderInstances( drawStart, drawCount, object.count );\n\n\t\t} else if ( geometry.isInstancedBufferGeometry ) {\n\n\t\t\tconst instanceCount = Math.min( geometry.instanceCount, geometry._maxInstanceCount );\n\n\t\t\trenderer.renderInstances( drawStart, drawCount, instanceCount );\n\n\t\t} else {\n\n\t\t\trenderer.render( drawStart, drawCount );\n\n\t\t}\n\n\t};\n\n\t// Compile\n\n\tthis.compile = function ( scene, camera ) {\n\n\t\tcurrentRenderState = renderStates.get( scene );\n\t\tcurrentRenderState.init();\n\n\t\trenderStateStack.push( currentRenderState );\n\n\t\tscene.traverseVisible( function ( object ) {\n\n\t\t\tif ( object.isLight && object.layers.test( camera.layers ) ) {\n\n\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t\tcurrentRenderState.setupLights( _this.physicallyCorrectLights );\n\n\t\tscene.traverse( function ( object ) {\n\n\t\t\tconst material = object.material;\n\n\t\t\tif ( material ) {\n\n\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\tfor ( let i = 0; i < material.length; i ++ ) {\n\n\t\t\t\t\t\tconst material2 = material[ i ];\n\n\t\t\t\t\t\tgetProgram( material2, scene, object );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgetProgram( material, scene, object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t\trenderStateStack.pop();\n\t\tcurrentRenderState = null;\n\n\t};\n\n\t// Animation Loop\n\n\tlet onAnimationFrameCallback = null;\n\n\tfunction onAnimationFrame( time ) {\n\n\t\tif ( onAnimationFrameCallback ) onAnimationFrameCallback( time );\n\n\t}\n\n\tfunction onXRSessionStart() {\n\n\t\tanimation.stop();\n\n\t}\n\n\tfunction onXRSessionEnd() {\n\n\t\tanimation.start();\n\n\t}\n\n\tconst animation = new WebGLAnimation();\n\tanimation.setAnimationLoop( onAnimationFrame );\n\n\tif ( typeof window !== 'undefined' ) animation.setContext( window );\n\n\tthis.setAnimationLoop = function ( callback ) {\n\n\t\tonAnimationFrameCallback = callback;\n\t\txr.setAnimationLoop( callback );\n\n\t\t( callback === null ) ? animation.stop() : animation.start();\n\n\t};\n\n\txr.addEventListener( 'sessionstart', onXRSessionStart );\n\txr.addEventListener( 'sessionend', onXRSessionEnd );\n\n\t// Rendering\n\n\tthis.render = function ( scene, camera ) {\n\n\t\tif ( camera !== undefined && camera.isCamera !== true ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( _isContextLost === true ) return;\n\n\t\t// update scene graph\n\n\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\n\t\t// update camera matrices and frustum\n\n\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\n\t\tif ( xr.enabled === true && xr.isPresenting === true ) {\n\n\t\t\tif ( xr.cameraAutoUpdate === true ) xr.updateCamera( camera );\n\n\t\t\tcamera = xr.getCamera(); // use XR camera for rendering\n\n\t\t}\n\n\t\t//\n\t\tif ( scene.isScene === true ) scene.onBeforeRender( _this, scene, camera, _currentRenderTarget );\n\n\t\tcurrentRenderState = renderStates.get( scene, renderStateStack.length );\n\t\tcurrentRenderState.init();\n\n\t\trenderStateStack.push( currentRenderState );\n\n\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t_frustum.setFromProjectionMatrix( _projScreenMatrix );\n\n\t\t_localClippingEnabled = this.localClippingEnabled;\n\t\t_clippingEnabled = clipping.init( this.clippingPlanes, _localClippingEnabled, camera );\n\n\t\tcurrentRenderList = renderLists.get( scene, renderListStack.length );\n\t\tcurrentRenderList.init();\n\n\t\trenderListStack.push( currentRenderList );\n\n\t\tprojectObject( scene, camera, 0, _this.sortObjects );\n\n\t\tcurrentRenderList.finish();\n\n\t\tif ( _this.sortObjects === true ) {\n\n\t\t\tcurrentRenderList.sort( _opaqueSort, _transparentSort );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( _clippingEnabled === true ) clipping.beginShadows();\n\n\t\tconst shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\tshadowMap.render( shadowsArray, scene, camera );\n\n\t\tif ( _clippingEnabled === true ) clipping.endShadows();\n\n\t\t//\n\n\t\tif ( this.info.autoReset === true ) this.info.reset();\n\n\t\t//\n\n\t\tbackground.render( currentRenderList, scene );\n\n\t\t// render scene\n\n\t\tcurrentRenderState.setupLights( _this.physicallyCorrectLights );\n\n\t\tif ( camera.isArrayCamera ) {\n\n\t\t\tconst cameras = camera.cameras;\n\n\t\t\tfor ( let i = 0, l = cameras.length; i < l; i ++ ) {\n\n\t\t\t\tconst camera2 = cameras[ i ];\n\n\t\t\t\trenderScene( currentRenderList, scene, camera2, camera2.viewport );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\trenderScene( currentRenderList, scene, camera );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( _currentRenderTarget !== null ) {\n\n\t\t\t// resolve multisample renderbuffers to a single-sample texture if necessary\n\n\t\t\ttextures.updateMultisampleRenderTarget( _currentRenderTarget );\n\n\t\t\t// Generate mipmap if we're using any kind of mipmap filtering\n\n\t\t\ttextures.updateRenderTargetMipmap( _currentRenderTarget );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( scene.isScene === true ) scene.onAfterRender( _this, scene, camera );\n\n\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\t\tstate.buffers.depth.setTest( true );\n\t\tstate.buffers.depth.setMask( true );\n\t\tstate.buffers.color.setMask( true );\n\n\t\tstate.setPolygonOffset( false );\n\n\t\t// _gl.finish();\n\n\t\tbindingStates.resetDefaultState();\n\t\t_currentMaterialId = - 1;\n\t\t_currentCamera = null;\n\n\t\trenderStateStack.pop();\n\n\t\tif ( renderStateStack.length > 0 ) {\n\n\t\t\tcurrentRenderState = renderStateStack[ renderStateStack.length - 1 ];\n\n\t\t} else {\n\n\t\t\tcurrentRenderState = null;\n\n\t\t}\n\n\t\trenderListStack.pop();\n\n\t\tif ( renderListStack.length > 0 ) {\n\n\t\t\tcurrentRenderList = renderListStack[ renderListStack.length - 1 ];\n\n\t\t} else {\n\n\t\t\tcurrentRenderList = null;\n\n\t\t}\n\n\t};\n\n\tfunction projectObject( object, camera, groupOrder, sortObjects ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tconst visible = object.layers.test( camera.layers );\n\n\t\tif ( visible ) {\n\n\t\t\tif ( object.isGroup ) {\n\n\t\t\t\tgroupOrder = object.renderOrder;\n\n\t\t\t} else if ( object.isLOD ) {\n\n\t\t\t\tif ( object.autoUpdate === true ) object.update( camera );\n\n\t\t\t} else if ( object.isLight ) {\n\n\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {\n\n\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst geometry = objects.update( object );\n\t\t\t\t\tconst material = object.material;\n\n\t\t\t\t\tif ( material.visible ) {\n\n\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\n\n\t\t\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\t\t\t// update skeleton only once in a frame\n\n\t\t\t\t\tif ( object.skeleton.frame !== info.render.frame ) {\n\n\t\t\t\t\t\tobject.skeleton.update();\n\t\t\t\t\t\tobject.skeleton.frame = info.render.frame;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {\n\n\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst geometry = objects.update( object );\n\t\t\t\t\tconst material = object.material;\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tconst groups = geometry.groups;\n\n\t\t\t\t\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tconst group = groups[ i ];\n\t\t\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, groupMaterial, groupOrder, _vector3.z, group );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst children = object.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tprojectObject( children[ i ], camera, groupOrder, sortObjects );\n\n\t\t}\n\n\t}\n\n\tfunction renderScene( currentRenderList, scene, camera, viewport ) {\n\n\t\tconst opaqueObjects = currentRenderList.opaque;\n\t\tconst transmissiveObjects = currentRenderList.transmissive;\n\t\tconst transparentObjects = currentRenderList.transparent;\n\n\t\tcurrentRenderState.setupLightsView( camera );\n\n\t\tif ( transmissiveObjects.length > 0 ) renderTransmissionPass( opaqueObjects, scene, camera );\n\n\t\tif ( viewport ) state.viewport( _currentViewport.copy( viewport ) );\n\n\t\tif ( opaqueObjects.length > 0 ) renderObjects( opaqueObjects, scene, camera );\n\t\tif ( transmissiveObjects.length > 0 ) renderObjects( transmissiveObjects, scene, camera );\n\t\tif ( transparentObjects.length > 0 ) renderObjects( transparentObjects, scene, camera );\n\n\t}\n\n\tfunction renderTransmissionPass( opaqueObjects, scene, camera ) {\n\n\t\tif ( _transmissionRenderTarget === null ) {\n\n\t\t\tconst needsAntialias = _antialias === true && capabilities.isWebGL2 === true;\n\t\t\tconst renderTargetType = needsAntialias ? WebGLMultisampleRenderTarget : WebGLRenderTarget;\n\n\t\t\t_transmissionRenderTarget = new renderTargetType( 1024, 1024, {\n\t\t\t\tgenerateMipmaps: true,\n\t\t\t\ttype: utils.convert( HalfFloatType ) !== null ? HalfFloatType : UnsignedByteType,\n\t\t\t\tminFilter: LinearMipmapLinearFilter,\n\t\t\t\tmagFilter: NearestFilter,\n\t\t\t\twrapS: ClampToEdgeWrapping,\n\t\t\t\twrapT: ClampToEdgeWrapping,\n\t\t\t\tuseRenderToTexture: extensions.has( 'WEBGL_multisampled_render_to_texture' )\n\t\t\t} );\n\n\t\t}\n\n\t\tconst currentRenderTarget = _this.getRenderTarget();\n\t\t_this.setRenderTarget( _transmissionRenderTarget );\n\t\t_this.clear();\n\n\t\t// Turn off the features which can affect the frag color for opaque objects pass.\n\t\t// Otherwise they are applied twice in opaque objects pass and transmission objects pass.\n\t\tconst currentToneMapping = _this.toneMapping;\n\t\t_this.toneMapping = NoToneMapping;\n\n\t\trenderObjects( opaqueObjects, scene, camera );\n\n\t\t_this.toneMapping = currentToneMapping;\n\n\t\ttextures.updateMultisampleRenderTarget( _transmissionRenderTarget );\n\t\ttextures.updateRenderTargetMipmap( _transmissionRenderTarget );\n\n\t\t_this.setRenderTarget( currentRenderTarget );\n\n\t}\n\n\tfunction renderObjects( renderList, scene, camera ) {\n\n\t\tconst overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;\n\n\t\tfor ( let i = 0, l = renderList.length; i < l; i ++ ) {\n\n\t\t\tconst renderItem = renderList[ i ];\n\n\t\t\tconst object = renderItem.object;\n\t\t\tconst geometry = renderItem.geometry;\n\t\t\tconst material = overrideMaterial === null ? renderItem.material : overrideMaterial;\n\t\t\tconst group = renderItem.group;\n\n\t\t\tif ( object.layers.test( camera.layers ) ) {\n\n\t\t\t\trenderObject( object, scene, camera, geometry, material, group );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction renderObject( object, scene, camera, geometry, material, group ) {\n\n\t\tobject.onBeforeRender( _this, scene, camera, geometry, material, group );\n\n\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n\n\t\tmaterial.onBeforeRender( _this, scene, camera, geometry, object, group );\n\n\t\tif ( material.transparent === true && material.side === DoubleSide ) {\n\n\t\t\tmaterial.side = BackSide;\n\t\t\tmaterial.needsUpdate = true;\n\t\t\t_this.renderBufferDirect( camera, scene, geometry, material, object, group );\n\n\t\t\tmaterial.side = FrontSide;\n\t\t\tmaterial.needsUpdate = true;\n\t\t\t_this.renderBufferDirect( camera, scene, geometry, material, object, group );\n\n\t\t\tmaterial.side = DoubleSide;\n\n\t\t} else {\n\n\t\t\t_this.renderBufferDirect( camera, scene, geometry, material, object, group );\n\n\t\t}\n\n\t\tobject.onAfterRender( _this, scene, camera, geometry, material, group );\n\n\t}\n\n\tfunction getProgram( material, scene, object ) {\n\n\t\tif ( scene.isScene !== true ) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n\t\tconst materialProperties = properties.get( material );\n\n\t\tconst lights = currentRenderState.state.lights;\n\t\tconst shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\tconst lightsStateVersion = lights.state.version;\n\n\t\tconst parameters = programCache.getParameters( material, lights.state, shadowsArray, scene, object );\n\t\tconst programCacheKey = programCache.getProgramCacheKey( parameters );\n\n\t\tlet programs = materialProperties.programs;\n\n\t\t// always update environment and fog - changing these trigger an getProgram call, but it's possible that the program doesn't change\n\n\t\tmaterialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\tmaterialProperties.fog = scene.fog;\n\t\tmaterialProperties.envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || materialProperties.environment );\n\n\t\tif ( programs === undefined ) {\n\n\t\t\t// new material\n\n\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\n\n\t\t\tprograms = new Map();\n\t\t\tmaterialProperties.programs = programs;\n\n\t\t}\n\n\t\tlet program = programs.get( programCacheKey );\n\n\t\tif ( program !== undefined ) {\n\n\t\t\t// early out if program and light state is identical\n\n\t\t\tif ( materialProperties.currentProgram === program && materialProperties.lightsStateVersion === lightsStateVersion ) {\n\n\t\t\t\tupdateCommonMaterialProperties( material, parameters );\n\n\t\t\t\treturn program;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tparameters.uniforms = programCache.getUniforms( material );\n\n\t\t\tmaterial.onBuild( object, parameters, _this );\n\n\t\t\tmaterial.onBeforeCompile( parameters, _this );\n\n\t\t\tprogram = programCache.acquireProgram( parameters, programCacheKey );\n\t\t\tprograms.set( programCacheKey, program );\n\n\t\t\tmaterialProperties.uniforms = parameters.uniforms;\n\n\t\t}\n\n\t\tconst uniforms = materialProperties.uniforms;\n\n\t\tif ( ( ! material.isShaderMaterial && ! material.isRawShaderMaterial ) || material.clipping === true ) {\n\n\t\t\tuniforms.clippingPlanes = clipping.uniform;\n\n\t\t}\n\n\t\tupdateCommonMaterialProperties( material, parameters );\n\n\t\t// store the light setup it was created for\n\n\t\tmaterialProperties.needsLights = materialNeedsLights( material );\n\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\n\n\t\tif ( materialProperties.needsLights ) {\n\n\t\t\t// wire up the material to this renderer's lighting state\n\n\t\t\tuniforms.ambientLightColor.value = lights.state.ambient;\n\t\t\tuniforms.lightProbe.value = lights.state.probe;\n\t\t\tuniforms.directionalLights.value = lights.state.directional;\n\t\t\tuniforms.directionalLightShadows.value = lights.state.directionalShadow;\n\t\t\tuniforms.spotLights.value = lights.state.spot;\n\t\t\tuniforms.spotLightShadows.value = lights.state.spotShadow;\n\t\t\tuniforms.rectAreaLights.value = lights.state.rectArea;\n\t\t\tuniforms.ltc_1.value = lights.state.rectAreaLTC1;\n\t\t\tuniforms.ltc_2.value = lights.state.rectAreaLTC2;\n\t\t\tuniforms.pointLights.value = lights.state.point;\n\t\t\tuniforms.pointLightShadows.value = lights.state.pointShadow;\n\t\t\tuniforms.hemisphereLights.value = lights.state.hemi;\n\n\t\t\tuniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\n\t\t\tuniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\n\t\t\tuniforms.spotShadowMap.value = lights.state.spotShadowMap;\n\t\t\tuniforms.spotShadowMatrix.value = lights.state.spotShadowMatrix;\n\t\t\tuniforms.pointShadowMap.value = lights.state.pointShadowMap;\n\t\t\tuniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;\n\t\t\t// TODO (abelnation): add area lights shadow info to uniforms\n\n\t\t}\n\n\t\tconst progUniforms = program.getUniforms();\n\t\tconst uniformsList = WebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\n\n\t\tmaterialProperties.currentProgram = program;\n\t\tmaterialProperties.uniformsList = uniformsList;\n\n\t\treturn program;\n\n\t}\n\n\tfunction updateCommonMaterialProperties( material, parameters ) {\n\n\t\tconst materialProperties = properties.get( material );\n\n\t\tmaterialProperties.outputEncoding = parameters.outputEncoding;\n\t\tmaterialProperties.instancing = parameters.instancing;\n\t\tmaterialProperties.skinning = parameters.skinning;\n\t\tmaterialProperties.morphTargets = parameters.morphTargets;\n\t\tmaterialProperties.morphNormals = parameters.morphNormals;\n\t\tmaterialProperties.morphTargetsCount = parameters.morphTargetsCount;\n\t\tmaterialProperties.numClippingPlanes = parameters.numClippingPlanes;\n\t\tmaterialProperties.numIntersection = parameters.numClipIntersection;\n\t\tmaterialProperties.vertexAlphas = parameters.vertexAlphas;\n\t\tmaterialProperties.vertexTangents = parameters.vertexTangents;\n\n\t}\n\n\tfunction setProgram( camera, scene, geometry, material, object ) {\n\n\t\tif ( scene.isScene !== true ) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n\t\ttextures.resetTextureUnits();\n\n\t\tconst fog = scene.fog;\n\t\tconst environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\tconst encoding = ( _currentRenderTarget === null ) ? _this.outputEncoding : _currentRenderTarget.texture.encoding;\n\t\tconst envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || environment );\n\t\tconst vertexAlphas = material.vertexColors === true && !! geometry.attributes.color && geometry.attributes.color.itemSize === 4;\n\t\tconst vertexTangents = !! material.normalMap && !! geometry.attributes.tangent;\n\t\tconst morphTargets = !! geometry.morphAttributes.position;\n\t\tconst morphNormals = !! geometry.morphAttributes.normal;\n\t\tconst morphTargetsCount = !! geometry.morphAttributes.position ? geometry.morphAttributes.position.length : 0;\n\n\t\tconst materialProperties = properties.get( material );\n\t\tconst lights = currentRenderState.state.lights;\n\n\t\tif ( _clippingEnabled === true ) {\n\n\t\t\tif ( _localClippingEnabled === true || camera !== _currentCamera ) {\n\n\t\t\t\tconst useCache =\n\t\t\t\t\tcamera === _currentCamera &&\n\t\t\t\t\tmaterial.id === _currentMaterialId;\n\n\t\t\t\t// we might want to call this function with some ClippingGroup\n\t\t\t\t// object instead of the material, once it becomes feasible\n\t\t\t\t// (#8465, #8379)\n\t\t\t\tclipping.setState( material, camera, useCache );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tlet needsProgramChange = false;\n\n\t\tif ( material.version === materialProperties.__version ) {\n\n\t\t\tif ( materialProperties.needsLights && ( materialProperties.lightsStateVersion !== lights.state.version ) ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( materialProperties.outputEncoding !== encoding ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( object.isInstancedMesh && materialProperties.instancing === false ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( ! object.isInstancedMesh && materialProperties.instancing === true ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( object.isSkinnedMesh && materialProperties.skinning === false ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( ! object.isSkinnedMesh && materialProperties.skinning === true ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( materialProperties.envMap !== envMap ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( material.fog && materialProperties.fog !== fog ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( materialProperties.numClippingPlanes !== undefined &&\n\t\t\t\t( materialProperties.numClippingPlanes !== clipping.numPlanes ||\n\t\t\t\tmaterialProperties.numIntersection !== clipping.numIntersection ) ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( materialProperties.vertexAlphas !== vertexAlphas ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( materialProperties.vertexTangents !== vertexTangents ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( materialProperties.morphTargets !== morphTargets ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( materialProperties.morphNormals !== morphNormals ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t} else if ( capabilities.isWebGL2 === true && materialProperties.morphTargetsCount !== morphTargetsCount ) {\n\n\t\t\t\tneedsProgramChange = true;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tneedsProgramChange = true;\n\t\t\tmaterialProperties.__version = material.version;\n\n\t\t}\n\n\t\t//\n\n\t\tlet program = materialProperties.currentProgram;\n\n\t\tif ( needsProgramChange === true ) {\n\n\t\t\tprogram = getProgram( material, scene, object );\n\n\t\t}\n\n\t\tlet refreshProgram = false;\n\t\tlet refreshMaterial = false;\n\t\tlet refreshLights = false;\n\n\t\tconst p_uniforms = program.getUniforms(),\n\t\t\tm_uniforms = materialProperties.uniforms;\n\n\t\tif ( state.useProgram( program.program ) ) {\n\n\t\t\trefreshProgram = true;\n\t\t\trefreshMaterial = true;\n\t\t\trefreshLights = true;\n\n\t\t}\n\n\t\tif ( material.id !== _currentMaterialId ) {\n\n\t\t\t_currentMaterialId = material.id;\n\n\t\t\trefreshMaterial = true;\n\n\t\t}\n\n\t\tif ( refreshProgram || _currentCamera !== camera ) {\n\n\t\t\tp_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );\n\n\t\t\tif ( capabilities.logarithmicDepthBuffer ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\n\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\n\n\t\t\t}\n\n\t\t\tif ( _currentCamera !== camera ) {\n\n\t\t\t\t_currentCamera = camera;\n\n\t\t\t\t// lighting uniforms depend on the camera so enforce an update\n\t\t\t\t// now, in case this material supports lights - or later, when\n\t\t\t\t// the next material that does gets activated:\n\n\t\t\t\trefreshMaterial = true;\t\t// set to true on material change\n\t\t\t\trefreshLights = true;\t\t// remains set until update done\n\n\t\t\t}\n\n\t\t\t// load material specific uniforms\n\t\t\t// (shader material also gets them for the sake of genericity)\n\n\t\t\tif ( material.isShaderMaterial ||\n\t\t\t\tmaterial.isMeshPhongMaterial ||\n\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\tmaterial.envMap ) {\n\n\t\t\t\tconst uCamPos = p_uniforms.map.cameraPosition;\n\n\t\t\t\tif ( uCamPos !== undefined ) {\n\n\t\t\t\t\tuCamPos.setValue( _gl,\n\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.isMeshPhongMaterial ||\n\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\tmaterial.isMeshLambertMaterial ||\n\t\t\t\tmaterial.isMeshBasicMaterial ||\n\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\tmaterial.isShaderMaterial ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'isOrthographic', camera.isOrthographicCamera === true );\n\n\t\t\t}\n\n\t\t\tif ( material.isMeshPhongMaterial ||\n\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\tmaterial.isMeshLambertMaterial ||\n\t\t\t\tmaterial.isMeshBasicMaterial ||\n\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\tmaterial.isShaderMaterial ||\n\t\t\t\tmaterial.isShadowMaterial ||\n\t\t\t\tobject.isSkinnedMesh ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// skinning and morph target uniforms must be set even if material didn't change\n\t\t// auto-setting of texture unit for bone and morph texture must go before other textures\n\t\t// otherwise textures used for skinning and morphing can take over texture units reserved for other material textures\n\n\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\n\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\n\n\t\t\tconst skeleton = object.skeleton;\n\n\t\t\tif ( skeleton ) {\n\n\t\t\t\tif ( capabilities.floatVertexTextures ) {\n\n\t\t\t\t\tif ( skeleton.boneTexture === null ) skeleton.computeBoneTexture();\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture, textures );\n\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tp_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( !! geometry && ( geometry.morphAttributes.position !== undefined || geometry.morphAttributes.normal !== undefined ) ) {\n\n\t\t\tmorphtargets.update( object, geometry, material, program );\n\n\t\t}\n\n\n\t\tif ( refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow ) {\n\n\t\t\tmaterialProperties.receiveShadow = object.receiveShadow;\n\t\t\tp_uniforms.setValue( _gl, 'receiveShadow', object.receiveShadow );\n\n\t\t}\n\n\t\tif ( refreshMaterial ) {\n\n\t\t\tp_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );\n\n\t\t\tif ( materialProperties.needsLights ) {\n\n\t\t\t\t// the current material requires lighting info\n\n\t\t\t\t// note: all lighting uniforms are always set correctly\n\t\t\t\t// they simply reference the renderer's state for their\n\t\t\t\t// values\n\t\t\t\t//\n\t\t\t\t// use the current material's .needsUpdate flags to set\n\t\t\t\t// the GL state when required\n\n\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\n\n\t\t\t}\n\n\t\t\t// refresh uniforms common to several materials\n\n\t\t\tif ( fog && material.fog ) {\n\n\t\t\t\tmaterials.refreshFogUniforms( m_uniforms, fog );\n\n\t\t\t}\n\n\t\t\tmaterials.refreshMaterialUniforms( m_uniforms, material, _pixelRatio, _height, _transmissionRenderTarget );\n\n\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );\n\n\t\t}\n\n\t\tif ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {\n\n\t\t\tWebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );\n\t\t\tmaterial.uniformsNeedUpdate = false;\n\n\t\t}\n\n\t\tif ( material.isSpriteMaterial ) {\n\n\t\t\tp_uniforms.setValue( _gl, 'center', object.center );\n\n\t\t}\n\n\t\t// common matrices\n\n\t\tp_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );\n\t\tp_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );\n\t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\n\n\t\treturn program;\n\n\t}\n\n\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\tfunction markUniformsLightsNeedsUpdate( uniforms, value ) {\n\n\t\tuniforms.ambientLightColor.needsUpdate = value;\n\t\tuniforms.lightProbe.needsUpdate = value;\n\n\t\tuniforms.directionalLights.needsUpdate = value;\n\t\tuniforms.directionalLightShadows.needsUpdate = value;\n\t\tuniforms.pointLights.needsUpdate = value;\n\t\tuniforms.pointLightShadows.needsUpdate = value;\n\t\tuniforms.spotLights.needsUpdate = value;\n\t\tuniforms.spotLightShadows.needsUpdate = value;\n\t\tuniforms.rectAreaLights.needsUpdate = value;\n\t\tuniforms.hemisphereLights.needsUpdate = value;\n\n\t}\n\n\tfunction materialNeedsLights( material ) {\n\n\t\treturn material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial ||\n\t\t\tmaterial.isMeshStandardMaterial || material.isShadowMaterial ||\n\t\t\t( material.isShaderMaterial && material.lights === true );\n\n\t}\n\n\tthis.getActiveCubeFace = function () {\n\n\t\treturn _currentActiveCubeFace;\n\n\t};\n\n\tthis.getActiveMipmapLevel = function () {\n\n\t\treturn _currentActiveMipmapLevel;\n\n\t};\n\n\tthis.getRenderTarget = function () {\n\n\t\treturn _currentRenderTarget;\n\n\t};\n\n\tthis.setRenderTargetTextures = function ( renderTarget, colorTexture, depthTexture ) {\n\n\t\tproperties.get( renderTarget.texture ).__webglTexture = colorTexture;\n\t\tproperties.get( renderTarget.depthTexture ).__webglTexture = depthTexture;\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\trenderTargetProperties.__hasExternalTextures = true;\n\n\t\tif ( renderTargetProperties.__hasExternalTextures ) {\n\n\t\t\trenderTargetProperties.__autoAllocateDepthBuffer = depthTexture === undefined;\n\n\t\t\tif ( ! renderTargetProperties.__autoAllocateDepthBuffer ) {\n\n\t\t\t\t// The multisample_render_to_texture extension doesn't work properly if there\n\t\t\t\t// are midframe flushes and an external depth buffer. Disable use of the extension.\n\t\t\t\tif ( renderTarget.useRenderToTexture ) {\n\n\t\t\t\t\tconsole.warn( 'render-to-texture extension was disabled because an external texture was provided' );\n\t\t\t\t\trenderTarget.useRenderToTexture = false;\n\t\t\t\t\trenderTarget.useRenderbuffer = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tthis.setRenderTargetFramebuffer = function ( renderTarget, defaultFramebuffer ) {\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\trenderTargetProperties.__webglFramebuffer = defaultFramebuffer;\n\t\trenderTargetProperties.__useDefaultFramebuffer = defaultFramebuffer === undefined;\n\n\t};\n\n\tthis.setRenderTarget = function ( renderTarget, activeCubeFace = 0, activeMipmapLevel = 0 ) {\n\n\t\t_currentRenderTarget = renderTarget;\n\t\t_currentActiveCubeFace = activeCubeFace;\n\t\t_currentActiveMipmapLevel = activeMipmapLevel;\n\t\tlet useDefaultFramebuffer = true;\n\n\t\tif ( renderTarget ) {\n\n\t\t\tconst renderTargetProperties = properties.get( renderTarget );\n\n\t\t\tif ( renderTargetProperties.__useDefaultFramebuffer !== undefined ) {\n\n\t\t\t\t// We need to make sure to rebind the framebuffer.\n\t\t\t\tstate.bindFramebuffer( 36160, null );\n\t\t\t\tuseDefaultFramebuffer = false;\n\n\t\t\t} else if ( renderTargetProperties.__webglFramebuffer === undefined ) {\n\n\t\t\t\ttextures.setupRenderTarget( renderTarget );\n\n\t\t\t} else if ( renderTargetProperties.__hasExternalTextures ) {\n\n\t\t\t\t// Color and depth texture must be rebound in order for the swapchain to update.\n\t\t\t\ttextures.rebindTextures( renderTarget, properties.get( renderTarget.texture ).__webglTexture, properties.get( renderTarget.depthTexture ).__webglTexture );\n\n\t\t\t}\n\n\t\t}\n\n\t\tlet framebuffer = null;\n\t\tlet isCube = false;\n\t\tlet isRenderTarget3D = false;\n\n\t\tif ( renderTarget ) {\n\n\t\t\tconst texture = renderTarget.texture;\n\n\t\t\tif ( texture.isDataTexture3D || texture.isDataTexture2DArray ) {\n\n\t\t\t\tisRenderTarget3D = true;\n\n\t\t\t}\n\n\t\t\tconst __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\t\tif ( renderTarget.isWebGLCubeRenderTarget ) {\n\n\t\t\t\tframebuffer = __webglFramebuffer[ activeCubeFace ];\n\t\t\t\tisCube = true;\n\n\t\t\t} else if ( renderTarget.useRenderbuffer ) {\n\n\t\t\t\tframebuffer = properties.get( renderTarget ).__webglMultisampledFramebuffer;\n\n\t\t\t} else {\n\n\t\t\t\tframebuffer = __webglFramebuffer;\n\n\t\t\t}\n\n\t\t\t_currentViewport.copy( renderTarget.viewport );\n\t\t\t_currentScissor.copy( renderTarget.scissor );\n\t\t\t_currentScissorTest = renderTarget.scissorTest;\n\n\t\t} else {\n\n\t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor();\n\t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor();\n\t\t\t_currentScissorTest = _scissorTest;\n\n\t\t}\n\n\t\tconst framebufferBound = state.bindFramebuffer( 36160, framebuffer );\n\n\t\tif ( framebufferBound && capabilities.drawBuffers && useDefaultFramebuffer ) {\n\n\t\t\tlet needsUpdate = false;\n\n\t\t\tif ( renderTarget ) {\n\n\t\t\t\tif ( renderTarget.isWebGLMultipleRenderTargets ) {\n\n\t\t\t\t\tconst textures = renderTarget.texture;\n\n\t\t\t\t\tif ( _currentDrawBuffers.length !== textures.length || _currentDrawBuffers[ 0 ] !== 36064 ) {\n\n\t\t\t\t\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\t_currentDrawBuffers[ i ] = 36064 + i;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_currentDrawBuffers.length = textures.length;\n\n\t\t\t\t\t\tneedsUpdate = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( _currentDrawBuffers.length !== 1 || _currentDrawBuffers[ 0 ] !== 36064 ) {\n\n\t\t\t\t\t\t_currentDrawBuffers[ 0 ] = 36064;\n\t\t\t\t\t\t_currentDrawBuffers.length = 1;\n\n\t\t\t\t\t\tneedsUpdate = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( _currentDrawBuffers.length !== 1 || _currentDrawBuffers[ 0 ] !== 1029 ) {\n\n\t\t\t\t\t_currentDrawBuffers[ 0 ] = 1029;\n\t\t\t\t\t_currentDrawBuffers.length = 1;\n\n\t\t\t\t\tneedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( needsUpdate ) {\n\n\t\t\t\tif ( capabilities.isWebGL2 ) {\n\n\t\t\t\t\t_gl.drawBuffers( _currentDrawBuffers );\n\n\t\t\t\t} else {\n\n\t\t\t\t\textensions.get( 'WEBGL_draw_buffers' ).drawBuffersWEBGL( _currentDrawBuffers );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.viewport( _currentViewport );\n\t\tstate.scissor( _currentScissor );\n\t\tstate.setScissorTest( _currentScissorTest );\n\n\t\tif ( isCube ) {\n\n\t\t\tconst textureProperties = properties.get( renderTarget.texture );\n\t\t\t_gl.framebufferTexture2D( 36160, 36064, 34069 + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel );\n\n\t\t} else if ( isRenderTarget3D ) {\n\n\t\t\tconst textureProperties = properties.get( renderTarget.texture );\n\t\t\tconst layer = activeCubeFace || 0;\n\t\t\t_gl.framebufferTextureLayer( 36160, 36064, textureProperties.__webglTexture, activeMipmapLevel || 0, layer );\n\n\t\t}\n\n\t\t_currentMaterialId = - 1; // reset current material to ensure correct uniform bindings\n\n\t};\n\n\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer, activeCubeFaceIndex ) {\n\n\t\tif ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tlet framebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\tif ( renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined ) {\n\n\t\t\tframebuffer = framebuffer[ activeCubeFaceIndex ];\n\n\t\t}\n\n\t\tif ( framebuffer ) {\n\n\t\t\tstate.bindFramebuffer( 36160, framebuffer );\n\n\t\t\ttry {\n\n\t\t\t\tconst texture = renderTarget.texture;\n\t\t\t\tconst textureFormat = texture.format;\n\t\t\t\tconst textureType = texture.type;\n\n\t\t\t\tif ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( 35739 ) ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tconst halfFloatSupportedByExt = ( textureType === HalfFloatType ) && ( extensions.has( 'EXT_color_buffer_half_float' ) || ( capabilities.isWebGL2 && extensions.has( 'EXT_color_buffer_float' ) ) );\n\n\t\t\t\tif ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( 35738 ) && // Edge and Chrome Mac < 52 (#9513)\n\t\t\t\t\t! ( textureType === FloatType && ( capabilities.isWebGL2 || extensions.has( 'OES_texture_float' ) || extensions.has( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox\n\t\t\t\t\t! halfFloatSupportedByExt ) {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( _gl.checkFramebufferStatus( 36160 ) === 36053 ) {\n\n\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\n\t\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\n\n\t\t\t\t\t\t_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\n\n\t\t\t\t}\n\n\t\t\t} finally {\n\n\t\t\t\t// restore framebuffer of current render target if necessary\n\n\t\t\t\tconst framebuffer = ( _currentRenderTarget !== null ) ? properties.get( _currentRenderTarget ).__webglFramebuffer : null;\n\t\t\t\tstate.bindFramebuffer( 36160, framebuffer );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tthis.copyFramebufferToTexture = function ( position, texture, level = 0 ) {\n\n\t\tconst levelScale = Math.pow( 2, - level );\n\t\tconst width = Math.floor( texture.image.width * levelScale );\n\t\tconst height = Math.floor( texture.image.height * levelScale );\n\n\t\tlet glFormat = utils.convert( texture.format );\n\n\t\tif ( capabilities.isWebGL2 ) {\n\n\t\t\t// Workaround for https://bugs.chromium.org/p/chromium/issues/detail?id=1120100\n\t\t\t// Not needed in Chrome 93+\n\n\t\t\tif ( glFormat === 6407 ) glFormat = 32849;\n\t\t\tif ( glFormat === 6408 ) glFormat = 32856;\n\n\t\t}\n\n\t\ttextures.setTexture2D( texture, 0 );\n\n\t\t_gl.copyTexImage2D( 3553, level, glFormat, position.x, position.y, width, height, 0 );\n\n\t\tstate.unbindTexture();\n\n\t};\n\n\tthis.copyTextureToTexture = function ( position, srcTexture, dstTexture, level = 0 ) {\n\n\t\tconst width = srcTexture.image.width;\n\t\tconst height = srcTexture.image.height;\n\t\tconst glFormat = utils.convert( dstTexture.format );\n\t\tconst glType = utils.convert( dstTexture.type );\n\n\t\ttextures.setTexture2D( dstTexture, 0 );\n\n\t\t// As another texture upload may have changed pixelStorei\n\t\t// parameters, make sure they are correct for the dstTexture\n\t\t_gl.pixelStorei( 37440, dstTexture.flipY );\n\t\t_gl.pixelStorei( 37441, dstTexture.premultiplyAlpha );\n\t\t_gl.pixelStorei( 3317, dstTexture.unpackAlignment );\n\n\t\tif ( srcTexture.isDataTexture ) {\n\n\t\t\t_gl.texSubImage2D( 3553, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data );\n\n\t\t} else {\n\n\t\t\tif ( srcTexture.isCompressedTexture ) {\n\n\t\t\t\t_gl.compressedTexSubImage2D( 3553, level, position.x, position.y, srcTexture.mipmaps[ 0 ].width, srcTexture.mipmaps[ 0 ].height, glFormat, srcTexture.mipmaps[ 0 ].data );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.texSubImage2D( 3553, level, position.x, position.y, glFormat, glType, srcTexture.image );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Generate mipmaps only when copying level 0\n\t\tif ( level === 0 && dstTexture.generateMipmaps ) _gl.generateMipmap( 3553 );\n\n\t\tstate.unbindTexture();\n\n\t};\n\n\tthis.copyTextureToTexture3D = function ( sourceBox, position, srcTexture, dstTexture, level = 0 ) {\n\n\t\tif ( _this.isWebGL1Renderer ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tconst width = sourceBox.max.x - sourceBox.min.x + 1;\n\t\tconst height = sourceBox.max.y - sourceBox.min.y + 1;\n\t\tconst depth = sourceBox.max.z - sourceBox.min.z + 1;\n\t\tconst glFormat = utils.convert( dstTexture.format );\n\t\tconst glType = utils.convert( dstTexture.type );\n\t\tlet glTarget;\n\n\t\tif ( dstTexture.isDataTexture3D ) {\n\n\t\t\ttextures.setTexture3D( dstTexture, 0 );\n\t\t\tglTarget = 32879;\n\n\t\t} else if ( dstTexture.isDataTexture2DArray ) {\n\n\t\t\ttextures.setTexture2DArray( dstTexture, 0 );\n\t\t\tglTarget = 35866;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\t_gl.pixelStorei( 37440, dstTexture.flipY );\n\t\t_gl.pixelStorei( 37441, dstTexture.premultiplyAlpha );\n\t\t_gl.pixelStorei( 3317, dstTexture.unpackAlignment );\n\n\t\tconst unpackRowLen = _gl.getParameter( 3314 );\n\t\tconst unpackImageHeight = _gl.getParameter( 32878 );\n\t\tconst unpackSkipPixels = _gl.getParameter( 3316 );\n\t\tconst unpackSkipRows = _gl.getParameter( 3315 );\n\t\tconst unpackSkipImages = _gl.getParameter( 32877 );\n\n\t\tconst image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[ 0 ] : srcTexture.image;\n\n\t\t_gl.pixelStorei( 3314, image.width );\n\t\t_gl.pixelStorei( 32878, image.height );\n\t\t_gl.pixelStorei( 3316, sourceBox.min.x );\n\t\t_gl.pixelStorei( 3315, sourceBox.min.y );\n\t\t_gl.pixelStorei( 32877, sourceBox.min.z );\n\n\t\tif ( srcTexture.isDataTexture || srcTexture.isDataTexture3D ) {\n\n\t\t\t_gl.texSubImage3D( glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image.data );\n\n\t\t} else {\n\n\t\t\tif ( srcTexture.isCompressedTexture ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture.' );\n\t\t\t\t_gl.compressedTexSubImage3D( glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, image.data );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.texSubImage3D( glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image );\n\n\t\t\t}\n\n\t\t}\n\n\t\t_gl.pixelStorei( 3314, unpackRowLen );\n\t\t_gl.pixelStorei( 32878, unpackImageHeight );\n\t\t_gl.pixelStorei( 3316, unpackSkipPixels );\n\t\t_gl.pixelStorei( 3315, unpackSkipRows );\n\t\t_gl.pixelStorei( 32877, unpackSkipImages );\n\n\t\t// Generate mipmaps only when copying level 0\n\t\tif ( level === 0 && dstTexture.generateMipmaps ) _gl.generateMipmap( glTarget );\n\n\t\tstate.unbindTexture();\n\n\t};\n\n\tthis.initTexture = function ( texture ) {\n\n\t\ttextures.setTexture2D( texture, 0 );\n\n\t\tstate.unbindTexture();\n\n\t};\n\n\tthis.resetState = function () {\n\n\t\t_currentActiveCubeFace = 0;\n\t\t_currentActiveMipmapLevel = 0;\n\t\t_currentRenderTarget = null;\n\n\t\tstate.reset();\n\t\tbindingStates.reset();\n\n\t};\n\n\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef\n\n\t}\n\n}\n\nWebGLRenderer.prototype.isWebGLRenderer = true;\n\nclass WebGL1Renderer extends WebGLRenderer {}\n\nWebGL1Renderer.prototype.isWebGL1Renderer = true;\n\nclass FogExp2 {\n\n\tconstructor( color, density = 0.00025 ) {\n\n\t\tthis.name = '';\n\n\t\tthis.color = new Color( color );\n\t\tthis.density = density;\n\n\t}\n\n\tclone() {\n\n\t\treturn new FogExp2( this.color, this.density );\n\n\t}\n\n\ttoJSON( /* meta */ ) {\n\n\t\treturn {\n\t\t\ttype: 'FogExp2',\n\t\t\tcolor: this.color.getHex(),\n\t\t\tdensity: this.density\n\t\t};\n\n\t}\n\n}\n\nFogExp2.prototype.isFogExp2 = true;\n\nclass Fog {\n\n\tconstructor( color, near = 1, far = 1000 ) {\n\n\t\tthis.name = '';\n\n\t\tthis.color = new Color( color );\n\n\t\tthis.near = near;\n\t\tthis.far = far;\n\n\t}\n\n\tclone() {\n\n\t\treturn new Fog( this.color, this.near, this.far );\n\n\t}\n\n\ttoJSON( /* meta */ ) {\n\n\t\treturn {\n\t\t\ttype: 'Fog',\n\t\t\tcolor: this.color.getHex(),\n\t\t\tnear: this.near,\n\t\t\tfar: this.far\n\t\t};\n\n\t}\n\n}\n\nFog.prototype.isFog = true;\n\nclass Scene extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.type = 'Scene';\n\n\t\tthis.background = null;\n\t\tthis.environment = null;\n\t\tthis.fog = null;\n\n\t\tthis.overrideMaterial = null;\n\n\t\tthis.autoUpdate = true; // checked by the renderer\n\n\t\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) ); // eslint-disable-line no-undef\n\n\t\t}\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tif ( source.background !== null ) this.background = source.background.clone();\n\t\tif ( source.environment !== null ) this.environment = source.environment.clone();\n\t\tif ( source.fog !== null ) this.fog = source.fog.clone();\n\n\t\tif ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();\n\n\t\tthis.autoUpdate = source.autoUpdate;\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tif ( this.fog !== null ) data.object.fog = this.fog.toJSON();\n\n\t\treturn data;\n\n\t}\n\n}\n\nScene.prototype.isScene = true;\n\nclass InterleavedBuffer {\n\n\tconstructor( array, stride ) {\n\n\t\tthis.array = array;\n\t\tthis.stride = stride;\n\t\tthis.count = array !== undefined ? array.length / stride : 0;\n\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.updateRange = { offset: 0, count: - 1 };\n\n\t\tthis.version = 0;\n\n\t\tthis.uuid = generateUUID();\n\n\t}\n\n\tonUploadCallback() {}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n\tsetUsage( value ) {\n\n\t\tthis.usage = value;\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.array = new source.array.constructor( source.array );\n\t\tthis.count = source.count;\n\t\tthis.stride = source.stride;\n\t\tthis.usage = source.usage;\n\n\t\treturn this;\n\n\t}\n\n\tcopyAt( index1, attribute, index2 ) {\n\n\t\tindex1 *= this.stride;\n\t\tindex2 *= attribute.stride;\n\n\t\tfor ( let i = 0, l = this.stride; i < l; i ++ ) {\n\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tset( value, offset = 0 ) {\n\n\t\tthis.array.set( value, offset );\n\n\t\treturn this;\n\n\t}\n\n\tclone( data ) {\n\n\t\tif ( data.arrayBuffers === undefined ) {\n\n\t\t\tdata.arrayBuffers = {};\n\n\t\t}\n\n\t\tif ( this.array.buffer._uuid === undefined ) {\n\n\t\t\tthis.array.buffer._uuid = generateUUID();\n\n\t\t}\n\n\t\tif ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {\n\n\t\t\tdata.arrayBuffers[ this.array.buffer._uuid ] = this.array.slice( 0 ).buffer;\n\n\t\t}\n\n\t\tconst array = new this.array.constructor( data.arrayBuffers[ this.array.buffer._uuid ] );\n\n\t\tconst ib = new this.constructor( array, this.stride );\n\t\tib.setUsage( this.usage );\n\n\t\treturn ib;\n\n\t}\n\n\tonUpload( callback ) {\n\n\t\tthis.onUploadCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( data ) {\n\n\t\tif ( data.arrayBuffers === undefined ) {\n\n\t\t\tdata.arrayBuffers = {};\n\n\t\t}\n\n\t\t// generate UUID for array buffer if necessary\n\n\t\tif ( this.array.buffer._uuid === undefined ) {\n\n\t\t\tthis.array.buffer._uuid = generateUUID();\n\n\t\t}\n\n\t\tif ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {\n\n\t\t\tdata.arrayBuffers[ this.array.buffer._uuid ] = Array.prototype.slice.call( new Uint32Array( this.array.buffer ) );\n\n\t\t}\n\n\t\t//\n\n\t\treturn {\n\t\t\tuuid: this.uuid,\n\t\t\tbuffer: this.array.buffer._uuid,\n\t\t\ttype: this.array.constructor.name,\n\t\t\tstride: this.stride\n\t\t};\n\n\t}\n\n}\n\nInterleavedBuffer.prototype.isInterleavedBuffer = true;\n\nconst _vector$6 = /*@__PURE__*/ new Vector3();\n\nclass InterleavedBufferAttribute {\n\n\tconstructor( interleavedBuffer, itemSize, offset, normalized = false ) {\n\n\t\tthis.name = '';\n\n\t\tthis.data = interleavedBuffer;\n\t\tthis.itemSize = itemSize;\n\t\tthis.offset = offset;\n\n\t\tthis.normalized = normalized === true;\n\n\t}\n\n\tget count() {\n\n\t\treturn this.data.count;\n\n\t}\n\n\tget array() {\n\n\t\treturn this.data.array;\n\n\t}\n\n\tset needsUpdate( value ) {\n\n\t\tthis.data.needsUpdate = value;\n\n\t}\n\n\tapplyMatrix4( m ) {\n\n\t\tfor ( let i = 0, l = this.data.count; i < l; i ++ ) {\n\n\t\t\t_vector$6.x = this.getX( i );\n\t\t\t_vector$6.y = this.getY( i );\n\t\t\t_vector$6.z = this.getZ( i );\n\n\t\t\t_vector$6.applyMatrix4( m );\n\n\t\t\tthis.setXYZ( i, _vector$6.x, _vector$6.y, _vector$6.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tapplyNormalMatrix( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$6.x = this.getX( i );\n\t\t\t_vector$6.y = this.getY( i );\n\t\t\t_vector$6.z = this.getZ( i );\n\n\t\t\t_vector$6.applyNormalMatrix( m );\n\n\t\t\tthis.setXYZ( i, _vector$6.x, _vector$6.y, _vector$6.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttransformDirection( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$6.x = this.getX( i );\n\t\t\t_vector$6.y = this.getY( i );\n\t\t\t_vector$6.z = this.getZ( i );\n\n\t\t\t_vector$6.transformDirection( m );\n\n\t\t\tthis.setXYZ( i, _vector$6.x, _vector$6.y, _vector$6.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetX( index, x ) {\n\n\t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\n\n\t\treturn this;\n\n\t}\n\n\tsetY( index, y ) {\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetZ( index, z ) {\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetW( index, w ) {\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n\tgetX( index ) {\n\n\t\treturn this.data.array[ index * this.data.stride + this.offset ];\n\n\t}\n\n\tgetY( index ) {\n\n\t\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\n\n\t}\n\n\tgetZ( index ) {\n\n\t\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\n\n\t}\n\n\tgetW( index ) {\n\n\t\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\n\n\t}\n\n\tsetXY( index, x, y ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetXYZ( index, x, y, z ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\t\tthis.data.array[ index + 2 ] = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetXYZW( index, x, y, z, w ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\t\tthis.data.array[ index + 2 ] = z;\n\t\tthis.data.array[ index + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n\tclone( data ) {\n\n\t\tif ( data === undefined ) {\n\n\t\t\tconsole.log( 'THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.' );\n\n\t\t\tconst array = [];\n\n\t\t\tfor ( let i = 0; i < this.count; i ++ ) {\n\n\t\t\t\tconst index = i * this.data.stride + this.offset;\n\n\t\t\t\tfor ( let j = 0; j < this.itemSize; j ++ ) {\n\n\t\t\t\t\tarray.push( this.data.array[ index + j ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new BufferAttribute( new this.array.constructor( array ), this.itemSize, this.normalized );\n\n\t\t} else {\n\n\t\t\tif ( data.interleavedBuffers === undefined ) {\n\n\t\t\t\tdata.interleavedBuffers = {};\n\n\t\t\t}\n\n\t\t\tif ( data.interleavedBuffers[ this.data.uuid ] === undefined ) {\n\n\t\t\t\tdata.interleavedBuffers[ this.data.uuid ] = this.data.clone( data );\n\n\t\t\t}\n\n\t\t\treturn new InterleavedBufferAttribute( data.interleavedBuffers[ this.data.uuid ], this.itemSize, this.offset, this.normalized );\n\n\t\t}\n\n\t}\n\n\ttoJSON( data ) {\n\n\t\tif ( data === undefined ) {\n\n\t\t\tconsole.log( 'THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.' );\n\n\t\t\tconst array = [];\n\n\t\t\tfor ( let i = 0; i < this.count; i ++ ) {\n\n\t\t\t\tconst index = i * this.data.stride + this.offset;\n\n\t\t\t\tfor ( let j = 0; j < this.itemSize; j ++ ) {\n\n\t\t\t\t\tarray.push( this.data.array[ index + j ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// deinterleave data and save it as an ordinary buffer attribute for now\n\n\t\t\treturn {\n\t\t\t\titemSize: this.itemSize,\n\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\tarray: array,\n\t\t\t\tnormalized: this.normalized\n\t\t\t};\n\n\t\t} else {\n\n\t\t\t// save as true interlaved attribtue\n\n\t\t\tif ( data.interleavedBuffers === undefined ) {\n\n\t\t\t\tdata.interleavedBuffers = {};\n\n\t\t\t}\n\n\t\t\tif ( data.interleavedBuffers[ this.data.uuid ] === undefined ) {\n\n\t\t\t\tdata.interleavedBuffers[ this.data.uuid ] = this.data.toJSON( data );\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tisInterleavedBufferAttribute: true,\n\t\t\t\titemSize: this.itemSize,\n\t\t\t\tdata: this.data.uuid,\n\t\t\t\toffset: this.offset,\n\t\t\t\tnormalized: this.normalized\n\t\t\t};\n\n\t\t}\n\n\t}\n\n}\n\nInterleavedBufferAttribute.prototype.isInterleavedBufferAttribute = true;\n\n/**\n * parameters = {\n *  color: <hex>,\n *  map: new THREE.Texture( <Image> ),\n *  alphaMap: new THREE.Texture( <Image> ),\n *  rotation: <float>,\n *  sizeAttenuation: <bool>\n * }\n */\n\nclass SpriteMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'SpriteMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.rotation = 0;\n\n\t\tthis.sizeAttenuation = true;\n\n\t\tthis.transparent = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.rotation = source.rotation;\n\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\t\treturn this;\n\n\t}\n\n}\n\nSpriteMaterial.prototype.isSpriteMaterial = true;\n\nlet _geometry;\n\nconst _intersectPoint = /*@__PURE__*/ new Vector3();\nconst _worldScale = /*@__PURE__*/ new Vector3();\nconst _mvPosition = /*@__PURE__*/ new Vector3();\n\nconst _alignedPosition = /*@__PURE__*/ new Vector2();\nconst _rotatedPosition = /*@__PURE__*/ new Vector2();\nconst _viewWorldMatrix = /*@__PURE__*/ new Matrix4();\n\nconst _vA = /*@__PURE__*/ new Vector3();\nconst _vB = /*@__PURE__*/ new Vector3();\nconst _vC = /*@__PURE__*/ new Vector3();\n\nconst _uvA = /*@__PURE__*/ new Vector2();\nconst _uvB = /*@__PURE__*/ new Vector2();\nconst _uvC = /*@__PURE__*/ new Vector2();\n\nclass Sprite extends Object3D {\n\n\tconstructor( material ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'Sprite';\n\n\t\tif ( _geometry === undefined ) {\n\n\t\t\t_geometry = new BufferGeometry();\n\n\t\t\tconst float32Array = new Float32Array( [\n\t\t\t\t- 0.5, - 0.5, 0, 0, 0,\n\t\t\t\t0.5, - 0.5, 0, 1, 0,\n\t\t\t\t0.5, 0.5, 0, 1, 1,\n\t\t\t\t- 0.5, 0.5, 0, 0, 1\n\t\t\t] );\n\n\t\t\tconst interleavedBuffer = new InterleavedBuffer( float32Array, 5 );\n\n\t\t\t_geometry.setIndex( [ 0, 1, 2,\t0, 2, 3 ] );\n\t\t\t_geometry.setAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );\n\t\t\t_geometry.setAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );\n\n\t\t}\n\n\t\tthis.geometry = _geometry;\n\t\tthis.material = ( material !== undefined ) ? material : new SpriteMaterial();\n\n\t\tthis.center = new Vector2( 0.5, 0.5 );\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tif ( raycaster.camera === null ) {\n\n\t\t\tconsole.error( 'THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.' );\n\n\t\t}\n\n\t\t_worldScale.setFromMatrixScale( this.matrixWorld );\n\n\t\t_viewWorldMatrix.copy( raycaster.camera.matrixWorld );\n\t\tthis.modelViewMatrix.multiplyMatrices( raycaster.camera.matrixWorldInverse, this.matrixWorld );\n\n\t\t_mvPosition.setFromMatrixPosition( this.modelViewMatrix );\n\n\t\tif ( raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false ) {\n\n\t\t\t_worldScale.multiplyScalar( - _mvPosition.z );\n\n\t\t}\n\n\t\tconst rotation = this.material.rotation;\n\t\tlet sin, cos;\n\n\t\tif ( rotation !== 0 ) {\n\n\t\t\tcos = Math.cos( rotation );\n\t\t\tsin = Math.sin( rotation );\n\n\t\t}\n\n\t\tconst center = this.center;\n\n\t\ttransformVertex( _vA.set( - 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\ttransformVertex( _vB.set( 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\ttransformVertex( _vC.set( 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\n\t\t_uvA.set( 0, 0 );\n\t\t_uvB.set( 1, 0 );\n\t\t_uvC.set( 1, 1 );\n\n\t\t// check first triangle\n\t\tlet intersect = raycaster.ray.intersectTriangle( _vA, _vB, _vC, false, _intersectPoint );\n\n\t\tif ( intersect === null ) {\n\n\t\t\t// check second triangle\n\t\t\ttransformVertex( _vB.set( - 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\t\t_uvB.set( 0, 1 );\n\n\t\t\tintersect = raycaster.ray.intersectTriangle( _vA, _vC, _vB, false, _intersectPoint );\n\t\t\tif ( intersect === null ) {\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst distance = raycaster.ray.origin.distanceTo( _intersectPoint );\n\n\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\t\tintersects.push( {\n\n\t\t\tdistance: distance,\n\t\t\tpoint: _intersectPoint.clone(),\n\t\t\tuv: Triangle.getUV( _intersectPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() ),\n\t\t\tface: null,\n\t\t\tobject: this\n\n\t\t} );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tif ( source.center !== undefined ) this.center.copy( source.center );\n\n\t\tthis.material = source.material;\n\n\t\treturn this;\n\n\t}\n\n}\n\nSprite.prototype.isSprite = true;\n\nfunction transformVertex( vertexPosition, mvPosition, center, scale, sin, cos ) {\n\n\t// compute position in camera space\n\t_alignedPosition.subVectors( vertexPosition, center ).addScalar( 0.5 ).multiply( scale );\n\n\t// to check if rotation is not zero\n\tif ( sin !== undefined ) {\n\n\t\t_rotatedPosition.x = ( cos * _alignedPosition.x ) - ( sin * _alignedPosition.y );\n\t\t_rotatedPosition.y = ( sin * _alignedPosition.x ) + ( cos * _alignedPosition.y );\n\n\t} else {\n\n\t\t_rotatedPosition.copy( _alignedPosition );\n\n\t}\n\n\n\tvertexPosition.copy( mvPosition );\n\tvertexPosition.x += _rotatedPosition.x;\n\tvertexPosition.y += _rotatedPosition.y;\n\n\t// transform to world space\n\tvertexPosition.applyMatrix4( _viewWorldMatrix );\n\n}\n\nconst _v1$2 = /*@__PURE__*/ new Vector3();\nconst _v2$1 = /*@__PURE__*/ new Vector3();\n\nclass LOD extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis._currentLevel = 0;\n\n\t\tthis.type = 'LOD';\n\n\t\tObject.defineProperties( this, {\n\t\t\tlevels: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tisLOD: {\n\t\t\t\tvalue: true,\n\t\t\t}\n\t\t} );\n\n\t\tthis.autoUpdate = true;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source, false );\n\n\t\tconst levels = source.levels;\n\n\t\tfor ( let i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\tconst level = levels[ i ];\n\n\t\t\tthis.addLevel( level.object.clone(), level.distance );\n\n\t\t}\n\n\t\tthis.autoUpdate = source.autoUpdate;\n\n\t\treturn this;\n\n\t}\n\n\taddLevel( object, distance = 0 ) {\n\n\t\tdistance = Math.abs( distance );\n\n\t\tconst levels = this.levels;\n\n\t\tlet l;\n\n\t\tfor ( l = 0; l < levels.length; l ++ ) {\n\n\t\t\tif ( distance < levels[ l ].distance ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tlevels.splice( l, 0, { distance: distance, object: object } );\n\n\t\tthis.add( object );\n\n\t\treturn this;\n\n\t}\n\n\tgetCurrentLevel() {\n\n\t\treturn this._currentLevel;\n\n\t}\n\n\tgetObjectForDistance( distance ) {\n\n\t\tconst levels = this.levels;\n\n\t\tif ( levels.length > 0 ) {\n\n\t\t\tlet i, l;\n\n\t\t\tfor ( i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tif ( distance < levels[ i ].distance ) {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn levels[ i - 1 ].object;\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst levels = this.levels;\n\n\t\tif ( levels.length > 0 ) {\n\n\t\t\t_v1$2.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tconst distance = raycaster.ray.origin.distanceTo( _v1$2 );\n\n\t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\n\n\t\t}\n\n\t}\n\n\tupdate( camera ) {\n\n\t\tconst levels = this.levels;\n\n\t\tif ( levels.length > 1 ) {\n\n\t\t\t_v1$2.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t_v2$1.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tconst distance = _v1$2.distanceTo( _v2$1 ) / camera.zoom;\n\n\t\t\tlevels[ 0 ].object.visible = true;\n\n\t\t\tlet i, l;\n\n\t\t\tfor ( i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tif ( distance >= levels[ i ].distance ) {\n\n\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\n\t\t\t\t\tlevels[ i ].object.visible = true;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._currentLevel = i - 1;\n\n\t\t\tfor ( ; i < l; i ++ ) {\n\n\t\t\t\tlevels[ i ].object.visible = false;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tif ( this.autoUpdate === false ) data.object.autoUpdate = false;\n\n\t\tdata.object.levels = [];\n\n\t\tconst levels = this.levels;\n\n\t\tfor ( let i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\tconst level = levels[ i ];\n\n\t\t\tdata.object.levels.push( {\n\t\t\t\tobject: level.object.uuid,\n\t\t\t\tdistance: level.distance\n\t\t\t} );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nconst _basePosition = /*@__PURE__*/ new Vector3();\n\nconst _skinIndex = /*@__PURE__*/ new Vector4();\nconst _skinWeight = /*@__PURE__*/ new Vector4();\n\nconst _vector$5 = /*@__PURE__*/ new Vector3();\nconst _matrix = /*@__PURE__*/ new Matrix4();\n\nclass SkinnedMesh extends Mesh {\n\n\tconstructor( geometry, material ) {\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'SkinnedMesh';\n\n\t\tthis.bindMode = 'attached';\n\t\tthis.bindMatrix = new Matrix4();\n\t\tthis.bindMatrixInverse = new Matrix4();\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.bindMode = source.bindMode;\n\t\tthis.bindMatrix.copy( source.bindMatrix );\n\t\tthis.bindMatrixInverse.copy( source.bindMatrixInverse );\n\n\t\tthis.skeleton = source.skeleton;\n\n\t\treturn this;\n\n\t}\n\n\tbind( skeleton, bindMatrix ) {\n\n\t\tthis.skeleton = skeleton;\n\n\t\tif ( bindMatrix === undefined ) {\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.skeleton.calculateInverses();\n\n\t\t\tbindMatrix = this.matrixWorld;\n\n\t\t}\n\n\t\tthis.bindMatrix.copy( bindMatrix );\n\t\tthis.bindMatrixInverse.copy( bindMatrix ).invert();\n\n\t}\n\n\tpose() {\n\n\t\tthis.skeleton.pose();\n\n\t}\n\n\tnormalizeSkinWeights() {\n\n\t\tconst vector = new Vector4();\n\n\t\tconst skinWeight = this.geometry.attributes.skinWeight;\n\n\t\tfor ( let i = 0, l = skinWeight.count; i < l; i ++ ) {\n\n\t\t\tvector.x = skinWeight.getX( i );\n\t\t\tvector.y = skinWeight.getY( i );\n\t\t\tvector.z = skinWeight.getZ( i );\n\t\t\tvector.w = skinWeight.getW( i );\n\n\t\t\tconst scale = 1.0 / vector.manhattanLength();\n\n\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\tvector.multiplyScalar( scale );\n\n\t\t\t} else {\n\n\t\t\t\tvector.set( 1, 0, 0, 0 ); // do something reasonable\n\n\t\t\t}\n\n\t\t\tskinWeight.setXYZW( i, vector.x, vector.y, vector.z, vector.w );\n\n\t\t}\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tif ( this.bindMode === 'attached' ) {\n\n\t\t\tthis.bindMatrixInverse.copy( this.matrixWorld ).invert();\n\n\t\t} else if ( this.bindMode === 'detached' ) {\n\n\t\t\tthis.bindMatrixInverse.copy( this.bindMatrix ).invert();\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );\n\n\t\t}\n\n\t}\n\n\tboneTransform( index, target ) {\n\n\t\tconst skeleton = this.skeleton;\n\t\tconst geometry = this.geometry;\n\n\t\t_skinIndex.fromBufferAttribute( geometry.attributes.skinIndex, index );\n\t\t_skinWeight.fromBufferAttribute( geometry.attributes.skinWeight, index );\n\n\t\t_basePosition.copy( target ).applyMatrix4( this.bindMatrix );\n\n\t\ttarget.set( 0, 0, 0 );\n\n\t\tfor ( let i = 0; i < 4; i ++ ) {\n\n\t\t\tconst weight = _skinWeight.getComponent( i );\n\n\t\t\tif ( weight !== 0 ) {\n\n\t\t\t\tconst boneIndex = _skinIndex.getComponent( i );\n\n\t\t\t\t_matrix.multiplyMatrices( skeleton.bones[ boneIndex ].matrixWorld, skeleton.boneInverses[ boneIndex ] );\n\n\t\t\t\ttarget.addScaledVector( _vector$5.copy( _basePosition ).applyMatrix4( _matrix ), weight );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn target.applyMatrix4( this.bindMatrixInverse );\n\n\t}\n\n}\n\nSkinnedMesh.prototype.isSkinnedMesh = true;\n\nclass Bone extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.type = 'Bone';\n\n\t}\n\n}\n\nBone.prototype.isBone = true;\n\nclass DataTexture extends Texture {\n\n\tconstructor( data = null, width = 1, height = 1, format, type, mapping, wrapS, wrapT, magFilter = NearestFilter, minFilter = NearestFilter, anisotropy, encoding ) {\n\n\t\tsuper( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.image = { data: data, width: width, height: height };\n\n\t\tthis.magFilter = magFilter;\n\t\tthis.minFilter = minFilter;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.unpackAlignment = 1;\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n}\n\nDataTexture.prototype.isDataTexture = true;\n\nconst _offsetMatrix = /*@__PURE__*/ new Matrix4();\nconst _identityMatrix = /*@__PURE__*/ new Matrix4();\n\nclass Skeleton {\n\n\tconstructor( bones = [], boneInverses = [] ) {\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.bones = bones.slice( 0 );\n\t\tthis.boneInverses = boneInverses;\n\t\tthis.boneMatrices = null;\n\n\t\tthis.boneTexture = null;\n\t\tthis.boneTextureSize = 0;\n\n\t\tthis.frame = - 1;\n\n\t\tthis.init();\n\n\t}\n\n\tinit() {\n\n\t\tconst bones = this.bones;\n\t\tconst boneInverses = this.boneInverses;\n\n\t\tthis.boneMatrices = new Float32Array( bones.length * 16 );\n\n\t\t// calculate inverse bone matrices if necessary\n\n\t\tif ( boneInverses.length === 0 ) {\n\n\t\t\tthis.calculateInverses();\n\n\t\t} else {\n\n\t\t\t// handle special case\n\n\t\t\tif ( bones.length !== boneInverses.length ) {\n\n\t\t\t\tconsole.warn( 'THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.' );\n\n\t\t\t\tthis.boneInverses = [];\n\n\t\t\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\t\tthis.boneInverses.push( new Matrix4() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tcalculateInverses() {\n\n\t\tthis.boneInverses.length = 0;\n\n\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tconst inverse = new Matrix4();\n\n\t\t\tif ( this.bones[ i ] ) {\n\n\t\t\t\tinverse.copy( this.bones[ i ].matrixWorld ).invert();\n\n\t\t\t}\n\n\t\t\tthis.boneInverses.push( inverse );\n\n\t\t}\n\n\t}\n\n\tpose() {\n\n\t\t// recover the bind-time world matrices\n\n\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tconst bone = this.bones[ i ];\n\n\t\t\tif ( bone ) {\n\n\t\t\t\tbone.matrixWorld.copy( this.boneInverses[ i ] ).invert();\n\n\t\t\t}\n\n\t\t}\n\n\t\t// compute the local matrices, positions, rotations and scales\n\n\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tconst bone = this.bones[ i ];\n\n\t\t\tif ( bone ) {\n\n\t\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t\tbone.matrix.copy( bone.parent.matrixWorld ).invert();\n\t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\n\n\t\t\t\t}\n\n\t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tupdate() {\n\n\t\tconst bones = this.bones;\n\t\tconst boneInverses = this.boneInverses;\n\t\tconst boneMatrices = this.boneMatrices;\n\t\tconst boneTexture = this.boneTexture;\n\n\t\t// flatten bone matrices to array\n\n\t\tfor ( let i = 0, il = bones.length; i < il; i ++ ) {\n\n\t\t\t// compute the offset between the current and the original transform\n\n\t\t\tconst matrix = bones[ i ] ? bones[ i ].matrixWorld : _identityMatrix;\n\n\t\t\t_offsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );\n\t\t\t_offsetMatrix.toArray( boneMatrices, i * 16 );\n\n\t\t}\n\n\t\tif ( boneTexture !== null ) {\n\n\t\t\tboneTexture.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n\tclone() {\n\n\t\treturn new Skeleton( this.bones, this.boneInverses );\n\n\t}\n\n\tcomputeBoneTexture() {\n\n\t\t// layout (1 matrix = 4 pixels)\n\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\n\t\tlet size = Math.sqrt( this.bones.length * 4 ); // 4 pixels needed for 1 matrix\n\t\tsize = ceilPowerOfTwo( size );\n\t\tsize = Math.max( size, 4 );\n\n\t\tconst boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel\n\t\tboneMatrices.set( this.boneMatrices ); // copy current values\n\n\t\tconst boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );\n\n\t\tthis.boneMatrices = boneMatrices;\n\t\tthis.boneTexture = boneTexture;\n\t\tthis.boneTextureSize = size;\n\n\t\treturn this;\n\n\t}\n\n\tgetBoneByName( name ) {\n\n\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tconst bone = this.bones[ i ];\n\n\t\t\tif ( bone.name === name ) {\n\n\t\t\t\treturn bone;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn undefined;\n\n\t}\n\n\tdispose( ) {\n\n\t\tif ( this.boneTexture !== null ) {\n\n\t\t\tthis.boneTexture.dispose();\n\n\t\t\tthis.boneTexture = null;\n\n\t\t}\n\n\t}\n\n\tfromJSON( json, bones ) {\n\n\t\tthis.uuid = json.uuid;\n\n\t\tfor ( let i = 0, l = json.bones.length; i < l; i ++ ) {\n\n\t\t\tconst uuid = json.bones[ i ];\n\t\t\tlet bone = bones[ uuid ];\n\n\t\t\tif ( bone === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Skeleton: No bone found with UUID:', uuid );\n\t\t\t\tbone = new Bone();\n\n\t\t\t}\n\n\t\t\tthis.bones.push( bone );\n\t\t\tthis.boneInverses.push( new Matrix4().fromArray( json.boneInverses[ i ] ) );\n\n\t\t}\n\n\t\tthis.init();\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Skeleton',\n\t\t\t\tgenerator: 'Skeleton.toJSON'\n\t\t\t},\n\t\t\tbones: [],\n\t\t\tboneInverses: []\n\t\t};\n\n\t\tdata.uuid = this.uuid;\n\n\t\tconst bones = this.bones;\n\t\tconst boneInverses = this.boneInverses;\n\n\t\tfor ( let i = 0, l = bones.length; i < l; i ++ ) {\n\n\t\t\tconst bone = bones[ i ];\n\t\t\tdata.bones.push( bone.uuid );\n\n\t\t\tconst boneInverse = boneInverses[ i ];\n\t\t\tdata.boneInverses.push( boneInverse.toArray() );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nclass InstancedBufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized, meshPerAttribute = 1 ) {\n\n\t\tif ( typeof normalized === 'number' ) {\n\n\t\t\tmeshPerAttribute = normalized;\n\n\t\t\tnormalized = false;\n\n\t\t\tconsole.error( 'THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.' );\n\n\t\t}\n\n\t\tsuper( array, itemSize, normalized );\n\n\t\tthis.meshPerAttribute = meshPerAttribute;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.meshPerAttribute = this.meshPerAttribute;\n\n\t\tdata.isInstancedBufferAttribute = true;\n\n\t\treturn data;\n\n\t}\n\n}\n\nInstancedBufferAttribute.prototype.isInstancedBufferAttribute = true;\n\nconst _instanceLocalMatrix = /*@__PURE__*/ new Matrix4();\nconst _instanceWorldMatrix = /*@__PURE__*/ new Matrix4();\n\nconst _instanceIntersects = [];\n\nconst _mesh = /*@__PURE__*/ new Mesh();\n\nclass InstancedMesh extends Mesh {\n\n\tconstructor( geometry, material, count ) {\n\n\t\tsuper( geometry, material );\n\n\t\tthis.instanceMatrix = new InstancedBufferAttribute( new Float32Array( count * 16 ), 16 );\n\t\tthis.instanceColor = null;\n\n\t\tthis.count = count;\n\n\t\tthis.frustumCulled = false;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.instanceMatrix.copy( source.instanceMatrix );\n\n\t\tif ( source.instanceColor !== null ) this.instanceColor = source.instanceColor.clone();\n\n\t\tthis.count = source.count;\n\n\t\treturn this;\n\n\t}\n\n\tgetColorAt( index, color ) {\n\n\t\tcolor.fromArray( this.instanceColor.array, index * 3 );\n\n\t}\n\n\tgetMatrixAt( index, matrix ) {\n\n\t\tmatrix.fromArray( this.instanceMatrix.array, index * 16 );\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst matrixWorld = this.matrixWorld;\n\t\tconst raycastTimes = this.count;\n\n\t\t_mesh.geometry = this.geometry;\n\t\t_mesh.material = this.material;\n\n\t\tif ( _mesh.material === undefined ) return;\n\n\t\tfor ( let instanceId = 0; instanceId < raycastTimes; instanceId ++ ) {\n\n\t\t\t// calculate the world matrix for each instance\n\n\t\t\tthis.getMatrixAt( instanceId, _instanceLocalMatrix );\n\n\t\t\t_instanceWorldMatrix.multiplyMatrices( matrixWorld, _instanceLocalMatrix );\n\n\t\t\t// the mesh represents this single instance\n\n\t\t\t_mesh.matrixWorld = _instanceWorldMatrix;\n\n\t\t\t_mesh.raycast( raycaster, _instanceIntersects );\n\n\t\t\t// process the result of raycast\n\n\t\t\tfor ( let i = 0, l = _instanceIntersects.length; i < l; i ++ ) {\n\n\t\t\t\tconst intersect = _instanceIntersects[ i ];\n\t\t\t\tintersect.instanceId = instanceId;\n\t\t\t\tintersect.object = this;\n\t\t\t\tintersects.push( intersect );\n\n\t\t\t}\n\n\t\t\t_instanceIntersects.length = 0;\n\n\t\t}\n\n\t}\n\n\tsetColorAt( index, color ) {\n\n\t\tif ( this.instanceColor === null ) {\n\n\t\t\tthis.instanceColor = new InstancedBufferAttribute( new Float32Array( this.instanceMatrix.count * 3 ), 3 );\n\n\t\t}\n\n\t\tcolor.toArray( this.instanceColor.array, index * 3 );\n\n\t}\n\n\tsetMatrixAt( index, matrix ) {\n\n\t\tmatrix.toArray( this.instanceMatrix.array, index * 16 );\n\n\t}\n\n\tupdateMorphTargets() {\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n}\n\nInstancedMesh.prototype.isInstancedMesh = true;\n\n/**\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *\n *  linewidth: <float>,\n *  linecap: \"round\",\n *  linejoin: \"round\"\n * }\n */\n\nclass LineBasicMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'LineBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.linewidth = 1;\n\t\tthis.linecap = 'round';\n\t\tthis.linejoin = 'round';\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.linewidth = source.linewidth;\n\t\tthis.linecap = source.linecap;\n\t\tthis.linejoin = source.linejoin;\n\n\t\treturn this;\n\n\t}\n\n}\n\nLineBasicMaterial.prototype.isLineBasicMaterial = true;\n\nconst _start$1 = /*@__PURE__*/ new Vector3();\nconst _end$1 = /*@__PURE__*/ new Vector3();\nconst _inverseMatrix$1 = /*@__PURE__*/ new Matrix4();\nconst _ray$1 = /*@__PURE__*/ new Ray();\nconst _sphere$1 = /*@__PURE__*/ new Sphere();\n\nclass Line extends Object3D {\n\n\tconstructor( geometry = new BufferGeometry(), material = new LineBasicMaterial() ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'Line';\n\n\t\tthis.geometry = geometry;\n\t\tthis.material = material;\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.material = source.material;\n\t\tthis.geometry = source.geometry;\n\n\t\treturn this;\n\n\t}\n\n\tcomputeLineDistances() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t// we assume non-indexed geometry\n\n\t\t\tif ( geometry.index === null ) {\n\n\t\t\t\tconst positionAttribute = geometry.attributes.position;\n\t\t\t\tconst lineDistances = [ 0 ];\n\n\t\t\t\tfor ( let i = 1, l = positionAttribute.count; i < l; i ++ ) {\n\n\t\t\t\t\t_start$1.fromBufferAttribute( positionAttribute, i - 1 );\n\t\t\t\t\t_end$1.fromBufferAttribute( positionAttribute, i );\n\n\t\t\t\t\tlineDistances[ i ] = lineDistances[ i - 1 ];\n\t\t\t\t\tlineDistances[ i ] += _start$1.distanceTo( _end$1 );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t\t}\n\n\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\tconsole.error( 'THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst geometry = this.geometry;\n\t\tconst matrixWorld = this.matrixWorld;\n\t\tconst threshold = raycaster.params.Line.threshold;\n\t\tconst drawRange = geometry.drawRange;\n\n\t\t// Checking boundingSphere distance to ray\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t_sphere$1.copy( geometry.boundingSphere );\n\t\t_sphere$1.applyMatrix4( matrixWorld );\n\t\t_sphere$1.radius += threshold;\n\n\t\tif ( raycaster.ray.intersectsSphere( _sphere$1 ) === false ) return;\n\n\t\t//\n\n\t\t_inverseMatrix$1.copy( matrixWorld ).invert();\n\t\t_ray$1.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$1 );\n\n\t\tconst localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\tconst localThresholdSq = localThreshold * localThreshold;\n\n\t\tconst vStart = new Vector3();\n\t\tconst vEnd = new Vector3();\n\t\tconst interSegment = new Vector3();\n\t\tconst interRay = new Vector3();\n\t\tconst step = this.isLineSegments ? 2 : 1;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tconst index = geometry.index;\n\t\t\tconst attributes = geometry.attributes;\n\t\t\tconst positionAttribute = attributes.position;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\t\tconst end = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\tfor ( let i = start, l = end - 1; i < l; i += step ) {\n\n\t\t\t\t\tconst a = index.getX( i );\n\t\t\t\t\tconst b = index.getX( i + 1 );\n\n\t\t\t\t\tvStart.fromBufferAttribute( positionAttribute, a );\n\t\t\t\t\tvEnd.fromBufferAttribute( positionAttribute, b );\n\n\t\t\t\t\tconst distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\tif ( distSq > localThresholdSq ) continue;\n\n\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\tconst distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\tface: null,\n\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\t\tconst end = Math.min( positionAttribute.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\tfor ( let i = start, l = end - 1; i < l; i += step ) {\n\n\t\t\t\t\tvStart.fromBufferAttribute( positionAttribute, i );\n\t\t\t\t\tvEnd.fromBufferAttribute( positionAttribute, i + 1 );\n\n\t\t\t\t\tconst distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\t\tif ( distSq > localThresholdSq ) continue;\n\n\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\t\tconst distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\t\tintersects.push( {\n\n\t\t\t\t\t\tdistance: distance,\n\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\t\tindex: i,\n\t\t\t\t\t\tface: null,\n\t\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\t\tobject: this\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\tconsole.error( 'THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t}\n\n\t}\n\n\tupdateMorphTargets() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tconst morphAttributes = geometry.morphAttributes;\n\t\t\tconst keys = Object.keys( morphAttributes );\n\n\t\t\tif ( keys.length > 0 ) {\n\n\t\t\t\tconst morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\tfor ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\tconst name = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst morphTargets = geometry.morphTargets;\n\n\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nLine.prototype.isLine = true;\n\nconst _start = /*@__PURE__*/ new Vector3();\nconst _end = /*@__PURE__*/ new Vector3();\n\nclass LineSegments extends Line {\n\n\tconstructor( geometry, material ) {\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'LineSegments';\n\n\t}\n\n\tcomputeLineDistances() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\t// we assume non-indexed geometry\n\n\t\t\tif ( geometry.index === null ) {\n\n\t\t\t\tconst positionAttribute = geometry.attributes.position;\n\t\t\t\tconst lineDistances = [];\n\n\t\t\t\tfor ( let i = 0, l = positionAttribute.count; i < l; i += 2 ) {\n\n\t\t\t\t\t_start.fromBufferAttribute( positionAttribute, i );\n\t\t\t\t\t_end.fromBufferAttribute( positionAttribute, i + 1 );\n\n\t\t\t\t\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\n\t\t\t\t\tlineDistances[ i + 1 ] = lineDistances[ i ] + _start.distanceTo( _end );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t\t}\n\n\t\t} else if ( geometry.isGeometry ) {\n\n\t\t\tconsole.error( 'THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nLineSegments.prototype.isLineSegments = true;\n\nclass LineLoop extends Line {\n\n\tconstructor( geometry, material ) {\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'LineLoop';\n\n\t}\n\n}\n\nLineLoop.prototype.isLineLoop = true;\n\n/**\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *  map: new THREE.Texture( <Image> ),\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  size: <float>,\n *  sizeAttenuation: <bool>\n *\n * }\n */\n\nclass PointsMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'PointsMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.size = 1;\n\t\tthis.sizeAttenuation = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.size = source.size;\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\t\treturn this;\n\n\t}\n\n}\n\nPointsMaterial.prototype.isPointsMaterial = true;\n\nconst _inverseMatrix = /*@__PURE__*/ new Matrix4();\nconst _ray = /*@__PURE__*/ new Ray();\nconst _sphere = /*@__PURE__*/ new Sphere();\nconst _position$2 = /*@__PURE__*/ new Vector3();\n\nclass Points extends Object3D {\n\n\tconstructor( geometry = new BufferGeometry(), material = new PointsMaterial() ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'Points';\n\n\t\tthis.geometry = geometry;\n\t\tthis.material = material;\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.material = source.material;\n\t\tthis.geometry = source.geometry;\n\n\t\treturn this;\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst geometry = this.geometry;\n\t\tconst matrixWorld = this.matrixWorld;\n\t\tconst threshold = raycaster.params.Points.threshold;\n\t\tconst drawRange = geometry.drawRange;\n\n\t\t// Checking boundingSphere distance to ray\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t_sphere.copy( geometry.boundingSphere );\n\t\t_sphere.applyMatrix4( matrixWorld );\n\t\t_sphere.radius += threshold;\n\n\t\tif ( raycaster.ray.intersectsSphere( _sphere ) === false ) return;\n\n\t\t//\n\n\t\t_inverseMatrix.copy( matrixWorld ).invert();\n\t\t_ray.copy( raycaster.ray ).applyMatrix4( _inverseMatrix );\n\n\t\tconst localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\tconst localThresholdSq = localThreshold * localThreshold;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tconst index = geometry.index;\n\t\t\tconst attributes = geometry.attributes;\n\t\t\tconst positionAttribute = attributes.position;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\t\tconst end = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\tfor ( let i = start, il = end; i < il; i ++ ) {\n\n\t\t\t\t\tconst a = index.getX( i );\n\n\t\t\t\t\t_position$2.fromBufferAttribute( positionAttribute, a );\n\n\t\t\t\t\ttestPoint( _position$2, a, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\t\tconst end = Math.min( positionAttribute.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\tfor ( let i = start, l = end; i < l; i ++ ) {\n\n\t\t\t\t\t_position$2.fromBufferAttribute( positionAttribute, i );\n\n\t\t\t\t\ttestPoint( _position$2, i, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t}\n\n\t}\n\n\tupdateMorphTargets() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tif ( geometry.isBufferGeometry ) {\n\n\t\t\tconst morphAttributes = geometry.morphAttributes;\n\t\t\tconst keys = Object.keys( morphAttributes );\n\n\t\t\tif ( keys.length > 0 ) {\n\n\t\t\t\tconst morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\t\tfor ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\tconst name = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst morphTargets = geometry.morphTargets;\n\n\t\t\tif ( morphTargets !== undefined && morphTargets.length > 0 ) {\n\n\t\t\t\tconsole.error( 'THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.' );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nPoints.prototype.isPoints = true;\n\nfunction testPoint( point, index, localThresholdSq, matrixWorld, raycaster, intersects, object ) {\n\n\tconst rayPointDistanceSq = _ray.distanceSqToPoint( point );\n\n\tif ( rayPointDistanceSq < localThresholdSq ) {\n\n\t\tconst intersectPoint = new Vector3();\n\n\t\t_ray.closestPointToPoint( point, intersectPoint );\n\t\tintersectPoint.applyMatrix4( matrixWorld );\n\n\t\tconst distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\n\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\t\tintersects.push( {\n\n\t\t\tdistance: distance,\n\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\n\t\t\tpoint: intersectPoint,\n\t\t\tindex: index,\n\t\t\tface: null,\n\t\t\tobject: object\n\n\t\t} );\n\n\t}\n\n}\n\nclass VideoTexture extends Texture {\n\n\tconstructor( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tsuper( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.format = format !== undefined ? format : RGBFormat;\n\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearFilter;\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\n\t\tthis.generateMipmaps = false;\n\n\t\tconst scope = this;\n\n\t\tfunction updateVideo() {\n\n\t\t\tscope.needsUpdate = true;\n\t\t\tvideo.requestVideoFrameCallback( updateVideo );\n\n\t\t}\n\n\t\tif ( 'requestVideoFrameCallback' in video ) {\n\n\t\t\tvideo.requestVideoFrameCallback( updateVideo );\n\n\t\t}\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.image ).copy( this );\n\n\t}\n\n\tupdate() {\n\n\t\tconst video = this.image;\n\t\tconst hasVideoFrameCallback = 'requestVideoFrameCallback' in video;\n\n\t\tif ( hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA ) {\n\n\t\t\tthis.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n}\n\nVideoTexture.prototype.isVideoTexture = true;\n\nclass CompressedTexture extends Texture {\n\n\tconstructor( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\t\tsuper( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\t\tthis.image = { width: width, height: height };\n\t\tthis.mipmaps = mipmaps;\n\n\t\t// no flipping for cube textures\n\t\t// (also flipping doesn't work for compressed textures )\n\n\t\tthis.flipY = false;\n\n\t\t// can't generate mipmaps for compressed textures\n\t\t// mips must be embedded in DDS files\n\n\t\tthis.generateMipmaps = false;\n\n\t}\n\n}\n\nCompressedTexture.prototype.isCompressedTexture = true;\n\nclass CanvasTexture extends Texture {\n\n\tconstructor( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tsuper( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n}\n\nCanvasTexture.prototype.isCanvasTexture = true;\n\nclass CircleGeometry extends BufferGeometry {\n\n\tconstructor( radius = 1, segments = 8, thetaStart = 0, thetaLength = Math.PI * 2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'CircleGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tsegments: segments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tsegments = Math.max( 3, segments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tconst vertex = new Vector3();\n\t\tconst uv = new Vector2();\n\n\t\t// center point\n\n\t\tvertices.push( 0, 0, 0 );\n\t\tnormals.push( 0, 0, 1 );\n\t\tuvs.push( 0.5, 0.5 );\n\n\t\tfor ( let s = 0, i = 3; s <= segments; s ++, i += 3 ) {\n\n\t\t\tconst segment = thetaStart + s / segments * thetaLength;\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal\n\n\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t// uvs\n\n\t\t\tuv.x = ( vertices[ i ] / radius + 1 ) / 2;\n\t\t\tuv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;\n\n\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( let i = 1; i <= segments; i ++ ) {\n\n\t\t\tindices.push( i, i + 1, 0 );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new CircleGeometry( data.radius, data.segments, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\nclass CylinderGeometry extends BufferGeometry {\n\n\tconstructor( radiusTop = 1, radiusBottom = 1, height = 1, radialSegments = 8, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2 ) {\n\n\t\tsuper();\n\t\tthis.type = 'CylinderGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradiusTop: radiusTop,\n\t\t\tradiusBottom: radiusBottom,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tconst scope = this;\n\n\t\tradialSegments = Math.floor( radialSegments );\n\t\theightSegments = Math.floor( heightSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tlet index = 0;\n\t\tconst indexArray = [];\n\t\tconst halfHeight = height / 2;\n\t\tlet groupStart = 0;\n\n\t\t// generate geometry\n\n\t\tgenerateTorso();\n\n\t\tif ( openEnded === false ) {\n\n\t\t\tif ( radiusTop > 0 ) generateCap( true );\n\t\t\tif ( radiusBottom > 0 ) generateCap( false );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\tfunction generateTorso() {\n\n\t\t\tconst normal = new Vector3();\n\t\t\tconst vertex = new Vector3();\n\n\t\t\tlet groupCount = 0;\n\n\t\t\t// this will be used to calculate the normal\n\t\t\tconst slope = ( radiusBottom - radiusTop ) / height;\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( let y = 0; y <= heightSegments; y ++ ) {\n\n\t\t\t\tconst indexRow = [];\n\n\t\t\t\tconst v = y / heightSegments;\n\n\t\t\t\t// calculate the radius of the current row\n\n\t\t\t\tconst radius = v * ( radiusBottom - radiusTop ) + radiusTop;\n\n\t\t\t\tfor ( let x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\t\tconst u = x / radialSegments;\n\n\t\t\t\t\tconst theta = u * thetaLength + thetaStart;\n\n\t\t\t\t\tconst sinTheta = Math.sin( theta );\n\t\t\t\t\tconst cosTheta = Math.cos( theta );\n\n\t\t\t\t\t// vertex\n\n\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\tvertex.y = - v * height + halfHeight;\n\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t// normal\n\n\t\t\t\t\tnormal.set( sinTheta, slope, cosTheta ).normalize();\n\t\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t\t// uv\n\n\t\t\t\t\tuvs.push( u, 1 - v );\n\n\t\t\t\t\t// save index of vertex in respective row\n\n\t\t\t\t\tindexRow.push( index ++ );\n\n\t\t\t\t}\n\n\t\t\t\t// now save vertices of the row in our index array\n\n\t\t\t\tindexArray.push( indexRow );\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( let x = 0; x < radialSegments; x ++ ) {\n\n\t\t\t\tfor ( let y = 0; y < heightSegments; y ++ ) {\n\n\t\t\t\t\t// we use the index array to access the correct indices\n\n\t\t\t\t\tconst a = indexArray[ y ][ x ];\n\t\t\t\t\tconst b = indexArray[ y + 1 ][ x ];\n\t\t\t\t\tconst c = indexArray[ y + 1 ][ x + 1 ];\n\t\t\t\t\tconst d = indexArray[ y ][ x + 1 ];\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t\t// update group counter\n\n\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, 0 );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t\tfunction generateCap( top ) {\n\n\t\t\t// save the index of the first center vertex\n\t\t\tconst centerIndexStart = index;\n\n\t\t\tconst uv = new Vector2();\n\t\t\tconst vertex = new Vector3();\n\n\t\t\tlet groupCount = 0;\n\n\t\t\tconst radius = ( top === true ) ? radiusTop : radiusBottom;\n\t\t\tconst sign = ( top === true ) ? 1 : - 1;\n\n\t\t\t// first we generate the center vertex data of the cap.\n\t\t\t// because the geometry needs one set of uvs per face,\n\t\t\t// we must generate a center vertex per face/segment\n\n\t\t\tfor ( let x = 1; x <= radialSegments; x ++ ) {\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertices.push( 0, halfHeight * sign, 0 );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( 0.5, 0.5 );\n\n\t\t\t\t// increase index\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// save the index of the last center vertex\n\t\t\tconst centerIndexEnd = index;\n\n\t\t\t// now we generate the surrounding vertices, normals and uvs\n\n\t\t\tfor ( let x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\tconst u = x / radialSegments;\n\t\t\t\tconst theta = u * thetaLength + thetaStart;\n\n\t\t\t\tconst cosTheta = Math.cos( theta );\n\t\t\t\tconst sinTheta = Math.sin( theta );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\tvertex.y = halfHeight * sign;\n\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\n\t\t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t// increase index\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( let x = 0; x < radialSegments; x ++ ) {\n\n\t\t\t\tconst c = centerIndexStart + x;\n\t\t\t\tconst i = centerIndexEnd + x;\n\n\t\t\t\tif ( top === true ) {\n\n\t\t\t\t\t// face top\n\n\t\t\t\t\tindices.push( i, i + 1, c );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// face bottom\n\n\t\t\t\t\tindices.push( i + 1, i, c );\n\n\t\t\t\t}\n\n\t\t\t\tgroupCount += 3;\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new CylinderGeometry( data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\nclass ConeGeometry extends CylinderGeometry {\n\n\tconstructor( radius = 1, height = 1, radialSegments = 8, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2 ) {\n\n\t\tsuper( 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\t\tthis.type = 'ConeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new ConeGeometry( data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\nclass PolyhedronGeometry extends BufferGeometry {\n\n\tconstructor( vertices = [], indices = [], radius = 1, detail = 0 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'PolyhedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tvertices: vertices,\n\t\t\tindices: indices,\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\t// default buffer data\n\n\t\tconst vertexBuffer = [];\n\t\tconst uvBuffer = [];\n\n\t\t// the subdivision creates the vertex buffer data\n\n\t\tsubdivide( detail );\n\n\t\t// all vertices should lie on a conceptual sphere with a given radius\n\n\t\tapplyRadius( radius );\n\n\t\t// finally, create the uv data\n\n\t\tgenerateUVs();\n\n\t\t// build non-indexed geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );\n\n\t\tif ( detail === 0 ) {\n\n\t\t\tthis.computeVertexNormals(); // flat normals\n\n\t\t} else {\n\n\t\t\tthis.normalizeNormals(); // smooth normals\n\n\t\t}\n\n\t\t// helper functions\n\n\t\tfunction subdivide( detail ) {\n\n\t\t\tconst a = new Vector3();\n\t\t\tconst b = new Vector3();\n\t\t\tconst c = new Vector3();\n\n\t\t\t// iterate over all faces and apply a subdivison with the given detail value\n\n\t\t\tfor ( let i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t\t// get the vertices of the face\n\n\t\t\t\tgetVertexByIndex( indices[ i + 0 ], a );\n\t\t\t\tgetVertexByIndex( indices[ i + 1 ], b );\n\t\t\t\tgetVertexByIndex( indices[ i + 2 ], c );\n\n\t\t\t\t// perform subdivision\n\n\t\t\t\tsubdivideFace( a, b, c, detail );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction subdivideFace( a, b, c, detail ) {\n\n\t\t\tconst cols = detail + 1;\n\n\t\t\t// we use this multidimensional array as a data structure for creating the subdivision\n\n\t\t\tconst v = [];\n\n\t\t\t// construct all of the vertices for this subdivision\n\n\t\t\tfor ( let i = 0; i <= cols; i ++ ) {\n\n\t\t\t\tv[ i ] = [];\n\n\t\t\t\tconst aj = a.clone().lerp( c, i / cols );\n\t\t\t\tconst bj = b.clone().lerp( c, i / cols );\n\n\t\t\t\tconst rows = cols - i;\n\n\t\t\t\tfor ( let j = 0; j <= rows; j ++ ) {\n\n\t\t\t\t\tif ( j === 0 && i === cols ) {\n\n\t\t\t\t\t\tv[ i ][ j ] = aj;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tv[ i ][ j ] = aj.clone().lerp( bj, j / rows );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// construct all of the faces\n\n\t\t\tfor ( let i = 0; i < cols; i ++ ) {\n\n\t\t\t\tfor ( let j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\n\n\t\t\t\t\tconst k = Math.floor( j / 2 );\n\n\t\t\t\t\tif ( j % 2 === 0 ) {\n\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\t\t\t\t\t\tpushVertex( v[ i ][ k ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction applyRadius( radius ) {\n\n\t\t\tconst vertex = new Vector3();\n\n\t\t\t// iterate over the entire buffer and apply the radius to each vertex\n\n\t\t\tfor ( let i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\tvertex.normalize().multiplyScalar( radius );\n\n\t\t\t\tvertexBuffer[ i + 0 ] = vertex.x;\n\t\t\t\tvertexBuffer[ i + 1 ] = vertex.y;\n\t\t\t\tvertexBuffer[ i + 2 ] = vertex.z;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateUVs() {\n\n\t\t\tconst vertex = new Vector3();\n\n\t\t\tfor ( let i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\tconst u = azimuth( vertex ) / 2 / Math.PI + 0.5;\n\t\t\t\tconst v = inclination( vertex ) / Math.PI + 0.5;\n\t\t\t\tuvBuffer.push( u, 1 - v );\n\n\t\t\t}\n\n\t\t\tcorrectUVs();\n\n\t\t\tcorrectSeam();\n\n\t\t}\n\n\t\tfunction correctSeam() {\n\n\t\t\t// handle case when face straddles the seam, see #3269\n\n\t\t\tfor ( let i = 0; i < uvBuffer.length; i += 6 ) {\n\n\t\t\t\t// uv data of a single face\n\n\t\t\t\tconst x0 = uvBuffer[ i + 0 ];\n\t\t\t\tconst x1 = uvBuffer[ i + 2 ];\n\t\t\t\tconst x2 = uvBuffer[ i + 4 ];\n\n\t\t\t\tconst max = Math.max( x0, x1, x2 );\n\t\t\t\tconst min = Math.min( x0, x1, x2 );\n\n\t\t\t\t// 0.9 is somewhat arbitrary\n\n\t\t\t\tif ( max > 0.9 && min < 0.1 ) {\n\n\t\t\t\t\tif ( x0 < 0.2 ) uvBuffer[ i + 0 ] += 1;\n\t\t\t\t\tif ( x1 < 0.2 ) uvBuffer[ i + 2 ] += 1;\n\t\t\t\t\tif ( x2 < 0.2 ) uvBuffer[ i + 4 ] += 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction pushVertex( vertex ) {\n\n\t\t\tvertexBuffer.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t\tfunction getVertexByIndex( index, vertex ) {\n\n\t\t\tconst stride = index * 3;\n\n\t\t\tvertex.x = vertices[ stride + 0 ];\n\t\t\tvertex.y = vertices[ stride + 1 ];\n\t\t\tvertex.z = vertices[ stride + 2 ];\n\n\t\t}\n\n\t\tfunction correctUVs() {\n\n\t\t\tconst a = new Vector3();\n\t\t\tconst b = new Vector3();\n\t\t\tconst c = new Vector3();\n\n\t\t\tconst centroid = new Vector3();\n\n\t\t\tconst uvA = new Vector2();\n\t\t\tconst uvB = new Vector2();\n\t\t\tconst uvC = new Vector2();\n\n\t\t\tfor ( let i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {\n\n\t\t\t\ta.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );\n\t\t\t\tb.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );\n\t\t\t\tc.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );\n\n\t\t\t\tuvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );\n\t\t\t\tuvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );\n\t\t\t\tuvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );\n\n\t\t\t\tcentroid.copy( a ).add( b ).add( c ).divideScalar( 3 );\n\n\t\t\t\tconst azi = azimuth( centroid );\n\n\t\t\t\tcorrectUV( uvA, j + 0, a, azi );\n\t\t\t\tcorrectUV( uvB, j + 2, b, azi );\n\t\t\t\tcorrectUV( uvC, j + 4, c, azi );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction correctUV( uv, stride, vector, azimuth ) {\n\n\t\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {\n\n\t\t\t\tuvBuffer[ stride ] = uv.x - 1;\n\n\t\t\t}\n\n\t\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {\n\n\t\t\t\tuvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Angle around the Y axis, counter-clockwise when looking from above.\n\n\t\tfunction azimuth( vector ) {\n\n\t\t\treturn Math.atan2( vector.z, - vector.x );\n\n\t\t}\n\n\n\t\t// Angle above the XZ plane.\n\n\t\tfunction inclination( vector ) {\n\n\t\t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\n\n\t\t}\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new PolyhedronGeometry( data.vertices, data.indices, data.radius, data.details );\n\n\t}\n\n}\n\nclass DodecahedronGeometry extends PolyhedronGeometry {\n\n\tconstructor( radius = 1, detail = 0 ) {\n\n\t\tconst t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\t\tconst r = 1 / t;\n\n\t\tconst vertices = [\n\n\t\t\t// (±1, ±1, ±1)\n\t\t\t- 1, - 1, - 1,\t- 1, - 1, 1,\n\t\t\t- 1, 1, - 1, - 1, 1, 1,\n\t\t\t1, - 1, - 1, 1, - 1, 1,\n\t\t\t1, 1, - 1, 1, 1, 1,\n\n\t\t\t// (0, ±1/φ, ±φ)\n\t\t\t0, - r, - t, 0, - r, t,\n\t\t\t0, r, - t, 0, r, t,\n\n\t\t\t// (±1/φ, ±φ, 0)\n\t\t\t- r, - t, 0, - r, t, 0,\n\t\t\tr, - t, 0, r, t, 0,\n\n\t\t\t// (±φ, 0, ±1/φ)\n\t\t\t- t, 0, - r, t, 0, - r,\n\t\t\t- t, 0, r, t, 0, r\n\t\t];\n\n\t\tconst indices = [\n\t\t\t3, 11, 7, \t3, 7, 15, \t3, 15, 13,\n\t\t\t7, 19, 17, \t7, 17, 6, \t7, 6, 15,\n\t\t\t17, 4, 8, \t17, 8, 10, \t17, 10, 6,\n\t\t\t8, 0, 16, \t8, 16, 2, \t8, 2, 10,\n\t\t\t0, 12, 1, \t0, 1, 18, \t0, 18, 16,\n\t\t\t6, 10, 2, \t6, 2, 13, \t6, 13, 15,\n\t\t\t2, 16, 18, \t2, 18, 3, \t2, 3, 13,\n\t\t\t18, 1, 9, \t18, 9, 11, \t18, 11, 3,\n\t\t\t4, 14, 12, \t4, 12, 0, \t4, 0, 8,\n\t\t\t11, 9, 5, \t11, 5, 19, \t11, 19, 7,\n\t\t\t19, 5, 14, \t19, 14, 4, \t19, 4, 17,\n\t\t\t1, 12, 14, \t1, 14, 5, \t1, 5, 9\n\t\t];\n\n\t\tsuper( vertices, indices, radius, detail );\n\n\t\tthis.type = 'DodecahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new DodecahedronGeometry( data.radius, data.detail );\n\n\t}\n\n}\n\nconst _v0 = new Vector3();\nconst _v1$1 = new Vector3();\nconst _normal = new Vector3();\nconst _triangle = new Triangle();\n\nclass EdgesGeometry extends BufferGeometry {\n\n\tconstructor( geometry = null, thresholdAngle = 1 ) {\n\n\t\tsuper();\n\t\tthis.type = 'EdgesGeometry';\n\n\t\tthis.parameters = {\n\t\t\tgeometry: geometry,\n\t\t\tthresholdAngle: thresholdAngle\n\t\t};\n\n\t\tif ( geometry !== null ) {\n\n\t\t\tconst precisionPoints = 4;\n\t\t\tconst precision = Math.pow( 10, precisionPoints );\n\t\t\tconst thresholdDot = Math.cos( DEG2RAD * thresholdAngle );\n\n\t\t\tconst indexAttr = geometry.getIndex();\n\t\t\tconst positionAttr = geometry.getAttribute( 'position' );\n\t\t\tconst indexCount = indexAttr ? indexAttr.count : positionAttr.count;\n\n\t\t\tconst indexArr = [ 0, 0, 0 ];\n\t\t\tconst vertKeys = [ 'a', 'b', 'c' ];\n\t\t\tconst hashes = new Array( 3 );\n\n\t\t\tconst edgeData = {};\n\t\t\tconst vertices = [];\n\t\t\tfor ( let i = 0; i < indexCount; i += 3 ) {\n\n\t\t\t\tif ( indexAttr ) {\n\n\t\t\t\t\tindexArr[ 0 ] = indexAttr.getX( i );\n\t\t\t\t\tindexArr[ 1 ] = indexAttr.getX( i + 1 );\n\t\t\t\t\tindexArr[ 2 ] = indexAttr.getX( i + 2 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tindexArr[ 0 ] = i;\n\t\t\t\t\tindexArr[ 1 ] = i + 1;\n\t\t\t\t\tindexArr[ 2 ] = i + 2;\n\n\t\t\t\t}\n\n\t\t\t\tconst { a, b, c } = _triangle;\n\t\t\t\ta.fromBufferAttribute( positionAttr, indexArr[ 0 ] );\n\t\t\t\tb.fromBufferAttribute( positionAttr, indexArr[ 1 ] );\n\t\t\t\tc.fromBufferAttribute( positionAttr, indexArr[ 2 ] );\n\t\t\t\t_triangle.getNormal( _normal );\n\n\t\t\t\t// create hashes for the edge from the vertices\n\t\t\t\thashes[ 0 ] = `${ Math.round( a.x * precision ) },${ Math.round( a.y * precision ) },${ Math.round( a.z * precision ) }`;\n\t\t\t\thashes[ 1 ] = `${ Math.round( b.x * precision ) },${ Math.round( b.y * precision ) },${ Math.round( b.z * precision ) }`;\n\t\t\t\thashes[ 2 ] = `${ Math.round( c.x * precision ) },${ Math.round( c.y * precision ) },${ Math.round( c.z * precision ) }`;\n\n\t\t\t\t// skip degenerate triangles\n\t\t\t\tif ( hashes[ 0 ] === hashes[ 1 ] || hashes[ 1 ] === hashes[ 2 ] || hashes[ 2 ] === hashes[ 0 ] ) {\n\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\t// iterate over every edge\n\t\t\t\tfor ( let j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t// get the first and next vertex making up the edge\n\t\t\t\t\tconst jNext = ( j + 1 ) % 3;\n\t\t\t\t\tconst vecHash0 = hashes[ j ];\n\t\t\t\t\tconst vecHash1 = hashes[ jNext ];\n\t\t\t\t\tconst v0 = _triangle[ vertKeys[ j ] ];\n\t\t\t\t\tconst v1 = _triangle[ vertKeys[ jNext ] ];\n\n\t\t\t\t\tconst hash = `${ vecHash0 }_${ vecHash1 }`;\n\t\t\t\t\tconst reverseHash = `${ vecHash1 }_${ vecHash0 }`;\n\n\t\t\t\t\tif ( reverseHash in edgeData && edgeData[ reverseHash ] ) {\n\n\t\t\t\t\t\t// if we found a sibling edge add it into the vertex array if\n\t\t\t\t\t\t// it meets the angle threshold and delete the edge from the map.\n\t\t\t\t\t\tif ( _normal.dot( edgeData[ reverseHash ].normal ) <= thresholdDot ) {\n\n\t\t\t\t\t\t\tvertices.push( v0.x, v0.y, v0.z );\n\t\t\t\t\t\t\tvertices.push( v1.x, v1.y, v1.z );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tedgeData[ reverseHash ] = null;\n\n\t\t\t\t\t} else if ( ! ( hash in edgeData ) ) {\n\n\t\t\t\t\t\t// if we've already got an edge here then skip adding a new one\n\t\t\t\t\t\tedgeData[ hash ] = {\n\n\t\t\t\t\t\t\tindex0: indexArr[ j ],\n\t\t\t\t\t\t\tindex1: indexArr[ jNext ],\n\t\t\t\t\t\t\tnormal: _normal.clone(),\n\n\t\t\t\t\t\t};\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// iterate over all remaining, unmatched edges and add them to the vertex array\n\t\t\tfor ( const key in edgeData ) {\n\n\t\t\t\tif ( edgeData[ key ] ) {\n\n\t\t\t\t\tconst { index0, index1 } = edgeData[ key ];\n\t\t\t\t\t_v0.fromBufferAttribute( positionAttr, index0 );\n\t\t\t\t\t_v1$1.fromBufferAttribute( positionAttr, index1 );\n\n\t\t\t\t\tvertices.push( _v0.x, _v0.y, _v0.z );\n\t\t\t\t\tvertices.push( _v1$1.x, _v1$1.y, _v1$1.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * Extensible curve object.\n *\n * Some common of curve methods:\n * .getPoint( t, optionalTarget ), .getTangent( t, optionalTarget )\n * .getPointAt( u, optionalTarget ), .getTangentAt( u, optionalTarget )\n * .getPoints(), .getSpacedPoints()\n * .getLength()\n * .updateArcLengths()\n *\n * This following curves inherit from THREE.Curve:\n *\n * -- 2D curves --\n * THREE.ArcCurve\n * THREE.CubicBezierCurve\n * THREE.EllipseCurve\n * THREE.LineCurve\n * THREE.QuadraticBezierCurve\n * THREE.SplineCurve\n *\n * -- 3D curves --\n * THREE.CatmullRomCurve3\n * THREE.CubicBezierCurve3\n * THREE.LineCurve3\n * THREE.QuadraticBezierCurve3\n *\n * A series of curves can be represented as a THREE.CurvePath.\n *\n **/\n\nclass Curve {\n\n\tconstructor() {\n\n\t\tthis.type = 'Curve';\n\n\t\tthis.arcLengthDivisions = 200;\n\n\t}\n\n\t// Virtual base class method to overwrite and implement in subclasses\n\t//\t- t [0 .. 1]\n\n\tgetPoint( /* t, optionalTarget */ ) {\n\n\t\tconsole.warn( 'THREE.Curve: .getPoint() not implemented.' );\n\t\treturn null;\n\n\t}\n\n\t// Get point at relative position in curve according to arc length\n\t// - u [0 .. 1]\n\n\tgetPointAt( u, optionalTarget ) {\n\n\t\tconst t = this.getUtoTmapping( u );\n\t\treturn this.getPoint( t, optionalTarget );\n\n\t}\n\n\t// Get sequence of points using getPoint( t )\n\n\tgetPoints( divisions = 5 ) {\n\n\t\tconst points = [];\n\n\t\tfor ( let d = 0; d <= divisions; d ++ ) {\n\n\t\t\tpoints.push( this.getPoint( d / divisions ) );\n\n\t\t}\n\n\t\treturn points;\n\n\t}\n\n\t// Get sequence of points using getPointAt( u )\n\n\tgetSpacedPoints( divisions = 5 ) {\n\n\t\tconst points = [];\n\n\t\tfor ( let d = 0; d <= divisions; d ++ ) {\n\n\t\t\tpoints.push( this.getPointAt( d / divisions ) );\n\n\t\t}\n\n\t\treturn points;\n\n\t}\n\n\t// Get total curve arc length\n\n\tgetLength() {\n\n\t\tconst lengths = this.getLengths();\n\t\treturn lengths[ lengths.length - 1 ];\n\n\t}\n\n\t// Get list of cumulative segment lengths\n\n\tgetLengths( divisions = this.arcLengthDivisions ) {\n\n\t\tif ( this.cacheArcLengths &&\n\t\t\t( this.cacheArcLengths.length === divisions + 1 ) &&\n\t\t\t! this.needsUpdate ) {\n\n\t\t\treturn this.cacheArcLengths;\n\n\t\t}\n\n\t\tthis.needsUpdate = false;\n\n\t\tconst cache = [];\n\t\tlet current, last = this.getPoint( 0 );\n\t\tlet sum = 0;\n\n\t\tcache.push( 0 );\n\n\t\tfor ( let p = 1; p <= divisions; p ++ ) {\n\n\t\t\tcurrent = this.getPoint( p / divisions );\n\t\t\tsum += current.distanceTo( last );\n\t\t\tcache.push( sum );\n\t\t\tlast = current;\n\n\t\t}\n\n\t\tthis.cacheArcLengths = cache;\n\n\t\treturn cache; // { sums: cache, sum: sum }; Sum is in the last element.\n\n\t}\n\n\tupdateArcLengths() {\n\n\t\tthis.needsUpdate = true;\n\t\tthis.getLengths();\n\n\t}\n\n\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\n\tgetUtoTmapping( u, distance ) {\n\n\t\tconst arcLengths = this.getLengths();\n\n\t\tlet i = 0;\n\t\tconst il = arcLengths.length;\n\n\t\tlet targetArcLength; // The targeted u distance value to get\n\n\t\tif ( distance ) {\n\n\t\t\ttargetArcLength = distance;\n\n\t\t} else {\n\n\t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\n\n\t\t}\n\n\t\t// binary search for the index with largest value smaller than target u distance\n\n\t\tlet low = 0, high = il - 1, comparison;\n\n\t\twhile ( low <= high ) {\n\n\t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n\t\t\tcomparison = arcLengths[ i ] - targetArcLength;\n\n\t\t\tif ( comparison < 0 ) {\n\n\t\t\t\tlow = i + 1;\n\n\t\t\t} else if ( comparison > 0 ) {\n\n\t\t\t\thigh = i - 1;\n\n\t\t\t} else {\n\n\t\t\t\thigh = i;\n\t\t\t\tbreak;\n\n\t\t\t\t// DONE\n\n\t\t\t}\n\n\t\t}\n\n\t\ti = high;\n\n\t\tif ( arcLengths[ i ] === targetArcLength ) {\n\n\t\t\treturn i / ( il - 1 );\n\n\t\t}\n\n\t\t// we could get finer grain at lengths, or use simple interpolation between two points\n\n\t\tconst lengthBefore = arcLengths[ i ];\n\t\tconst lengthAfter = arcLengths[ i + 1 ];\n\n\t\tconst segmentLength = lengthAfter - lengthBefore;\n\n\t\t// determine where we are between the 'before' and 'after' points\n\n\t\tconst segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\n\n\t\t// add that fractional amount to t\n\n\t\tconst t = ( i + segmentFraction ) / ( il - 1 );\n\n\t\treturn t;\n\n\t}\n\n\t// Returns a unit vector tangent at t\n\t// In case any sub curve does not implement its tangent derivation,\n\t// 2 points a small delta apart will be used to find its gradient\n\t// which seems to give a reasonable approximation\n\n\tgetTangent( t, optionalTarget ) {\n\n\t\tconst delta = 0.0001;\n\t\tlet t1 = t - delta;\n\t\tlet t2 = t + delta;\n\n\t\t// Capping in case of danger\n\n\t\tif ( t1 < 0 ) t1 = 0;\n\t\tif ( t2 > 1 ) t2 = 1;\n\n\t\tconst pt1 = this.getPoint( t1 );\n\t\tconst pt2 = this.getPoint( t2 );\n\n\t\tconst tangent = optionalTarget || ( ( pt1.isVector2 ) ? new Vector2() : new Vector3() );\n\n\t\ttangent.copy( pt2 ).sub( pt1 ).normalize();\n\n\t\treturn tangent;\n\n\t}\n\n\tgetTangentAt( u, optionalTarget ) {\n\n\t\tconst t = this.getUtoTmapping( u );\n\t\treturn this.getTangent( t, optionalTarget );\n\n\t}\n\n\tcomputeFrenetFrames( segments, closed ) {\n\n\t\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\n\t\tconst normal = new Vector3();\n\n\t\tconst tangents = [];\n\t\tconst normals = [];\n\t\tconst binormals = [];\n\n\t\tconst vec = new Vector3();\n\t\tconst mat = new Matrix4();\n\n\t\t// compute the tangent vectors for each segment on the curve\n\n\t\tfor ( let i = 0; i <= segments; i ++ ) {\n\n\t\t\tconst u = i / segments;\n\n\t\t\ttangents[ i ] = this.getTangentAt( u, new Vector3() );\n\n\t\t}\n\n\t\t// select an initial normal vector perpendicular to the first tangent vector,\n\t\t// and in the direction of the minimum tangent xyz component\n\n\t\tnormals[ 0 ] = new Vector3();\n\t\tbinormals[ 0 ] = new Vector3();\n\t\tlet min = Number.MAX_VALUE;\n\t\tconst tx = Math.abs( tangents[ 0 ].x );\n\t\tconst ty = Math.abs( tangents[ 0 ].y );\n\t\tconst tz = Math.abs( tangents[ 0 ].z );\n\n\t\tif ( tx <= min ) {\n\n\t\t\tmin = tx;\n\t\t\tnormal.set( 1, 0, 0 );\n\n\t\t}\n\n\t\tif ( ty <= min ) {\n\n\t\t\tmin = ty;\n\t\t\tnormal.set( 0, 1, 0 );\n\n\t\t}\n\n\t\tif ( tz <= min ) {\n\n\t\t\tnormal.set( 0, 0, 1 );\n\n\t\t}\n\n\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\n\n\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n\n\t\t// compute the slowly-varying normal and binormal vectors for each segment on the curve\n\n\t\tfor ( let i = 1; i <= segments; i ++ ) {\n\n\t\t\tnormals[ i ] = normals[ i - 1 ].clone();\n\n\t\t\tbinormals[ i ] = binormals[ i - 1 ].clone();\n\n\t\t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\n\n\t\t\tif ( vec.length() > Number.EPSILON ) {\n\n\t\t\t\tvec.normalize();\n\n\t\t\t\tconst theta = Math.acos( clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\n\n\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n\n\t\t\t}\n\n\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t}\n\n\t\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\t\tif ( closed === true ) {\n\n\t\t\tlet theta = Math.acos( clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );\n\t\t\ttheta /= segments;\n\n\t\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {\n\n\t\t\t\ttheta = - theta;\n\n\t\t\t}\n\n\t\t\tfor ( let i = 1; i <= segments; i ++ ) {\n\n\t\t\t\t// twist a little...\n\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\n\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\ttangents: tangents,\n\t\t\tnormals: normals,\n\t\t\tbinormals: binormals\n\t\t};\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.arcLengthDivisions = source.arcLengthDivisions;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Curve',\n\t\t\t\tgenerator: 'Curve.toJSON'\n\t\t\t}\n\t\t};\n\n\t\tdata.arcLengthDivisions = this.arcLengthDivisions;\n\t\tdata.type = this.type;\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tthis.arcLengthDivisions = json.arcLengthDivisions;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass EllipseCurve extends Curve {\n\n\tconstructor( aX = 0, aY = 0, xRadius = 1, yRadius = 1, aStartAngle = 0, aEndAngle = Math.PI * 2, aClockwise = false, aRotation = 0 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'EllipseCurve';\n\n\t\tthis.aX = aX;\n\t\tthis.aY = aY;\n\n\t\tthis.xRadius = xRadius;\n\t\tthis.yRadius = yRadius;\n\n\t\tthis.aStartAngle = aStartAngle;\n\t\tthis.aEndAngle = aEndAngle;\n\n\t\tthis.aClockwise = aClockwise;\n\n\t\tthis.aRotation = aRotation;\n\n\t}\n\n\tgetPoint( t, optionalTarget ) {\n\n\t\tconst point = optionalTarget || new Vector2();\n\n\t\tconst twoPi = Math.PI * 2;\n\t\tlet deltaAngle = this.aEndAngle - this.aStartAngle;\n\t\tconst samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\n\n\t\t// ensures that deltaAngle is 0 .. 2 PI\n\t\twhile ( deltaAngle < 0 ) deltaAngle += twoPi;\n\t\twhile ( deltaAngle > twoPi ) deltaAngle -= twoPi;\n\n\t\tif ( deltaAngle < Number.EPSILON ) {\n\n\t\t\tif ( samePoints ) {\n\n\t\t\t\tdeltaAngle = 0;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.aClockwise === true && ! samePoints ) {\n\n\t\t\tif ( deltaAngle === twoPi ) {\n\n\t\t\t\tdeltaAngle = - twoPi;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = deltaAngle - twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst angle = this.aStartAngle + t * deltaAngle;\n\t\tlet x = this.aX + this.xRadius * Math.cos( angle );\n\t\tlet y = this.aY + this.yRadius * Math.sin( angle );\n\n\t\tif ( this.aRotation !== 0 ) {\n\n\t\t\tconst cos = Math.cos( this.aRotation );\n\t\t\tconst sin = Math.sin( this.aRotation );\n\n\t\t\tconst tx = x - this.aX;\n\t\t\tconst ty = y - this.aY;\n\n\t\t\t// Rotate the point about the center of the ellipse.\n\t\t\tx = tx * cos - ty * sin + this.aX;\n\t\t\ty = tx * sin + ty * cos + this.aY;\n\n\t\t}\n\n\t\treturn point.set( x, y );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.aX = source.aX;\n\t\tthis.aY = source.aY;\n\n\t\tthis.xRadius = source.xRadius;\n\t\tthis.yRadius = source.yRadius;\n\n\t\tthis.aStartAngle = source.aStartAngle;\n\t\tthis.aEndAngle = source.aEndAngle;\n\n\t\tthis.aClockwise = source.aClockwise;\n\n\t\tthis.aRotation = source.aRotation;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.aX = this.aX;\n\t\tdata.aY = this.aY;\n\n\t\tdata.xRadius = this.xRadius;\n\t\tdata.yRadius = this.yRadius;\n\n\t\tdata.aStartAngle = this.aStartAngle;\n\t\tdata.aEndAngle = this.aEndAngle;\n\n\t\tdata.aClockwise = this.aClockwise;\n\n\t\tdata.aRotation = this.aRotation;\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.aX = json.aX;\n\t\tthis.aY = json.aY;\n\n\t\tthis.xRadius = json.xRadius;\n\t\tthis.yRadius = json.yRadius;\n\n\t\tthis.aStartAngle = json.aStartAngle;\n\t\tthis.aEndAngle = json.aEndAngle;\n\n\t\tthis.aClockwise = json.aClockwise;\n\n\t\tthis.aRotation = json.aRotation;\n\n\t\treturn this;\n\n\t}\n\n}\n\nEllipseCurve.prototype.isEllipseCurve = true;\n\nclass ArcCurve extends EllipseCurve {\n\n\tconstructor( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tsuper( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t\tthis.type = 'ArcCurve';\n\n\t}\n\n}\n\nArcCurve.prototype.isArcCurve = true;\n\n/**\n * Centripetal CatmullRom Curve - which is useful for avoiding\n * cusps and self-intersections in non-uniform catmull rom curves.\n * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n *\n * curve.type accepts centripetal(default), chordal and catmullrom\n * curve.tension is used for catmullrom which defaults to 0.5\n */\n\n\n/*\nBased on an optimized c++ solution in\n - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n - http://ideone.com/NoEbVM\n\nThis CubicPoly class could be used for reusing some variables and calculations,\nbut for three.js curve use, it could be possible inlined and flatten into a single function call\nwhich can be placed in CurveUtils.\n*/\n\nfunction CubicPoly() {\n\n\tlet c0 = 0, c1 = 0, c2 = 0, c3 = 0;\n\n\t/*\n\t * Compute coefficients for a cubic polynomial\n\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t * such that\n\t *   p(0) = x0, p(1) = x1\n\t *  and\n\t *   p'(0) = t0, p'(1) = t1.\n\t */\n\tfunction init( x0, x1, t0, t1 ) {\n\n\t\tc0 = x0;\n\t\tc1 = t0;\n\t\tc2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\n\n\t}\n\n\treturn {\n\n\t\tinitCatmullRom: function ( x0, x1, x2, x3, tension ) {\n\n\t\t\tinit( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\n\n\t\t},\n\n\t\tinitNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {\n\n\t\t\t// compute tangents when parameterized in [t1,t2]\n\t\t\tlet t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\n\t\t\tlet t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\n\n\t\t\t// rescale tangents for parametrization in [0,1]\n\t\t\tt1 *= dt1;\n\t\t\tt2 *= dt1;\n\n\t\t\tinit( x1, x2, t1, t2 );\n\n\t\t},\n\n\t\tcalc: function ( t ) {\n\n\t\t\tconst t2 = t * t;\n\t\t\tconst t3 = t2 * t;\n\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\n\n\t\t}\n\n\t};\n\n}\n\n//\n\nconst tmp = new Vector3();\nconst px = new CubicPoly(), py = new CubicPoly(), pz = new CubicPoly();\n\nclass CatmullRomCurve3 extends Curve {\n\n\tconstructor( points = [], closed = false, curveType = 'centripetal', tension = 0.5 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'CatmullRomCurve3';\n\n\t\tthis.points = points;\n\t\tthis.closed = closed;\n\t\tthis.curveType = curveType;\n\t\tthis.tension = tension;\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst points = this.points;\n\t\tconst l = points.length;\n\n\t\tconst p = ( l - ( this.closed ? 0 : 1 ) ) * t;\n\t\tlet intPoint = Math.floor( p );\n\t\tlet weight = p - intPoint;\n\n\t\tif ( this.closed ) {\n\n\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;\n\n\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\n\n\t\t\tintPoint = l - 2;\n\t\t\tweight = 1;\n\n\t\t}\n\n\t\tlet p0, p3; // 4 points (p1 & p2 defined below)\n\n\t\tif ( this.closed || intPoint > 0 ) {\n\n\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate first point\n\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\n\t\t\tp0 = tmp;\n\n\t\t}\n\n\t\tconst p1 = points[ intPoint % l ];\n\t\tconst p2 = points[ ( intPoint + 1 ) % l ];\n\n\t\tif ( this.closed || intPoint + 2 < l ) {\n\n\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate last point\n\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\n\t\t\tp3 = tmp;\n\n\t\t}\n\n\t\tif ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {\n\n\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t\t\tconst pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n\t\t\tlet dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\n\t\t\tlet dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\n\t\t\tlet dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\n\n\t\t\t// safety check for repeated points\n\t\t\tif ( dt1 < 1e-4 ) dt1 = 1.0;\n\t\t\tif ( dt0 < 1e-4 ) dt0 = dt1;\n\t\t\tif ( dt2 < 1e-4 ) dt2 = dt1;\n\n\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\n\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\n\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\n\n\t\t} else if ( this.curveType === 'catmullrom' ) {\n\n\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );\n\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );\n\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );\n\n\t\t}\n\n\t\tpoint.set(\n\t\t\tpx.calc( weight ),\n\t\t\tpy.calc( weight ),\n\t\t\tpz.calc( weight )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.points = [];\n\n\t\tfor ( let i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = source.points[ i ];\n\n\t\t\tthis.points.push( point.clone() );\n\n\t\t}\n\n\t\tthis.closed = source.closed;\n\t\tthis.curveType = source.curveType;\n\t\tthis.tension = source.tension;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.points = [];\n\n\t\tfor ( let i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = this.points[ i ];\n\t\t\tdata.points.push( point.toArray() );\n\n\t\t}\n\n\t\tdata.closed = this.closed;\n\t\tdata.curveType = this.curveType;\n\t\tdata.tension = this.tension;\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.points = [];\n\n\t\tfor ( let i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = json.points[ i ];\n\t\t\tthis.points.push( new Vector3().fromArray( point ) );\n\n\t\t}\n\n\t\tthis.closed = json.closed;\n\t\tthis.curveType = json.curveType;\n\t\tthis.tension = json.tension;\n\n\t\treturn this;\n\n\t}\n\n}\n\nCatmullRomCurve3.prototype.isCatmullRomCurve3 = true;\n\n/**\n * Bezier Curves formulas obtained from\n * http://en.wikipedia.org/wiki/Bézier_curve\n */\n\nfunction CatmullRom( t, p0, p1, p2, p3 ) {\n\n\tconst v0 = ( p2 - p0 ) * 0.5;\n\tconst v1 = ( p3 - p1 ) * 0.5;\n\tconst t2 = t * t;\n\tconst t3 = t * t2;\n\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n}\n\n//\n\nfunction QuadraticBezierP0( t, p ) {\n\n\tconst k = 1 - t;\n\treturn k * k * p;\n\n}\n\nfunction QuadraticBezierP1( t, p ) {\n\n\treturn 2 * ( 1 - t ) * t * p;\n\n}\n\nfunction QuadraticBezierP2( t, p ) {\n\n\treturn t * t * p;\n\n}\n\nfunction QuadraticBezier( t, p0, p1, p2 ) {\n\n\treturn QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +\n\t\tQuadraticBezierP2( t, p2 );\n\n}\n\n//\n\nfunction CubicBezierP0( t, p ) {\n\n\tconst k = 1 - t;\n\treturn k * k * k * p;\n\n}\n\nfunction CubicBezierP1( t, p ) {\n\n\tconst k = 1 - t;\n\treturn 3 * k * k * t * p;\n\n}\n\nfunction CubicBezierP2( t, p ) {\n\n\treturn 3 * ( 1 - t ) * t * t * p;\n\n}\n\nfunction CubicBezierP3( t, p ) {\n\n\treturn t * t * t * p;\n\n}\n\nfunction CubicBezier( t, p0, p1, p2, p3 ) {\n\n\treturn CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +\n\t\tCubicBezierP3( t, p3 );\n\n}\n\nclass CubicBezierCurve extends Curve {\n\n\tconstructor( v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2(), v3 = new Vector2() ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'CubicBezierCurve';\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t\tthis.v3 = v3;\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector2() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\t\tpoint.set(\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\t\tthis.v3.copy( source.v3 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\t\tthis.v3.fromArray( json.v3 );\n\n\t\treturn this;\n\n\t}\n\n}\n\nCubicBezierCurve.prototype.isCubicBezierCurve = true;\n\nclass CubicBezierCurve3 extends Curve {\n\n\tconstructor( v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3(), v3 = new Vector3() ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'CubicBezierCurve3';\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t\tthis.v3 = v3;\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\t\tpoint.set(\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y ),\n\t\t\tCubicBezier( t, v0.z, v1.z, v2.z, v3.z )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\t\tthis.v3.copy( source.v3 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\t\tthis.v3.fromArray( json.v3 );\n\n\t\treturn this;\n\n\t}\n\n}\n\nCubicBezierCurve3.prototype.isCubicBezierCurve3 = true;\n\nclass LineCurve extends Curve {\n\n\tconstructor( v1 = new Vector2(), v2 = new Vector2() ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'LineCurve';\n\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector2() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tif ( t === 1 ) {\n\n\t\t\tpoint.copy( this.v2 );\n\n\t\t} else {\n\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t\t}\n\n\t\treturn point;\n\n\t}\n\n\t// Line curve is linear, so we can overwrite default getPointAt\n\tgetPointAt( u, optionalTarget ) {\n\n\t\treturn this.getPoint( u, optionalTarget );\n\n\t}\n\n\tgetTangent( t, optionalTarget ) {\n\n\t\tconst tangent = optionalTarget || new Vector2();\n\n\t\ttangent.copy( this.v2 ).sub( this.v1 ).normalize();\n\n\t\treturn tangent;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t}\n\n}\n\nLineCurve.prototype.isLineCurve = true;\n\nclass LineCurve3 extends Curve {\n\n\tconstructor( v1 = new Vector3(), v2 = new Vector3() ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'LineCurve3';\n\t\tthis.isLineCurve3 = true;\n\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t}\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tif ( t === 1 ) {\n\n\t\t\tpoint.copy( this.v2 );\n\n\t\t} else {\n\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t\t}\n\n\t\treturn point;\n\n\t}\n\t// Line curve is linear, so we can overwrite default getPointAt\n\tgetPointAt( u, optionalTarget ) {\n\n\t\treturn this.getPoint( u, optionalTarget );\n\n\t}\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t}\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t}\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass QuadraticBezierCurve extends Curve {\n\n\tconstructor( v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2() ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'QuadraticBezierCurve';\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector2() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\t\tpoint.set(\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t}\n\n}\n\nQuadraticBezierCurve.prototype.isQuadraticBezierCurve = true;\n\nclass QuadraticBezierCurve3 extends Curve {\n\n\tconstructor( v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3() ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'QuadraticBezierCurve3';\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\t\tpoint.set(\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y ),\n\t\t\tQuadraticBezier( t, v0.z, v1.z, v2.z )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t}\n\n}\n\nQuadraticBezierCurve3.prototype.isQuadraticBezierCurve3 = true;\n\nclass SplineCurve extends Curve {\n\n\tconstructor( points = [] ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'SplineCurve';\n\n\t\tthis.points = points;\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector2() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst points = this.points;\n\t\tconst p = ( points.length - 1 ) * t;\n\n\t\tconst intPoint = Math.floor( p );\n\t\tconst weight = p - intPoint;\n\n\t\tconst p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\n\t\tconst p1 = points[ intPoint ];\n\t\tconst p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\t\tconst p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n\t\tpoint.set(\n\t\t\tCatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),\n\t\t\tCatmullRom( weight, p0.y, p1.y, p2.y, p3.y )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.points = [];\n\n\t\tfor ( let i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = source.points[ i ];\n\n\t\t\tthis.points.push( point.clone() );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.points = [];\n\n\t\tfor ( let i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = this.points[ i ];\n\t\t\tdata.points.push( point.toArray() );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.points = [];\n\n\t\tfor ( let i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = json.points[ i ];\n\t\t\tthis.points.push( new Vector2().fromArray( point ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nSplineCurve.prototype.isSplineCurve = true;\n\nvar Curves = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tArcCurve: ArcCurve,\n\tCatmullRomCurve3: CatmullRomCurve3,\n\tCubicBezierCurve: CubicBezierCurve,\n\tCubicBezierCurve3: CubicBezierCurve3,\n\tEllipseCurve: EllipseCurve,\n\tLineCurve: LineCurve,\n\tLineCurve3: LineCurve3,\n\tQuadraticBezierCurve: QuadraticBezierCurve,\n\tQuadraticBezierCurve3: QuadraticBezierCurve3,\n\tSplineCurve: SplineCurve\n});\n\n/**************************************************************\n *\tCurved Path - a curve path is simply a array of connected\n *  curves, but retains the api of a curve\n **************************************************************/\n\nclass CurvePath extends Curve {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.type = 'CurvePath';\n\n\t\tthis.curves = [];\n\t\tthis.autoClose = false; // Automatically closes the path\n\n\t}\n\n\tadd( curve ) {\n\n\t\tthis.curves.push( curve );\n\n\t}\n\n\tclosePath() {\n\n\t\t// Add a line curve if start and end of lines are not connected\n\t\tconst startPoint = this.curves[ 0 ].getPoint( 0 );\n\t\tconst endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\n\n\t\tif ( ! startPoint.equals( endPoint ) ) {\n\n\t\t\tthis.curves.push( new LineCurve( endPoint, startPoint ) );\n\n\t\t}\n\n\t}\n\n\t// To get accurate point with reference to\n\t// entire path distance at time t,\n\t// following has to be done:\n\n\t// 1. Length of each sub path have to be known\n\t// 2. Locate and identify type of curve\n\t// 3. Get t for the curve\n\t// 4. Return curve.getPointAt(t')\n\n\tgetPoint( t, optionalTarget ) {\n\n\t\tconst d = t * this.getLength();\n\t\tconst curveLengths = this.getCurveLengths();\n\t\tlet i = 0;\n\n\t\t// To think about boundaries points.\n\n\t\twhile ( i < curveLengths.length ) {\n\n\t\t\tif ( curveLengths[ i ] >= d ) {\n\n\t\t\t\tconst diff = curveLengths[ i ] - d;\n\t\t\t\tconst curve = this.curves[ i ];\n\n\t\t\t\tconst segmentLength = curve.getLength();\n\t\t\t\tconst u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\n\t\t\t\treturn curve.getPointAt( u, optionalTarget );\n\n\t\t\t}\n\n\t\t\ti ++;\n\n\t\t}\n\n\t\treturn null;\n\n\t\t// loop where sum != 0, sum > d , sum+1 <d\n\n\t}\n\n\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t// getPoint() depends on getLength\n\n\tgetLength() {\n\n\t\tconst lens = this.getCurveLengths();\n\t\treturn lens[ lens.length - 1 ];\n\n\t}\n\n\t// cacheLengths must be recalculated.\n\tupdateArcLengths() {\n\n\t\tthis.needsUpdate = true;\n\t\tthis.cacheLengths = null;\n\t\tthis.getCurveLengths();\n\n\t}\n\n\t// Compute lengths and cache them\n\t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\n\tgetCurveLengths() {\n\n\t\t// We use cache values if curves and cache array are same length\n\n\t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\n\n\t\t\treturn this.cacheLengths;\n\n\t\t}\n\n\t\t// Get length of sub-curve\n\t\t// Push sums into cached array\n\n\t\tconst lengths = [];\n\t\tlet sums = 0;\n\n\t\tfor ( let i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\tsums += this.curves[ i ].getLength();\n\t\t\tlengths.push( sums );\n\n\t\t}\n\n\t\tthis.cacheLengths = lengths;\n\n\t\treturn lengths;\n\n\t}\n\n\tgetSpacedPoints( divisions = 40 ) {\n\n\t\tconst points = [];\n\n\t\tfor ( let i = 0; i <= divisions; i ++ ) {\n\n\t\t\tpoints.push( this.getPoint( i / divisions ) );\n\n\t\t}\n\n\t\tif ( this.autoClose ) {\n\n\t\t\tpoints.push( points[ 0 ] );\n\n\t\t}\n\n\t\treturn points;\n\n\t}\n\n\tgetPoints( divisions = 12 ) {\n\n\t\tconst points = [];\n\t\tlet last;\n\n\t\tfor ( let i = 0, curves = this.curves; i < curves.length; i ++ ) {\n\n\t\t\tconst curve = curves[ i ];\n\t\t\tconst resolution = ( curve && curve.isEllipseCurve ) ? divisions * 2\n\t\t\t\t: ( curve && ( curve.isLineCurve || curve.isLineCurve3 ) ) ? 1\n\t\t\t\t\t: ( curve && curve.isSplineCurve ) ? divisions * curve.points.length\n\t\t\t\t\t\t: divisions;\n\n\t\t\tconst pts = curve.getPoints( resolution );\n\n\t\t\tfor ( let j = 0; j < pts.length; j ++ ) {\n\n\t\t\t\tconst point = pts[ j ];\n\n\t\t\t\tif ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates\n\n\t\t\t\tpoints.push( point );\n\t\t\t\tlast = point;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {\n\n\t\t\tpoints.push( points[ 0 ] );\n\n\t\t}\n\n\t\treturn points;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.curves = [];\n\n\t\tfor ( let i = 0, l = source.curves.length; i < l; i ++ ) {\n\n\t\t\tconst curve = source.curves[ i ];\n\n\t\t\tthis.curves.push( curve.clone() );\n\n\t\t}\n\n\t\tthis.autoClose = source.autoClose;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.autoClose = this.autoClose;\n\t\tdata.curves = [];\n\n\t\tfor ( let i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\tconst curve = this.curves[ i ];\n\t\t\tdata.curves.push( curve.toJSON() );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.autoClose = json.autoClose;\n\t\tthis.curves = [];\n\n\t\tfor ( let i = 0, l = json.curves.length; i < l; i ++ ) {\n\n\t\t\tconst curve = json.curves[ i ];\n\t\t\tthis.curves.push( new Curves[ curve.type ]().fromJSON( curve ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass Path extends CurvePath {\n\n\tconstructor( points ) {\n\n\t\tsuper();\n\t\tthis.type = 'Path';\n\n\t\tthis.currentPoint = new Vector2();\n\n\t\tif ( points ) {\n\n\t\t\tthis.setFromPoints( points );\n\n\t\t}\n\n\t}\n\n\tsetFromPoints( points ) {\n\n\t\tthis.moveTo( points[ 0 ].x, points[ 0 ].y );\n\n\t\tfor ( let i = 1, l = points.length; i < l; i ++ ) {\n\n\t\t\tthis.lineTo( points[ i ].x, points[ i ].y );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tmoveTo( x, y ) {\n\n\t\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\n\n\t\treturn this;\n\n\t}\n\n\tlineTo( x, y ) {\n\n\t\tconst curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.set( x, y );\n\n\t\treturn this;\n\n\t}\n\n\tquadraticCurveTo( aCPx, aCPy, aX, aY ) {\n\n\t\tconst curve = new QuadraticBezierCurve(\n\t\t\tthis.currentPoint.clone(),\n\t\t\tnew Vector2( aCPx, aCPy ),\n\t\t\tnew Vector2( aX, aY )\n\t\t);\n\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.set( aX, aY );\n\n\t\treturn this;\n\n\t}\n\n\tbezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\tconst curve = new CubicBezierCurve(\n\t\t\tthis.currentPoint.clone(),\n\t\t\tnew Vector2( aCP1x, aCP1y ),\n\t\t\tnew Vector2( aCP2x, aCP2y ),\n\t\t\tnew Vector2( aX, aY )\n\t\t);\n\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.set( aX, aY );\n\n\t\treturn this;\n\n\t}\n\n\tsplineThru( pts /*Array of Vector*/ ) {\n\n\t\tconst npts = [ this.currentPoint.clone() ].concat( pts );\n\n\t\tconst curve = new SplineCurve( npts );\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\n\n\t\treturn this;\n\n\t}\n\n\tarc( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tconst x0 = this.currentPoint.x;\n\t\tconst y0 = this.currentPoint.y;\n\n\t\tthis.absarc( aX + x0, aY + y0, aRadius,\n\t\t\taStartAngle, aEndAngle, aClockwise );\n\n\t\treturn this;\n\n\t}\n\n\tabsarc( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t\treturn this;\n\n\t}\n\n\tellipse( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tconst x0 = this.currentPoint.x;\n\t\tconst y0 = this.currentPoint.y;\n\n\t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\treturn this;\n\n\t}\n\n\tabsellipse( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tconst curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\tif ( this.curves.length > 0 ) {\n\n\t\t\t// if a previous curve is present, attempt to join\n\t\t\tconst firstPoint = curve.getPoint( 0 );\n\n\t\t\tif ( ! firstPoint.equals( this.currentPoint ) ) {\n\n\t\t\t\tthis.lineTo( firstPoint.x, firstPoint.y );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.curves.push( curve );\n\n\t\tconst lastPoint = curve.getPoint( 1 );\n\t\tthis.currentPoint.copy( lastPoint );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.currentPoint.copy( source.currentPoint );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.currentPoint = this.currentPoint.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.currentPoint.fromArray( json.currentPoint );\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass Shape extends Path {\n\n\tconstructor( points ) {\n\n\t\tsuper( points );\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.type = 'Shape';\n\n\t\tthis.holes = [];\n\n\t}\n\n\tgetPointsHoles( divisions ) {\n\n\t\tconst holesPts = [];\n\n\t\tfor ( let i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\n\n\t\t}\n\n\t\treturn holesPts;\n\n\t}\n\n\t// get points of shape and holes (keypoints based on segments parameter)\n\n\textractPoints( divisions ) {\n\n\t\treturn {\n\n\t\t\tshape: this.getPoints( divisions ),\n\t\t\tholes: this.getPointsHoles( divisions )\n\n\t\t};\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.holes = [];\n\n\t\tfor ( let i = 0, l = source.holes.length; i < l; i ++ ) {\n\n\t\t\tconst hole = source.holes[ i ];\n\n\t\t\tthis.holes.push( hole.clone() );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.uuid = this.uuid;\n\t\tdata.holes = [];\n\n\t\tfor ( let i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\tconst hole = this.holes[ i ];\n\t\t\tdata.holes.push( hole.toJSON() );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.uuid = json.uuid;\n\t\tthis.holes = [];\n\n\t\tfor ( let i = 0, l = json.holes.length; i < l; i ++ ) {\n\n\t\t\tconst hole = json.holes[ i ];\n\t\t\tthis.holes.push( new Path().fromJSON( hole ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * Port from https://github.com/mapbox/earcut (v2.2.2)\n */\n\nconst Earcut = {\n\n\ttriangulate: function ( data, holeIndices, dim = 2 ) {\n\n\t\tconst hasHoles = holeIndices && holeIndices.length;\n\t\tconst outerLen = hasHoles ? holeIndices[ 0 ] * dim : data.length;\n\t\tlet outerNode = linkedList( data, 0, outerLen, dim, true );\n\t\tconst triangles = [];\n\n\t\tif ( ! outerNode || outerNode.next === outerNode.prev ) return triangles;\n\n\t\tlet minX, minY, maxX, maxY, x, y, invSize;\n\n\t\tif ( hasHoles ) outerNode = eliminateHoles( data, holeIndices, outerNode, dim );\n\n\t\t// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n\t\tif ( data.length > 80 * dim ) {\n\n\t\t\tminX = maxX = data[ 0 ];\n\t\t\tminY = maxY = data[ 1 ];\n\n\t\t\tfor ( let i = dim; i < outerLen; i += dim ) {\n\n\t\t\t\tx = data[ i ];\n\t\t\t\ty = data[ i + 1 ];\n\t\t\t\tif ( x < minX ) minX = x;\n\t\t\t\tif ( y < minY ) minY = y;\n\t\t\t\tif ( x > maxX ) maxX = x;\n\t\t\t\tif ( y > maxY ) maxY = y;\n\n\t\t\t}\n\n\t\t\t// minX, minY and invSize are later used to transform coords into integers for z-order calculation\n\t\t\tinvSize = Math.max( maxX - minX, maxY - minY );\n\t\t\tinvSize = invSize !== 0 ? 1 / invSize : 0;\n\n\t\t}\n\n\t\tearcutLinked( outerNode, triangles, dim, minX, minY, invSize );\n\n\t\treturn triangles;\n\n\t}\n\n};\n\n// create a circular doubly linked list from polygon points in the specified winding order\nfunction linkedList( data, start, end, dim, clockwise ) {\n\n\tlet i, last;\n\n\tif ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {\n\n\t\tfor ( i = start; i < end; i += dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );\n\n\t} else {\n\n\t\tfor ( i = end - dim; i >= start; i -= dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );\n\n\t}\n\n\tif ( last && equals( last, last.next ) ) {\n\n\t\tremoveNode( last );\n\t\tlast = last.next;\n\n\t}\n\n\treturn last;\n\n}\n\n// eliminate colinear or duplicate points\nfunction filterPoints( start, end ) {\n\n\tif ( ! start ) return start;\n\tif ( ! end ) end = start;\n\n\tlet p = start,\n\t\tagain;\n\tdo {\n\n\t\tagain = false;\n\n\t\tif ( ! p.steiner && ( equals( p, p.next ) || area( p.prev, p, p.next ) === 0 ) ) {\n\n\t\t\tremoveNode( p );\n\t\t\tp = end = p.prev;\n\t\t\tif ( p === p.next ) break;\n\t\t\tagain = true;\n\n\t\t} else {\n\n\t\t\tp = p.next;\n\n\t\t}\n\n\t} while ( again || p !== end );\n\n\treturn end;\n\n}\n\n// main ear slicing loop which triangulates a polygon (given as a linked list)\nfunction earcutLinked( ear, triangles, dim, minX, minY, invSize, pass ) {\n\n\tif ( ! ear ) return;\n\n\t// interlink polygon nodes in z-order\n\tif ( ! pass && invSize ) indexCurve( ear, minX, minY, invSize );\n\n\tlet stop = ear,\n\t\tprev, next;\n\n\t// iterate through ears, slicing them one by one\n\twhile ( ear.prev !== ear.next ) {\n\n\t\tprev = ear.prev;\n\t\tnext = ear.next;\n\n\t\tif ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {\n\n\t\t\t// cut off the triangle\n\t\t\ttriangles.push( prev.i / dim );\n\t\t\ttriangles.push( ear.i / dim );\n\t\t\ttriangles.push( next.i / dim );\n\n\t\t\tremoveNode( ear );\n\n\t\t\t// skipping the next vertex leads to less sliver triangles\n\t\t\tear = next.next;\n\t\t\tstop = next.next;\n\n\t\t\tcontinue;\n\n\t\t}\n\n\t\tear = next;\n\n\t\t// if we looped through the whole remaining polygon and can't find any more ears\n\t\tif ( ear === stop ) {\n\n\t\t\t// try filtering points and slicing again\n\t\t\tif ( ! pass ) {\n\n\t\t\t\tearcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );\n\n\t\t\t\t// if this didn't work, try curing all small self-intersections locally\n\n\t\t\t} else if ( pass === 1 ) {\n\n\t\t\t\tear = cureLocalIntersections( filterPoints( ear ), triangles, dim );\n\t\t\t\tearcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );\n\n\t\t\t\t// as a last resort, try splitting the remaining polygon into two\n\n\t\t\t} else if ( pass === 2 ) {\n\n\t\t\t\tsplitEarcut( ear, triangles, dim, minX, minY, invSize );\n\n\t\t\t}\n\n\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n}\n\n// check whether a polygon node forms a valid ear with adjacent nodes\nfunction isEar( ear ) {\n\n\tconst a = ear.prev,\n\t\tb = ear,\n\t\tc = ear.next;\n\n\tif ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear\n\n\t// now make sure we don't have other points inside the potential ear\n\tlet p = ear.next.next;\n\n\twhile ( p !== ear.prev ) {\n\n\t\tif ( pointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\tarea( p.prev, p, p.next ) >= 0 ) return false;\n\t\tp = p.next;\n\n\t}\n\n\treturn true;\n\n}\n\nfunction isEarHashed( ear, minX, minY, invSize ) {\n\n\tconst a = ear.prev,\n\t\tb = ear,\n\t\tc = ear.next;\n\n\tif ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear\n\n\t// triangle bbox; min & max are calculated like this for speed\n\tconst minTX = a.x < b.x ? ( a.x < c.x ? a.x : c.x ) : ( b.x < c.x ? b.x : c.x ),\n\t\tminTY = a.y < b.y ? ( a.y < c.y ? a.y : c.y ) : ( b.y < c.y ? b.y : c.y ),\n\t\tmaxTX = a.x > b.x ? ( a.x > c.x ? a.x : c.x ) : ( b.x > c.x ? b.x : c.x ),\n\t\tmaxTY = a.y > b.y ? ( a.y > c.y ? a.y : c.y ) : ( b.y > c.y ? b.y : c.y );\n\n\t// z-order range for the current triangle bbox;\n\tconst minZ = zOrder( minTX, minTY, minX, minY, invSize ),\n\t\tmaxZ = zOrder( maxTX, maxTY, minX, minY, invSize );\n\n\tlet p = ear.prevZ,\n\t\tn = ear.nextZ;\n\n\t// look for points inside the triangle in both directions\n\twhile ( p && p.z >= minZ && n && n.z <= maxZ ) {\n\n\t\tif ( p !== ear.prev && p !== ear.next &&\n\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\tarea( p.prev, p, p.next ) >= 0 ) return false;\n\t\tp = p.prevZ;\n\n\t\tif ( n !== ear.prev && n !== ear.next &&\n\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&\n\t\t\tarea( n.prev, n, n.next ) >= 0 ) return false;\n\t\tn = n.nextZ;\n\n\t}\n\n\t// look for remaining points in decreasing z-order\n\twhile ( p && p.z >= minZ ) {\n\n\t\tif ( p !== ear.prev && p !== ear.next &&\n\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y ) &&\n\t\t\tarea( p.prev, p, p.next ) >= 0 ) return false;\n\t\tp = p.prevZ;\n\n\t}\n\n\t// look for remaining points in increasing z-order\n\twhile ( n && n.z <= maxZ ) {\n\n\t\tif ( n !== ear.prev && n !== ear.next &&\n\t\t\tpointInTriangle( a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y ) &&\n\t\t\tarea( n.prev, n, n.next ) >= 0 ) return false;\n\t\tn = n.nextZ;\n\n\t}\n\n\treturn true;\n\n}\n\n// go through all polygon nodes and cure small local self-intersections\nfunction cureLocalIntersections( start, triangles, dim ) {\n\n\tlet p = start;\n\tdo {\n\n\t\tconst a = p.prev,\n\t\t\tb = p.next.next;\n\n\t\tif ( ! equals( a, b ) && intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {\n\n\t\t\ttriangles.push( a.i / dim );\n\t\t\ttriangles.push( p.i / dim );\n\t\t\ttriangles.push( b.i / dim );\n\n\t\t\t// remove two nodes involved\n\t\t\tremoveNode( p );\n\t\t\tremoveNode( p.next );\n\n\t\t\tp = start = b;\n\n\t\t}\n\n\t\tp = p.next;\n\n\t} while ( p !== start );\n\n\treturn filterPoints( p );\n\n}\n\n// try splitting polygon into two and triangulate them independently\nfunction splitEarcut( start, triangles, dim, minX, minY, invSize ) {\n\n\t// look for a valid diagonal that divides the polygon into two\n\tlet a = start;\n\tdo {\n\n\t\tlet b = a.next.next;\n\t\twhile ( b !== a.prev ) {\n\n\t\t\tif ( a.i !== b.i && isValidDiagonal( a, b ) ) {\n\n\t\t\t\t// split the polygon in two by the diagonal\n\t\t\t\tlet c = splitPolygon( a, b );\n\n\t\t\t\t// filter colinear points around the cuts\n\t\t\t\ta = filterPoints( a, a.next );\n\t\t\t\tc = filterPoints( c, c.next );\n\n\t\t\t\t// run earcut on each half\n\t\t\t\tearcutLinked( a, triangles, dim, minX, minY, invSize );\n\t\t\t\tearcutLinked( c, triangles, dim, minX, minY, invSize );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tb = b.next;\n\n\t\t}\n\n\t\ta = a.next;\n\n\t} while ( a !== start );\n\n}\n\n// link every hole into the outer loop, producing a single-ring polygon without holes\nfunction eliminateHoles( data, holeIndices, outerNode, dim ) {\n\n\tconst queue = [];\n\tlet i, len, start, end, list;\n\n\tfor ( i = 0, len = holeIndices.length; i < len; i ++ ) {\n\n\t\tstart = holeIndices[ i ] * dim;\n\t\tend = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;\n\t\tlist = linkedList( data, start, end, dim, false );\n\t\tif ( list === list.next ) list.steiner = true;\n\t\tqueue.push( getLeftmost( list ) );\n\n\t}\n\n\tqueue.sort( compareX );\n\n\t// process holes from left to right\n\tfor ( i = 0; i < queue.length; i ++ ) {\n\n\t\teliminateHole( queue[ i ], outerNode );\n\t\touterNode = filterPoints( outerNode, outerNode.next );\n\n\t}\n\n\treturn outerNode;\n\n}\n\nfunction compareX( a, b ) {\n\n\treturn a.x - b.x;\n\n}\n\n// find a bridge between vertices that connects hole with an outer ring and and link it\nfunction eliminateHole( hole, outerNode ) {\n\n\touterNode = findHoleBridge( hole, outerNode );\n\tif ( outerNode ) {\n\n\t\tconst b = splitPolygon( outerNode, hole );\n\n\t\t// filter collinear points around the cuts\n\t\tfilterPoints( outerNode, outerNode.next );\n\t\tfilterPoints( b, b.next );\n\n\t}\n\n}\n\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\nfunction findHoleBridge( hole, outerNode ) {\n\n\tlet p = outerNode;\n\tconst hx = hole.x;\n\tconst hy = hole.y;\n\tlet qx = - Infinity, m;\n\n\t// find a segment intersected by a ray from the hole's leftmost point to the left;\n\t// segment's endpoint with lesser x will be potential connection point\n\tdo {\n\n\t\tif ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {\n\n\t\t\tconst x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );\n\t\t\tif ( x <= hx && x > qx ) {\n\n\t\t\t\tqx = x;\n\t\t\t\tif ( x === hx ) {\n\n\t\t\t\t\tif ( hy === p.y ) return p;\n\t\t\t\t\tif ( hy === p.next.y ) return p.next;\n\n\t\t\t\t}\n\n\t\t\t\tm = p.x < p.next.x ? p : p.next;\n\n\t\t\t}\n\n\t\t}\n\n\t\tp = p.next;\n\n\t} while ( p !== outerNode );\n\n\tif ( ! m ) return null;\n\n\tif ( hx === qx ) return m; // hole touches outer segment; pick leftmost endpoint\n\n\t// look for points inside the triangle of hole point, segment intersection and endpoint;\n\t// if there are no points found, we have a valid connection;\n\t// otherwise choose the point of the minimum angle with the ray as connection point\n\n\tconst stop = m,\n\t\tmx = m.x,\n\t\tmy = m.y;\n\tlet tanMin = Infinity, tan;\n\n\tp = m;\n\n\tdo {\n\n\t\tif ( hx >= p.x && p.x >= mx && hx !== p.x &&\n\t\t\t\tpointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {\n\n\t\t\ttan = Math.abs( hy - p.y ) / ( hx - p.x ); // tangential\n\n\t\t\tif ( locallyInside( p, hole ) && ( tan < tanMin || ( tan === tanMin && ( p.x > m.x || ( p.x === m.x && sectorContainsSector( m, p ) ) ) ) ) ) {\n\n\t\t\t\tm = p;\n\t\t\t\ttanMin = tan;\n\n\t\t\t}\n\n\t\t}\n\n\t\tp = p.next;\n\n\t} while ( p !== stop );\n\n\treturn m;\n\n}\n\n// whether sector in vertex m contains sector in vertex p in the same coordinates\nfunction sectorContainsSector( m, p ) {\n\n\treturn area( m.prev, m, p.prev ) < 0 && area( p.next, m, m.next ) < 0;\n\n}\n\n// interlink polygon nodes in z-order\nfunction indexCurve( start, minX, minY, invSize ) {\n\n\tlet p = start;\n\tdo {\n\n\t\tif ( p.z === null ) p.z = zOrder( p.x, p.y, minX, minY, invSize );\n\t\tp.prevZ = p.prev;\n\t\tp.nextZ = p.next;\n\t\tp = p.next;\n\n\t} while ( p !== start );\n\n\tp.prevZ.nextZ = null;\n\tp.prevZ = null;\n\n\tsortLinked( p );\n\n}\n\n// Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\nfunction sortLinked( list ) {\n\n\tlet i, p, q, e, tail, numMerges, pSize, qSize,\n\t\tinSize = 1;\n\n\tdo {\n\n\t\tp = list;\n\t\tlist = null;\n\t\ttail = null;\n\t\tnumMerges = 0;\n\n\t\twhile ( p ) {\n\n\t\t\tnumMerges ++;\n\t\t\tq = p;\n\t\t\tpSize = 0;\n\t\t\tfor ( i = 0; i < inSize; i ++ ) {\n\n\t\t\t\tpSize ++;\n\t\t\t\tq = q.nextZ;\n\t\t\t\tif ( ! q ) break;\n\n\t\t\t}\n\n\t\t\tqSize = inSize;\n\n\t\t\twhile ( pSize > 0 || ( qSize > 0 && q ) ) {\n\n\t\t\t\tif ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {\n\n\t\t\t\t\te = p;\n\t\t\t\t\tp = p.nextZ;\n\t\t\t\t\tpSize --;\n\n\t\t\t\t} else {\n\n\t\t\t\t\te = q;\n\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\tqSize --;\n\n\t\t\t\t}\n\n\t\t\t\tif ( tail ) tail.nextZ = e;\n\t\t\t\telse list = e;\n\n\t\t\t\te.prevZ = tail;\n\t\t\t\ttail = e;\n\n\t\t\t}\n\n\t\t\tp = q;\n\n\t\t}\n\n\t\ttail.nextZ = null;\n\t\tinSize *= 2;\n\n\t} while ( numMerges > 1 );\n\n\treturn list;\n\n}\n\n// z-order of a point given coords and inverse of the longer side of data bbox\nfunction zOrder( x, y, minX, minY, invSize ) {\n\n\t// coords are transformed into non-negative 15-bit integer range\n\tx = 32767 * ( x - minX ) * invSize;\n\ty = 32767 * ( y - minY ) * invSize;\n\n\tx = ( x | ( x << 8 ) ) & 0x00FF00FF;\n\tx = ( x | ( x << 4 ) ) & 0x0F0F0F0F;\n\tx = ( x | ( x << 2 ) ) & 0x33333333;\n\tx = ( x | ( x << 1 ) ) & 0x55555555;\n\n\ty = ( y | ( y << 8 ) ) & 0x00FF00FF;\n\ty = ( y | ( y << 4 ) ) & 0x0F0F0F0F;\n\ty = ( y | ( y << 2 ) ) & 0x33333333;\n\ty = ( y | ( y << 1 ) ) & 0x55555555;\n\n\treturn x | ( y << 1 );\n\n}\n\n// find the leftmost node of a polygon ring\nfunction getLeftmost( start ) {\n\n\tlet p = start,\n\t\tleftmost = start;\n\tdo {\n\n\t\tif ( p.x < leftmost.x || ( p.x === leftmost.x && p.y < leftmost.y ) ) leftmost = p;\n\t\tp = p.next;\n\n\t} while ( p !== start );\n\n\treturn leftmost;\n\n}\n\n// check if a point lies within a convex triangle\nfunction pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {\n\n\treturn ( cx - px ) * ( ay - py ) - ( ax - px ) * ( cy - py ) >= 0 &&\n\t\t\t( ax - px ) * ( by - py ) - ( bx - px ) * ( ay - py ) >= 0 &&\n\t\t\t( bx - px ) * ( cy - py ) - ( cx - px ) * ( by - py ) >= 0;\n\n}\n\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\nfunction isValidDiagonal( a, b ) {\n\n\treturn a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) && // dones't intersect other edges\n\t\t( locallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b ) && // locally visible\n\t\t( area( a.prev, a, b.prev ) || area( a, b.prev, b ) ) || // does not create opposite-facing sectors\n\t\tequals( a, b ) && area( a.prev, a, a.next ) > 0 && area( b.prev, b, b.next ) > 0 ); // special zero-length case\n\n}\n\n// signed area of a triangle\nfunction area( p, q, r ) {\n\n\treturn ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );\n\n}\n\n// check if two points are equal\nfunction equals( p1, p2 ) {\n\n\treturn p1.x === p2.x && p1.y === p2.y;\n\n}\n\n// check if two segments intersect\nfunction intersects( p1, q1, p2, q2 ) {\n\n\tconst o1 = sign( area( p1, q1, p2 ) );\n\tconst o2 = sign( area( p1, q1, q2 ) );\n\tconst o3 = sign( area( p2, q2, p1 ) );\n\tconst o4 = sign( area( p2, q2, q1 ) );\n\n\tif ( o1 !== o2 && o3 !== o4 ) return true; // general case\n\n\tif ( o1 === 0 && onSegment( p1, p2, q1 ) ) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n\tif ( o2 === 0 && onSegment( p1, q2, q1 ) ) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n\tif ( o3 === 0 && onSegment( p2, p1, q2 ) ) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n\tif ( o4 === 0 && onSegment( p2, q1, q2 ) ) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n\treturn false;\n\n}\n\n// for collinear points p, q, r, check if point q lies on segment pr\nfunction onSegment( p, q, r ) {\n\n\treturn q.x <= Math.max( p.x, r.x ) && q.x >= Math.min( p.x, r.x ) && q.y <= Math.max( p.y, r.y ) && q.y >= Math.min( p.y, r.y );\n\n}\n\nfunction sign( num ) {\n\n\treturn num > 0 ? 1 : num < 0 ? - 1 : 0;\n\n}\n\n// check if a polygon diagonal intersects any polygon segments\nfunction intersectsPolygon( a, b ) {\n\n\tlet p = a;\n\tdo {\n\n\t\tif ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n\t\t\t\tintersects( p, p.next, a, b ) ) return true;\n\t\tp = p.next;\n\n\t} while ( p !== a );\n\n\treturn false;\n\n}\n\n// check if a polygon diagonal is locally inside the polygon\nfunction locallyInside( a, b ) {\n\n\treturn area( a.prev, a, a.next ) < 0 ?\n\t\tarea( a, b, a.next ) >= 0 && area( a, a.prev, b ) >= 0 :\n\t\tarea( a, b, a.prev ) < 0 || area( a, a.next, b ) < 0;\n\n}\n\n// check if the middle point of a polygon diagonal is inside the polygon\nfunction middleInside( a, b ) {\n\n\tlet p = a,\n\t\tinside = false;\n\tconst px = ( a.x + b.x ) / 2,\n\t\tpy = ( a.y + b.y ) / 2;\n\tdo {\n\n\t\tif ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&\n\t\t\t\t( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) )\n\t\t\tinside = ! inside;\n\t\tp = p.next;\n\n\t} while ( p !== a );\n\n\treturn inside;\n\n}\n\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\nfunction splitPolygon( a, b ) {\n\n\tconst a2 = new Node( a.i, a.x, a.y ),\n\t\tb2 = new Node( b.i, b.x, b.y ),\n\t\tan = a.next,\n\t\tbp = b.prev;\n\n\ta.next = b;\n\tb.prev = a;\n\n\ta2.next = an;\n\tan.prev = a2;\n\n\tb2.next = a2;\n\ta2.prev = b2;\n\n\tbp.next = b2;\n\tb2.prev = bp;\n\n\treturn b2;\n\n}\n\n// create a node and optionally link it with previous one (in a circular doubly linked list)\nfunction insertNode( i, x, y, last ) {\n\n\tconst p = new Node( i, x, y );\n\n\tif ( ! last ) {\n\n\t\tp.prev = p;\n\t\tp.next = p;\n\n\t} else {\n\n\t\tp.next = last.next;\n\t\tp.prev = last;\n\t\tlast.next.prev = p;\n\t\tlast.next = p;\n\n\t}\n\n\treturn p;\n\n}\n\nfunction removeNode( p ) {\n\n\tp.next.prev = p.prev;\n\tp.prev.next = p.next;\n\n\tif ( p.prevZ ) p.prevZ.nextZ = p.nextZ;\n\tif ( p.nextZ ) p.nextZ.prevZ = p.prevZ;\n\n}\n\nfunction Node( i, x, y ) {\n\n\t// vertex index in coordinates array\n\tthis.i = i;\n\n\t// vertex coordinates\n\tthis.x = x;\n\tthis.y = y;\n\n\t// previous and next vertex nodes in a polygon ring\n\tthis.prev = null;\n\tthis.next = null;\n\n\t// z-order curve value\n\tthis.z = null;\n\n\t// previous and next nodes in z-order\n\tthis.prevZ = null;\n\tthis.nextZ = null;\n\n\t// indicates whether this is a steiner point\n\tthis.steiner = false;\n\n}\n\nfunction signedArea( data, start, end, dim ) {\n\n\tlet sum = 0;\n\tfor ( let i = start, j = end - dim; i < end; i += dim ) {\n\n\t\tsum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );\n\t\tj = i;\n\n\t}\n\n\treturn sum;\n\n}\n\nclass ShapeUtils {\n\n\t// calculate area of the contour polygon\n\n\tstatic area( contour ) {\n\n\t\tconst n = contour.length;\n\t\tlet a = 0.0;\n\n\t\tfor ( let p = n - 1, q = 0; q < n; p = q ++ ) {\n\n\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\n\n\t\t}\n\n\t\treturn a * 0.5;\n\n\t}\n\n\tstatic isClockWise( pts ) {\n\n\t\treturn ShapeUtils.area( pts ) < 0;\n\n\t}\n\n\tstatic triangulateShape( contour, holes ) {\n\n\t\tconst vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\n\t\tconst holeIndices = []; // array of hole indices\n\t\tconst faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\n\n\t\tremoveDupEndPts( contour );\n\t\taddContour( vertices, contour );\n\n\t\t//\n\n\t\tlet holeIndex = contour.length;\n\n\t\tholes.forEach( removeDupEndPts );\n\n\t\tfor ( let i = 0; i < holes.length; i ++ ) {\n\n\t\t\tholeIndices.push( holeIndex );\n\t\t\tholeIndex += holes[ i ].length;\n\t\t\taddContour( vertices, holes[ i ] );\n\n\t\t}\n\n\t\t//\n\n\t\tconst triangles = Earcut.triangulate( vertices, holeIndices );\n\n\t\t//\n\n\t\tfor ( let i = 0; i < triangles.length; i += 3 ) {\n\n\t\t\tfaces.push( triangles.slice( i, i + 3 ) );\n\n\t\t}\n\n\t\treturn faces;\n\n\t}\n\n}\n\nfunction removeDupEndPts( points ) {\n\n\tconst l = points.length;\n\n\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\n\n\t\tpoints.pop();\n\n\t}\n\n}\n\nfunction addContour( vertices, contour ) {\n\n\tfor ( let i = 0; i < contour.length; i ++ ) {\n\n\t\tvertices.push( contour[ i ].x );\n\t\tvertices.push( contour[ i ].y );\n\n\t}\n\n}\n\n/**\n * Creates extruded geometry from a path shape.\n *\n * parameters = {\n *\n *  curveSegments: <int>, // number of points on the curves\n *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n *  depth: <float>, // Depth to extrude the shape\n *\n *  bevelEnabled: <bool>, // turn on bevel\n *  bevelThickness: <float>, // how deep into the original shape bevel goes\n *  bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel\n *  bevelOffset: <float>, // how far from shape outline does bevel start\n *  bevelSegments: <int>, // number of bevel layers\n *\n *  extrudePath: <THREE.Curve> // curve to extrude shape along\n *\n *  UVGenerator: <Object> // object that provides UV generator functions\n *\n * }\n */\n\nclass ExtrudeGeometry extends BufferGeometry {\n\n\tconstructor( shapes = new Shape( [ new Vector2( 0.5, 0.5 ), new Vector2( - 0.5, 0.5 ), new Vector2( - 0.5, - 0.5 ), new Vector2( 0.5, - 0.5 ) ] ), options = {} ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'ExtrudeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\toptions: options\n\t\t};\n\n\t\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\n\n\t\tconst scope = this;\n\n\t\tconst verticesArray = [];\n\t\tconst uvArray = [];\n\n\t\tfor ( let i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\tconst shape = shapes[ i ];\n\t\t\taddShape( shape );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );\n\n\t\tthis.computeVertexNormals();\n\n\t\t// functions\n\n\t\tfunction addShape( shape ) {\n\n\t\t\tconst placeholder = [];\n\n\t\t\t// options\n\n\t\t\tconst curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\t\t\tconst steps = options.steps !== undefined ? options.steps : 1;\n\t\t\tlet depth = options.depth !== undefined ? options.depth : 1;\n\n\t\t\tlet bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;\n\t\t\tlet bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 0.2;\n\t\t\tlet bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 0.1;\n\t\t\tlet bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;\n\t\t\tlet bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\n\t\t\tconst extrudePath = options.extrudePath;\n\n\t\t\tconst uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;\n\n\t\t\t// deprecated options\n\n\t\t\tif ( options.amount !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.ExtrudeBufferGeometry: amount has been renamed to depth.' );\n\t\t\t\tdepth = options.amount;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tlet extrudePts, extrudeByPath = false;\n\t\t\tlet splineTube, binormal, normal, position2;\n\n\t\t\tif ( extrudePath ) {\n\n\t\t\t\textrudePts = extrudePath.getSpacedPoints( steps );\n\n\t\t\t\textrudeByPath = true;\n\t\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\n\t\t\t\t// SETUP TNB variables\n\n\t\t\t\t// TODO1 - have a .isClosed in spline?\n\n\t\t\t\tsplineTube = extrudePath.computeFrenetFrames( steps, false );\n\n\t\t\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n\t\t\t\tbinormal = new Vector3();\n\t\t\t\tnormal = new Vector3();\n\t\t\t\tposition2 = new Vector3();\n\n\t\t\t}\n\n\t\t\t// Safeguards if bevels are not enabled\n\n\t\t\tif ( ! bevelEnabled ) {\n\n\t\t\t\tbevelSegments = 0;\n\t\t\t\tbevelThickness = 0;\n\t\t\t\tbevelSize = 0;\n\t\t\t\tbevelOffset = 0;\n\n\t\t\t}\n\n\t\t\t// Variables initialization\n\n\t\t\tconst shapePoints = shape.extractPoints( curveSegments );\n\n\t\t\tlet vertices = shapePoints.shape;\n\t\t\tconst holes = shapePoints.holes;\n\n\t\t\tconst reverse = ! ShapeUtils.isClockWise( vertices );\n\n\t\t\tif ( reverse ) {\n\n\t\t\t\tvertices = vertices.reverse();\n\n\t\t\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n\t\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tconst ahole = holes[ h ];\n\n\t\t\t\t\tif ( ShapeUtils.isClockWise( ahole ) ) {\n\n\t\t\t\t\t\tholes[ h ] = ahole.reverse();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tconst faces = ShapeUtils.triangulateShape( vertices, holes );\n\n\t\t\t/* Vertices */\n\n\t\t\tconst contour = vertices; // vertices has all points but contour has only points of circumference\n\n\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tconst ahole = holes[ h ];\n\n\t\t\t\tvertices = vertices.concat( ahole );\n\n\t\t\t}\n\n\n\t\t\tfunction scalePt2( pt, vec, size ) {\n\n\t\t\t\tif ( ! vec ) console.error( 'THREE.ExtrudeGeometry: vec does not exist' );\n\n\t\t\t\treturn vec.clone().multiplyScalar( size ).add( pt );\n\n\t\t\t}\n\n\t\t\tconst vlen = vertices.length, flen = faces.length;\n\n\n\t\t\t// Find directions for point movement\n\n\n\t\t\tfunction getBevelVec( inPt, inPrev, inNext ) {\n\n\t\t\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t\t\t//   shifted by 1 unit (length of normalized vector) to the left\n\t\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t\t\t//\n\t\t\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t\t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\n\n\t\t\t\tlet v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\n\n\t\t\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n\t\t\t\tconst v_prev_x = inPt.x - inPrev.x,\n\t\t\t\t\tv_prev_y = inPt.y - inPrev.y;\n\t\t\t\tconst v_next_x = inNext.x - inPt.x,\n\t\t\t\t\tv_next_y = inNext.y - inPt.y;\n\n\t\t\t\tconst v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\n\n\t\t\t\t// check for collinear edges\n\t\t\t\tconst collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\n\n\t\t\t\t\t// not collinear\n\n\t\t\t\t\t// length of vectors for normalizing\n\n\t\t\t\t\tconst v_prev_len = Math.sqrt( v_prev_lensq );\n\t\t\t\t\tconst v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\n\n\t\t\t\t\t// shift adjacent points by unit vectors to the left\n\n\t\t\t\t\tconst ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\n\t\t\t\t\tconst ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\n\n\t\t\t\t\tconst ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\n\t\t\t\t\tconst ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\n\n\t\t\t\t\t// scaling factor for v_prev to intersection point\n\n\t\t\t\t\tconst sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\n\t\t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /\n\t\t\t\t\t\t( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t\t\t// vector from inPt to intersection point\n\n\t\t\t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\n\t\t\t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\n\n\t\t\t\t\t// Don't normalize!, otherwise sharp corners become ugly\n\t\t\t\t\t//  but prevent crazy spikes\n\t\t\t\t\tconst v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\n\t\t\t\t\tif ( v_trans_lensq <= 2 ) {\n\n\t\t\t\t\t\treturn new Vector2( v_trans_x, v_trans_y );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// handle special case of collinear edges\n\n\t\t\t\t\tlet direction_eq = false; // assumes: opposite\n\n\t\t\t\t\tif ( v_prev_x > Number.EPSILON ) {\n\n\t\t\t\t\t\tif ( v_next_x > Number.EPSILON ) {\n\n\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\n\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( direction_eq ) {\n\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\t\t\tv_trans_x = - v_prev_y;\n\t\t\t\t\t\tv_trans_y = v_prev_x;\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\n\n\t\t\t}\n\n\n\t\t\tconst contourMovements = [];\n\n\t\t\tfor ( let i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\t\tif ( j === il ) j = 0;\n\t\t\t\tif ( k === il ) k = 0;\n\n\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\t// console.log('i,j,k', i, j , k)\n\n\t\t\t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\n\n\t\t\t}\n\n\t\t\tconst holesMovements = [];\n\t\t\tlet oneHoleMovements, verticesMovements = contourMovements.concat();\n\n\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tconst ahole = holes[ h ];\n\n\t\t\t\toneHoleMovements = [];\n\n\t\t\t\tfor ( let i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\t\t\tif ( j === il ) j = 0;\n\t\t\t\t\tif ( k === il ) k = 0;\n\n\t\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\n\n\t\t\t\t}\n\n\t\t\t\tholesMovements.push( oneHoleMovements );\n\t\t\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\n\n\t\t\t}\n\n\n\t\t\t// Loop bevelSegments, 1 for the front, 1 for the back\n\n\t\t\tfor ( let b = 0; b < bevelSegments; b ++ ) {\n\n\t\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\n\t\t\t\tconst t = b / bevelSegments;\n\t\t\t\tconst z = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\t\tconst bs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;\n\n\t\t\t\t// contract shape\n\n\t\t\t\tfor ( let i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst vert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\n\t\t\t\t\tv( vert.x, vert.y, - z );\n\n\t\t\t\t}\n\n\t\t\t\t// expand holes\n\n\t\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tconst ahole = holes[ h ];\n\t\t\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\t\t\tfor ( let i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tconst vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\t\tv( vert.x, vert.y, - z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst bs = bevelSize + bevelOffset;\n\n\t\t\t// Back facing vertices\n\n\t\t\tfor ( let i = 0; i < vlen; i ++ ) {\n\n\t\t\t\tconst vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\tv( vert.x, vert.y, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\n\t\t\t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\n\t\t\t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\n\n\t\t\t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\n\n\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Add stepped vertices...\n\t\t\t// Including front facing vertices\n\n\t\t\tfor ( let s = 1; s <= steps; s ++ ) {\n\n\t\t\t\tfor ( let i = 0; i < vlen; i ++ ) {\n\n\t\t\t\t\tconst vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\tv( vert.x, vert.y, depth / steps * s );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\n\t\t\t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\n\t\t\t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\n\n\t\t\t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\n\n\t\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\t// Add bevel segments planes\n\n\t\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\t\t\tfor ( let b = bevelSegments - 1; b >= 0; b -- ) {\n\n\t\t\t\tconst t = b / bevelSegments;\n\t\t\t\tconst z = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\t\tconst bs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;\n\n\t\t\t\t// contract shape\n\n\t\t\t\tfor ( let i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst vert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\t\t\t\t\tv( vert.x, vert.y, depth + z );\n\n\t\t\t\t}\n\n\t\t\t\t// expand holes\n\n\t\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tconst ahole = holes[ h ];\n\t\t\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\t\t\tfor ( let i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tconst vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\t\tv( vert.x, vert.y, depth + z );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t/* Faces */\n\n\t\t\t// Top and bottom faces\n\n\t\t\tbuildLidFaces();\n\n\t\t\t// Sides faces\n\n\t\t\tbuildSideFaces();\n\n\n\t\t\t/////  Internal functions\n\n\t\t\tfunction buildLidFaces() {\n\n\t\t\t\tconst start = verticesArray.length / 3;\n\n\t\t\t\tif ( bevelEnabled ) {\n\n\t\t\t\t\tlet layer = 0; // steps + 1\n\t\t\t\t\tlet offset = vlen * layer;\n\n\t\t\t\t\t// Bottom faces\n\n\t\t\t\t\tfor ( let i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tconst face = faces[ i ];\n\t\t\t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\t\t\toffset = vlen * layer;\n\n\t\t\t\t\t// Top faces\n\n\t\t\t\t\tfor ( let i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tconst face = faces[ i ];\n\t\t\t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Bottom faces\n\n\t\t\t\t\tfor ( let i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tconst face = faces[ i ];\n\t\t\t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Top faces\n\n\t\t\t\t\tfor ( let i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tconst face = faces[ i ];\n\t\t\t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 0 );\n\n\t\t\t}\n\n\t\t\t// Create faces for the z-sides of the shape\n\n\t\t\tfunction buildSideFaces() {\n\n\t\t\t\tconst start = verticesArray.length / 3;\n\t\t\t\tlet layeroffset = 0;\n\t\t\t\tsidewalls( contour, layeroffset );\n\t\t\t\tlayeroffset += contour.length;\n\n\t\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tconst ahole = holes[ h ];\n\t\t\t\t\tsidewalls( ahole, layeroffset );\n\n\t\t\t\t\t//, true\n\t\t\t\t\tlayeroffset += ahole.length;\n\n\t\t\t\t}\n\n\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 1 );\n\n\n\t\t\t}\n\n\t\t\tfunction sidewalls( contour, layeroffset ) {\n\n\t\t\t\tlet i = contour.length;\n\n\t\t\t\twhile ( -- i >= 0 ) {\n\n\t\t\t\t\tconst j = i;\n\t\t\t\t\tlet k = i - 1;\n\t\t\t\t\tif ( k < 0 ) k = contour.length - 1;\n\n\t\t\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\n\n\t\t\t\t\tfor ( let s = 0, sl = ( steps + bevelSegments * 2 ); s < sl; s ++ ) {\n\n\t\t\t\t\t\tconst slen1 = vlen * s;\n\t\t\t\t\t\tconst slen2 = vlen * ( s + 1 );\n\n\t\t\t\t\t\tconst a = layeroffset + j + slen1,\n\t\t\t\t\t\t\tb = layeroffset + k + slen1,\n\t\t\t\t\t\t\tc = layeroffset + k + slen2,\n\t\t\t\t\t\t\td = layeroffset + j + slen2;\n\n\t\t\t\t\t\tf4( a, b, c, d );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction v( x, y, z ) {\n\n\t\t\t\tplaceholder.push( x );\n\t\t\t\tplaceholder.push( y );\n\t\t\t\tplaceholder.push( z );\n\n\t\t\t}\n\n\n\t\t\tfunction f3( a, b, c ) {\n\n\t\t\t\taddVertex( a );\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( c );\n\n\t\t\t\tconst nextIndex = verticesArray.length / 3;\n\t\t\t\tconst uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\t\taddUV( uvs[ 0 ] );\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 2 ] );\n\n\t\t\t}\n\n\t\t\tfunction f4( a, b, c, d ) {\n\n\t\t\t\taddVertex( a );\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( d );\n\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( c );\n\t\t\t\taddVertex( d );\n\n\n\t\t\t\tconst nextIndex = verticesArray.length / 3;\n\t\t\t\tconst uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\t\taddUV( uvs[ 0 ] );\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 3 ] );\n\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 2 ] );\n\t\t\t\taddUV( uvs[ 3 ] );\n\n\t\t\t}\n\n\t\t\tfunction addVertex( index ) {\n\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 0 ] );\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 1 ] );\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 2 ] );\n\n\t\t\t}\n\n\n\t\t\tfunction addUV( vector2 ) {\n\n\t\t\t\tuvArray.push( vector2.x );\n\t\t\t\tuvArray.push( vector2.y );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tconst shapes = this.parameters.shapes;\n\t\tconst options = this.parameters.options;\n\n\t\treturn toJSON$1( shapes, options, data );\n\n\t}\n\n\tstatic fromJSON( data, shapes ) {\n\n\t\tconst geometryShapes = [];\n\n\t\tfor ( let j = 0, jl = data.shapes.length; j < jl; j ++ ) {\n\n\t\t\tconst shape = shapes[ data.shapes[ j ] ];\n\n\t\t\tgeometryShapes.push( shape );\n\n\t\t}\n\n\t\tconst extrudePath = data.options.extrudePath;\n\n\t\tif ( extrudePath !== undefined ) {\n\n\t\t\tdata.options.extrudePath = new Curves[ extrudePath.type ]().fromJSON( extrudePath );\n\n\t\t}\n\n\t\treturn new ExtrudeGeometry( geometryShapes, data.options );\n\n\t}\n\n}\n\nconst WorldUVGenerator = {\n\n\tgenerateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {\n\n\t\tconst a_x = vertices[ indexA * 3 ];\n\t\tconst a_y = vertices[ indexA * 3 + 1 ];\n\t\tconst b_x = vertices[ indexB * 3 ];\n\t\tconst b_y = vertices[ indexB * 3 + 1 ];\n\t\tconst c_x = vertices[ indexC * 3 ];\n\t\tconst c_y = vertices[ indexC * 3 + 1 ];\n\n\t\treturn [\n\t\t\tnew Vector2( a_x, a_y ),\n\t\t\tnew Vector2( b_x, b_y ),\n\t\t\tnew Vector2( c_x, c_y )\n\t\t];\n\n\t},\n\n\tgenerateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {\n\n\t\tconst a_x = vertices[ indexA * 3 ];\n\t\tconst a_y = vertices[ indexA * 3 + 1 ];\n\t\tconst a_z = vertices[ indexA * 3 + 2 ];\n\t\tconst b_x = vertices[ indexB * 3 ];\n\t\tconst b_y = vertices[ indexB * 3 + 1 ];\n\t\tconst b_z = vertices[ indexB * 3 + 2 ];\n\t\tconst c_x = vertices[ indexC * 3 ];\n\t\tconst c_y = vertices[ indexC * 3 + 1 ];\n\t\tconst c_z = vertices[ indexC * 3 + 2 ];\n\t\tconst d_x = vertices[ indexD * 3 ];\n\t\tconst d_y = vertices[ indexD * 3 + 1 ];\n\t\tconst d_z = vertices[ indexD * 3 + 2 ];\n\n\t\tif ( Math.abs( a_y - b_y ) < Math.abs( a_x - b_x ) ) {\n\n\t\t\treturn [\n\t\t\t\tnew Vector2( a_x, 1 - a_z ),\n\t\t\t\tnew Vector2( b_x, 1 - b_z ),\n\t\t\t\tnew Vector2( c_x, 1 - c_z ),\n\t\t\t\tnew Vector2( d_x, 1 - d_z )\n\t\t\t];\n\n\t\t} else {\n\n\t\t\treturn [\n\t\t\t\tnew Vector2( a_y, 1 - a_z ),\n\t\t\t\tnew Vector2( b_y, 1 - b_z ),\n\t\t\t\tnew Vector2( c_y, 1 - c_z ),\n\t\t\t\tnew Vector2( d_y, 1 - d_z )\n\t\t\t];\n\n\t\t}\n\n\t}\n\n};\n\nfunction toJSON$1( shapes, options, data ) {\n\n\tdata.shapes = [];\n\n\tif ( Array.isArray( shapes ) ) {\n\n\t\tfor ( let i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\tconst shape = shapes[ i ];\n\n\t\t\tdata.shapes.push( shape.uuid );\n\n\t\t}\n\n\t} else {\n\n\t\tdata.shapes.push( shapes.uuid );\n\n\t}\n\n\tif ( options.extrudePath !== undefined ) data.options.extrudePath = options.extrudePath.toJSON();\n\n\treturn data;\n\n}\n\nclass IcosahedronGeometry extends PolyhedronGeometry {\n\n\tconstructor( radius = 1, detail = 0 ) {\n\n\t\tconst t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\n\t\tconst vertices = [\n\t\t\t- 1, t, 0, \t1, t, 0, \t- 1, - t, 0, \t1, - t, 0,\n\t\t\t0, - 1, t, \t0, 1, t,\t0, - 1, - t, \t0, 1, - t,\n\t\t\tt, 0, - 1, \tt, 0, 1, \t- t, 0, - 1, \t- t, 0, 1\n\t\t];\n\n\t\tconst indices = [\n\t\t\t0, 11, 5, \t0, 5, 1, \t0, 1, 7, \t0, 7, 10, \t0, 10, 11,\n\t\t\t1, 5, 9, \t5, 11, 4,\t11, 10, 2,\t10, 7, 6,\t7, 1, 8,\n\t\t\t3, 9, 4, \t3, 4, 2,\t3, 2, 6,\t3, 6, 8,\t3, 8, 9,\n\t\t\t4, 9, 5, \t2, 4, 11,\t6, 2, 10,\t8, 6, 7,\t9, 8, 1\n\t\t];\n\n\t\tsuper( vertices, indices, radius, detail );\n\n\t\tthis.type = 'IcosahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new IcosahedronGeometry( data.radius, data.detail );\n\n\t}\n\n}\n\nclass LatheGeometry extends BufferGeometry {\n\n\tconstructor( points = [ new Vector2( 0, 0.5 ), new Vector2( 0.5, 0 ), new Vector2( 0, - 0.5 ) ], segments = 12, phiStart = 0, phiLength = Math.PI * 2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'LatheGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpoints: points,\n\t\t\tsegments: segments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength\n\t\t};\n\n\t\tsegments = Math.floor( segments );\n\n\t\t// clamp phiLength so it's in range of [ 0, 2PI ]\n\n\t\tphiLength = clamp( phiLength, 0, Math.PI * 2 );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tconst inverseSegments = 1.0 / segments;\n\t\tconst vertex = new Vector3();\n\t\tconst uv = new Vector2();\n\n\t\t// generate vertices and uvs\n\n\t\tfor ( let i = 0; i <= segments; i ++ ) {\n\n\t\t\tconst phi = phiStart + i * inverseSegments * phiLength;\n\n\t\t\tconst sin = Math.sin( phi );\n\t\t\tconst cos = Math.cos( phi );\n\n\t\t\tfor ( let j = 0; j <= ( points.length - 1 ); j ++ ) {\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = points[ j ].x * sin;\n\t\t\t\tvertex.y = points[ j ].y;\n\t\t\t\tvertex.z = points[ j ].x * cos;\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = i / segments;\n\t\t\t\tuv.y = j / ( points.length - 1 );\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\n\t\t\t}\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( let i = 0; i < segments; i ++ ) {\n\n\t\t\tfor ( let j = 0; j < ( points.length - 1 ); j ++ ) {\n\n\t\t\t\tconst base = j + i * points.length;\n\n\t\t\t\tconst a = base;\n\t\t\t\tconst b = base + points.length;\n\t\t\t\tconst c = base + points.length + 1;\n\t\t\t\tconst d = base + 1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// generate normals\n\n\t\tthis.computeVertexNormals();\n\n\t\t// if the geometry is closed, we need to average the normals along the seam.\n\t\t// because the corresponding vertices are identical (but still have different UVs).\n\n\t\tif ( phiLength === Math.PI * 2 ) {\n\n\t\t\tconst normals = this.attributes.normal.array;\n\t\t\tconst n1 = new Vector3();\n\t\t\tconst n2 = new Vector3();\n\t\t\tconst n = new Vector3();\n\n\t\t\t// this is the buffer offset for the last line of vertices\n\n\t\t\tconst base = segments * points.length * 3;\n\n\t\t\tfor ( let i = 0, j = 0; i < points.length; i ++, j += 3 ) {\n\n\t\t\t\t// select the normal of the vertex in the first line\n\n\t\t\t\tn1.x = normals[ j + 0 ];\n\t\t\t\tn1.y = normals[ j + 1 ];\n\t\t\t\tn1.z = normals[ j + 2 ];\n\n\t\t\t\t// select the normal of the vertex in the last line\n\n\t\t\t\tn2.x = normals[ base + j + 0 ];\n\t\t\t\tn2.y = normals[ base + j + 1 ];\n\t\t\t\tn2.z = normals[ base + j + 2 ];\n\n\t\t\t\t// average normals\n\n\t\t\t\tn.addVectors( n1, n2 ).normalize();\n\n\t\t\t\t// assign the new values to both normals\n\n\t\t\t\tnormals[ j + 0 ] = normals[ base + j + 0 ] = n.x;\n\t\t\t\tnormals[ j + 1 ] = normals[ base + j + 1 ] = n.y;\n\t\t\t\tnormals[ j + 2 ] = normals[ base + j + 2 ] = n.z;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new LatheGeometry( data.points, data.segments, data.phiStart, data.phiLength );\n\n\t}\n\n}\n\nclass OctahedronGeometry extends PolyhedronGeometry {\n\n\tconstructor( radius = 1, detail = 0 ) {\n\n\t\tconst vertices = [\n\t\t\t1, 0, 0, \t- 1, 0, 0,\t0, 1, 0,\n\t\t\t0, - 1, 0, \t0, 0, 1,\t0, 0, - 1\n\t\t];\n\n\t\tconst indices = [\n\t\t\t0, 2, 4,\t0, 4, 3,\t0, 3, 5,\n\t\t\t0, 5, 2,\t1, 2, 5,\t1, 5, 3,\n\t\t\t1, 3, 4,\t1, 4, 2\n\t\t];\n\n\t\tsuper( vertices, indices, radius, detail );\n\n\t\tthis.type = 'OctahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new OctahedronGeometry( data.radius, data.detail );\n\n\t}\n\n}\n\nclass RingGeometry extends BufferGeometry {\n\n\tconstructor( innerRadius = 0.5, outerRadius = 1, thetaSegments = 8, phiSegments = 1, thetaStart = 0, thetaLength = Math.PI * 2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'RingGeometry';\n\n\t\tthis.parameters = {\n\t\t\tinnerRadius: innerRadius,\n\t\t\touterRadius: outerRadius,\n\t\t\tthetaSegments: thetaSegments,\n\t\t\tphiSegments: phiSegments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthetaSegments = Math.max( 3, thetaSegments );\n\t\tphiSegments = Math.max( 1, phiSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// some helper variables\n\n\t\tlet radius = innerRadius;\n\t\tconst radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n\t\tconst vertex = new Vector3();\n\t\tconst uv = new Vector2();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( let j = 0; j <= phiSegments; j ++ ) {\n\n\t\t\tfor ( let i = 0; i <= thetaSegments; i ++ ) {\n\n\t\t\t\t// values are generate from the inside of the ring to the outside\n\n\t\t\t\tconst segment = thetaStart + i / thetaSegments * thetaLength;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\n\t\t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t}\n\n\t\t\t// increase the radius for next row of vertices\n\n\t\t\tradius += radiusStep;\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( let j = 0; j < phiSegments; j ++ ) {\n\n\t\t\tconst thetaSegmentLevel = j * ( thetaSegments + 1 );\n\n\t\t\tfor ( let i = 0; i < thetaSegments; i ++ ) {\n\n\t\t\t\tconst segment = i + thetaSegmentLevel;\n\n\t\t\t\tconst a = segment;\n\t\t\t\tconst b = segment + thetaSegments + 1;\n\t\t\t\tconst c = segment + thetaSegments + 2;\n\t\t\t\tconst d = segment + 1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new RingGeometry( data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\nclass ShapeGeometry extends BufferGeometry {\n\n\tconstructor( shapes = new Shape( [ new Vector2( 0, 0.5 ), new Vector2( - 0.5, - 0.5 ), new Vector2( 0.5, - 0.5 ) ] ), curveSegments = 12 ) {\n\n\t\tsuper();\n\t\tthis.type = 'ShapeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\tcurveSegments: curveSegments\n\t\t};\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tlet groupStart = 0;\n\t\tlet groupCount = 0;\n\n\t\t// allow single and array values for \"shapes\" parameter\n\n\t\tif ( Array.isArray( shapes ) === false ) {\n\n\t\t\taddShape( shapes );\n\n\t\t} else {\n\n\t\t\tfor ( let i = 0; i < shapes.length; i ++ ) {\n\n\t\t\t\taddShape( shapes[ i ] );\n\n\t\t\t\tthis.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support\n\n\t\t\t\tgroupStart += groupCount;\n\t\t\t\tgroupCount = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\n\t\t// helper functions\n\n\t\tfunction addShape( shape ) {\n\n\t\t\tconst indexOffset = vertices.length / 3;\n\t\t\tconst points = shape.extractPoints( curveSegments );\n\n\t\t\tlet shapeVertices = points.shape;\n\t\t\tconst shapeHoles = points.holes;\n\n\t\t\t// check direction of vertices\n\n\t\t\tif ( ShapeUtils.isClockWise( shapeVertices ) === false ) {\n\n\t\t\t\tshapeVertices = shapeVertices.reverse();\n\n\t\t\t}\n\n\t\t\tfor ( let i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\tconst shapeHole = shapeHoles[ i ];\n\n\t\t\t\tif ( ShapeUtils.isClockWise( shapeHole ) === true ) {\n\n\t\t\t\t\tshapeHoles[ i ] = shapeHole.reverse();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );\n\n\t\t\t// join vertices of inner and outer paths to a single array\n\n\t\t\tfor ( let i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\tconst shapeHole = shapeHoles[ i ];\n\t\t\t\tshapeVertices = shapeVertices.concat( shapeHole );\n\n\t\t\t}\n\n\t\t\t// vertices, normals, uvs\n\n\t\t\tfor ( let i = 0, l = shapeVertices.length; i < l; i ++ ) {\n\n\t\t\t\tconst vertex = shapeVertices[ i ];\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, 0 );\n\t\t\t\tnormals.push( 0, 0, 1 );\n\t\t\t\tuvs.push( vertex.x, vertex.y ); // world uvs\n\n\t\t\t}\n\n\t\t\t// incides\n\n\t\t\tfor ( let i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tconst face = faces[ i ];\n\n\t\t\t\tconst a = face[ 0 ] + indexOffset;\n\t\t\t\tconst b = face[ 1 ] + indexOffset;\n\t\t\t\tconst c = face[ 2 ] + indexOffset;\n\n\t\t\t\tindices.push( a, b, c );\n\t\t\t\tgroupCount += 3;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tconst shapes = this.parameters.shapes;\n\n\t\treturn toJSON( shapes, data );\n\n\t}\n\n\tstatic fromJSON( data, shapes ) {\n\n\t\tconst geometryShapes = [];\n\n\t\tfor ( let j = 0, jl = data.shapes.length; j < jl; j ++ ) {\n\n\t\t\tconst shape = shapes[ data.shapes[ j ] ];\n\n\t\t\tgeometryShapes.push( shape );\n\n\t\t}\n\n\t\treturn new ShapeGeometry( geometryShapes, data.curveSegments );\n\n\t}\n\n}\n\nfunction toJSON( shapes, data ) {\n\n\tdata.shapes = [];\n\n\tif ( Array.isArray( shapes ) ) {\n\n\t\tfor ( let i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\tconst shape = shapes[ i ];\n\n\t\t\tdata.shapes.push( shape.uuid );\n\n\t\t}\n\n\t} else {\n\n\t\tdata.shapes.push( shapes.uuid );\n\n\t}\n\n\treturn data;\n\n}\n\nclass SphereGeometry extends BufferGeometry {\n\n\tconstructor( radius = 1, widthSegments = 32, heightSegments = 16, phiStart = 0, phiLength = Math.PI * 2, thetaStart = 0, thetaLength = Math.PI ) {\n\n\t\tsuper();\n\t\tthis.type = 'SphereGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\twidthSegments = Math.max( 3, Math.floor( widthSegments ) );\n\t\theightSegments = Math.max( 2, Math.floor( heightSegments ) );\n\n\t\tconst thetaEnd = Math.min( thetaStart + thetaLength, Math.PI );\n\n\t\tlet index = 0;\n\t\tconst grid = [];\n\n\t\tconst vertex = new Vector3();\n\t\tconst normal = new Vector3();\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( let iy = 0; iy <= heightSegments; iy ++ ) {\n\n\t\t\tconst verticesRow = [];\n\n\t\t\tconst v = iy / heightSegments;\n\n\t\t\t// special case for the poles\n\n\t\t\tlet uOffset = 0;\n\n\t\t\tif ( iy == 0 && thetaStart == 0 ) {\n\n\t\t\t\tuOffset = 0.5 / widthSegments;\n\n\t\t\t} else if ( iy == heightSegments && thetaEnd == Math.PI ) {\n\n\t\t\t\tuOffset = - 0.5 / widthSegments;\n\n\t\t\t}\n\n\t\t\tfor ( let ix = 0; ix <= widthSegments; ix ++ ) {\n\n\t\t\t\tconst u = ix / widthSegments;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\t\t\t\tvertex.y = radius * Math.cos( thetaStart + v * thetaLength );\n\t\t\t\tvertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.copy( vertex ).normalize();\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( u + uOffset, 1 - v );\n\n\t\t\t\tverticesRow.push( index ++ );\n\n\t\t\t}\n\n\t\t\tgrid.push( verticesRow );\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( let iy = 0; iy < heightSegments; iy ++ ) {\n\n\t\t\tfor ( let ix = 0; ix < widthSegments; ix ++ ) {\n\n\t\t\t\tconst a = grid[ iy ][ ix + 1 ];\n\t\t\t\tconst b = grid[ iy ][ ix ];\n\t\t\t\tconst c = grid[ iy + 1 ][ ix ];\n\t\t\t\tconst d = grid[ iy + 1 ][ ix + 1 ];\n\n\t\t\t\tif ( iy !== 0 || thetaStart > 0 ) indices.push( a, b, d );\n\t\t\t\tif ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new SphereGeometry( data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\nclass TetrahedronGeometry extends PolyhedronGeometry {\n\n\tconstructor( radius = 1, detail = 0 ) {\n\n\t\tconst vertices = [\n\t\t\t1, 1, 1, \t- 1, - 1, 1, \t- 1, 1, - 1, \t1, - 1, - 1\n\t\t];\n\n\t\tconst indices = [\n\t\t\t2, 1, 0, \t0, 3, 2,\t1, 3, 0,\t2, 3, 1\n\t\t];\n\n\t\tsuper( vertices, indices, radius, detail );\n\n\t\tthis.type = 'TetrahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new TetrahedronGeometry( data.radius, data.detail );\n\n\t}\n\n}\n\nclass TorusGeometry extends BufferGeometry {\n\n\tconstructor( radius = 1, tube = 0.4, radialSegments = 8, tubularSegments = 6, arc = Math.PI * 2 ) {\n\n\t\tsuper();\n\t\tthis.type = 'TorusGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\tradialSegments: radialSegments,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tarc: arc\n\t\t};\n\n\t\tradialSegments = Math.floor( radialSegments );\n\t\ttubularSegments = Math.floor( tubularSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tconst center = new Vector3();\n\t\tconst vertex = new Vector3();\n\t\tconst normal = new Vector3();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( let j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( let i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tconst u = i / tubularSegments * arc;\n\t\t\t\tconst v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n\t\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n\t\t\t\tvertex.z = tube * Math.sin( v );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tcenter.x = radius * Math.cos( u );\n\t\t\t\tcenter.y = radius * Math.sin( u );\n\t\t\t\tnormal.subVectors( vertex, center ).normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( let j = 1; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( let i = 1; i <= tubularSegments; i ++ ) {\n\n\t\t\t\t// indices\n\n\t\t\t\tconst a = ( tubularSegments + 1 ) * j + i - 1;\n\t\t\t\tconst b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n\t\t\t\tconst c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n\t\t\t\tconst d = ( tubularSegments + 1 ) * j + i;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new TorusGeometry( data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc );\n\n\t}\n\n}\n\nclass TorusKnotGeometry extends BufferGeometry {\n\n\tconstructor( radius = 1, tube = 0.4, tubularSegments = 64, radialSegments = 8, p = 2, q = 3 ) {\n\n\t\tsuper();\n\t\tthis.type = 'TorusKnotGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t\tp: p,\n\t\t\tq: q\n\t\t};\n\n\t\ttubularSegments = Math.floor( tubularSegments );\n\t\tradialSegments = Math.floor( radialSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tconst vertex = new Vector3();\n\t\tconst normal = new Vector3();\n\n\t\tconst P1 = new Vector3();\n\t\tconst P2 = new Vector3();\n\n\t\tconst B = new Vector3();\n\t\tconst T = new Vector3();\n\t\tconst N = new Vector3();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( let i = 0; i <= tubularSegments; ++ i ) {\n\n\t\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\n\n\t\t\tconst u = i / tubularSegments * p * Math.PI * 2;\n\n\t\t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n\t\t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\n\t\t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\n\n\t\t\t// calculate orthonormal basis\n\n\t\t\tT.subVectors( P2, P1 );\n\t\t\tN.addVectors( P2, P1 );\n\t\t\tB.crossVectors( T, N );\n\t\t\tN.crossVectors( B, T );\n\n\t\t\t// normalize B, N. T can be ignored, we don't use it\n\n\t\t\tB.normalize();\n\t\t\tN.normalize();\n\n\t\t\tfor ( let j = 0; j <= radialSegments; ++ j ) {\n\n\t\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\n\t\t\t\tconst v = j / radialSegments * Math.PI * 2;\n\t\t\t\tconst cx = - tube * Math.cos( v );\n\t\t\t\tconst cy = tube * Math.sin( v );\n\n\t\t\t\t// now calculate the final vertex position.\n\t\t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\n\n\t\t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\n\t\t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\n\t\t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\n\t\t\t\tnormal.subVectors( vertex, P1 ).normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( let j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\tfor ( let i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\t// indices\n\n\t\t\t\tconst a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\tconst b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\tconst c = ( radialSegments + 1 ) * j + i;\n\t\t\t\tconst d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// this function calculates the current position on the torus curve\n\n\t\tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\n\n\t\t\tconst cu = Math.cos( u );\n\t\t\tconst su = Math.sin( u );\n\t\t\tconst quOverP = q / p * u;\n\t\t\tconst cs = Math.cos( quOverP );\n\n\t\t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\n\t\t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\n\t\t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\n\n\t\t}\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new TorusKnotGeometry( data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q );\n\n\t}\n\n}\n\nclass TubeGeometry extends BufferGeometry {\n\n\tconstructor( path = new QuadraticBezierCurve3( new Vector3( - 1, - 1, 0 ), new Vector3( - 1, 1, 0 ), new Vector3( 1, 1, 0 ) ), tubularSegments = 64, radius = 1, radialSegments = 8, closed = false ) {\n\n\t\tsuper();\n\t\tthis.type = 'TubeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpath: path,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradius: radius,\n\t\t\tradialSegments: radialSegments,\n\t\t\tclosed: closed\n\t\t};\n\n\t\tconst frames = path.computeFrenetFrames( tubularSegments, closed );\n\n\t\t// expose internals\n\n\t\tthis.tangents = frames.tangents;\n\t\tthis.normals = frames.normals;\n\t\tthis.binormals = frames.binormals;\n\n\t\t// helper variables\n\n\t\tconst vertex = new Vector3();\n\t\tconst normal = new Vector3();\n\t\tconst uv = new Vector2();\n\t\tlet P = new Vector3();\n\n\t\t// buffer\n\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\t\tconst indices = [];\n\n\t\t// create buffer data\n\n\t\tgenerateBufferData();\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// functions\n\n\t\tfunction generateBufferData() {\n\n\t\t\tfor ( let i = 0; i < tubularSegments; i ++ ) {\n\n\t\t\t\tgenerateSegment( i );\n\n\t\t\t}\n\n\t\t\t// if the geometry is not closed, generate the last row of vertices and normals\n\t\t\t// at the regular position on the given path\n\t\t\t//\n\t\t\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n\n\t\t\tgenerateSegment( ( closed === false ) ? tubularSegments : 0 );\n\n\t\t\t// uvs are generated in a separate function.\n\t\t\t// this makes it easy compute correct values for closed geometries\n\n\t\t\tgenerateUVs();\n\n\t\t\t// finally create faces\n\n\t\t\tgenerateIndices();\n\n\t\t}\n\n\t\tfunction generateSegment( i ) {\n\n\t\t\t// we use getPointAt to sample evenly distributed points from the given path\n\n\t\t\tP = path.getPointAt( i / tubularSegments, P );\n\n\t\t\t// retrieve corresponding normal and binormal\n\n\t\t\tconst N = frames.normals[ i ];\n\t\t\tconst B = frames.binormals[ i ];\n\n\t\t\t// generate normals and vertices for the current segment\n\n\t\t\tfor ( let j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\tconst v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\tconst sin = Math.sin( v );\n\t\t\t\tconst cos = - Math.cos( v );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.x = ( cos * N.x + sin * B.x );\n\t\t\t\tnormal.y = ( cos * N.y + sin * B.y );\n\t\t\t\tnormal.z = ( cos * N.z + sin * B.z );\n\t\t\t\tnormal.normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = P.x + radius * normal.x;\n\t\t\t\tvertex.y = P.y + radius * normal.y;\n\t\t\t\tvertex.z = P.z + radius * normal.z;\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateIndices() {\n\n\t\t\tfor ( let j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\t\tfor ( let i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\t\tconst a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\t\tconst b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\t\tconst c = ( radialSegments + 1 ) * j + i;\n\t\t\t\t\tconst d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateUVs() {\n\n\t\t\tfor ( let i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tfor ( let j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\t\tuv.x = i / tubularSegments;\n\t\t\t\t\tuv.y = j / radialSegments;\n\n\t\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.path = this.parameters.path.toJSON();\n\n\t\treturn data;\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\t// This only works for built-in curves (e.g. CatmullRomCurve3).\n\t\t// User defined curves or instances of CurvePath will not be deserialized.\n\t\treturn new TubeGeometry(\n\t\t\tnew Curves[ data.path.type ]().fromJSON( data.path ),\n\t\t\tdata.tubularSegments,\n\t\t\tdata.radius,\n\t\t\tdata.radialSegments,\n\t\t\tdata.closed\n\t\t);\n\n\t}\n\n}\n\nclass WireframeGeometry extends BufferGeometry {\n\n\tconstructor( geometry = null ) {\n\n\t\tsuper();\n\t\tthis.type = 'WireframeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tgeometry: geometry\n\t\t};\n\n\t\tif ( geometry !== null ) {\n\n\t\t\t// buffer\n\n\t\t\tconst vertices = [];\n\t\t\tconst edges = new Set();\n\n\t\t\t// helper variables\n\n\t\t\tconst start = new Vector3();\n\t\t\tconst end = new Vector3();\n\n\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t// indexed BufferGeometry\n\n\t\t\t\tconst position = geometry.attributes.position;\n\t\t\t\tconst indices = geometry.index;\n\t\t\t\tlet groups = geometry.groups;\n\n\t\t\t\tif ( groups.length === 0 ) {\n\n\t\t\t\t\tgroups = [ { start: 0, count: indices.count, materialIndex: 0 } ];\n\n\t\t\t\t}\n\n\t\t\t\t// create a data structure that contains all eges without duplicates\n\n\t\t\t\tfor ( let o = 0, ol = groups.length; o < ol; ++ o ) {\n\n\t\t\t\t\tconst group = groups[ o ];\n\n\t\t\t\t\tconst groupStart = group.start;\n\t\t\t\t\tconst groupCount = group.count;\n\n\t\t\t\t\tfor ( let i = groupStart, l = ( groupStart + groupCount ); i < l; i += 3 ) {\n\n\t\t\t\t\t\tfor ( let j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t\tconst index1 = indices.getX( i + j );\n\t\t\t\t\t\t\tconst index2 = indices.getX( i + ( j + 1 ) % 3 );\n\n\t\t\t\t\t\t\tstart.fromBufferAttribute( position, index1 );\n\t\t\t\t\t\t\tend.fromBufferAttribute( position, index2 );\n\n\t\t\t\t\t\t\tif ( isUniqueEdge( start, end, edges ) === true ) {\n\n\t\t\t\t\t\t\t\tvertices.push( start.x, start.y, start.z );\n\t\t\t\t\t\t\t\tvertices.push( end.x, end.y, end.z );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed BufferGeometry\n\n\t\t\t\tconst position = geometry.attributes.position;\n\n\t\t\t\tfor ( let i = 0, l = ( position.count / 3 ); i < l; i ++ ) {\n\n\t\t\t\t\tfor ( let j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t// three edges per triangle, an edge is represented as (index1, index2)\n\t\t\t\t\t\t// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\n\n\t\t\t\t\t\tconst index1 = 3 * i + j;\n\t\t\t\t\t\tconst index2 = 3 * i + ( ( j + 1 ) % 3 );\n\n\t\t\t\t\t\tstart.fromBufferAttribute( position, index1 );\n\t\t\t\t\t\tend.fromBufferAttribute( position, index2 );\n\n\t\t\t\t\t\tif ( isUniqueEdge( start, end, edges ) === true ) {\n\n\t\t\t\t\t\t\tvertices.push( start.x, start.y, start.z );\n\t\t\t\t\t\t\tvertices.push( end.x, end.y, end.z );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// build geometry\n\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t\t}\n\n\t}\n\n}\n\nfunction isUniqueEdge( start, end, edges ) {\n\n\tconst hash1 = `${start.x},${start.y},${start.z}-${end.x},${end.y},${end.z}`;\n\tconst hash2 = `${end.x},${end.y},${end.z}-${start.x},${start.y},${start.z}`; // coincident edge\n\n\tif ( edges.has( hash1 ) === true || edges.has( hash2 ) === true ) {\n\n\t\treturn false;\n\n\t} else {\n\n\t\tedges.add( hash1, hash2 );\n\t\treturn true;\n\n\t}\n\n}\n\nvar Geometries = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tBoxGeometry: BoxGeometry,\n\tBoxBufferGeometry: BoxGeometry,\n\tCircleGeometry: CircleGeometry,\n\tCircleBufferGeometry: CircleGeometry,\n\tConeGeometry: ConeGeometry,\n\tConeBufferGeometry: ConeGeometry,\n\tCylinderGeometry: CylinderGeometry,\n\tCylinderBufferGeometry: CylinderGeometry,\n\tDodecahedronGeometry: DodecahedronGeometry,\n\tDodecahedronBufferGeometry: DodecahedronGeometry,\n\tEdgesGeometry: EdgesGeometry,\n\tExtrudeGeometry: ExtrudeGeometry,\n\tExtrudeBufferGeometry: ExtrudeGeometry,\n\tIcosahedronGeometry: IcosahedronGeometry,\n\tIcosahedronBufferGeometry: IcosahedronGeometry,\n\tLatheGeometry: LatheGeometry,\n\tLatheBufferGeometry: LatheGeometry,\n\tOctahedronGeometry: OctahedronGeometry,\n\tOctahedronBufferGeometry: OctahedronGeometry,\n\tPlaneGeometry: PlaneGeometry,\n\tPlaneBufferGeometry: PlaneGeometry,\n\tPolyhedronGeometry: PolyhedronGeometry,\n\tPolyhedronBufferGeometry: PolyhedronGeometry,\n\tRingGeometry: RingGeometry,\n\tRingBufferGeometry: RingGeometry,\n\tShapeGeometry: ShapeGeometry,\n\tShapeBufferGeometry: ShapeGeometry,\n\tSphereGeometry: SphereGeometry,\n\tSphereBufferGeometry: SphereGeometry,\n\tTetrahedronGeometry: TetrahedronGeometry,\n\tTetrahedronBufferGeometry: TetrahedronGeometry,\n\tTorusGeometry: TorusGeometry,\n\tTorusBufferGeometry: TorusGeometry,\n\tTorusKnotGeometry: TorusKnotGeometry,\n\tTorusKnotBufferGeometry: TorusKnotGeometry,\n\tTubeGeometry: TubeGeometry,\n\tTubeBufferGeometry: TubeGeometry,\n\tWireframeGeometry: WireframeGeometry\n});\n\n/**\n * parameters = {\n *  color: <THREE.Color>\n * }\n */\n\nclass ShadowMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'ShadowMaterial';\n\n\t\tthis.color = new Color( 0x000000 );\n\t\tthis.transparent = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\treturn this;\n\n\t}\n\n}\n\nShadowMaterial.prototype.isShadowMaterial = true;\n\n/**\n * parameters = {\n *  color: <hex>,\n *  roughness: <float>,\n *  metalness: <float>,\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  emissive: <hex>,\n *  emissiveIntensity: <float>\n *  emissiveMap: new THREE.Texture( <Image> ),\n *\n *  bumpMap: new THREE.Texture( <Image> ),\n *  bumpScale: <float>,\n *\n *  normalMap: new THREE.Texture( <Image> ),\n *  normalMapType: THREE.TangentSpaceNormalMap,\n *  normalScale: <Vector2>,\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  roughnessMap: new THREE.Texture( <Image> ),\n *\n *  metalnessMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n *  envMapIntensity: <float>\n *\n *  refractionRatio: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  flatShading: <bool>\n * }\n */\n\nclass MeshStandardMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.type = 'MeshStandardMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\tthis.roughness = 1.0;\n\t\tthis.metalness = 0.0;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.roughnessMap = null;\n\n\t\tthis.metalnessMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.envMapIntensity = 1.0;\n\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.flatShading = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.color.copy( source.color );\n\t\tthis.roughness = source.roughness;\n\t\tthis.metalness = source.metalness;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.roughnessMap = source.roughnessMap;\n\n\t\tthis.metalnessMap = source.metalnessMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.envMapIntensity = source.envMapIntensity;\n\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\treturn this;\n\n\t}\n\n}\n\nMeshStandardMaterial.prototype.isMeshStandardMaterial = true;\n\n/**\n * parameters = {\n *  clearcoat: <float>,\n *  clearcoatMap: new THREE.Texture( <Image> ),\n *  clearcoatRoughness: <float>,\n *  clearcoatRoughnessMap: new THREE.Texture( <Image> ),\n *  clearcoatNormalScale: <Vector2>,\n *  clearcoatNormalMap: new THREE.Texture( <Image> ),\n *\n *  ior: <float>,\n *  reflectivity: <float>,\n *\n *  sheen: <float>,\n *  sheenColor: <Color>,\n *  sheenColorMap: new THREE.Texture( <Image> ),\n *  sheenRoughness: <float>,\n *  sheenRoughnessMap: new THREE.Texture( <Image> ),\n *\n *  transmission: <float>,\n *  transmissionMap: new THREE.Texture( <Image> ),\n *\n *  thickness: <float>,\n *  thicknessMap: new THREE.Texture( <Image> ),\n *  attenuationDistance: <float>,\n *  attenuationColor: <Color>,\n *\n *  specularIntensity: <float>,\n *  specularIntensityMap: new THREE.Texture( <Image> ),\n *  specularColor: <Color>,\n *  specularColorMap: new THREE.Texture( <Image> )\n * }\n */\n\nclass MeshPhysicalMaterial extends MeshStandardMaterial {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.defines = {\n\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\n\t\t};\n\n\t\tthis.type = 'MeshPhysicalMaterial';\n\n\t\tthis.clearcoatMap = null;\n\t\tthis.clearcoatRoughness = 0.0;\n\t\tthis.clearcoatRoughnessMap = null;\n\t\tthis.clearcoatNormalScale = new Vector2( 1, 1 );\n\t\tthis.clearcoatNormalMap = null;\n\n\t\tthis.ior = 1.5;\n\n\t\tObject.defineProperty( this, 'reflectivity', {\n\t\t\tget: function () {\n\n\t\t\t\treturn ( clamp( 2.5 * ( this.ior - 1 ) / ( this.ior + 1 ), 0, 1 ) );\n\n\t\t\t},\n\t\t\tset: function ( reflectivity ) {\n\n\t\t\t\tthis.ior = ( 1 + 0.4 * reflectivity ) / ( 1 - 0.4 * reflectivity );\n\n\t\t\t}\n\t\t} );\n\n\t\tthis.sheenColor = new Color( 0x000000 );\n\t\tthis.sheenColorMap = null;\n\t\tthis.sheenRoughness = 1.0;\n\t\tthis.sheenRoughnessMap = null;\n\n\t\tthis.transmissionMap = null;\n\n\t\tthis.thickness = 0;\n\t\tthis.thicknessMap = null;\n\t\tthis.attenuationDistance = 0.0;\n\t\tthis.attenuationColor = new Color( 1, 1, 1 );\n\n\t\tthis.specularIntensity = 1.0;\n\t\tthis.specularIntensityMap = null;\n\t\tthis.specularColor = new Color( 1, 1, 1 );\n\t\tthis.specularColorMap = null;\n\n\t\tthis._sheen = 0.0;\n\t\tthis._clearcoat = 0;\n\t\tthis._transmission = 0;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tget sheen() {\n\n\t\treturn this._sheen;\n\n\t}\n\n\tset sheen( value ) {\n\n\t\tif ( this._sheen > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._sheen = value;\n\n\t}\n\n\tget clearcoat() {\n\n\t\treturn this._clearcoat;\n\n\t}\n\n\tset clearcoat( value ) {\n\n\t\tif ( this._clearcoat > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._clearcoat = value;\n\n\t}\n\n\tget transmission() {\n\n\t\treturn this._transmission;\n\n\t}\n\n\tset transmission( value ) {\n\n\t\tif ( this._transmission > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._transmission = value;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.defines = {\n\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\n\t\t};\n\n\t\tthis.clearcoat = source.clearcoat;\n\t\tthis.clearcoatMap = source.clearcoatMap;\n\t\tthis.clearcoatRoughness = source.clearcoatRoughness;\n\t\tthis.clearcoatRoughnessMap = source.clearcoatRoughnessMap;\n\t\tthis.clearcoatNormalMap = source.clearcoatNormalMap;\n\t\tthis.clearcoatNormalScale.copy( source.clearcoatNormalScale );\n\n\t\tthis.ior = source.ior;\n\n\t\tthis.sheen = source.sheen;\n\t\tthis.sheenColor.copy( source.sheenColor );\n\t\tthis.sheenColorMap = source.sheenColorMap;\n\t\tthis.sheenRoughness = source.sheenRoughness;\n\t\tthis.sheenRoughnessMap = source.sheenRoughnessMap;\n\n\t\tthis.transmission = source.transmission;\n\t\tthis.transmissionMap = source.transmissionMap;\n\n\t\tthis.thickness = source.thickness;\n\t\tthis.thicknessMap = source.thicknessMap;\n\t\tthis.attenuationDistance = source.attenuationDistance;\n\t\tthis.attenuationColor.copy( source.attenuationColor );\n\n\t\tthis.specularIntensity = source.specularIntensity;\n\t\tthis.specularIntensityMap = source.specularIntensityMap;\n\t\tthis.specularColor.copy( source.specularColor );\n\t\tthis.specularColorMap = source.specularColorMap;\n\n\t\treturn this;\n\n\t}\n\n}\n\nMeshPhysicalMaterial.prototype.isMeshPhysicalMaterial = true;\n\n/**\n * parameters = {\n *  color: <hex>,\n *  specular: <hex>,\n *  shininess: <float>,\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  emissive: <hex>,\n *  emissiveIntensity: <float>\n *  emissiveMap: new THREE.Texture( <Image> ),\n *\n *  bumpMap: new THREE.Texture( <Image> ),\n *  bumpScale: <float>,\n *\n *  normalMap: new THREE.Texture( <Image> ),\n *  normalMapType: THREE.TangentSpaceNormalMap,\n *  normalScale: <Vector2>,\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.MultiplyOperation,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n *  flatShading: <bool>\n * }\n */\n\nclass MeshPhongMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'MeshPhongMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\tthis.specular = new Color( 0x111111 );\n\t\tthis.shininess = 30;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.flatShading = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.specular.copy( source.specular );\n\t\tthis.shininess = source.shininess;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\treturn this;\n\n\t}\n\n}\n\nMeshPhongMaterial.prototype.isMeshPhongMaterial = true;\n\n/**\n * parameters = {\n *  color: <hex>,\n *\n *  map: new THREE.Texture( <Image> ),\n *  gradientMap: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  emissive: <hex>,\n *  emissiveIntensity: <float>\n *  emissiveMap: new THREE.Texture( <Image> ),\n *\n *  bumpMap: new THREE.Texture( <Image> ),\n *  bumpScale: <float>,\n *\n *  normalMap: new THREE.Texture( <Image> ),\n *  normalMapType: THREE.TangentSpaceNormalMap,\n *  normalScale: <Vector2>,\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n * }\n */\n\nclass MeshToonMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.defines = { 'TOON': '' };\n\n\t\tthis.type = 'MeshToonMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\t\tthis.gradientMap = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\t\tthis.gradientMap = source.gradientMap;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\treturn this;\n\n\t}\n\n}\n\nMeshToonMaterial.prototype.isMeshToonMaterial = true;\n\n/**\n * parameters = {\n *  opacity: <float>,\n *\n *  bumpMap: new THREE.Texture( <Image> ),\n *  bumpScale: <float>,\n *\n *  normalMap: new THREE.Texture( <Image> ),\n *  normalMapType: THREE.TangentSpaceNormalMap,\n *  normalScale: <Vector2>,\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>\n *\n *  flatShading: <bool>\n * }\n */\n\nclass MeshNormalMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'MeshNormalMaterial';\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false;\n\n\t\tthis.flatShading = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\treturn this;\n\n\t}\n\n}\n\nMeshNormalMaterial.prototype.isMeshNormalMaterial = true;\n\n/**\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  lightMap: new THREE.Texture( <Image> ),\n *  lightMapIntensity: <float>\n *\n *  aoMap: new THREE.Texture( <Image> ),\n *  aoMapIntensity: <float>\n *\n *  emissive: <hex>,\n *  emissiveIntensity: <float>\n *  emissiveMap: new THREE.Texture( <Image> ),\n *\n *  specularMap: new THREE.Texture( <Image> ),\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\n *  combine: THREE.Multiply,\n *  reflectivity: <float>,\n *  refractionRatio: <float>,\n *\n *  wireframe: <boolean>,\n *  wireframeLinewidth: <float>,\n *\n * }\n */\n\nclass MeshLambertMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'MeshLambertMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\treturn this;\n\n\t}\n\n}\n\nMeshLambertMaterial.prototype.isMeshLambertMaterial = true;\n\n/**\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *\n *  matcap: new THREE.Texture( <Image> ),\n *\n *  map: new THREE.Texture( <Image> ),\n *\n *  bumpMap: new THREE.Texture( <Image> ),\n *  bumpScale: <float>,\n *\n *  normalMap: new THREE.Texture( <Image> ),\n *  normalMapType: THREE.TangentSpaceNormalMap,\n *  normalScale: <Vector2>,\n *\n *  displacementMap: new THREE.Texture( <Image> ),\n *  displacementScale: <float>,\n *  displacementBias: <float>,\n *\n *  alphaMap: new THREE.Texture( <Image> ),\n *\n *  flatShading: <bool>\n * }\n */\n\nclass MeshMatcapMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.defines = { 'MATCAP': '' };\n\n\t\tthis.type = 'MeshMatcapMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\tthis.matcap = null;\n\n\t\tthis.map = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.flatShading = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.defines = { 'MATCAP': '' };\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.matcap = source.matcap;\n\n\t\tthis.map = source.map;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\treturn this;\n\n\t}\n\n}\n\nMeshMatcapMaterial.prototype.isMeshMatcapMaterial = true;\n\n/**\n * parameters = {\n *  color: <hex>,\n *  opacity: <float>,\n *\n *  linewidth: <float>,\n *\n *  scale: <float>,\n *  dashSize: <float>,\n *  gapSize: <float>\n * }\n */\n\nclass LineDashedMaterial extends LineBasicMaterial {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'LineDashedMaterial';\n\n\t\tthis.scale = 1;\n\t\tthis.dashSize = 3;\n\t\tthis.gapSize = 1;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.scale = source.scale;\n\t\tthis.dashSize = source.dashSize;\n\t\tthis.gapSize = source.gapSize;\n\n\t\treturn this;\n\n\t}\n\n}\n\nLineDashedMaterial.prototype.isLineDashedMaterial = true;\n\nvar Materials = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tShadowMaterial: ShadowMaterial,\n\tSpriteMaterial: SpriteMaterial,\n\tRawShaderMaterial: RawShaderMaterial,\n\tShaderMaterial: ShaderMaterial,\n\tPointsMaterial: PointsMaterial,\n\tMeshPhysicalMaterial: MeshPhysicalMaterial,\n\tMeshStandardMaterial: MeshStandardMaterial,\n\tMeshPhongMaterial: MeshPhongMaterial,\n\tMeshToonMaterial: MeshToonMaterial,\n\tMeshNormalMaterial: MeshNormalMaterial,\n\tMeshLambertMaterial: MeshLambertMaterial,\n\tMeshDepthMaterial: MeshDepthMaterial,\n\tMeshDistanceMaterial: MeshDistanceMaterial,\n\tMeshBasicMaterial: MeshBasicMaterial,\n\tMeshMatcapMaterial: MeshMatcapMaterial,\n\tLineDashedMaterial: LineDashedMaterial,\n\tLineBasicMaterial: LineBasicMaterial,\n\tMaterial: Material\n});\n\nconst AnimationUtils = {\n\n\t// same as Array.prototype.slice, but also works on typed arrays\n\tarraySlice: function ( array, from, to ) {\n\n\t\tif ( AnimationUtils.isTypedArray( array ) ) {\n\n\t\t\t// in ios9 array.subarray(from, undefined) will return empty array\n\t\t\t// but array.subarray(from) or array.subarray(from, len) is correct\n\t\t\treturn new array.constructor( array.subarray( from, to !== undefined ? to : array.length ) );\n\n\t\t}\n\n\t\treturn array.slice( from, to );\n\n\t},\n\n\t// converts an array to a specific type\n\tconvertArray: function ( array, type, forceClone ) {\n\n\t\tif ( ! array || // let 'undefined' and 'null' pass\n\t\t\t! forceClone && array.constructor === type ) return array;\n\n\t\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\n\n\t\t\treturn new type( array ); // create typed array\n\n\t\t}\n\n\t\treturn Array.prototype.slice.call( array ); // create Array\n\n\t},\n\n\tisTypedArray: function ( object ) {\n\n\t\treturn ArrayBuffer.isView( object ) &&\n\t\t\t! ( object instanceof DataView );\n\n\t},\n\n\t// returns an array by which times and values can be sorted\n\tgetKeyframeOrder: function ( times ) {\n\n\t\tfunction compareTime( i, j ) {\n\n\t\t\treturn times[ i ] - times[ j ];\n\n\t\t}\n\n\t\tconst n = times.length;\n\t\tconst result = new Array( n );\n\t\tfor ( let i = 0; i !== n; ++ i ) result[ i ] = i;\n\n\t\tresult.sort( compareTime );\n\n\t\treturn result;\n\n\t},\n\n\t// uses the array previously returned by 'getKeyframeOrder' to sort data\n\tsortedArray: function ( values, stride, order ) {\n\n\t\tconst nValues = values.length;\n\t\tconst result = new values.constructor( nValues );\n\n\t\tfor ( let i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\n\n\t\t\tconst srcOffset = order[ i ] * stride;\n\n\t\t\tfor ( let j = 0; j !== stride; ++ j ) {\n\n\t\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn result;\n\n\t},\n\n\t// function for parsing AOS keyframe formats\n\tflattenJSON: function ( jsonKeys, times, values, valuePropertyName ) {\n\n\t\tlet i = 1, key = jsonKeys[ 0 ];\n\n\t\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\n\n\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t}\n\n\t\tif ( key === undefined ) return; // no data\n\n\t\tlet value = key[ valuePropertyName ];\n\t\tif ( value === undefined ) return; // no data\n\n\t\tif ( Array.isArray( value ) ) {\n\n\t\t\tdo {\n\n\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\tvalues.push.apply( values, value ); // push all elements\n\n\t\t\t\t}\n\n\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t} while ( key !== undefined );\n\n\t\t} else if ( value.toArray !== undefined ) {\n\n\t\t\t// ...assume THREE.Math-ish\n\n\t\t\tdo {\n\n\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\tvalue.toArray( values, values.length );\n\n\t\t\t\t}\n\n\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t} while ( key !== undefined );\n\n\t\t} else {\n\n\t\t\t// otherwise push as-is\n\n\t\t\tdo {\n\n\t\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\ttimes.push( key.time );\n\t\t\t\t\tvalues.push( value );\n\n\t\t\t\t}\n\n\t\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t\t} while ( key !== undefined );\n\n\t\t}\n\n\t},\n\n\tsubclip: function ( sourceClip, name, startFrame, endFrame, fps = 30 ) {\n\n\t\tconst clip = sourceClip.clone();\n\n\t\tclip.name = name;\n\n\t\tconst tracks = [];\n\n\t\tfor ( let i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\t\tconst track = clip.tracks[ i ];\n\t\t\tconst valueSize = track.getValueSize();\n\n\t\t\tconst times = [];\n\t\t\tconst values = [];\n\n\t\t\tfor ( let j = 0; j < track.times.length; ++ j ) {\n\n\t\t\t\tconst frame = track.times[ j ] * fps;\n\n\t\t\t\tif ( frame < startFrame || frame >= endFrame ) continue;\n\n\t\t\t\ttimes.push( track.times[ j ] );\n\n\t\t\t\tfor ( let k = 0; k < valueSize; ++ k ) {\n\n\t\t\t\t\tvalues.push( track.values[ j * valueSize + k ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( times.length === 0 ) continue;\n\n\t\t\ttrack.times = AnimationUtils.convertArray( times, track.times.constructor );\n\t\t\ttrack.values = AnimationUtils.convertArray( values, track.values.constructor );\n\n\t\t\ttracks.push( track );\n\n\t\t}\n\n\t\tclip.tracks = tracks;\n\n\t\t// find minimum .times value across all tracks in the trimmed clip\n\n\t\tlet minStartTime = Infinity;\n\n\t\tfor ( let i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\t\tif ( minStartTime > clip.tracks[ i ].times[ 0 ] ) {\n\n\t\t\t\tminStartTime = clip.tracks[ i ].times[ 0 ];\n\n\t\t\t}\n\n\t\t}\n\n\t\t// shift all tracks such that clip begins at t=0\n\n\t\tfor ( let i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\t\tclip.tracks[ i ].shift( - 1 * minStartTime );\n\n\t\t}\n\n\t\tclip.resetDuration();\n\n\t\treturn clip;\n\n\t},\n\n\tmakeClipAdditive: function ( targetClip, referenceFrame = 0, referenceClip = targetClip, fps = 30 ) {\n\n\t\tif ( fps <= 0 ) fps = 30;\n\n\t\tconst numTracks = referenceClip.tracks.length;\n\t\tconst referenceTime = referenceFrame / fps;\n\n\t\t// Make each track's values relative to the values at the reference frame\n\t\tfor ( let i = 0; i < numTracks; ++ i ) {\n\n\t\t\tconst referenceTrack = referenceClip.tracks[ i ];\n\t\t\tconst referenceTrackType = referenceTrack.ValueTypeName;\n\n\t\t\t// Skip this track if it's non-numeric\n\t\t\tif ( referenceTrackType === 'bool' || referenceTrackType === 'string' ) continue;\n\n\t\t\t// Find the track in the target clip whose name and type matches the reference track\n\t\t\tconst targetTrack = targetClip.tracks.find( function ( track ) {\n\n\t\t\t\treturn track.name === referenceTrack.name\n\t\t\t\t\t&& track.ValueTypeName === referenceTrackType;\n\n\t\t\t} );\n\n\t\t\tif ( targetTrack === undefined ) continue;\n\n\t\t\tlet referenceOffset = 0;\n\t\t\tconst referenceValueSize = referenceTrack.getValueSize();\n\n\t\t\tif ( referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline ) {\n\n\t\t\t\treferenceOffset = referenceValueSize / 3;\n\n\t\t\t}\n\n\t\t\tlet targetOffset = 0;\n\t\t\tconst targetValueSize = targetTrack.getValueSize();\n\n\t\t\tif ( targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline ) {\n\n\t\t\t\ttargetOffset = targetValueSize / 3;\n\n\t\t\t}\n\n\t\t\tconst lastIndex = referenceTrack.times.length - 1;\n\t\t\tlet referenceValue;\n\n\t\t\t// Find the value to subtract out of the track\n\t\t\tif ( referenceTime <= referenceTrack.times[ 0 ] ) {\n\n\t\t\t\t// Reference frame is earlier than the first keyframe, so just use the first keyframe\n\t\t\t\tconst startIndex = referenceOffset;\n\t\t\t\tconst endIndex = referenceValueSize - referenceOffset;\n\t\t\t\treferenceValue = AnimationUtils.arraySlice( referenceTrack.values, startIndex, endIndex );\n\n\t\t\t} else if ( referenceTime >= referenceTrack.times[ lastIndex ] ) {\n\n\t\t\t\t// Reference frame is after the last keyframe, so just use the last keyframe\n\t\t\t\tconst startIndex = lastIndex * referenceValueSize + referenceOffset;\n\t\t\t\tconst endIndex = startIndex + referenceValueSize - referenceOffset;\n\t\t\t\treferenceValue = AnimationUtils.arraySlice( referenceTrack.values, startIndex, endIndex );\n\n\t\t\t} else {\n\n\t\t\t\t// Interpolate to the reference value\n\t\t\t\tconst interpolant = referenceTrack.createInterpolant();\n\t\t\t\tconst startIndex = referenceOffset;\n\t\t\t\tconst endIndex = referenceValueSize - referenceOffset;\n\t\t\t\tinterpolant.evaluate( referenceTime );\n\t\t\t\treferenceValue = AnimationUtils.arraySlice( interpolant.resultBuffer, startIndex, endIndex );\n\n\t\t\t}\n\n\t\t\t// Conjugate the quaternion\n\t\t\tif ( referenceTrackType === 'quaternion' ) {\n\n\t\t\t\tconst referenceQuat = new Quaternion().fromArray( referenceValue ).normalize().conjugate();\n\t\t\t\treferenceQuat.toArray( referenceValue );\n\n\t\t\t}\n\n\t\t\t// Subtract the reference value from all of the track values\n\n\t\t\tconst numTimes = targetTrack.times.length;\n\t\t\tfor ( let j = 0; j < numTimes; ++ j ) {\n\n\t\t\t\tconst valueStart = j * targetValueSize + targetOffset;\n\n\t\t\t\tif ( referenceTrackType === 'quaternion' ) {\n\n\t\t\t\t\t// Multiply the conjugate for quaternion track types\n\t\t\t\t\tQuaternion.multiplyQuaternionsFlat(\n\t\t\t\t\t\ttargetTrack.values,\n\t\t\t\t\t\tvalueStart,\n\t\t\t\t\t\treferenceValue,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\ttargetTrack.values,\n\t\t\t\t\t\tvalueStart\n\t\t\t\t\t);\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst valueEnd = targetValueSize - targetOffset * 2;\n\n\t\t\t\t\t// Subtract each value for all other numeric track types\n\t\t\t\t\tfor ( let k = 0; k < valueEnd; ++ k ) {\n\n\t\t\t\t\t\ttargetTrack.values[ valueStart + k ] -= referenceValue[ k ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\ttargetClip.blendMode = AdditiveAnimationBlendMode;\n\n\t\treturn targetClip;\n\n\t}\n\n};\n\n/**\n * Abstract base class of interpolants over parametric samples.\n *\n * The parameter domain is one dimensional, typically the time or a path\n * along a curve defined by the data.\n *\n * The sample values can have any dimensionality and derived classes may\n * apply special interpretations to the data.\n *\n * This class provides the interval seek in a Template Method, deferring\n * the actual interpolation to derived classes.\n *\n * Time complexity is O(1) for linear access crossing at most two points\n * and O(log N) for random access, where N is the number of positions.\n *\n * References:\n *\n * \t\thttp://www.oodesign.com/template-method-pattern.html\n *\n */\n\nclass Interpolant {\n\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tthis.parameterPositions = parameterPositions;\n\t\tthis._cachedIndex = 0;\n\n\t\tthis.resultBuffer = resultBuffer !== undefined ?\n\t\t\tresultBuffer : new sampleValues.constructor( sampleSize );\n\t\tthis.sampleValues = sampleValues;\n\t\tthis.valueSize = sampleSize;\n\n\t\tthis.settings = null;\n\t\tthis.DefaultSettings_ = {};\n\n\t}\n\n\tevaluate( t ) {\n\n\t\tconst pp = this.parameterPositions;\n\t\tlet i1 = this._cachedIndex,\n\t\t\tt1 = pp[ i1 ],\n\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\tvalidate_interval: {\n\n\t\t\tseek: {\n\n\t\t\t\tlet right;\n\n\t\t\t\tlinear_scan: {\n\n\t\t\t\t\t//- See http://jsperf.com/comparison-to-undefined/3\n\t\t\t\t\t//- slower code:\n\t\t\t\t\t//-\n\t\t\t\t\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\n\n\t\t\t\t\t\tfor ( let giveUpAt = i1 + 2; ; ) {\n\n\t\t\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\t\t\tif ( t < t0 ) break forward_scan;\n\n\t\t\t\t\t\t\t\t// after end\n\n\t\t\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t, t0 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n\t\t\t\t\t\t\tt0 = t1;\n\t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\n\n\t\t\t\t\t\t\tif ( t < t1 ) {\n\n\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// prepare binary search on the right side of the index\n\t\t\t\t\t\tright = pp.length;\n\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t//- slower code:\n\t\t\t\t\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\t\t\t\t\tif ( ! ( t >= t0 ) ) {\n\n\t\t\t\t\t\t// looping?\n\n\t\t\t\t\t\tconst t1global = pp[ 1 ];\n\n\t\t\t\t\t\tif ( t < t1global ) {\n\n\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\t\t\t\t\t\t\tt0 = t1global;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// linear reverse scan\n\n\t\t\t\t\t\tfor ( let giveUpAt = i1 - 2; ; ) {\n\n\t\t\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\t\t\t// before start\n\n\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n\t\t\t\t\t\t\tt1 = t0;\n\t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\n\n\t\t\t\t\t\t\tif ( t >= t0 ) {\n\n\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// prepare binary search on the left side of the index\n\t\t\t\t\t\tright = i1;\n\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// the interval is valid\n\n\t\t\t\t\tbreak validate_interval;\n\n\t\t\t\t} // linear scan\n\n\t\t\t\t// binary search\n\n\t\t\t\twhile ( i1 < right ) {\n\n\t\t\t\t\tconst mid = ( i1 + right ) >>> 1;\n\n\t\t\t\t\tif ( t < pp[ mid ] ) {\n\n\t\t\t\t\t\tright = mid;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ti1 = mid + 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tt1 = pp[ i1 ];\n\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\t\t// check boundary cases, again\n\n\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\treturn this.afterEnd_( i1 - 1, t0, t );\n\n\t\t\t\t}\n\n\t\t\t} // seek\n\n\t\t\tthis._cachedIndex = i1;\n\n\t\t\tthis.intervalChanged_( i1, t0, t1 );\n\n\t\t} // validate_interval\n\n\t\treturn this.interpolate_( i1, t0, t, t1 );\n\n\t}\n\n\tgetSettings_() {\n\n\t\treturn this.settings || this.DefaultSettings_;\n\n\t}\n\n\tcopySampleValue_( index ) {\n\n\t\t// copies a sample value to the result buffer\n\n\t\tconst result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\t\t\toffset = index * stride;\n\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] = values[ offset + i ];\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\t// Template methods for derived classes:\n\n\tinterpolate_( /* i1, t0, t, t1 */ ) {\n\n\t\tthrow new Error( 'call to abstract method' );\n\t\t// implementations shall return this.resultBuffer\n\n\t}\n\n\tintervalChanged_( /* i1, t0, t1 */ ) {\n\n\t\t// empty\n\n\t}\n\n}\n\n// ALIAS DEFINITIONS\n\nInterpolant.prototype.beforeStart_ = Interpolant.prototype.copySampleValue_;\nInterpolant.prototype.afterEnd_ = Interpolant.prototype.copySampleValue_;\n\n/**\n * Fast and simple cubic spline interpolant.\n *\n * It was derived from a Hermitian construction setting the first derivative\n * at each sample position to the linear slope between neighboring positions\n * over their parameter interval.\n */\n\nclass CubicInterpolant extends Interpolant {\n\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t\tthis._weightPrev = - 0;\n\t\tthis._offsetPrev = - 0;\n\t\tthis._weightNext = - 0;\n\t\tthis._offsetNext = - 0;\n\n\t\tthis.DefaultSettings_ = {\n\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\n\t\t};\n\n\t}\n\n\tintervalChanged_( i1, t0, t1 ) {\n\n\t\tconst pp = this.parameterPositions;\n\t\tlet iPrev = i1 - 2,\n\t\t\tiNext = i1 + 1,\n\n\t\t\ttPrev = pp[ iPrev ],\n\t\t\ttNext = pp[ iNext ];\n\n\t\tif ( tPrev === undefined ) {\n\n\t\t\tswitch ( this.getSettings_().endingStart ) {\n\n\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t// f'(t0) = 0\n\t\t\t\t\tiPrev = i1;\n\t\t\t\t\ttPrev = 2 * t0 - t1;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\tiPrev = pp.length - 2;\n\t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t\t\t\t\tiPrev = i1;\n\t\t\t\t\ttPrev = t1;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( tNext === undefined ) {\n\n\t\t\tswitch ( this.getSettings_().endingEnd ) {\n\n\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t// f'(tN) = 0\n\t\t\t\t\tiNext = i1;\n\t\t\t\t\ttNext = 2 * t1 - t0;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\tiNext = 1;\n\t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t\t\t\t\tiNext = i1 - 1;\n\t\t\t\t\ttNext = t0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst halfDt = ( t1 - t0 ) * 0.5,\n\t\t\tstride = this.valueSize;\n\n\t\tthis._weightPrev = halfDt / ( t0 - tPrev );\n\t\tthis._weightNext = halfDt / ( tNext - t1 );\n\t\tthis._offsetPrev = iPrev * stride;\n\t\tthis._offsetNext = iNext * stride;\n\n\t}\n\n\tinterpolate_( i1, t0, t, t1 ) {\n\n\t\tconst result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\n\t\t\toP = this._offsetPrev, \toN = this._offsetNext,\n\t\t\twP = this._weightPrev,\twN = this._weightNext,\n\n\t\t\tp = ( t - t0 ) / ( t1 - t0 ),\n\t\t\tpp = p * p,\n\t\t\tppp = pp * p;\n\n\t\t// evaluate polynomials\n\n\t\tconst sP = - wP * ppp + 2 * wP * pp - wP * p;\n\t\tconst s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;\n\t\tconst s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;\n\t\tconst sN = wN * ppp - wN * pp;\n\n\t\t// combine data linearly\n\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] =\n\t\t\t\t\tsP * values[ oP + i ] +\n\t\t\t\t\ts0 * values[ o0 + i ] +\n\t\t\t\t\ts1 * values[ o1 + i ] +\n\t\t\t\t\tsN * values[ oN + i ];\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n}\n\nclass LinearInterpolant extends Interpolant {\n\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tinterpolate_( i1, t0, t, t1 ) {\n\n\t\tconst result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\toffset1 = i1 * stride,\n\t\t\toffset0 = offset1 - stride,\n\n\t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\n\t\t\tweight0 = 1 - weight1;\n\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] =\n\t\t\t\t\tvalues[ offset0 + i ] * weight0 +\n\t\t\t\t\tvalues[ offset1 + i ] * weight1;\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n}\n\n/**\n *\n * Interpolant that evaluates to the sample value at the position preceeding\n * the parameter.\n */\n\nclass DiscreteInterpolant extends Interpolant {\n\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tinterpolate_( i1 /*, t0, t, t1 */ ) {\n\n\t\treturn this.copySampleValue_( i1 - 1 );\n\n\t}\n\n}\n\nclass KeyframeTrack {\n\n\tconstructor( name, times, values, interpolation ) {\n\n\t\tif ( name === undefined ) throw new Error( 'THREE.KeyframeTrack: track name is undefined' );\n\t\tif ( times === undefined || times.length === 0 ) throw new Error( 'THREE.KeyframeTrack: no keyframes in track named ' + name );\n\n\t\tthis.name = name;\n\n\t\tthis.times = AnimationUtils.convertArray( times, this.TimeBufferType );\n\t\tthis.values = AnimationUtils.convertArray( values, this.ValueBufferType );\n\n\t\tthis.setInterpolation( interpolation || this.DefaultInterpolation );\n\n\t}\n\n\t// Serialization (in static context, because of constructor invocation\n\t// and automatic invocation of .toJSON):\n\n\tstatic toJSON( track ) {\n\n\t\tconst trackType = track.constructor;\n\n\t\tlet json;\n\n\t\t// derived classes can define a static toJSON method\n\t\tif ( trackType.toJSON !== this.toJSON ) {\n\n\t\t\tjson = trackType.toJSON( track );\n\n\t\t} else {\n\n\t\t\t// by default, we assume the data can be serialized as-is\n\t\t\tjson = {\n\n\t\t\t\t'name': track.name,\n\t\t\t\t'times': AnimationUtils.convertArray( track.times, Array ),\n\t\t\t\t'values': AnimationUtils.convertArray( track.values, Array )\n\n\t\t\t};\n\n\t\t\tconst interpolation = track.getInterpolation();\n\n\t\t\tif ( interpolation !== track.DefaultInterpolation ) {\n\n\t\t\t\tjson.interpolation = interpolation;\n\n\t\t\t}\n\n\t\t}\n\n\t\tjson.type = track.ValueTypeName; // mandatory\n\n\t\treturn json;\n\n\t}\n\n\tInterpolantFactoryMethodDiscrete( result ) {\n\n\t\treturn new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t}\n\n\tInterpolantFactoryMethodLinear( result ) {\n\n\t\treturn new LinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t}\n\n\tInterpolantFactoryMethodSmooth( result ) {\n\n\t\treturn new CubicInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t}\n\n\tsetInterpolation( interpolation ) {\n\n\t\tlet factoryMethod;\n\n\t\tswitch ( interpolation ) {\n\n\t\t\tcase InterpolateDiscrete:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\n\t\t\t\tbreak;\n\n\t\t\tcase InterpolateLinear:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\n\t\t\t\tbreak;\n\n\t\t\tcase InterpolateSmooth:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( factoryMethod === undefined ) {\n\n\t\t\tconst message = 'unsupported interpolation for ' +\n\t\t\t\tthis.ValueTypeName + ' keyframe track named ' + this.name;\n\n\t\t\tif ( this.createInterpolant === undefined ) {\n\n\t\t\t\t// fall back to default, unless the default itself is messed up\n\t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\n\n\t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( message ); // fatal, in this case\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconsole.warn( 'THREE.KeyframeTrack:', message );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tthis.createInterpolant = factoryMethod;\n\n\t\treturn this;\n\n\t}\n\n\tgetInterpolation() {\n\n\t\tswitch ( this.createInterpolant ) {\n\n\t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\n\t\t\t\treturn InterpolateDiscrete;\n\n\t\t\tcase this.InterpolantFactoryMethodLinear:\n\n\t\t\t\treturn InterpolateLinear;\n\n\t\t\tcase this.InterpolantFactoryMethodSmooth:\n\n\t\t\t\treturn InterpolateSmooth;\n\n\t\t}\n\n\t}\n\n\tgetValueSize() {\n\n\t\treturn this.values.length / this.times.length;\n\n\t}\n\n\t// move all keyframes either forwards or backwards in time\n\tshift( timeOffset ) {\n\n\t\tif ( timeOffset !== 0.0 ) {\n\n\t\t\tconst times = this.times;\n\n\t\t\tfor ( let i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\ttimes[ i ] += timeOffset;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\tscale( timeScale ) {\n\n\t\tif ( timeScale !== 1.0 ) {\n\n\t\t\tconst times = this.times;\n\n\t\t\tfor ( let i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\ttimes[ i ] *= timeScale;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\ttrim( startTime, endTime ) {\n\n\t\tconst times = this.times,\n\t\t\tnKeys = times.length;\n\n\t\tlet from = 0,\n\t\t\tto = nKeys - 1;\n\n\t\twhile ( from !== nKeys && times[ from ] < startTime ) {\n\n\t\t\t++ from;\n\n\t\t}\n\n\t\twhile ( to !== - 1 && times[ to ] > endTime ) {\n\n\t\t\t-- to;\n\n\t\t}\n\n\t\t++ to; // inclusive -> exclusive bound\n\n\t\tif ( from !== 0 || to !== nKeys ) {\n\n\t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t\t\tif ( from >= to ) {\n\n\t\t\t\tto = Math.max( to, 1 );\n\t\t\t\tfrom = to - 1;\n\n\t\t\t}\n\n\t\t\tconst stride = this.getValueSize();\n\t\t\tthis.times = AnimationUtils.arraySlice( times, from, to );\n\t\t\tthis.values = AnimationUtils.arraySlice( this.values, from * stride, to * stride );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\tvalidate() {\n\n\t\tlet valid = true;\n\n\t\tconst valueSize = this.getValueSize();\n\t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\n\n\t\t\tconsole.error( 'THREE.KeyframeTrack: Invalid value size in track.', this );\n\t\t\tvalid = false;\n\n\t\t}\n\n\t\tconst times = this.times,\n\t\t\tvalues = this.values,\n\n\t\t\tnKeys = times.length;\n\n\t\tif ( nKeys === 0 ) {\n\n\t\t\tconsole.error( 'THREE.KeyframeTrack: Track is empty.', this );\n\t\t\tvalid = false;\n\n\t\t}\n\n\t\tlet prevTime = null;\n\n\t\tfor ( let i = 0; i !== nKeys; i ++ ) {\n\n\t\t\tconst currTime = times[ i ];\n\n\t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime );\n\t\t\t\tvalid = false;\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( prevTime !== null && prevTime > currTime ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime );\n\t\t\t\tvalid = false;\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tprevTime = currTime;\n\n\t\t}\n\n\t\tif ( values !== undefined ) {\n\n\t\t\tif ( AnimationUtils.isTypedArray( values ) ) {\n\n\t\t\t\tfor ( let i = 0, n = values.length; i !== n; ++ i ) {\n\n\t\t\t\t\tconst value = values[ i ];\n\n\t\t\t\t\tif ( isNaN( value ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Value is not a valid number.', this, i, value );\n\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn valid;\n\n\t}\n\n\t// removes equivalent sequential keys as common in morph target sequences\n\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\toptimize() {\n\n\t\t// times or values may be shared with other tracks, so overwriting is unsafe\n\t\tconst times = AnimationUtils.arraySlice( this.times ),\n\t\t\tvalues = AnimationUtils.arraySlice( this.values ),\n\t\t\tstride = this.getValueSize(),\n\n\t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\n\t\t\tlastIndex = times.length - 1;\n\n\t\tlet writeIndex = 1;\n\n\t\tfor ( let i = 1; i < lastIndex; ++ i ) {\n\n\t\t\tlet keep = false;\n\n\t\t\tconst time = times[ i ];\n\t\t\tconst timeNext = times[ i + 1 ];\n\n\t\t\t// remove adjacent keyframes scheduled at the same time\n\n\t\t\tif ( time !== timeNext && ( i !== 1 || time !== times[ 0 ] ) ) {\n\n\t\t\t\tif ( ! smoothInterpolation ) {\n\n\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\n\t\t\t\t\tconst offset = i * stride,\n\t\t\t\t\t\toffsetP = offset - stride,\n\t\t\t\t\t\toffsetN = offset + stride;\n\n\t\t\t\t\tfor ( let j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\tconst value = values[ offset + j ];\n\n\t\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\n\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\n\n\t\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tkeep = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// in-place compaction\n\n\t\t\tif ( keep ) {\n\n\t\t\t\tif ( i !== writeIndex ) {\n\n\t\t\t\t\ttimes[ writeIndex ] = times[ i ];\n\n\t\t\t\t\tconst readOffset = i * stride,\n\t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n\t\t\t\t\tfor ( let j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t++ writeIndex;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// flush last keyframe (compaction looks ahead)\n\n\t\tif ( lastIndex > 0 ) {\n\n\t\t\ttimes[ writeIndex ] = times[ lastIndex ];\n\n\t\t\tfor ( let readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j ) {\n\n\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t}\n\n\t\t\t++ writeIndex;\n\n\t\t}\n\n\t\tif ( writeIndex !== times.length ) {\n\n\t\t\tthis.times = AnimationUtils.arraySlice( times, 0, writeIndex );\n\t\t\tthis.values = AnimationUtils.arraySlice( values, 0, writeIndex * stride );\n\n\t\t} else {\n\n\t\t\tthis.times = times;\n\t\t\tthis.values = values;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\tconst times = AnimationUtils.arraySlice( this.times, 0 );\n\t\tconst values = AnimationUtils.arraySlice( this.values, 0 );\n\n\t\tconst TypedKeyframeTrack = this.constructor;\n\t\tconst track = new TypedKeyframeTrack( this.name, times, values );\n\n\t\t// Interpolant argument to constructor is not saved, so copy the factory method directly.\n\t\ttrack.createInterpolant = this.createInterpolant;\n\n\t\treturn track;\n\n\t}\n\n}\n\nKeyframeTrack.prototype.TimeBufferType = Float32Array;\nKeyframeTrack.prototype.ValueBufferType = Float32Array;\nKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;\n\n/**\n * A Track of Boolean keyframe values.\n */\nclass BooleanKeyframeTrack extends KeyframeTrack {}\n\nBooleanKeyframeTrack.prototype.ValueTypeName = 'bool';\nBooleanKeyframeTrack.prototype.ValueBufferType = Array;\nBooleanKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\nBooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\nBooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n/**\n * A Track of keyframe values that represent color.\n */\nclass ColorKeyframeTrack extends KeyframeTrack {}\n\nColorKeyframeTrack.prototype.ValueTypeName = 'color';\n\n/**\n * A Track of numeric keyframe values.\n */\nclass NumberKeyframeTrack extends KeyframeTrack {}\n\nNumberKeyframeTrack.prototype.ValueTypeName = 'number';\n\n/**\n * Spherical linear unit quaternion interpolant.\n */\n\nclass QuaternionLinearInterpolant extends Interpolant {\n\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tinterpolate_( i1, t0, t, t1 ) {\n\n\t\tconst result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\talpha = ( t - t0 ) / ( t1 - t0 );\n\n\t\tlet offset = i1 * stride;\n\n\t\tfor ( let end = offset + stride; offset !== end; offset += 4 ) {\n\n\t\t\tQuaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n}\n\n/**\n * A Track of quaternion keyframe values.\n */\nclass QuaternionKeyframeTrack extends KeyframeTrack {\n\n\tInterpolantFactoryMethodLinear( result ) {\n\n\t\treturn new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t}\n\n}\n\nQuaternionKeyframeTrack.prototype.ValueTypeName = 'quaternion';\n// ValueBufferType is inherited\nQuaternionKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;\nQuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n/**\n * A Track that interpolates Strings\n */\nclass StringKeyframeTrack extends KeyframeTrack {}\n\nStringKeyframeTrack.prototype.ValueTypeName = 'string';\nStringKeyframeTrack.prototype.ValueBufferType = Array;\nStringKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\nStringKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\nStringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n/**\n * A Track of vectored keyframe values.\n */\nclass VectorKeyframeTrack extends KeyframeTrack {}\n\nVectorKeyframeTrack.prototype.ValueTypeName = 'vector';\n\nclass AnimationClip {\n\n\tconstructor( name, duration = - 1, tracks, blendMode = NormalAnimationBlendMode ) {\n\n\t\tthis.name = name;\n\t\tthis.tracks = tracks;\n\t\tthis.duration = duration;\n\t\tthis.blendMode = blendMode;\n\n\t\tthis.uuid = generateUUID();\n\n\t\t// this means it should figure out its duration by scanning the tracks\n\t\tif ( this.duration < 0 ) {\n\n\t\t\tthis.resetDuration();\n\n\t\t}\n\n\t}\n\n\n\tstatic parse( json ) {\n\n\t\tconst tracks = [],\n\t\t\tjsonTracks = json.tracks,\n\t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\n\n\t\tfor ( let i = 0, n = jsonTracks.length; i !== n; ++ i ) {\n\n\t\t\ttracks.push( parseKeyframeTrack( jsonTracks[ i ] ).scale( frameTime ) );\n\n\t\t}\n\n\t\tconst clip = new this( json.name, json.duration, tracks, json.blendMode );\n\t\tclip.uuid = json.uuid;\n\n\t\treturn clip;\n\n\t}\n\n\tstatic toJSON( clip ) {\n\n\t\tconst tracks = [],\n\t\t\tclipTracks = clip.tracks;\n\n\t\tconst json = {\n\n\t\t\t'name': clip.name,\n\t\t\t'duration': clip.duration,\n\t\t\t'tracks': tracks,\n\t\t\t'uuid': clip.uuid,\n\t\t\t'blendMode': clip.blendMode\n\n\t\t};\n\n\t\tfor ( let i = 0, n = clipTracks.length; i !== n; ++ i ) {\n\n\t\t\ttracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );\n\n\t\t}\n\n\t\treturn json;\n\n\t}\n\n\tstatic CreateFromMorphTargetSequence( name, morphTargetSequence, fps, noLoop ) {\n\n\t\tconst numMorphTargets = morphTargetSequence.length;\n\t\tconst tracks = [];\n\n\t\tfor ( let i = 0; i < numMorphTargets; i ++ ) {\n\n\t\t\tlet times = [];\n\t\t\tlet values = [];\n\n\t\t\ttimes.push(\n\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\n\t\t\t\ti,\n\t\t\t\t( i + 1 ) % numMorphTargets );\n\n\t\t\tvalues.push( 0, 1, 0 );\n\n\t\t\tconst order = AnimationUtils.getKeyframeOrder( times );\n\t\t\ttimes = AnimationUtils.sortedArray( times, 1, order );\n\t\t\tvalues = AnimationUtils.sortedArray( values, 1, order );\n\n\t\t\t// if there is a key at the first frame, duplicate it as the\n\t\t\t// last frame as well for perfect loop.\n\t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\n\n\t\t\t\ttimes.push( numMorphTargets );\n\t\t\t\tvalues.push( values[ 0 ] );\n\n\t\t\t}\n\n\t\t\ttracks.push(\n\t\t\t\tnew NumberKeyframeTrack(\n\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\n\t\t\t\t\ttimes, values\n\t\t\t\t).scale( 1.0 / fps ) );\n\n\t\t}\n\n\t\treturn new this( name, - 1, tracks );\n\n\t}\n\n\tstatic findByName( objectOrClipArray, name ) {\n\n\t\tlet clipArray = objectOrClipArray;\n\n\t\tif ( ! Array.isArray( objectOrClipArray ) ) {\n\n\t\t\tconst o = objectOrClipArray;\n\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\n\t\t}\n\n\t\tfor ( let i = 0; i < clipArray.length; i ++ ) {\n\n\t\t\tif ( clipArray[ i ].name === name ) {\n\n\t\t\t\treturn clipArray[ i ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\tstatic CreateClipsFromMorphTargetSequences( morphTargets, fps, noLoop ) {\n\n\t\tconst animationToMorphTargets = {};\n\n\t\t// tested with https://regex101.com/ on trick sequences\n\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\t\tconst pattern = /^([\\w-]*?)([\\d]+)$/;\n\n\t\t// sort morph target names into animation groups based\n\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\t\tfor ( let i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\tconst morphTarget = morphTargets[ i ];\n\t\t\tconst parts = morphTarget.name.match( pattern );\n\n\t\t\tif ( parts && parts.length > 1 ) {\n\n\t\t\t\tconst name = parts[ 1 ];\n\n\t\t\t\tlet animationMorphTargets = animationToMorphTargets[ name ];\n\n\t\t\t\tif ( ! animationMorphTargets ) {\n\n\t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\n\n\t\t\t\t}\n\n\t\t\t\tanimationMorphTargets.push( morphTarget );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst clips = [];\n\n\t\tfor ( const name in animationToMorphTargets ) {\n\n\t\t\tclips.push( this.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\n\n\t\t}\n\n\t\treturn clips;\n\n\t}\n\n\t// parse the animation.hierarchy format\n\tstatic parseAnimation( animation, bones ) {\n\n\t\tif ( ! animation ) {\n\n\t\t\tconsole.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {\n\n\t\t\t// only return track if there are actually keys.\n\t\t\tif ( animationKeys.length !== 0 ) {\n\n\t\t\t\tconst times = [];\n\t\t\t\tconst values = [];\n\n\t\t\t\tAnimationUtils.flattenJSON( animationKeys, times, values, propertyName );\n\n\t\t\t\t// empty keys are filtered out, so check again\n\t\t\t\tif ( times.length !== 0 ) {\n\n\t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tconst tracks = [];\n\n\t\tconst clipName = animation.name || 'default';\n\t\tconst fps = animation.fps || 30;\n\t\tconst blendMode = animation.blendMode;\n\n\t\t// automatic length determination in AnimationClip.\n\t\tlet duration = animation.length || - 1;\n\n\t\tconst hierarchyTracks = animation.hierarchy || [];\n\n\t\tfor ( let h = 0; h < hierarchyTracks.length; h ++ ) {\n\n\t\t\tconst animationKeys = hierarchyTracks[ h ].keys;\n\n\t\t\t// skip empty tracks\n\t\t\tif ( ! animationKeys || animationKeys.length === 0 ) continue;\n\n\t\t\t// process morph targets\n\t\t\tif ( animationKeys[ 0 ].morphTargets ) {\n\n\t\t\t\t// figure out all morph targets used in this track\n\t\t\t\tconst morphTargetNames = {};\n\n\t\t\t\tlet k;\n\n\t\t\t\tfor ( k = 0; k < animationKeys.length; k ++ ) {\n\n\t\t\t\t\tif ( animationKeys[ k ].morphTargets ) {\n\n\t\t\t\t\t\tfor ( let m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {\n\n\t\t\t\t\t\t\tmorphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// create a track for each morph target with all zero\n\t\t\t\t// morphTargetInfluences except for the keys in which\n\t\t\t\t// the morphTarget is named.\n\t\t\t\tfor ( const morphTargetName in morphTargetNames ) {\n\n\t\t\t\t\tconst times = [];\n\t\t\t\t\tconst values = [];\n\n\t\t\t\t\tfor ( let m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {\n\n\t\t\t\t\t\tconst animationKey = animationKeys[ k ];\n\n\t\t\t\t\t\ttimes.push( animationKey.time );\n\t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\n\n\t\t\t\t}\n\n\t\t\t\tduration = morphTargetNames.length * ( fps || 1.0 );\n\n\t\t\t} else {\n\n\t\t\t\t// ...assume skeletal animation\n\n\t\t\t\tconst boneName = '.bones[' + bones[ h ].name + ']';\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\tVectorKeyframeTrack, boneName + '.position',\n\t\t\t\t\tanimationKeys, 'pos', tracks );\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\tQuaternionKeyframeTrack, boneName + '.quaternion',\n\t\t\t\t\tanimationKeys, 'rot', tracks );\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\tVectorKeyframeTrack, boneName + '.scale',\n\t\t\t\t\tanimationKeys, 'scl', tracks );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( tracks.length === 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst clip = new this( clipName, duration, tracks, blendMode );\n\n\t\treturn clip;\n\n\t}\n\n\tresetDuration() {\n\n\t\tconst tracks = this.tracks;\n\t\tlet duration = 0;\n\n\t\tfor ( let i = 0, n = tracks.length; i !== n; ++ i ) {\n\n\t\t\tconst track = this.tracks[ i ];\n\n\t\t\tduration = Math.max( duration, track.times[ track.times.length - 1 ] );\n\n\t\t}\n\n\t\tthis.duration = duration;\n\n\t\treturn this;\n\n\t}\n\n\ttrim() {\n\n\t\tfor ( let i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\tthis.tracks[ i ].trim( 0, this.duration );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tvalidate() {\n\n\t\tlet valid = true;\n\n\t\tfor ( let i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\tvalid = valid && this.tracks[ i ].validate();\n\n\t\t}\n\n\t\treturn valid;\n\n\t}\n\n\toptimize() {\n\n\t\tfor ( let i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\tthis.tracks[ i ].optimize();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\tconst tracks = [];\n\n\t\tfor ( let i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\ttracks.push( this.tracks[ i ].clone() );\n\n\t\t}\n\n\t\treturn new this.constructor( this.name, this.duration, tracks, this.blendMode );\n\n\t}\n\n\ttoJSON() {\n\n\t\treturn this.constructor.toJSON( this );\n\n\t}\n\n}\n\nfunction getTrackTypeForValueTypeName( typeName ) {\n\n\tswitch ( typeName.toLowerCase() ) {\n\n\t\tcase 'scalar':\n\t\tcase 'double':\n\t\tcase 'float':\n\t\tcase 'number':\n\t\tcase 'integer':\n\n\t\t\treturn NumberKeyframeTrack;\n\n\t\tcase 'vector':\n\t\tcase 'vector2':\n\t\tcase 'vector3':\n\t\tcase 'vector4':\n\n\t\t\treturn VectorKeyframeTrack;\n\n\t\tcase 'color':\n\n\t\t\treturn ColorKeyframeTrack;\n\n\t\tcase 'quaternion':\n\n\t\t\treturn QuaternionKeyframeTrack;\n\n\t\tcase 'bool':\n\t\tcase 'boolean':\n\n\t\t\treturn BooleanKeyframeTrack;\n\n\t\tcase 'string':\n\n\t\t\treturn StringKeyframeTrack;\n\n\t}\n\n\tthrow new Error( 'THREE.KeyframeTrack: Unsupported typeName: ' + typeName );\n\n}\n\nfunction parseKeyframeTrack( json ) {\n\n\tif ( json.type === undefined ) {\n\n\t\tthrow new Error( 'THREE.KeyframeTrack: track type undefined, can not parse' );\n\n\t}\n\n\tconst trackType = getTrackTypeForValueTypeName( json.type );\n\n\tif ( json.times === undefined ) {\n\n\t\tconst times = [], values = [];\n\n\t\tAnimationUtils.flattenJSON( json.keys, times, values, 'value' );\n\n\t\tjson.times = times;\n\t\tjson.values = values;\n\n\t}\n\n\t// derived classes can define a static parse method\n\tif ( trackType.parse !== undefined ) {\n\n\t\treturn trackType.parse( json );\n\n\t} else {\n\n\t\t// by default, we assume a constructor compatible with the base\n\t\treturn new trackType( json.name, json.times, json.values, json.interpolation );\n\n\t}\n\n}\n\nconst Cache = {\n\n\tenabled: false,\n\n\tfiles: {},\n\n\tadd: function ( key, file ) {\n\n\t\tif ( this.enabled === false ) return;\n\n\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\n\n\t\tthis.files[ key ] = file;\n\n\t},\n\n\tget: function ( key ) {\n\n\t\tif ( this.enabled === false ) return;\n\n\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\n\n\t\treturn this.files[ key ];\n\n\t},\n\n\tremove: function ( key ) {\n\n\t\tdelete this.files[ key ];\n\n\t},\n\n\tclear: function () {\n\n\t\tthis.files = {};\n\n\t}\n\n};\n\nclass LoadingManager {\n\n\tconstructor( onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tlet isLoading = false;\n\t\tlet itemsLoaded = 0;\n\t\tlet itemsTotal = 0;\n\t\tlet urlModifier = undefined;\n\t\tconst handlers = [];\n\n\t\t// Refer to #5689 for the reason why we don't set .onStart\n\t\t// in the constructor\n\n\t\tthis.onStart = undefined;\n\t\tthis.onLoad = onLoad;\n\t\tthis.onProgress = onProgress;\n\t\tthis.onError = onError;\n\n\t\tthis.itemStart = function ( url ) {\n\n\t\t\titemsTotal ++;\n\n\t\t\tif ( isLoading === false ) {\n\n\t\t\t\tif ( scope.onStart !== undefined ) {\n\n\t\t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tisLoading = true;\n\n\t\t};\n\n\t\tthis.itemEnd = function ( url ) {\n\n\t\t\titemsLoaded ++;\n\n\t\t\tif ( scope.onProgress !== undefined ) {\n\n\t\t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\n\n\t\t\t}\n\n\t\t\tif ( itemsLoaded === itemsTotal ) {\n\n\t\t\t\tisLoading = false;\n\n\t\t\t\tif ( scope.onLoad !== undefined ) {\n\n\t\t\t\t\tscope.onLoad();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.itemError = function ( url ) {\n\n\t\t\tif ( scope.onError !== undefined ) {\n\n\t\t\t\tscope.onError( url );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.resolveURL = function ( url ) {\n\n\t\t\tif ( urlModifier ) {\n\n\t\t\t\treturn urlModifier( url );\n\n\t\t\t}\n\n\t\t\treturn url;\n\n\t\t};\n\n\t\tthis.setURLModifier = function ( transform ) {\n\n\t\t\turlModifier = transform;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.addHandler = function ( regex, loader ) {\n\n\t\t\thandlers.push( regex, loader );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.removeHandler = function ( regex ) {\n\n\t\t\tconst index = handlers.indexOf( regex );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\thandlers.splice( index, 2 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.getHandler = function ( file ) {\n\n\t\t\tfor ( let i = 0, l = handlers.length; i < l; i += 2 ) {\n\n\t\t\t\tconst regex = handlers[ i ];\n\t\t\t\tconst loader = handlers[ i + 1 ];\n\n\t\t\t\tif ( regex.global ) regex.lastIndex = 0; // see #17920\n\n\t\t\t\tif ( regex.test( file ) ) {\n\n\t\t\t\t\treturn loader;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t};\n\n\t}\n\n}\n\nconst DefaultLoadingManager = new LoadingManager();\n\nclass Loader {\n\n\tconstructor( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t\tthis.crossOrigin = 'anonymous';\n\t\tthis.withCredentials = false;\n\t\tthis.path = '';\n\t\tthis.resourcePath = '';\n\t\tthis.requestHeader = {};\n\n\t}\n\n\tload( /* url, onLoad, onProgress, onError */ ) {}\n\n\tloadAsync( url, onProgress ) {\n\n\t\tconst scope = this;\n\n\t\treturn new Promise( function ( resolve, reject ) {\n\n\t\t\tscope.load( url, resolve, onProgress, reject );\n\n\t\t} );\n\n\t}\n\n\tparse( /* data */ ) {}\n\n\tsetCrossOrigin( crossOrigin ) {\n\n\t\tthis.crossOrigin = crossOrigin;\n\t\treturn this;\n\n\t}\n\n\tsetWithCredentials( value ) {\n\n\t\tthis.withCredentials = value;\n\t\treturn this;\n\n\t}\n\n\tsetPath( path ) {\n\n\t\tthis.path = path;\n\t\treturn this;\n\n\t}\n\n\tsetResourcePath( resourcePath ) {\n\n\t\tthis.resourcePath = resourcePath;\n\t\treturn this;\n\n\t}\n\n\tsetRequestHeader( requestHeader ) {\n\n\t\tthis.requestHeader = requestHeader;\n\t\treturn this;\n\n\t}\n\n}\n\nconst loading = {};\n\nclass FileLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tif ( url === undefined ) url = '';\n\n\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\turl = this.manager.resolveURL( url );\n\n\t\tconst cached = Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tthis.manager.itemStart( url );\n\n\t\t\tsetTimeout( () => {\n\n\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\tthis.manager.itemEnd( url );\n\n\t\t\t}, 0 );\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\t// Check if request is duplicate\n\n\t\tif ( loading[ url ] !== undefined ) {\n\n\t\t\tloading[ url ].push( {\n\n\t\t\t\tonLoad: onLoad,\n\t\t\t\tonProgress: onProgress,\n\t\t\t\tonError: onError\n\n\t\t\t} );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\t// Initialise array for duplicate requests\n\t\tloading[ url ] = [];\n\n\t\tloading[ url ].push( {\n\t\t\tonLoad: onLoad,\n\t\t\tonProgress: onProgress,\n\t\t\tonError: onError,\n\t\t} );\n\n\t\t// create request\n\t\tconst req = new Request( url, {\n\t\t\theaders: new Headers( this.requestHeader ),\n\t\t\tcredentials: this.withCredentials ? 'include' : 'same-origin',\n\t\t\t// An abort controller could be added within a future PR\n\t\t} );\n\n\t\t// start the fetch\n\t\tfetch( req )\n\t\t\t.then( response => {\n\n\t\t\t\tif ( response.status === 200 || response.status === 0 ) {\n\n\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\n\t\t\t\t\tif ( response.status === 0 ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.FileLoader: HTTP Status 0 received.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst callbacks = loading[ url ];\n\t\t\t\t\tconst reader = response.body.getReader();\n\t\t\t\t\tconst contentLength = response.headers.get( 'Content-Length' );\n\t\t\t\t\tconst total = contentLength ? parseInt( contentLength ) : 0;\n\t\t\t\t\tconst lengthComputable = total !== 0;\n\t\t\t\t\tlet loaded = 0;\n\n\t\t\t\t\t// periodically read data into the new stream tracking while download progress\n\t\t\t\t\treturn new ReadableStream( {\n\t\t\t\t\t\tstart( controller ) {\n\n\t\t\t\t\t\t\treadData();\n\n\t\t\t\t\t\t\tfunction readData() {\n\n\t\t\t\t\t\t\t\treader.read().then( ( { done, value } ) => {\n\n\t\t\t\t\t\t\t\t\tif ( done ) {\n\n\t\t\t\t\t\t\t\t\t\tcontroller.close();\n\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\tloaded += value.byteLength;\n\n\t\t\t\t\t\t\t\t\t\tconst event = new ProgressEvent( 'progress', { lengthComputable, loaded, total } );\n\t\t\t\t\t\t\t\t\t\tfor ( let i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\t\t\t\t\tconst callback = callbacks[ i ];\n\t\t\t\t\t\t\t\t\t\t\tif ( callback.onProgress ) callback.onProgress( event );\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tcontroller.enqueue( value );\n\t\t\t\t\t\t\t\t\t\treadData();\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow Error( `fetch for \"${response.url}\" responded with ${response.status}: ${response.statusText}` );\n\n\t\t\t\t}\n\n\t\t\t} )\n\t\t\t.then( stream => {\n\n\t\t\t\tconst response = new Response( stream );\n\n\t\t\t\tswitch ( this.responseType ) {\n\n\t\t\t\t\tcase 'arraybuffer':\n\n\t\t\t\t\t\treturn response.arrayBuffer();\n\n\t\t\t\t\tcase 'blob':\n\n\t\t\t\t\t\treturn response.blob();\n\n\t\t\t\t\tcase 'document':\n\n\t\t\t\t\t\treturn response.text()\n\t\t\t\t\t\t\t.then( text => {\n\n\t\t\t\t\t\t\t\tconst parser = new DOMParser();\n\t\t\t\t\t\t\t\treturn parser.parseFromString( text, this.mimeType );\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\tcase 'json':\n\n\t\t\t\t\t\treturn response.json();\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\treturn response.text();\n\n\t\t\t\t}\n\n\t\t\t} )\n\t\t\t.then( data => {\n\n\t\t\t\t// Add to cache only on HTTP success, so that we do not cache\n\t\t\t\t// error response bodies as proper responses to requests.\n\t\t\t\tCache.add( url, data );\n\n\t\t\t\tconst callbacks = loading[ url ];\n\t\t\t\tdelete loading[ url ];\n\n\t\t\t\tfor ( let i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst callback = callbacks[ i ];\n\t\t\t\t\tif ( callback.onLoad ) callback.onLoad( data );\n\n\t\t\t\t}\n\n\t\t\t\tthis.manager.itemEnd( url );\n\n\t\t\t} )\n\t\t\t.catch( err => {\n\n\t\t\t\t// Abort errors and other errors are handled the same\n\n\t\t\t\tconst callbacks = loading[ url ];\n\t\t\t\tdelete loading[ url ];\n\n\t\t\t\tfor ( let i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst callback = callbacks[ i ];\n\t\t\t\t\tif ( callback.onError ) callback.onError( err );\n\n\t\t\t\t}\n\n\t\t\t\tthis.manager.itemError( url );\n\t\t\t\tthis.manager.itemEnd( url );\n\n\t\t\t} );\n\n\t\tthis.manager.itemStart( url );\n\n\t}\n\n\tsetResponseType( value ) {\n\n\t\tthis.responseType = value;\n\t\treturn this;\n\n\t}\n\n\tsetMimeType( value ) {\n\n\t\tthis.mimeType = value;\n\t\treturn this;\n\n\t}\n\n}\n\nclass AnimationLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( json ) {\n\n\t\tconst animations = [];\n\n\t\tfor ( let i = 0; i < json.length; i ++ ) {\n\n\t\t\tconst clip = AnimationClip.parse( json[ i ] );\n\n\t\t\tanimations.push( clip );\n\n\t\t}\n\n\t\treturn animations;\n\n\t}\n\n}\n\n/**\n * Abstract Base class to block based textures loader (dds, pvr, ...)\n *\n * Sub classes have to implement the parse() method which will be used in load().\n */\n\nclass CompressedTextureLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst images = [];\n\n\t\tconst texture = new CompressedTexture();\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\n\t\tlet loaded = 0;\n\n\t\tfunction loadTexture( i ) {\n\n\t\t\tloader.load( url[ i ], function ( buffer ) {\n\n\t\t\t\tconst texDatas = scope.parse( buffer, true );\n\n\t\t\t\timages[ i ] = {\n\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t};\n\n\t\t\t\tloaded += 1;\n\n\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\tif ( texDatas.mipmapCount === 1 ) texture.minFilter = LinearFilter;\n\n\t\t\t\t\ttexture.image = images;\n\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t\tif ( Array.isArray( url ) ) {\n\n\t\t\tfor ( let i = 0, il = url.length; i < il; ++ i ) {\n\n\t\t\t\tloadTexture( i );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// compressed cubemap texture stored in a single DDS file\n\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\tconst texDatas = scope.parse( buffer, true );\n\n\t\t\t\tif ( texDatas.isCubemap ) {\n\n\t\t\t\t\tconst faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n\t\t\t\t\tfor ( let f = 0; f < faces; f ++ ) {\n\n\t\t\t\t\t\timages[ f ] = { mipmaps: [] };\n\n\t\t\t\t\t\tfor ( let i = 0; i < texDatas.mipmapCount; i ++ ) {\n\n\t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\n\t\t\t\t\t\t\timages[ f ].format = texDatas.format;\n\t\t\t\t\t\t\timages[ f ].width = texDatas.width;\n\t\t\t\t\t\t\timages[ f ].height = texDatas.height;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.image = images;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\n\t\t\t\t}\n\n\t\t\t\tif ( texDatas.mipmapCount === 1 ) {\n\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n}\n\nclass ImageLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\turl = this.manager.resolveURL( url );\n\n\t\tconst scope = this;\n\n\t\tconst cached = Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\tsetTimeout( function () {\n\n\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, 0 );\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\tconst image = createElementNS( 'img' );\n\n\t\tfunction onImageLoad() {\n\n\t\t\tremoveEventListeners();\n\n\t\t\tCache.add( url, this );\n\n\t\t\tif ( onLoad ) onLoad( this );\n\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t}\n\n\t\tfunction onImageError( event ) {\n\n\t\t\tremoveEventListeners();\n\n\t\t\tif ( onError ) onError( event );\n\n\t\t\tscope.manager.itemError( url );\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t}\n\n\t\tfunction removeEventListeners() {\n\n\t\t\timage.removeEventListener( 'load', onImageLoad, false );\n\t\t\timage.removeEventListener( 'error', onImageError, false );\n\n\t\t}\n\n\t\timage.addEventListener( 'load', onImageLoad, false );\n\t\timage.addEventListener( 'error', onImageError, false );\n\n\t\tif ( url.substr( 0, 5 ) !== 'data:' ) {\n\n\t\t\tif ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;\n\n\t\t}\n\n\t\tscope.manager.itemStart( url );\n\n\t\timage.src = url;\n\n\t\treturn image;\n\n\t}\n\n}\n\nclass CubeTextureLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( urls, onLoad, onProgress, onError ) {\n\n\t\tconst texture = new CubeTexture();\n\n\t\tconst loader = new ImageLoader( this.manager );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.setPath( this.path );\n\n\t\tlet loaded = 0;\n\n\t\tfunction loadTexture( i ) {\n\n\t\t\tloader.load( urls[ i ], function ( image ) {\n\n\t\t\t\ttexture.images[ i ] = image;\n\n\t\t\t\tloaded ++;\n\n\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, undefined, onError );\n\n\t\t}\n\n\t\tfor ( let i = 0; i < urls.length; ++ i ) {\n\n\t\t\tloadTexture( i );\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n}\n\n/**\n * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n *\n * Sub classes have to implement the parse() method which will be used in load().\n */\n\nclass DataTextureLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst texture = new DataTexture();\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setPath( this.path );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\tconst texData = scope.parse( buffer );\n\n\t\t\tif ( ! texData ) return;\n\n\t\t\tif ( texData.image !== undefined ) {\n\n\t\t\t\ttexture.image = texData.image;\n\n\t\t\t} else if ( texData.data !== undefined ) {\n\n\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\ttexture.image.data = texData.data;\n\n\t\t\t}\n\n\t\t\ttexture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\n\t\t\ttexture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\n\n\t\t\ttexture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\n\t\t\ttexture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;\n\n\t\t\ttexture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\n\n\t\t\tif ( texData.encoding !== undefined ) {\n\n\t\t\t\ttexture.encoding = texData.encoding;\n\n\t\t\t}\n\n\t\t\tif ( texData.flipY !== undefined ) {\n\n\t\t\t\ttexture.flipY = texData.flipY;\n\n\t\t\t}\n\n\t\t\tif ( texData.format !== undefined ) {\n\n\t\t\t\ttexture.format = texData.format;\n\n\t\t\t}\n\n\t\t\tif ( texData.type !== undefined ) {\n\n\t\t\t\ttexture.type = texData.type;\n\n\t\t\t}\n\n\t\t\tif ( texData.mipmaps !== undefined ) {\n\n\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter; // presumably...\n\n\t\t\t}\n\n\t\t\tif ( texData.mipmapCount === 1 ) {\n\n\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t}\n\n\t\t\tif ( texData.generateMipmaps !== undefined ) {\n\n\t\t\t\ttexture.generateMipmaps = texData.generateMipmaps;\n\n\t\t\t}\n\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}, onProgress, onError );\n\n\n\t\treturn texture;\n\n\t}\n\n}\n\nclass TextureLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst texture = new Texture();\n\n\t\tconst loader = new ImageLoader( this.manager );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.setPath( this.path );\n\n\t\tloader.load( url, function ( image ) {\n\n\t\t\ttexture.image = image;\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\tif ( onLoad !== undefined ) {\n\n\t\t\t\tonLoad( texture );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t\treturn texture;\n\n\t}\n\n}\n\nclass Light extends Object3D {\n\n\tconstructor( color, intensity = 1 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'Light';\n\n\t\tthis.color = new Color( color );\n\t\tthis.intensity = intensity;\n\n\t}\n\n\tdispose() {\n\n\t\t// Empty here in base class; some subclasses override.\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.intensity = source.intensity;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.color = this.color.getHex();\n\t\tdata.object.intensity = this.intensity;\n\n\t\tif ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\n\n\t\tif ( this.distance !== undefined ) data.object.distance = this.distance;\n\t\tif ( this.angle !== undefined ) data.object.angle = this.angle;\n\t\tif ( this.decay !== undefined ) data.object.decay = this.decay;\n\t\tif ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;\n\n\t\tif ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();\n\n\t\treturn data;\n\n\t}\n\n}\n\nLight.prototype.isLight = true;\n\nclass HemisphereLight extends Light {\n\n\tconstructor( skyColor, groundColor, intensity ) {\n\n\t\tsuper( skyColor, intensity );\n\n\t\tthis.type = 'HemisphereLight';\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.groundColor = new Color( groundColor );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tLight.prototype.copy.call( this, source );\n\n\t\tthis.groundColor.copy( source.groundColor );\n\n\t\treturn this;\n\n\t}\n\n}\n\nHemisphereLight.prototype.isHemisphereLight = true;\n\nconst _projScreenMatrix$1 = /*@__PURE__*/ new Matrix4();\nconst _lightPositionWorld$1 = /*@__PURE__*/ new Vector3();\nconst _lookTarget$1 = /*@__PURE__*/ new Vector3();\n\nclass LightShadow {\n\n\tconstructor( camera ) {\n\n\t\tthis.camera = camera;\n\n\t\tthis.bias = 0;\n\t\tthis.normalBias = 0;\n\t\tthis.radius = 1;\n\t\tthis.blurSamples = 8;\n\n\t\tthis.mapSize = new Vector2( 512, 512 );\n\n\t\tthis.map = null;\n\t\tthis.mapPass = null;\n\t\tthis.matrix = new Matrix4();\n\n\t\tthis.autoUpdate = true;\n\t\tthis.needsUpdate = false;\n\n\t\tthis._frustum = new Frustum();\n\t\tthis._frameExtents = new Vector2( 1, 1 );\n\n\t\tthis._viewportCount = 1;\n\n\t\tthis._viewports = [\n\n\t\t\tnew Vector4( 0, 0, 1, 1 )\n\n\t\t];\n\n\t}\n\n\tgetViewportCount() {\n\n\t\treturn this._viewportCount;\n\n\t}\n\n\tgetFrustum() {\n\n\t\treturn this._frustum;\n\n\t}\n\n\tupdateMatrices( light ) {\n\n\t\tconst shadowCamera = this.camera;\n\t\tconst shadowMatrix = this.matrix;\n\n\t\t_lightPositionWorld$1.setFromMatrixPosition( light.matrixWorld );\n\t\tshadowCamera.position.copy( _lightPositionWorld$1 );\n\n\t\t_lookTarget$1.setFromMatrixPosition( light.target.matrixWorld );\n\t\tshadowCamera.lookAt( _lookTarget$1 );\n\t\tshadowCamera.updateMatrixWorld();\n\n\t\t_projScreenMatrix$1.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n\t\tthis._frustum.setFromProjectionMatrix( _projScreenMatrix$1 );\n\n\t\tshadowMatrix.set(\n\t\t\t0.5, 0.0, 0.0, 0.5,\n\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t0.0, 0.0, 0.0, 1.0\n\t\t);\n\n\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\n\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\n\n\t}\n\n\tgetViewport( viewportIndex ) {\n\n\t\treturn this._viewports[ viewportIndex ];\n\n\t}\n\n\tgetFrameExtents() {\n\n\t\treturn this._frameExtents;\n\n\t}\n\n\tdispose() {\n\n\t\tif ( this.map ) {\n\n\t\t\tthis.map.dispose();\n\n\t\t}\n\n\t\tif ( this.mapPass ) {\n\n\t\t\tthis.mapPass.dispose();\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.camera = source.camera.clone();\n\n\t\tthis.bias = source.bias;\n\t\tthis.radius = source.radius;\n\n\t\tthis.mapSize.copy( source.mapSize );\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst object = {};\n\n\t\tif ( this.bias !== 0 ) object.bias = this.bias;\n\t\tif ( this.normalBias !== 0 ) object.normalBias = this.normalBias;\n\t\tif ( this.radius !== 1 ) object.radius = this.radius;\n\t\tif ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();\n\n\t\tobject.camera = this.camera.toJSON( false ).object;\n\t\tdelete object.camera.matrix;\n\n\t\treturn object;\n\n\t}\n\n}\n\nclass SpotLightShadow extends LightShadow {\n\n\tconstructor() {\n\n\t\tsuper( new PerspectiveCamera( 50, 1, 0.5, 500 ) );\n\n\t\tthis.focus = 1;\n\n\t}\n\n\tupdateMatrices( light ) {\n\n\t\tconst camera = this.camera;\n\n\t\tconst fov = RAD2DEG * 2 * light.angle * this.focus;\n\t\tconst aspect = this.mapSize.width / this.mapSize.height;\n\t\tconst far = light.distance || camera.far;\n\n\t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\n\n\t\t\tcamera.fov = fov;\n\t\t\tcamera.aspect = aspect;\n\t\t\tcamera.far = far;\n\t\t\tcamera.updateProjectionMatrix();\n\n\t\t}\n\n\t\tsuper.updateMatrices( light );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.focus = source.focus;\n\n\t\treturn this;\n\n\t}\n\n}\n\nSpotLightShadow.prototype.isSpotLightShadow = true;\n\nclass SpotLight extends Light {\n\n\tconstructor( color, intensity, distance = 0, angle = Math.PI / 3, penumbra = 0, decay = 1 ) {\n\n\t\tsuper( color, intensity );\n\n\t\tthis.type = 'SpotLight';\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.target = new Object3D();\n\n\t\tthis.distance = distance;\n\t\tthis.angle = angle;\n\t\tthis.penumbra = penumbra;\n\t\tthis.decay = decay; // for physically correct lights, should be 2.\n\n\t\tthis.shadow = new SpotLightShadow();\n\n\t}\n\n\tget power() {\n\n\t\t// compute the light's luminous power (in lumens) from its intensity (in candela)\n\t\t// by convention for a spotlight, luminous power (lm) = π * luminous intensity (cd)\n\t\treturn this.intensity * Math.PI;\n\n\t}\n\n\tset power( power ) {\n\n\t\t// set the light's intensity (in candela) from the desired luminous power (in lumens)\n\t\tthis.intensity = power / Math.PI;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.shadow.dispose();\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.distance = source.distance;\n\t\tthis.angle = source.angle;\n\t\tthis.penumbra = source.penumbra;\n\t\tthis.decay = source.decay;\n\n\t\tthis.target = source.target.clone();\n\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n}\n\nSpotLight.prototype.isSpotLight = true;\n\nconst _projScreenMatrix = /*@__PURE__*/ new Matrix4();\nconst _lightPositionWorld = /*@__PURE__*/ new Vector3();\nconst _lookTarget = /*@__PURE__*/ new Vector3();\n\nclass PointLightShadow extends LightShadow {\n\n\tconstructor() {\n\n\t\tsuper( new PerspectiveCamera( 90, 1, 0.5, 500 ) );\n\n\t\tthis._frameExtents = new Vector2( 4, 2 );\n\n\t\tthis._viewportCount = 6;\n\n\t\tthis._viewports = [\n\t\t\t// These viewports map a cube-map onto a 2D texture with the\n\t\t\t// following orientation:\n\t\t\t//\n\t\t\t//  xzXZ\n\t\t\t//   y Y\n\t\t\t//\n\t\t\t// X - Positive x direction\n\t\t\t// x - Negative x direction\n\t\t\t// Y - Positive y direction\n\t\t\t// y - Negative y direction\n\t\t\t// Z - Positive z direction\n\t\t\t// z - Negative z direction\n\n\t\t\t// positive X\n\t\t\tnew Vector4( 2, 1, 1, 1 ),\n\t\t\t// negative X\n\t\t\tnew Vector4( 0, 1, 1, 1 ),\n\t\t\t// positive Z\n\t\t\tnew Vector4( 3, 1, 1, 1 ),\n\t\t\t// negative Z\n\t\t\tnew Vector4( 1, 1, 1, 1 ),\n\t\t\t// positive Y\n\t\t\tnew Vector4( 3, 0, 1, 1 ),\n\t\t\t// negative Y\n\t\t\tnew Vector4( 1, 0, 1, 1 )\n\t\t];\n\n\t\tthis._cubeDirections = [\n\t\t\tnew Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),\n\t\t\tnew Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )\n\t\t];\n\n\t\tthis._cubeUps = [\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),\tnew Vector3( 0, 0, - 1 )\n\t\t];\n\n\t}\n\n\tupdateMatrices( light, viewportIndex = 0 ) {\n\n\t\tconst camera = this.camera;\n\t\tconst shadowMatrix = this.matrix;\n\n\t\tconst far = light.distance || camera.far;\n\n\t\tif ( far !== camera.far ) {\n\n\t\t\tcamera.far = far;\n\t\t\tcamera.updateProjectionMatrix();\n\n\t\t}\n\n\t\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\tcamera.position.copy( _lightPositionWorld );\n\n\t\t_lookTarget.copy( camera.position );\n\t\t_lookTarget.add( this._cubeDirections[ viewportIndex ] );\n\t\tcamera.up.copy( this._cubeUps[ viewportIndex ] );\n\t\tcamera.lookAt( _lookTarget );\n\t\tcamera.updateMatrixWorld();\n\n\t\tshadowMatrix.makeTranslation( - _lightPositionWorld.x, - _lightPositionWorld.y, - _lightPositionWorld.z );\n\n\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\tthis._frustum.setFromProjectionMatrix( _projScreenMatrix );\n\n\t}\n\n}\n\nPointLightShadow.prototype.isPointLightShadow = true;\n\nclass PointLight extends Light {\n\n\tconstructor( color, intensity, distance = 0, decay = 1 ) {\n\n\t\tsuper( color, intensity );\n\n\t\tthis.type = 'PointLight';\n\n\t\tthis.distance = distance;\n\t\tthis.decay = decay; // for physically correct lights, should be 2.\n\n\t\tthis.shadow = new PointLightShadow();\n\n\t}\n\n\tget power() {\n\n\t\t// compute the light's luminous power (in lumens) from its intensity (in candela)\n\t\t// for an isotropic light source, luminous power (lm) = 4 π luminous intensity (cd)\n\t\treturn this.intensity * 4 * Math.PI;\n\n\t}\n\n\tset power( power ) {\n\n\t\t// set the light's intensity (in candela) from the desired luminous power (in lumens)\n\t\tthis.intensity = power / ( 4 * Math.PI );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.shadow.dispose();\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.distance = source.distance;\n\t\tthis.decay = source.decay;\n\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n}\n\nPointLight.prototype.isPointLight = true;\n\nclass DirectionalLightShadow extends LightShadow {\n\n\tconstructor() {\n\n\t\tsuper( new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\n\n\t}\n\n}\n\nDirectionalLightShadow.prototype.isDirectionalLightShadow = true;\n\nclass DirectionalLight extends Light {\n\n\tconstructor( color, intensity ) {\n\n\t\tsuper( color, intensity );\n\n\t\tthis.type = 'DirectionalLight';\n\n\t\tthis.position.copy( Object3D.DefaultUp );\n\t\tthis.updateMatrix();\n\n\t\tthis.target = new Object3D();\n\n\t\tthis.shadow = new DirectionalLightShadow();\n\n\t}\n\n\tdispose() {\n\n\t\tthis.shadow.dispose();\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.target = source.target.clone();\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n}\n\nDirectionalLight.prototype.isDirectionalLight = true;\n\nclass AmbientLight extends Light {\n\n\tconstructor( color, intensity ) {\n\n\t\tsuper( color, intensity );\n\n\t\tthis.type = 'AmbientLight';\n\n\t}\n\n}\n\nAmbientLight.prototype.isAmbientLight = true;\n\nclass RectAreaLight extends Light {\n\n\tconstructor( color, intensity, width = 10, height = 10 ) {\n\n\t\tsuper( color, intensity );\n\n\t\tthis.type = 'RectAreaLight';\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\n\t}\n\n\tget power() {\n\n\t\t// compute the light's luminous power (in lumens) from its intensity (in nits)\n\t\treturn this.intensity * this.width * this.height * Math.PI;\n\n\t}\n\n\tset power( power ) {\n\n\t\t// set the light's intensity (in nits) from the desired luminous power (in lumens)\n\t\tthis.intensity = power / ( this.width * this.height * Math.PI );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.width = source.width;\n\t\tthis.height = source.height;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.width = this.width;\n\t\tdata.object.height = this.height;\n\n\t\treturn data;\n\n\t}\n\n}\n\nRectAreaLight.prototype.isRectAreaLight = true;\n\n/**\n * Primary reference:\n *   https://graphics.stanford.edu/papers/envmap/envmap.pdf\n *\n * Secondary reference:\n *   https://www.ppsloan.org/publications/StupidSH36.pdf\n */\n\n// 3-band SH defined by 9 coefficients\n\nclass SphericalHarmonics3 {\n\n\tconstructor() {\n\n\t\tthis.coefficients = [];\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients.push( new Vector3() );\n\n\t\t}\n\n\t}\n\n\tset( coefficients ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].copy( coefficients[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tzero() {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].set( 0, 0, 0 );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// get the radiance in the direction of the normal\n\t// target is a Vector3\n\tgetAt( normal, target ) {\n\n\t\t// normal is assumed to be unit length\n\n\t\tconst x = normal.x, y = normal.y, z = normal.z;\n\n\t\tconst coeff = this.coefficients;\n\n\t\t// band 0\n\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.282095 );\n\n\t\t// band 1\n\t\ttarget.addScaledVector( coeff[ 1 ], 0.488603 * y );\n\t\ttarget.addScaledVector( coeff[ 2 ], 0.488603 * z );\n\t\ttarget.addScaledVector( coeff[ 3 ], 0.488603 * x );\n\n\t\t// band 2\n\t\ttarget.addScaledVector( coeff[ 4 ], 1.092548 * ( x * y ) );\n\t\ttarget.addScaledVector( coeff[ 5 ], 1.092548 * ( y * z ) );\n\t\ttarget.addScaledVector( coeff[ 6 ], 0.315392 * ( 3.0 * z * z - 1.0 ) );\n\t\ttarget.addScaledVector( coeff[ 7 ], 1.092548 * ( x * z ) );\n\t\ttarget.addScaledVector( coeff[ 8 ], 0.546274 * ( x * x - y * y ) );\n\n\t\treturn target;\n\n\t}\n\n\t// get the irradiance (radiance convolved with cosine lobe) in the direction of the normal\n\t// target is a Vector3\n\t// https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\tgetIrradianceAt( normal, target ) {\n\n\t\t// normal is assumed to be unit length\n\n\t\tconst x = normal.x, y = normal.y, z = normal.z;\n\n\t\tconst coeff = this.coefficients;\n\n\t\t// band 0\n\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.886227 ); // π * 0.282095\n\n\t\t// band 1\n\t\ttarget.addScaledVector( coeff[ 1 ], 2.0 * 0.511664 * y ); // ( 2 * π / 3 ) * 0.488603\n\t\ttarget.addScaledVector( coeff[ 2 ], 2.0 * 0.511664 * z );\n\t\ttarget.addScaledVector( coeff[ 3 ], 2.0 * 0.511664 * x );\n\n\t\t// band 2\n\t\ttarget.addScaledVector( coeff[ 4 ], 2.0 * 0.429043 * x * y ); // ( π / 4 ) * 1.092548\n\t\ttarget.addScaledVector( coeff[ 5 ], 2.0 * 0.429043 * y * z );\n\t\ttarget.addScaledVector( coeff[ 6 ], 0.743125 * z * z - 0.247708 ); // ( π / 4 ) * 0.315392 * 3\n\t\ttarget.addScaledVector( coeff[ 7 ], 2.0 * 0.429043 * x * z );\n\t\ttarget.addScaledVector( coeff[ 8 ], 0.429043 * ( x * x - y * y ) ); // ( π / 4 ) * 0.546274\n\n\t\treturn target;\n\n\t}\n\n\tadd( sh ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].add( sh.coefficients[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\taddScaledSH( sh, s ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].addScaledVector( sh.coefficients[ i ], s );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tscale( s ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].multiplyScalar( s );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tlerp( sh, alpha ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].lerp( sh.coefficients[ i ], alpha );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tequals( sh ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tif ( ! this.coefficients[ i ].equals( sh.coefficients[ i ] ) ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tcopy( sh ) {\n\n\t\treturn this.set( sh.coefficients );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tconst coefficients = this.coefficients;\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tcoefficients[ i ].fromArray( array, offset + ( i * 3 ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tconst coefficients = this.coefficients;\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tcoefficients[ i ].toArray( array, offset + ( i * 3 ) );\n\n\t\t}\n\n\t\treturn array;\n\n\t}\n\n\t// evaluate the basis functions\n\t// shBasis is an Array[ 9 ]\n\tstatic getBasisAt( normal, shBasis ) {\n\n\t\t// normal is assumed to be unit length\n\n\t\tconst x = normal.x, y = normal.y, z = normal.z;\n\n\t\t// band 0\n\t\tshBasis[ 0 ] = 0.282095;\n\n\t\t// band 1\n\t\tshBasis[ 1 ] = 0.488603 * y;\n\t\tshBasis[ 2 ] = 0.488603 * z;\n\t\tshBasis[ 3 ] = 0.488603 * x;\n\n\t\t// band 2\n\t\tshBasis[ 4 ] = 1.092548 * x * y;\n\t\tshBasis[ 5 ] = 1.092548 * y * z;\n\t\tshBasis[ 6 ] = 0.315392 * ( 3 * z * z - 1 );\n\t\tshBasis[ 7 ] = 1.092548 * x * z;\n\t\tshBasis[ 8 ] = 0.546274 * ( x * x - y * y );\n\n\t}\n\n}\n\nSphericalHarmonics3.prototype.isSphericalHarmonics3 = true;\n\nclass LightProbe extends Light {\n\n\tconstructor( sh = new SphericalHarmonics3(), intensity = 1 ) {\n\n\t\tsuper( undefined, intensity );\n\n\t\tthis.sh = sh;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.sh.copy( source.sh );\n\n\t\treturn this;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tthis.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();\n\t\tthis.sh.fromArray( json.sh );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.sh = this.sh.toArray();\n\n\t\treturn data;\n\n\t}\n\n}\n\nLightProbe.prototype.isLightProbe = true;\n\nclass MaterialLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\t\tthis.textures = {};\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setRequestHeader( scope.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( json ) {\n\n\t\tconst textures = this.textures;\n\n\t\tfunction getTexture( name ) {\n\n\t\t\tif ( textures[ name ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\n\n\t\t\t}\n\n\t\t\treturn textures[ name ];\n\n\t\t}\n\n\t\tconst material = new Materials[ json.type ]();\n\n\t\tif ( json.uuid !== undefined ) material.uuid = json.uuid;\n\t\tif ( json.name !== undefined ) material.name = json.name;\n\t\tif ( json.color !== undefined && material.color !== undefined ) material.color.setHex( json.color );\n\t\tif ( json.roughness !== undefined ) material.roughness = json.roughness;\n\t\tif ( json.metalness !== undefined ) material.metalness = json.metalness;\n\t\tif ( json.sheen !== undefined ) material.sheen = json.sheen;\n\t\tif ( json.sheenColor !== undefined ) material.sheenColor = new Color().setHex( json.sheenColor );\n\t\tif ( json.sheenRoughness !== undefined ) material.sheenRoughness = json.sheenRoughness;\n\t\tif ( json.emissive !== undefined && material.emissive !== undefined ) material.emissive.setHex( json.emissive );\n\t\tif ( json.specular !== undefined && material.specular !== undefined ) material.specular.setHex( json.specular );\n\t\tif ( json.specularIntensity !== undefined ) material.specularIntensity = json.specularIntensity;\n\t\tif ( json.specularColor !== undefined && material.specularColor !== undefined ) material.specularColor.setHex( json.specularColor );\n\t\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\n\t\tif ( json.clearcoat !== undefined ) material.clearcoat = json.clearcoat;\n\t\tif ( json.clearcoatRoughness !== undefined ) material.clearcoatRoughness = json.clearcoatRoughness;\n\t\tif ( json.transmission !== undefined ) material.transmission = json.transmission;\n\t\tif ( json.thickness !== undefined ) material.thickness = json.thickness;\n\t\tif ( json.attenuationDistance !== undefined ) material.attenuationDistance = json.attenuationDistance;\n\t\tif ( json.attenuationColor !== undefined && material.attenuationColor !== undefined ) material.attenuationColor.setHex( json.attenuationColor );\n\t\tif ( json.fog !== undefined ) material.fog = json.fog;\n\t\tif ( json.flatShading !== undefined ) material.flatShading = json.flatShading;\n\t\tif ( json.blending !== undefined ) material.blending = json.blending;\n\t\tif ( json.combine !== undefined ) material.combine = json.combine;\n\t\tif ( json.side !== undefined ) material.side = json.side;\n\t\tif ( json.shadowSide !== undefined ) material.shadowSide = json.shadowSide;\n\t\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\n\t\tif ( json.format !== undefined ) material.format = json.format;\n\t\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\n\t\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\n\t\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\n\t\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\n\t\tif ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;\n\n\t\tif ( json.stencilWrite !== undefined ) material.stencilWrite = json.stencilWrite;\n\t\tif ( json.stencilWriteMask !== undefined ) material.stencilWriteMask = json.stencilWriteMask;\n\t\tif ( json.stencilFunc !== undefined ) material.stencilFunc = json.stencilFunc;\n\t\tif ( json.stencilRef !== undefined ) material.stencilRef = json.stencilRef;\n\t\tif ( json.stencilFuncMask !== undefined ) material.stencilFuncMask = json.stencilFuncMask;\n\t\tif ( json.stencilFail !== undefined ) material.stencilFail = json.stencilFail;\n\t\tif ( json.stencilZFail !== undefined ) material.stencilZFail = json.stencilZFail;\n\t\tif ( json.stencilZPass !== undefined ) material.stencilZPass = json.stencilZPass;\n\n\t\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\n\t\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\n\t\tif ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;\n\t\tif ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;\n\n\t\tif ( json.rotation !== undefined ) material.rotation = json.rotation;\n\n\t\tif ( json.linewidth !== 1 ) material.linewidth = json.linewidth;\n\t\tif ( json.dashSize !== undefined ) material.dashSize = json.dashSize;\n\t\tif ( json.gapSize !== undefined ) material.gapSize = json.gapSize;\n\t\tif ( json.scale !== undefined ) material.scale = json.scale;\n\n\t\tif ( json.polygonOffset !== undefined ) material.polygonOffset = json.polygonOffset;\n\t\tif ( json.polygonOffsetFactor !== undefined ) material.polygonOffsetFactor = json.polygonOffsetFactor;\n\t\tif ( json.polygonOffsetUnits !== undefined ) material.polygonOffsetUnits = json.polygonOffsetUnits;\n\n\t\tif ( json.dithering !== undefined ) material.dithering = json.dithering;\n\n\t\tif ( json.alphaToCoverage !== undefined ) material.alphaToCoverage = json.alphaToCoverage;\n\t\tif ( json.premultipliedAlpha !== undefined ) material.premultipliedAlpha = json.premultipliedAlpha;\n\n\t\tif ( json.visible !== undefined ) material.visible = json.visible;\n\n\t\tif ( json.toneMapped !== undefined ) material.toneMapped = json.toneMapped;\n\n\t\tif ( json.userData !== undefined ) material.userData = json.userData;\n\n\t\tif ( json.vertexColors !== undefined ) {\n\n\t\t\tif ( typeof json.vertexColors === 'number' ) {\n\n\t\t\t\tmaterial.vertexColors = ( json.vertexColors > 0 ) ? true : false;\n\n\t\t\t} else {\n\n\t\t\t\tmaterial.vertexColors = json.vertexColors;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Shader Material\n\n\t\tif ( json.uniforms !== undefined ) {\n\n\t\t\tfor ( const name in json.uniforms ) {\n\n\t\t\t\tconst uniform = json.uniforms[ name ];\n\n\t\t\t\tmaterial.uniforms[ name ] = {};\n\n\t\t\t\tswitch ( uniform.type ) {\n\n\t\t\t\t\tcase 't':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = getTexture( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'c':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Color().setHex( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'v2':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector2().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'v3':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector3().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'v4':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector4().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'm3':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix3().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'm4':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix4().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = uniform.value;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( json.defines !== undefined ) material.defines = json.defines;\n\t\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\n\t\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\n\n\t\tif ( json.extensions !== undefined ) {\n\n\t\t\tfor ( const key in json.extensions ) {\n\n\t\t\t\tmaterial.extensions[ key ] = json.extensions[ key ];\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Deprecated\n\n\t\tif ( json.shading !== undefined ) material.flatShading = json.shading === 1; // THREE.FlatShading\n\n\t\t// for PointsMaterial\n\n\t\tif ( json.size !== undefined ) material.size = json.size;\n\t\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\n\n\t\t// maps\n\n\t\tif ( json.map !== undefined ) material.map = getTexture( json.map );\n\t\tif ( json.matcap !== undefined ) material.matcap = getTexture( json.matcap );\n\n\t\tif ( json.alphaMap !== undefined ) material.alphaMap = getTexture( json.alphaMap );\n\n\t\tif ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );\n\t\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\n\n\t\tif ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );\n\t\tif ( json.normalMapType !== undefined ) material.normalMapType = json.normalMapType;\n\t\tif ( json.normalScale !== undefined ) {\n\n\t\t\tlet normalScale = json.normalScale;\n\n\t\t\tif ( Array.isArray( normalScale ) === false ) {\n\n\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\n\t\t\t\tnormalScale = [ normalScale, normalScale ];\n\n\t\t\t}\n\n\t\t\tmaterial.normalScale = new Vector2().fromArray( normalScale );\n\n\t\t}\n\n\t\tif ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );\n\t\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\n\t\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\n\n\t\tif ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );\n\t\tif ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );\n\n\t\tif ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );\n\t\tif ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;\n\n\t\tif ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );\n\t\tif ( json.specularIntensityMap !== undefined ) material.specularIntensityMap = getTexture( json.specularIntensityMap );\n\t\tif ( json.specularColorMap !== undefined ) material.specularColorMap = getTexture( json.specularColorMap );\n\n\t\tif ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );\n\t\tif ( json.envMapIntensity !== undefined ) material.envMapIntensity = json.envMapIntensity;\n\n\t\tif ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;\n\t\tif ( json.refractionRatio !== undefined ) material.refractionRatio = json.refractionRatio;\n\n\t\tif ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );\n\t\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\n\n\t\tif ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );\n\t\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\n\n\t\tif ( json.gradientMap !== undefined ) material.gradientMap = getTexture( json.gradientMap );\n\n\t\tif ( json.clearcoatMap !== undefined ) material.clearcoatMap = getTexture( json.clearcoatMap );\n\t\tif ( json.clearcoatRoughnessMap !== undefined ) material.clearcoatRoughnessMap = getTexture( json.clearcoatRoughnessMap );\n\t\tif ( json.clearcoatNormalMap !== undefined ) material.clearcoatNormalMap = getTexture( json.clearcoatNormalMap );\n\t\tif ( json.clearcoatNormalScale !== undefined ) material.clearcoatNormalScale = new Vector2().fromArray( json.clearcoatNormalScale );\n\n\t\tif ( json.transmissionMap !== undefined ) material.transmissionMap = getTexture( json.transmissionMap );\n\t\tif ( json.thicknessMap !== undefined ) material.thicknessMap = getTexture( json.thicknessMap );\n\n\t\tif ( json.sheenColorMap !== undefined ) material.sheenColorMap = getTexture( json.sheenColorMap );\n\t\tif ( json.sheenRoughnessMap !== undefined ) material.sheenRoughnessMap = getTexture( json.sheenRoughnessMap );\n\n\t\treturn material;\n\n\t}\n\n\tsetTextures( value ) {\n\n\t\tthis.textures = value;\n\t\treturn this;\n\n\t}\n\n}\n\nclass LoaderUtils {\n\n\tstatic decodeText( array ) {\n\n\t\tif ( typeof TextDecoder !== 'undefined' ) {\n\n\t\t\treturn new TextDecoder().decode( array );\n\n\t\t}\n\n\t\t// Avoid the String.fromCharCode.apply(null, array) shortcut, which\n\t\t// throws a \"maximum call stack size exceeded\" error for large arrays.\n\n\t\tlet s = '';\n\n\t\tfor ( let i = 0, il = array.length; i < il; i ++ ) {\n\n\t\t\t// Implicitly assumes little-endian.\n\t\t\ts += String.fromCharCode( array[ i ] );\n\n\t\t}\n\n\t\ttry {\n\n\t\t\t// merges multi-byte utf-8 characters.\n\n\t\t\treturn decodeURIComponent( escape( s ) );\n\n\t\t} catch ( e ) { // see #16358\n\n\t\t\treturn s;\n\n\t\t}\n\n\t}\n\n\tstatic extractUrlBase( url ) {\n\n\t\tconst index = url.lastIndexOf( '/' );\n\n\t\tif ( index === - 1 ) return './';\n\n\t\treturn url.substr( 0, index + 1 );\n\n\t}\n\n\tstatic resolveURL( url, path ) {\n\n\t\t// Invalid URL\n\t\tif ( typeof url !== 'string' || url === '' ) return '';\n\n\t\t// Host Relative URL\n\t\tif ( /^https?:\\/\\//i.test( path ) && /^\\//.test( url ) ) {\n\n\t\t\tpath = path.replace( /(^https?:\\/\\/[^\\/]+).*/i, '$1' );\n\n\t\t}\n\n\t\t// Absolute URL http://,https://,//\n\t\tif ( /^(https?:)?\\/\\//i.test( url ) ) return url;\n\n\t\t// Data URI\n\t\tif ( /^data:.*,.*$/i.test( url ) ) return url;\n\n\t\t// Blob URL\n\t\tif ( /^blob:.*$/i.test( url ) ) return url;\n\n\t\t// Relative URL\n\t\treturn path + url;\n\n\t}\n\n}\n\nclass InstancedBufferGeometry extends BufferGeometry {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.type = 'InstancedBufferGeometry';\n\t\tthis.instanceCount = Infinity;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.instanceCount = source.instanceCount;\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON( this );\n\n\t\tdata.instanceCount = this.instanceCount;\n\n\t\tdata.isInstancedBufferGeometry = true;\n\n\t\treturn data;\n\n\t}\n\n}\n\nInstancedBufferGeometry.prototype.isInstancedBufferGeometry = true;\n\nclass BufferGeometryLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setRequestHeader( scope.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( json ) {\n\n\t\tconst interleavedBufferMap = {};\n\t\tconst arrayBufferMap = {};\n\n\t\tfunction getInterleavedBuffer( json, uuid ) {\n\n\t\t\tif ( interleavedBufferMap[ uuid ] !== undefined ) return interleavedBufferMap[ uuid ];\n\n\t\t\tconst interleavedBuffers = json.interleavedBuffers;\n\t\t\tconst interleavedBuffer = interleavedBuffers[ uuid ];\n\n\t\t\tconst buffer = getArrayBuffer( json, interleavedBuffer.buffer );\n\n\t\t\tconst array = getTypedArray( interleavedBuffer.type, buffer );\n\t\t\tconst ib = new InterleavedBuffer( array, interleavedBuffer.stride );\n\t\t\tib.uuid = interleavedBuffer.uuid;\n\n\t\t\tinterleavedBufferMap[ uuid ] = ib;\n\n\t\t\treturn ib;\n\n\t\t}\n\n\t\tfunction getArrayBuffer( json, uuid ) {\n\n\t\t\tif ( arrayBufferMap[ uuid ] !== undefined ) return arrayBufferMap[ uuid ];\n\n\t\t\tconst arrayBuffers = json.arrayBuffers;\n\t\t\tconst arrayBuffer = arrayBuffers[ uuid ];\n\n\t\t\tconst ab = new Uint32Array( arrayBuffer ).buffer;\n\n\t\t\tarrayBufferMap[ uuid ] = ab;\n\n\t\t\treturn ab;\n\n\t\t}\n\n\t\tconst geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();\n\n\t\tconst index = json.data.index;\n\n\t\tif ( index !== undefined ) {\n\n\t\t\tconst typedArray = getTypedArray( index.type, index.array );\n\t\t\tgeometry.setIndex( new BufferAttribute( typedArray, 1 ) );\n\n\t\t}\n\n\t\tconst attributes = json.data.attributes;\n\n\t\tfor ( const key in attributes ) {\n\n\t\t\tconst attribute = attributes[ key ];\n\t\t\tlet bufferAttribute;\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\tconst interleavedBuffer = getInterleavedBuffer( json.data, attribute.data );\n\t\t\t\tbufferAttribute = new InterleavedBufferAttribute( interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized );\n\n\t\t\t} else {\n\n\t\t\t\tconst typedArray = getTypedArray( attribute.type, attribute.array );\n\t\t\t\tconst bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;\n\t\t\t\tbufferAttribute = new bufferAttributeConstr( typedArray, attribute.itemSize, attribute.normalized );\n\n\t\t\t}\n\n\t\t\tif ( attribute.name !== undefined ) bufferAttribute.name = attribute.name;\n\t\t\tif ( attribute.usage !== undefined ) bufferAttribute.setUsage( attribute.usage );\n\n\t\t\tif ( attribute.updateRange !== undefined ) {\n\n\t\t\t\tbufferAttribute.updateRange.offset = attribute.updateRange.offset;\n\t\t\t\tbufferAttribute.updateRange.count = attribute.updateRange.count;\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( key, bufferAttribute );\n\n\t\t}\n\n\t\tconst morphAttributes = json.data.morphAttributes;\n\n\t\tif ( morphAttributes ) {\n\n\t\t\tfor ( const key in morphAttributes ) {\n\n\t\t\t\tconst attributeArray = morphAttributes[ key ];\n\n\t\t\t\tconst array = [];\n\n\t\t\t\tfor ( let i = 0, il = attributeArray.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst attribute = attributeArray[ i ];\n\t\t\t\t\tlet bufferAttribute;\n\n\t\t\t\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\t\tconst interleavedBuffer = getInterleavedBuffer( json.data, attribute.data );\n\t\t\t\t\t\tbufferAttribute = new InterleavedBufferAttribute( interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst typedArray = getTypedArray( attribute.type, attribute.array );\n\t\t\t\t\t\tbufferAttribute = new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( attribute.name !== undefined ) bufferAttribute.name = attribute.name;\n\t\t\t\t\tarray.push( bufferAttribute );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.morphAttributes[ key ] = array;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst morphTargetsRelative = json.data.morphTargetsRelative;\n\n\t\tif ( morphTargetsRelative ) {\n\n\t\t\tgeometry.morphTargetsRelative = true;\n\n\t\t}\n\n\t\tconst groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n\t\tif ( groups !== undefined ) {\n\n\t\t\tfor ( let i = 0, n = groups.length; i !== n; ++ i ) {\n\n\t\t\t\tconst group = groups[ i ];\n\n\t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst boundingSphere = json.data.boundingSphere;\n\n\t\tif ( boundingSphere !== undefined ) {\n\n\t\t\tconst center = new Vector3();\n\n\t\t\tif ( boundingSphere.center !== undefined ) {\n\n\t\t\t\tcenter.fromArray( boundingSphere.center );\n\n\t\t\t}\n\n\t\t\tgeometry.boundingSphere = new Sphere( center, boundingSphere.radius );\n\n\t\t}\n\n\t\tif ( json.name ) geometry.name = json.name;\n\t\tif ( json.userData ) geometry.userData = json.userData;\n\n\t\treturn geometry;\n\n\t}\n\n}\n\nclass ObjectLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;\n\t\tthis.resourcePath = this.resourcePath || path;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tlet json = null;\n\n\t\t\ttry {\n\n\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tif ( onError !== undefined ) onError( error );\n\n\t\t\t\tconsole.error( 'THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message );\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tconst metadata = json.metadata;\n\n\t\t\tif ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {\n\n\t\t\t\tconsole.error( 'THREE.ObjectLoader: Can\\'t load ' + url );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tscope.parse( json, onLoad );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tasync loadAsync( url, onProgress ) {\n\n\t\tconst scope = this;\n\n\t\tconst path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;\n\t\tthis.resourcePath = this.resourcePath || path;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\n\t\tconst text = await loader.loadAsync( url, onProgress );\n\n\t\tconst json = JSON.parse( text );\n\n\t\tconst metadata = json.metadata;\n\n\t\tif ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {\n\n\t\t\tthrow new Error( 'THREE.ObjectLoader: Can\\'t load ' + url );\n\n\t\t}\n\n\t\treturn await scope.parseAsync( json );\n\n\t}\n\n\tparse( json, onLoad ) {\n\n\t\tconst animations = this.parseAnimations( json.animations );\n\t\tconst shapes = this.parseShapes( json.shapes );\n\t\tconst geometries = this.parseGeometries( json.geometries, shapes );\n\n\t\tconst images = this.parseImages( json.images, function () {\n\n\t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n\t\t} );\n\n\t\tconst textures = this.parseTextures( json.textures, images );\n\t\tconst materials = this.parseMaterials( json.materials, textures );\n\n\t\tconst object = this.parseObject( json.object, geometries, materials, textures, animations );\n\t\tconst skeletons = this.parseSkeletons( json.skeletons, object );\n\n\t\tthis.bindSkeletons( object, skeletons );\n\n\t\t//\n\n\t\tif ( onLoad !== undefined ) {\n\n\t\t\tlet hasImages = false;\n\n\t\t\tfor ( const uuid in images ) {\n\n\t\t\t\tif ( images[ uuid ] instanceof HTMLImageElement ) {\n\n\t\t\t\t\thasImages = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( hasImages === false ) onLoad( object );\n\n\t\t}\n\n\t\treturn object;\n\n\t}\n\n\tasync parseAsync( json ) {\n\n\t\tconst animations = this.parseAnimations( json.animations );\n\t\tconst shapes = this.parseShapes( json.shapes );\n\t\tconst geometries = this.parseGeometries( json.geometries, shapes );\n\n\t\tconst images = await this.parseImagesAsync( json.images );\n\n\t\tconst textures = this.parseTextures( json.textures, images );\n\t\tconst materials = this.parseMaterials( json.materials, textures );\n\n\t\tconst object = this.parseObject( json.object, geometries, materials, textures, animations );\n\t\tconst skeletons = this.parseSkeletons( json.skeletons, object );\n\n\t\tthis.bindSkeletons( object, skeletons );\n\n\t\treturn object;\n\n\t}\n\n\tparseShapes( json ) {\n\n\t\tconst shapes = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tconst shape = new Shape().fromJSON( json[ i ] );\n\n\t\t\t\tshapes[ shape.uuid ] = shape;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn shapes;\n\n\t}\n\n\tparseSkeletons( json, object ) {\n\n\t\tconst skeletons = {};\n\t\tconst bones = {};\n\n\t\t// generate bone lookup table\n\n\t\tobject.traverse( function ( child ) {\n\n\t\t\tif ( child.isBone ) bones[ child.uuid ] = child;\n\n\t\t} );\n\n\t\t// create skeletons\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tconst skeleton = new Skeleton().fromJSON( json[ i ], bones );\n\n\t\t\t\tskeletons[ skeleton.uuid ] = skeleton;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn skeletons;\n\n\t}\n\n\tparseGeometries( json, shapes ) {\n\n\t\tconst geometries = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tconst bufferGeometryLoader = new BufferGeometryLoader();\n\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tlet geometry;\n\t\t\t\tconst data = json[ i ];\n\n\t\t\t\tswitch ( data.type ) {\n\n\t\t\t\t\tcase 'BufferGeometry':\n\t\t\t\t\tcase 'InstancedBufferGeometry':\n\n\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Geometry':\n\n\t\t\t\t\t\tconsole.error( 'THREE.ObjectLoader: The legacy Geometry type is no longer supported.' );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tif ( data.type in Geometries ) {\n\n\t\t\t\t\t\t\tgeometry = Geometries[ data.type ].fromJSON( data, shapes );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tconsole.warn( `THREE.ObjectLoader: Unsupported geometry type \"${ data.type }\"` );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.uuid = data.uuid;\n\n\t\t\t\tif ( data.name !== undefined ) geometry.name = data.name;\n\t\t\t\tif ( geometry.isBufferGeometry === true && data.userData !== undefined ) geometry.userData = data.userData;\n\n\t\t\t\tgeometries[ data.uuid ] = geometry;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn geometries;\n\n\t}\n\n\tparseMaterials( json, textures ) {\n\n\t\tconst cache = {}; // MultiMaterial\n\t\tconst materials = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tconst loader = new MaterialLoader();\n\t\t\tloader.setTextures( textures );\n\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tconst data = json[ i ];\n\n\t\t\t\tif ( data.type === 'MultiMaterial' ) {\n\n\t\t\t\t\t// Deprecated\n\n\t\t\t\t\tconst array = [];\n\n\t\t\t\t\tfor ( let j = 0; j < data.materials.length; j ++ ) {\n\n\t\t\t\t\t\tconst material = data.materials[ j ];\n\n\t\t\t\t\t\tif ( cache[ material.uuid ] === undefined ) {\n\n\t\t\t\t\t\t\tcache[ material.uuid ] = loader.parse( material );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tarray.push( cache[ material.uuid ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmaterials[ data.uuid ] = array;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( cache[ data.uuid ] === undefined ) {\n\n\t\t\t\t\t\tcache[ data.uuid ] = loader.parse( data );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmaterials[ data.uuid ] = cache[ data.uuid ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn materials;\n\n\t}\n\n\tparseAnimations( json ) {\n\n\t\tconst animations = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( let i = 0; i < json.length; i ++ ) {\n\n\t\t\t\tconst data = json[ i ];\n\n\t\t\t\tconst clip = AnimationClip.parse( data );\n\n\t\t\t\tanimations[ clip.uuid ] = clip;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn animations;\n\n\t}\n\n\tparseImages( json, onLoad ) {\n\n\t\tconst scope = this;\n\t\tconst images = {};\n\n\t\tlet loader;\n\n\t\tfunction loadImage( url ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\treturn loader.load( url, function () {\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, undefined, function () {\n\n\t\t\t\tscope.manager.itemError( url );\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t} );\n\n\t\t}\n\n\t\tfunction deserializeImage( image ) {\n\n\t\t\tif ( typeof image === 'string' ) {\n\n\t\t\t\tconst url = image;\n\n\t\t\t\tconst path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( url ) ? url : scope.resourcePath + url;\n\n\t\t\t\treturn loadImage( path );\n\n\t\t\t} else {\n\n\t\t\t\tif ( image.data ) {\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdata: getTypedArray( image.type, image.data ),\n\t\t\t\t\t\twidth: image.width,\n\t\t\t\t\t\theight: image.height\n\t\t\t\t\t};\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( json !== undefined && json.length > 0 ) {\n\n\t\t\tconst manager = new LoadingManager( onLoad );\n\n\t\t\tloader = new ImageLoader( manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\tfor ( let i = 0, il = json.length; i < il; i ++ ) {\n\n\t\t\t\tconst image = json[ i ];\n\t\t\t\tconst url = image.url;\n\n\t\t\t\tif ( Array.isArray( url ) ) {\n\n\t\t\t\t\t// load array of images e.g CubeTexture\n\n\t\t\t\t\timages[ image.uuid ] = [];\n\n\t\t\t\t\tfor ( let j = 0, jl = url.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tconst currentUrl = url[ j ];\n\n\t\t\t\t\t\tconst deserializedImage = deserializeImage( currentUrl );\n\n\t\t\t\t\t\tif ( deserializedImage !== null ) {\n\n\t\t\t\t\t\t\tif ( deserializedImage instanceof HTMLImageElement ) {\n\n\t\t\t\t\t\t\t\timages[ image.uuid ].push( deserializedImage );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// special case: handle array of data textures for cube textures\n\n\t\t\t\t\t\t\t\timages[ image.uuid ].push( new DataTexture( deserializedImage.data, deserializedImage.width, deserializedImage.height ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// load single image\n\n\t\t\t\t\tconst deserializedImage = deserializeImage( image.url );\n\n\t\t\t\t\tif ( deserializedImage !== null ) {\n\n\t\t\t\t\t\timages[ image.uuid ] = deserializedImage;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn images;\n\n\t}\n\n\tasync parseImagesAsync( json ) {\n\n\t\tconst scope = this;\n\t\tconst images = {};\n\n\t\tlet loader;\n\n\t\tasync function deserializeImage( image ) {\n\n\t\t\tif ( typeof image === 'string' ) {\n\n\t\t\t\tconst url = image;\n\n\t\t\t\tconst path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( url ) ? url : scope.resourcePath + url;\n\n\t\t\t\treturn await loader.loadAsync( path );\n\n\t\t\t} else {\n\n\t\t\t\tif ( image.data ) {\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdata: getTypedArray( image.type, image.data ),\n\t\t\t\t\t\twidth: image.width,\n\t\t\t\t\t\theight: image.height\n\t\t\t\t\t};\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( json !== undefined && json.length > 0 ) {\n\n\t\t\tloader = new ImageLoader( this.manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\tfor ( let i = 0, il = json.length; i < il; i ++ ) {\n\n\t\t\t\tconst image = json[ i ];\n\t\t\t\tconst url = image.url;\n\n\t\t\t\tif ( Array.isArray( url ) ) {\n\n\t\t\t\t\t// load array of images e.g CubeTexture\n\n\t\t\t\t\timages[ image.uuid ] = [];\n\n\t\t\t\t\tfor ( let j = 0, jl = url.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tconst currentUrl = url[ j ];\n\n\t\t\t\t\t\tconst deserializedImage = await deserializeImage( currentUrl );\n\n\t\t\t\t\t\tif ( deserializedImage !== null ) {\n\n\t\t\t\t\t\t\tif ( deserializedImage instanceof HTMLImageElement ) {\n\n\t\t\t\t\t\t\t\timages[ image.uuid ].push( deserializedImage );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// special case: handle array of data textures for cube textures\n\n\t\t\t\t\t\t\t\timages[ image.uuid ].push( new DataTexture( deserializedImage.data, deserializedImage.width, deserializedImage.height ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// load single image\n\n\t\t\t\t\tconst deserializedImage = await deserializeImage( image.url );\n\n\t\t\t\t\tif ( deserializedImage !== null ) {\n\n\t\t\t\t\t\timages[ image.uuid ] = deserializedImage;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn images;\n\n\t}\n\n\tparseTextures( json, images ) {\n\n\t\tfunction parseConstant( value, type ) {\n\n\t\t\tif ( typeof value === 'number' ) return value;\n\n\t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\n\n\t\t\treturn type[ value ];\n\n\t\t}\n\n\t\tconst textures = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tconst data = json[ i ];\n\n\t\t\t\tif ( data.image === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\n\n\t\t\t\t}\n\n\t\t\t\tif ( images[ data.image ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\n\n\t\t\t\t}\n\n\t\t\t\tlet texture;\n\t\t\t\tconst image = images[ data.image ];\n\n\t\t\t\tif ( Array.isArray( image ) ) {\n\n\t\t\t\t\ttexture = new CubeTexture( image );\n\n\t\t\t\t\tif ( image.length === 6 ) texture.needsUpdate = true;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( image && image.data ) {\n\n\t\t\t\t\t\ttexture = new DataTexture( image.data, image.width, image.height );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttexture = new Texture( image );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( image ) texture.needsUpdate = true; // textures can have undefined image data\n\n\t\t\t\t}\n\n\t\t\t\ttexture.uuid = data.uuid;\n\n\t\t\t\tif ( data.name !== undefined ) texture.name = data.name;\n\n\t\t\t\tif ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING );\n\n\t\t\t\tif ( data.offset !== undefined ) texture.offset.fromArray( data.offset );\n\t\t\t\tif ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );\n\t\t\t\tif ( data.center !== undefined ) texture.center.fromArray( data.center );\n\t\t\t\tif ( data.rotation !== undefined ) texture.rotation = data.rotation;\n\n\t\t\t\tif ( data.wrap !== undefined ) {\n\n\t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );\n\t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.format !== undefined ) texture.format = data.format;\n\t\t\t\tif ( data.type !== undefined ) texture.type = data.type;\n\t\t\t\tif ( data.encoding !== undefined ) texture.encoding = data.encoding;\n\n\t\t\t\tif ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER );\n\t\t\t\tif ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER );\n\t\t\t\tif ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;\n\n\t\t\t\tif ( data.flipY !== undefined ) texture.flipY = data.flipY;\n\n\t\t\t\tif ( data.premultiplyAlpha !== undefined ) texture.premultiplyAlpha = data.premultiplyAlpha;\n\t\t\t\tif ( data.unpackAlignment !== undefined ) texture.unpackAlignment = data.unpackAlignment;\n\n\t\t\t\tif ( data.userData !== undefined ) texture.userData = data.userData;\n\n\t\t\t\ttextures[ data.uuid ] = texture;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn textures;\n\n\t}\n\n\tparseObject( data, geometries, materials, textures, animations ) {\n\n\t\tlet object;\n\n\t\tfunction getGeometry( name ) {\n\n\t\t\tif ( geometries[ name ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\n\n\t\t\t}\n\n\t\t\treturn geometries[ name ];\n\n\t\t}\n\n\t\tfunction getMaterial( name ) {\n\n\t\t\tif ( name === undefined ) return undefined;\n\n\t\t\tif ( Array.isArray( name ) ) {\n\n\t\t\t\tconst array = [];\n\n\t\t\t\tfor ( let i = 0, l = name.length; i < l; i ++ ) {\n\n\t\t\t\t\tconst uuid = name[ i ];\n\n\t\t\t\t\tif ( materials[ uuid ] === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', uuid );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tarray.push( materials[ uuid ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn array;\n\n\t\t\t}\n\n\t\t\tif ( materials[ name ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\n\n\t\t\t}\n\n\t\t\treturn materials[ name ];\n\n\t\t}\n\n\t\tfunction getTexture( uuid ) {\n\n\t\t\tif ( textures[ uuid ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined texture', uuid );\n\n\t\t\t}\n\n\t\t\treturn textures[ uuid ];\n\n\t\t}\n\n\t\tlet geometry, material;\n\n\t\tswitch ( data.type ) {\n\n\t\t\tcase 'Scene':\n\n\t\t\t\tobject = new Scene();\n\n\t\t\t\tif ( data.background !== undefined ) {\n\n\t\t\t\t\tif ( Number.isInteger( data.background ) ) {\n\n\t\t\t\t\t\tobject.background = new Color( data.background );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tobject.background = getTexture( data.background );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.environment !== undefined ) {\n\n\t\t\t\t\tobject.environment = getTexture( data.environment );\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.fog !== undefined ) {\n\n\t\t\t\t\tif ( data.fog.type === 'Fog' ) {\n\n\t\t\t\t\t\tobject.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );\n\n\t\t\t\t\t} else if ( data.fog.type === 'FogExp2' ) {\n\n\t\t\t\t\t\tobject.fog = new FogExp2( data.fog.color, data.fog.density );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'PerspectiveCamera':\n\n\t\t\t\tobject = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\n\n\t\t\t\tif ( data.focus !== undefined ) object.focus = data.focus;\n\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\n\t\t\t\tif ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;\n\t\t\t\tif ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;\n\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'OrthographicCamera':\n\n\t\t\t\tobject = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n\n\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\n\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'AmbientLight':\n\n\t\t\t\tobject = new AmbientLight( data.color, data.intensity );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'DirectionalLight':\n\n\t\t\t\tobject = new DirectionalLight( data.color, data.intensity );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'PointLight':\n\n\t\t\t\tobject = new PointLight( data.color, data.intensity, data.distance, data.decay );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'RectAreaLight':\n\n\t\t\t\tobject = new RectAreaLight( data.color, data.intensity, data.width, data.height );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'SpotLight':\n\n\t\t\t\tobject = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'HemisphereLight':\n\n\t\t\t\tobject = new HemisphereLight( data.color, data.groundColor, data.intensity );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'LightProbe':\n\n\t\t\t\tobject = new LightProbe().fromJSON( data );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'SkinnedMesh':\n\n\t\t\t\tgeometry = getGeometry( data.geometry );\n\t\t\t \tmaterial = getMaterial( data.material );\n\n\t\t\t\tobject = new SkinnedMesh( geometry, material );\n\n\t\t\t\tif ( data.bindMode !== undefined ) object.bindMode = data.bindMode;\n\t\t\t\tif ( data.bindMatrix !== undefined ) object.bindMatrix.fromArray( data.bindMatrix );\n\t\t\t\tif ( data.skeleton !== undefined ) object.skeleton = data.skeleton;\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Mesh':\n\n\t\t\t\tgeometry = getGeometry( data.geometry );\n\t\t\t\tmaterial = getMaterial( data.material );\n\n\t\t\t\tobject = new Mesh( geometry, material );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'InstancedMesh':\n\n\t\t\t\tgeometry = getGeometry( data.geometry );\n\t\t\t\tmaterial = getMaterial( data.material );\n\t\t\t\tconst count = data.count;\n\t\t\t\tconst instanceMatrix = data.instanceMatrix;\n\t\t\t\tconst instanceColor = data.instanceColor;\n\n\t\t\t\tobject = new InstancedMesh( geometry, material, count );\n\t\t\t\tobject.instanceMatrix = new InstancedBufferAttribute( new Float32Array( instanceMatrix.array ), 16 );\n\t\t\t\tif ( instanceColor !== undefined ) object.instanceColor = new InstancedBufferAttribute( new Float32Array( instanceColor.array ), instanceColor.itemSize );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'LOD':\n\n\t\t\t\tobject = new LOD();\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Line':\n\n\t\t\t\tobject = new Line( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'LineLoop':\n\n\t\t\t\tobject = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'LineSegments':\n\n\t\t\t\tobject = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'PointCloud':\n\t\t\tcase 'Points':\n\n\t\t\t\tobject = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Sprite':\n\n\t\t\t\tobject = new Sprite( getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Group':\n\n\t\t\t\tobject = new Group();\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Bone':\n\n\t\t\t\tobject = new Bone();\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tobject = new Object3D();\n\n\t\t}\n\n\t\tobject.uuid = data.uuid;\n\n\t\tif ( data.name !== undefined ) object.name = data.name;\n\n\t\tif ( data.matrix !== undefined ) {\n\n\t\t\tobject.matrix.fromArray( data.matrix );\n\n\t\t\tif ( data.matrixAutoUpdate !== undefined ) object.matrixAutoUpdate = data.matrixAutoUpdate;\n\t\t\tif ( object.matrixAutoUpdate ) object.matrix.decompose( object.position, object.quaternion, object.scale );\n\n\t\t} else {\n\n\t\t\tif ( data.position !== undefined ) object.position.fromArray( data.position );\n\t\t\tif ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );\n\t\t\tif ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );\n\t\t\tif ( data.scale !== undefined ) object.scale.fromArray( data.scale );\n\n\t\t}\n\n\t\tif ( data.castShadow !== undefined ) object.castShadow = data.castShadow;\n\t\tif ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;\n\n\t\tif ( data.shadow ) {\n\n\t\t\tif ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;\n\t\t\tif ( data.shadow.normalBias !== undefined ) object.shadow.normalBias = data.shadow.normalBias;\n\t\t\tif ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;\n\t\t\tif ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );\n\t\t\tif ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );\n\n\t\t}\n\n\t\tif ( data.visible !== undefined ) object.visible = data.visible;\n\t\tif ( data.frustumCulled !== undefined ) object.frustumCulled = data.frustumCulled;\n\t\tif ( data.renderOrder !== undefined ) object.renderOrder = data.renderOrder;\n\t\tif ( data.userData !== undefined ) object.userData = data.userData;\n\t\tif ( data.layers !== undefined ) object.layers.mask = data.layers;\n\n\t\tif ( data.children !== undefined ) {\n\n\t\t\tconst children = data.children;\n\n\t\t\tfor ( let i = 0; i < children.length; i ++ ) {\n\n\t\t\t\tobject.add( this.parseObject( children[ i ], geometries, materials, textures, animations ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( data.animations !== undefined ) {\n\n\t\t\tconst objectAnimations = data.animations;\n\n\t\t\tfor ( let i = 0; i < objectAnimations.length; i ++ ) {\n\n\t\t\t\tconst uuid = objectAnimations[ i ];\n\n\t\t\t\tobject.animations.push( animations[ uuid ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( data.type === 'LOD' ) {\n\n\t\t\tif ( data.autoUpdate !== undefined ) object.autoUpdate = data.autoUpdate;\n\n\t\t\tconst levels = data.levels;\n\n\t\t\tfor ( let l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\tconst level = levels[ l ];\n\t\t\t\tconst child = object.getObjectByProperty( 'uuid', level.object );\n\n\t\t\t\tif ( child !== undefined ) {\n\n\t\t\t\t\tobject.addLevel( child, level.distance );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn object;\n\n\t}\n\n\tbindSkeletons( object, skeletons ) {\n\n\t\tif ( Object.keys( skeletons ).length === 0 ) return;\n\n\t\tobject.traverse( function ( child ) {\n\n\t\t\tif ( child.isSkinnedMesh === true && child.skeleton !== undefined ) {\n\n\t\t\t\tconst skeleton = skeletons[ child.skeleton ];\n\n\t\t\t\tif ( skeleton === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No skeleton found with UUID:', child.skeleton );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tchild.bind( skeleton, child.bindMatrix );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\t/* DEPRECATED */\n\n\tsetTexturePath( value ) {\n\n\t\tconsole.warn( 'THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().' );\n\t\treturn this.setResourcePath( value );\n\n\t}\n\n}\n\nconst TEXTURE_MAPPING = {\n\tUVMapping: UVMapping,\n\tCubeReflectionMapping: CubeReflectionMapping,\n\tCubeRefractionMapping: CubeRefractionMapping,\n\tEquirectangularReflectionMapping: EquirectangularReflectionMapping,\n\tEquirectangularRefractionMapping: EquirectangularRefractionMapping,\n\tCubeUVReflectionMapping: CubeUVReflectionMapping,\n\tCubeUVRefractionMapping: CubeUVRefractionMapping\n};\n\nconst TEXTURE_WRAPPING = {\n\tRepeatWrapping: RepeatWrapping,\n\tClampToEdgeWrapping: ClampToEdgeWrapping,\n\tMirroredRepeatWrapping: MirroredRepeatWrapping\n};\n\nconst TEXTURE_FILTER = {\n\tNearestFilter: NearestFilter,\n\tNearestMipmapNearestFilter: NearestMipmapNearestFilter,\n\tNearestMipmapLinearFilter: NearestMipmapLinearFilter,\n\tLinearFilter: LinearFilter,\n\tLinearMipmapNearestFilter: LinearMipmapNearestFilter,\n\tLinearMipmapLinearFilter: LinearMipmapLinearFilter\n};\n\nclass ImageBitmapLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tif ( typeof createImageBitmap === 'undefined' ) {\n\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: createImageBitmap() not supported.' );\n\n\t\t}\n\n\t\tif ( typeof fetch === 'undefined' ) {\n\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: fetch() not supported.' );\n\n\t\t}\n\n\t\tthis.options = { premultiplyAlpha: 'none' };\n\n\t}\n\n\tsetOptions( options ) {\n\n\t\tthis.options = options;\n\n\t\treturn this;\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tif ( url === undefined ) url = '';\n\n\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\turl = this.manager.resolveURL( url );\n\n\t\tconst scope = this;\n\n\t\tconst cached = Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\tsetTimeout( function () {\n\n\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, 0 );\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\tconst fetchOptions = {};\n\t\tfetchOptions.credentials = ( this.crossOrigin === 'anonymous' ) ? 'same-origin' : 'include';\n\t\tfetchOptions.headers = this.requestHeader;\n\n\t\tfetch( url, fetchOptions ).then( function ( res ) {\n\n\t\t\treturn res.blob();\n\n\t\t} ).then( function ( blob ) {\n\n\t\t\treturn createImageBitmap( blob, Object.assign( scope.options, { colorSpaceConversion: 'none' } ) );\n\n\t\t} ).then( function ( imageBitmap ) {\n\n\t\t\tCache.add( url, imageBitmap );\n\n\t\t\tif ( onLoad ) onLoad( imageBitmap );\n\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t} ).catch( function ( e ) {\n\n\t\t\tif ( onError ) onError( e );\n\n\t\t\tscope.manager.itemError( url );\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t} );\n\n\t\tscope.manager.itemStart( url );\n\n\t}\n\n}\n\nImageBitmapLoader.prototype.isImageBitmapLoader = true;\n\nlet _context;\n\nconst AudioContext = {\n\n\tgetContext: function () {\n\n\t\tif ( _context === undefined ) {\n\n\t\t\t_context = new ( window.AudioContext || window.webkitAudioContext )();\n\n\t\t}\n\n\t\treturn _context;\n\n\t},\n\n\tsetContext: function ( value ) {\n\n\t\t_context = value;\n\n\t}\n\n};\n\nclass AudioLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\ttry {\n\n\t\t\t\t// Create a copy of the buffer. The `decodeAudioData` method\n\t\t\t\t// detaches the buffer when complete, preventing reuse.\n\t\t\t\tconst bufferCopy = buffer.slice( 0 );\n\n\t\t\t\tconst context = AudioContext.getContext();\n\t\t\t\tcontext.decodeAudioData( bufferCopy, function ( audioBuffer ) {\n\n\t\t\t\t\tonLoad( audioBuffer );\n\n\t\t\t\t} );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n}\n\nclass HemisphereLightProbe extends LightProbe {\n\n\tconstructor( skyColor, groundColor, intensity = 1 ) {\n\n\t\tsuper( undefined, intensity );\n\n\t\tconst color1 = new Color().set( skyColor );\n\t\tconst color2 = new Color().set( groundColor );\n\n\t\tconst sky = new Vector3( color1.r, color1.g, color1.b );\n\t\tconst ground = new Vector3( color2.r, color2.g, color2.b );\n\n\t\t// without extra factor of PI in the shader, should = 1 / Math.sqrt( Math.PI );\n\t\tconst c0 = Math.sqrt( Math.PI );\n\t\tconst c1 = c0 * Math.sqrt( 0.75 );\n\n\t\tthis.sh.coefficients[ 0 ].copy( sky ).add( ground ).multiplyScalar( c0 );\n\t\tthis.sh.coefficients[ 1 ].copy( sky ).sub( ground ).multiplyScalar( c1 );\n\n\t}\n\n}\n\nHemisphereLightProbe.prototype.isHemisphereLightProbe = true;\n\nclass AmbientLightProbe extends LightProbe {\n\n\tconstructor( color, intensity = 1 ) {\n\n\t\tsuper( undefined, intensity );\n\n\t\tconst color1 = new Color().set( color );\n\n\t\t// without extra factor of PI in the shader, would be 2 / Math.sqrt( Math.PI );\n\t\tthis.sh.coefficients[ 0 ].set( color1.r, color1.g, color1.b ).multiplyScalar( 2 * Math.sqrt( Math.PI ) );\n\n\t}\n\n}\n\nAmbientLightProbe.prototype.isAmbientLightProbe = true;\n\nconst _eyeRight = /*@__PURE__*/ new Matrix4();\nconst _eyeLeft = /*@__PURE__*/ new Matrix4();\nconst _projectionMatrix = /*@__PURE__*/ new Matrix4();\n\nclass StereoCamera {\n\n\tconstructor() {\n\n\t\tthis.type = 'StereoCamera';\n\n\t\tthis.aspect = 1;\n\n\t\tthis.eyeSep = 0.064;\n\n\t\tthis.cameraL = new PerspectiveCamera();\n\t\tthis.cameraL.layers.enable( 1 );\n\t\tthis.cameraL.matrixAutoUpdate = false;\n\n\t\tthis.cameraR = new PerspectiveCamera();\n\t\tthis.cameraR.layers.enable( 2 );\n\t\tthis.cameraR.matrixAutoUpdate = false;\n\n\t\tthis._cache = {\n\t\t\tfocus: null,\n\t\t\tfov: null,\n\t\t\taspect: null,\n\t\t\tnear: null,\n\t\t\tfar: null,\n\t\t\tzoom: null,\n\t\t\teyeSep: null\n\t\t};\n\n\t}\n\n\tupdate( camera ) {\n\n\t\tconst cache = this._cache;\n\n\t\tconst needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov ||\n\t\t\tcache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near ||\n\t\t\tcache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;\n\n\t\tif ( needsUpdate ) {\n\n\t\t\tcache.focus = camera.focus;\n\t\t\tcache.fov = camera.fov;\n\t\t\tcache.aspect = camera.aspect * this.aspect;\n\t\t\tcache.near = camera.near;\n\t\t\tcache.far = camera.far;\n\t\t\tcache.zoom = camera.zoom;\n\t\t\tcache.eyeSep = this.eyeSep;\n\n\t\t\t// Off-axis stereoscopic effect based on\n\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n\t\t\t_projectionMatrix.copy( camera.projectionMatrix );\n\t\t\tconst eyeSepHalf = cache.eyeSep / 2;\n\t\t\tconst eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;\n\t\t\tconst ymax = ( cache.near * Math.tan( DEG2RAD * cache.fov * 0.5 ) ) / cache.zoom;\n\t\t\tlet xmin, xmax;\n\n\t\t\t// translate xOffset\n\n\t\t\t_eyeLeft.elements[ 12 ] = - eyeSepHalf;\n\t\t\t_eyeRight.elements[ 12 ] = eyeSepHalf;\n\n\t\t\t// for left eye\n\n\t\t\txmin = - ymax * cache.aspect + eyeSepOnProjection;\n\t\t\txmax = ymax * cache.aspect + eyeSepOnProjection;\n\n\t\t\t_projectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\n\t\t\t_projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\tthis.cameraL.projectionMatrix.copy( _projectionMatrix );\n\n\t\t\t// for right eye\n\n\t\t\txmin = - ymax * cache.aspect - eyeSepOnProjection;\n\t\t\txmax = ymax * cache.aspect - eyeSepOnProjection;\n\n\t\t\t_projectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\n\t\t\t_projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\tthis.cameraR.projectionMatrix.copy( _projectionMatrix );\n\n\t\t}\n\n\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeLeft );\n\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeRight );\n\n\t}\n\n}\n\nclass Clock {\n\n\tconstructor( autoStart = true ) {\n\n\t\tthis.autoStart = autoStart;\n\n\t\tthis.startTime = 0;\n\t\tthis.oldTime = 0;\n\t\tthis.elapsedTime = 0;\n\n\t\tthis.running = false;\n\n\t}\n\n\tstart() {\n\n\t\tthis.startTime = now();\n\n\t\tthis.oldTime = this.startTime;\n\t\tthis.elapsedTime = 0;\n\t\tthis.running = true;\n\n\t}\n\n\tstop() {\n\n\t\tthis.getElapsedTime();\n\t\tthis.running = false;\n\t\tthis.autoStart = false;\n\n\t}\n\n\tgetElapsedTime() {\n\n\t\tthis.getDelta();\n\t\treturn this.elapsedTime;\n\n\t}\n\n\tgetDelta() {\n\n\t\tlet diff = 0;\n\n\t\tif ( this.autoStart && ! this.running ) {\n\n\t\t\tthis.start();\n\t\t\treturn 0;\n\n\t\t}\n\n\t\tif ( this.running ) {\n\n\t\t\tconst newTime = now();\n\n\t\t\tdiff = ( newTime - this.oldTime ) / 1000;\n\t\t\tthis.oldTime = newTime;\n\n\t\t\tthis.elapsedTime += diff;\n\n\t\t}\n\n\t\treturn diff;\n\n\t}\n\n}\n\nfunction now() {\n\n\treturn ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732\n\n}\n\nconst _position$1 = /*@__PURE__*/ new Vector3();\nconst _quaternion$1 = /*@__PURE__*/ new Quaternion();\nconst _scale$1 = /*@__PURE__*/ new Vector3();\nconst _orientation$1 = /*@__PURE__*/ new Vector3();\n\nclass AudioListener extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.type = 'AudioListener';\n\n\t\tthis.context = AudioContext.getContext();\n\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( this.context.destination );\n\n\t\tthis.filter = null;\n\n\t\tthis.timeDelta = 0;\n\n\t\t// private\n\n\t\tthis._clock = new Clock();\n\n\t}\n\n\tgetInput() {\n\n\t\treturn this.gain;\n\n\t}\n\n\tremoveFilter() {\n\n\t\tif ( this.filter !== null ) {\n\n\t\t\tthis.gain.disconnect( this.filter );\n\t\t\tthis.filter.disconnect( this.context.destination );\n\t\t\tthis.gain.connect( this.context.destination );\n\t\t\tthis.filter = null;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetFilter() {\n\n\t\treturn this.filter;\n\n\t}\n\n\tsetFilter( value ) {\n\n\t\tif ( this.filter !== null ) {\n\n\t\t\tthis.gain.disconnect( this.filter );\n\t\t\tthis.filter.disconnect( this.context.destination );\n\n\t\t} else {\n\n\t\t\tthis.gain.disconnect( this.context.destination );\n\n\t\t}\n\n\t\tthis.filter = value;\n\t\tthis.gain.connect( this.filter );\n\t\tthis.filter.connect( this.context.destination );\n\n\t\treturn this;\n\n\t}\n\n\tgetMasterVolume() {\n\n\t\treturn this.gain.gain.value;\n\n\t}\n\n\tsetMasterVolume( value ) {\n\n\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n\n\t\treturn this;\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tconst listener = this.context.listener;\n\t\tconst up = this.up;\n\n\t\tthis.timeDelta = this._clock.getDelta();\n\n\t\tthis.matrixWorld.decompose( _position$1, _quaternion$1, _scale$1 );\n\n\t\t_orientation$1.set( 0, 0, - 1 ).applyQuaternion( _quaternion$1 );\n\n\t\tif ( listener.positionX ) {\n\n\t\t\t// code path for Chrome (see #14393)\n\n\t\t\tconst endTime = this.context.currentTime + this.timeDelta;\n\n\t\t\tlistener.positionX.linearRampToValueAtTime( _position$1.x, endTime );\n\t\t\tlistener.positionY.linearRampToValueAtTime( _position$1.y, endTime );\n\t\t\tlistener.positionZ.linearRampToValueAtTime( _position$1.z, endTime );\n\t\t\tlistener.forwardX.linearRampToValueAtTime( _orientation$1.x, endTime );\n\t\t\tlistener.forwardY.linearRampToValueAtTime( _orientation$1.y, endTime );\n\t\t\tlistener.forwardZ.linearRampToValueAtTime( _orientation$1.z, endTime );\n\t\t\tlistener.upX.linearRampToValueAtTime( up.x, endTime );\n\t\t\tlistener.upY.linearRampToValueAtTime( up.y, endTime );\n\t\t\tlistener.upZ.linearRampToValueAtTime( up.z, endTime );\n\n\t\t} else {\n\n\t\t\tlistener.setPosition( _position$1.x, _position$1.y, _position$1.z );\n\t\t\tlistener.setOrientation( _orientation$1.x, _orientation$1.y, _orientation$1.z, up.x, up.y, up.z );\n\n\t\t}\n\n\t}\n\n}\n\nclass Audio extends Object3D {\n\n\tconstructor( listener ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'Audio';\n\n\t\tthis.listener = listener;\n\t\tthis.context = listener.context;\n\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( listener.getInput() );\n\n\t\tthis.autoplay = false;\n\n\t\tthis.buffer = null;\n\t\tthis.detune = 0;\n\t\tthis.loop = false;\n\t\tthis.loopStart = 0;\n\t\tthis.loopEnd = 0;\n\t\tthis.offset = 0;\n\t\tthis.duration = undefined;\n\t\tthis.playbackRate = 1;\n\t\tthis.isPlaying = false;\n\t\tthis.hasPlaybackControl = true;\n\t\tthis.source = null;\n\t\tthis.sourceType = 'empty';\n\n\t\tthis._startedAt = 0;\n\t\tthis._progress = 0;\n\t\tthis._connected = false;\n\n\t\tthis.filters = [];\n\n\t}\n\n\tgetOutput() {\n\n\t\treturn this.gain;\n\n\t}\n\n\tsetNodeSource( audioNode ) {\n\n\t\tthis.hasPlaybackControl = false;\n\t\tthis.sourceType = 'audioNode';\n\t\tthis.source = audioNode;\n\t\tthis.connect();\n\n\t\treturn this;\n\n\t}\n\n\tsetMediaElementSource( mediaElement ) {\n\n\t\tthis.hasPlaybackControl = false;\n\t\tthis.sourceType = 'mediaNode';\n\t\tthis.source = this.context.createMediaElementSource( mediaElement );\n\t\tthis.connect();\n\n\t\treturn this;\n\n\t}\n\n\tsetMediaStreamSource( mediaStream ) {\n\n\t\tthis.hasPlaybackControl = false;\n\t\tthis.sourceType = 'mediaStreamNode';\n\t\tthis.source = this.context.createMediaStreamSource( mediaStream );\n\t\tthis.connect();\n\n\t\treturn this;\n\n\t}\n\n\tsetBuffer( audioBuffer ) {\n\n\t\tthis.buffer = audioBuffer;\n\t\tthis.sourceType = 'buffer';\n\n\t\tif ( this.autoplay ) this.play();\n\n\t\treturn this;\n\n\t}\n\n\tplay( delay = 0 ) {\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis._startedAt = this.context.currentTime + delay;\n\n\t\tconst source = this.context.createBufferSource();\n\t\tsource.buffer = this.buffer;\n\t\tsource.loop = this.loop;\n\t\tsource.loopStart = this.loopStart;\n\t\tsource.loopEnd = this.loopEnd;\n\t\tsource.onended = this.onEnded.bind( this );\n\t\tsource.start( this._startedAt, this._progress + this.offset, this.duration );\n\n\t\tthis.isPlaying = true;\n\n\t\tthis.source = source;\n\n\t\tthis.setDetune( this.detune );\n\t\tthis.setPlaybackRate( this.playbackRate );\n\n\t\treturn this.connect();\n\n\t}\n\n\tpause() {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\t// update current progress\n\n\t\t\tthis._progress += Math.max( this.context.currentTime - this._startedAt, 0 ) * this.playbackRate;\n\n\t\t\tif ( this.loop === true ) {\n\n\t\t\t\t// ensure _progress does not exceed duration with looped audios\n\n\t\t\t\tthis._progress = this._progress % ( this.duration || this.buffer.duration );\n\n\t\t\t}\n\n\t\t\tthis.source.stop();\n\t\t\tthis.source.onended = null;\n\n\t\t\tthis.isPlaying = false;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tstop() {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis._progress = 0;\n\n\t\tthis.source.stop();\n\t\tthis.source.onended = null;\n\t\tthis.isPlaying = false;\n\n\t\treturn this;\n\n\t}\n\n\tconnect() {\n\n\t\tif ( this.filters.length > 0 ) {\n\n\t\t\tthis.source.connect( this.filters[ 0 ] );\n\n\t\t\tfor ( let i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\n\n\t\t\t}\n\n\t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\n\n\t\t} else {\n\n\t\t\tthis.source.connect( this.getOutput() );\n\n\t\t}\n\n\t\tthis._connected = true;\n\n\t\treturn this;\n\n\t}\n\n\tdisconnect() {\n\n\t\tif ( this.filters.length > 0 ) {\n\n\t\t\tthis.source.disconnect( this.filters[ 0 ] );\n\n\t\t\tfor ( let i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\n\n\t\t\t}\n\n\t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\n\n\t\t} else {\n\n\t\t\tthis.source.disconnect( this.getOutput() );\n\n\t\t}\n\n\t\tthis._connected = false;\n\n\t\treturn this;\n\n\t}\n\n\tgetFilters() {\n\n\t\treturn this.filters;\n\n\t}\n\n\tsetFilters( value ) {\n\n\t\tif ( ! value ) value = [];\n\n\t\tif ( this._connected === true ) {\n\n\t\t\tthis.disconnect();\n\t\t\tthis.filters = value.slice();\n\t\t\tthis.connect();\n\n\t\t} else {\n\n\t\t\tthis.filters = value.slice();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetDetune( value ) {\n\n\t\tthis.detune = value;\n\n\t\tif ( this.source.detune === undefined ) return; // only set detune when available\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.source.detune.setTargetAtTime( this.detune, this.context.currentTime, 0.01 );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetDetune() {\n\n\t\treturn this.detune;\n\n\t}\n\n\tgetFilter() {\n\n\t\treturn this.getFilters()[ 0 ];\n\n\t}\n\n\tsetFilter( filter ) {\n\n\t\treturn this.setFilters( filter ? [ filter ] : [] );\n\n\t}\n\n\tsetPlaybackRate( value ) {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.playbackRate = value;\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.source.playbackRate.setTargetAtTime( this.playbackRate, this.context.currentTime, 0.01 );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetPlaybackRate() {\n\n\t\treturn this.playbackRate;\n\n\t}\n\n\tonEnded() {\n\n\t\tthis.isPlaying = false;\n\n\t}\n\n\tgetLoop() {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn this.loop;\n\n\t}\n\n\tsetLoop( value ) {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.loop = value;\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.source.loop = this.loop;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetLoopStart( value ) {\n\n\t\tthis.loopStart = value;\n\n\t\treturn this;\n\n\t}\n\n\tsetLoopEnd( value ) {\n\n\t\tthis.loopEnd = value;\n\n\t\treturn this;\n\n\t}\n\n\tgetVolume() {\n\n\t\treturn this.gain.gain.value;\n\n\t}\n\n\tsetVolume( value ) {\n\n\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst _position = /*@__PURE__*/ new Vector3();\nconst _quaternion = /*@__PURE__*/ new Quaternion();\nconst _scale = /*@__PURE__*/ new Vector3();\nconst _orientation = /*@__PURE__*/ new Vector3();\n\nclass PositionalAudio extends Audio {\n\n\tconstructor( listener ) {\n\n\t\tsuper( listener );\n\n\t\tthis.panner = this.context.createPanner();\n\t\tthis.panner.panningModel = 'HRTF';\n\t\tthis.panner.connect( this.gain );\n\n\t}\n\n\tgetOutput() {\n\n\t\treturn this.panner;\n\n\t}\n\n\tgetRefDistance() {\n\n\t\treturn this.panner.refDistance;\n\n\t}\n\n\tsetRefDistance( value ) {\n\n\t\tthis.panner.refDistance = value;\n\n\t\treturn this;\n\n\t}\n\n\tgetRolloffFactor() {\n\n\t\treturn this.panner.rolloffFactor;\n\n\t}\n\n\tsetRolloffFactor( value ) {\n\n\t\tthis.panner.rolloffFactor = value;\n\n\t\treturn this;\n\n\t}\n\n\tgetDistanceModel() {\n\n\t\treturn this.panner.distanceModel;\n\n\t}\n\n\tsetDistanceModel( value ) {\n\n\t\tthis.panner.distanceModel = value;\n\n\t\treturn this;\n\n\t}\n\n\tgetMaxDistance() {\n\n\t\treturn this.panner.maxDistance;\n\n\t}\n\n\tsetMaxDistance( value ) {\n\n\t\tthis.panner.maxDistance = value;\n\n\t\treturn this;\n\n\t}\n\n\tsetDirectionalCone( coneInnerAngle, coneOuterAngle, coneOuterGain ) {\n\n\t\tthis.panner.coneInnerAngle = coneInnerAngle;\n\t\tthis.panner.coneOuterAngle = coneOuterAngle;\n\t\tthis.panner.coneOuterGain = coneOuterGain;\n\n\t\treturn this;\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tif ( this.hasPlaybackControl === true && this.isPlaying === false ) return;\n\n\t\tthis.matrixWorld.decompose( _position, _quaternion, _scale );\n\n\t\t_orientation.set( 0, 0, 1 ).applyQuaternion( _quaternion );\n\n\t\tconst panner = this.panner;\n\n\t\tif ( panner.positionX ) {\n\n\t\t\t// code path for Chrome and Firefox (see #14393)\n\n\t\t\tconst endTime = this.context.currentTime + this.listener.timeDelta;\n\n\t\t\tpanner.positionX.linearRampToValueAtTime( _position.x, endTime );\n\t\t\tpanner.positionY.linearRampToValueAtTime( _position.y, endTime );\n\t\t\tpanner.positionZ.linearRampToValueAtTime( _position.z, endTime );\n\t\t\tpanner.orientationX.linearRampToValueAtTime( _orientation.x, endTime );\n\t\t\tpanner.orientationY.linearRampToValueAtTime( _orientation.y, endTime );\n\t\t\tpanner.orientationZ.linearRampToValueAtTime( _orientation.z, endTime );\n\n\t\t} else {\n\n\t\t\tpanner.setPosition( _position.x, _position.y, _position.z );\n\t\t\tpanner.setOrientation( _orientation.x, _orientation.y, _orientation.z );\n\n\t\t}\n\n\t}\n\n}\n\nclass AudioAnalyser {\n\n\tconstructor( audio, fftSize = 2048 ) {\n\n\t\tthis.analyser = audio.context.createAnalyser();\n\t\tthis.analyser.fftSize = fftSize;\n\n\t\tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\n\n\t\taudio.getOutput().connect( this.analyser );\n\n\t}\n\n\n\tgetFrequencyData() {\n\n\t\tthis.analyser.getByteFrequencyData( this.data );\n\n\t\treturn this.data;\n\n\t}\n\n\tgetAverageFrequency() {\n\n\t\tlet value = 0;\n\t\tconst data = this.getFrequencyData();\n\n\t\tfor ( let i = 0; i < data.length; i ++ ) {\n\n\t\t\tvalue += data[ i ];\n\n\t\t}\n\n\t\treturn value / data.length;\n\n\t}\n\n}\n\nclass PropertyMixer {\n\n\tconstructor( binding, typeName, valueSize ) {\n\n\t\tthis.binding = binding;\n\t\tthis.valueSize = valueSize;\n\n\t\tlet mixFunction,\n\t\t\tmixFunctionAdditive,\n\t\t\tsetIdentity;\n\n\t\t// buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]\n\t\t//\n\t\t// interpolators can use .buffer as their .result\n\t\t// the data then goes to 'incoming'\n\t\t//\n\t\t// 'accu0' and 'accu1' are used frame-interleaved for\n\t\t// the cumulative result and are compared to detect\n\t\t// changes\n\t\t//\n\t\t// 'orig' stores the original state of the property\n\t\t//\n\t\t// 'add' is used for additive cumulative results\n\t\t//\n\t\t// 'work' is optional and is only present for quaternion types. It is used\n\t\t// to store intermediate quaternion multiplication results\n\n\t\tswitch ( typeName ) {\n\n\t\t\tcase 'quaternion':\n\t\t\t\tmixFunction = this._slerp;\n\t\t\t\tmixFunctionAdditive = this._slerpAdditive;\n\t\t\t\tsetIdentity = this._setAdditiveIdentityQuaternion;\n\n\t\t\t\tthis.buffer = new Float64Array( valueSize * 6 );\n\t\t\t\tthis._workIndex = 5;\n\t\t\t\tbreak;\n\n\t\t\tcase 'string':\n\t\t\tcase 'bool':\n\t\t\t\tmixFunction = this._select;\n\n\t\t\t\t// Use the regular mix function and for additive on these types,\n\t\t\t\t// additive is not relevant for non-numeric types\n\t\t\t\tmixFunctionAdditive = this._select;\n\n\t\t\t\tsetIdentity = this._setAdditiveIdentityOther;\n\n\t\t\t\tthis.buffer = new Array( valueSize * 5 );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tmixFunction = this._lerp;\n\t\t\t\tmixFunctionAdditive = this._lerpAdditive;\n\t\t\t\tsetIdentity = this._setAdditiveIdentityNumeric;\n\n\t\t\t\tthis.buffer = new Float64Array( valueSize * 5 );\n\n\t\t}\n\n\t\tthis._mixBufferRegion = mixFunction;\n\t\tthis._mixBufferRegionAdditive = mixFunctionAdditive;\n\t\tthis._setIdentity = setIdentity;\n\t\tthis._origIndex = 3;\n\t\tthis._addIndex = 4;\n\n\t\tthis.cumulativeWeight = 0;\n\t\tthis.cumulativeWeightAdditive = 0;\n\n\t\tthis.useCount = 0;\n\t\tthis.referenceCount = 0;\n\n\t}\n\n\t// accumulate data in the 'incoming' region into 'accu<i>'\n\taccumulate( accuIndex, weight ) {\n\n\t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t\t// the weight and shouldn't have made the call in the first place\n\n\t\tconst buffer = this.buffer,\n\t\t\tstride = this.valueSize,\n\t\t\toffset = accuIndex * stride + stride;\n\n\t\tlet currentWeight = this.cumulativeWeight;\n\n\t\tif ( currentWeight === 0 ) {\n\n\t\t\t// accuN := incoming * weight\n\n\t\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tbuffer[ offset + i ] = buffer[ i ];\n\n\t\t\t}\n\n\t\t\tcurrentWeight = weight;\n\n\t\t} else {\n\n\t\t\t// accuN := accuN + incoming * weight\n\n\t\t\tcurrentWeight += weight;\n\t\t\tconst mix = weight / currentWeight;\n\t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\n\n\t\t}\n\n\t\tthis.cumulativeWeight = currentWeight;\n\n\t}\n\n\t// accumulate data in the 'incoming' region into 'add'\n\taccumulateAdditive( weight ) {\n\n\t\tconst buffer = this.buffer,\n\t\t\tstride = this.valueSize,\n\t\t\toffset = stride * this._addIndex;\n\n\t\tif ( this.cumulativeWeightAdditive === 0 ) {\n\n\t\t\t// add = identity\n\n\t\t\tthis._setIdentity();\n\n\t\t}\n\n\t\t// add := add + incoming * weight\n\n\t\tthis._mixBufferRegionAdditive( buffer, offset, 0, weight, stride );\n\t\tthis.cumulativeWeightAdditive += weight;\n\n\t}\n\n\t// apply the state of 'accu<i>' to the binding when accus differ\n\tapply( accuIndex ) {\n\n\t\tconst stride = this.valueSize,\n\t\t\tbuffer = this.buffer,\n\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\tweight = this.cumulativeWeight,\n\t\t\tweightAdditive = this.cumulativeWeightAdditive,\n\n\t\t\tbinding = this.binding;\n\n\t\tthis.cumulativeWeight = 0;\n\t\tthis.cumulativeWeightAdditive = 0;\n\n\t\tif ( weight < 1 ) {\n\n\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\n\t\t\tconst originalValueOffset = stride * this._origIndex;\n\n\t\t\tthis._mixBufferRegion(\n\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\n\n\t\t}\n\n\t\tif ( weightAdditive > 0 ) {\n\n\t\t\t// accuN := accuN + additive accuN\n\n\t\t\tthis._mixBufferRegionAdditive( buffer, offset, this._addIndex * stride, 1, stride );\n\n\t\t}\n\n\t\tfor ( let i = stride, e = stride + stride; i !== e; ++ i ) {\n\n\t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\n\n\t\t\t\t// value has changed -> update scene graph\n\n\t\t\t\tbinding.setValue( buffer, offset );\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// remember the state of the bound property and copy it to both accus\n\tsaveOriginalState() {\n\n\t\tconst binding = this.binding;\n\n\t\tconst buffer = this.buffer,\n\t\t\tstride = this.valueSize,\n\n\t\t\toriginalValueOffset = stride * this._origIndex;\n\n\t\tbinding.getValue( buffer, originalValueOffset );\n\n\t\t// accu[0..1] := orig -- initially detect changes against the original\n\t\tfor ( let i = stride, e = originalValueOffset; i !== e; ++ i ) {\n\n\t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\n\n\t\t}\n\n\t\t// Add to identity for additive\n\t\tthis._setIdentity();\n\n\t\tthis.cumulativeWeight = 0;\n\t\tthis.cumulativeWeightAdditive = 0;\n\n\t}\n\n\t// apply the state previously taken via 'saveOriginalState' to the binding\n\trestoreOriginalState() {\n\n\t\tconst originalValueOffset = this.valueSize * 3;\n\t\tthis.binding.setValue( this.buffer, originalValueOffset );\n\n\t}\n\n\t_setAdditiveIdentityNumeric() {\n\n\t\tconst startIndex = this._addIndex * this.valueSize;\n\t\tconst endIndex = startIndex + this.valueSize;\n\n\t\tfor ( let i = startIndex; i < endIndex; i ++ ) {\n\n\t\t\tthis.buffer[ i ] = 0;\n\n\t\t}\n\n\t}\n\n\t_setAdditiveIdentityQuaternion() {\n\n\t\tthis._setAdditiveIdentityNumeric();\n\t\tthis.buffer[ this._addIndex * this.valueSize + 3 ] = 1;\n\n\t}\n\n\t_setAdditiveIdentityOther() {\n\n\t\tconst startIndex = this._origIndex * this.valueSize;\n\t\tconst targetIndex = this._addIndex * this.valueSize;\n\n\t\tfor ( let i = 0; i < this.valueSize; i ++ ) {\n\n\t\t\tthis.buffer[ targetIndex + i ] = this.buffer[ startIndex + i ];\n\n\t\t}\n\n\t}\n\n\n\t// mix functions\n\n\t_select( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tif ( t >= 0.5 ) {\n\n\t\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_slerp( buffer, dstOffset, srcOffset, t ) {\n\n\t\tQuaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );\n\n\t}\n\n\t_slerpAdditive( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tconst workOffset = this._workIndex * stride;\n\n\t\t// Store result in intermediate buffer offset\n\t\tQuaternion.multiplyQuaternionsFlat( buffer, workOffset, buffer, dstOffset, buffer, srcOffset );\n\n\t\t// Slerp to the intermediate result\n\t\tQuaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t );\n\n\t}\n\n\t_lerp( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tconst s = 1 - t;\n\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\tconst j = dstOffset + i;\n\n\t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\n\n\t\t}\n\n\t}\n\n\t_lerpAdditive( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\tconst j = dstOffset + i;\n\n\t\t\tbuffer[ j ] = buffer[ j ] + buffer[ srcOffset + i ] * t;\n\n\t\t}\n\n\t}\n\n}\n\n// Characters [].:/ are reserved for track binding syntax.\nconst _RESERVED_CHARS_RE = '\\\\[\\\\]\\\\.:\\\\/';\nconst _reservedRe = new RegExp( '[' + _RESERVED_CHARS_RE + ']', 'g' );\n\n// Attempts to allow node names from any language. ES5's `\\w` regexp matches\n// only latin characters, and the unicode \\p{L} is not yet supported. So\n// instead, we exclude reserved characters and match everything else.\nconst _wordChar = '[^' + _RESERVED_CHARS_RE + ']';\nconst _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace( '\\\\.', '' ) + ']';\n\n// Parent directories, delimited by '/' or ':'. Currently unused, but must\n// be matched to parse the rest of the track name.\nconst _directoryRe = /((?:WC+[\\/:])*)/.source.replace( 'WC', _wordChar );\n\n// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\nconst _nodeRe = /(WCOD+)?/.source.replace( 'WCOD', _wordCharOrDot );\n\n// Object on target node, and accessor. May not contain reserved\n// characters. Accessor may contain any character except closing bracket.\nconst _objectRe = /(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace( 'WC', _wordChar );\n\n// Property and accessor. May not contain reserved characters. Accessor may\n// contain any non-bracket characters.\nconst _propertyRe = /\\.(WC+)(?:\\[(.+)\\])?/.source.replace( 'WC', _wordChar );\n\nconst _trackRe = new RegExp( ''\n\t+ '^'\n\t+ _directoryRe\n\t+ _nodeRe\n\t+ _objectRe\n\t+ _propertyRe\n\t+ '$'\n);\n\nconst _supportedObjectNames = [ 'material', 'materials', 'bones' ];\n\nclass Composite {\n\n\tconstructor( targetGroup, path, optionalParsedPath ) {\n\n\t\tconst parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );\n\n\t\tthis._targetGroup = targetGroup;\n\t\tthis._bindings = targetGroup.subscribe_( path, parsedPath );\n\n\t}\n\n\tgetValue( array, offset ) {\n\n\t\tthis.bind(); // bind all binding\n\n\t\tconst firstValidIndex = this._targetGroup.nCachedObjects_,\n\t\t\tbinding = this._bindings[ firstValidIndex ];\n\n\t\t// and only call .getValue on the first\n\t\tif ( binding !== undefined ) binding.getValue( array, offset );\n\n\t}\n\n\tsetValue( array, offset ) {\n\n\t\tconst bindings = this._bindings;\n\n\t\tfor ( let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].setValue( array, offset );\n\n\t\t}\n\n\t}\n\n\tbind() {\n\n\t\tconst bindings = this._bindings;\n\n\t\tfor ( let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].bind();\n\n\t\t}\n\n\t}\n\n\tunbind() {\n\n\t\tconst bindings = this._bindings;\n\n\t\tfor ( let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].unbind();\n\n\t\t}\n\n\t}\n\n}\n\n// Note: This class uses a State pattern on a per-method basis:\n// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n// prototype version of these methods with one that represents\n// the bound state. When the property is not found, the methods\n// become no-ops.\nclass PropertyBinding {\n\n\tconstructor( rootNode, path, parsedPath ) {\n\n\t\tthis.path = path;\n\t\tthis.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );\n\n\t\tthis.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName ) || rootNode;\n\n\t\tthis.rootNode = rootNode;\n\n\t\t// initial state of these methods that calls 'bind'\n\t\tthis.getValue = this._getValue_unbound;\n\t\tthis.setValue = this._setValue_unbound;\n\n\t}\n\n\n\tstatic create( root, path, parsedPath ) {\n\n\t\tif ( ! ( root && root.isAnimationObjectGroup ) ) {\n\n\t\t\treturn new PropertyBinding( root, path, parsedPath );\n\n\t\t} else {\n\n\t\t\treturn new PropertyBinding.Composite( root, path, parsedPath );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Replaces spaces with underscores and removes unsupported characters from\n\t * node names, to ensure compatibility with parseTrackName().\n\t *\n\t * @param {string} name Node name to be sanitized.\n\t * @return {string}\n\t */\n\tstatic sanitizeNodeName( name ) {\n\n\t\treturn name.replace( /\\s/g, '_' ).replace( _reservedRe, '' );\n\n\t}\n\n\tstatic parseTrackName( trackName ) {\n\n\t\tconst matches = _trackRe.exec( trackName );\n\n\t\tif ( ! matches ) {\n\n\t\t\tthrow new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );\n\n\t\t}\n\n\t\tconst results = {\n\t\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t\t\tnodeName: matches[ 2 ],\n\t\t\tobjectName: matches[ 3 ],\n\t\t\tobjectIndex: matches[ 4 ],\n\t\t\tpropertyName: matches[ 5 ], // required\n\t\t\tpropertyIndex: matches[ 6 ]\n\t\t};\n\n\t\tconst lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );\n\n\t\tif ( lastDot !== undefined && lastDot !== - 1 ) {\n\n\t\t\tconst objectName = results.nodeName.substring( lastDot + 1 );\n\n\t\t\t// Object names must be checked against an allowlist. Otherwise, there\n\t\t\t// is no way to parse 'foo.bar.baz': 'baz' must be a property, but\n\t\t\t// 'bar' could be the objectName, or part of a nodeName (which can\n\t\t\t// include '.' characters).\n\t\t\tif ( _supportedObjectNames.indexOf( objectName ) !== - 1 ) {\n\n\t\t\t\tresults.nodeName = results.nodeName.substring( 0, lastDot );\n\t\t\t\tresults.objectName = objectName;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( results.propertyName === null || results.propertyName.length === 0 ) {\n\n\t\t\tthrow new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );\n\n\t\t}\n\n\t\treturn results;\n\n\t}\n\n\tstatic findNode( root, nodeName ) {\n\n\t\tif ( ! nodeName || nodeName === '' || nodeName === '.' || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {\n\n\t\t\treturn root;\n\n\t\t}\n\n\t\t// search into skeleton bones.\n\t\tif ( root.skeleton ) {\n\n\t\t\tconst bone = root.skeleton.getBoneByName( nodeName );\n\n\t\t\tif ( bone !== undefined ) {\n\n\t\t\t\treturn bone;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// search into node subtree.\n\t\tif ( root.children ) {\n\n\t\t\tconst searchNodeSubtree = function ( children ) {\n\n\t\t\t\tfor ( let i = 0; i < children.length; i ++ ) {\n\n\t\t\t\t\tconst childNode = children[ i ];\n\n\t\t\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\n\n\t\t\t\t\t\treturn childNode;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst result = searchNodeSubtree( childNode.children );\n\n\t\t\t\t\tif ( result ) return result;\n\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\n\t\t\t};\n\n\t\t\tconst subTreeNode = searchNodeSubtree( root.children );\n\n\t\t\tif ( subTreeNode ) {\n\n\t\t\t\treturn subTreeNode;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\t// these are used to \"bind\" a nonexistent property\n\t_getValue_unavailable() {}\n\t_setValue_unavailable() {}\n\n\t// Getters\n\n\t_getValue_direct( buffer, offset ) {\n\n\t\tbuffer[ offset ] = this.targetObject[ this.propertyName ];\n\n\t}\n\n\t_getValue_array( buffer, offset ) {\n\n\t\tconst source = this.resolvedProperty;\n\n\t\tfor ( let i = 0, n = source.length; i !== n; ++ i ) {\n\n\t\t\tbuffer[ offset ++ ] = source[ i ];\n\n\t\t}\n\n\t}\n\n\t_getValue_arrayElement( buffer, offset ) {\n\n\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\n\n\t}\n\n\t_getValue_toArray( buffer, offset ) {\n\n\t\tthis.resolvedProperty.toArray( buffer, offset );\n\n\t}\n\n\t// Direct\n\n\t_setValue_direct( buffer, offset ) {\n\n\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\n\t}\n\n\t_setValue_direct_setNeedsUpdate( buffer, offset ) {\n\n\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\tthis.targetObject.needsUpdate = true;\n\n\t}\n\n\t_setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\t// EntireArray\n\n\t_setValue_array( buffer, offset ) {\n\n\t\tconst dest = this.resolvedProperty;\n\n\t\tfor ( let i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t}\n\n\t}\n\n\t_setValue_array_setNeedsUpdate( buffer, offset ) {\n\n\t\tconst dest = this.resolvedProperty;\n\n\t\tfor ( let i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t}\n\n\t\tthis.targetObject.needsUpdate = true;\n\n\t}\n\n\t_setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\tconst dest = this.resolvedProperty;\n\n\t\tfor ( let i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t}\n\n\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\t// ArrayElement\n\n\t_setValue_arrayElement( buffer, offset ) {\n\n\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\n\t}\n\n\t_setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\n\n\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\tthis.targetObject.needsUpdate = true;\n\n\t}\n\n\t_setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\t// HasToFromArray\n\n\t_setValue_fromArray( buffer, offset ) {\n\n\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\n\t}\n\n\t_setValue_fromArray_setNeedsUpdate( buffer, offset ) {\n\n\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\tthis.targetObject.needsUpdate = true;\n\n\t}\n\n\t_setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\t_getValue_unbound( targetArray, offset ) {\n\n\t\tthis.bind();\n\t\tthis.getValue( targetArray, offset );\n\n\t}\n\n\t_setValue_unbound( sourceArray, offset ) {\n\n\t\tthis.bind();\n\t\tthis.setValue( sourceArray, offset );\n\n\t}\n\n\t// create getter / setter pair for a property in the scene graph\n\tbind() {\n\n\t\tlet targetObject = this.node;\n\t\tconst parsedPath = this.parsedPath;\n\n\t\tconst objectName = parsedPath.objectName;\n\t\tconst propertyName = parsedPath.propertyName;\n\t\tlet propertyIndex = parsedPath.propertyIndex;\n\n\t\tif ( ! targetObject ) {\n\n\t\t\ttargetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName ) || this.rootNode;\n\n\t\t\tthis.node = targetObject;\n\n\t\t}\n\n\t\t// set fail state so we can just 'return' on error\n\t\tthis.getValue = this._getValue_unavailable;\n\t\tthis.setValue = this._setValue_unavailable;\n\n\t\t// ensure there is a value node\n\t\tif ( ! targetObject ) {\n\n\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update node for track: ' + this.path + ' but it wasn\\'t found.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( objectName ) {\n\n\t\t\tlet objectIndex = parsedPath.objectIndex;\n\n\t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\n\t\t\tswitch ( objectName ) {\n\n\t\t\t\tcase 'materials':\n\n\t\t\t\t\tif ( ! targetObject.material ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! targetObject.material.materials ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject.material.materials;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'bones':\n\n\t\t\t\t\tif ( ! targetObject.skeleton ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\n\t\t\t\t\t// and convert the integer string to a true integer.\n\n\t\t\t\t\ttargetObject = targetObject.skeleton.bones;\n\n\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\tfor ( let i = 0; i < targetObject.length; i ++ ) {\n\n\t\t\t\t\t\tif ( targetObject[ i ].name === objectIndex ) {\n\n\t\t\t\t\t\t\tobjectIndex = i;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject[ objectName ];\n\n\t\t\t}\n\n\n\t\t\tif ( objectIndex !== undefined ) {\n\n\t\t\t\tif ( targetObject[ objectIndex ] === undefined ) {\n\n\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\ttargetObject = targetObject[ objectIndex ];\n\n\t\t\t}\n\n\t\t}\n\n\t\t// resolve property\n\t\tconst nodeProperty = targetObject[ propertyName ];\n\n\t\tif ( nodeProperty === undefined ) {\n\n\t\t\tconst nodeName = parsedPath.nodeName;\n\n\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +\n\t\t\t\t'.' + propertyName + ' but it wasn\\'t found.', targetObject );\n\t\t\treturn;\n\n\t\t}\n\n\t\t// determine versioning scheme\n\t\tlet versioning = this.Versioning.None;\n\n\t\tthis.targetObject = targetObject;\n\n\t\tif ( targetObject.needsUpdate !== undefined ) { // material\n\n\t\t\tversioning = this.Versioning.NeedsUpdate;\n\n\t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\n\n\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\n\t\t}\n\n\t\t// determine how the property gets bound\n\t\tlet bindingType = this.BindingType.Direct;\n\n\t\tif ( propertyIndex !== undefined ) {\n\n\t\t\t// access a sub element of the property array (only primitives are supported right now)\n\n\t\t\tif ( propertyName === 'morphTargetInfluences' ) {\n\n\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\n\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\tif ( ! targetObject.geometry ) {\n\n\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( targetObject.geometry.isBufferGeometry ) {\n\n\t\t\t\t\tif ( ! targetObject.geometry.morphAttributes ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( targetObject.morphTargetDictionary[ propertyIndex ] !== undefined ) {\n\n\t\t\t\t\t\tpropertyIndex = targetObject.morphTargetDictionary[ propertyIndex ];\n\n\t\t\t\t\t}\n\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.', this );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tbindingType = this.BindingType.ArrayElement;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\tthis.propertyIndex = propertyIndex;\n\n\t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\n\n\t\t\t// must use copy for Object3D.Euler/Quaternion\n\n\t\t\tbindingType = this.BindingType.HasFromToArray;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t} else if ( Array.isArray( nodeProperty ) ) {\n\n\t\t\tbindingType = this.BindingType.EntireArray;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t} else {\n\n\t\t\tthis.propertyName = propertyName;\n\n\t\t}\n\n\t\t// select getter / setter\n\t\tthis.getValue = this.GetterByBindingType[ bindingType ];\n\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\n\n\t}\n\n\tunbind() {\n\n\t\tthis.node = null;\n\n\t\t// back to the prototype version of getValue / setValue\n\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\t\tthis.getValue = this._getValue_unbound;\n\t\tthis.setValue = this._setValue_unbound;\n\n\t}\n\n}\n\nPropertyBinding.Composite = Composite;\n\nPropertyBinding.prototype.BindingType = {\n\tDirect: 0,\n\tEntireArray: 1,\n\tArrayElement: 2,\n\tHasFromToArray: 3\n};\n\nPropertyBinding.prototype.Versioning = {\n\tNone: 0,\n\tNeedsUpdate: 1,\n\tMatrixWorldNeedsUpdate: 2\n};\n\nPropertyBinding.prototype.GetterByBindingType = [\n\n\tPropertyBinding.prototype._getValue_direct,\n\tPropertyBinding.prototype._getValue_array,\n\tPropertyBinding.prototype._getValue_arrayElement,\n\tPropertyBinding.prototype._getValue_toArray,\n\n];\n\nPropertyBinding.prototype.SetterByBindingTypeAndVersioning = [\n\n\t[\n\t\t// Direct\n\t\tPropertyBinding.prototype._setValue_direct,\n\t\tPropertyBinding.prototype._setValue_direct_setNeedsUpdate,\n\t\tPropertyBinding.prototype._setValue_direct_setMatrixWorldNeedsUpdate,\n\n\t], [\n\n\t\t// EntireArray\n\n\t\tPropertyBinding.prototype._setValue_array,\n\t\tPropertyBinding.prototype._setValue_array_setNeedsUpdate,\n\t\tPropertyBinding.prototype._setValue_array_setMatrixWorldNeedsUpdate,\n\n\t], [\n\n\t\t// ArrayElement\n\t\tPropertyBinding.prototype._setValue_arrayElement,\n\t\tPropertyBinding.prototype._setValue_arrayElement_setNeedsUpdate,\n\t\tPropertyBinding.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate,\n\n\t], [\n\n\t\t// HasToFromArray\n\t\tPropertyBinding.prototype._setValue_fromArray,\n\t\tPropertyBinding.prototype._setValue_fromArray_setNeedsUpdate,\n\t\tPropertyBinding.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate,\n\n\t]\n\n];\n\n/**\n *\n * A group of objects that receives a shared animation state.\n *\n * Usage:\n *\n *  - Add objects you would otherwise pass as 'root' to the\n *    constructor or the .clipAction method of AnimationMixer.\n *\n *  - Instead pass this object as 'root'.\n *\n *  - You can also add and remove objects later when the mixer\n *    is running.\n *\n * Note:\n *\n *    Objects of this class appear as one object to the mixer,\n *    so cache control of the individual objects must be done\n *    on the group.\n *\n * Limitation:\n *\n *  - The animated properties must be compatible among the\n *    all objects in the group.\n *\n *  - A single property can either be controlled through a\n *    target group or directly, but not both.\n */\n\nclass AnimationObjectGroup {\n\n\tconstructor() {\n\n\t\tthis.uuid = generateUUID();\n\n\t\t// cached objects followed by the active ones\n\t\tthis._objects = Array.prototype.slice.call( arguments );\n\n\t\tthis.nCachedObjects_ = 0; // threshold\n\t\t// note: read by PropertyBinding.Composite\n\n\t\tconst indices = {};\n\t\tthis._indicesByUUID = indices; // for bookkeeping\n\n\t\tfor ( let i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tindices[ arguments[ i ].uuid ] = i;\n\n\t\t}\n\n\t\tthis._paths = []; // inside: string\n\t\tthis._parsedPaths = []; // inside: { we don't care, here }\n\t\tthis._bindings = []; // inside: Array< PropertyBinding >\n\t\tthis._bindingsIndicesByPath = {}; // inside: indices in these arrays\n\n\t\tconst scope = this;\n\n\t\tthis.stats = {\n\n\t\t\tobjects: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._objects.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn this.total - scope.nCachedObjects_;\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tget bindingsPerObject() {\n\n\t\t\t\treturn scope._bindings.length;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tadd() {\n\n\t\tconst objects = this._objects,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tpaths = this._paths,\n\t\t\tparsedPaths = this._parsedPaths,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length;\n\n\t\tlet knownObject = undefined,\n\t\t\tnObjects = objects.length,\n\t\t\tnCachedObjects = this.nCachedObjects_;\n\n\t\tfor ( let i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tconst object = arguments[ i ],\n\t\t\t\tuuid = object.uuid;\n\t\t\tlet index = indicesByUUID[ uuid ];\n\n\t\t\tif ( index === undefined ) {\n\n\t\t\t\t// unknown object -> add it to the ACTIVE region\n\n\t\t\t\tindex = nObjects ++;\n\t\t\t\tindicesByUUID[ uuid ] = index;\n\t\t\t\tobjects.push( object );\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tbindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );\n\n\t\t\t\t}\n\n\t\t\t} else if ( index < nCachedObjects ) {\n\n\t\t\t\tknownObject = objects[ index ];\n\n\t\t\t\t// move existing object to the ACTIVE region\n\n\t\t\t\tconst firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\n\n\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\n\t\t\t\tobjects[ firstActiveIndex ] = object;\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tconst bindingsForPath = bindings[ j ],\n\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ];\n\n\t\t\t\t\tlet binding = bindingsForPath[ index ];\n\n\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\n\t\t\t\t\tif ( binding === undefined ) {\n\n\t\t\t\t\t\t// since we do not bother to create new bindings\n\t\t\t\t\t\t// for objects that are cached, the binding may\n\t\t\t\t\t\t// or may not exist\n\n\t\t\t\t\t\tbinding = new PropertyBinding( object, paths[ j ], parsedPaths[ j ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\n\n\t\t\t\t}\n\n\t\t\t} else if ( objects[ index ] !== knownObject ) {\n\n\t\t\t\tconsole.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +\n\t\t\t\t\t'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );\n\n\t\t\t} // else the object is already where we want it to be\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t}\n\n\tremove() {\n\n\t\tconst objects = this._objects,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length;\n\n\t\tlet nCachedObjects = this.nCachedObjects_;\n\n\t\tfor ( let i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tconst object = arguments[ i ],\n\t\t\t\tuuid = object.uuid,\n\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\tif ( index !== undefined && index >= nCachedObjects ) {\n\n\t\t\t\t// move existing object into the CACHED region\n\n\t\t\t\tconst lastCachedIndex = nCachedObjects ++,\n\t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\n\n\t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\n\t\t\t\tobjects[ index ] = firstActiveObject;\n\n\t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\n\t\t\t\tobjects[ lastCachedIndex ] = object;\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tconst bindingsForPath = bindings[ j ],\n\t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\n\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\tbindingsForPath[ index ] = firstActive;\n\t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t}\n\n\t// remove & forget\n\tuncache() {\n\n\t\tconst objects = this._objects,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length;\n\n\t\tlet nCachedObjects = this.nCachedObjects_,\n\t\t\tnObjects = objects.length;\n\n\t\tfor ( let i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tconst object = arguments[ i ],\n\t\t\t\tuuid = object.uuid,\n\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tdelete indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index < nCachedObjects ) {\n\n\t\t\t\t\t// object is cached, shrink the CACHED region\n\n\t\t\t\t\tconst firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\n\t\t\t\t\t\tlastIndex = -- nObjects,\n\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\t// last cached object takes this object's place\n\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\t// last object goes to the activated slot and pop\n\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\n\t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\n\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tconst bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\n\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// object is active, just swap with the last and pop\n\n\t\t\t\t\tconst lastIndex = -- nObjects,\n\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\tif ( lastIndex > 0 ) {\n\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobjects[ index ] = lastObject;\n\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tconst bindingsForPath = bindings[ j ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\n\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t}\n\n\t\t\t\t} // cached or active\n\n\t\t\t} // if object is known\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t}\n\n\t// Internal interface used by befriended PropertyBinding.Composite:\n\n\tsubscribe_( path, parsedPath ) {\n\n\t\t// returns an array of bindings for the given path that is changed\n\t\t// according to the contained objects in the group\n\n\t\tconst indicesByPath = this._bindingsIndicesByPath;\n\t\tlet index = indicesByPath[ path ];\n\t\tconst bindings = this._bindings;\n\n\t\tif ( index !== undefined ) return bindings[ index ];\n\n\t\tconst paths = this._paths,\n\t\t\tparsedPaths = this._parsedPaths,\n\t\t\tobjects = this._objects,\n\t\t\tnObjects = objects.length,\n\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\tbindingsForPath = new Array( nObjects );\n\n\t\tindex = bindings.length;\n\n\t\tindicesByPath[ path ] = index;\n\n\t\tpaths.push( path );\n\t\tparsedPaths.push( parsedPath );\n\t\tbindings.push( bindingsForPath );\n\n\t\tfor ( let i = nCachedObjects, n = objects.length; i !== n; ++ i ) {\n\n\t\t\tconst object = objects[ i ];\n\t\t\tbindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );\n\n\t\t}\n\n\t\treturn bindingsForPath;\n\n\t}\n\n\tunsubscribe_( path ) {\n\n\t\t// tells the group to forget about a property path and no longer\n\t\t// update the array previously obtained with 'subscribe_'\n\n\t\tconst indicesByPath = this._bindingsIndicesByPath,\n\t\t\tindex = indicesByPath[ path ];\n\n\t\tif ( index !== undefined ) {\n\n\t\t\tconst paths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\n\t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\n\n\t\t\tindicesByPath[ lastBindingsPath ] = index;\n\n\t\t\tbindings[ index ] = lastBindings;\n\t\t\tbindings.pop();\n\n\t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\n\t\t\tparsedPaths.pop();\n\n\t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\n\t\t\tpaths.pop();\n\n\t\t}\n\n\t}\n\n}\n\nAnimationObjectGroup.prototype.isAnimationObjectGroup = true;\n\nclass AnimationAction {\n\n\tconstructor( mixer, clip, localRoot = null, blendMode = clip.blendMode ) {\n\n\t\tthis._mixer = mixer;\n\t\tthis._clip = clip;\n\t\tthis._localRoot = localRoot;\n\t\tthis.blendMode = blendMode;\n\n\t\tconst tracks = clip.tracks,\n\t\t\tnTracks = tracks.length,\n\t\t\tinterpolants = new Array( nTracks );\n\n\t\tconst interpolantSettings = {\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\t\t};\n\n\t\tfor ( let i = 0; i !== nTracks; ++ i ) {\n\n\t\t\tconst interpolant = tracks[ i ].createInterpolant( null );\n\t\t\tinterpolants[ i ] = interpolant;\n\t\t\tinterpolant.settings = interpolantSettings;\n\n\t\t}\n\n\t\tthis._interpolantSettings = interpolantSettings;\n\n\t\tthis._interpolants = interpolants; // bound by the mixer\n\n\t\t// inside: PropertyMixer (managed by the mixer)\n\t\tthis._propertyBindings = new Array( nTracks );\n\n\t\tthis._cacheIndex = null; // for the memory manager\n\t\tthis._byClipCacheIndex = null; // for the memory manager\n\n\t\tthis._timeScaleInterpolant = null;\n\t\tthis._weightInterpolant = null;\n\n\t\tthis.loop = LoopRepeat;\n\t\tthis._loopCount = - 1;\n\n\t\t// global mixer time when the action is to be started\n\t\t// it's set back to 'null' upon start of the action\n\t\tthis._startTime = null;\n\n\t\t// scaled local time of the action\n\t\t// gets clamped or wrapped to 0..clip.duration according to loop\n\t\tthis.time = 0;\n\n\t\tthis.timeScale = 1;\n\t\tthis._effectiveTimeScale = 1;\n\n\t\tthis.weight = 1;\n\t\tthis._effectiveWeight = 1;\n\n\t\tthis.repetitions = Infinity; // no. of repetitions when looping\n\n\t\tthis.paused = false; // true -> zero effective time scale\n\t\tthis.enabled = true; // false -> zero effective weight\n\n\t\tthis.clampWhenFinished = false;// keep feeding the last frame?\n\n\t\tthis.zeroSlopeAtStart = true;// for smooth interpolation w/o separate\n\t\tthis.zeroSlopeAtEnd = true;// clips for start, loop and end\n\n\t}\n\n\t// State & Scheduling\n\n\tplay() {\n\n\t\tthis._mixer._activateAction( this );\n\n\t\treturn this;\n\n\t}\n\n\tstop() {\n\n\t\tthis._mixer._deactivateAction( this );\n\n\t\treturn this.reset();\n\n\t}\n\n\treset() {\n\n\t\tthis.paused = false;\n\t\tthis.enabled = true;\n\n\t\tthis.time = 0; // restart clip\n\t\tthis._loopCount = - 1;// forget previous loops\n\t\tthis._startTime = null;// forget scheduling\n\n\t\treturn this.stopFading().stopWarping();\n\n\t}\n\n\tisRunning() {\n\n\t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\n\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\n\n\t}\n\n\t// return true when play has been called\n\tisScheduled() {\n\n\t\treturn this._mixer._isActiveAction( this );\n\n\t}\n\n\tstartAt( time ) {\n\n\t\tthis._startTime = time;\n\n\t\treturn this;\n\n\t}\n\n\tsetLoop( mode, repetitions ) {\n\n\t\tthis.loop = mode;\n\t\tthis.repetitions = repetitions;\n\n\t\treturn this;\n\n\t}\n\n\t// Weight\n\n\t// set the weight stopping any scheduled fading\n\t// although .enabled = false yields an effective weight of zero, this\n\t// method does *not* change .enabled, because it would be confusing\n\tsetEffectiveWeight( weight ) {\n\n\t\tthis.weight = weight;\n\n\t\t// note: same logic as when updated at runtime\n\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\n\t\treturn this.stopFading();\n\n\t}\n\n\t// return the weight considering fading and .enabled\n\tgetEffectiveWeight() {\n\n\t\treturn this._effectiveWeight;\n\n\t}\n\n\tfadeIn( duration ) {\n\n\t\treturn this._scheduleFading( duration, 0, 1 );\n\n\t}\n\n\tfadeOut( duration ) {\n\n\t\treturn this._scheduleFading( duration, 1, 0 );\n\n\t}\n\n\tcrossFadeFrom( fadeOutAction, duration, warp ) {\n\n\t\tfadeOutAction.fadeOut( duration );\n\t\tthis.fadeIn( duration );\n\n\t\tif ( warp ) {\n\n\t\t\tconst fadeInDuration = this._clip.duration,\n\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\n\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\n\t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\n\t\t\tthis.warp( endStartRatio, 1.0, duration );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tcrossFadeTo( fadeInAction, duration, warp ) {\n\n\t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\n\n\t}\n\n\tstopFading() {\n\n\t\tconst weightInterpolant = this._weightInterpolant;\n\n\t\tif ( weightInterpolant !== null ) {\n\n\t\t\tthis._weightInterpolant = null;\n\t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// Time Scale Control\n\n\t// set the time scale stopping any scheduled warping\n\t// although .paused = true yields an effective time scale of zero, this\n\t// method does *not* change .paused, because it would be confusing\n\tsetEffectiveTimeScale( timeScale ) {\n\n\t\tthis.timeScale = timeScale;\n\t\tthis._effectiveTimeScale = this.paused ? 0 : timeScale;\n\n\t\treturn this.stopWarping();\n\n\t}\n\n\t// return the time scale considering warping and .paused\n\tgetEffectiveTimeScale() {\n\n\t\treturn this._effectiveTimeScale;\n\n\t}\n\n\tsetDuration( duration ) {\n\n\t\tthis.timeScale = this._clip.duration / duration;\n\n\t\treturn this.stopWarping();\n\n\t}\n\n\tsyncWith( action ) {\n\n\t\tthis.time = action.time;\n\t\tthis.timeScale = action.timeScale;\n\n\t\treturn this.stopWarping();\n\n\t}\n\n\thalt( duration ) {\n\n\t\treturn this.warp( this._effectiveTimeScale, 0, duration );\n\n\t}\n\n\twarp( startTimeScale, endTimeScale, duration ) {\n\n\t\tconst mixer = this._mixer,\n\t\t\tnow = mixer.time,\n\t\t\ttimeScale = this.timeScale;\n\n\t\tlet interpolant = this._timeScaleInterpolant;\n\n\t\tif ( interpolant === null ) {\n\n\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\tthis._timeScaleInterpolant = interpolant;\n\n\t\t}\n\n\t\tconst times = interpolant.parameterPositions,\n\t\t\tvalues = interpolant.sampleValues;\n\n\t\ttimes[ 0 ] = now;\n\t\ttimes[ 1 ] = now + duration;\n\n\t\tvalues[ 0 ] = startTimeScale / timeScale;\n\t\tvalues[ 1 ] = endTimeScale / timeScale;\n\n\t\treturn this;\n\n\t}\n\n\tstopWarping() {\n\n\t\tconst timeScaleInterpolant = this._timeScaleInterpolant;\n\n\t\tif ( timeScaleInterpolant !== null ) {\n\n\t\t\tthis._timeScaleInterpolant = null;\n\t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// Object Accessors\n\n\tgetMixer() {\n\n\t\treturn this._mixer;\n\n\t}\n\n\tgetClip() {\n\n\t\treturn this._clip;\n\n\t}\n\n\tgetRoot() {\n\n\t\treturn this._localRoot || this._mixer._root;\n\n\t}\n\n\t// Interna\n\n\t_update( time, deltaTime, timeDirection, accuIndex ) {\n\n\t\t// called by the mixer\n\n\t\tif ( ! this.enabled ) {\n\n\t\t\t// call ._updateWeight() to update ._effectiveWeight\n\n\t\t\tthis._updateWeight( time );\n\t\t\treturn;\n\n\t\t}\n\n\t\tconst startTime = this._startTime;\n\n\t\tif ( startTime !== null ) {\n\n\t\t\t// check for scheduled start of action\n\n\t\t\tconst timeRunning = ( time - startTime ) * timeDirection;\n\t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\n\n\t\t\t\treturn; // yet to come / don't decide when delta = 0\n\n\t\t\t}\n\n\t\t\t// start\n\n\t\t\tthis._startTime = null; // unschedule\n\t\t\tdeltaTime = timeDirection * timeRunning;\n\n\t\t}\n\n\t\t// apply time scale and advance time\n\n\t\tdeltaTime *= this._updateTimeScale( time );\n\t\tconst clipTime = this._updateTime( deltaTime );\n\n\t\t// note: _updateTime may disable the action resulting in\n\t\t// an effective weight of 0\n\n\t\tconst weight = this._updateWeight( time );\n\n\t\tif ( weight > 0 ) {\n\n\t\t\tconst interpolants = this._interpolants;\n\t\t\tconst propertyMixers = this._propertyBindings;\n\n\t\t\tswitch ( this.blendMode ) {\n\n\t\t\t\tcase AdditiveAnimationBlendMode:\n\n\t\t\t\t\tfor ( let j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n\t\t\t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t\t\t\t\t\tpropertyMixers[ j ].accumulateAdditive( weight );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase NormalAnimationBlendMode:\n\t\t\t\tdefault:\n\n\t\t\t\t\tfor ( let j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n\t\t\t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t\t\t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\n\n\t\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_updateWeight( time ) {\n\n\t\tlet weight = 0;\n\n\t\tif ( this.enabled ) {\n\n\t\t\tweight = this.weight;\n\t\t\tconst interpolant = this._weightInterpolant;\n\n\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\tconst interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\tweight *= interpolantValue;\n\n\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\tthis.stopFading();\n\n\t\t\t\t\tif ( interpolantValue === 0 ) {\n\n\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\tthis.enabled = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis._effectiveWeight = weight;\n\t\treturn weight;\n\n\t}\n\n\t_updateTimeScale( time ) {\n\n\t\tlet timeScale = 0;\n\n\t\tif ( ! this.paused ) {\n\n\t\t\ttimeScale = this.timeScale;\n\n\t\t\tconst interpolant = this._timeScaleInterpolant;\n\n\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\tconst interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\ttimeScale *= interpolantValue;\n\n\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\tthis.stopWarping();\n\n\t\t\t\t\tif ( timeScale === 0 ) {\n\n\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\tthis.paused = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\tthis.timeScale = timeScale;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis._effectiveTimeScale = timeScale;\n\t\treturn timeScale;\n\n\t}\n\n\t_updateTime( deltaTime ) {\n\n\t\tconst duration = this._clip.duration;\n\t\tconst loop = this.loop;\n\n\t\tlet time = this.time + deltaTime;\n\t\tlet loopCount = this._loopCount;\n\n\t\tconst pingPong = ( loop === LoopPingPong );\n\n\t\tif ( deltaTime === 0 ) {\n\n\t\t\tif ( loopCount === - 1 ) return time;\n\n\t\t\treturn ( pingPong && ( loopCount & 1 ) === 1 ) ? duration - time : time;\n\n\t\t}\n\n\t\tif ( loop === LoopOnce ) {\n\n\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t// just started\n\n\t\t\t\tthis._loopCount = 0;\n\t\t\t\tthis._setEndings( true, true, false );\n\n\t\t\t}\n\n\t\t\thandle_stop: {\n\n\t\t\t\tif ( time >= duration ) {\n\n\t\t\t\t\ttime = duration;\n\n\t\t\t\t} else if ( time < 0 ) {\n\n\t\t\t\t\ttime = 0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tbreak handle_stop;\n\n\t\t\t\t}\n\n\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\telse this.enabled = false;\n\n\t\t\t\tthis.time = time;\n\n\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\tdirection: deltaTime < 0 ? - 1 : 1\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t} else { // repetitive Repeat or PingPong\n\n\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t// just started\n\n\t\t\t\tif ( deltaTime >= 0 ) {\n\n\t\t\t\t\tloopCount = 0;\n\n\t\t\t\t\tthis._setEndings( true, this.repetitions === 0, pingPong );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t// so leave loopCount at -1\n\n\t\t\t\t\tthis._setEndings( this.repetitions === 0, true, pingPong );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( time >= duration || time < 0 ) {\n\n\t\t\t\t// wrap around\n\n\t\t\t\tconst loopDelta = Math.floor( time / duration ); // signed\n\t\t\t\ttime -= duration * loopDelta;\n\n\t\t\t\tloopCount += Math.abs( loopDelta );\n\n\t\t\t\tconst pending = this.repetitions - loopCount;\n\n\t\t\t\tif ( pending <= 0 ) {\n\n\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\n\t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\t\telse this.enabled = false;\n\n\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : - 1\n\t\t\t\t\t} );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// keep running\n\n\t\t\t\t\tif ( pending === 1 ) {\n\n\t\t\t\t\t\t// entering the last round\n\n\t\t\t\t\t\tconst atStart = deltaTime < 0;\n\t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis._setEndings( false, false, pingPong );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._loopCount = loopCount;\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthis.time = time;\n\n\t\t\t}\n\n\t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\n\n\t\t\t\t// invert time for the \"pong round\"\n\n\t\t\t\treturn duration - time;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn time;\n\n\t}\n\n\t_setEndings( atStart, atEnd, pingPong ) {\n\n\t\tconst settings = this._interpolantSettings;\n\n\t\tif ( pingPong ) {\n\n\t\t\tsettings.endingStart = ZeroSlopeEnding;\n\t\t\tsettings.endingEnd = ZeroSlopeEnding;\n\n\t\t} else {\n\n\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\n\t\t\tif ( atStart ) {\n\n\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t} else {\n\n\t\t\t\tsettings.endingStart = WrapAroundEnding;\n\n\t\t\t}\n\n\t\t\tif ( atEnd ) {\n\n\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t} else {\n\n\t\t\t\tsettings.endingEnd \t = WrapAroundEnding;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_scheduleFading( duration, weightNow, weightThen ) {\n\n\t\tconst mixer = this._mixer, now = mixer.time;\n\t\tlet interpolant = this._weightInterpolant;\n\n\t\tif ( interpolant === null ) {\n\n\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\tthis._weightInterpolant = interpolant;\n\n\t\t}\n\n\t\tconst times = interpolant.parameterPositions,\n\t\t\tvalues = interpolant.sampleValues;\n\n\t\ttimes[ 0 ] = now;\n\t\tvalues[ 0 ] = weightNow;\n\t\ttimes[ 1 ] = now + duration;\n\t\tvalues[ 1 ] = weightThen;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass AnimationMixer extends EventDispatcher {\n\n\tconstructor( root ) {\n\n\t\tsuper();\n\n\t\tthis._root = root;\n\t\tthis._initMemoryManager();\n\t\tthis._accuIndex = 0;\n\t\tthis.time = 0;\n\t\tthis.timeScale = 1.0;\n\n\t}\n\n\t_bindAction( action, prototypeAction ) {\n\n\t\tconst root = action._localRoot || this._root,\n\t\t\ttracks = action._clip.tracks,\n\t\t\tnTracks = tracks.length,\n\t\t\tbindings = action._propertyBindings,\n\t\t\tinterpolants = action._interpolants,\n\t\t\trootUuid = root.uuid,\n\t\t\tbindingsByRoot = this._bindingsByRootAndName;\n\n\t\tlet bindingsByName = bindingsByRoot[ rootUuid ];\n\n\t\tif ( bindingsByName === undefined ) {\n\n\t\t\tbindingsByName = {};\n\t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\n\n\t\t}\n\n\t\tfor ( let i = 0; i !== nTracks; ++ i ) {\n\n\t\t\tconst track = tracks[ i ],\n\t\t\t\ttrackName = track.name;\n\n\t\t\tlet binding = bindingsByName[ trackName ];\n\n\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t} else {\n\n\t\t\t\tbinding = bindings[ i ];\n\n\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\t// existing binding, make sure the cache knows\n\n\t\t\t\t\tif ( binding._cacheIndex === null ) {\n\n\t\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tconst path = prototypeAction && prototypeAction.\n\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\n\n\t\t\t\tbinding = new PropertyMixer(\n\t\t\t\t\tPropertyBinding.create( root, trackName, path ),\n\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\n\n\t\t\t\t++ binding.referenceCount;\n\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t}\n\n\t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\n\n\t\t}\n\n\t}\n\n\t_activateAction( action ) {\n\n\t\tif ( ! this._isActiveAction( action ) ) {\n\n\t\t\tif ( action._cacheIndex === null ) {\n\n\t\t\t\t// this action has been forgotten by the cache, but the user\n\t\t\t\t// appears to be still using it -> rebind\n\n\t\t\t\tconst rootUuid = ( action._localRoot || this._root ).uuid,\n\t\t\t\t\tclipUuid = action._clip.uuid,\n\t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\t\tthis._bindAction( action,\n\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\n\n\t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\n\n\t\t\t}\n\n\t\t\tconst bindings = action._propertyBindings;\n\n\t\t\t// increment reference counts / sort out state\n\t\t\tfor ( let i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tconst binding = bindings[ i ];\n\n\t\t\t\tif ( binding.useCount ++ === 0 ) {\n\n\t\t\t\t\tthis._lendBinding( binding );\n\t\t\t\t\tbinding.saveOriginalState();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._lendAction( action );\n\n\t\t}\n\n\t}\n\n\t_deactivateAction( action ) {\n\n\t\tif ( this._isActiveAction( action ) ) {\n\n\t\t\tconst bindings = action._propertyBindings;\n\n\t\t\t// decrement reference counts / sort out state\n\t\t\tfor ( let i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tconst binding = bindings[ i ];\n\n\t\t\t\tif ( -- binding.useCount === 0 ) {\n\n\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\tthis._takeBackBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._takeBackAction( action );\n\n\t\t}\n\n\t}\n\n\t// Memory manager\n\n\t_initMemoryManager() {\n\n\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\t\tthis._nActiveActions = 0;\n\n\t\tthis._actionsByClip = {};\n\t\t// inside:\n\t\t// {\n\t\t// \tknownActions: Array< AnimationAction > - used as prototypes\n\t\t// \tactionByRoot: AnimationAction - lookup\n\t\t// }\n\n\n\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\t\tthis._nActiveBindings = 0;\n\n\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\n\t\tthis._controlInterpolants = []; // same game as above\n\t\tthis._nActiveControlInterpolants = 0;\n\n\t\tconst scope = this;\n\n\t\tthis.stats = {\n\n\t\t\tactions: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._actions.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn scope._nActiveActions;\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tbindings: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._bindings.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn scope._nActiveBindings;\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tcontrolInterpolants: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._controlInterpolants.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn scope._nActiveControlInterpolants;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t// Memory management for AnimationAction objects\n\n\t_isActiveAction( action ) {\n\n\t\tconst index = action._cacheIndex;\n\t\treturn index !== null && index < this._nActiveActions;\n\n\t}\n\n\t_addInactiveAction( action, clipUuid, rootUuid ) {\n\n\t\tconst actions = this._actions,\n\t\t\tactionsByClip = this._actionsByClip;\n\n\t\tlet actionsForClip = actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip === undefined ) {\n\n\t\t\tactionsForClip = {\n\n\t\t\t\tknownActions: [ action ],\n\t\t\t\tactionByRoot: {}\n\n\t\t\t};\n\n\t\t\taction._byClipCacheIndex = 0;\n\n\t\t\tactionsByClip[ clipUuid ] = actionsForClip;\n\n\t\t} else {\n\n\t\t\tconst knownActions = actionsForClip.knownActions;\n\n\t\t\taction._byClipCacheIndex = knownActions.length;\n\t\t\tknownActions.push( action );\n\n\t\t}\n\n\t\taction._cacheIndex = actions.length;\n\t\tactions.push( action );\n\n\t\tactionsForClip.actionByRoot[ rootUuid ] = action;\n\n\t}\n\n\t_removeInactiveAction( action ) {\n\n\t\tconst actions = this._actions,\n\t\t\tlastInactiveAction = actions[ actions.length - 1 ],\n\t\t\tcacheIndex = action._cacheIndex;\n\n\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\tactions.pop();\n\n\t\taction._cacheIndex = null;\n\n\n\t\tconst clipUuid = action._clip.uuid,\n\t\t\tactionsByClip = this._actionsByClip,\n\t\t\tactionsForClip = actionsByClip[ clipUuid ],\n\t\t\tknownActionsForClip = actionsForClip.knownActions,\n\n\t\t\tlastKnownAction =\n\t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\n\n\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\n\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\n\t\tknownActionsForClip.pop();\n\n\t\taction._byClipCacheIndex = null;\n\n\n\t\tconst actionByRoot = actionsForClip.actionByRoot,\n\t\t\trootUuid = ( action._localRoot || this._root ).uuid;\n\n\t\tdelete actionByRoot[ rootUuid ];\n\n\t\tif ( knownActionsForClip.length === 0 ) {\n\n\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t}\n\n\t\tthis._removeInactiveBindingsForAction( action );\n\n\t}\n\n\t_removeInactiveBindingsForAction( action ) {\n\n\t\tconst bindings = action._propertyBindings;\n\n\t\tfor ( let i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tconst binding = bindings[ i ];\n\n\t\t\tif ( -- binding.referenceCount === 0 ) {\n\n\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_lendAction( action ) {\n\n\t\t// [ active actions |  inactive actions  ]\n\t\t// [  active actions >| inactive actions ]\n\t\t//                 s        a\n\t\t//                  <-swap->\n\t\t//                 a        s\n\n\t\tconst actions = this._actions,\n\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\tlastActiveIndex = this._nActiveActions ++,\n\n\t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\n\n\t\taction._cacheIndex = lastActiveIndex;\n\t\tactions[ lastActiveIndex ] = action;\n\n\t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t\tactions[ prevIndex ] = firstInactiveAction;\n\n\t}\n\n\t_takeBackAction( action ) {\n\n\t\t// [  active actions  | inactive actions ]\n\t\t// [ active actions |< inactive actions  ]\n\t\t//        a        s\n\t\t//         <-swap->\n\t\t//        s        a\n\n\t\tconst actions = this._actions,\n\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveActions,\n\n\t\t\tlastActiveAction = actions[ firstInactiveIndex ];\n\n\t\taction._cacheIndex = firstInactiveIndex;\n\t\tactions[ firstInactiveIndex ] = action;\n\n\t\tlastActiveAction._cacheIndex = prevIndex;\n\t\tactions[ prevIndex ] = lastActiveAction;\n\n\t}\n\n\t// Memory management for PropertyMixer objects\n\n\t_addInactiveBinding( binding, rootUuid, trackName ) {\n\n\t\tconst bindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindings = this._bindings;\n\n\t\tlet bindingByName = bindingsByRoot[ rootUuid ];\n\n\t\tif ( bindingByName === undefined ) {\n\n\t\t\tbindingByName = {};\n\t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\n\n\t\t}\n\n\t\tbindingByName[ trackName ] = binding;\n\n\t\tbinding._cacheIndex = bindings.length;\n\t\tbindings.push( binding );\n\n\t}\n\n\t_removeInactiveBinding( binding ) {\n\n\t\tconst bindings = this._bindings,\n\t\t\tpropBinding = binding.binding,\n\t\t\trootUuid = propBinding.rootNode.uuid,\n\t\t\ttrackName = propBinding.path,\n\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\n\t\t\tcacheIndex = binding._cacheIndex;\n\n\t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t\tbindings[ cacheIndex ] = lastInactiveBinding;\n\t\tbindings.pop();\n\n\t\tdelete bindingByName[ trackName ];\n\n\t\tif ( Object.keys( bindingByName ).length === 0 ) {\n\n\t\t\tdelete bindingsByRoot[ rootUuid ];\n\n\t\t}\n\n\t}\n\n\t_lendBinding( binding ) {\n\n\t\tconst bindings = this._bindings,\n\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\tlastActiveIndex = this._nActiveBindings ++,\n\n\t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\n\n\t\tbinding._cacheIndex = lastActiveIndex;\n\t\tbindings[ lastActiveIndex ] = binding;\n\n\t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t\tbindings[ prevIndex ] = firstInactiveBinding;\n\n\t}\n\n\t_takeBackBinding( binding ) {\n\n\t\tconst bindings = this._bindings,\n\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveBindings,\n\n\t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\n\n\t\tbinding._cacheIndex = firstInactiveIndex;\n\t\tbindings[ firstInactiveIndex ] = binding;\n\n\t\tlastActiveBinding._cacheIndex = prevIndex;\n\t\tbindings[ prevIndex ] = lastActiveBinding;\n\n\t}\n\n\n\t// Memory management of Interpolants for weight and time scale\n\n\t_lendControlInterpolant() {\n\n\t\tconst interpolants = this._controlInterpolants,\n\t\t\tlastActiveIndex = this._nActiveControlInterpolants ++;\n\n\t\tlet interpolant = interpolants[ lastActiveIndex ];\n\n\t\tif ( interpolant === undefined ) {\n\n\t\t\tinterpolant = new LinearInterpolant(\n\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\n\t\t\t\t1, this._controlInterpolantsResultBuffer );\n\n\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t\t\tinterpolants[ lastActiveIndex ] = interpolant;\n\n\t\t}\n\n\t\treturn interpolant;\n\n\t}\n\n\t_takeBackControlInterpolant( interpolant ) {\n\n\t\tconst interpolants = this._controlInterpolants,\n\t\t\tprevIndex = interpolant.__cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\n\n\t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\n\n\t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t\tinterpolants[ firstInactiveIndex ] = interpolant;\n\n\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\n\n\t}\n\n\t// return an action for a clip optionally using a custom root target\n\t// object (this method allocates a lot of dynamic memory in case a\n\t// previously unknown clip/root combination is specified)\n\tclipAction( clip, optionalRoot, blendMode ) {\n\n\t\tconst root = optionalRoot || this._root,\n\t\t\trootUuid = root.uuid;\n\n\t\tlet clipObject = typeof clip === 'string' ? AnimationClip.findByName( root, clip ) : clip;\n\n\t\tconst clipUuid = clipObject !== null ? clipObject.uuid : clip;\n\n\t\tconst actionsForClip = this._actionsByClip[ clipUuid ];\n\t\tlet prototypeAction = null;\n\n\t\tif ( blendMode === undefined ) {\n\n\t\t\tif ( clipObject !== null ) {\n\n\t\t\t\tblendMode = clipObject.blendMode;\n\n\t\t\t} else {\n\n\t\t\t\tblendMode = NormalAnimationBlendMode;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\tconst existingAction = actionsForClip.actionByRoot[ rootUuid ];\n\n\t\t\tif ( existingAction !== undefined && existingAction.blendMode === blendMode ) {\n\n\t\t\t\treturn existingAction;\n\n\t\t\t}\n\n\t\t\t// we know the clip, so we don't have to parse all\n\t\t\t// the bindings again but can just copy\n\t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\n\n\t\t\t// also, take the clip from the prototype action\n\t\t\tif ( clipObject === null )\n\t\t\t\tclipObject = prototypeAction._clip;\n\n\t\t}\n\n\t\t// clip must be known when specified via string\n\t\tif ( clipObject === null ) return null;\n\n\t\t// allocate all resources required to run it\n\t\tconst newAction = new AnimationAction( this, clipObject, optionalRoot, blendMode );\n\n\t\tthis._bindAction( newAction, prototypeAction );\n\n\t\t// and make the action known to the memory manager\n\t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\n\n\t\treturn newAction;\n\n\t}\n\n\t// get an existing action\n\texistingAction( clip, optionalRoot ) {\n\n\t\tconst root = optionalRoot || this._root,\n\t\t\trootUuid = root.uuid,\n\n\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\n\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\t// deactivates all previously scheduled actions\n\tstopAllAction() {\n\n\t\tconst actions = this._actions,\n\t\t\tnActions = this._nActiveActions;\n\n\t\tfor ( let i = nActions - 1; i >= 0; -- i ) {\n\n\t\t\tactions[ i ].stop();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// advance the time and update apply the animation\n\tupdate( deltaTime ) {\n\n\t\tdeltaTime *= this.timeScale;\n\n\t\tconst actions = this._actions,\n\t\t\tnActions = this._nActiveActions,\n\n\t\t\ttime = this.time += deltaTime,\n\t\t\ttimeDirection = Math.sign( deltaTime ),\n\n\t\t\taccuIndex = this._accuIndex ^= 1;\n\n\t\t// run active actions\n\n\t\tfor ( let i = 0; i !== nActions; ++ i ) {\n\n\t\t\tconst action = actions[ i ];\n\n\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\n\n\t\t}\n\n\t\t// update scene graph\n\n\t\tconst bindings = this._bindings,\n\t\t\tnBindings = this._nActiveBindings;\n\n\t\tfor ( let i = 0; i !== nBindings; ++ i ) {\n\n\t\t\tbindings[ i ].apply( accuIndex );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// Allows you to seek to a specific time in an animation.\n\tsetTime( timeInSeconds ) {\n\n\t\tthis.time = 0; // Zero out time attribute for AnimationMixer object;\n\t\tfor ( let i = 0; i < this._actions.length; i ++ ) {\n\n\t\t\tthis._actions[ i ].time = 0; // Zero out time attribute for all associated AnimationAction objects.\n\n\t\t}\n\n\t\treturn this.update( timeInSeconds ); // Update used to set exact time. Returns \"this\" AnimationMixer object.\n\n\t}\n\n\t// return this mixer's root target object\n\tgetRoot() {\n\n\t\treturn this._root;\n\n\t}\n\n\t// free all resources specific to a particular clip\n\tuncacheClip( clip ) {\n\n\t\tconst actions = this._actions,\n\t\t\tclipUuid = clip.uuid,\n\t\t\tactionsByClip = this._actionsByClip,\n\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t// note: just calling _removeInactiveAction would mess up the\n\t\t\t// iteration state and also require updating the state we can\n\t\t\t// just throw away\n\n\t\t\tconst actionsToRemove = actionsForClip.knownActions;\n\n\t\t\tfor ( let i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\n\n\t\t\t\tconst action = actionsToRemove[ i ];\n\n\t\t\t\tthis._deactivateAction( action );\n\n\t\t\t\tconst cacheIndex = action._cacheIndex,\n\t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\n\n\t\t\t\taction._cacheIndex = null;\n\t\t\t\taction._byClipCacheIndex = null;\n\n\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\t\tactions.pop();\n\n\t\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t\t}\n\n\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t}\n\n\t}\n\n\t// free all resources specific to a particular root target object\n\tuncacheRoot( root ) {\n\n\t\tconst rootUuid = root.uuid,\n\t\t\tactionsByClip = this._actionsByClip;\n\n\t\tfor ( const clipUuid in actionsByClip ) {\n\n\t\t\tconst actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\n\t\t\t\taction = actionByRoot[ rootUuid ];\n\n\t\t\tif ( action !== undefined ) {\n\n\t\t\t\tthis._deactivateAction( action );\n\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst bindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ];\n\n\t\tif ( bindingByName !== undefined ) {\n\n\t\t\tfor ( const trackName in bindingByName ) {\n\n\t\t\t\tconst binding = bindingByName[ trackName ];\n\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// remove a targeted clip from the cache\n\tuncacheAction( clip, optionalRoot ) {\n\n\t\tconst action = this.existingAction( clip, optionalRoot );\n\n\t\tif ( action !== null ) {\n\n\t\t\tthis._deactivateAction( action );\n\t\t\tthis._removeInactiveAction( action );\n\n\t\t}\n\n\t}\n\n}\n\nAnimationMixer.prototype._controlInterpolantsResultBuffer = new Float32Array( 1 );\n\nclass Uniform {\n\n\tconstructor( value ) {\n\n\t\tif ( typeof value === 'string' ) {\n\n\t\t\tconsole.warn( 'THREE.Uniform: Type parameter is no longer needed.' );\n\t\t\tvalue = arguments[ 1 ];\n\n\t\t}\n\n\t\tthis.value = value;\n\n\t}\n\n\tclone() {\n\n\t\treturn new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );\n\n\t}\n\n}\n\nclass InstancedInterleavedBuffer extends InterleavedBuffer {\n\n\tconstructor( array, stride, meshPerAttribute = 1 ) {\n\n\t\tsuper( array, stride );\n\n\t\tthis.meshPerAttribute = meshPerAttribute;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\treturn this;\n\n\t}\n\n\tclone( data ) {\n\n\t\tconst ib = super.clone( data );\n\n\t\tib.meshPerAttribute = this.meshPerAttribute;\n\n\t\treturn ib;\n\n\t}\n\n\ttoJSON( data ) {\n\n\t\tconst json = super.toJSON( data );\n\n\t\tjson.isInstancedInterleavedBuffer = true;\n\t\tjson.meshPerAttribute = this.meshPerAttribute;\n\n\t\treturn json;\n\n\t}\n\n}\n\nInstancedInterleavedBuffer.prototype.isInstancedInterleavedBuffer = true;\n\nclass GLBufferAttribute {\n\n\tconstructor( buffer, type, itemSize, elementSize, count ) {\n\n\t\tthis.buffer = buffer;\n\t\tthis.type = type;\n\t\tthis.itemSize = itemSize;\n\t\tthis.elementSize = elementSize;\n\t\tthis.count = count;\n\n\t\tthis.version = 0;\n\n\t}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n\tsetBuffer( buffer ) {\n\n\t\tthis.buffer = buffer;\n\n\t\treturn this;\n\n\t}\n\n\tsetType( type, elementSize ) {\n\n\t\tthis.type = type;\n\t\tthis.elementSize = elementSize;\n\n\t\treturn this;\n\n\t}\n\n\tsetItemSize( itemSize ) {\n\n\t\tthis.itemSize = itemSize;\n\n\t\treturn this;\n\n\t}\n\n\tsetCount( count ) {\n\n\t\tthis.count = count;\n\n\t\treturn this;\n\n\t}\n\n}\n\nGLBufferAttribute.prototype.isGLBufferAttribute = true;\n\nclass Raycaster {\n\n\tconstructor( origin, direction, near = 0, far = Infinity ) {\n\n\t\tthis.ray = new Ray( origin, direction );\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.near = near;\n\t\tthis.far = far;\n\t\tthis.camera = null;\n\t\tthis.layers = new Layers();\n\n\t\tthis.params = {\n\t\t\tMesh: {},\n\t\t\tLine: { threshold: 1 },\n\t\t\tLOD: {},\n\t\t\tPoints: { threshold: 1 },\n\t\t\tSprite: {}\n\t\t};\n\n\t}\n\n\tset( origin, direction ) {\n\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.ray.set( origin, direction );\n\n\t}\n\n\tsetFromCamera( coords, camera ) {\n\n\t\tif ( camera && camera.isPerspectiveCamera ) {\n\n\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\n\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\n\t\t\tthis.camera = camera;\n\n\t\t} else if ( camera && camera.isOrthographicCamera ) {\n\n\t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\n\t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\n\t\t\tthis.camera = camera;\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type: ' + camera.type );\n\n\t\t}\n\n\t}\n\n\tintersectObject( object, recursive = true, intersects = [] ) {\n\n\t\tintersectObject( object, this, intersects, recursive );\n\n\t\tintersects.sort( ascSort );\n\n\t\treturn intersects;\n\n\t}\n\n\tintersectObjects( objects, recursive = true, intersects = [] ) {\n\n\t\tfor ( let i = 0, l = objects.length; i < l; i ++ ) {\n\n\t\t\tintersectObject( objects[ i ], this, intersects, recursive );\n\n\t\t}\n\n\t\tintersects.sort( ascSort );\n\n\t\treturn intersects;\n\n\t}\n\n}\n\nfunction ascSort( a, b ) {\n\n\treturn a.distance - b.distance;\n\n}\n\nfunction intersectObject( object, raycaster, intersects, recursive ) {\n\n\tif ( object.layers.test( raycaster.layers ) ) {\n\n\t\tobject.raycast( raycaster, intersects );\n\n\t}\n\n\tif ( recursive === true ) {\n\n\t\tconst children = object.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tintersectObject( children[ i ], raycaster, intersects, true );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n *\n * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.\n * The azimuthal angle (theta) is measured from the positive z-axis.\n */\n\nclass Spherical {\n\n\tconstructor( radius = 1, phi = 0, theta = 0 ) {\n\n\t\tthis.radius = radius;\n\t\tthis.phi = phi; // polar angle\n\t\tthis.theta = theta; // azimuthal angle\n\n\t\treturn this;\n\n\t}\n\n\tset( radius, phi, theta ) {\n\n\t\tthis.radius = radius;\n\t\tthis.phi = phi;\n\t\tthis.theta = theta;\n\n\t\treturn this;\n\n\t}\n\n\tcopy( other ) {\n\n\t\tthis.radius = other.radius;\n\t\tthis.phi = other.phi;\n\t\tthis.theta = other.theta;\n\n\t\treturn this;\n\n\t}\n\n\t// restrict phi to be betwee EPS and PI-EPS\n\tmakeSafe() {\n\n\t\tconst EPS = 0.000001;\n\t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromVector3( v ) {\n\n\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\n\n\t}\n\n\tsetFromCartesianCoords( x, y, z ) {\n\n\t\tthis.radius = Math.sqrt( x * x + y * y + z * z );\n\n\t\tif ( this.radius === 0 ) {\n\n\t\t\tthis.theta = 0;\n\t\t\tthis.phi = 0;\n\n\t\t} else {\n\n\t\t\tthis.theta = Math.atan2( x, z );\n\t\t\tthis.phi = Math.acos( clamp( y / this.radius, - 1, 1 ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\n/**\n * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\n */\n\nclass Cylindrical {\n\n\tconstructor( radius = 1, theta = 0, y = 0 ) {\n\n\t\tthis.radius = radius; // distance from the origin to a point in the x-z plane\n\t\tthis.theta = theta; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\n\t\tthis.y = y; // height above the x-z plane\n\n\t\treturn this;\n\n\t}\n\n\tset( radius, theta, y ) {\n\n\t\tthis.radius = radius;\n\t\tthis.theta = theta;\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tcopy( other ) {\n\n\t\tthis.radius = other.radius;\n\t\tthis.theta = other.theta;\n\t\tthis.y = other.y;\n\n\t\treturn this;\n\n\t}\n\n\tsetFromVector3( v ) {\n\n\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\n\n\t}\n\n\tsetFromCartesianCoords( x, y, z ) {\n\n\t\tthis.radius = Math.sqrt( x * x + z * z );\n\t\tthis.theta = Math.atan2( x, z );\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nconst _vector$4 = /*@__PURE__*/ new Vector2();\n\nclass Box2 {\n\n\tconstructor( min = new Vector2( + Infinity, + Infinity ), max = new Vector2( - Infinity, - Infinity ) ) {\n\n\t\tthis.min = min;\n\t\tthis.max = max;\n\n\t}\n\n\tset( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPoints( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetFromCenterAndSize( center, size ) {\n\n\t\tconst halfSize = _vector$4.copy( size ).multiplyScalar( 0.5 );\n\t\tthis.min.copy( center ).sub( halfSize );\n\t\tthis.max.copy( center ).add( halfSize );\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t}\n\n\tmakeEmpty() {\n\n\t\tthis.min.x = this.min.y = + Infinity;\n\t\tthis.max.x = this.max.y = - Infinity;\n\n\t\treturn this;\n\n\t}\n\n\tisEmpty() {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n\n\t}\n\n\tgetCenter( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t}\n\n\tgetSize( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t}\n\n\texpandByPoint( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\n\t}\n\n\texpandByVector( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\n\t}\n\n\texpandByScalar( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\tpoint.y < this.min.y || point.y > this.max.y ? false : true;\n\n\t}\n\n\tcontainsBox( box ) {\n\n\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y;\n\n\t}\n\n\tgetParameter( point, target ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\treturn target.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\n\t\t);\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\t// using 4 splitting planes to rule out intersections\n\n\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ? false : true;\n\n\t}\n\n\tclampPoint( point, target ) {\n\n\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\tconst clampedPoint = _vector$4.copy( point ).clamp( this.min, this.max );\n\t\treturn clampedPoint.sub( point ).length();\n\n\t}\n\n\tintersect( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\treturn this;\n\n\t}\n\n\tunion( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t}\n\n\tequals( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t}\n\n}\n\nBox2.prototype.isBox2 = true;\n\nconst _startP = /*@__PURE__*/ new Vector3();\nconst _startEnd = /*@__PURE__*/ new Vector3();\n\nclass Line3 {\n\n\tconstructor( start = new Vector3(), end = new Vector3() ) {\n\n\t\tthis.start = start;\n\t\tthis.end = end;\n\n\t}\n\n\tset( start, end ) {\n\n\t\tthis.start.copy( start );\n\t\tthis.end.copy( end );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( line ) {\n\n\t\tthis.start.copy( line.start );\n\t\tthis.end.copy( line.end );\n\n\t\treturn this;\n\n\t}\n\n\tgetCenter( target ) {\n\n\t\treturn target.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\n\n\t}\n\n\tdelta( target ) {\n\n\t\treturn target.subVectors( this.end, this.start );\n\n\t}\n\n\tdistanceSq() {\n\n\t\treturn this.start.distanceToSquared( this.end );\n\n\t}\n\n\tdistance() {\n\n\t\treturn this.start.distanceTo( this.end );\n\n\t}\n\n\tat( t, target ) {\n\n\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t}\n\n\tclosestPointToPointParameter( point, clampToLine ) {\n\n\t\t_startP.subVectors( point, this.start );\n\t\t_startEnd.subVectors( this.end, this.start );\n\n\t\tconst startEnd2 = _startEnd.dot( _startEnd );\n\t\tconst startEnd_startP = _startEnd.dot( _startP );\n\n\t\tlet t = startEnd_startP / startEnd2;\n\n\t\tif ( clampToLine ) {\n\n\t\t\tt = clamp( t, 0, 1 );\n\n\t\t}\n\n\t\treturn t;\n\n\t}\n\n\tclosestPointToPoint( point, clampToLine, target ) {\n\n\t\tconst t = this.closestPointToPointParameter( point, clampToLine );\n\n\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t}\n\n\tapplyMatrix4( matrix ) {\n\n\t\tthis.start.applyMatrix4( matrix );\n\t\tthis.end.applyMatrix4( matrix );\n\n\t\treturn this;\n\n\t}\n\n\tequals( line ) {\n\n\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nconst _vector$3 = /*@__PURE__*/ new Vector3();\n\nclass SpotLightHelper extends Object3D {\n\n\tconstructor( light, color ) {\n\n\t\tsuper();\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tconst geometry = new BufferGeometry();\n\n\t\tconst positions = [\n\t\t\t0, 0, 0, \t0, 0, 1,\n\t\t\t0, 0, 0, \t1, 0, 1,\n\t\t\t0, 0, 0,\t- 1, 0, 1,\n\t\t\t0, 0, 0, \t0, 1, 1,\n\t\t\t0, 0, 0, \t0, - 1, 1\n\t\t];\n\n\t\tfor ( let i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\n\n\t\t\tconst p1 = ( i / l ) * Math.PI * 2;\n\t\t\tconst p2 = ( j / l ) * Math.PI * 2;\n\n\t\t\tpositions.push(\n\t\t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\n\t\t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\n\t\t\t);\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { fog: false, toneMapped: false } );\n\n\t\tthis.cone = new LineSegments( geometry, material );\n\t\tthis.add( this.cone );\n\n\t\tthis.update();\n\n\t}\n\n\tdispose() {\n\n\t\tthis.cone.geometry.dispose();\n\t\tthis.cone.material.dispose();\n\n\t}\n\n\tupdate() {\n\n\t\tthis.light.updateMatrixWorld();\n\n\t\tconst coneLength = this.light.distance ? this.light.distance : 1000;\n\t\tconst coneWidth = coneLength * Math.tan( this.light.angle );\n\n\t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\n\n\t\t_vector$3.setFromMatrixPosition( this.light.target.matrixWorld );\n\n\t\tthis.cone.lookAt( _vector$3 );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.cone.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.cone.material.color.copy( this.light.color );\n\n\t\t}\n\n\t}\n\n}\n\nconst _vector$2 = /*@__PURE__*/ new Vector3();\nconst _boneMatrix = /*@__PURE__*/ new Matrix4();\nconst _matrixWorldInv = /*@__PURE__*/ new Matrix4();\n\n\nclass SkeletonHelper extends LineSegments {\n\n\tconstructor( object ) {\n\n\t\tconst bones = getBoneList( object );\n\n\t\tconst geometry = new BufferGeometry();\n\n\t\tconst vertices = [];\n\t\tconst colors = [];\n\n\t\tconst color1 = new Color( 0, 0, 1 );\n\t\tconst color2 = new Color( 0, 1, 0 );\n\n\t\tfor ( let i = 0; i < bones.length; i ++ ) {\n\n\t\t\tconst bone = bones[ i ];\n\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tcolors.push( color1.r, color1.g, color1.b );\n\t\t\t\tcolors.push( color2.r, color2.g, color2.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, depthTest: false, depthWrite: false, toneMapped: false, transparent: true } );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'SkeletonHelper';\n\t\tthis.isSkeletonHelper = true;\n\n\t\tthis.root = object;\n\t\tthis.bones = bones;\n\n\t\tthis.matrix = object.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tconst bones = this.bones;\n\n\t\tconst geometry = this.geometry;\n\t\tconst position = geometry.getAttribute( 'position' );\n\n\t\t_matrixWorldInv.copy( this.root.matrixWorld ).invert();\n\n\t\tfor ( let i = 0, j = 0; i < bones.length; i ++ ) {\n\n\t\t\tconst bone = bones[ i ];\n\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.matrixWorld );\n\t\t\t\t_vector$2.setFromMatrixPosition( _boneMatrix );\n\t\t\t\tposition.setXYZ( j, _vector$2.x, _vector$2.y, _vector$2.z );\n\n\t\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.parent.matrixWorld );\n\t\t\t\t_vector$2.setFromMatrixPosition( _boneMatrix );\n\t\t\t\tposition.setXYZ( j + 1, _vector$2.x, _vector$2.y, _vector$2.z );\n\n\t\t\t\tj += 2;\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t}\n\n}\n\n\nfunction getBoneList( object ) {\n\n\tconst boneList = [];\n\n\tif ( object && object.isBone ) {\n\n\t\tboneList.push( object );\n\n\t}\n\n\tfor ( let i = 0; i < object.children.length; i ++ ) {\n\n\t\tboneList.push.apply( boneList, getBoneList( object.children[ i ] ) );\n\n\t}\n\n\treturn boneList;\n\n}\n\nclass PointLightHelper extends Mesh {\n\n\tconstructor( light, sphereSize, color ) {\n\n\t\tconst geometry = new SphereGeometry( sphereSize, 4, 2 );\n\t\tconst material = new MeshBasicMaterial( { wireframe: true, fog: false, toneMapped: false } );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.color = color;\n\n\t\tthis.type = 'PointLightHelper';\n\n\t\tthis.matrix = this.light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\n\t\t/*\n\t// TODO: delete this comment?\n\tconst distanceGeometry = new THREE.IcosahedronBufferGeometry( 1, 2 );\n\tconst distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\n\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\n\tconst d = light.distance;\n\n\tif ( d === 0.0 ) {\n\n\t\tthis.lightDistance.visible = false;\n\n\t} else {\n\n\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t}\n\n\tthis.add( this.lightDistance );\n\t*/\n\n\t}\n\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n\tupdate() {\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.material.color.copy( this.light.color );\n\n\t\t}\n\n\t\t/*\n\t\tconst d = this.light.distance;\n\n\t\tif ( d === 0.0 ) {\n\n\t\t\tthis.lightDistance.visible = false;\n\n\t\t} else {\n\n\t\t\tthis.lightDistance.visible = true;\n\t\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t\t}\n\t\t*/\n\n\t}\n\n}\n\nconst _vector$1 = /*@__PURE__*/ new Vector3();\nconst _color1 = /*@__PURE__*/ new Color();\nconst _color2 = /*@__PURE__*/ new Color();\n\nclass HemisphereLightHelper extends Object3D {\n\n\tconstructor( light, size, color ) {\n\n\t\tsuper();\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tconst geometry = new OctahedronGeometry( size );\n\t\tgeometry.rotateY( Math.PI * 0.5 );\n\n\t\tthis.material = new MeshBasicMaterial( { wireframe: true, fog: false, toneMapped: false } );\n\t\tif ( this.color === undefined ) this.material.vertexColors = true;\n\n\t\tconst position = geometry.getAttribute( 'position' );\n\t\tconst colors = new Float32Array( position.count * 3 );\n\n\t\tgeometry.setAttribute( 'color', new BufferAttribute( colors, 3 ) );\n\n\t\tthis.add( new Mesh( geometry, this.material ) );\n\n\t\tthis.update();\n\n\t}\n\n\tdispose() {\n\n\t\tthis.children[ 0 ].geometry.dispose();\n\t\tthis.children[ 0 ].material.dispose();\n\n\t}\n\n\tupdate() {\n\n\t\tconst mesh = this.children[ 0 ];\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tconst colors = mesh.geometry.getAttribute( 'color' );\n\n\t\t\t_color1.copy( this.light.color );\n\t\t\t_color2.copy( this.light.groundColor );\n\n\t\t\tfor ( let i = 0, l = colors.count; i < l; i ++ ) {\n\n\t\t\t\tconst color = ( i < ( l / 2 ) ) ? _color1 : _color2;\n\n\t\t\t\tcolors.setXYZ( i, color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t\tcolors.needsUpdate = true;\n\n\t\t}\n\n\t\tmesh.lookAt( _vector$1.setFromMatrixPosition( this.light.matrixWorld ).negate() );\n\n\t}\n\n}\n\nclass GridHelper extends LineSegments {\n\n\tconstructor( size = 10, divisions = 10, color1 = 0x444444, color2 = 0x888888 ) {\n\n\t\tcolor1 = new Color( color1 );\n\t\tcolor2 = new Color( color2 );\n\n\t\tconst center = divisions / 2;\n\t\tconst step = size / divisions;\n\t\tconst halfSize = size / 2;\n\n\t\tconst vertices = [], colors = [];\n\n\t\tfor ( let i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {\n\n\t\t\tvertices.push( - halfSize, 0, k, halfSize, 0, k );\n\t\t\tvertices.push( k, 0, - halfSize, k, 0, halfSize );\n\n\t\t\tconst color = i === center ? color1 : color2;\n\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\n\t\t}\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'GridHelper';\n\n\t}\n\n}\n\nclass PolarGridHelper extends LineSegments {\n\n\tconstructor( radius = 10, radials = 16, circles = 8, divisions = 64, color1 = 0x444444, color2 = 0x888888 ) {\n\n\t\tcolor1 = new Color( color1 );\n\t\tcolor2 = new Color( color2 );\n\n\t\tconst vertices = [];\n\t\tconst colors = [];\n\n\t\t// create the radials\n\n\t\tfor ( let i = 0; i <= radials; i ++ ) {\n\n\t\t\tconst v = ( i / radials ) * ( Math.PI * 2 );\n\n\t\t\tconst x = Math.sin( v ) * radius;\n\t\t\tconst z = Math.cos( v ) * radius;\n\n\t\t\tvertices.push( 0, 0, 0 );\n\t\t\tvertices.push( x, 0, z );\n\n\t\t\tconst color = ( i & 1 ) ? color1 : color2;\n\n\t\t\tcolors.push( color.r, color.g, color.b );\n\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t}\n\n\t\t// create the circles\n\n\t\tfor ( let i = 0; i <= circles; i ++ ) {\n\n\t\t\tconst color = ( i & 1 ) ? color1 : color2;\n\n\t\t\tconst r = radius - ( radius / circles * i );\n\n\t\t\tfor ( let j = 0; j < divisions; j ++ ) {\n\n\t\t\t\t// first vertex\n\n\t\t\t\tlet v = ( j / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tlet x = Math.sin( v ) * r;\n\t\t\t\tlet z = Math.cos( v ) * r;\n\n\t\t\t\tvertices.push( x, 0, z );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t\t// second vertex\n\n\t\t\t\tv = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tx = Math.sin( v ) * r;\n\t\t\t\tz = Math.cos( v ) * r;\n\n\t\t\t\tvertices.push( x, 0, z );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'PolarGridHelper';\n\n\t}\n\n}\n\nconst _v1 = /*@__PURE__*/ new Vector3();\nconst _v2 = /*@__PURE__*/ new Vector3();\nconst _v3 = /*@__PURE__*/ new Vector3();\n\nclass DirectionalLightHelper extends Object3D {\n\n\tconstructor( light, size, color ) {\n\n\t\tsuper();\n\t\tthis.light = light;\n\t\tthis.light.updateMatrixWorld();\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tif ( size === undefined ) size = 1;\n\n\t\tlet geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [\n\t\t\t- size, size, 0,\n\t\t\tsize, size, 0,\n\t\t\tsize, - size, 0,\n\t\t\t- size, - size, 0,\n\t\t\t- size, size, 0\n\t\t], 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { fog: false, toneMapped: false } );\n\n\t\tthis.lightPlane = new Line( geometry, material );\n\t\tthis.add( this.lightPlane );\n\n\t\tgeometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\n\n\t\tthis.targetLine = new Line( geometry, material );\n\t\tthis.add( this.targetLine );\n\n\t\tthis.update();\n\n\t}\n\n\tdispose() {\n\n\t\tthis.lightPlane.geometry.dispose();\n\t\tthis.lightPlane.material.dispose();\n\t\tthis.targetLine.geometry.dispose();\n\t\tthis.targetLine.material.dispose();\n\n\t}\n\n\tupdate() {\n\n\t\t_v1.setFromMatrixPosition( this.light.matrixWorld );\n\t\t_v2.setFromMatrixPosition( this.light.target.matrixWorld );\n\t\t_v3.subVectors( _v2, _v1 );\n\n\t\tthis.lightPlane.lookAt( _v2 );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.lightPlane.material.color.set( this.color );\n\t\t\tthis.targetLine.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.lightPlane.material.color.copy( this.light.color );\n\t\t\tthis.targetLine.material.color.copy( this.light.color );\n\n\t\t}\n\n\t\tthis.targetLine.lookAt( _v2 );\n\t\tthis.targetLine.scale.z = _v3.length();\n\n\t}\n\n}\n\nconst _vector = /*@__PURE__*/ new Vector3();\nconst _camera = /*@__PURE__*/ new Camera();\n\n/**\n *\t- shows frustum, line of sight and up of the camera\n *\t- suitable for fast updates\n * \t- based on frustum visualization in lightgl.js shadowmap example\n *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\n */\n\nclass CameraHelper extends LineSegments {\n\n\tconstructor( camera ) {\n\n\t\tconst geometry = new BufferGeometry();\n\t\tconst material = new LineBasicMaterial( { color: 0xffffff, vertexColors: true, toneMapped: false } );\n\n\t\tconst vertices = [];\n\t\tconst colors = [];\n\n\t\tconst pointMap = {};\n\n\t\t// colors\n\n\t\tconst colorFrustum = new Color( 0xffaa00 );\n\t\tconst colorCone = new Color( 0xff0000 );\n\t\tconst colorUp = new Color( 0x00aaff );\n\t\tconst colorTarget = new Color( 0xffffff );\n\t\tconst colorCross = new Color( 0x333333 );\n\n\t\t// near\n\n\t\taddLine( 'n1', 'n2', colorFrustum );\n\t\taddLine( 'n2', 'n4', colorFrustum );\n\t\taddLine( 'n4', 'n3', colorFrustum );\n\t\taddLine( 'n3', 'n1', colorFrustum );\n\n\t\t// far\n\n\t\taddLine( 'f1', 'f2', colorFrustum );\n\t\taddLine( 'f2', 'f4', colorFrustum );\n\t\taddLine( 'f4', 'f3', colorFrustum );\n\t\taddLine( 'f3', 'f1', colorFrustum );\n\n\t\t// sides\n\n\t\taddLine( 'n1', 'f1', colorFrustum );\n\t\taddLine( 'n2', 'f2', colorFrustum );\n\t\taddLine( 'n3', 'f3', colorFrustum );\n\t\taddLine( 'n4', 'f4', colorFrustum );\n\n\t\t// cone\n\n\t\taddLine( 'p', 'n1', colorCone );\n\t\taddLine( 'p', 'n2', colorCone );\n\t\taddLine( 'p', 'n3', colorCone );\n\t\taddLine( 'p', 'n4', colorCone );\n\n\t\t// up\n\n\t\taddLine( 'u1', 'u2', colorUp );\n\t\taddLine( 'u2', 'u3', colorUp );\n\t\taddLine( 'u3', 'u1', colorUp );\n\n\t\t// target\n\n\t\taddLine( 'c', 't', colorTarget );\n\t\taddLine( 'p', 'c', colorCross );\n\n\t\t// cross\n\n\t\taddLine( 'cn1', 'cn2', colorCross );\n\t\taddLine( 'cn3', 'cn4', colorCross );\n\n\t\taddLine( 'cf1', 'cf2', colorCross );\n\t\taddLine( 'cf3', 'cf4', colorCross );\n\n\t\tfunction addLine( a, b, color ) {\n\n\t\t\taddPoint( a, color );\n\t\t\taddPoint( b, color );\n\n\t\t}\n\n\t\tfunction addPoint( id, color ) {\n\n\t\t\tvertices.push( 0, 0, 0 );\n\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\tif ( pointMap[ id ] === undefined ) {\n\n\t\t\t\tpointMap[ id ] = [];\n\n\t\t\t}\n\n\t\t\tpointMap[ id ].push( ( vertices.length / 3 ) - 1 );\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'CameraHelper';\n\n\t\tthis.camera = camera;\n\t\tif ( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();\n\n\t\tthis.matrix = camera.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.pointMap = pointMap;\n\n\t\tthis.update();\n\n\t}\n\n\tupdate() {\n\n\t\tconst geometry = this.geometry;\n\t\tconst pointMap = this.pointMap;\n\n\t\tconst w = 1, h = 1;\n\n\t\t// we need just camera projection matrix inverse\n\t\t// world matrix must be identity\n\n\t\t_camera.projectionMatrixInverse.copy( this.camera.projectionMatrixInverse );\n\n\t\t// center / target\n\n\t\tsetPoint( 'c', pointMap, geometry, _camera, 0, 0, - 1 );\n\t\tsetPoint( 't', pointMap, geometry, _camera, 0, 0, 1 );\n\n\t\t// near\n\n\t\tsetPoint( 'n1', pointMap, geometry, _camera, - w, - h, - 1 );\n\t\tsetPoint( 'n2', pointMap, geometry, _camera, w, - h, - 1 );\n\t\tsetPoint( 'n3', pointMap, geometry, _camera, - w, h, - 1 );\n\t\tsetPoint( 'n4', pointMap, geometry, _camera, w, h, - 1 );\n\n\t\t// far\n\n\t\tsetPoint( 'f1', pointMap, geometry, _camera, - w, - h, 1 );\n\t\tsetPoint( 'f2', pointMap, geometry, _camera, w, - h, 1 );\n\t\tsetPoint( 'f3', pointMap, geometry, _camera, - w, h, 1 );\n\t\tsetPoint( 'f4', pointMap, geometry, _camera, w, h, 1 );\n\n\t\t// up\n\n\t\tsetPoint( 'u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, - 1 );\n\t\tsetPoint( 'u2', pointMap, geometry, _camera, - w * 0.7, h * 1.1, - 1 );\n\t\tsetPoint( 'u3', pointMap, geometry, _camera, 0, h * 2, - 1 );\n\n\t\t// cross\n\n\t\tsetPoint( 'cf1', pointMap, geometry, _camera, - w, 0, 1 );\n\t\tsetPoint( 'cf2', pointMap, geometry, _camera, w, 0, 1 );\n\t\tsetPoint( 'cf3', pointMap, geometry, _camera, 0, - h, 1 );\n\t\tsetPoint( 'cf4', pointMap, geometry, _camera, 0, h, 1 );\n\n\t\tsetPoint( 'cn1', pointMap, geometry, _camera, - w, 0, - 1 );\n\t\tsetPoint( 'cn2', pointMap, geometry, _camera, w, 0, - 1 );\n\t\tsetPoint( 'cn3', pointMap, geometry, _camera, 0, - h, - 1 );\n\t\tsetPoint( 'cn4', pointMap, geometry, _camera, 0, h, - 1 );\n\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\n\nfunction setPoint( point, pointMap, geometry, camera, x, y, z ) {\n\n\t_vector.set( x, y, z ).unproject( camera );\n\n\tconst points = pointMap[ point ];\n\n\tif ( points !== undefined ) {\n\n\t\tconst position = geometry.getAttribute( 'position' );\n\n\t\tfor ( let i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\tposition.setXYZ( points[ i ], _vector.x, _vector.y, _vector.z );\n\n\t\t}\n\n\t}\n\n}\n\nconst _box = /*@__PURE__*/ new Box3();\n\nclass BoxHelper extends LineSegments {\n\n\tconstructor( object, color = 0xffff00 ) {\n\n\t\tconst indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\t\tconst positions = new Float32Array( 8 * 3 );\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\t\tgeometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\n\t\tsuper( geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\n\t\tthis.object = object;\n\t\tthis.type = 'BoxHelper';\n\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\t}\n\n\tupdate( object ) {\n\n\t\tif ( object !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );\n\n\t\t}\n\n\t\tif ( this.object !== undefined ) {\n\n\t\t\t_box.setFromObject( this.object );\n\n\t\t}\n\n\t\tif ( _box.isEmpty() ) return;\n\n\t\tconst min = _box.min;\n\t\tconst max = _box.max;\n\n\t\t/*\n\t\t\t5____4\n\t\t1/___0/|\n\t\t| 6__|_7\n\t\t2/___3/\n\n\t\t0: max.x, max.y, max.z\n\t\t1: min.x, max.y, max.z\n\t\t2: min.x, min.y, max.z\n\t\t3: max.x, min.y, max.z\n\t\t4: max.x, max.y, min.z\n\t\t5: min.x, max.y, min.z\n\t\t6: min.x, min.y, min.z\n\t\t7: max.x, min.y, min.z\n\t\t*/\n\n\t\tconst position = this.geometry.attributes.position;\n\t\tconst array = position.array;\n\n\t\tarray[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;\n\t\tarray[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;\n\t\tarray[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;\n\t\tarray[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\n\t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\n\t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\n\t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\n\t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\n\n\t\tposition.needsUpdate = true;\n\n\t\tthis.geometry.computeBoundingSphere();\n\n\n\t}\n\n\tsetFromObject( object ) {\n\n\t\tthis.object = object;\n\t\tthis.update();\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tLineSegments.prototype.copy.call( this, source );\n\n\t\tthis.object = source.object;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass Box3Helper extends LineSegments {\n\n\tconstructor( box, color = 0xffff00 ) {\n\n\t\tconst indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\n\t\tconst positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];\n\n\t\tconst geometry = new BufferGeometry();\n\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\tsuper( geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\n\t\tthis.box = box;\n\n\t\tthis.type = 'Box3Helper';\n\n\t\tthis.geometry.computeBoundingSphere();\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tconst box = this.box;\n\n\t\tif ( box.isEmpty() ) return;\n\n\t\tbox.getCenter( this.position );\n\n\t\tbox.getSize( this.scale );\n\n\t\tthis.scale.multiplyScalar( 0.5 );\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t}\n\n}\n\nclass PlaneHelper extends Line {\n\n\tconstructor( plane, size = 1, hex = 0xffff00 ) {\n\n\t\tconst color = hex;\n\n\t\tconst positions = [ 1, - 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0 ];\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\t\tgeometry.computeBoundingSphere();\n\n\t\tsuper( geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\n\t\tthis.type = 'PlaneHelper';\n\n\t\tthis.plane = plane;\n\n\t\tthis.size = size;\n\n\t\tconst positions2 = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, 1, 1, - 1, - 1, 1, 1, - 1, 1 ];\n\n\t\tconst geometry2 = new BufferGeometry();\n\t\tgeometry2.setAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );\n\t\tgeometry2.computeBoundingSphere();\n\n\t\tthis.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false, toneMapped: false } ) ) );\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tlet scale = - this.plane.constant;\n\n\t\tif ( Math.abs( scale ) < 1e-8 ) scale = 1e-8; // sign does not matter\n\n\t\tthis.scale.set( 0.5 * this.size, 0.5 * this.size, scale );\n\n\t\tthis.children[ 0 ].material.side = ( scale < 0 ) ? BackSide : FrontSide; // renderer flips side when determinant < 0; flipping not wanted here\n\n\t\tthis.lookAt( this.plane.normal );\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t}\n\n}\n\nconst _axis = /*@__PURE__*/ new Vector3();\nlet _lineGeometry, _coneGeometry;\n\nclass ArrowHelper extends Object3D {\n\n\t// dir is assumed to be normalized\n\n\tconstructor( dir = new Vector3( 0, 0, 1 ), origin = new Vector3( 0, 0, 0 ), length = 1, color = 0xffff00, headLength = length * 0.2, headWidth = headLength * 0.2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'ArrowHelper';\n\n\t\tif ( _lineGeometry === undefined ) {\n\n\t\t\t_lineGeometry = new BufferGeometry();\n\t\t\t_lineGeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\n\n\t\t\t_coneGeometry = new CylinderGeometry( 0, 0.5, 1, 5, 1 );\n\t\t\t_coneGeometry.translate( 0, - 0.5, 0 );\n\n\t\t}\n\n\t\tthis.position.copy( origin );\n\n\t\tthis.line = new Line( _lineGeometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\t\tthis.line.matrixAutoUpdate = false;\n\t\tthis.add( this.line );\n\n\t\tthis.cone = new Mesh( _coneGeometry, new MeshBasicMaterial( { color: color, toneMapped: false } ) );\n\t\tthis.cone.matrixAutoUpdate = false;\n\t\tthis.add( this.cone );\n\n\t\tthis.setDirection( dir );\n\t\tthis.setLength( length, headLength, headWidth );\n\n\t}\n\n\tsetDirection( dir ) {\n\n\t\t// dir is assumed to be normalized\n\n\t\tif ( dir.y > 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 0, 0, 0, 1 );\n\n\t\t} else if ( dir.y < - 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 1, 0, 0, 0 );\n\n\t\t} else {\n\n\t\t\t_axis.set( dir.z, 0, - dir.x ).normalize();\n\n\t\t\tconst radians = Math.acos( dir.y );\n\n\t\t\tthis.quaternion.setFromAxisAngle( _axis, radians );\n\n\t\t}\n\n\t}\n\n\tsetLength( length, headLength = length * 0.2, headWidth = headLength * 0.2 ) {\n\n\t\tthis.line.scale.set( 1, Math.max( 0.0001, length - headLength ), 1 ); // see #17458\n\t\tthis.line.updateMatrix();\n\n\t\tthis.cone.scale.set( headWidth, headLength, headWidth );\n\t\tthis.cone.position.y = length;\n\t\tthis.cone.updateMatrix();\n\n\t}\n\n\tsetColor( color ) {\n\n\t\tthis.line.material.color.set( color );\n\t\tthis.cone.material.color.set( color );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source, false );\n\n\t\tthis.line.copy( source.line );\n\t\tthis.cone.copy( source.cone );\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass AxesHelper extends LineSegments {\n\n\tconstructor( size = 1 ) {\n\n\t\tconst vertices = [\n\t\t\t0, 0, 0,\tsize, 0, 0,\n\t\t\t0, 0, 0,\t0, size, 0,\n\t\t\t0, 0, 0,\t0, 0, size\n\t\t];\n\n\t\tconst colors = [\n\t\t\t1, 0, 0,\t1, 0.6, 0,\n\t\t\t0, 1, 0,\t0.6, 1, 0,\n\t\t\t0, 0, 1,\t0, 0.6, 1\n\t\t];\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'AxesHelper';\n\n\t}\n\n\tsetColors( xAxisColor, yAxisColor, zAxisColor ) {\n\n\t\tconst color = new Color();\n\t\tconst array = this.geometry.attributes.color.array;\n\n\t\tcolor.set( xAxisColor );\n\t\tcolor.toArray( array, 0 );\n\t\tcolor.toArray( array, 3 );\n\n\t\tcolor.set( yAxisColor );\n\t\tcolor.toArray( array, 6 );\n\t\tcolor.toArray( array, 9 );\n\n\t\tcolor.set( zAxisColor );\n\t\tcolor.toArray( array, 12 );\n\t\tcolor.toArray( array, 15 );\n\n\t\tthis.geometry.attributes.color.needsUpdate = true;\n\n\t\treturn this;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\nclass ShapePath {\n\n\tconstructor() {\n\n\t\tthis.type = 'ShapePath';\n\n\t\tthis.color = new Color();\n\n\t\tthis.subPaths = [];\n\t\tthis.currentPath = null;\n\n\t}\n\n\tmoveTo( x, y ) {\n\n\t\tthis.currentPath = new Path();\n\t\tthis.subPaths.push( this.currentPath );\n\t\tthis.currentPath.moveTo( x, y );\n\n\t\treturn this;\n\n\t}\n\n\tlineTo( x, y ) {\n\n\t\tthis.currentPath.lineTo( x, y );\n\n\t\treturn this;\n\n\t}\n\n\tquadraticCurveTo( aCPx, aCPy, aX, aY ) {\n\n\t\tthis.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );\n\n\t\treturn this;\n\n\t}\n\n\tbezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\tthis.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );\n\n\t\treturn this;\n\n\t}\n\n\tsplineThru( pts ) {\n\n\t\tthis.currentPath.splineThru( pts );\n\n\t\treturn this;\n\n\t}\n\n\ttoShapes( isCCW, noHoles ) {\n\n\t\tfunction toShapesNoHoles( inSubpaths ) {\n\n\t\t\tconst shapes = [];\n\n\t\t\tfor ( let i = 0, l = inSubpaths.length; i < l; i ++ ) {\n\n\t\t\t\tconst tmpPath = inSubpaths[ i ];\n\n\t\t\t\tconst tmpShape = new Shape();\n\t\t\t\ttmpShape.curves = tmpPath.curves;\n\n\t\t\t\tshapes.push( tmpShape );\n\n\t\t\t}\n\n\t\t\treturn shapes;\n\n\t\t}\n\n\t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\n\n\t\t\tconst polyLen = inPolygon.length;\n\n\t\t\t// inPt on polygon contour => immediate success    or\n\t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t\t//  with the horizontal line through inPt, left of inPt\n\t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\n\t\t\tlet inside = false;\n\t\t\tfor ( let p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\n\n\t\t\t\tlet edgeLowPt = inPolygon[ p ];\n\t\t\t\tlet edgeHighPt = inPolygon[ q ];\n\n\t\t\t\tlet edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\t\tlet edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n\t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\n\n\t\t\t\t\t// not parallel\n\t\t\t\t\tif ( edgeDy < 0 ) {\n\n\t\t\t\t\t\tedgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;\n\t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\tcontinue;\n\n\t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\n\n\t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\n\t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\tcontinue;\n\t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// parallel or collinear\n\t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\tcontinue;\t\t\t// parallel\n\t\t\t\t\t// edge lies on the same horizontal line as inPt\n\t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\n\t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\treturn\ttrue;\t// inPt: Point on contour !\n\t\t\t\t\t// continue;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn\tinside;\n\n\t\t}\n\n\t\tconst isClockWise = ShapeUtils.isClockWise;\n\n\t\tconst subPaths = this.subPaths;\n\t\tif ( subPaths.length === 0 ) return [];\n\n\t\tif ( noHoles === true )\treturn\ttoShapesNoHoles( subPaths );\n\n\n\t\tlet solid, tmpPath, tmpShape;\n\t\tconst shapes = [];\n\n\t\tif ( subPaths.length === 1 ) {\n\n\t\t\ttmpPath = subPaths[ 0 ];\n\t\t\ttmpShape = new Shape();\n\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\tshapes.push( tmpShape );\n\t\t\treturn shapes;\n\n\t\t}\n\n\t\tlet holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\n\t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\n\n\t\t// console.log(\"Holes first\", holesFirst);\n\n\t\tconst betterShapeHoles = [];\n\t\tconst newShapes = [];\n\t\tlet newShapeHoles = [];\n\t\tlet mainIdx = 0;\n\t\tlet tmpPoints;\n\n\t\tnewShapes[ mainIdx ] = undefined;\n\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\tfor ( let i = 0, l = subPaths.length; i < l; i ++ ) {\n\n\t\t\ttmpPath = subPaths[ i ];\n\t\t\ttmpPoints = tmpPath.getPoints();\n\t\t\tsolid = isClockWise( tmpPoints );\n\t\t\tsolid = isCCW ? ! solid : solid;\n\n\t\t\tif ( solid ) {\n\n\t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\tmainIdx ++;\n\n\t\t\t\tnewShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };\n\t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\n\n\t\t\t\tif ( holesFirst )\tmainIdx ++;\n\t\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\t\t//console.log('cw', i);\n\n\t\t\t} else {\n\n\t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\n\n\t\t\t\t//console.log('ccw', i);\n\n\t\t\t}\n\n\t\t}\n\n\t\t// only Holes? -> probably all Shapes with wrong orientation\n\t\tif ( ! newShapes[ 0 ] )\treturn\ttoShapesNoHoles( subPaths );\n\n\n\t\tif ( newShapes.length > 1 ) {\n\n\t\t\tlet ambiguous = false;\n\t\t\tconst toChange = [];\n\n\t\t\tfor ( let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\tbetterShapeHoles[ sIdx ] = [];\n\n\t\t\t}\n\n\t\t\tfor ( let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\tconst sho = newShapeHoles[ sIdx ];\n\n\t\t\t\tfor ( let hIdx = 0; hIdx < sho.length; hIdx ++ ) {\n\n\t\t\t\t\tconst ho = sho[ hIdx ];\n\t\t\t\t\tlet hole_unassigned = true;\n\n\t\t\t\t\tfor ( let s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\n\n\t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\n\n\t\t\t\t\t\t\tif ( sIdx !== s2Idx )\ttoChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );\n\t\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tambiguous = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t// console.log(\"ambiguous: \", ambiguous);\n\n\t\t\tif ( toChange.length > 0 ) {\n\n\t\t\t\t// console.log(\"to change: \", toChange);\n\t\t\t\tif ( ! ambiguous )\tnewShapeHoles = betterShapeHoles;\n\n\t\t\t}\n\n\t\t}\n\n\t\tlet tmpHoles;\n\n\t\tfor ( let i = 0, il = newShapes.length; i < il; i ++ ) {\n\n\t\t\ttmpShape = newShapes[ i ].s;\n\t\t\tshapes.push( tmpShape );\n\t\t\ttmpHoles = newShapeHoles[ i ];\n\n\t\t\tfor ( let j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\n\n\t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//console.log(\"shape\", shapes);\n\n\t\treturn shapes;\n\n\t}\n\n}\n\nconst _floatView = new Float32Array( 1 );\nconst _int32View = new Int32Array( _floatView.buffer );\n\nclass DataUtils {\n\n\t// Converts float32 to float16 (stored as uint16 value).\n\n\tstatic toHalfFloat( val ) {\n\n\t\tif ( val > 65504 ) {\n\n\t\t\tconsole.warn( 'THREE.DataUtils.toHalfFloat(): value exceeds 65504.' );\n\n\t\t\tval = 65504; // maximum representable value in float16\n\n\t\t}\n\n\t\t// Source: http://gamedev.stackexchange.com/questions/17326/conversion-of-a-number-from-single-precision-floating-point-representation-to-a/17410#17410\n\n\t\t/* This method is faster than the OpenEXR implementation (very often\n\t\t* used, eg. in Ogre), with the additional benefit of rounding, inspired\n\t\t* by James Tursa?s half-precision code. */\n\n\t\t_floatView[ 0 ] = val;\n\t\tconst x = _int32View[ 0 ];\n\n\t\tlet bits = ( x >> 16 ) & 0x8000; /* Get the sign */\n\t\tlet m = ( x >> 12 ) & 0x07ff; /* Keep one extra bit for rounding */\n\t\tconst e = ( x >> 23 ) & 0xff; /* Using int is faster here */\n\n\t\t/* If zero, or denormal, or exponent underflows too much for a denormal\n\t\t\t* half, return signed zero. */\n\t\tif ( e < 103 ) return bits;\n\n\t\t/* If NaN, return NaN. If Inf or exponent overflow, return Inf. */\n\t\tif ( e > 142 ) {\n\n\t\t\tbits |= 0x7c00;\n\t\t\t/* If exponent was 0xff and one mantissa bit was set, it means NaN,\n\t\t\t\t\t\t* not Inf, so make sure we set one mantissa bit too. */\n\t\t\tbits |= ( ( e == 255 ) ? 0 : 1 ) && ( x & 0x007fffff );\n\t\t\treturn bits;\n\n\t\t}\n\n\t\t/* If exponent underflows but not too much, return a denormal */\n\t\tif ( e < 113 ) {\n\n\t\t\tm |= 0x0800;\n\t\t\t/* Extra rounding may overflow and set mantissa to 0 and exponent\n\t\t\t\t* to 1, which is OK. */\n\t\t\tbits |= ( m >> ( 114 - e ) ) + ( ( m >> ( 113 - e ) ) & 1 );\n\t\t\treturn bits;\n\n\t\t}\n\n\t\tbits |= ( ( e - 112 ) << 10 ) | ( m >> 1 );\n\t\t/* Extra rounding. An overflow will set mantissa to 0 and increment\n\t\t\t* the exponent, which is OK. */\n\t\tbits += m & 1;\n\t\treturn bits;\n\n\t}\n\n}\n\nconst LineStrip = 0;\nconst LinePieces = 1;\nconst NoColors = 0;\nconst FaceColors = 1;\nconst VertexColors = 2;\n\nfunction MeshFaceMaterial( materials ) {\n\n\tconsole.warn( 'THREE.MeshFaceMaterial has been removed. Use an Array instead.' );\n\treturn materials;\n\n}\n\nfunction MultiMaterial( materials = [] ) {\n\n\tconsole.warn( 'THREE.MultiMaterial has been removed. Use an Array instead.' );\n\tmaterials.isMultiMaterial = true;\n\tmaterials.materials = materials;\n\tmaterials.clone = function () {\n\n\t\treturn materials.slice();\n\n\t};\n\n\treturn materials;\n\n}\n\nfunction PointCloud( geometry, material ) {\n\n\tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\n\treturn new Points( geometry, material );\n\n}\n\nfunction Particle( material ) {\n\n\tconsole.warn( 'THREE.Particle has been renamed to THREE.Sprite.' );\n\treturn new Sprite( material );\n\n}\n\nfunction ParticleSystem( geometry, material ) {\n\n\tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\n\treturn new Points( geometry, material );\n\n}\n\nfunction PointCloudMaterial( parameters ) {\n\n\tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\n\treturn new PointsMaterial( parameters );\n\n}\n\nfunction ParticleBasicMaterial( parameters ) {\n\n\tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\n\treturn new PointsMaterial( parameters );\n\n}\n\nfunction ParticleSystemMaterial( parameters ) {\n\n\tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\n\treturn new PointsMaterial( parameters );\n\n}\n\nfunction Vertex( x, y, z ) {\n\n\tconsole.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );\n\treturn new Vector3( x, y, z );\n\n}\n\n//\n\nfunction DynamicBufferAttribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead.' );\n\treturn new BufferAttribute( array, itemSize ).setUsage( DynamicDrawUsage );\n\n}\n\nfunction Int8Attribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.' );\n\treturn new Int8BufferAttribute( array, itemSize );\n\n}\n\nfunction Uint8Attribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.' );\n\treturn new Uint8BufferAttribute( array, itemSize );\n\n}\n\nfunction Uint8ClampedAttribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.' );\n\treturn new Uint8ClampedBufferAttribute( array, itemSize );\n\n}\n\nfunction Int16Attribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.' );\n\treturn new Int16BufferAttribute( array, itemSize );\n\n}\n\nfunction Uint16Attribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.' );\n\treturn new Uint16BufferAttribute( array, itemSize );\n\n}\n\nfunction Int32Attribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.' );\n\treturn new Int32BufferAttribute( array, itemSize );\n\n}\n\nfunction Uint32Attribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.' );\n\treturn new Uint32BufferAttribute( array, itemSize );\n\n}\n\nfunction Float32Attribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.' );\n\treturn new Float32BufferAttribute( array, itemSize );\n\n}\n\nfunction Float64Attribute( array, itemSize ) {\n\n\tconsole.warn( 'THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.' );\n\treturn new Float64BufferAttribute( array, itemSize );\n\n}\n\n//\n\nCurve.create = function ( construct, getPoint ) {\n\n\tconsole.log( 'THREE.Curve.create() has been deprecated' );\n\n\tconstruct.prototype = Object.create( Curve.prototype );\n\tconstruct.prototype.constructor = construct;\n\tconstruct.prototype.getPoint = getPoint;\n\n\treturn construct;\n\n};\n\n//\n\nPath.prototype.fromPoints = function ( points ) {\n\n\tconsole.warn( 'THREE.Path: .fromPoints() has been renamed to .setFromPoints().' );\n\treturn this.setFromPoints( points );\n\n};\n\n//\n\nfunction AxisHelper( size ) {\n\n\tconsole.warn( 'THREE.AxisHelper has been renamed to THREE.AxesHelper.' );\n\treturn new AxesHelper( size );\n\n}\n\nfunction BoundingBoxHelper( object, color ) {\n\n\tconsole.warn( 'THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.' );\n\treturn new BoxHelper( object, color );\n\n}\n\nfunction EdgesHelper( object, hex ) {\n\n\tconsole.warn( 'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.' );\n\treturn new LineSegments( new EdgesGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\n}\n\nGridHelper.prototype.setColors = function () {\n\n\tconsole.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );\n\n};\n\nSkeletonHelper.prototype.update = function () {\n\n\tconsole.error( 'THREE.SkeletonHelper: update() no longer needs to be called.' );\n\n};\n\nfunction WireframeHelper( object, hex ) {\n\n\tconsole.warn( 'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.' );\n\treturn new LineSegments( new WireframeGeometry( object.geometry ), new LineBasicMaterial( { color: hex !== undefined ? hex : 0xffffff } ) );\n\n}\n\n//\n\nLoader.prototype.extractUrlBase = function ( url ) {\n\n\tconsole.warn( 'THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.' );\n\treturn LoaderUtils.extractUrlBase( url );\n\n};\n\nLoader.Handlers = {\n\n\tadd: function ( /* regex, loader */ ) {\n\n\t\tconsole.error( 'THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.' );\n\n\t},\n\n\tget: function ( /* file */ ) {\n\n\t\tconsole.error( 'THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.' );\n\n\t}\n\n};\n\nfunction XHRLoader( manager ) {\n\n\tconsole.warn( 'THREE.XHRLoader has been renamed to THREE.FileLoader.' );\n\treturn new FileLoader( manager );\n\n}\n\nfunction BinaryTextureLoader( manager ) {\n\n\tconsole.warn( 'THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.' );\n\treturn new DataTextureLoader( manager );\n\n}\n\n//\n\nBox2.prototype.center = function ( optionalTarget ) {\n\n\tconsole.warn( 'THREE.Box2: .center() has been renamed to .getCenter().' );\n\treturn this.getCenter( optionalTarget );\n\n};\n\nBox2.prototype.empty = function () {\n\n\tconsole.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );\n\treturn this.isEmpty();\n\n};\n\nBox2.prototype.isIntersectionBox = function ( box ) {\n\n\tconsole.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\treturn this.intersectsBox( box );\n\n};\n\nBox2.prototype.size = function ( optionalTarget ) {\n\n\tconsole.warn( 'THREE.Box2: .size() has been renamed to .getSize().' );\n\treturn this.getSize( optionalTarget );\n\n};\n\n//\n\nBox3.prototype.center = function ( optionalTarget ) {\n\n\tconsole.warn( 'THREE.Box3: .center() has been renamed to .getCenter().' );\n\treturn this.getCenter( optionalTarget );\n\n};\n\nBox3.prototype.empty = function () {\n\n\tconsole.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );\n\treturn this.isEmpty();\n\n};\n\nBox3.prototype.isIntersectionBox = function ( box ) {\n\n\tconsole.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\treturn this.intersectsBox( box );\n\n};\n\nBox3.prototype.isIntersectionSphere = function ( sphere ) {\n\n\tconsole.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\treturn this.intersectsSphere( sphere );\n\n};\n\nBox3.prototype.size = function ( optionalTarget ) {\n\n\tconsole.warn( 'THREE.Box3: .size() has been renamed to .getSize().' );\n\treturn this.getSize( optionalTarget );\n\n};\n\n//\n\nSphere.prototype.empty = function () {\n\n\tconsole.warn( 'THREE.Sphere: .empty() has been renamed to .isEmpty().' );\n\treturn this.isEmpty();\n\n};\n\n//\n\nFrustum.prototype.setFromMatrix = function ( m ) {\n\n\tconsole.warn( 'THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().' );\n\treturn this.setFromProjectionMatrix( m );\n\n};\n\n//\n\nLine3.prototype.center = function ( optionalTarget ) {\n\n\tconsole.warn( 'THREE.Line3: .center() has been renamed to .getCenter().' );\n\treturn this.getCenter( optionalTarget );\n\n};\n\n//\n\nMatrix3.prototype.flattenToArrayOffset = function ( array, offset ) {\n\n\tconsole.warn( 'THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.' );\n\treturn this.toArray( array, offset );\n\n};\n\nMatrix3.prototype.multiplyVector3 = function ( vector ) {\n\n\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\n\treturn vector.applyMatrix3( this );\n\n};\n\nMatrix3.prototype.multiplyVector3Array = function ( /* a */ ) {\n\n\tconsole.error( 'THREE.Matrix3: .multiplyVector3Array() has been removed.' );\n\n};\n\nMatrix3.prototype.applyToBufferAttribute = function ( attribute ) {\n\n\tconsole.warn( 'THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.' );\n\treturn attribute.applyMatrix3( this );\n\n};\n\nMatrix3.prototype.applyToVector3Array = function ( /* array, offset, length */ ) {\n\n\tconsole.error( 'THREE.Matrix3: .applyToVector3Array() has been removed.' );\n\n};\n\nMatrix3.prototype.getInverse = function ( matrix ) {\n\n\tconsole.warn( 'THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.' );\n\treturn this.copy( matrix ).invert();\n\n};\n\n//\n\nMatrix4.prototype.extractPosition = function ( m ) {\n\n\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\n\treturn this.copyPosition( m );\n\n};\n\nMatrix4.prototype.flattenToArrayOffset = function ( array, offset ) {\n\n\tconsole.warn( 'THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.' );\n\treturn this.toArray( array, offset );\n\n};\n\nMatrix4.prototype.getPosition = function () {\n\n\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\n\treturn new Vector3().setFromMatrixColumn( this, 3 );\n\n};\n\nMatrix4.prototype.setRotationFromQuaternion = function ( q ) {\n\n\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\n\treturn this.makeRotationFromQuaternion( q );\n\n};\n\nMatrix4.prototype.multiplyToArray = function () {\n\n\tconsole.warn( 'THREE.Matrix4: .multiplyToArray() has been removed.' );\n\n};\n\nMatrix4.prototype.multiplyVector3 = function ( vector ) {\n\n\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\treturn vector.applyMatrix4( this );\n\n};\n\nMatrix4.prototype.multiplyVector4 = function ( vector ) {\n\n\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\treturn vector.applyMatrix4( this );\n\n};\n\nMatrix4.prototype.multiplyVector3Array = function ( /* a */ ) {\n\n\tconsole.error( 'THREE.Matrix4: .multiplyVector3Array() has been removed.' );\n\n};\n\nMatrix4.prototype.rotateAxis = function ( v ) {\n\n\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\n\tv.transformDirection( this );\n\n};\n\nMatrix4.prototype.crossVector = function ( vector ) {\n\n\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\n\treturn vector.applyMatrix4( this );\n\n};\n\nMatrix4.prototype.translate = function () {\n\n\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\n\n};\n\nMatrix4.prototype.rotateX = function () {\n\n\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\n\n};\n\nMatrix4.prototype.rotateY = function () {\n\n\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\n\n};\n\nMatrix4.prototype.rotateZ = function () {\n\n\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\n\n};\n\nMatrix4.prototype.rotateByAxis = function () {\n\n\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\n\n};\n\nMatrix4.prototype.applyToBufferAttribute = function ( attribute ) {\n\n\tconsole.warn( 'THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.' );\n\treturn attribute.applyMatrix4( this );\n\n};\n\nMatrix4.prototype.applyToVector3Array = function ( /* array, offset, length */ ) {\n\n\tconsole.error( 'THREE.Matrix4: .applyToVector3Array() has been removed.' );\n\n};\n\nMatrix4.prototype.makeFrustum = function ( left, right, bottom, top, near, far ) {\n\n\tconsole.warn( 'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.' );\n\treturn this.makePerspective( left, right, top, bottom, near, far );\n\n};\n\nMatrix4.prototype.getInverse = function ( matrix ) {\n\n\tconsole.warn( 'THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.' );\n\treturn this.copy( matrix ).invert();\n\n};\n\n//\n\nPlane.prototype.isIntersectionLine = function ( line ) {\n\n\tconsole.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );\n\treturn this.intersectsLine( line );\n\n};\n\n//\n\nQuaternion.prototype.multiplyVector3 = function ( vector ) {\n\n\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\n\treturn vector.applyQuaternion( this );\n\n};\n\nQuaternion.prototype.inverse = function ( ) {\n\n\tconsole.warn( 'THREE.Quaternion: .inverse() has been renamed to invert().' );\n\treturn this.invert();\n\n};\n\n//\n\nRay.prototype.isIntersectionBox = function ( box ) {\n\n\tconsole.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );\n\treturn this.intersectsBox( box );\n\n};\n\nRay.prototype.isIntersectionPlane = function ( plane ) {\n\n\tconsole.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );\n\treturn this.intersectsPlane( plane );\n\n};\n\nRay.prototype.isIntersectionSphere = function ( sphere ) {\n\n\tconsole.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\n\treturn this.intersectsSphere( sphere );\n\n};\n\n//\n\nTriangle.prototype.area = function () {\n\n\tconsole.warn( 'THREE.Triangle: .area() has been renamed to .getArea().' );\n\treturn this.getArea();\n\n};\n\nTriangle.prototype.barycoordFromPoint = function ( point, target ) {\n\n\tconsole.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );\n\treturn this.getBarycoord( point, target );\n\n};\n\nTriangle.prototype.midpoint = function ( target ) {\n\n\tconsole.warn( 'THREE.Triangle: .midpoint() has been renamed to .getMidpoint().' );\n\treturn this.getMidpoint( target );\n\n};\n\nTriangle.prototypenormal = function ( target ) {\n\n\tconsole.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );\n\treturn this.getNormal( target );\n\n};\n\nTriangle.prototype.plane = function ( target ) {\n\n\tconsole.warn( 'THREE.Triangle: .plane() has been renamed to .getPlane().' );\n\treturn this.getPlane( target );\n\n};\n\nTriangle.barycoordFromPoint = function ( point, a, b, c, target ) {\n\n\tconsole.warn( 'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().' );\n\treturn Triangle.getBarycoord( point, a, b, c, target );\n\n};\n\nTriangle.normal = function ( a, b, c, target ) {\n\n\tconsole.warn( 'THREE.Triangle: .normal() has been renamed to .getNormal().' );\n\treturn Triangle.getNormal( a, b, c, target );\n\n};\n\n//\n\nShape.prototype.extractAllPoints = function ( divisions ) {\n\n\tconsole.warn( 'THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.' );\n\treturn this.extractPoints( divisions );\n\n};\n\nShape.prototype.extrude = function ( options ) {\n\n\tconsole.warn( 'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.' );\n\treturn new ExtrudeGeometry( this, options );\n\n};\n\nShape.prototype.makeGeometry = function ( options ) {\n\n\tconsole.warn( 'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.' );\n\treturn new ShapeGeometry( this, options );\n\n};\n\n//\n\nVector2.prototype.fromAttribute = function ( attribute, index, offset ) {\n\n\tconsole.warn( 'THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\treturn this.fromBufferAttribute( attribute, index, offset );\n\n};\n\nVector2.prototype.distanceToManhattan = function ( v ) {\n\n\tconsole.warn( 'THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\n\treturn this.manhattanDistanceTo( v );\n\n};\n\nVector2.prototype.lengthManhattan = function () {\n\n\tconsole.warn( 'THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().' );\n\treturn this.manhattanLength();\n\n};\n\n//\n\nVector3.prototype.setEulerFromRotationMatrix = function () {\n\n\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\n\n};\n\nVector3.prototype.setEulerFromQuaternion = function () {\n\n\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\n\n};\n\nVector3.prototype.getPositionFromMatrix = function ( m ) {\n\n\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\n\treturn this.setFromMatrixPosition( m );\n\n};\n\nVector3.prototype.getScaleFromMatrix = function ( m ) {\n\n\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\n\treturn this.setFromMatrixScale( m );\n\n};\n\nVector3.prototype.getColumnFromMatrix = function ( index, matrix ) {\n\n\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\n\treturn this.setFromMatrixColumn( matrix, index );\n\n};\n\nVector3.prototype.applyProjection = function ( m ) {\n\n\tconsole.warn( 'THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.' );\n\treturn this.applyMatrix4( m );\n\n};\n\nVector3.prototype.fromAttribute = function ( attribute, index, offset ) {\n\n\tconsole.warn( 'THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\treturn this.fromBufferAttribute( attribute, index, offset );\n\n};\n\nVector3.prototype.distanceToManhattan = function ( v ) {\n\n\tconsole.warn( 'THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().' );\n\treturn this.manhattanDistanceTo( v );\n\n};\n\nVector3.prototype.lengthManhattan = function () {\n\n\tconsole.warn( 'THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().' );\n\treturn this.manhattanLength();\n\n};\n\n//\n\nVector4.prototype.fromAttribute = function ( attribute, index, offset ) {\n\n\tconsole.warn( 'THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().' );\n\treturn this.fromBufferAttribute( attribute, index, offset );\n\n};\n\nVector4.prototype.lengthManhattan = function () {\n\n\tconsole.warn( 'THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().' );\n\treturn this.manhattanLength();\n\n};\n\n//\n\nObject3D.prototype.getChildByName = function ( name ) {\n\n\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\n\treturn this.getObjectByName( name );\n\n};\n\nObject3D.prototype.renderDepth = function () {\n\n\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\n\n};\n\nObject3D.prototype.translate = function ( distance, axis ) {\n\n\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\n\treturn this.translateOnAxis( axis, distance );\n\n};\n\nObject3D.prototype.getWorldRotation = function () {\n\n\tconsole.error( 'THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.' );\n\n};\n\nObject3D.prototype.applyMatrix = function ( matrix ) {\n\n\tconsole.warn( 'THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().' );\n\treturn this.applyMatrix4( matrix );\n\n};\n\nObject.defineProperties( Object3D.prototype, {\n\n\teulerOrder: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\treturn this.rotation.order;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\n\t\t\tthis.rotation.order = value;\n\n\t\t}\n\t},\n\tuseQuaternion: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\n\n\t\t}\n\t}\n\n} );\n\nMesh.prototype.setDrawMode = function () {\n\n\tconsole.error( 'THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.' );\n\n};\n\nObject.defineProperties( Mesh.prototype, {\n\n\tdrawMode: {\n\t\tget: function () {\n\n\t\t\tconsole.error( 'THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.' );\n\t\t\treturn TrianglesDrawMode;\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.error( 'THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.' );\n\n\t\t}\n\t}\n\n} );\n\nSkinnedMesh.prototype.initBones = function () {\n\n\tconsole.error( 'THREE.SkinnedMesh: initBones() has been removed.' );\n\n};\n\n//\n\nPerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {\n\n\tconsole.warn( 'THREE.PerspectiveCamera.setLens is deprecated. ' +\n\t\t\t'Use .setFocalLength and .filmGauge for a photographic setup.' );\n\n\tif ( filmGauge !== undefined ) this.filmGauge = filmGauge;\n\tthis.setFocalLength( focalLength );\n\n};\n\n//\n\nObject.defineProperties( Light.prototype, {\n\tonlyShadow: {\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\n\n\t\t}\n\t},\n\tshadowCameraFov: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );\n\t\t\tthis.shadow.camera.fov = value;\n\n\t\t}\n\t},\n\tshadowCameraLeft: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );\n\t\t\tthis.shadow.camera.left = value;\n\n\t\t}\n\t},\n\tshadowCameraRight: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );\n\t\t\tthis.shadow.camera.right = value;\n\n\t\t}\n\t},\n\tshadowCameraTop: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );\n\t\t\tthis.shadow.camera.top = value;\n\n\t\t}\n\t},\n\tshadowCameraBottom: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );\n\t\t\tthis.shadow.camera.bottom = value;\n\n\t\t}\n\t},\n\tshadowCameraNear: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );\n\t\t\tthis.shadow.camera.near = value;\n\n\t\t}\n\t},\n\tshadowCameraFar: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );\n\t\t\tthis.shadow.camera.far = value;\n\n\t\t}\n\t},\n\tshadowCameraVisible: {\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );\n\n\t\t}\n\t},\n\tshadowBias: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );\n\t\t\tthis.shadow.bias = value;\n\n\t\t}\n\t},\n\tshadowDarkness: {\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowDarkness has been removed.' );\n\n\t\t}\n\t},\n\tshadowMapWidth: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );\n\t\t\tthis.shadow.mapSize.width = value;\n\n\t\t}\n\t},\n\tshadowMapHeight: {\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );\n\t\t\tthis.shadow.mapSize.height = value;\n\n\t\t}\n\t}\n} );\n\n//\n\nObject.defineProperties( BufferAttribute.prototype, {\n\n\tlength: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Use .count instead.' );\n\t\t\treturn this.array.length;\n\n\t\t}\n\t},\n\tdynamic: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );\n\t\t\treturn this.usage === DynamicDrawUsage;\n\n\t\t},\n\t\tset: function ( /* value */ ) {\n\n\t\t\tconsole.warn( 'THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.' );\n\t\t\tthis.setUsage( DynamicDrawUsage );\n\n\t\t}\n\t}\n\n} );\n\nBufferAttribute.prototype.setDynamic = function ( value ) {\n\n\tconsole.warn( 'THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.' );\n\tthis.setUsage( value === true ? DynamicDrawUsage : StaticDrawUsage );\n\treturn this;\n\n};\n\nBufferAttribute.prototype.copyIndicesArray = function ( /* indices */ ) {\n\n\tconsole.error( 'THREE.BufferAttribute: .copyIndicesArray() has been removed.' );\n\n},\n\nBufferAttribute.prototype.setArray = function ( /* array */ ) {\n\n\tconsole.error( 'THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );\n\n};\n\n//\n\nBufferGeometry.prototype.addIndex = function ( index ) {\n\n\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\n\tthis.setIndex( index );\n\n};\n\nBufferGeometry.prototype.addAttribute = function ( name, attribute ) {\n\n\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().' );\n\n\tif ( ! ( attribute && attribute.isBufferAttribute ) && ! ( attribute && attribute.isInterleavedBufferAttribute ) ) {\n\n\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\n\n\t\treturn this.setAttribute( name, new BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\n\n\t}\n\n\tif ( name === 'index' ) {\n\n\t\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\n\t\tthis.setIndex( attribute );\n\n\t\treturn this;\n\n\t}\n\n\treturn this.setAttribute( name, attribute );\n\n};\n\nBufferGeometry.prototype.addDrawCall = function ( start, count, indexOffset ) {\n\n\tif ( indexOffset !== undefined ) {\n\n\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\n\n\t}\n\n\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\n\tthis.addGroup( start, count );\n\n};\n\nBufferGeometry.prototype.clearDrawCalls = function () {\n\n\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\n\tthis.clearGroups();\n\n};\n\nBufferGeometry.prototype.computeOffsets = function () {\n\n\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );\n\n};\n\nBufferGeometry.prototype.removeAttribute = function ( name ) {\n\n\tconsole.warn( 'THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().' );\n\n\treturn this.deleteAttribute( name );\n\n};\n\nBufferGeometry.prototype.applyMatrix = function ( matrix ) {\n\n\tconsole.warn( 'THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().' );\n\treturn this.applyMatrix4( matrix );\n\n};\n\nObject.defineProperties( BufferGeometry.prototype, {\n\n\tdrawcalls: {\n\t\tget: function () {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\n\t\t\treturn this.groups;\n\n\t\t}\n\t},\n\toffsets: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\n\t\t\treturn this.groups;\n\n\t\t}\n\t}\n\n} );\n\nInterleavedBuffer.prototype.setDynamic = function ( value ) {\n\n\tconsole.warn( 'THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.' );\n\tthis.setUsage( value === true ? DynamicDrawUsage : StaticDrawUsage );\n\treturn this;\n\n};\n\nInterleavedBuffer.prototype.setArray = function ( /* array */ ) {\n\n\tconsole.error( 'THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers' );\n\n};\n\n//\n\nExtrudeGeometry.prototype.getArrays = function () {\n\n\tconsole.error( 'THREE.ExtrudeGeometry: .getArrays() has been removed.' );\n\n};\n\nExtrudeGeometry.prototype.addShapeList = function () {\n\n\tconsole.error( 'THREE.ExtrudeGeometry: .addShapeList() has been removed.' );\n\n};\n\nExtrudeGeometry.prototype.addShape = function () {\n\n\tconsole.error( 'THREE.ExtrudeGeometry: .addShape() has been removed.' );\n\n};\n\n//\n\nScene.prototype.dispose = function () {\n\n\tconsole.error( 'THREE.Scene: .dispose() has been removed.' );\n\n};\n\n//\n\nUniform.prototype.onUpdate = function () {\n\n\tconsole.warn( 'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.' );\n\treturn this;\n\n};\n\n//\n\nObject.defineProperties( Material.prototype, {\n\n\twrapAround: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Material: .wrapAround has been removed.' );\n\n\t\t}\n\t},\n\n\toverdraw: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Material: .overdraw has been removed.' );\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.Material: .overdraw has been removed.' );\n\n\t\t}\n\t},\n\n\twrapRGB: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.Material: .wrapRGB has been removed.' );\n\t\t\treturn new Color();\n\n\t\t}\n\t},\n\n\tshading: {\n\t\tget: function () {\n\n\t\t\tconsole.error( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.' + this.type + ': .shading has been removed. Use the boolean .flatShading instead.' );\n\t\t\tthis.flatShading = ( value === FlatShading );\n\n\t\t}\n\t},\n\n\tstencilMask: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );\n\t\t\treturn this.stencilFuncMask;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.' + this.type + ': .stencilMask has been removed. Use .stencilFuncMask instead.' );\n\t\t\tthis.stencilFuncMask = value;\n\n\t\t}\n\t},\n\n\tvertexTangents: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.' + this.type + ': .vertexTangents has been removed.' );\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.' + this.type + ': .vertexTangents has been removed.' );\n\n\t\t}\n\t},\n\n} );\n\nObject.defineProperties( ShaderMaterial.prototype, {\n\n\tderivatives: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\treturn this.extensions.derivatives;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\n\t\t\tthis.extensions.derivatives = value;\n\n\t\t}\n\t}\n\n} );\n\n//\n\nWebGLRenderer.prototype.clearTarget = function ( renderTarget, color, depth, stencil ) {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.' );\n\tthis.setRenderTarget( renderTarget );\n\tthis.clear( color, depth, stencil );\n\n};\n\nWebGLRenderer.prototype.animate = function ( callback ) {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .animate() is now .setAnimationLoop().' );\n\tthis.setAnimationLoop( callback );\n\n};\n\nWebGLRenderer.prototype.getCurrentRenderTarget = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().' );\n\treturn this.getRenderTarget();\n\n};\n\nWebGLRenderer.prototype.getMaxAnisotropy = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().' );\n\treturn this.capabilities.getMaxAnisotropy();\n\n};\n\nWebGLRenderer.prototype.getPrecision = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.' );\n\treturn this.capabilities.precision;\n\n};\n\nWebGLRenderer.prototype.resetGLState = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .resetGLState() is now .state.reset().' );\n\treturn this.state.reset();\n\n};\n\nWebGLRenderer.prototype.supportsFloatTextures = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\n\treturn this.extensions.get( 'OES_texture_float' );\n\n};\n\nWebGLRenderer.prototype.supportsHalfFloatTextures = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\n\treturn this.extensions.get( 'OES_texture_half_float' );\n\n};\n\nWebGLRenderer.prototype.supportsStandardDerivatives = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\n\treturn this.extensions.get( 'OES_standard_derivatives' );\n\n};\n\nWebGLRenderer.prototype.supportsCompressedTextureS3TC = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\n\treturn this.extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n};\n\nWebGLRenderer.prototype.supportsCompressedTexturePVRTC = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\n\treturn this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n};\n\nWebGLRenderer.prototype.supportsBlendMinMax = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\n\treturn this.extensions.get( 'EXT_blend_minmax' );\n\n};\n\nWebGLRenderer.prototype.supportsVertexTextures = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.' );\n\treturn this.capabilities.vertexTextures;\n\n};\n\nWebGLRenderer.prototype.supportsInstancedArrays = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\n\treturn this.extensions.get( 'ANGLE_instanced_arrays' );\n\n};\n\nWebGLRenderer.prototype.enableScissorTest = function ( boolean ) {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );\n\tthis.setScissorTest( boolean );\n\n};\n\nWebGLRenderer.prototype.initMaterial = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\n\n};\n\nWebGLRenderer.prototype.addPrePlugin = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\n\n};\n\nWebGLRenderer.prototype.addPostPlugin = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\n\n};\n\nWebGLRenderer.prototype.updateShadowMap = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\n\n};\n\nWebGLRenderer.prototype.setFaceCulling = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .setFaceCulling() has been removed.' );\n\n};\n\nWebGLRenderer.prototype.allocTextureUnit = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .allocTextureUnit() has been removed.' );\n\n};\n\nWebGLRenderer.prototype.setTexture = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .setTexture() has been removed.' );\n\n};\n\nWebGLRenderer.prototype.setTexture2D = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .setTexture2D() has been removed.' );\n\n};\n\nWebGLRenderer.prototype.setTextureCube = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .setTextureCube() has been removed.' );\n\n};\n\nWebGLRenderer.prototype.getActiveMipMapLevel = function () {\n\n\tconsole.warn( 'THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().' );\n\treturn this.getActiveMipmapLevel();\n\n};\n\nObject.defineProperties( WebGLRenderer.prototype, {\n\n\tshadowMapEnabled: {\n\t\tget: function () {\n\n\t\t\treturn this.shadowMap.enabled;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\n\t\t\tthis.shadowMap.enabled = value;\n\n\t\t}\n\t},\n\tshadowMapType: {\n\t\tget: function () {\n\n\t\t\treturn this.shadowMap.type;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\n\t\t\tthis.shadowMap.type = value;\n\n\t\t}\n\t},\n\tshadowMapCullFace: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );\n\t\t\treturn undefined;\n\n\t\t},\n\t\tset: function ( /* value */ ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.' );\n\n\t\t}\n\t},\n\tcontext: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.' );\n\t\t\treturn this.getContext();\n\n\t\t}\n\t},\n\tvr: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .vr has been renamed to .xr' );\n\t\t\treturn this.xr;\n\n\t\t}\n\t},\n\tgammaInput: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.' );\n\t\t\treturn false;\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.' );\n\n\t\t}\n\t},\n\tgammaOutput: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.' );\n\t\t\treturn false;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.' );\n\t\t\tthis.outputEncoding = ( value === true ) ? sRGBEncoding : LinearEncoding;\n\n\t\t}\n\t},\n\ttoneMappingWhitePoint: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.' );\n\t\t\treturn 1.0;\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.' );\n\n\t\t}\n\t},\n\n} );\n\nObject.defineProperties( WebGLShadowMap.prototype, {\n\n\tcullFace: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );\n\t\t\treturn undefined;\n\n\t\t},\n\t\tset: function ( /* cullFace */ ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.' );\n\n\t\t}\n\t},\n\trenderReverseSided: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );\n\t\t\treturn undefined;\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.' );\n\n\t\t}\n\t},\n\trenderSingleSided: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );\n\t\t\treturn undefined;\n\n\t\t},\n\t\tset: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.' );\n\n\t\t}\n\t}\n\n} );\n\nfunction WebGLRenderTargetCube( width, height, options ) {\n\n\tconsole.warn( 'THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options ).' );\n\treturn new WebGLCubeRenderTarget( width, options );\n\n}\n\n//\n\nObject.defineProperties( WebGLRenderTarget.prototype, {\n\n\twrapS: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\treturn this.texture.wrapS;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\n\t\t\tthis.texture.wrapS = value;\n\n\t\t}\n\t},\n\twrapT: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\treturn this.texture.wrapT;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\n\t\t\tthis.texture.wrapT = value;\n\n\t\t}\n\t},\n\tmagFilter: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\treturn this.texture.magFilter;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\n\t\t\tthis.texture.magFilter = value;\n\n\t\t}\n\t},\n\tminFilter: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\treturn this.texture.minFilter;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\n\t\t\tthis.texture.minFilter = value;\n\n\t\t}\n\t},\n\tanisotropy: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\treturn this.texture.anisotropy;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\n\t\t\tthis.texture.anisotropy = value;\n\n\t\t}\n\t},\n\toffset: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\treturn this.texture.offset;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\n\t\t\tthis.texture.offset = value;\n\n\t\t}\n\t},\n\trepeat: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\treturn this.texture.repeat;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\n\t\t\tthis.texture.repeat = value;\n\n\t\t}\n\t},\n\tformat: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\treturn this.texture.format;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\n\t\t\tthis.texture.format = value;\n\n\t\t}\n\t},\n\ttype: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\treturn this.texture.type;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\n\t\t\tthis.texture.type = value;\n\n\t\t}\n\t},\n\tgenerateMipmaps: {\n\t\tget: function () {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\treturn this.texture.generateMipmaps;\n\n\t\t},\n\t\tset: function ( value ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\n\t\t\tthis.texture.generateMipmaps = value;\n\n\t\t}\n\t}\n\n} );\n\n//\n\nAudio.prototype.load = function ( file ) {\n\n\tconsole.warn( 'THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.' );\n\tconst scope = this;\n\tconst audioLoader = new AudioLoader();\n\taudioLoader.load( file, function ( buffer ) {\n\n\t\tscope.setBuffer( buffer );\n\n\t} );\n\treturn this;\n\n};\n\n\nAudioAnalyser.prototype.getData = function () {\n\n\tconsole.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );\n\treturn this.getFrequencyData();\n\n};\n\n//\n\nCubeCamera.prototype.updateCubeMap = function ( renderer, scene ) {\n\n\tconsole.warn( 'THREE.CubeCamera: .updateCubeMap() is now .update().' );\n\treturn this.update( renderer, scene );\n\n};\n\nCubeCamera.prototype.clear = function ( renderer, color, depth, stencil ) {\n\n\tconsole.warn( 'THREE.CubeCamera: .clear() is now .renderTarget.clear().' );\n\treturn this.renderTarget.clear( renderer, color, depth, stencil );\n\n};\n\nImageUtils.crossOrigin = undefined;\n\nImageUtils.loadTexture = function ( url, mapping, onLoad, onError ) {\n\n\tconsole.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );\n\n\tconst loader = new TextureLoader();\n\tloader.setCrossOrigin( this.crossOrigin );\n\n\tconst texture = loader.load( url, onLoad, undefined, onError );\n\n\tif ( mapping ) texture.mapping = mapping;\n\n\treturn texture;\n\n};\n\nImageUtils.loadTextureCube = function ( urls, mapping, onLoad, onError ) {\n\n\tconsole.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );\n\n\tconst loader = new CubeTextureLoader();\n\tloader.setCrossOrigin( this.crossOrigin );\n\n\tconst texture = loader.load( urls, onLoad, undefined, onError );\n\n\tif ( mapping ) texture.mapping = mapping;\n\n\treturn texture;\n\n};\n\nImageUtils.loadCompressedTexture = function () {\n\n\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );\n\n};\n\nImageUtils.loadCompressedTextureCube = function () {\n\n\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );\n\n};\n\n//\n\nfunction CanvasRenderer() {\n\n\tconsole.error( 'THREE.CanvasRenderer has been removed' );\n\n}\n\n//\n\nfunction JSONLoader() {\n\n\tconsole.error( 'THREE.JSONLoader has been removed.' );\n\n}\n\n//\n\nconst SceneUtils = {\n\n\tcreateMultiMaterialObject: function ( /* geometry, materials */ ) {\n\n\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js' );\n\n\t},\n\n\tdetach: function ( /* child, parent, scene */ ) {\n\n\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js' );\n\n\t},\n\n\tattach: function ( /* child, scene, parent */ ) {\n\n\t\tconsole.error( 'THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js' );\n\n\t}\n\n};\n\n//\n\nfunction LensFlare() {\n\n\tconsole.error( 'THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js' );\n\n}\n\n//\n\nfunction ParametricGeometry() {\n\n\tconsole.error( 'THREE.ParametricGeometry has been moved to /examples/jsm/geometries/ParametricGeometry.js' );\n\treturn new BufferGeometry();\n\n}\n\nfunction TextGeometry() {\n\n\tconsole.error( 'THREE.TextGeometry has been moved to /examples/jsm/geometries/TextGeometry.js' );\n\treturn new BufferGeometry();\n\n}\n\nfunction FontLoader() {\n\n\tconsole.error( 'THREE.FontLoader has been moved to /examples/jsm/loaders/FontLoader.js' );\n\n}\n\nfunction Font() {\n\n\tconsole.error( 'THREE.Font has been moved to /examples/jsm/loaders/FontLoader.js' );\n\n}\n\nfunction ImmediateRenderObject() {\n\n\tconsole.error( 'THREE.ImmediateRenderObject has been removed.' );\n\n}\n\nif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t/* eslint-disable no-undef */\n\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'register', { detail: {\n\t\trevision: REVISION,\n\t} } ) );\n\t/* eslint-enable no-undef */\n\n}\n\nif ( typeof window !== 'undefined' ) {\n\n\tif ( window.__THREE__ ) {\n\n\t\tconsole.warn( 'WARNING: Multiple instances of Three.js being imported.' );\n\n\t} else {\n\n\t\twindow.__THREE__ = REVISION;\n\n\t}\n\n}\n\nexport { ACESFilmicToneMapping, AddEquation, AddOperation, AdditiveAnimationBlendMode, AdditiveBlending, AlphaFormat, AlwaysDepth, AlwaysStencilFunc, AmbientLight, AmbientLightProbe, AnimationClip, AnimationLoader, AnimationMixer, AnimationObjectGroup, AnimationUtils, ArcCurve, ArrayCamera, ArrowHelper, Audio, AudioAnalyser, AudioContext, AudioListener, AudioLoader, AxesHelper, AxisHelper, BackSide, BasicDepthPacking, BasicShadowMap, BinaryTextureLoader, Bone, BooleanKeyframeTrack, BoundingBoxHelper, Box2, Box3, Box3Helper, BoxGeometry as BoxBufferGeometry, BoxGeometry, BoxHelper, BufferAttribute, BufferGeometry, BufferGeometryLoader, ByteType, Cache, Camera, CameraHelper, CanvasRenderer, CanvasTexture, CatmullRomCurve3, CineonToneMapping, CircleGeometry as CircleBufferGeometry, CircleGeometry, ClampToEdgeWrapping, Clock, Color, ColorKeyframeTrack, CompressedTexture, CompressedTextureLoader, ConeGeometry as ConeBufferGeometry, ConeGeometry, CubeCamera, CubeReflectionMapping, CubeRefractionMapping, CubeTexture, CubeTextureLoader, CubeUVReflectionMapping, CubeUVRefractionMapping, CubicBezierCurve, CubicBezierCurve3, CubicInterpolant, CullFaceBack, CullFaceFront, CullFaceFrontBack, CullFaceNone, Curve, CurvePath, CustomBlending, CustomToneMapping, CylinderGeometry as CylinderBufferGeometry, CylinderGeometry, Cylindrical, DataTexture, DataTexture2DArray, DataTexture3D, DataTextureLoader, DataUtils, DecrementStencilOp, DecrementWrapStencilOp, DefaultLoadingManager, DepthFormat, DepthStencilFormat, DepthTexture, DirectionalLight, DirectionalLightHelper, DiscreteInterpolant, DodecahedronGeometry as DodecahedronBufferGeometry, DodecahedronGeometry, DoubleSide, DstAlphaFactor, DstColorFactor, DynamicBufferAttribute, DynamicCopyUsage, DynamicDrawUsage, DynamicReadUsage, EdgesGeometry, EdgesHelper, EllipseCurve, EqualDepth, EqualStencilFunc, EquirectangularReflectionMapping, EquirectangularRefractionMapping, Euler, EventDispatcher, ExtrudeGeometry as ExtrudeBufferGeometry, ExtrudeGeometry, FaceColors, FileLoader, FlatShading, Float16BufferAttribute, Float32Attribute, Float32BufferAttribute, Float64Attribute, Float64BufferAttribute, FloatType, Fog, FogExp2, Font, FontLoader, FrontSide, Frustum, GLBufferAttribute, GLSL1, GLSL3, GammaEncoding, GreaterDepth, GreaterEqualDepth, GreaterEqualStencilFunc, GreaterStencilFunc, GridHelper, Group, HalfFloatType, HemisphereLight, HemisphereLightHelper, HemisphereLightProbe, IcosahedronGeometry as IcosahedronBufferGeometry, IcosahedronGeometry, ImageBitmapLoader, ImageLoader, ImageUtils, ImmediateRenderObject, IncrementStencilOp, IncrementWrapStencilOp, InstancedBufferAttribute, InstancedBufferGeometry, InstancedInterleavedBuffer, InstancedMesh, Int16Attribute, Int16BufferAttribute, Int32Attribute, Int32BufferAttribute, Int8Attribute, Int8BufferAttribute, IntType, InterleavedBuffer, InterleavedBufferAttribute, Interpolant, InterpolateDiscrete, InterpolateLinear, InterpolateSmooth, InvertStencilOp, JSONLoader, KeepStencilOp, KeyframeTrack, LOD, LatheGeometry as LatheBufferGeometry, LatheGeometry, Layers, LensFlare, LessDepth, LessEqualDepth, LessEqualStencilFunc, LessStencilFunc, Light, LightProbe, Line, Line3, LineBasicMaterial, LineCurve, LineCurve3, LineDashedMaterial, LineLoop, LinePieces, LineSegments, LineStrip, LinearEncoding, LinearFilter, LinearInterpolant, LinearMipMapLinearFilter, LinearMipMapNearestFilter, LinearMipmapLinearFilter, LinearMipmapNearestFilter, LinearToneMapping, Loader, LoaderUtils, LoadingManager, LoopOnce, LoopPingPong, LoopRepeat, LuminanceAlphaFormat, LuminanceFormat, MOUSE, Material, MaterialLoader, MathUtils as Math, MathUtils, Matrix3, Matrix4, MaxEquation, Mesh, MeshBasicMaterial, MeshDepthMaterial, MeshDistanceMaterial, MeshFaceMaterial, MeshLambertMaterial, MeshMatcapMaterial, MeshNormalMaterial, MeshPhongMaterial, MeshPhysicalMaterial, MeshStandardMaterial, MeshToonMaterial, MinEquation, MirroredRepeatWrapping, MixOperation, MultiMaterial, MultiplyBlending, MultiplyOperation, NearestFilter, NearestMipMapLinearFilter, NearestMipMapNearestFilter, NearestMipmapLinearFilter, NearestMipmapNearestFilter, NeverDepth, NeverStencilFunc, NoBlending, NoColors, NoToneMapping, NormalAnimationBlendMode, NormalBlending, NotEqualDepth, NotEqualStencilFunc, NumberKeyframeTrack, Object3D, ObjectLoader, ObjectSpaceNormalMap, OctahedronGeometry as OctahedronBufferGeometry, OctahedronGeometry, OneFactor, OneMinusDstAlphaFactor, OneMinusDstColorFactor, OneMinusSrcAlphaFactor, OneMinusSrcColorFactor, OrthographicCamera, PCFShadowMap, PCFSoftShadowMap, PMREMGenerator, ParametricGeometry, Particle, ParticleBasicMaterial, ParticleSystem, ParticleSystemMaterial, Path, PerspectiveCamera, Plane, PlaneGeometry as PlaneBufferGeometry, PlaneGeometry, PlaneHelper, PointCloud, PointCloudMaterial, PointLight, PointLightHelper, Points, PointsMaterial, PolarGridHelper, PolyhedronGeometry as PolyhedronBufferGeometry, PolyhedronGeometry, PositionalAudio, PropertyBinding, PropertyMixer, QuadraticBezierCurve, QuadraticBezierCurve3, Quaternion, QuaternionKeyframeTrack, QuaternionLinearInterpolant, REVISION, RGBADepthPacking, RGBAFormat, RGBAIntegerFormat, RGBA_ASTC_10x10_Format, RGBA_ASTC_10x5_Format, RGBA_ASTC_10x6_Format, RGBA_ASTC_10x8_Format, RGBA_ASTC_12x10_Format, RGBA_ASTC_12x12_Format, RGBA_ASTC_4x4_Format, RGBA_ASTC_5x4_Format, RGBA_ASTC_5x5_Format, RGBA_ASTC_6x5_Format, RGBA_ASTC_6x6_Format, RGBA_ASTC_8x5_Format, RGBA_ASTC_8x6_Format, RGBA_ASTC_8x8_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_2BPPV1_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT1_Format, RGBA_S3TC_DXT3_Format, RGBA_S3TC_DXT5_Format, RGBDEncoding, RGBEEncoding, RGBEFormat, RGBFormat, RGBIntegerFormat, RGBM16Encoding, RGBM7Encoding, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_2BPPV1_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format, RGFormat, RGIntegerFormat, RawShaderMaterial, Ray, Raycaster, RectAreaLight, RedFormat, RedIntegerFormat, ReinhardToneMapping, RepeatWrapping, ReplaceStencilOp, ReverseSubtractEquation, RingGeometry as RingBufferGeometry, RingGeometry, SRGB8_ALPHA8_ASTC_10x10_Format, SRGB8_ALPHA8_ASTC_10x5_Format, SRGB8_ALPHA8_ASTC_10x6_Format, SRGB8_ALPHA8_ASTC_10x8_Format, SRGB8_ALPHA8_ASTC_12x10_Format, SRGB8_ALPHA8_ASTC_12x12_Format, SRGB8_ALPHA8_ASTC_4x4_Format, SRGB8_ALPHA8_ASTC_5x4_Format, SRGB8_ALPHA8_ASTC_5x5_Format, SRGB8_ALPHA8_ASTC_6x5_Format, SRGB8_ALPHA8_ASTC_6x6_Format, SRGB8_ALPHA8_ASTC_8x5_Format, SRGB8_ALPHA8_ASTC_8x6_Format, SRGB8_ALPHA8_ASTC_8x8_Format, Scene, SceneUtils, ShaderChunk, ShaderLib, ShaderMaterial, ShadowMaterial, Shape, ShapeGeometry as ShapeBufferGeometry, ShapeGeometry, ShapePath, ShapeUtils, ShortType, Skeleton, SkeletonHelper, SkinnedMesh, SmoothShading, Sphere, SphereGeometry as SphereBufferGeometry, SphereGeometry, Spherical, SphericalHarmonics3, SplineCurve, SpotLight, SpotLightHelper, Sprite, SpriteMaterial, SrcAlphaFactor, SrcAlphaSaturateFactor, SrcColorFactor, StaticCopyUsage, StaticDrawUsage, StaticReadUsage, StereoCamera, StreamCopyUsage, StreamDrawUsage, StreamReadUsage, StringKeyframeTrack, SubtractEquation, SubtractiveBlending, TOUCH, TangentSpaceNormalMap, TetrahedronGeometry as TetrahedronBufferGeometry, TetrahedronGeometry, TextGeometry, Texture, TextureLoader, TorusGeometry as TorusBufferGeometry, TorusGeometry, TorusKnotGeometry as TorusKnotBufferGeometry, TorusKnotGeometry, Triangle, TriangleFanDrawMode, TriangleStripDrawMode, TrianglesDrawMode, TubeGeometry as TubeBufferGeometry, TubeGeometry, UVMapping, Uint16Attribute, Uint16BufferAttribute, Uint32Attribute, Uint32BufferAttribute, Uint8Attribute, Uint8BufferAttribute, Uint8ClampedAttribute, Uint8ClampedBufferAttribute, Uniform, UniformsLib, UniformsUtils, UnsignedByteType, UnsignedInt248Type, UnsignedIntType, UnsignedShort4444Type, UnsignedShort5551Type, UnsignedShort565Type, UnsignedShortType, VSMShadowMap, Vector2, Vector3, Vector4, VectorKeyframeTrack, Vertex, VertexColors, VideoTexture, WebGL1Renderer, WebGLCubeRenderTarget, WebGLMultipleRenderTargets, WebGLMultisampleRenderTarget, WebGLRenderTarget, WebGLRenderTargetCube, WebGLRenderer, WebGLUtils, WireframeGeometry, WireframeHelper, WrapAroundEnding, XHRLoader, ZeroCurvatureEnding, ZeroFactor, ZeroSlopeEnding, ZeroStencilOp, sRGBEncoding };\n","/*! For license information please see mindar-image-three.prod.js.LICENSE.txt */\n(()=>{var t={61113:function(t){t.exports=function(t){var e={};function n(r){if(e[r])return e[r].exports;var s=e[r]={i:r,l:!1,exports:{}};return t[r].call(s.exports,s,s.exports,n),s.l=!0,s.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(t,\"__esModule\",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&\"object\"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,\"default\",{enumerable:!0,value:t}),2&e&&\"string\"!=typeof t)for(var s in t)n.d(r,s,function(e){return t[e]}.bind(null,s));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,\"a\",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p=\"\",n(n.s=0)}([function(t,e,n){\"use strict\";n.r(e),n.d(e,\"encode\",(function(){return I})),n.d(e,\"decode\",(function(){return V})),n.d(e,\"decodeAsync\",(function(){return X})),n.d(e,\"decodeArrayStream\",(function(){return K})),n.d(e,\"decodeStream\",(function(){return Y})),n.d(e,\"Decoder\",(function(){return B})),n.d(e,\"Encoder\",(function(){return k})),n.d(e,\"ExtensionCodec\",(function(){return T})),n.d(e,\"ExtData\",(function(){return p})),n.d(e,\"EXT_TIMESTAMP\",(function(){return g})),n.d(e,\"encodeDateToTimeSpec\",(function(){return x})),n.d(e,\"encodeTimeSpecToTimestamp\",(function(){return y})),n.d(e,\"decodeTimestampToTimeSpec\",(function(){return v})),n.d(e,\"encodeTimestampExtension\",(function(){return b})),n.d(e,\"decodeTimestampExtension\",(function(){return w}));var r=function(t,e){var n=\"function\"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,s,i=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(t){s={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(s)throw s.error}}return a},s=function(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(r(arguments[e]));return t},i=\"undefined\"!=typeof process&&\"undefined\"!=typeof TextEncoder&&\"undefined\"!=typeof TextDecoder;function a(t){for(var e=t.length,n=0,r=0;r<e;){var s=t.charCodeAt(r++);if(0!=(4294967168&s))if(0==(4294965248&s))n+=2;else{if(s>=55296&&s<=56319&&r<e){var i=t.charCodeAt(r);56320==(64512&i)&&(++r,s=((1023&s)<<10)+(1023&i)+65536)}n+=0==(4294901760&s)?3:4}else n++}return n}var o=i?new TextEncoder:void 0,l=\"undefined\"!=typeof process?200:0,u=(null==o?void 0:o.encodeInto)?function(t,e,n){o.encodeInto(t,e.subarray(n))}:function(t,e,n){e.set(o.encode(t),n)};function c(t,e,n){for(var r=e,i=r+n,a=[],o=\"\";r<i;){var l=t[r++];if(0==(128&l))a.push(l);else if(192==(224&l)){var u=63&t[r++];a.push((31&l)<<6|u)}else if(224==(240&l)){u=63&t[r++];var c=63&t[r++];a.push((31&l)<<12|u<<6|c)}else if(240==(248&l)){var h=(7&l)<<18|(u=63&t[r++])<<12|(c=63&t[r++])<<6|63&t[r++];h>65535&&(h-=65536,a.push(h>>>10&1023|55296),h=56320|1023&h),a.push(h)}else a.push(l);a.length>=4096&&(o+=String.fromCharCode.apply(String,s(a)),a.length=0)}return a.length>0&&(o+=String.fromCharCode.apply(String,s(a))),o}var h=i?new TextDecoder:null,d=\"undefined\"!=typeof process?200:0,p=function(t,e){this.type=t,this.data=e};function f(t,e,n){var r=Math.floor(n/4294967296),s=n;t.setUint32(e,r),t.setUint32(e+4,s)}function m(t,e){return 4294967296*t.getInt32(e)+t.getUint32(e+4)}var g=-1;function y(t){var e,n=t.sec,r=t.nsec;if(n>=0&&r>=0&&n<=17179869183){if(0===r&&n<=4294967295){var s=new Uint8Array(4);return(e=new DataView(s.buffer)).setUint32(0,n),s}var i=n/4294967296,a=4294967295&n;return s=new Uint8Array(8),(e=new DataView(s.buffer)).setUint32(0,r<<2|3&i),e.setUint32(4,a),s}return s=new Uint8Array(12),(e=new DataView(s.buffer)).setUint32(0,r),f(e,4,n),s}function x(t){var e=t.getTime(),n=Math.floor(e/1e3),r=1e6*(e-1e3*n),s=Math.floor(r/1e9);return{sec:n+s,nsec:r-1e9*s}}function b(t){return t instanceof Date?y(x(t)):null}function v(t){var e=new DataView(t.buffer,t.byteOffset,t.byteLength);switch(t.byteLength){case 4:return{sec:e.getUint32(0),nsec:0};case 8:var n=e.getUint32(0);return{sec:4294967296*(3&n)+e.getUint32(4),nsec:n>>>2};case 12:return{sec:m(e,4),nsec:e.getUint32(0)};default:throw new Error(\"Unrecognized data size for timestamp: \"+t.length)}}function w(t){var e=v(t);return new Date(1e3*e.sec+e.nsec/1e6)}var S={type:g,encode:b,decode:w},T=function(){function t(){this.builtInEncoders=[],this.builtInDecoders=[],this.encoders=[],this.decoders=[],this.register(S)}return t.prototype.register=function(t){var e=t.type,n=t.encode,r=t.decode;if(e>=0)this.encoders[e]=n,this.decoders[e]=r;else{var s=1+e;this.builtInEncoders[s]=n,this.builtInDecoders[s]=r}},t.prototype.tryToEncode=function(t,e){for(var n=0;n<this.builtInEncoders.length;n++)if(null!=(r=this.builtInEncoders[n])&&null!=(s=r(t,e)))return new p(-1-n,s);for(n=0;n<this.encoders.length;n++){var r,s;if(null!=(r=this.encoders[n])&&null!=(s=r(t,e)))return new p(n,s)}return t instanceof p?t:null},t.prototype.decode=function(t,e,n){var r=e<0?this.builtInDecoders[-1-e]:this.decoders[e];return r?r(t,e,n):new p(e,t)},t.defaultCodec=new t,t}();function _(t){return t instanceof Uint8Array?t:ArrayBuffer.isView(t)?new Uint8Array(t.buffer,t.byteOffset,t.byteLength):t instanceof ArrayBuffer?new Uint8Array(t):Uint8Array.from(t)}var M=function(t){var e=\"function\"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&\"number\"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?\"Object is not iterable.\":\"Symbol.iterator is not defined.\")},k=function(){function t(t,e,n,r,s,i,a){void 0===t&&(t=T.defaultCodec),void 0===n&&(n=100),void 0===r&&(r=2048),void 0===s&&(s=!1),void 0===i&&(i=!1),void 0===a&&(a=!1),this.extensionCodec=t,this.context=e,this.maxDepth=n,this.initialBufferSize=r,this.sortKeys=s,this.forceFloat32=i,this.ignoreUndefined=a,this.pos=0,this.view=new DataView(new ArrayBuffer(this.initialBufferSize)),this.bytes=new Uint8Array(this.view.buffer)}return t.prototype.encode=function(t,e){if(e>this.maxDepth)throw new Error(\"Too deep objects in depth \"+e);null==t?this.encodeNil():\"boolean\"==typeof t?this.encodeBoolean(t):\"number\"==typeof t?this.encodeNumber(t):\"string\"==typeof t?this.encodeString(t):this.encodeObject(t,e)},t.prototype.getUint8Array=function(){return this.bytes.subarray(0,this.pos)},t.prototype.ensureBufferSizeToWrite=function(t){var e=this.pos+t;this.view.byteLength<e&&this.resizeBuffer(2*e)},t.prototype.resizeBuffer=function(t){var e=new ArrayBuffer(t),n=new Uint8Array(e),r=new DataView(e);n.set(this.bytes),this.view=r,this.bytes=n},t.prototype.encodeNil=function(){this.writeU8(192)},t.prototype.encodeBoolean=function(t){!1===t?this.writeU8(194):this.writeU8(195)},t.prototype.encodeNumber=function(t){Number.isSafeInteger(t)?t>=0?t<128?this.writeU8(t):t<256?(this.writeU8(204),this.writeU8(t)):t<65536?(this.writeU8(205),this.writeU16(t)):t<4294967296?(this.writeU8(206),this.writeU32(t)):(this.writeU8(207),this.writeU64(t)):t>=-32?this.writeU8(224|t+32):t>=-128?(this.writeU8(208),this.writeI8(t)):t>=-32768?(this.writeU8(209),this.writeI16(t)):t>=-2147483648?(this.writeU8(210),this.writeI32(t)):(this.writeU8(211),this.writeI64(t)):this.forceFloat32?(this.writeU8(202),this.writeF32(t)):(this.writeU8(203),this.writeF64(t))},t.prototype.writeStringHeader=function(t){if(t<32)this.writeU8(160+t);else if(t<256)this.writeU8(217),this.writeU8(t);else if(t<65536)this.writeU8(218),this.writeU16(t);else{if(!(t<4294967296))throw new Error(\"Too long string: \"+t+\" bytes in UTF-8\");this.writeU8(219),this.writeU32(t)}},t.prototype.encodeString=function(t){var e=t.length;if(i&&e>l){var n=a(t);this.ensureBufferSizeToWrite(5+n),this.writeStringHeader(n),u(t,this.bytes,this.pos),this.pos+=n}else n=a(t),this.ensureBufferSizeToWrite(5+n),this.writeStringHeader(n),function(t,e,n){for(var r=t.length,s=n,i=0;i<r;){var a=t.charCodeAt(i++);if(0!=(4294967168&a)){if(0==(4294965248&a))e[s++]=a>>6&31|192;else{if(a>=55296&&a<=56319&&i<r){var o=t.charCodeAt(i);56320==(64512&o)&&(++i,a=((1023&a)<<10)+(1023&o)+65536)}0==(4294901760&a)?(e[s++]=a>>12&15|224,e[s++]=a>>6&63|128):(e[s++]=a>>18&7|240,e[s++]=a>>12&63|128,e[s++]=a>>6&63|128)}e[s++]=63&a|128}else e[s++]=a}}(t,this.bytes,this.pos),this.pos+=n},t.prototype.encodeObject=function(t,e){var n=this.extensionCodec.tryToEncode(t,this.context);if(null!=n)this.encodeExtension(n);else if(Array.isArray(t))this.encodeArray(t,e);else if(ArrayBuffer.isView(t))this.encodeBinary(t);else{if(\"object\"!=typeof t)throw new Error(\"Unrecognized object: \"+Object.prototype.toString.apply(t));this.encodeMap(t,e)}},t.prototype.encodeBinary=function(t){var e=t.byteLength;if(e<256)this.writeU8(196),this.writeU8(e);else if(e<65536)this.writeU8(197),this.writeU16(e);else{if(!(e<4294967296))throw new Error(\"Too large binary: \"+e);this.writeU8(198),this.writeU32(e)}var n=_(t);this.writeU8a(n)},t.prototype.encodeArray=function(t,e){var n,r,s=t.length;if(s<16)this.writeU8(144+s);else if(s<65536)this.writeU8(220),this.writeU16(s);else{if(!(s<4294967296))throw new Error(\"Too large array: \"+s);this.writeU8(221),this.writeU32(s)}try{for(var i=M(t),a=i.next();!a.done;a=i.next()){var o=a.value;this.encode(o,e+1)}}catch(t){n={error:t}}finally{try{a&&!a.done&&(r=i.return)&&r.call(i)}finally{if(n)throw n.error}}},t.prototype.countWithoutUndefined=function(t,e){var n,r,s=0;try{for(var i=M(e),a=i.next();!a.done;a=i.next())void 0!==t[a.value]&&s++}catch(t){n={error:t}}finally{try{a&&!a.done&&(r=i.return)&&r.call(i)}finally{if(n)throw n.error}}return s},t.prototype.encodeMap=function(t,e){var n,r,s=Object.keys(t);this.sortKeys&&s.sort();var i=this.ignoreUndefined?this.countWithoutUndefined(t,s):s.length;if(i<16)this.writeU8(128+i);else if(i<65536)this.writeU8(222),this.writeU16(i);else{if(!(i<4294967296))throw new Error(\"Too large map object: \"+i);this.writeU8(223),this.writeU32(i)}try{for(var a=M(s),o=a.next();!o.done;o=a.next()){var l=o.value,u=t[l];this.ignoreUndefined&&void 0===u||(this.encodeString(l),this.encode(u,e+1))}}catch(t){n={error:t}}finally{try{o&&!o.done&&(r=a.return)&&r.call(a)}finally{if(n)throw n.error}}},t.prototype.encodeExtension=function(t){var e=t.data.length;if(1===e)this.writeU8(212);else if(2===e)this.writeU8(213);else if(4===e)this.writeU8(214);else if(8===e)this.writeU8(215);else if(16===e)this.writeU8(216);else if(e<256)this.writeU8(199),this.writeU8(e);else if(e<65536)this.writeU8(200),this.writeU16(e);else{if(!(e<4294967296))throw new Error(\"Too large extension object: \"+e);this.writeU8(201),this.writeU32(e)}this.writeI8(t.type),this.writeU8a(t.data)},t.prototype.writeU8=function(t){this.ensureBufferSizeToWrite(1),this.view.setUint8(this.pos,t),this.pos++},t.prototype.writeU8a=function(t){var e=t.length;this.ensureBufferSizeToWrite(e),this.bytes.set(t,this.pos),this.pos+=e},t.prototype.writeI8=function(t){this.ensureBufferSizeToWrite(1),this.view.setInt8(this.pos,t),this.pos++},t.prototype.writeU16=function(t){this.ensureBufferSizeToWrite(2),this.view.setUint16(this.pos,t),this.pos+=2},t.prototype.writeI16=function(t){this.ensureBufferSizeToWrite(2),this.view.setInt16(this.pos,t),this.pos+=2},t.prototype.writeU32=function(t){this.ensureBufferSizeToWrite(4),this.view.setUint32(this.pos,t),this.pos+=4},t.prototype.writeI32=function(t){this.ensureBufferSizeToWrite(4),this.view.setInt32(this.pos,t),this.pos+=4},t.prototype.writeF32=function(t){this.ensureBufferSizeToWrite(4),this.view.setFloat32(this.pos,t),this.pos+=4},t.prototype.writeF64=function(t){this.ensureBufferSizeToWrite(8),this.view.setFloat64(this.pos,t),this.pos+=8},t.prototype.writeU64=function(t){this.ensureBufferSizeToWrite(8),function(t,e,n){var r=n/4294967296,s=n;t.setUint32(e,r),t.setUint32(e+4,s)}(this.view,this.pos,t),this.pos+=8},t.prototype.writeI64=function(t){this.ensureBufferSizeToWrite(8),f(this.view,this.pos,t),this.pos+=8},t}(),E={};function I(t,e){void 0===e&&(e=E);var n=new k(e.extensionCodec,e.context,e.maxDepth,e.initialBufferSize,e.sortKeys,e.forceFloat32,e.ignoreUndefined);return n.encode(t,1),n.getUint8Array()}function C(t){return(t<0?\"-\":\"\")+\"0x\"+Math.abs(t).toString(16).padStart(2,\"0\")}var N=function(){function t(t,e){void 0===t&&(t=16),void 0===e&&(e=16),this.maxKeyLength=t,this.maxLengthPerKey=e,this.caches=[];for(var n=0;n<this.maxKeyLength;n++)this.caches.push([])}return t.prototype.canBeCached=function(t){return t>0&&t<=this.maxKeyLength},t.prototype.get=function(t,e,n){var r=this.caches[n-1],s=r.length;t:for(var i=0;i<s;i++){for(var a=r[i],o=a.bytes,l=0;l<n;l++)if(o[l]!==t[e+l])continue t;return a.value}return null},t.prototype.store=function(t,e){var n=this.caches[t.length-1],r={bytes:t,value:e};n.length>=this.maxLengthPerKey?n[Math.random()*n.length|0]=r:n.push(r)},t.prototype.decode=function(t,e,n){var r=this.get(t,e,n);if(null!=r)return r;var s=c(t,e,n),i=Uint8Array.prototype.slice.call(t,e,e+n);return this.store(i,s),s},t}(),A=function(t,e){var n,r,s,i,a={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return i={next:o(0),throw:o(1),return:o(2)},\"function\"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function o(i){return function(o){return function(i){if(n)throw new TypeError(\"Generator is already executing.\");for(;a;)try{if(n=1,r&&(s=2&i[0]?r.return:i[0]?r.throw||((s=r.return)&&s.call(r),0):r.next)&&!(s=s.call(r,i[1])).done)return s;switch(r=0,s&&(i=[2&i[0],s.value]),i[0]){case 0:case 1:s=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((s=(s=a.trys).length>0&&s[s.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!s||i[1]>s[0]&&i[1]<s[3])){a.label=i[1];break}if(6===i[0]&&a.label<s[1]){a.label=s[1],s=i;break}if(s&&a.label<s[2]){a.label=s[2],a.ops.push(i);break}s[2]&&a.ops.pop(),a.trys.pop();continue}i=e.call(t,a)}catch(t){i=[6,t],r=0}finally{n=s=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,o])}}},R=function(t){if(!Symbol.asyncIterator)throw new TypeError(\"Symbol.asyncIterator is not defined.\");var e,n=t[Symbol.asyncIterator];return n?n.call(t):(t=\"function\"==typeof __values?__values(t):t[Symbol.iterator](),e={},r(\"next\"),r(\"throw\"),r(\"return\"),e[Symbol.asyncIterator]=function(){return this},e);function r(n){e[n]=t[n]&&function(e){return new Promise((function(r,s){!function(t,e,n,r){Promise.resolve(r).then((function(e){t({value:e,done:n})}),e)}(r,s,(e=t[n](e)).done,e.value)}))}}},L=function(t){return this instanceof L?(this.v=t,this):new L(t)},D=function(t,e,n){if(!Symbol.asyncIterator)throw new TypeError(\"Symbol.asyncIterator is not defined.\");var r,s=n.apply(t,e||[]),i=[];return r={},a(\"next\"),a(\"throw\"),a(\"return\"),r[Symbol.asyncIterator]=function(){return this},r;function a(t){s[t]&&(r[t]=function(e){return new Promise((function(n,r){i.push([t,e,n,r])>1||o(t,e)}))})}function o(t,e){try{(n=s[t](e)).value instanceof L?Promise.resolve(n.value.v).then(l,u):c(i[0][2],n)}catch(t){c(i[0][3],t)}var n}function l(t){o(\"next\",t)}function u(t){o(\"throw\",t)}function c(t,e){t(e),i.shift(),i.length&&o(i[0][0],i[0][1])}},F=new DataView(new ArrayBuffer(0)),$=new Uint8Array(F.buffer),O=function(){try{F.getInt8(0)}catch(t){return t.constructor}throw new Error(\"never reached\")}(),P=new O(\"Insufficient data\"),z=new N,B=function(){function t(t,e,n,r,s,i,a,o){void 0===t&&(t=T.defaultCodec),void 0===n&&(n=4294967295),void 0===r&&(r=4294967295),void 0===s&&(s=4294967295),void 0===i&&(i=4294967295),void 0===a&&(a=4294967295),void 0===o&&(o=z),this.extensionCodec=t,this.context=e,this.maxStrLength=n,this.maxBinLength=r,this.maxArrayLength=s,this.maxMapLength=i,this.maxExtLength=a,this.cachedKeyDecoder=o,this.totalPos=0,this.pos=0,this.view=F,this.bytes=$,this.headByte=-1,this.stack=[]}return t.prototype.setBuffer=function(t){this.bytes=_(t),this.view=function(t){if(t instanceof ArrayBuffer)return new DataView(t);var e=_(t);return new DataView(e.buffer,e.byteOffset,e.byteLength)}(this.bytes),this.pos=0},t.prototype.appendBuffer=function(t){if(-1!==this.headByte||this.hasRemaining()){var e=this.bytes.subarray(this.pos),n=_(t),r=new Uint8Array(e.length+n.length);r.set(e),r.set(n,e.length),this.setBuffer(r)}else this.setBuffer(t)},t.prototype.hasRemaining=function(t){return void 0===t&&(t=1),this.view.byteLength-this.pos>=t},t.prototype.createNoExtraBytesError=function(t){var e=this.view,n=this.pos;return new RangeError(\"Extra \"+(e.byteLength-n)+\" byte(s) found at buffer[\"+t+\"]\")},t.prototype.decodeSingleSync=function(){var t=this.decodeSync();if(this.hasRemaining())throw this.createNoExtraBytesError(this.pos);return t},t.prototype.decodeSingleAsync=function(t){var e,n,r,s;return function(t,e,n,r){return new(n||(n=Promise))((function(s,i){function a(t){try{l(r.next(t))}catch(t){i(t)}}function o(t){try{l(r.throw(t))}catch(t){i(t)}}function l(t){var e;t.done?s(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,o)}l((r=r.apply(t,e||[])).next())}))}(this,void 0,void 0,(function(){var i,a,o,l,u,c,h,d;return A(this,(function(p){switch(p.label){case 0:i=!1,p.label=1;case 1:p.trys.push([1,6,7,12]),e=R(t),p.label=2;case 2:return[4,e.next()];case 3:if((n=p.sent()).done)return[3,5];if(o=n.value,i)throw this.createNoExtraBytesError(this.totalPos);this.appendBuffer(o);try{a=this.decodeSync(),i=!0}catch(t){if(!(t instanceof O))throw t}this.totalPos+=this.pos,p.label=4;case 4:return[3,2];case 5:return[3,12];case 6:return l=p.sent(),r={error:l},[3,12];case 7:return p.trys.push([7,,10,11]),n&&!n.done&&(s=e.return)?[4,s.call(e)]:[3,9];case 8:p.sent(),p.label=9;case 9:return[3,11];case 10:if(r)throw r.error;return[7];case 11:return[7];case 12:if(i){if(this.hasRemaining())throw this.createNoExtraBytesError(this.totalPos);return[2,a]}throw c=(u=this).headByte,h=u.pos,d=u.totalPos,new RangeError(\"Insufficient data in parcing \"+C(c)+\" at \"+d+\" (\"+h+\" in the current buffer)\")}}))}))},t.prototype.decodeArrayStream=function(t){return this.decodeMultiAsync(t,!0)},t.prototype.decodeStream=function(t){return this.decodeMultiAsync(t,!1)},t.prototype.decodeMultiAsync=function(t,e){return D(this,arguments,(function(){var n,r,s,i,a,o,l,u,c;return A(this,(function(h){switch(h.label){case 0:n=e,r=-1,h.label=1;case 1:h.trys.push([1,13,14,19]),s=R(t),h.label=2;case 2:return[4,L(s.next())];case 3:if((i=h.sent()).done)return[3,12];if(a=i.value,e&&0===r)throw this.createNoExtraBytesError(this.totalPos);this.appendBuffer(a),n&&(r=this.readArraySize(),n=!1,this.complete()),h.label=4;case 4:h.trys.push([4,9,,10]),h.label=5;case 5:return[4,L(this.decodeSync())];case 6:return[4,h.sent()];case 7:return h.sent(),0==--r?[3,8]:[3,5];case 8:return[3,10];case 9:if(!((o=h.sent())instanceof O))throw o;return[3,10];case 10:this.totalPos+=this.pos,h.label=11;case 11:return[3,2];case 12:return[3,19];case 13:return l=h.sent(),u={error:l},[3,19];case 14:return h.trys.push([14,,17,18]),i&&!i.done&&(c=s.return)?[4,L(c.call(s))]:[3,16];case 15:h.sent(),h.label=16;case 16:return[3,18];case 17:if(u)throw u.error;return[7];case 18:return[7];case 19:return[2]}}))}))},t.prototype.decodeSync=function(){t:for(;;){var t=this.readHeadByte(),e=void 0;if(t>=224)e=t-256;else if(t<192)if(t<128)e=t;else if(t<144){if(0!=(r=t-128)){this.pushMapState(r),this.complete();continue t}e={}}else if(t<160){if(0!=(r=t-144)){this.pushArrayState(r),this.complete();continue t}e=[]}else{var n=t-160;e=this.decodeUtf8String(n,0)}else if(192===t)e=null;else if(194===t)e=!1;else if(195===t)e=!0;else if(202===t)e=this.readF32();else if(203===t)e=this.readF64();else if(204===t)e=this.readU8();else if(205===t)e=this.readU16();else if(206===t)e=this.readU32();else if(207===t)e=this.readU64();else if(208===t)e=this.readI8();else if(209===t)e=this.readI16();else if(210===t)e=this.readI32();else if(211===t)e=this.readI64();else if(217===t)n=this.lookU8(),e=this.decodeUtf8String(n,1);else if(218===t)n=this.lookU16(),e=this.decodeUtf8String(n,2);else if(219===t)n=this.lookU32(),e=this.decodeUtf8String(n,4);else if(220===t){if(0!==(r=this.readU16())){this.pushArrayState(r),this.complete();continue t}e=[]}else if(221===t){if(0!==(r=this.readU32())){this.pushArrayState(r),this.complete();continue t}e=[]}else if(222===t){if(0!==(r=this.readU16())){this.pushMapState(r),this.complete();continue t}e={}}else if(223===t){if(0!==(r=this.readU32())){this.pushMapState(r),this.complete();continue t}e={}}else if(196===t){var r=this.lookU8();e=this.decodeBinary(r,1)}else if(197===t)r=this.lookU16(),e=this.decodeBinary(r,2);else if(198===t)r=this.lookU32(),e=this.decodeBinary(r,4);else if(212===t)e=this.decodeExtension(1,0);else if(213===t)e=this.decodeExtension(2,0);else if(214===t)e=this.decodeExtension(4,0);else if(215===t)e=this.decodeExtension(8,0);else if(216===t)e=this.decodeExtension(16,0);else if(199===t)r=this.lookU8(),e=this.decodeExtension(r,1);else if(200===t)r=this.lookU16(),e=this.decodeExtension(r,2);else{if(201!==t)throw new Error(\"Unrecognized type byte: \"+C(t));r=this.lookU32(),e=this.decodeExtension(r,4)}this.complete();for(var s=this.stack;s.length>0;){var i=s[s.length-1];if(0===i.type){if(i.array[i.position]=e,i.position++,i.position!==i.size)continue t;s.pop(),e=i.array}else{if(1===i.type){if(void 0,\"string\"!=(a=typeof e)&&\"number\"!==a)throw new Error(\"The type of key must be string or number but \"+typeof e);i.key=e,i.type=2;continue t}if(i.map[i.key]=e,i.readCount++,i.readCount!==i.size){i.key=null,i.type=1;continue t}s.pop(),e=i.map}}return e}var a},t.prototype.readHeadByte=function(){return-1===this.headByte&&(this.headByte=this.readU8()),this.headByte},t.prototype.complete=function(){this.headByte=-1},t.prototype.readArraySize=function(){var t=this.readHeadByte();switch(t){case 220:return this.readU16();case 221:return this.readU32();default:if(t<160)return t-144;throw new Error(\"Unrecognized array type byte: \"+C(t))}},t.prototype.pushMapState=function(t){if(t>this.maxMapLength)throw new Error(\"Max length exceeded: map length (\"+t+\") > maxMapLengthLength (\"+this.maxMapLength+\")\");this.stack.push({type:1,size:t,key:null,readCount:0,map:{}})},t.prototype.pushArrayState=function(t){if(t>this.maxArrayLength)throw new Error(\"Max length exceeded: array length (\"+t+\") > maxArrayLength (\"+this.maxArrayLength+\")\");this.stack.push({type:0,size:t,array:new Array(t),position:0})},t.prototype.decodeUtf8String=function(t,e){var n;if(t>this.maxStrLength)throw new Error(\"Max length exceeded: UTF-8 byte length (\"+t+\") > maxStrLength (\"+this.maxStrLength+\")\");if(this.bytes.byteLength<this.pos+e+t)throw P;var r,s=this.pos+e;return r=this.stateIsMapKey()&&(null===(n=this.cachedKeyDecoder)||void 0===n?void 0:n.canBeCached(t))?this.cachedKeyDecoder.decode(this.bytes,s,t):i&&t>d?function(t,e,n){var r=t.subarray(e,e+n);return h.decode(r)}(this.bytes,s,t):c(this.bytes,s,t),this.pos+=e+t,r},t.prototype.stateIsMapKey=function(){return this.stack.length>0&&1===this.stack[this.stack.length-1].type},t.prototype.decodeBinary=function(t,e){if(t>this.maxBinLength)throw new Error(\"Max length exceeded: bin length (\"+t+\") > maxBinLength (\"+this.maxBinLength+\")\");if(!this.hasRemaining(t+e))throw P;var n=this.pos+e,r=this.bytes.subarray(n,n+t);return this.pos+=e+t,r},t.prototype.decodeExtension=function(t,e){if(t>this.maxExtLength)throw new Error(\"Max length exceeded: ext length (\"+t+\") > maxExtLength (\"+this.maxExtLength+\")\");var n=this.view.getInt8(this.pos+e),r=this.decodeBinary(t,e+1);return this.extensionCodec.decode(r,n,this.context)},t.prototype.lookU8=function(){return this.view.getUint8(this.pos)},t.prototype.lookU16=function(){return this.view.getUint16(this.pos)},t.prototype.lookU32=function(){return this.view.getUint32(this.pos)},t.prototype.readU8=function(){var t=this.view.getUint8(this.pos);return this.pos++,t},t.prototype.readI8=function(){var t=this.view.getInt8(this.pos);return this.pos++,t},t.prototype.readU16=function(){var t=this.view.getUint16(this.pos);return this.pos+=2,t},t.prototype.readI16=function(){var t=this.view.getInt16(this.pos);return this.pos+=2,t},t.prototype.readU32=function(){var t=this.view.getUint32(this.pos);return this.pos+=4,t},t.prototype.readI32=function(){var t=this.view.getInt32(this.pos);return this.pos+=4,t},t.prototype.readU64=function(){var t,e,n=(t=this.view,e=this.pos,4294967296*t.getUint32(e)+t.getUint32(e+4));return this.pos+=8,n},t.prototype.readI64=function(){var t=m(this.view,this.pos);return this.pos+=8,t},t.prototype.readF32=function(){var t=this.view.getFloat32(this.pos);return this.pos+=4,t},t.prototype.readF64=function(){var t=this.view.getFloat64(this.pos);return this.pos+=8,t},t}(),U={};function V(t,e){void 0===e&&(e=U);var n=new B(e.extensionCodec,e.context,e.maxStrLength,e.maxBinLength,e.maxArrayLength,e.maxMapLength,e.maxExtLength);return n.setBuffer(t),n.decodeSingleSync()}var W=function(t,e){var n,r,s,i,a={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return i={next:o(0),throw:o(1),return:o(2)},\"function\"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function o(i){return function(o){return function(i){if(n)throw new TypeError(\"Generator is already executing.\");for(;a;)try{if(n=1,r&&(s=2&i[0]?r.return:i[0]?r.throw||((s=r.return)&&s.call(r),0):r.next)&&!(s=s.call(r,i[1])).done)return s;switch(r=0,s&&(i=[2&i[0],s.value]),i[0]){case 0:case 1:s=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((s=(s=a.trys).length>0&&s[s.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!s||i[1]>s[0]&&i[1]<s[3])){a.label=i[1];break}if(6===i[0]&&a.label<s[1]){a.label=s[1],s=i;break}if(s&&a.label<s[2]){a.label=s[2],a.ops.push(i);break}s[2]&&a.ops.pop(),a.trys.pop();continue}i=e.call(t,a)}catch(t){i=[6,t],r=0}finally{n=s=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,o])}}},G=function(t){return this instanceof G?(this.v=t,this):new G(t)},H=function(t,e,n){if(!Symbol.asyncIterator)throw new TypeError(\"Symbol.asyncIterator is not defined.\");var r,s=n.apply(t,e||[]),i=[];return r={},a(\"next\"),a(\"throw\"),a(\"return\"),r[Symbol.asyncIterator]=function(){return this},r;function a(t){s[t]&&(r[t]=function(e){return new Promise((function(n,r){i.push([t,e,n,r])>1||o(t,e)}))})}function o(t,e){try{(n=s[t](e)).value instanceof G?Promise.resolve(n.value.v).then(l,u):c(i[0][2],n)}catch(t){c(i[0][3],t)}var n}function l(t){o(\"next\",t)}function u(t){o(\"throw\",t)}function c(t,e){t(e),i.shift(),i.length&&o(i[0][0],i[0][1])}};function j(t){if(null==t)throw new Error(\"Assertion Failure: value must not be null nor undefined\")}function q(t){return null!=t[Symbol.asyncIterator]?t:function(t){return H(this,arguments,(function(){var e,n,r,s;return W(this,(function(i){switch(i.label){case 0:e=t.getReader(),i.label=1;case 1:i.trys.push([1,,9,10]),i.label=2;case 2:return[4,G(e.read())];case 3:return n=i.sent(),r=n.done,s=n.value,r?[4,G(void 0)]:[3,5];case 4:return[2,i.sent()];case 5:return j(s),[4,G(s)];case 6:return[4,i.sent()];case 7:return i.sent(),[3,2];case 8:return[3,10];case 9:return e.releaseLock(),[7];case 10:return[2]}}))}))}(t)}function X(t,e){return void 0===e&&(e=U),function(t,e,n,r){return new(n||(n=Promise))((function(s,i){function a(t){try{l(r.next(t))}catch(t){i(t)}}function o(t){try{l(r.throw(t))}catch(t){i(t)}}function l(t){var e;t.done?s(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,o)}l((r=r.apply(t,e||[])).next())}))}(this,void 0,void 0,(function(){var n;return function(t,e){var n,r,s,i,a={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return i={next:o(0),throw:o(1),return:o(2)},\"function\"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function o(i){return function(o){return function(i){if(n)throw new TypeError(\"Generator is already executing.\");for(;a;)try{if(n=1,r&&(s=2&i[0]?r.return:i[0]?r.throw||((s=r.return)&&s.call(r),0):r.next)&&!(s=s.call(r,i[1])).done)return s;switch(r=0,s&&(i=[2&i[0],s.value]),i[0]){case 0:case 1:s=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((s=(s=a.trys).length>0&&s[s.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!s||i[1]>s[0]&&i[1]<s[3])){a.label=i[1];break}if(6===i[0]&&a.label<s[1]){a.label=s[1],s=i;break}if(s&&a.label<s[2]){a.label=s[2],a.ops.push(i);break}s[2]&&a.ops.pop(),a.trys.pop();continue}i=e.call(t,a)}catch(t){i=[6,t],r=0}finally{n=s=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,o])}}}(this,(function(r){return n=q(t),[2,new B(e.extensionCodec,e.context,e.maxStrLength,e.maxBinLength,e.maxArrayLength,e.maxMapLength,e.maxExtLength).decodeSingleAsync(n)]}))}))}function K(t,e){void 0===e&&(e=U);var n=q(t);return new B(e.extensionCodec,e.context,e.maxStrLength,e.maxBinLength,e.maxArrayLength,e.maxMapLength,e.maxExtLength).decodeArrayStream(n)}function Y(t,e){void 0===e&&(e=U);var n=q(t);return new B(e.extensionCodec,e.context,e.maxStrLength,e.maxBinLength,e.maxArrayLength,e.maxMapLength,e.maxExtLength).decodeStream(n)}}])},75042:(t,e,n)=>{\"use strict\";n.r(e),n.d(e,{Abs:()=>Zt,Acos:()=>Jt,Acosh:()=>Qt,AdadeltaOptimizer:()=>yl,AdagradOptimizer:()=>bl,AdamOptimizer:()=>Sl,AdamaxOptimizer:()=>Il,Add:()=>te,AddN:()=>ee,All:()=>ne,Any:()=>re,ArgMax:()=>se,ArgMin:()=>ie,Asin:()=>ae,Asinh:()=>oe,Atan:()=>le,Atan2:()=>ce,Atanh:()=>ue,AvgPool:()=>he,AvgPool3D:()=>pe,AvgPool3DGrad:()=>fe,AvgPoolGrad:()=>de,BatchMatMul:()=>me,BatchToSpaceND:()=>ge,Bincount:()=>ye,BroadcastArgs:()=>be,BroadcastTo:()=>xe,Callback:()=>eT,CallbackList:()=>ex,Cast:()=>ve,Ceil:()=>we,ClipByValue:()=>Se,Complex:()=>Te,ComplexAbs:()=>_e,Concat:()=>Me,Conv2D:()=>ke,Conv2DBackpropFilter:()=>Ee,Conv2DBackpropInput:()=>Ie,Conv3D:()=>Ce,Conv3DBackpropFilterV2:()=>Ne,Conv3DBackpropInputV2:()=>Ae,Cos:()=>Re,Cosh:()=>Le,CropAndResize:()=>Fe,Cumsum:()=>De,CustomCallback:()=>sx,DataStorage:()=>H,DenseBincount:()=>$e,DepthToSpace:()=>Oe,DepthwiseConv2dNative:()=>Pe,DepthwiseConv2dNativeBackpropFilter:()=>ze,DepthwiseConv2dNativeBackpropInput:()=>Be,Diag:()=>Ue,Dilation2D:()=>Ve,Dilation2DBackpropFilter:()=>Ge,Dilation2DBackpropInput:()=>We,ENV:()=>Xt,EarlyStopping:()=>sT,Einsum:()=>je,Elu:()=>qe,EluGrad:()=>Xe,Environment:()=>Gt,Equal:()=>Ye,Erf:()=>Ke,Exp:()=>Ze,ExpandDims:()=>Je,Expm1:()=>Qe,FFT:()=>tn,Fill:()=>en,FlipLeftRight:()=>nn,Floor:()=>rn,FloorDiv:()=>sn,FromPixels:()=>Jr,FusedBatchNorm:()=>an,FusedConv2D:()=>es,FusedDepthwiseConv2D:()=>ns,GatherNd:()=>ln,GatherV2:()=>on,GraphModel:()=>v_,Greater:()=>un,GreaterEqual:()=>cn,History:()=>rx,IFFT:()=>dn,Identity:()=>hn,Imag:()=>pn,InputSpec:()=>Vy,IsFinite:()=>fn,IsInf:()=>mn,IsNan:()=>gn,KernelBackend:()=>j,LRN:()=>En,LRNGrad:()=>In,LayerVariable:()=>zy,LayersModel:()=>ub,LeakyRelu:()=>yn,Less:()=>xn,LessEqual:()=>bn,LinSpace:()=>vn,Log:()=>wn,Log1p:()=>Sn,LogSoftmax:()=>kn,LogicalAnd:()=>Tn,LogicalNot:()=>_n,LogicalOr:()=>Mn,Max:()=>Cn,MaxPool:()=>An,MaxPool3D:()=>Ln,MaxPool3DGrad:()=>Dn,MaxPoolGrad:()=>Rn,MaxPoolWithArgmax:()=>Fn,Maximum:()=>Nn,Mean:()=>$n,Min:()=>On,Minimum:()=>Pn,MirrorPad:()=>zn,Mod:()=>Bn,MomentumOptimizer:()=>Nl,Multinomial:()=>Un,Multiply:()=>Vn,Neg:()=>Wn,NonMaxSuppressionV3:()=>Hn,NonMaxSuppressionV4:()=>jn,NonMaxSuppressionV5:()=>qn,NotEqual:()=>Gn,OP_SCOPE_SUFFIX:()=>Si,OneHot:()=>Kn,OnesLike:()=>Xn,Optimizer:()=>gl,Pack:()=>Yn,PadV2:()=>Zn,Pool:()=>Jn,Pow:()=>Qn,Prelu:()=>tr,Prod:()=>er,RMSPropOptimizer:()=>Al,RNN:()=>mv,Range:()=>nr,Rank:()=>Ks,Real:()=>rr,RealDiv:()=>He,Reciprocal:()=>sr,Reduction:()=>ep,Relu:()=>ir,Relu6:()=>hr,Reshape:()=>ar,ResizeBilinear:()=>ur,ResizeBilinearGrad:()=>cr,ResizeNearestNeighbor:()=>or,ResizeNearestNeighborGrad:()=>lr,Reverse:()=>dr,RotateWithOffset:()=>Qr,Round:()=>pr,Rsqrt:()=>fr,SGDOptimizer:()=>Cl,ScatterNd:()=>mr,Select:()=>gr,Selu:()=>yr,Sequential:()=>db,Sigmoid:()=>Sr,Sign:()=>wr,Sin:()=>br,Sinh:()=>vr,Slice:()=>xr,Softmax:()=>Ir,Softplus:()=>Tr,SpaceToBatchND:()=>kr,SparseFillEmptyRows:()=>Cr,SparseReshape:()=>Nr,SparseSegmentMean:()=>Ar,SparseSegmentSum:()=>Rr,SparseToDense:()=>Lr,SplitV:()=>Er,Sqrt:()=>_r,Square:()=>Fr,SquaredDifference:()=>Dr,Step:()=>Zr,StridedSlice:()=>$r,StringNGrams:()=>Or,StringSplit:()=>Pr,StringToHashBucketFast:()=>zr,Sub:()=>Br,Sum:()=>Mr,SymbolicTensor:()=>Wy,Tan:()=>Ur,Tanh:()=>Vr,Tensor:()=>js,TensorBuffer:()=>Vs,Tile:()=>Wr,TopK:()=>Gr,Transform:()=>Hr,Transpose:()=>jr,Unique:()=>qr,Unpack:()=>Xr,UnsortedSegmentSum:()=>Kr,Variable:()=>Xs,ZerosLike:()=>Yr,_FusedMatMul:()=>ts,abs:()=>Tl,acos:()=>Rl,acosh:()=>Ll,add:()=>el,addN:()=>Dl,all:()=>Fl,any:()=>$l,argMax:()=>Ol,argMin:()=>Pl,asin:()=>zl,asinh:()=>Bl,atan:()=>Ul,atan2:()=>Vl,atanh:()=>Wl,avgPool:()=>su,avgPool3d:()=>iu,backend:()=>Qo,backend_util:()=>g,basicLSTMCell:()=>cu,batchNorm:()=>du,batchNorm2d:()=>pu,batchNorm3d:()=>fu,batchNorm4d:()=>mu,batchToSpaceND:()=>hu,bincount:()=>gu,booleanMaskAsync:()=>id,broadcastArgs:()=>yu,broadcastTo:()=>xu,browser:()=>l,buffer:()=>wa,callbacks:()=>iT,cast:()=>Sa,ceil:()=>bu,clipByValue:()=>vu,clone:()=>Ta,complex:()=>_i,concat:()=>au,concat1d:()=>wu,concat2d:()=>Su,concat3d:()=>Tu,concat4d:()=>_u,constraints:()=>x,conv1d:()=>ku,conv2d:()=>Mu,conv2dTranspose:()=>Iu,conv3d:()=>Cu,conv3dTranspose:()=>Au,copyRegisteredKernels:()=>ds,cos:()=>Ru,cosh:()=>Lu,cosineWindow:()=>fd,cumsum:()=>Du,customGrad:()=>pl,data:()=>W,denseBincount:()=>Fu,deprecationWarn:()=>Oo,depthToSpace:()=>$u,depthwiseConv2d:()=>Ou,deregisterOp:()=>hT,device_util:()=>i,diag:()=>Pu,dilation2d:()=>zu,disableDeprecationWarnings:()=>$o,dispose:()=>Wo,disposeVariables:()=>Po,div:()=>rl,divNoNan:()=>Vu,dot:()=>Wu,dropout:()=>dd,einsum:()=>Gu,elu:()=>Hu,enableDebugMode:()=>Fo,enableProdMode:()=>Do,enclosingPowerOfTwo:()=>pd,engine:()=>zo,env:()=>jt,equal:()=>Bu,erf:()=>ju,exp:()=>qu,expandDims:()=>Xu,expm1:()=>Ku,eye:()=>Zu,fft:()=>Fh,fill:()=>xl,findBackend:()=>Yo,findBackendFactory:()=>Zo,floor:()=>Ju,floorDiv:()=>nl,fused:()=>f,gather:()=>Qu,gatherND:()=>hd,gather_util:()=>u,getBackend:()=>Xo,getGradient:()=>as,getKernel:()=>is,getKernelsForBackend:()=>os,grad:()=>ll,grads:()=>ul,greater:()=>tc,greaterEqual:()=>ec,ifft:()=>$h,imag:()=>nc,image:()=>vp,inTopKAsync:()=>md,initializers:()=>b,input:()=>gb,io:()=>a,irfft:()=>Oh,isFinite:()=>rc,isInf:()=>sc,isNaN:()=>ic,keep:()=>Go,kernel_impls:()=>y,layers:()=>v,leakyRelu:()=>ac,less:()=>oc,lessEqual:()=>lc,linalg:()=>wp,linspace:()=>uc,loadGraphModel:()=>w_,loadLayersModel:()=>mb,localResponseNormalization:()=>cc,log:()=>hc,log1p:()=>dc,logSigmoid:()=>mc,logSoftmax:()=>xc,logSumExp:()=>Ec,logicalAnd:()=>Ic,logicalNot:()=>Cc,logicalOr:()=>Nc,logicalXor:()=>Ac,losses:()=>Sp,matMul:()=>Va,math:()=>o,max:()=>gc,maxPool:()=>Rc,maxPool3d:()=>Lc,maxPoolWithArgmax:()=>Dc,maximum:()=>El,mean:()=>Fc,memory:()=>Bo,meshgrid:()=>Pc,metrics:()=>w,min:()=>zc,minimum:()=>Bc,mirrorPad:()=>Uc,mod:()=>Vc,model:()=>pb,models:()=>S,moments:()=>Wc,movingAverage:()=>ld,mul:()=>sl,multiRNNCell:()=>Gc,multinomial:()=>Hc,neg:()=>pc,nextFrame:()=>Ip,norm:()=>od,notEqual:()=>jc,oneHot:()=>Wa,ones:()=>Oc,onesLike:()=>qc,op:()=>Ti,outerProduct:()=>Xc,pad:()=>Kc,pad1d:()=>Yc,pad2d:()=>Zc,pad3d:()=>Jc,pad4d:()=>Qc,pool:()=>eh,pow:()=>vl,prelu:()=>nh,print:()=>_a,prod:()=>rh,profile:()=>Uo,rand:()=>sh,randomGamma:()=>uh,randomNormal:()=>ch,randomUniform:()=>hh,range:()=>dh,ready:()=>qo,real:()=>ph,reciprocal:()=>fh,registerBackend:()=>Jo,registerCallbackConstructor:()=>yb,registerGradient:()=>us,registerKernel:()=>ls,registerOp:()=>uT,regularizers:()=>T,relu:()=>mh,relu6:()=>gh,removeBackend:()=>Ko,reshape:()=>ru,reverse:()=>yh,reverse1d:()=>xh,reverse2d:()=>bh,reverse3d:()=>vh,reverse4d:()=>wh,rfft:()=>zh,round:()=>Sh,rsqrt:()=>Th,scalar:()=>ml,scatterND:()=>ud,scatter_util:()=>c,selu:()=>_h,separableConv2d:()=>Mh,sequential:()=>fb,serialization:()=>d,setBackend:()=>jo,setPlatform:()=>tl,setdiff1dAsync:()=>kh,sigmoid:()=>ou,sign:()=>Eh,signal:()=>bp,sin:()=>Ih,sinh:()=>Ch,slice:()=>lu,slice1d:()=>Nh,slice2d:()=>Ah,slice3d:()=>Rh,slice4d:()=>Lh,slice_util:()=>h,softmax:()=>Dh,softplus:()=>fc,spaceToBatchND:()=>th,sparse:()=>Tp,sparseToDense:()=>cd,spectral:()=>xp,split:()=>Ph,sqrt:()=>il,square:()=>al,squaredDifference:()=>Bh,squeeze:()=>Uh,stack:()=>Vh,step:()=>Wh,stridedSlice:()=>Gh,string:()=>_p,sub:()=>wl,sum:()=>yc,sumOutType:()=>ni,tan:()=>Hh,tanh:()=>uu,tensor:()=>ki,tensor1d:()=>jh,tensor2d:()=>qh,tensor3d:()=>ja,tensor4d:()=>Xh,tensor5d:()=>Kh,tensor6d:()=>Yh,tensor_util:()=>s,test_util:()=>p,tidy:()=>Vo,tile:()=>Yu,time:()=>Ho,topk:()=>Zh,train:()=>kp,transpose:()=>Ga,truncatedNormal:()=>Jh,unique:()=>Qh,unregisterGradient:()=>hs,unregisterKernel:()=>cs,unsortedSegmentSum:()=>td,unstack:()=>ed,upcastType:()=>ei,util:()=>r,valueAndGrad:()=>cl,valueAndGrads:()=>hl,variable:()=>nd,variableGrads:()=>dl,version:()=>vB,version_converter:()=>S_,version_core:()=>Lo,version_layers:()=>Px,where:()=>Uu,whereAsync:()=>sd,zeros:()=>$c,zerosLike:()=>ol});var r={};n.r(r),n.d(r,{arraysEqual:()=>lt,assert:()=>nt,assertNonNegativeIntegerDimensions:()=>Pt,assertNonNull:()=>st,assertShapesMatch:()=>rt,bytesFromStringArray:()=>Mt,bytesPerElement:()=>_t,checkConversionForErrors:()=>vt,clamp:()=>Y,computeStrides:()=>Rt,createScalarValue:()=>Is,createShuffledIndices:()=>dt,decodeString:()=>Ls,distSquared:()=>et,encodeString:()=>Rs,fetch:()=>As,fingerPrint64:()=>Es,flatten:()=>it,getArrayFromDType:()=>bt,getTypedArrayFromDType:()=>xt,hasEncodingLoss:()=>St,hexToLong:()=>gs,indexToLoc:()=>Bt,inferDtype:()=>Ct,inferFromImplicitShape:()=>mt,isBoolean:()=>Et,isFunction:()=>Nt,isInt:()=>ut,isNumber:()=>It,isPromise:()=>Ut,isScalarShape:()=>ot,isString:()=>kt,isTypedArray:()=>Tt,isValidDtype:()=>wt,locToIndex:()=>zt,makeOnesTypedArray:()=>Ft,makeZerosNestedTypedArray:()=>Ot,makeZerosTypedArray:()=>$t,nearestDivisor:()=>At,nearestLargerEven:()=>Z,now:()=>Ns,parseAxisParam:()=>gt,randUniform:()=>tt,repeatedTry:()=>ft,rightPad:()=>pt,shuffle:()=>X,shuffleCombo:()=>K,sizeFromShape:()=>at,sizeToSquarishShape:()=>ht,squeezeShape:()=>yt,sum:()=>Q,swap:()=>J,tanh:()=>ct,toNestedArray:()=>Dt,toTypedArray:()=>Cs});var s={};n.r(s),n.d(s,{assertTypesMatch:()=>si,getTensorsInContainer:()=>ai,isTensorInList:()=>ii,makeTypesMatch:()=>ri});var i={};n.r(i),n.d(i,{isBrowser:()=>mi,isMobile:()=>fi});var a={};n.r(a),n.d(a,{browserFiles:()=>Ia,browserHTTPRequest:()=>Oa,concatenateArrayBuffers:()=>Li,copyModel:()=>ya,decodeWeights:()=>Ci,encodeWeights:()=>Ii,fromMemory:()=>Ba,getLoadHandlers:()=>Wi,getModelArtifactsForJSON:()=>$i,getModelArtifactsInfoForJSON:()=>Oi,getSaveHandlers:()=>Vi,http:()=>$a,isHTTPScheme:()=>Da,listModels:()=>ma,loadWeights:()=>Aa,moveModel:()=>xa,registerLoadRouter:()=>Ui,registerSaveRouter:()=>Bi,removeModel:()=>ga,weightsLoaderFactory:()=>Ra,withSaveHandler:()=>Ua});var o={};n.r(o),n.d(o,{confusionMatrix:()=>Ha});var l={};n.r(l),n.d(l,{fromPixels:()=>Za,fromPixelsAsync:()=>Ka,toPixels:()=>Ya});var u={};n.r(u),n.d(u,{prepareAndValidate:()=>Ja});var c={};n.r(c),n.d(c,{calculateShapes:()=>eo,validateInput:()=>to,validateUpdateShape:()=>Qa});var h={};n.r(h),n.d(h,{assertParamsValid:()=>no,computeFlatOffset:()=>go,computeOutShape:()=>so,getNormalizedAxes:()=>lo,isSliceContinous:()=>mo,maskToAxes:()=>ro,parseSliceParams:()=>yo,sliceInfo:()=>xo,startForAxis:()=>po,startIndicesWithElidedDims:()=>uo,stopForAxis:()=>fo,stopIndicesWithElidedDims:()=>co,stridesForAxis:()=>ho,stridesWithElidedDims:()=>io});var d={};n.r(d),n.d(d,{Serializable:()=>bo,SerializationMap:()=>vo,registerClass:()=>wo});var p={};n.r(p),n.d(p,{TEST_EPSILON_FLOAT16:()=>So,encodeStrings:()=>Ro,expectArrayBuffersEqual:()=>Ao,expectArraysClose:()=>To,expectArraysEqual:()=>Eo,expectNumbersClose:()=>Io,expectPromiseToFail:()=>ko,expectValuesInRange:()=>No,testEpsilon:()=>_o});var f={};n.r(f),n.d(f,{conv2d:()=>wd,depthwiseConv2d:()=>_d,matMul:()=>Md});var m={};n.r(m),n.d(m,{collectGatherOpShapeInfo:()=>df,computeOutShape:()=>hf,segOpComputeOptimalWindowSize:()=>cf});var g={};n.r(g),n.d(g,{ERF_A1:()=>Vp,ERF_A2:()=>Wp,ERF_A3:()=>Gp,ERF_A4:()=>Hp,ERF_A5:()=>jp,ERF_P:()=>Up,PARALLELIZE_THRESHOLD:()=>Ap,SELU_SCALE:()=>Bp,SELU_SCALEALPHA:()=>zp,applyActivation:()=>bd,assertAndGetBroadcastShape:()=>kl,assertAxesAreInnerMostDims:()=>Tc,assertParamsConsistent:()=>Cp,assignToTypedArray:()=>Jp,axesAreInnerMostDims:()=>bc,calculateShapes:()=>eo,checkEinsumDimSizes:()=>sf,combineLocations:()=>vc,complexWithEvenIndex:()=>Kp,complexWithOddIndex:()=>Yp,computeConv2DInfo:()=>ql,computeConv3DInfo:()=>Xl,computeDefaultPad:()=>Kl,computeDilation2DInfo:()=>Gl,computeOptimalWindowSize:()=>Rp,computeOutAndReduceShapes:()=>wc,computeOutShape:()=>Np,computePool2DInfo:()=>Hl,computePool3DInfo:()=>jl,convertConv2DDataFormat:()=>nu,decodeEinsumEquation:()=>nf,eitherStridesOrDilationsAreOne:()=>eu,expandShapeToKeepDim:()=>Sc,exponent:()=>tf,exponents:()=>Qp,fromStringArrayToUint8:()=>ff,fromUint8ToStringArray:()=>pf,getAxesPermutation:()=>_c,getBroadcastDims:()=>_l,getComplexWithIndex:()=>Zp,getEinsumComputePath:()=>af,getEinsumPermutation:()=>rf,getFusedBiasGradient:()=>xd,getFusedDyActivation:()=>yd,getImageCenter:()=>Lp,getInnerMostAxes:()=>kc,getPermuted:()=>Fp,getReductionAxes:()=>Ml,getReshaped:()=>Dp,getReshapedPermuted:()=>$p,getSliceBeginCoords:()=>Op,getSliceSize:()=>Pp,getUndoAxesPermutation:()=>Mc,isIdentityPermutation:()=>of,log:()=>Wt,mergeRealAndImagArrays:()=>qp,prepareAndValidate:()=>Ja,prepareSplitSize:()=>uf,segment_util:()=>m,shouldFuse:()=>vd,slice_util:()=>h,splitRealAndImagArrays:()=>Xp,tupleValuesAreOne:()=>tu,upcastType:()=>ei,validateInput:()=>to,validateUpdateShape:()=>Qa,warn:()=>Vt});var y={};n.r(y),n.d(y,{nonMaxSuppressionV3Impl:()=>Pd,nonMaxSuppressionV4Impl:()=>zd,nonMaxSuppressionV5Impl:()=>Bd,whereImpl:()=>rd});var x={};n.r(x),n.d(x,{maxNorm:()=>lg,minMaxNorm:()=>hg,nonNeg:()=>cg,unitNorm:()=>ug});var b={};n.r(b),n.d(b,{constant:()=>yy,glorotNormal:()=>_y,glorotUniform:()=>Ty,heNormal:()=>My,heUniform:()=>ky,identity:()=>wy,leCunNormal:()=>Ey,leCunUniform:()=>Iy,ones:()=>gy,orthogonal:()=>Cy,randomNormal:()=>by,randomUniform:()=>xy,truncatedNormal:()=>vy,varianceScaling:()=>Sy,zeros:()=>my});var v={};n.r(v),n.d(v,{Layer:()=>qy,RNN:()=>mv,RNNCell:()=>gv,activation:()=>$w,add:()=>Hw,alphaDropout:()=>FS,average:()=>jw,averagePooling1d:()=>eS,averagePooling2d:()=>sS,averagePooling3d:()=>oS,avgPool1d:()=>nS,avgPool2d:()=>iS,avgPool3d:()=>lS,avgPooling1d:()=>rS,avgPooling2d:()=>aS,avgPooling3d:()=>uS,batchNormalization:()=>Jw,bidirectional:()=>ES,concatenate:()=>qw,conv1d:()=>Ew,conv2d:()=>Iw,conv2dTranspose:()=>Cw,conv3d:()=>Nw,conv3dTranspose:()=>Aw,convLstm2d:()=>TS,convLstm2dCell:()=>_S,cropping2D:()=>Lw,dense:()=>Ow,depthwiseConv2d:()=>Fw,dot:()=>Zw,dropout:()=>Pw,elu:()=>ww,embedding:()=>Gw,flatten:()=>Bw,gaussianDropout:()=>DS,gaussianNoise:()=>LS,globalAveragePooling1d:()=>cS,globalAveragePooling2d:()=>hS,globalMaxPool1d:()=>CS,globalMaxPool2d:()=>NS,globalMaxPooling1d:()=>dS,globalMaxPooling2d:()=>pS,gru:()=>yS,gruCell:()=>xS,input:()=>gb,inputLayer:()=>vw,layerNormalization:()=>Qw,leakyReLU:()=>Tw,lstm:()=>bS,lstmCell:()=>vS,masking:()=>$S,maxPool1d:()=>AS,maxPool2d:()=>RS,maxPooling1d:()=>fS,maxPooling2d:()=>mS,maxPooling3d:()=>gS,maximum:()=>Xw,minimum:()=>Kw,multiply:()=>Yw,permute:()=>Ww,prelu:()=>_w,reLU:()=>Sw,repeatVector:()=>Uw,reshape:()=>Vw,rnn:()=>MS,separableConv2d:()=>Rw,simpleRNN:()=>wS,simpleRNNCell:()=>SS,softmax:()=>Mw,spatialDropout1d:()=>zw,stackedRNNCells:()=>kS,thresholdedReLU:()=>kw,timeDistributed:()=>IS,upSampling2d:()=>Dw,zeroPadding2d:()=>tS});var w={};n.r(w),n.d(w,{MAPE:()=>qS,MSE:()=>YS,binaryAccuracy:()=>OS,binaryCrossentropy:()=>PS,categoricalAccuracy:()=>BS,categoricalCrossentropy:()=>US,cosineProximity:()=>GS,mape:()=>XS,meanAbsoluteError:()=>HS,meanAbsolutePercentageError:()=>jS,meanSquaredError:()=>KS,mse:()=>ZS,precision:()=>VS,recall:()=>WS,sparseCategoricalAccuracy:()=>zS});var S={};n.r(S),n.d(S,{modelFromJSON:()=>hb});var T={};n.r(T),n.d(T,{l1:()=>QS,l1l2:()=>JS,l2:()=>tT});var _={};n.r(_),n.d(_,{json:()=>bT});var M={};n.r(M),n.d(M,{json:()=>vT});var k={};n.r(k),n.d(k,{json:()=>wT});var E={};n.r(E),n.d(E,{json:()=>ST});var I={};n.r(I),n.d(I,{json:()=>TT});var C={};n.r(C),n.d(C,{json:()=>_T});var N={};n.r(N),n.d(N,{json:()=>MT});var A={};n.r(A),n.d(A,{json:()=>kT});var R={};n.r(R),n.d(R,{json:()=>ET});var L={};n.r(L),n.d(L,{json:()=>IT});var D={};n.r(D),n.d(D,{json:()=>CT});var F={};n.r(F),n.d(F,{json:()=>NT});var $={};n.r($),n.d($,{json:()=>AT});var O={};n.r(O),n.d(O,{json:()=>RT});var P={};n.r(P),n.d(P,{json:()=>LT});var z={};n.r(z),n.d(z,{json:()=>DT});var B={};n.r(B),n.d(B,{json:()=>FT});var U={};n.r(U),n.d(U,{json:()=>$T});var V={};n.r(V),n.d(V,{json:()=>OT});var W={};n.r(W),n.d(W,{CSVDataset:()=>cM,Dataset:()=>J_,FileDataSource:()=>SM,TextLineDataset:()=>rM,URLDataSource:()=>TM,array:()=>tM,csv:()=>_M,func:()=>MM,generator:()=>kM,microphone:()=>IM,version_data:()=>CM,webcam:()=>EM,zip:()=>eM});var G={};n.r(G),n.d(G,{addImpl:()=>uk,bincountImpl:()=>eE,bincountReduceImpl:()=>nE,ceilImpl:()=>iE,concatImpl:()=>hE,equalImpl:()=>qE,expImpl:()=>sI,expm1Impl:()=>uI,floorImpl:()=>kI,gatherNdImpl:()=>DI,gatherV2Impl:()=>$I,greaterEqualImpl:()=>UI,greaterImpl:()=>PI,lessEqualImpl:()=>tC,lessImpl:()=>ZI,linSpaceImpl:()=>rC,logImpl:()=>iC,maxImpl:()=>vC,maximumImpl:()=>TC,minimumImpl:()=>LC,multiplyImpl:()=>zE,negImpl:()=>WC,notEqualImpl:()=>ZC,prodImpl:()=>cN,rangeImpl:()=>dN,rsqrtImpl:()=>_N,sigmoidImpl:()=>YM,simpleAbsImpl:()=>xk,sliceImpl:()=>Zk,sparseFillEmptyRowsImpl:()=>GN,sparseReshapeImpl:()=>jN,sparseSegmentReductionImpl:()=>XN,sqrtImpl:()=>QN,squaredDifferenceImpl:()=>rA,stridedSliceImpl:()=>lA,stringNGramsImpl:()=>hA,stringSplitImpl:()=>fA,stringToHashBucketFastImpl:()=>gA,subImpl:()=>mI,tileImpl:()=>wA,topKImpl:()=>_A,transposeImpl:()=>Mk,uniqueImpl:()=>CA});class H{constructor(t,e){this.backend=t,this.dataMover=e,this.data=new WeakMap,this.dataIdsCount=0}get(t){return this.data.has(t)||this.dataMover.moveData(this.backend,t),this.data.get(t)}set(t,e){this.dataIdsCount++,this.data.set(t,e)}has(t){return this.data.has(t)}delete(t){return this.dataIdsCount--,this.data.delete(t)}numDataIds(){return this.dataIdsCount}}class j{refCount(t){return q(\"refCount\")}incRef(t){return q(\"incRef\")}timerAvailable(){return!0}time(t){return q(\"time\")}read(t){return q(\"read\")}readSync(t){return q(\"readSync\")}numDataIds(){return q(\"numDataIds\")}disposeData(t,e){return q(\"disposeData\")}write(t,e,n){return q(\"write\")}move(t,e,n,r,s){return q(\"move\")}memory(){return q(\"memory\")}floatPrecision(){return q(\"floatPrecision\")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return q(\"dispose\")}}function q(t){throw new Error(`'${t}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function X(t){let e=t.length,n=0;for(;e>0;)n=Math.random()*e|0,e--,J(t,e,n)}function K(t,e){if(t.length!==e.length)throw new Error(`Array sizes must match to be shuffled together First array length was ${t.length}Second array length was ${e.length}`);let n=t.length,r=0;for(;n>0;)r=Math.random()*n|0,n--,J(t,n,r),J(e,n,r)}function Y(t,e,n){return Math.max(t,Math.min(e,n))}function Z(t){return t%2==0?t:t+1}function J(t,e,n){const r=t[e];t[e]=t[n],t[n]=r}function Q(t){let e=0;for(let n=0;n<t.length;n++)e+=t[n];return e}function tt(t,e){const n=Math.random();return e*n+(1-n)*t}function et(t,e){let n=0;for(let r=0;r<t.length;r++){const s=Number(t[r])-Number(e[r]);n+=s*s}return n}function nt(t,e){if(!t)throw new Error(\"string\"==typeof e?e:e())}function rt(t,e,n=\"\"){nt(lt(t,e),(()=>n+` Shapes ${t} and ${e} must match`))}function st(t){nt(null!=t,(()=>\"The input to the tensor constructor must be a non-null value.\"))}function it(t,e=[],n=!1){if(null==e&&(e=[]),Array.isArray(t)||Tt(t)&&!n)for(let r=0;r<t.length;++r)it(t[r],e,n);else e.push(t);return e}function at(t){if(0===t.length)return 1;let e=t[0];for(let n=1;n<t.length;n++)e*=t[n];return e}function ot(t){return 0===t.length}function lt(t,e){if(t===e)return!0;if(null==t||null==e)return!1;if(t.length!==e.length)return!1;for(let n=0;n<t.length;n++)if(t[n]!==e[n])return!1;return!0}function ut(t){return t%1==0}function ct(t){if(null!=Math.tanh)return Math.tanh(t);if(t===1/0)return 1;if(t===-1/0)return-1;{const e=Math.exp(2*t);return(e-1)/(e+1)}}function ht(t){const e=Math.ceil(Math.sqrt(t));return[e,Math.ceil(t/e)]}function dt(t){const e=new Uint32Array(t);for(let n=0;n<t;++n)e[n]=n;return X(e),e}function pt(t,e){return e<=t.length?t:t+\" \".repeat(e-t.length)}function ft(t,e=(t=>0),n){return new Promise(((r,s)=>{let i=0;const a=()=>{if(t())return void r();i++;const o=e(i);null!=n&&i>=n?s():setTimeout(a,o)};a()}))}function mt(t,e){let n=1,r=-1;for(let e=0;e<t.length;++e)if(t[e]>=0)n*=t[e];else if(-1===t[e]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${e}`);r=e}else if(t[e]<0)throw Error(`Shapes can not be < 0. Found ${t[e]} at dim ${e}`);if(-1===r){if(e>0&&e!==n)throw Error(`Size(${e}) must match the product of shape ${t}`);return t}if(0===n)throw Error(`Cannot infer the missing size in [${t}] when there are 0 elements`);if(e%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${e} / ${n}`);const s=t.slice();return s[r]=e/n,s}function gt(t,e){const n=e.length;return nt((t=null==t?e.map(((t,e)=>e)):[].concat(t)).every((t=>t>=-n&&t<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${t}`)),nt(t.every((t=>ut(t))),(()=>`All values in axis param must be integers but got axis ${t}`)),t.map((t=>t<0?n+t:t))}function yt(t,e){const n=[],r=[],s=null!=e&&Array.isArray(e)&&0===e.length,i=null==e||s?null:gt(e,t).sort();let a=0;for(let e=0;e<t.length;++e){if(null!=i){if(i[a]===e&&1!==t[e])throw new Error(`Can't squeeze axis ${e} since its dim '${t[e]}' is not 1`);(null==i[a]||i[a]>e)&&1===t[e]&&(n.push(t[e]),r.push(e)),i[a]<=e&&a++}1!==t[e]&&(n.push(t[e]),r.push(e))}return{newShape:n,keptDims:r}}function xt(t,e){let n=null;if(null==t||\"float32\"===t)n=new Float32Array(e);else if(\"int32\"===t)n=new Int32Array(e);else{if(\"bool\"!==t)throw new Error(`Unknown data type ${t}`);n=new Uint8Array(e)}return n}function bt(t,e){let n=null;if(null==t||\"float32\"===t)n=new Float32Array(e);else if(\"int32\"===t)n=new Int32Array(e);else if(\"bool\"===t)n=new Uint8Array(e);else{if(\"string\"!==t)throw new Error(`Unknown data type ${t}`);n=new Array(e)}return n}function vt(t,e){for(let n=0;n<t.length;n++){const r=t[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${e} being uploaded contains ${r}.`)}}function wt(t){return\"bool\"===t||\"complex64\"===t||\"float32\"===t||\"int32\"===t||\"string\"===t}function St(t,e){return!(\"complex64\"===e||\"float32\"===e&&\"complex64\"!==t||\"int32\"===e&&\"float32\"!==t&&\"complex64\"!==t||\"bool\"===e&&\"bool\"===t)}function Tt(t){return t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array}function _t(t){if(\"float32\"===t||\"int32\"===t)return 4;if(\"complex64\"===t)return 8;if(\"bool\"===t)return 1;throw new Error(`Unknown dtype ${t}`)}function Mt(t){if(null==t)return 0;let e=0;return t.forEach((t=>e+=t.length)),e}function kt(t){return\"string\"==typeof t||t instanceof String}function Et(t){return\"boolean\"==typeof t}function It(t){return\"number\"==typeof t}function Ct(t){return Array.isArray(t)?Ct(t[0]):t instanceof Float32Array?\"float32\":t instanceof Int32Array||t instanceof Uint8Array?\"int32\":It(t)?\"float32\":kt(t)?\"string\":Et(t)?\"bool\":\"float32\"}function Nt(t){return!!(t&&t.constructor&&t.call&&t.apply)}function At(t,e){for(let n=e;n<t;++n)if(t%n==0)return n;return t}function Rt(t){const e=t.length;if(e<2)return[];const n=new Array(e-1);n[e-2]=t[e-1];for(let r=e-3;r>=0;--r)n[r]=n[r+1]*t[r+1];return n}function Lt(t,e,n,r=!1){const s=new Array;if(1===e.length){const i=e[0]*(r?2:1);for(let e=0;e<i;e++)s[e]=n[t+e]}else{const i=e[0],a=e.slice(1),o=a.reduce(((t,e)=>t*e))*(r?2:1);for(let e=0;e<i;e++)s[e]=Lt(t+e*o,a,n,r)}return s}function Dt(t,e,n=!1){if(0===t.length)return e[0];const r=t.reduce(((t,e)=>t*e))*(n?2:1);if(0===r)return[];if(r!==e.length)throw new Error(`[${t}] does not match the input size ${e.length}${n?\" for a complex tensor\":\"\"}.`);return Lt(0,t,e,n)}function Ft(t,e){const n=$t(t,e);for(let t=0;t<n.length;t++)n[t]=1;return n}function $t(t,e){if(null==e||\"float32\"===e||\"complex64\"===e)return new Float32Array(t);if(\"int32\"===e)return new Int32Array(t);if(\"bool\"===e)return new Uint8Array(t);throw new Error(`Unknown data type ${e}`)}function Ot(t,e){const n=t.reduce(((t,e)=>t*e),1);if(null==e||\"float32\"===e)return Dt(t,new Float32Array(n));if(\"int32\"===e)return Dt(t,new Int32Array(n));if(\"bool\"===e)return Dt(t,new Uint8Array(n));throw new Error(`Unknown data type ${e}`)}function Pt(t){t.forEach((e=>{nt(Number.isInteger(e)&&e>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${t}].`))}))}function zt(t,e,n){if(0===e)return 0;if(1===e)return t[0];let r=t[t.length-1];for(let e=0;e<t.length-1;++e)r+=n[e]*t[e];return r}function Bt(t,e,n){if(0===e)return[];if(1===e)return[t];const r=new Array(e);for(let e=0;e<r.length-1;++e)r[e]=Math.floor(t/n[e]),t-=r[e]*n[e];return r[r.length-1]=t,r}function Ut(t){return t&&t.then&&\"function\"==typeof t.then}function Vt(...t){jt().getBool(\"IS_TEST\")||jt().getBool(\"PROD\")||console.warn(...t)}function Wt(...t){jt().getBool(\"IS_TEST\")||jt().getBool(\"PROD\")||console.log(...t)}class Gt{constructor(t){this.global=t,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=Ht,this.populateURLFlags()}setPlatform(t,e){null!=this.platform&&Vt(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`),this.platformName=t,this.platform=e}registerFlag(t,e,n){if(this.flagRegistry[t]={evaluationFn:e,setHook:n},null!=this.urlFlags[t]){const e=this.urlFlags[t];Vt(`Setting feature override from URL ${t}: ${e}.`),this.set(t,e)}}async getAsync(t){return t in this.flags||(this.flags[t]=await this.evaluateFlag(t)),this.flags[t]}get(t){if(t in this.flags)return this.flags[t];const e=this.evaluateFlag(t);if(Ut(e))throw new Error(`Flag ${t} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[t]=e,this.flags[t]}getNumber(t){return this.get(t)}getBool(t){return this.get(t)}getFlags(){return this.flags}get features(){return this.flags}set(t,e){if(null==this.flagRegistry[t])throw new Error(`Cannot set flag ${t} as it has not been registered.`);this.flags[t]=e,null!=this.flagRegistry[t].setHook&&this.flagRegistry[t].setHook(e)}evaluateFlag(t){if(null==this.flagRegistry[t])throw new Error(`Cannot evaluate flag '${t}': no evaluation function found.`);return this.flagRegistry[t].evaluationFn()}setFlags(t){this.flags=Object.assign({},t)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const t=this.getQueryParams(this.global.location.search);\"tfjsflags\"in t&&t.tfjsflags.split(\",\").forEach((t=>{const[e,n]=t.split(\":\");this.urlFlags[e]=function(t,e){if(\"true\"===(e=e.toLowerCase())||\"false\"===e)return\"true\"===e;if(\"\"+ +e===e)return+e;throw new Error(`Could not parse value flag value ${e} for flag ${t}.`)}(e,n)}))}}function Ht(t){const e={};return t.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((t,...n)=>(function(t,e,n){t[decodeURIComponent(e)]=decodeURIComponent(n||\"\")}(e,n[0],n[1]),n.join(\"=\")))),e}function jt(){return Xt}let qt,Xt=null;function Kt(){if(null==qt){let t;if(\"undefined\"!=typeof window)t=window;else if(void 0!==n.g)t=n.g;else if(\"undefined\"!=typeof process)t=process;else{if(\"undefined\"==typeof self)throw new Error(\"Could not find a global object\");t=self}qt=t}return qt}function Yt(t,e){const n=function(){const t=Kt();return null==t._tfGlobals&&(t._tfGlobals=new Map),t._tfGlobals}();if(n.has(t))return n.get(t);{const r=e();return n.set(t,r),n.get(t)}}const Zt=\"Abs\",Jt=\"Acos\",Qt=\"Acosh\",te=\"Add\",ee=\"AddN\",ne=\"All\",re=\"Any\",se=\"ArgMax\",ie=\"ArgMin\",ae=\"Asin\",oe=\"Asinh\",le=\"Atan\",ue=\"Atanh\",ce=\"Atan2\",he=\"AvgPool\",de=\"AvgPoolGrad\",pe=\"AvgPool3D\",fe=\"AvgPool3DGrad\",me=\"BatchMatMul\",ge=\"BatchToSpaceND\",ye=\"Bincount\",xe=\"BroadcastTo\",be=\"BroadcastArgs\",ve=\"Cast\",we=\"Ceil\",Se=\"ClipByValue\",Te=\"Complex\",_e=\"ComplexAbs\",Me=\"Concat\",ke=\"Conv2D\",Ee=\"Conv2DBackpropFilter\",Ie=\"Conv2DBackpropInput\",Ce=\"Conv3D\",Ne=\"Conv3DBackpropFilterV2\",Ae=\"Conv3DBackpropInputV2\",Re=\"Cos\",Le=\"Cosh\",De=\"Cumsum\",Fe=\"CropAndResize\",$e=\"DenseBincount\",Oe=\"DepthToSpace\",Pe=\"DepthwiseConv2dNative\",ze=\"DepthwiseConv2dNativeBackpropFilter\",Be=\"DepthwiseConv2dNativeBackpropInput\",Ue=\"Diag\",Ve=\"Dilation2D\",We=\"Dilation2DBackpropInput\",Ge=\"Dilation2DBackpropFilter\",He=\"RealDiv\",je=\"Einsum\",qe=\"Elu\",Xe=\"EluGrad\",Ke=\"Erf\",Ye=\"Equal\",Ze=\"Exp\",Je=\"ExpandDims\",Qe=\"Expm1\",tn=\"FFT\",en=\"Fill\",nn=\"FlipLeftRight\",rn=\"Floor\",sn=\"FloorDiv\",an=\"FusedBatchNorm\",on=\"GatherV2\",ln=\"GatherNd\",un=\"Greater\",cn=\"GreaterEqual\",hn=\"Identity\",dn=\"IFFT\",pn=\"Imag\",fn=\"IsFinite\",mn=\"IsInf\",gn=\"IsNan\",yn=\"LeakyRelu\",xn=\"Less\",bn=\"LessEqual\",vn=\"LinSpace\",wn=\"Log\",Sn=\"Log1p\",Tn=\"LogicalAnd\",_n=\"LogicalNot\",Mn=\"LogicalOr\",kn=\"LogSoftmax\",En=\"LRN\",In=\"LRNGrad\",Cn=\"Max\",Nn=\"Maximum\",An=\"MaxPool\",Rn=\"MaxPoolGrad\",Ln=\"MaxPool3D\",Dn=\"MaxPool3DGrad\",Fn=\"MaxPoolWithArgmax\",$n=\"Mean\",On=\"Min\",Pn=\"Minimum\",zn=\"MirrorPad\",Bn=\"Mod\",Un=\"Multinomial\",Vn=\"Multiply\",Wn=\"Neg\",Gn=\"NotEqual\",Hn=\"NonMaxSuppressionV3\",jn=\"NonMaxSuppressionV4\",qn=\"NonMaxSuppressionV5\",Xn=\"OnesLike\",Kn=\"OneHot\",Yn=\"Pack\",Zn=\"PadV2\",Jn=\"Pool\",Qn=\"Pow\",tr=\"Prelu\",er=\"Prod\",nr=\"Range\",rr=\"Real\",sr=\"Reciprocal\",ir=\"Relu\",ar=\"Reshape\",or=\"ResizeNearestNeighbor\",lr=\"ResizeNearestNeighborGrad\",ur=\"ResizeBilinear\",cr=\"ResizeBilinearGrad\",hr=\"Relu6\",dr=\"Reverse\",pr=\"Round\",fr=\"Rsqrt\",mr=\"ScatterNd\",gr=\"Select\",yr=\"Selu\",xr=\"Slice\",br=\"Sin\",vr=\"Sinh\",wr=\"Sign\",Sr=\"Sigmoid\",Tr=\"Softplus\",_r=\"Sqrt\",Mr=\"Sum\",kr=\"SpaceToBatchND\",Er=\"SplitV\",Ir=\"Softmax\",Cr=\"SparseFillEmptyRows\",Nr=\"SparseReshape\",Ar=\"SparseSegmentMean\",Rr=\"SparseSegmentSum\",Lr=\"SparseToDense\",Dr=\"SquaredDifference\",Fr=\"Square\",$r=\"StridedSlice\",Or=\"StringNGrams\",Pr=\"StringSplit\",zr=\"StringToHashBucketFast\",Br=\"Sub\",Ur=\"Tan\",Vr=\"Tanh\",Wr=\"Tile\",Gr=\"TopK\",Hr=\"Transform\",jr=\"Transpose\",qr=\"Unique\",Xr=\"Unpack\",Kr=\"UnsortedSegmentSum\",Yr=\"ZerosLike\",Zr=\"Step\",Jr=\"FromPixels\",Qr=\"RotateWithOffset\",ts=\"_FusedMatMul\",es=\"FusedConv2D\",ns=\"FusedDepthwiseConv2D\",rs=Yt(\"kernelRegistry\",(()=>new Map)),ss=Yt(\"gradRegistry\",(()=>new Map));function is(t,e){const n=ps(t,e);return rs.get(n)}function as(t){return ss.get(t)}function os(t){const e=rs.entries(),n=[];for(;;){const{done:r,value:s}=e.next();if(r)break;const[i,a]=s,[o]=i.split(\"_\");o===t&&n.push(a)}return n}function ls(t){const{kernelName:e,backendName:n}=t,r=ps(e,n);rs.has(r)&&Vt(`The kernel '${e}' for backend '${n}' is already registered`),rs.set(r,t)}function us(t){const{kernelName:e}=t;ss.has(e)&&jt().getBool(\"DEBUG\")&&Vt(`Overriding the gradient for '${e}'`),ss.set(e,t)}function cs(t,e){const n=ps(t,e);if(!rs.has(n))throw new Error(`The kernel '${t}' for backend '${e}' is not registered`);rs.delete(n)}function hs(t){if(!ss.has(t))throw new Error(`The gradient '${t}' for backend is not registered`);ss.delete(t)}function ds(t,e){os(t).forEach((t=>{ls(Object.assign({},t,{backendName:e}))}))}function ps(t,e){return`${e}_${t}`}var fs=n(43720);const ms=n.n(fs)()||fs;function gs(t){return ms.fromString(t,!0,16)}const ys=gs(\"c3a5c85c97cb3127\"),xs=gs(\"b492b66fbe98f273\"),bs=gs(\"9ae16a3b2f90404f\");function vs(t){return t.xor(t.shru(47))}function ws(t,e,n){const r=t.slice(e,e+n);return ms.fromBytes(Array.from(r),!0,!0)}function Ss(t,e){return ws(t,e,8)}function Ts(t,e){return ws(t,e,4)}function _s(t,e){return 0===e?t:t.shru(e).or(t.shl(64-e))}function Ms(t,e,n=gs(\"9ddfea08eb382d69\")){let r=t.xor(e).mul(n);r=r.xor(r.shru(47));let s=e.xor(r).mul(n);return s=s.xor(s.shru(47)),s=s.mul(n),s}function ks(t,e,n,r){return function(t,e,n,r,s,i){s=s.add(t),i=_s(i.add(s).add(r),21);const a=s;return s=(s=s.add(e)).add(n),i=i.add(_s(s,44)),[s.add(r),i.add(a)]}(Ss(t,e),Ss(t,e+8),Ss(t,e+16),Ss(t,e+24),n,r)}function Es(t,e=t.length){const n=ms.fromNumber(81,!0);if(e<=32)return e<=16?function(t,e=t.length){if(e>=8){const n=bs.add(2*e),r=Ss(t,0).add(bs),s=Ss(t,e-8);return Ms(_s(s,37).mul(n).add(r),_s(r,25).add(s).mul(n),n)}if(e>=4){const n=bs.add(2*e);return Ms(Ts(t,0).shl(3).add(e),Ts(t,e-4),n)}if(e>0){const n=t[0]+(t[e>>1]<<8),r=e+(t[e-1]<<2);return vs(bs.mul(n).xor(ys.mul(r))).mul(bs)}return bs}(t,e):function(t,e=t.length){const n=bs.add(2*e),r=Ss(t,0).mul(xs),s=Ss(t,8),i=Ss(t,e-8).mul(n),a=Ss(t,e-16).mul(bs);return Ms(_s(r.add(s),43).add(_s(i,30)).add(a),r.add(_s(s.add(bs),18)).add(i),n)}(t,e);if(e<=64)return function(t,e=t.length){const n=bs.add(2*e),r=Ss(t,0).mul(bs),s=Ss(t,8),i=Ss(t,e-8).mul(n),a=Ss(t,e-16).mul(bs),o=_s(r.add(s),43).add(_s(i,30)).add(a),l=Ms(o,r.add(_s(s.add(bs),18)).add(i),n),u=Ss(t,16).mul(n),c=Ss(t,24),h=o.add(Ss(t,e-32)).mul(n),d=l.add(Ss(t,e-24)).mul(n);return Ms(_s(u.add(c),43).add(_s(h,30)).add(d),u.add(_s(c.add(r),18)).add(h),n)}(t,e);let r=n,s=n.mul(xs).add(113),i=vs(s.mul(bs).add(113)).mul(bs),a=[ms.UZERO,ms.UZERO],o=[ms.UZERO,ms.UZERO];r=r.mul(bs).add(Ss(t,0));let l=0;const u=64*(e-1>>6),c=u+(e-1&63)-63;do{r=_s(r.add(s).add(a[0]).add(Ss(t,l+8)),37).mul(xs),s=_s(s.add(a[1]).add(Ss(t,l+48)),42).mul(xs),r=r.xor(o[1]),s=s.add(a[0]).add(Ss(t,l+40)),i=_s(i.add(o[0]),33).mul(xs),a=ks(t,l,a[1].mul(xs),r.add(o[0])),o=ks(t,l+32,i.add(o[1]),s.add(Ss(t,l+16))),[i,r]=[r,i],l+=64}while(l!==u);const h=xs.add(i.and(255).shl(1));return l=c,o[0]=o[0].add(e-1&63),a[0]=a[0].add(o[0]),o[0]=o[0].add(a[0]),r=_s(r.add(s).add(a[0]).add(Ss(t,l+8)),37).mul(h),s=_s(s.add(a[1]).add(Ss(t,l+48)),42).mul(h),r=r.xor(o[1].mul(9)),s=s.add(a[0].mul(9).add(Ss(t,l+40))),i=_s(i.add(o[0]),33).mul(h),a=ks(t,l,a[1].mul(h),r.add(o[0])),o=ks(t,l+32,i.add(o[1]),s.add(Ss(t,l+16))),[i,r]=[r,i],Ms(Ms(a[0],o[0],h).add(vs(s).mul(ys)).add(i),Ms(a[1],o[1],h).add(r),h)}function Is(t,e){return\"string\"===e?Rs(t):Cs([t],e)}function Cs(t,e){if(\"string\"===e)throw new Error(\"Cannot convert a string[] to a TypedArray\");if(Array.isArray(t)&&(t=it(t)),jt().getBool(\"DEBUG\")&&vt(t,e),function(t,e){return t instanceof Float32Array&&\"float32\"===e||t instanceof Int32Array&&\"int32\"===e||t instanceof Uint8Array&&\"bool\"===e}(t,e))return t;if(null==e||\"float32\"===e||\"complex64\"===e)return new Float32Array(t);if(\"int32\"===e)return new Int32Array(t);if(\"bool\"===e){const e=new Uint8Array(t.length);for(let n=0;n<e.length;++n)0!==Math.round(t[n])&&(e[n]=1);return e}throw new Error(`Unknown data type ${e}`)}function Ns(){return jt().platform.now()}function As(t,e){return jt().platform.fetch(t,e)}function Rs(t,e=\"utf-8\"){return e=e||\"utf-8\",jt().platform.encode(t,e)}function Ls(t,e=\"utf-8\"){return e=e||\"utf-8\",jt().platform.decode(t,e)}class Ds{constructor(t,e){this.backendTimer=t,this.logger=e,null==e&&(this.logger=new $s)}profileKernel(t,e,n){let r;const s=()=>{r=n()};let i;const a=Ns();if(this.backendTimer.timerAvailable())i=this.backendTimer.time(s);else{s();for(const t of r)t.dataSync();i=Promise.resolve({kernelMs:Ns()-a})}if(jt().getBool(\"CHECK_COMPUTATION_FOR_ERRORS\"))for(let e=0;e<r.length;e++){const n=r[e];n.data().then((e=>{Fs(e,n.dtype,t)}))}return{kernelName:t,outputs:r,inputs:e,timeMs:i.then((t=>t.kernelMs)),extraInfo:i.then((t=>null!=t.getExtraProfileInfo?t.getExtraProfileInfo():\"\"))}}logKernelProfile(t){const{kernelName:e,outputs:n,timeMs:r,inputs:s,extraInfo:i}=t;n.forEach((t=>{Promise.all([t.data(),r,i]).then((n=>{this.logger.logKernelProfile(e,t,n[0],n[1],s,n[2])}))}))}}function Fs(t,e,n){if(\"float32\"!==e)return!1;for(let e=0;e<t.length;e++){const r=t[e];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${n}'`),!0}return!1}class $s{logKernelProfile(t,e,n,r,s,i){const a=\"number\"==typeof r?pt(`${r}ms`,9):r.error,o=pt(t,25),l=e.rank,u=e.size,c=pt(e.shape.toString(),14);let h=\"\";for(const t in s){const n=s[t];if(null!=n){const r=n.shape||e.shape,s=r.length;h+=`${t}: ${s}D ${s>0?r:\"\"} `}}console.log(`%c${o}\\t%c${a}\\t%c${l}D ${c}\\t%c${u}\\t%c${h}\\t%c${i}`,\"font-weight:bold\",\"color:red\",\"color:blue\",\"color: orange\",\"color: green\",\"color: steelblue\")}}function Os(t,e,n,r){const s=Rt(e),i=function(t,e,n,r){const s=at(e),i=r[r.length-1],a=new Array(i).fill(0),o=e.length,l=\"complex64\"===n?Us(t):t;if(o>1)for(let t=0;t<s/i;t++){const e=t*i;for(let t=0;t<i;t++)a[t]=Math.max(a[t],Ps(l[e+t],0,n).length)}return a}(t,e,n,s),a=e.length,o=Bs(t,e,n,s,i),l=[\"Tensor\"];return r&&(l.push(`  dtype: ${n}`),l.push(`  rank: ${a}`),l.push(`  shape: [${e}]`),l.push(\"  values:\")),l.push(o.map((t=>\"    \"+t)).join(\"\\n\")),l.join(\"\\n\")}function Ps(t,e,n){let r;return r=Array.isArray(t)?`${parseFloat(t[0].toFixed(7))} + ${parseFloat(t[1].toFixed(7))}j`:kt(t)?`'${t}'`:\"bool\"===n?zs(t):parseFloat(t.toFixed(7)).toString(),pt(r,e)}function zs(t){return 0===t?\"false\":\"true\"}function Bs(t,e,n,r,s,i=!0){const a=\"complex64\"===n?2:1,o=e[0],l=e.length;if(0===l)return\"complex64\"===n?[Ps(Us(t)[0],0,n)]:\"bool\"===n?[zs(t[0])]:[t[0].toString()];if(1===l){if(o>20){const e=3*a;let r=Array.from(t.slice(0,e)),i=Array.from(t.slice((o-3)*a,o*a));return\"complex64\"===n&&(r=Us(r),i=Us(i)),[\"[\"+r.map(((t,e)=>Ps(t,s[e],n))).join(\", \")+\", ..., \"+i.map(((t,e)=>Ps(t,s[o-3+e],n))).join(\", \")+\"]\"]}return[\"[\"+(\"complex64\"===n?Us(t):Array.from(t)).map(((t,e)=>Ps(t,s[e],n))).join(\", \")+\"]\"]}const u=e.slice(1),c=r.slice(1),h=r[0]*a,d=[];if(o>20){for(let e=0;e<3;e++){const r=e*h,i=r+h;d.push(...Bs(t.slice(r,i),u,n,c,s,!1))}d.push(\"...\");for(let e=o-3;e<o;e++){const r=e*h,i=r+h;d.push(...Bs(t.slice(r,i),u,n,c,s,e===o-1))}}else for(let e=0;e<o;e++){const r=e*h,i=r+h;d.push(...Bs(t.slice(r,i),u,n,c,s,e===o-1))}const p=2===l?\",\":\"\";d[0]=\"[\"+d[0]+p;for(let t=1;t<d.length-1;t++)d[t]=\" \"+d[t]+p;let f=\",\\n\";for(let t=2;t<l;t++)f+=\"\\n\";return d[d.length-1]=\" \"+d[d.length-1]+\"]\"+(i?\"\":f),d}function Us(t){const e=[];for(let n=0;n<t.length;n+=2)e.push([t[n],t[n+1]]);return e}class Vs{constructor(t,e,n){if(this.dtype=e,this.shape=t.slice(),this.size=at(t),null!=n){const t=n.length;nt(t===this.size,(()=>`Length of values '${t}' does not match the size inferred by the shape '${this.size}'.`))}if(\"complex64\"===e)throw new Error(\"complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).\");this.values=n||bt(e,this.size),this.strides=Rt(t)}set(t,...e){0===e.length&&(e=[0]),nt(e.length===this.rank,(()=>`The number of provided coordinates (${e.length}) must match the rank (${this.rank})`));const n=this.locToIndex(e);this.values[n]=t}get(...t){0===t.length&&(t=[0]);let e=0;for(const n of t){if(n<0||n>=this.shape[e]){const e=`Requested out of range element at ${t}.   Buffer shape=${this.shape}`;throw new Error(e)}e++}let n=t[t.length-1];for(let e=0;e<t.length-1;++e)n+=this.strides[e]*t[e];return this.values[n]}locToIndex(t){if(0===this.rank)return 0;if(1===this.rank)return t[0];let e=t[t.length-1];for(let n=0;n<t.length-1;++n)e+=this.strides[n]*t[n];return e}indexToLoc(t){if(0===this.rank)return[];if(1===this.rank)return[t];const e=new Array(this.shape.length);for(let n=0;n<e.length-1;++n)e[n]=Math.floor(t/this.strides[n]),t-=e[n]*this.strides[n];return e[e.length-1]=t,e}get rank(){return this.shape.length}toTensor(){return Ws().makeTensor(this.values,this.shape,this.dtype)}}let Ws=null,Gs=null,Hs=null;class js{constructor(t,e,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=e||\"float32\",this.size=at(t),this.strides=Rt(t),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():\"higher\"}get rank(){return this.shape.length}async buffer(){const t=await this.data();return Gs.buffer(this.shape,this.dtype,t)}bufferSync(){return Gs.buffer(this.shape,this.dtype,this.dataSync())}async array(){const t=await this.data();return Dt(this.shape,t,\"complex64\"===this.dtype)}arraySync(){return Dt(this.shape,this.dataSync(),\"complex64\"===this.dtype)}async data(){this.throwIfDisposed();const t=Ws().read(this.dataId);if(\"string\"===this.dtype){const e=await t;try{return e.map((t=>Ls(t)))}catch(t){throw new Error(\"Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().\")}}return t}dataSync(){this.throwIfDisposed();const t=Ws().readSync(this.dataId);if(\"string\"===this.dtype)try{return t.map((t=>Ls(t)))}catch(t){throw new Error(\"Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().\")}return t}async bytes(){this.throwIfDisposed();const t=await Ws().read(this.dataId);return\"string\"===this.dtype?t:new Uint8Array(t.buffer)}dispose(){this.isDisposed||(Ws().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error(\"Tensor is disposed.\")}print(t=!1){return Gs.print(this,t)}clone(){return this.throwIfDisposed(),Gs.clone(this)}toString(t=!1){return Os(this.dataSync(),this.shape,this.dtype,t)}cast(t){return this.throwIfDisposed(),Gs.cast(this,t)}variable(t=!0,e,n){return this.throwIfDisposed(),Ws().makeVariable(this,t,e,n)}}function qs(){return Yt(\"Tensor\",(()=>js))}Object.defineProperty(js,Symbol.hasInstance,{value:t=>!!t&&null!=t.data&&null!=t.dataSync&&null!=t.throwIfDisposed}),qs();class Xs extends js{constructor(t,e,n,r){super(t.shape,t.dtype,t.dataId,r),this.trainable=e,this.name=n}assign(t){if(t.dtype!==this.dtype)throw new Error(`dtype of the new value (${t.dtype}) and previous value (${this.dtype}) must match`);if(!lt(t.shape,this.shape))throw new Error(`shape of the new value (${t.shape}) and previous value (${this.shape}) must match`);Ws().disposeTensor(this),this.dataId=t.dataId,Ws().incRef(this,null)}dispose(){Ws().disposeVariable(this),this.isDisposedInternal=!0}}var Ks,Ys,Zs,Js,Qs;Object.defineProperty(Xs,Symbol.hasInstance,{value:t=>t instanceof js&&null!=t.assign&&t.assign instanceof Function}),function(t){t.R0=\"R0\",t.R1=\"R1\",t.R2=\"R2\",t.R3=\"R3\",t.R4=\"R4\",t.R5=\"R5\",t.R6=\"R6\"}(Ks||(Ks={})),function(t){t.float32=\"float32\",t.int32=\"int32\",t.bool=\"int32\",t.complex64=\"complex64\"}(Ys||(Ys={})),function(t){t.float32=\"float32\",t.int32=\"int32\",t.bool=\"bool\",t.complex64=\"complex64\"}(Zs||(Zs={})),function(t){t.float32=\"float32\",t.int32=\"float32\",t.bool=\"float32\",t.complex64=\"complex64\"}(Js||(Js={})),function(t){t.float32=\"complex64\",t.int32=\"complex64\",t.bool=\"complex64\",t.complex64=\"complex64\"}(Qs||(Qs={}));const ti={float32:Js,int32:Ys,bool:Zs,complex64:Qs};function ei(t,e){if(\"string\"===t||\"string\"===e){if(\"string\"===t&&\"string\"===e)return\"string\";throw new Error(`Can not upcast ${t} with ${e}`)}return ti[t][e]}function ni(t){return ei(t,\"int32\")}function ri(t,e){if(t.dtype===e.dtype)return[t,e];const n=ei(t.dtype,e.dtype);return[t.cast(n),e.cast(n)]}function si(t,e){nt(t.dtype===e.dtype,(()=>`The dtypes of the first(${t.dtype}) and second(${e.dtype}) input must match`))}function ii(t,e){return e.some((e=>e.id===t.id))}function ai(t){const e=[];return oi(t,e,new Set),e}function oi(t,e,n){if(null==t)return;if(t instanceof js)return void e.push(t);if(r=t,!Array.isArray(r)&&\"object\"!=typeof r)return;var r;const s=t;for(const t in s){const r=s[t];n.has(r)||(n.add(r),oi(r,e,n))}}function li(t){return null!=t.kernelName}class ui{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((t=>t.name))))}}}dispose(){for(const t in this.registeredVariables)this.registeredVariables[t].dispose()}}class ci{constructor(t){this.ENV=t,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new ui}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const t=this.getSortedBackends();for(let e=0;e<t.length;e++){const n=t[e];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error(\"Could not initialize any backends, all backend initializations failed.\")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:t,asyncInit:e}=this.initializeBackendsAndReturnBest();if(e)throw new Error(`The highest priority backend '${t}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(t)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(t){if(!(t in this.registry)){if(!(t in this.registryFactory))return null;{const{asyncInit:e}=this.initializeBackend(t);if(e)return null}}return this.registry[t]}findBackendFactory(t){return t in this.registryFactory?this.registryFactory[t].factory:null}registerBackend(t,e,n=1){return t in this.registryFactory?(Vt(`${t} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[t]={factory:e,priority:n},!0)}async setBackend(t){if(null==this.registryFactory[t])throw new Error(`Backend name '${t}' not found in registry`);if(this.backendName=t,null==this.registry[t]){this.backendInstance=null;const{success:e,asyncInit:n}=this.initializeBackend(t);if(!(n?await e:e))return!1}return this.backendInstance=this.registry[t],this.setupRegisteredKernels(),this.profiler=new Ds(this.backendInstance),!0}setupRegisteredKernels(){os(this.backendName).forEach((t=>{null!=t.setupFunc&&t.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(t){os(t).forEach((e=>{null!=e.disposeFunc&&e.disposeFunc(this.registry[t])}))}initializeBackend(t){const e=this.registryFactory[t];if(null==e)throw new Error(`Cannot initialize backend ${t}, no registration found.`);try{const n=e.factory();if(!n||n instanceof j||\"function\"!=typeof n.then)return this.registry[t]=n,{success:!0,asyncInit:!1};{const e=++this.pendingBackendInitId,r=n.then((n=>!(e<this.pendingBackendInitId||(this.registry[t]=n,this.pendingBackendInit=null,0)))).catch((n=>(e<this.pendingBackendInitId||(this.pendingBackendInit=null,Vt(`Initialization of backend ${t} failed`),Vt(n.stack||n.message)),!1)));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}}catch(e){return Vt(`Initialization of backend ${t} failed`),Vt(e.stack||e.message),{success:!1,asyncInit:!1}}}removeBackend(t){if(!(t in this.registryFactory))throw new Error(`${t} backend not found in registry`);this.backendName===t&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,t in this.registry&&(this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t]),delete this.registryFactory[t],this.backendName===t&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error(\"No backend found in registry.\");return Object.keys(this.registryFactory).sort(((t,e)=>this.registryFactory[e].priority-this.registryFactory[t].priority))}initializeBackendsAndReturnBest(){const t=this.getSortedBackends();for(let e=0;e<t.length;e++){const n=t[e],{success:r,asyncInit:s}=this.initializeBackend(n);if(s||r)return{name:n,asyncInit:s}}throw new Error(\"Could not initialize any backends, all backend initializations failed.\")}moveData(t,e){const n=this.state.tensorInfo.get(e),r=n.backend,s=this.readSync(e),i=r.refCount(e);r.disposeData(e,!0),n.backend=t,t.move(e,s,n.shape,n.dtype,i),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(t,e){let n,r=null;if(null==e){if(\"function\"!=typeof t)throw new Error(\"Please provide a function to tidy()\");e=t}else{if(\"string\"!=typeof t&&!(t instanceof String))throw new Error(\"When calling with two arguments, the first argument to tidy() must be a string\");if(\"function\"!=typeof e)throw new Error(\"When calling with two arguments, the 2nd argument to tidy() must be a function\");r=t}return this.scopedRun((()=>this.startScope(r)),(()=>this.endScope(n)),(()=>(n=e(),n instanceof Promise&&console.error(\"Cannot return a Promise inside of tidy.\"),n)))}scopedRun(t,e,n){t();try{const t=n();return e(),t}catch(t){throw e(),t}}nextTensorId(){return ci.nextTensorId++}nextVariableId(){return ci.nextVariableId++}clone(t){const e=di.runKernel(hn,{x:t}),n={x:t};return this.addTapeNode(this.state.activeScope.name,n,[e],(t=>({x:()=>{const e={x:t};return di.runKernel(ve,e,{dtype:\"float32\"})}})),[],{}),e}runKernel(t,e,n){if(null==this.backendName&&this.backend,null==is(t,this.backendName))throw new Error(`Kernel '${t}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:t,inputs:e,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool(\"IS_TEST\")}checkKernelForMemLeak(t,e,n){const r=this.backend.numDataIds();let s=0;n.forEach((t=>{s+=\"complex64\"===t.dtype?3:1}));const i=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],a=r-e-s-i;if(a>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${a} data ids) after running '${t}'`)}runKernelFunc(t){let e,n=[];const r=this.isTapeOn(),s=this.state.numBytes,i=this.state.numTensors;let a,o;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const l=li(t)?t.kernelName:null!=this.state.activeScope?this.state.activeScope.name:\"\";if(li(t)){const{kernelName:e,inputs:s,attrs:i}=t;null==this.backendName&&this.backend;const l=is(e,this.backendName);nt(null!=l,(()=>`Cannot find registered kernel '${e}' for backend '${this.backendName}'`)),a=()=>{const t=this.backend.numDataIds();o=l.kernelFunc({inputs:s,attrs:i,backend:this.backend});const a=Array.isArray(o)?o:[o];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(e,t,a);const u=a.map((t=>{if(null!=t.rank)return t;const{dataId:e,shape:n,dtype:r}=t;return this.makeTensorFromDataId(e,n,r)}));if(r){const t=this.getTensorsForGradient(e,s,u);n=this.saveTensorsForBackwardMode(t)}return u}}else{const{forwardFunc:e}=t,s=t=>{r&&(n=t.map((t=>this.keep(this.clone(t)))))};a=()=>{const t=this.backend.numDataIds();o=this.tidy((()=>e(this.backend,s)));const n=Array.isArray(o)?o:[o];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(l,t,n),n}}const{inputs:u,attrs:c}=t,h=li(t)?null:t.backwardsFunc;let d;return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool(\"DEBUG\")||this.state.profiling?(d=this.profiler.profileKernel(l,u,(()=>a())),this.ENV.getBool(\"DEBUG\")&&this.profiler.logKernelProfile(d),e=d.outputs):e=a()})),r&&this.addTapeNode(l,u,e,h,n,c),this.state.profiling&&this.state.activeProfile.kernels.push({name:l,bytesAdded:this.state.numBytes-s,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-i,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(u).map((t=>null!=u[t]?u[t].shape:null)),outputShapes:e.map((t=>t.shape)),kernelTimeMs:d.timeMs,extraInfo:d.extraInfo}),Array.isArray(o)?e:e[0]}saveTensorsForBackwardMode(t){return t.map((t=>this.keep(this.clone(t))))}getTensorsForGradient(t,e,n){const r=as(t);if(null!=r){const t=r.inputsToSave||[],s=r.outputsToSave||[];let i;r.saveAllInputs?(nt(Array.isArray(e),(()=>\"saveAllInputs is true, expected inputs to be an array.\")),i=Object.keys(e).map((t=>e[t]))):i=t.map((t=>e[t]));const a=n.filter(((t,e)=>s[e]));return i.concat(a)}return[]}makeTensor(t,e,n,r){if(null==t)throw new Error(\"Values passed to engine.makeTensor() are null\");n=n||\"float32\",r=r||this.backend;let s=t;\"string\"===n&&kt(t[0])&&(s=t.map((t=>Rs(t))));const i=r.write(s,e,n),a=new js(e,n,i,this.nextTensorId());if(this.trackTensor(a,r),\"string\"===n){const t=this.state.tensorInfo.get(i),e=Mt(s);this.state.numBytes+=e-t.bytes,t.bytes=e}return a}makeTensorFromDataId(t,e,n,r){const s=new js(e,n=n||\"float32\",t,this.nextTensorId());return this.trackTensor(s,r),s}makeVariable(t,e=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==t.dtype&&(t=t.cast(r));const s=new Xs(t,e,n,this.nextTensorId());if(null!=this.state.registeredVariables[s.name])throw new Error(`Variable with name ${s.name} was already registered`);return this.state.registeredVariables[s.name]=s,this.incRef(s,this.backend),s}trackTensor(t,e){this.state.numTensors++,\"string\"===t.dtype&&this.state.numStringTensors++;let n=0;\"complex64\"!==t.dtype&&\"string\"!==t.dtype&&(n=t.size*_t(t.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(t.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(t.dataId,{backend:e||this.backend,dtype:t.dtype,shape:t.shape,bytes:n})),t instanceof Xs||this.track(t)}incRef(t,e){this.trackTensor(t,e),this.backend.incRef(t.dataId)}removeDataId(t,e){this.state.tensorInfo.has(t)&&this.state.tensorInfo.get(t).backend===e&&(this.state.tensorInfo.delete(t),this.state.numDataBuffers--)}disposeTensor(t){if(!this.state.tensorInfo.has(t.dataId))return;const e=this.state.tensorInfo.get(t.dataId);if(this.state.numTensors--,\"string\"===t.dtype&&(this.state.numStringTensors--,this.state.numBytes-=e.bytes),\"complex64\"!==t.dtype&&\"string\"!==t.dtype){const e=t.size*_t(t.dtype);this.state.numBytes-=e}e.backend.disposeData(t.dataId)&&this.removeDataId(t.dataId,e.backend)}disposeVariables(){for(const t in this.state.registeredVariables){const e=this.state.registeredVariables[t];this.disposeVariable(e)}}disposeVariable(t){this.disposeTensor(t),null!=this.state.registeredVariables[t.name]&&delete this.state.registeredVariables[t.name]}memory(){const t=this.backend.memory();return t.numTensors=this.state.numTensors,t.numDataBuffers=this.state.numDataBuffers,t.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(t.unreliable=!0,null==t.reasons&&(t.reasons=[]),t.reasons.push(\"Memory usage by string tensors is approximate (2 bytes per character)\")),t}async profile(t){this.state.profiling=!0;const e=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await t(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((t=>t.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-e,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const t of this.state.activeProfile.kernels)t.kernelTimeMs=await t.kernelTimeMs,t.extraInfo=await t.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(t,e,n,r,s,i){const a={id:this.state.nextTapeNodeId++,kernelName:t,inputs:e,outputs:n,saved:s},o=as(t);null!=o&&(r=o.gradFunc),null!=r&&(a.gradient=t=>(t=t.map(((t,e)=>{if(null==t){const t=n[e],r=$t(t.size,t.dtype);return this.makeTensor(r,t.shape,t.dtype)}return t})),r(t.length>1?t:t[0],s,i))),this.state.activeTape.push(a)}keep(t){return t.kept=!0,t}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(t){const e={track:[],name:\"unnamed scope\",id:this.state.nextScopeId++};t&&(e.name=t),this.state.scopeStack.push(e),this.state.activeScope=e}endScope(t){const e=ai(t),n=new Set(e.map((t=>t.id)));for(let t=0;t<this.state.activeScope.track.length;t++){const e=this.state.activeScope.track[t];e.kept||n.has(e.id)||e.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],e.forEach((t=>{t.kept||t.scopeId!==r.id||this.track(t)}))}gradients(t,e,n,r=!1){if(nt(e.length>0,(()=>\"gradients() received an empty list of xs.\")),null!=n&&\"float32\"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const s=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy(\"forward\",t)));nt(s instanceof js,(()=>\"The result y returned by f() must be a tensor.\"));const i=function(t,e,n){const r={},s={};for(let t=0;t<e.length;t++)r[e[t].id]=!0;for(let n=0;n<t.length;n++){const i=t[n],a=i.inputs;for(const t in a){const n=a[t];let o=!1;for(let t=0;t<e.length;t++)if(r[n.id]){i.outputs.forEach((t=>r[t.id]=!0)),o=!0,s[i.id]=!0;break}if(o)break}}const i={};i[n.id]=!0;const a={};for(let e=t.length-1;e>=0;e--){const n=t[e],r=n.inputs;for(let t=0;t<n.outputs.length;t++)if(i[n.outputs[t].id]){for(const t in r)i[r[t].id]=!0,a[n.id]=!0;break}}const o=[];for(let e=0;e<t.length;e++){const n=t[e];if(s[n.id]&&a[n.id]){const t={};for(const e in n.inputs){const s=n.inputs[e];r[s.id]&&(t[e]=s)}const e=Object.assign({},n);e.inputs=t,e.outputs=n.outputs,o.push(e)}}return o}(this.state.activeTape,e,s);if(!r&&0===i.length&&e.length>0)throw new Error(\"Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.\");return this.tidy(\"backward\",(()=>{const t={};t[s.id]=null==n?function(t){const e=Ft(at(t),\"float32\");return di.makeTensor(e,t,\"float32\")}(s.shape):n,function(t,e,n,r){for(let s=e.length-1;s>=0;s--){const i=e[s],a=[];if(i.outputs.forEach((e=>{const n=t[e.id];null!=n?a.push(n):a.push(null)})),null==i.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${i.kernelName}.`);const o=i.gradient(a);for(const e in i.inputs){if(!(e in o))throw new Error(`Cannot backprop through input ${e}. Available gradients found: ${Object.keys(o)}.`);const s=n((()=>o[e]()));if(\"float32\"!==s.dtype)throw new Error(`Error in gradient for op ${i.kernelName}. The gradient of input ${e} must have 'float32' dtype, but has '${s.dtype}'`);const a=i.inputs[e];if(!lt(s.shape,a.shape))throw new Error(`Error in gradient for op ${i.kernelName}. The gradient of input '${e}' has shape '${s.shape}', which does not match the shape of the input '${a.shape}'`);if(null==t[a.id])t[a.id]=s;else{const e=t[a.id];t[a.id]=r(e,s),e.dispose()}}}}(t,i,(t=>this.tidy(t)),pi);const r=e.map((e=>t[e.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((t=>{for(const e of t.saved)e.dispose()})),this.state.activeTape=null),{value:s,grads:r}}))}customGrad(t){return nt(Nt(t),(()=>\"The f passed in customGrad(f) must be a function.\")),(...e)=>{let n;nt(e.every((t=>t instanceof js)),(()=>\"The args passed in customGrad(f)(x1, x2,...) must all be tensors\"));const r={};return e.forEach(((t,e)=>{r[e]=t})),this.runKernelFunc({forwardFunc:(r,s)=>(n=t(...e,s),nt(n.value instanceof js,(()=>\"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor\")),nt(Nt(n.gradFunc),(()=>\"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.\")),n.value),backwardsFunc:(t,r)=>{const s=n.gradFunc(t,r),i=Array.isArray(s)?s:[s];nt(i.length===e.length,(()=>\"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).\")),nt(i.every((t=>t instanceof js)),(()=>\"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.\"));const a={};return i.forEach(((t,e)=>{a[e]=()=>t})),a},inputs:r})}}readSync(t){return this.state.tensorInfo.get(t).backend.readSync(t)}read(t){return this.state.tensorInfo.get(t).backend.read(t)}async time(t){const e=Ns(),n=await this.backend.time(t);return n.wallMs=Ns()-e,n}track(t){return null!=this.state.activeScope&&(t.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(t)),t}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new ui;for(const t in this.registry)this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function hi(){const t=Kt();if(null==t._tfengine){const e=new Gt(t);t._tfengine=new ci(e)}var e;return e=t._tfengine.ENV,Xt=e,Ws=()=>t._tfengine,t._tfengine}ci.nextTensorId=0,ci.nextVariableId=0;const di=hi();function pi(t,e){const n={a:t,b:e};return di.runKernel(te,n)}function fi(t){if(t||\"undefined\"!=typeof navigator&&null!=navigator){if(t||(t=navigator),\"ReactNative\"===t.product)return!0;const e=t.userAgent||t.vendor||(\"undefined\"!=typeof window?window.opera:\"\");if(!e){const e=t;return e.userAgentData&&e.userAgentData.mobile}return/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(e)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(e.substr(0,4))}return!1}function mi(){return\"undefined\"!=typeof window&&null!=window.document||\"undefined\"!=typeof WorkerGlobalScope}const gi=jt();function yi(t,e){let n=t;if(Tt(t))return\"string\"===e?[]:[t.length];if(!Array.isArray(t))return[];const r=[];for(;Array.isArray(n)||Tt(n)&&\"string\"!==e;)r.push(n.length),n=n[0];return Array.isArray(t)&&jt().getBool(\"TENSORLIKE_CHECK_SHAPE_CONSISTENCY\")&&xi(t,r,[]),r}function xi(t,e,n){if(n=n||[],!Array.isArray(t)&&!Tt(t))return void nt(0===e.length,(()=>`Element arr[${n.join(\"][\")}] is a primitive, but should be an array/TypedArray of ${e[0]} elements`));nt(e.length>0,(()=>`Element arr[${n.join(\"][\")}] should be a primitive, but is an array of ${t.length} elements`)),nt(t.length===e[0],(()=>`Element arr[${n.join(\"][\")}] should have ${e[0]} elements, but has ${t.length} elements`));const r=e.slice(1);for(let e=0;e<t.length;++e)xi(t[e],r,n.concat(e))}function bi(t,e,n,r){if(\"string_or_numeric\"!==t){if(null==t)throw new Error(\"Expected dtype cannot be null.\");if(\"numeric\"!==t&&t!==e||\"numeric\"===t&&\"string\"===e)throw new Error(`Argument '${n}' passed to '${r}' must be ${t} tensor, but got ${e} tensor`)}}function vi(t,e,n,r=\"numeric\"){if(t instanceof js)return bi(r,t.dtype,e,n),t;let s=Ct(t);if(\"string\"!==s&&[\"bool\",\"int32\",\"float32\"].indexOf(r)>=0&&(s=r),bi(r,s,e,n),null==t||!Tt(t)&&!Array.isArray(t)&&\"number\"!=typeof t&&\"boolean\"!=typeof t&&\"string\"!=typeof t){const r=null==t?\"null\":t.constructor.name;throw new Error(`Argument '${e}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`)}const i=yi(t,s);Tt(t)||Array.isArray(t)||(t=[t]);const a=\"string\"!==s?Cs(t,s):it(t,[],!0);return di.makeTensor(a,i,s)}function wi(t,e,n,r=\"numeric\"){if(!Array.isArray(t))throw new Error(`Argument ${e} passed to ${n} must be a \\`Tensor[]\\` or \\`TensorLike[]\\``);return t.map(((t,s)=>vi(t,`${e}[${s}]`,n,r)))}gi.registerFlag(\"DEBUG\",(()=>!1),(t=>{t&&console.warn(\"Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.\")})),gi.registerFlag(\"IS_BROWSER\",(()=>mi())),gi.registerFlag(\"IS_NODE\",(()=>\"undefined\"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node)),gi.registerFlag(\"IS_CHROME\",(()=>\"undefined\"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),gi.registerFlag(\"PROD\",(()=>!1)),gi.registerFlag(\"TENSORLIKE_CHECK_SHAPE_CONSISTENCY\",(()=>gi.getBool(\"DEBUG\"))),gi.registerFlag(\"DEPRECATION_WARNINGS_ENABLED\",(()=>!0)),gi.registerFlag(\"IS_TEST\",(()=>!1)),gi.registerFlag(\"CHECK_COMPUTATION_FOR_ERRORS\",(()=>!0)),gi.registerFlag(\"WRAP_TO_IMAGEBITMAP\",(()=>!1));const Si=\"__op\";function Ti(t){const e=Object.keys(t);if(1!==e.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${e.length} keys.`);let n=e[0];const r=t[n];n.endsWith(\"_\")&&(n=n.substring(0,n.length-1)),n+=Si;const s=(...t)=>{di.startScope(n);try{const e=r(...t);return Ut(e)&&console.error(\"Cannot return a Promise inside of tidy.\"),di.endScope(e),e}catch(t){throw di.endScope(null),t}};return Object.defineProperty(s,\"name\",{value:n,configurable:!0}),s}const _i=Ti({complex_:function(t,e){const n=vi(t,\"real\",\"complex\"),r=vi(e,\"imag\",\"complex\");rt(n.shape,r.shape,`real and imag shapes, ${n.shape} and ${r.shape}, must match in call to tf.complex().`);const s={real:n,imag:r};return di.runKernel(Te,s)}});function Mi(t,e,n,r){if(null==r&&(r=Ct(t)),\"complex64\"===r)throw new Error(\"Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).\");if(!Tt(t)&&!Array.isArray(t)&&\"number\"!=typeof t&&\"boolean\"!=typeof t&&\"string\"!=typeof t)throw new Error(\"values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray\");if(null!=e){Pt(e);const t=at(e),r=at(n);nt(t===r,(()=>`Based on the provided shape, [${e}], the tensor should have ${t} values but has ${r}`));for(let t=0;t<n.length;++t){const r=n[t],s=t!==n.length-1||r!==at(e.slice(t));nt(n[t]===e[t]||!s,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${e}). `))}}return Tt(t)||Array.isArray(t)||(t=[t]),e=e||n,t=\"string\"!==r?Cs(t,r):it(t,[],!0),di.makeTensor(t,e,r)}function ki(t,e,n){return Mi(t,e,yi(t,n),n)}const Ei={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};async function Ii(t,e){const n=[],r=[],s=Array.isArray(t)?t.map((t=>t.name)):Object.keys(t);for(let i=0;i<s.length;++i){const a=s[i],o=Array.isArray(t)?t[i].tensor:t[a];if(\"float32\"!==o.dtype&&\"int32\"!==o.dtype&&\"bool\"!==o.dtype&&\"string\"!==o.dtype&&\"complex64\"!==o.dtype)throw new Error(`Unsupported dtype in weight '${a}': ${o.dtype}`);const l={name:a,shape:o.shape,dtype:o.dtype};if(\"string\"===o.dtype){const t=new Promise((async t=>{const e=await o.bytes(),n=e.reduce(((t,e)=>t+e.length),0)+4*e.length,r=new Uint8Array(n);let s=0;for(let t=0;t<e.length;t++){const n=e[t],i=new Uint8Array(new Uint32Array([n.length]).buffer);r.set(i,s),s+=4,r.set(n,s),s+=n.length}t(r)}));r.push(t)}else r.push(o.data());null!=e&&(l.group=e),n.push(l)}return{data:Ni(await Promise.all(r)),specs:n}}function Ci(t,e){const n={};let r,s=0;for(const i of e){const e=i.name,a=i.dtype,o=i.shape,l=at(o);let u;if(\"quantization\"in i){const n=i.quantization;if(\"uint8\"===n.dtype||\"uint16\"===n.dtype){if(!(\"min\"in n)||!(\"scale\"in n))throw new Error(`Weight ${i.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if(\"float16\"!==n.dtype)throw new Error(`Weight ${i.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if(\"float32\"!==a)throw new Error(`Weight ${i.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${a}.`)}const o=Ei[n.dtype],c=t.slice(s,s+l*o),h=\"uint8\"===n.dtype?new Uint8Array(c):new Uint16Array(c);if(\"float32\"===a)if(\"uint8\"===n.dtype||\"uint16\"===n.dtype){u=new Float32Array(h.length);for(let t=0;t<h.length;t++){const e=h[t];u[t]=e*n.scale+n.min}}else{if(\"float16\"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===r&&(r=Pi()),u=r(h)}else{if(\"int32\"!==a)throw new Error(`Unsupported dtype in weight '${e}': ${a}`);if(\"uint8\"!==n.dtype&&\"uint16\"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);u=new Int32Array(h.length);for(let t=0;t<h.length;t++){const e=h[t];u[t]=Math.round(e*n.scale+n.min)}}s+=l*o}else if(\"string\"===a){const e=at(i.shape);u=[];for(let n=0;n<e;n++){const e=new Uint32Array(t.slice(s,s+4))[0];s+=4;const n=new Uint8Array(t.slice(s,s+e));u.push(n),s+=e}}else{const r=Ei[a],i=t.slice(s,s+l*r);if(\"float32\"===a)u=new Float32Array(i);else if(\"int32\"===a)u=new Int32Array(i);else if(\"bool\"===a)u=new Uint8Array(i);else{if(\"complex64\"!==a)throw new Error(`Unsupported dtype in weight '${e}': ${a}`);{u=new Float32Array(i);const t=new Float32Array(u.length/2),r=new Float32Array(u.length/2);for(let e=0;e<t.length;e++)t[e]=u[2*e],r[e]=u[2*e+1];const s=ki(t,o,\"float32\"),a=ki(r,o,\"float32\");n[e]=_i(s,a),s.dispose(),a.dispose()}}s+=l*r}\"complex64\"!==a&&(n[e]=ki(u,o,a))}return n}function Ni(t){if(null===t)throw new Error(`Invalid input value: ${JSON.stringify(t)}`);let e=0;const n=[];t.forEach((t=>{if(e+=t.byteLength,n.push(t.byteLength===t.buffer.byteLength?t:new t.constructor(t)),!(t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${t.constructor.name}`)}));const r=new Uint8Array(e);let s=0;return n.forEach((t=>{r.set(new Uint8Array(t.buffer),s),s+=t.byteLength})),r.buffer}const Ai=\"undefined\"!=typeof Buffer&&(\"undefined\"==typeof Blob||\"undefined\"==typeof atob||\"undefined\"==typeof btoa);function Ri(t){return Ai?Buffer.byteLength(t):new Blob([t]).size}function Li(t){if(1===t.length)return t[0];let e=0;t.forEach((t=>{e+=t.byteLength}));const n=new Uint8Array(e);let r=0;return t.forEach((t=>{n.set(new Uint8Array(t),r),r+=t.byteLength})),n.buffer}function Di(t){for(t=t.trim();t.endsWith(\"/\");)t=t.slice(0,t.length-1);const e=t.split(\"/\");return e[e.length-1]}function Fi(t,e){const n={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,weightsManifest:e};return null!=t.signature&&(n.signature=t.signature),null!=t.userDefinedMetadata&&(n.userDefinedMetadata=t.userDefinedMetadata),null!=t.modelInitializer&&(n.modelInitializer=t.modelInitializer),null!=t.trainingConfig&&(n.trainingConfig=t.trainingConfig),n}async function $i(t,e){const n={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy};if(null!=t.trainingConfig&&(n.trainingConfig=t.trainingConfig),null!=t.weightsManifest){const[r,s]=await e(t.weightsManifest);n.weightSpecs=r,n.weightData=s}return null!=t.signature&&(n.signature=t.signature),null!=t.userDefinedMetadata&&(n.userDefinedMetadata=t.userDefinedMetadata),null!=t.modelInitializer&&(n.modelInitializer=t.modelInitializer),n}function Oi(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error(\"Expected JSON model topology, received ArrayBuffer.\");return{dateSaved:new Date,modelTopologyType:\"JSON\",modelTopologyBytes:null==t.modelTopology?0:Ri(JSON.stringify(t.modelTopology)),weightSpecsBytes:null==t.weightSpecs?0:Ri(JSON.stringify(t.weightSpecs)),weightDataBytes:null==t.weightData?0:t.weightData.byteLength}}function Pi(){const t=function(){const t=t=>{let e=t<<13,n=0;for(;0==(8388608&e);)n-=8388608,e<<=1;return e&=-8388609,n+=947912704,e|n},e=new Uint32Array(2048);e[0]=0;for(let n=1;n<1024;n++)e[n]=t(n);for(let t=1024;t<2048;t++)e[t]=939524096+(t-1024<<13);return e}(),e=function(){const t=new Uint32Array(64);t[0]=0,t[31]=1199570944,t[32]=2147483648,t[63]=3347054592;for(let e=1;e<31;e++)t[e]=e<<23;for(let e=33;e<63;e++)t[e]=2147483648+(e-32<<23);return t}(),n=function(){const t=new Uint32Array(64);for(let e=0;e<64;e++)t[e]=1024;return t[0]=t[32]=0,t}();return r=>{const s=new ArrayBuffer(4*r.length),i=new Uint32Array(s);for(let s=0;s<r.length;s++){const a=r[s],o=t[n[a>>10]+(1023&a)]+e[a>>10];i[s]=o}return new Float32Array(s)}}class zi{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==zi.instance&&(zi.instance=new zi),zi.instance}static registerSaveRouter(t){zi.getInstance().saveRouters.push(t)}static registerLoadRouter(t){zi.getInstance().loadRouters.push(t)}static getSaveHandlers(t){return zi.getHandlers(t,\"save\")}static getLoadHandlers(t,e){return zi.getHandlers(t,\"load\",e)}static getHandlers(t,e,n){const r=[];return(\"load\"===e?zi.getInstance().loadRouters:zi.getInstance().saveRouters).forEach((e=>{const s=e(t,n);null!==s&&r.push(s)})),r}}const Bi=t=>zi.registerSaveRouter(t),Ui=t=>zi.registerLoadRouter(t),Vi=t=>zi.getSaveHandlers(t),Wi=(t,e)=>zi.getLoadHandlers(t,e),Gi=\"tensorflowjs\",Hi=\"models_store\",ji=\"model_info_store\";function qi(){if(!jt().getBool(\"IS_BROWSER\"))throw new Error(\"Failed to obtain IndexedDB factory because the current environmentis not a web browser.\");const t=\"undefined\"==typeof window?self:window,e=t.indexedDB||t.mozIndexedDB||t.webkitIndexedDB||t.msIndexedDB||t.shimIndexedDB;if(null==e)throw new Error(\"The current browser does not appear to support IndexedDB.\");return e}function Xi(t){const e=t.result;e.createObjectStore(Hi,{keyPath:\"modelPath\"}),e.createObjectStore(ji,{keyPath:\"modelPath\"})}class Ki{constructor(t){if(this.indexedDB=qi(),null==t||!t)throw new Error(\"For IndexedDB, modelPath must not be null, undefined or empty.\");this.modelPath=t}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error(\"BrowserLocalStorage.save() does not support saving model topology in binary formats yet.\");return this.databaseAction(this.modelPath,t)}async load(){return this.databaseAction(this.modelPath)}databaseAction(t,e){return new Promise(((t,n)=>{const r=this.indexedDB.open(Gi,1);r.onupgradeneeded=()=>Xi(r),r.onsuccess=()=>{const s=r.result;if(null==e){const e=s.transaction(Hi,\"readonly\"),r=e.objectStore(Hi).get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return s.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));t(r.result.modelArtifacts)},r.onerror=t=>(s.close(),n(r.error)),e.oncomplete=()=>s.close()}else{const r=Oi(e),i=s.transaction(ji,\"readwrite\");let a=i.objectStore(ji);const o=a.put({modelPath:this.modelPath,modelArtifactsInfo:r});let l;o.onsuccess=()=>{l=s.transaction(Hi,\"readwrite\");const o=l.objectStore(Hi).put({modelPath:this.modelPath,modelArtifacts:e,modelArtifactsInfo:r});o.onsuccess=()=>t({modelArtifactsInfo:r}),o.onerror=t=>{a=i.objectStore(ji);const e=a.delete(this.modelPath);e.onsuccess=()=>(s.close(),n(o.error)),e.onerror=t=>(s.close(),n(o.error))}},o.onerror=t=>(s.close(),n(o.error)),i.oncomplete=()=>{null==l?s.close():l.oncomplete=()=>s.close()}}},r.onerror=t=>n(r.error)}))}}Ki.URL_SCHEME=\"indexeddb://\";const Yi=t=>{return jt().getBool(\"IS_BROWSER\")&&!Array.isArray(t)&&t.startsWith(Ki.URL_SCHEME)?(e=t.slice(Ki.URL_SCHEME.length),new Ki(e)):null;var e};zi.registerSaveRouter(Yi),zi.registerLoadRouter(Yi);class Zi{constructor(){this.indexedDB=qi()}async listModels(){return new Promise(((t,e)=>{const n=this.indexedDB.open(Gi,1);n.onupgradeneeded=()=>Xi(n),n.onsuccess=()=>{const r=n.result,s=r.transaction(ji,\"readonly\"),i=s.objectStore(ji).getAll();i.onsuccess=()=>{const e={};for(const t of i.result)e[t.modelPath]=t.modelArtifactsInfo;t(e)},i.onerror=t=>(r.close(),e(i.error)),s.oncomplete=()=>r.close()},n.onerror=t=>e(n.error)}))}async removeModel(t){var e;return t=(e=t).startsWith(Ki.URL_SCHEME)?e.slice(Ki.URL_SCHEME.length):e,new Promise(((e,n)=>{const r=this.indexedDB.open(Gi,1);r.onupgradeneeded=()=>Xi(r),r.onsuccess=()=>{const s=r.result,i=s.transaction(ji,\"readwrite\"),a=i.objectStore(ji),o=a.get(t);let l;o.onsuccess=()=>{if(null==o.result)return s.close(),n(new Error(`Cannot find model with path '${t}' in IndexedDB.`));{const r=a.delete(t),i=()=>{l=s.transaction(Hi,\"readwrite\");const r=l.objectStore(Hi).delete(t);r.onsuccess=()=>e(o.result.modelArtifactsInfo),r.onerror=t=>n(o.error)};r.onsuccess=i,r.onerror=t=>(i(),s.close(),n(o.error))}},o.onerror=t=>(s.close(),n(o.error)),i.oncomplete=()=>{null==l?s.close():l.oncomplete=()=>s.close()}},r.onerror=t=>n(r.error)}))}}const Ji=\"/\",Qi=\"tensorflowjs_models\",ta=\"info\",ea=\"model_topology\",na=\"weight_specs\",ra=\"weight_data\",sa=\"model_metadata\";function ia(t){return{info:[Qi,t,ta].join(Ji),topology:[Qi,t,ea].join(Ji),weightSpecs:[Qi,t,na].join(Ji),weightData:[Qi,t,ra].join(Ji),modelMetadata:[Qi,t,sa].join(Ji)}}function aa(t){for(const e of Object.values(t))window.localStorage.removeItem(e)}function oa(t){const e=t.split(Ji);if(e.length<3)throw new Error(`Invalid key format: ${t}`);return e.slice(1,e.length-1).join(Ji)}class la{constructor(t){if(!jt().getBool(\"IS_BROWSER\")||\"undefined\"==typeof window||void 0===window.localStorage)throw new Error(\"The current environment does not support local storage.\");if(this.LS=window.localStorage,null==t||!t)throw new Error(\"For local storage, modelPath must not be null, undefined or empty.\");this.modelPath=t,this.keys=ia(this.modelPath)}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error(\"BrowserLocalStorage.save() does not support saving model topology in binary formats yet.\");{const e=JSON.stringify(t.modelTopology),n=JSON.stringify(t.weightSpecs),r=Oi(t);try{this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,e),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(t){if(Ai)return Buffer.from(t).toString(\"base64\");const e=new Uint8Array(t);let n=\"\";for(let t=0,r=e.length;t<r;t++)n+=String.fromCharCode(e[t]);return btoa(n)}(t.weightData));const s={format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,signature:null!=t.signature?t.signature:void 0,userDefinedMetadata:null!=t.userDefinedMetadata?t.userDefinedMetadata:void 0,modelInitializer:null!=t.modelInitializer?t.modelInitializer:void 0,trainingConfig:null!=t.trainingConfig?t.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(s)),{modelArtifactsInfo:r}}catch(t){throw aa(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`)}}}async load(){const t=JSON.parse(this.LS.getItem(this.keys.info));if(null==t)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if(\"JSON\"!==t.modelTopologyType)throw new Error(\"BrowserLocalStorage does not support loading non-JSON model topology yet.\");const e={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);e.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);e.weightSpecs=r;const s=this.LS.getItem(this.keys.modelMetadata);if(null!=s){const t=JSON.parse(s);e.format=t.format,e.generatedBy=t.generatedBy,e.convertedBy=t.convertedBy,null!=t.signature&&(e.signature=t.signature),null!=t.userDefinedMetadata&&(e.userDefinedMetadata=t.userDefinedMetadata),null!=t.modelInitializer&&(e.modelInitializer=t.modelInitializer),null!=t.trainingConfig&&(e.trainingConfig=t.trainingConfig)}const i=this.LS.getItem(this.keys.weightData);if(null==i)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return e.weightData=function(t){if(Ai){const e=Buffer.from(t,\"base64\");return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}const e=atob(t),n=new Uint8Array(e.length);for(let t=0;t<e.length;++t)n.set([e.charCodeAt(t)],t);return n.buffer}(i),e}}la.URL_SCHEME=\"localstorage://\";const ua=t=>{return jt().getBool(\"IS_BROWSER\")&&!Array.isArray(t)&&t.startsWith(la.URL_SCHEME)?(e=t.slice(la.URL_SCHEME.length),new la(e)):null;var e};zi.registerSaveRouter(ua),zi.registerLoadRouter(ua);class ca{constructor(){nt(jt().getBool(\"IS_BROWSER\"),(()=>\"Current environment is not a web browser\")),nt(\"undefined\"==typeof window||void 0!==window.localStorage,(()=>\"Current browser does not appear to support localStorage\")),this.LS=window.localStorage}async listModels(){const t={},e=Qi+Ji,n=Ji+ta;for(let r=0;r<this.LS.length;++r){const s=this.LS.key(r);s.startsWith(e)&&s.endsWith(n)&&(t[oa(s)]=JSON.parse(this.LS.getItem(s)))}return t}async removeModel(t){var e;const n=ia(t=(e=t).startsWith(la.URL_SCHEME)?e.slice(la.URL_SCHEME.length):e);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${t}'`);const r=JSON.parse(this.LS.getItem(n.info));return aa(n),r}}const ha=\"://\";class da{constructor(){this.managers={}}static getInstance(){return null==da.instance&&(da.instance=new da),da.instance}static registerManager(t,e){nt(null!=t,(()=>\"scheme must not be undefined or null.\")),t.endsWith(ha)&&(t=t.slice(0,t.indexOf(ha))),nt(t.length>0,(()=>\"scheme must not be an empty string.\"));const n=da.getInstance();nt(null==n.managers[t],(()=>`A model store manager is already registered for scheme '${t}'.`)),n.managers[t]=e}static getManager(t){const e=this.getInstance().managers[t];if(null==e)throw new Error(`Cannot find model manager for scheme '${t}'`);return e}static getSchemes(){return Object.keys(this.getInstance().managers)}}function pa(t){if(-1===t.indexOf(ha))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${da.getSchemes().join(\",\")}`);return{scheme:t.split(ha)[0],path:t.split(ha)[1]}}async function fa(t,e,n=!1){nt(t!==e,(()=>`Old path and new path are the same: '${t}'`));const r=zi.getLoadHandlers(t);nt(r.length>0,(()=>`Copying failed because no load handler is found for source URL ${t}.`)),nt(r.length<2,(()=>`Copying failed because more than one (${r.length}) load handlers for source URL ${t}.`));const s=r[0],i=zi.getSaveHandlers(e);nt(i.length>0,(()=>`Copying failed because no save handler is found for destination URL ${e}.`)),nt(i.length<2,(()=>`Copying failed because more than one (${r.length}) save handlers for destination URL ${e}.`));const a=i[0],o=pa(t).scheme,l=pa(t).path,u=o===pa(t).scheme,c=await s.load();n&&u&&await da.getManager(o).removeModel(l);const h=await a.save(c);return n&&!u&&await da.getManager(o).removeModel(l),h.modelArtifactsInfo}async function ma(){const t=da.getSchemes(),e={};for(const n of t){const t=await da.getManager(n).listModels();for(const r in t)e[n+ha+r]=t[r]}return e}async function ga(t){const e=pa(t);return da.getManager(e.scheme).removeModel(e.path)}async function ya(t,e){return fa(t,e,!1)}async function xa(t,e){return fa(t,e,!0)}class ba{fetch(t,e){return fetch(t,e)}now(){return performance.now()}encode(t,e){if(\"utf-8\"!==e&&\"utf8\"!==e)throw new Error(`Browser's encoder only supports utf-8, but got ${e}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(t)}decode(t,e){return new TextDecoder(e).decode(t)}}if(jt().get(\"IS_BROWSER\")){jt().setPlatform(\"browser\",new ba);try{da.registerManager(la.URL_SCHEME,new ca)}catch(t){}try{da.registerManager(Ki.URL_SCHEME,new Zi)}catch(t){}}let va;function wa(t,e=\"float32\",n){return e=e||\"float32\",Pt(t),new Vs(t,e,n)}jt().get(\"IS_NODE\")&&jt().setPlatform(\"node\",new class{constructor(){this.util=n(61758),this.textEncoder=new this.util.TextEncoder}fetch(t,e){return null!=jt().global.fetch?jt().global.fetch(t,e):(null==va&&(va=n(78352)),va(t,e))}now(){const t=process.hrtime();return 1e3*t[0]+t[1]/1e6}encode(t,e){if(\"utf-8\"!==e&&\"utf8\"!==e)throw new Error(`Node built-in encoder only supports utf-8, but got ${e}`);return this.textEncoder.encode(t)}decode(t,e){return 0===t.length?\"\":new this.util.TextDecoder(e).decode(t)}});const Sa=Ti({cast_:function(t,e){const n=vi(t,\"x\",\"cast\");if(!wt(e))throw new Error(`Failed to cast to unknown dtype ${e}`);if(\"string\"===e&&\"string\"!==n.dtype||\"string\"!==e&&\"string\"===n.dtype)throw new Error(\"Only strings can be casted to strings\");const r={x:n},s={dtype:e};return di.runKernel(ve,r,s)}}),Ta=Ti({clone_:function(t){const e={x:vi(t,\"x\",\"clone\",\"string_or_numeric\")};return di.runKernel(hn,e)}});function _a(t,e=!1){console.log(t.toString(e))}function Ma(t){return new Promise((t=>setTimeout(t))).then(t)}hi(),Gs={buffer:wa,cast:Sa,clone:Ta,print:_a};class ka{constructor(t){if(!jt().getBool(\"IS_BROWSER\"))throw new Error(\"browserDownloads() cannot proceed because the current environment is not a browser.\");t.startsWith(ka.URL_SCHEME)&&(t=t.slice(ka.URL_SCHEME.length)),null!=t&&0!==t.length||(t=\"model\"),this.modelJsonFileName=t+\".json\",this.weightDataFileName=t+\".weights.bin\"}async save(t){if(\"undefined\"==typeof document)throw new Error(\"Browser downloads are not supported in this environment since `document` is not present\");const e=window.URL.createObjectURL(new Blob([t.weightData],{type:\"application/octet-stream\"}));if(t.modelTopology instanceof ArrayBuffer)throw new Error(\"BrowserDownloads.save() does not support saving model topology in binary formats yet.\");{const n=Fi(t,[{paths:[\"./\"+this.weightDataFileName],weights:t.weightSpecs}]),r=window.URL.createObjectURL(new Blob([JSON.stringify(n)],{type:\"application/json\"})),s=null==this.modelJsonAnchor?document.createElement(\"a\"):this.modelJsonAnchor;if(s.download=this.modelJsonFileName,s.href=r,await Ma((()=>s.dispatchEvent(new MouseEvent(\"click\")))),null!=t.weightData){const t=null==this.weightDataAnchor?document.createElement(\"a\"):this.weightDataAnchor;t.download=this.weightDataFileName,t.href=e,await Ma((()=>t.dispatchEvent(new MouseEvent(\"click\"))))}return{modelArtifactsInfo:Oi(t)}}}}ka.URL_SCHEME=\"downloads://\";class Ea{constructor(t){if(null==t||t.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${t}`);this.jsonFile=t[0],this.weightsFiles=t.slice(1)}async load(){return new Promise(((t,e)=>{const n=new FileReader;n.onload=n=>{const r=JSON.parse(n.target.result),s=r.modelTopology;if(null==s)return void e(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));if(null==r.weightsManifest)return void e(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));if(0===this.weightsFiles.length)return void t({modelTopology:s});const i=$i(r,(t=>this.loadWeights(t)));t(i)},n.onerror=t=>e(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),n.readAsText(this.jsonFile)}))}loadWeights(t){const e=[],n=[];for(const r of t)e.push(...r.weights),n.push(...r.paths);const r=this.checkManifestAndWeightFiles(t),s=n.map((t=>this.loadWeightsFile(t,r[t])));return Promise.all(s).then((t=>[e,Li(t)]))}loadWeightsFile(t,e){return new Promise(((n,r)=>{const s=new FileReader;s.onload=t=>{const e=t.target.result;n(e)},s.onerror=e=>r(`Failed to weights data from file of path '${t}'.`),s.readAsArrayBuffer(e)}))}checkManifestAndWeightFiles(t){const e=[],n=this.weightsFiles.map((t=>Di(t.name))),r={};for(const s of t)s.paths.forEach((t=>{const s=Di(t);if(-1!==e.indexOf(s))throw new Error(`Duplicate file basename found in weights manifest: '${s}'`);if(e.push(s),-1===n.indexOf(s))throw new Error(`Weight file with basename '${s}' is not provided.`);r[t]=this.weightsFiles[n.indexOf(s)]}));if(e.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${e.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return r}}function Ia(t){return new Ea(t)}function Ca(t,e,n,r){!function(t){nt(null!=t&&Array.isArray(t)&&t.length>0,(()=>\"promises must be a none empty array\"))}(t),function(t,e){nt(t>=0&&t<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${t}`)),nt(e>=0&&e<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${e}`)),nt(e>=t,(()=>`startFraction must be no more than endFraction, but got startFraction ${t} and endFraction ${e}`))}(n=null==n?0:n,r=null==r?1:r);let s=0;return Promise.all(t.map((i=>(i.then((i=>{const a=n+ ++s/t.length*(r-n);return e(a),i})),i))))}async function Na(t,e){null==e&&(e={});const n=null==e.fetchFunc?jt().platform.fetch:e.fetchFunc,r=t.map((t=>n(t,e.requestInit,{isBinary:!0}))),s=(null==e.onProgress?await Promise.all(r):await Ca(r,e.onProgress,0,.5)).map((t=>t.arrayBuffer()));return null==e.onProgress?await Promise.all(s):await Ca(s,e.onProgress,.5,1)}async function Aa(t,e=\"\",n,r){return Ra((t=>Na(t,{requestInit:r})))(t,e,n)}function Ra(t){return async(e,n=\"\",r)=>{const s=e.map((()=>!1)),i={},a=null!=r?r.map((()=>!1)):[],o=[];if(e.forEach(((t,e)=>{let n=0;t.weights.forEach((t=>{const l=\"quantization\"in t?t.quantization.dtype:t.dtype,u=Ei[l]*at(t.shape),c=()=>{s[e]=!0,null==i[e]&&(i[e]=[]),i[e].push({manifestEntry:t,groupOffset:n,sizeBytes:u})};null!=r?r.forEach(((e,n)=>{e===t.name&&(c(),a[n]=!0)})):c(),o.push(t.name),n+=u}))})),!a.every((t=>t))){const t=r.filter(((t,e)=>!a[e]));throw new Error(`Could not find weights in manifest with names: ${t.join(\", \")}. \\nManifest JSON has weights with names: ${o.join(\", \")}.`)}const l=s.reduce(((t,e,n)=>(e&&t.push(n),t)),[]),u=[];l.forEach((t=>{e[t].paths.forEach((t=>{const e=n+(n.endsWith(\"/\")?\"\":\"/\")+t;u.push(e)}))}));const c=await t(u),h={};let d=0;return l.forEach((t=>{const n=e[t].paths.length;let r=0;for(let t=0;t<n;t++)r+=c[d+t].byteLength;const s=new ArrayBuffer(r),a=new Uint8Array(s);let o=0;for(let t=0;t<n;t++){const e=new Uint8Array(c[d+t]);a.set(e,o),o+=e.byteLength}i[t].forEach((t=>{const e=Ci(s.slice(t.groupOffset,t.groupOffset+t.sizeBytes),[t.manifestEntry]);for(const t in e)h[t]=e[t]})),d+=n})),h}}zi.registerSaveRouter((t=>jt().getBool(\"IS_BROWSER\")&&!Array.isArray(t)&&t.startsWith(ka.URL_SCHEME)?function(t=\"model\"){return new ka(t)}(t.slice(ka.URL_SCHEME.length)):null));class La{constructor(t,e){if(this.DEFAULT_METHOD=\"POST\",null==e&&(e={}),this.weightPathPrefix=e.weightPathPrefix,this.onProgress=e.onProgress,this.weightUrlConverter=e.weightUrlConverter,null!=e.fetchFunc?(nt(\"function\"==typeof e.fetchFunc,(()=>\"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)\")),this.fetch=e.fetchFunc):this.fetch=jt().platform.fetch,nt(null!=t&&t.length>0,(()=>\"URL path for http must not be null, undefined or empty.\")),Array.isArray(t)&&nt(2===t.length,(()=>`URL paths for http must have a length of 2, (actual length is ${t.length}).`)),this.path=t,null!=e.requestInit&&null!=e.requestInit.body)throw new Error(\"requestInit is expected to have no pre-existing body, but has one.\");this.requestInit=e.requestInit||{}}async save(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error(\"BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.\");const e=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);e.body=new FormData;const n=Fi(t,[{paths:[\"./model.weights.bin\"],weights:t.weightSpecs}]);e.body.append(\"model.json\",new Blob([JSON.stringify(n)],{type:\"application/json\"}),\"model.json\"),null!=t.weightData&&e.body.append(\"model.weights.bin\",new Blob([t.weightData],{type:\"application/octet-stream\"}),\"model.weights.bin\");const r=await this.fetch(this.path,e);if(r.ok)return{modelArtifactsInfo:Oi(t),responses:[r]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${r.status}.`)}async load(){const t=await this.fetch(this.path,this.requestInit);if(!t.ok)throw new Error(`Request to ${this.path} failed with status code ${t.status}. Please verify this URL points to the model JSON of the model to load.`);let e;try{e=await t.json()}catch(t){let e=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(\".pb\")?e+=\" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.\":e+=\" Please make sure the server is serving valid JSON for this request.\",new Error(e)}const n=e.modelTopology,r=e.weightsManifest;if(null==n&&null==r)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return $i(e,(t=>this.loadWeights(t)))}async loadWeights(t){const e=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function(t){const e=t.lastIndexOf(\"/\"),n=t.lastIndexOf(\"?\");return[t.substring(0,e)+\"/\",n>e?t.substring(n):\"\"]}(e),s=this.weightPathPrefix||n,i=[];for(const e of t)i.push(...e.weights);const a=[],o=[];for(const e of t)for(const t of e.paths)null!=this.weightUrlConverter?o.push(this.weightUrlConverter(t)):a.push(s+t+r);return this.weightUrlConverter&&a.push(...await Promise.all(o)),[i,Li(await Na(a,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function Da(t){return null!=t.match(La.URL_SCHEME_REGEX)}La.URL_SCHEME_REGEX=/^https?:\\/\\//;const Fa=(t,e)=>{if(\"undefined\"==typeof fetch&&(null==e||null==e.fetchFunc))return null;{let n=!0;if(n=Array.isArray(t)?t.every((t=>Da(t))):Da(t),n)return $a(t,e)}return null};function $a(t,e){return new La(t,e)}function Oa(t,e){return $a(t,e)}zi.registerSaveRouter(Fa),zi.registerLoadRouter(Fa);class Pa{constructor(t){this.modelArtifacts=t}async load(){return this.modelArtifacts}}class za{constructor(t){this.saveHandler=t}async save(t){return this.saveHandler(t)}}function Ba(t,e,n,r){return 1===arguments.length?null!=t.modelTopology||null!=t.weightSpecs?new Pa(t):(console.warn(\"Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release.\"),new Pa({modelTopology:t})):(console.warn(\"Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release.\"),new Pa({modelTopology:t,weightSpecs:e,weightData:n,trainingConfig:r}))}function Ua(t){return new za(t)}const Va=Ti({matMul_:function(t,e,n=!1,r=!1){let s=vi(t,\"a\",\"matMul\"),i=vi(e,\"b\",\"matMul\");[s,i]=ri(s,i);const a={a:s,b:i},o={transposeA:n,transposeB:r};return di.runKernel(me,a,o)}}),Wa=Ti({oneHot_:function(t,e,n=1,r=0){if(e<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${e}`);const s={indices:vi(t,\"indices\",\"oneHot\",\"int32\")},i={depth:e,onValue:n,offValue:r};return di.runKernel(Kn,s,i)}}),Ga=Ti({transpose_:function(t,e){const n=vi(t,\"x\",\"transpose\");if(null==e&&(e=n.shape.map(((t,e)=>e)).reverse()),nt(n.rank===e.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of perm ${e}.`)),e.forEach((t=>{nt(t>=0&&t<n.rank,(()=>\"All entries in 'perm' must be between 0 and \"+(n.rank-1)+` but got ${e}`))})),n.rank<=1)return n.clone();const r={x:n},s={perm:e};return di.runKernel(jr,r,s)}}),Ha=Ti({confusionMatrix_:function(t,e,n){const r=vi(t,\"labels\",\"confusionMatrix\"),s=vi(e,\"predictions\",\"confusionMatrix\");nt(null==n||n>0&&Number.isInteger(n),(()=>`If provided, numClasses must be a positive integer, but got ${n}`)),nt(1===r.rank,(()=>`Expected the rank of labels to be 1, but got ${r.rank}`)),nt(1===s.rank,(()=>`Expected the rank of predictions to be 1, but got ${s.rank}`)),nt(r.shape[0]===s.shape[0],(()=>`Mismatch in the number of examples: ${r.shape[0]} vs. ${s.shape[0]}. Labels and predictions should have the same number of elements.`)),nt(n>0&&Number.isInteger(n),(()=>`numClasses is required to be a positive integer, but got ${n}`));const i=Wa(Sa(r,\"int32\"),n),a=Wa(Sa(s,\"int32\"),n),o=Ga(i),l=Va(o,a);return Sa(l,\"int32\")}});function ja(t,e,n){if(st(t),null!=e&&3!==e.length)throw new Error(\"tensor3d() requires shape to have three numbers\");const r=yi(t,n);if(3!==r.length&&1!==r.length)throw new Error(\"tensor3d() requires values to be number[][][] or flat/TypedArray\");if(1===r.length&&null==e)throw new Error(\"tensor3d() requires shape to be provided when `values` are a flat array\");return Mi(t,e,r,n)}let qa;function Xa(t,e=3){if(e>4)throw new Error(\"Cannot construct Tensor with more than 4 channels from pixels.\");if(null==t)throw new Error(\"pixels passed to tf.browser.fromPixels() can not be null\");let n=!1,r=!1,s=!1,i=!1,a=!1,o=!1;if(t.data instanceof Uint8Array)n=!0;else if(\"undefined\"!=typeof ImageData&&t instanceof ImageData)r=!0;else if(\"undefined\"!=typeof HTMLVideoElement&&t instanceof HTMLVideoElement)s=!0;else if(\"undefined\"!=typeof HTMLImageElement&&t instanceof HTMLImageElement)i=!0;else if(null!=t.getContext)a=!0;else{if(!(\"undefined\"!=typeof ImageBitmap&&t instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${t.constructor.name}`);o=!0}if(s){const e=2;if(s&&t.readyState<e)throw new Error(\"The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.\")}if(null!=is(Jr,di.backendName)){const n={pixels:t},r={numChannels:e};return di.runKernel(Jr,n,r)}const[l,u]=s?[t.videoWidth,t.videoHeight]:[t.width,t.height];let c,h;if(a?c=t.getContext(\"2d\").getImageData(0,0,l,u).data:r||n?c=t.data:(i||s||o)&&(null==qa&&(qa=document.createElement(\"canvas\").getContext(\"2d\")),qa.canvas.width=l,qa.canvas.height=u,qa.drawImage(t,0,0,l,u),c=qa.getImageData(0,0,l,u).data),4===e)h=new Int32Array(c);else{const t=l*u;h=new Int32Array(t*e);for(let n=0;n<t;n++)for(let t=0;t<e;++t)h[n*e+t]=c[4*n+t]}return ja(h,[u,l,e],\"int32\")}async function Ka(t,e=3){let n=null;if(jt().getBool(\"WRAP_TO_IMAGEBITMAP\")&&function(t){return\"undefined\"!=typeof window&&\"undefined\"!=typeof ImageBitmap&&window.hasOwnProperty(\"createImageBitmap\")&&!(t instanceof ImageBitmap)&&function(t){return null!=t&&0!==t.width&&0!==t.height}(t)&&!function(t){return null!=t&&t.data instanceof Uint8Array}(t)}(t)){let e;try{e=await createImageBitmap(t,{premultiplyAlpha:\"none\"})}catch(t){e=null}n=null!=e&&e.width===t.width&&e.height===t.height?e:t}else n=t;return Xa(n,e)}async function Ya(t,e){let n=vi(t,\"img\",\"toPixels\");if(!(t instanceof js)){const t=n;n=Sa(t,\"int32\"),t.dispose()}if(2!==n.rank&&3!==n.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);const[r,s]=n.shape.slice(0,2),i=2===n.rank?1:n.shape[2];if(i>4||2===i)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${i}`);if(\"float32\"!==n.dtype&&\"int32\"!==n.dtype)throw new Error(`Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`);const a=await n.data(),o=\"float32\"===n.dtype?255:1,l=new Uint8ClampedArray(s*r*4);for(let t=0;t<r*s;++t){const e=[0,0,0,255];for(let r=0;r<i;r++){const s=a[t*i+r];if(\"float32\"===n.dtype){if(s<0||s>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${s}.`)}else if(\"int32\"===n.dtype&&(s<0||s>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${s}.`);1===i?(e[0]=s*o,e[1]=s*o,e[2]=s*o):e[r]=s*o}const r=4*t;l[r+0]=Math.round(e[0]),l[r+1]=Math.round(e[1]),l[r+2]=Math.round(e[2]),l[r+3]=Math.round(e[3])}if(null!=e){e.width=s,e.height=r;const t=e.getContext(\"2d\"),n=new ImageData(l,s,r);t.putImageData(n,0,0)}return n!==t&&n.dispose(),l}const Za=Ti({fromPixels_:Xa});function Ja(t,e){const n=t.shape.length,r=e.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(r<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${r}.`);if(\"int32\"!==e.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.shape[r-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${e.shape[r-1]} vs. ${n}`);if(0===at(t.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${t.shape}.`);const s=e.shape,i=s[s.length-1];let a=1;for(let t=0;t<s.length-1;++t)a*=s[t];const o=t.shape,l=s.slice();l.pop();let u=1;for(let t=i;t<n;++t)u*=o[t],l.push(o[t]);const c=[...Rt(t.shape).map((t=>t/u)),1].slice(0,i);return[l,a,u,c]}function Qa(t,e,n){const r=e.rank>1?e.shape[e.rank-1]:1,s=e.rank>1?e.rank-1:1,i=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${e.shape}, shape: ${t}, sliceDim: ${r}, and batchDim: ${s}.`;if(n.rank<s)throw new Error(i+` update.rank < ${s}. `);if(t.length<r+(n.rank-s))throw new Error(i+` Output shape length < ${r+(n.rank-s)}`);if(n.rank!==s+t.length-r)throw new Error(i+\" update.rank != \"+(s+t.length-r));for(let t=0;t<s;++t)if(n.shape[t]!==e.shape[t])throw new Error(i+` updates.shape[${t}] (${n.shape[t]}) != indices.shape[${t}] (${e.shape[t]}).`);for(let e=0;e<n.rank-s;++e)if(n.shape[e+s]!==t[e+r])throw new Error(i+` updates.shape[${e+s}] (${n.shape[e+s]}) != shape[${e+s}] (${t[e+s]})`)}function to(t,e,n){if(e.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${e.rank}.`);if(t.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${t.rank}.`);if(\"int32\"!==e.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${e.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===e.size)throw new Error(`Indices specified for empty output. indices shape: ${e.shape}`);if(0===t.size)throw new Error(`Updates specified for empty output. updates shape: ${t.shape}`)}Qa(n,e,t)}function eo(t,e,n){const r=e.shape.length,s=r>1?e.shape[r-1]:1,i=n.length;let a=1;for(let t=s;t<i;++t)a*=n[t];const o=s<1?1:s;return{sliceRank:s,numUpdates:at(e.shape)/o,sliceSize:a,strides:[...Rt(n.slice(0,s)),1],outputSize:at(n)}}function no(t,e,n){const r=t.shape.length;nt(r===e.length,(()=>`Error in slice${r}D: Length of begin ${e} must match the rank of the array (${r}).`)),nt(r===n.length,(()=>`Error in slice${r}D: Length of size ${n} must match the rank of the array (${r}).`));for(let s=0;s<r;++s)nt(e[s]+n[s]<=t.shape[s],(()=>`Error in slice${r}D: begin[${s}] + size[${s}] (${e[s]+n[s]}) would overflow input.shape[${s}] (${t.shape[s]})`))}function ro(t){const e=[];let n=0;for(;t>0;)1&t&&e.push(n),t/=2,n++;return e}function so(t,e,n){const r=[];for(let s=0;s<t.length;s++)r[s]=Math.ceil((e[s]-t[s])/n[s]);return r}function io(t,e,n,r){const s=[...t];for(let t=s.length;t<r.length;t++)s.push(1);for(let t=0;t<n;t++)0===t?s[e]=1:(s.splice(e,0,1),s.pop());return s}function ao(t,e,n){return n<=t?n:n-(e-1)}function oo(t,e){const n=[];for(let r=0;r<t;r++)n.push(e+r);return n}function lo(t,e,n,r,s,i,a,o,l){const u=t.length;let c=new Array(u),h=new Array(u),d=new Array(u);if(e.length&&n>0){const l=e[0],u=n+1;c=uo(a,l,u,r,t),h=co(o,l,u,s,t),d=io(i,l,u,t)}else for(let e=0;e<u;e++)c[e]=po(a,r,i,t,e,l),h[e]=fo(o,s,i,t,e,l),d[e]=ho(i,e,l);return{begin:c,end:h,strides:d}}function uo(t,e,n,r,s){const i=[...s],a=oo(n,e);for(let s=0;s<i.length;s++)if(a.indexOf(s)>-1)i[s]=0;else{const a=ao(e,n,s);let o=r[a];t&1<<a&&(o=0),i[s]=o}return i}function co(t,e,n,r,s){const i=[...s],a=oo(n,e);for(let s=0;s<i.length;s++)if(a.indexOf(s)>-1)i[s]=Number.MAX_SAFE_INTEGER;else{const a=ao(e,n,s);let o=r[a];t&1<<a&&(o=Number.MAX_SAFE_INTEGER),i[s]=o}for(let t=0;t<i.length;t++){const e=s[t];i[t]<0&&(i[t]+=e),i[t]=Y(0,i[t],s[t])}return i}function ho(t,e,n){let r=t[e];return(n&1<<e||null==r)&&(r=1),r}function po(t,e,n,r,s,i){let a=e[s];const o=n[s]||1;(t&1<<s||i&1<<s||null==a)&&(a=o>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const l=r[s];return a<0&&(a+=l),a=Y(0,a,l-1),a}function fo(t,e,n,r,s,i){let a=e[s];const o=n[s]||1;(t&1<<s||i&1<<s||null==a)&&(a=o>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const l=r[s];return a<0&&(a+=l),a=o>0?Y(0,a,l):Y(-1,a,l-1),a}function mo(t,e,n){let r=n.length;for(let t=0;t<n.length;t++)if(n[t]>1){r=t;break}for(let s=r+1;s<n.length;s++)if(e[s]>0||n[s]!==t[s])return!1;return!0}function go(t,e){let n=t.length>0?t[t.length-1]:1;for(let r=0;r<t.length-1;r++)n+=t[r]*e[r];return n}function yo(t,e,n){let r;const s=t.shape.length;let i;return r=\"number\"==typeof e?[e,...new Array(s-1).fill(0)]:e.length<s?e.concat(new Array(s-e.length).fill(0)):e.slice(),r.forEach((t=>{nt(-1!==t,(()=>\"slice() does not support negative begin indexing.\"))})),i=null==n?new Array(s).fill(-1):\"number\"==typeof n?[n,...new Array(s-1).fill(-1)]:n.length<s?n.concat(new Array(s-n.length).fill(-1)):n,i=i.map(((e,n)=>e>=0?e:(nt(-1===e,(()=>`Negative size values should be exactly -1 but got ${e} for the slice() size at index ${n}.`)),t.shape[n]-r[n]))),[r,i]}function xo(t,e,n,r,s,i,a,o,l){let u=e.slice(),c=n.slice(),h=r;null==r&&(h=new Array(u.length));const d=ro(a);if(d.length>1)throw new Error(\"Multiple ellipses in slice is not allowed.\");if(0!==a&&0!==o)throw new Error(\"Using both ellipsisMask and newAxisMask is not yet supported.\");if(0!==a&&0!==l)throw new Error(\"Using both ellipsisMask and shrinkAxisMask is not yet supported.\");const p=t.length-u.length,f=ro(o),m=t.slice();f.forEach((t=>{u[t]=0,c[t]=1,m.splice(t,0,1)}));const{begin:g,end:y,strides:x}=lo(m,d,p,u,c,h,s,i,a);u=g,c=y,h=x;const b=ro(l);b.forEach((t=>{c[t]=u[t]+1,h[t]=1}));const v=so(u,c,h),w=v.filter(((t,e)=>-1===b.indexOf(e)));return{nonStrided:h.every((t=>1===t)),$begin:u,$end:c,$strides:h,size:v,newShape:m,outShape:w}}class bo{getClassName(){return this.constructor.className}static fromConfig(t,e){return new t(e)}}class vo{constructor(){this.classNameMap={}}static getMap(){return null==vo.instance&&(vo.instance=new vo),vo.instance}static register(t){vo.getMap().classNameMap[t.className]=[t,t.fromConfig]}}function wo(t){nt(null!=t.className,(()=>\"Class being registered does not have the static className property defined.\")),nt(\"string\"==typeof t.className,(()=>\"className is required to be a string, but got type \"+typeof t.className)),nt(t.className.length>0,(()=>\"Class being registered has an empty-string as its className, which is disallowed.\")),vo.register(t)}const So=.1;function To(t,e,n){return null==n&&(n=_o()),Mo(t,e,((t,e)=>Co(t,e,n)))}function _o(){return 32===di.backend.floatPrecision()?.001:So}function Mo(t,e,n){let r=!0;if((Tt(t)||Tt(e))&&(r=!1),Tt(t)&&Tt(e)&&(r=!0),r){const n=t.constructor.name,r=e.constructor.name;if(n!==r)throw new Error(`Arrays are of different type. Actual: ${n}. Expected: ${r}`)}if(Array.isArray(t)&&Array.isArray(e)){const n=yi(t),r=yi(e);if(!lt(n,r))throw new Error(`Arrays have different shapes. Actual: [${n}]. Expected: [${r}]`)}const s=Tt(t)?t:it(t),i=Tt(e)?e:it(e);if(s.length!==i.length)throw new Error(`Arrays have different lengths actual: ${s.length} vs expected: ${i.length}.\\nActual:   ${s}.\\nExpected: ${i}.`);for(let t=0;t<i.length;++t){const e=s[t],r=i[t];if(!n(e,r))throw new Error(`Arrays differ: actual[${t}] = ${e}, expected[${t}] = ${r}.\\nActual:   ${s}.\\nExpected: ${i}.`)}}function ko(t,e){t().then((()=>e.fail()),(()=>e()))}function Eo(t,e){const n=\"string\"==typeof e||\"number\"==typeof e||\"boolean\"==typeof e?[e]:e;return kt(t)||kt(t[0])||kt(e)||kt(e[0])?Mo(t,n,((t,e)=>t==e)):Mo(t,e,((t,e)=>Co(t,e,0)))}function Io(t,e,n){if(null==n&&(n=_o()),!Co(t,e,n))throw new Error(`Numbers differ: actual === ${t}, expected === ${e}`)}function Co(t,e,n){return!isFinite(t)&&!isFinite(e)||!(isNaN(t)||isNaN(e)||Math.abs(t-e)>n)}function No(t,e,n){for(let r=0;r<t.length;r++)if(t[r]<e||t[r]>n)throw new Error(`Value out of range:${t[r]} low: ${e}, high: ${n}`)}function Ao(t,e){expect(new Float32Array(t)).toEqual(new Float32Array(e))}function Ro(t){for(let e=0;e<t.length;e++){const n=t[e];Array.isArray(n)?Ro(n):t[e]=Rs(n)}return t}const Lo=\"3.9.0\";function Do(){jt().set(\"PROD\",!0)}function Fo(){jt().set(\"DEBUG\",!0)}function $o(){jt().set(\"DEPRECATION_WARNINGS_ENABLED\",!1),console.warn(\"TensorFlow.js deprecation warnings have been disabled.\")}function Oo(t){jt().getBool(\"DEPRECATION_WARNINGS_ENABLED\")&&console.warn(t+\" You can disable deprecation warnings with tf.disableDeprecationWarnings().\")}function Po(){di.disposeVariables()}function zo(){return di}function Bo(){return di.memory()}function Uo(t){return di.profile(t)}function Vo(t,e){return di.tidy(t,e)}function Wo(t){ai(t).forEach((t=>t.dispose()))}function Go(t){return di.keep(t)}function Ho(t){return di.time(t)}function jo(t){return di.setBackend(t)}function qo(){return di.ready()}function Xo(){return di.backendName}function Ko(t){di.removeBackend(t)}function Yo(t){return di.findBackend(t)}function Zo(t){return di.findBackendFactory(t)}function Jo(t,e,n=1){return di.registerBackend(t,e,n)}function Qo(){return di.backend}function tl(t,e){jt().setPlatform(t,e)}Hs=Oo;const el=Ti({add_:function(t,e){let n=vi(t,\"a\",\"add\"),r=vi(e,\"b\",\"add\");[n,r]=ri(n,r);const s={a:n,b:r};return di.runKernel(te,s)}}),nl=Ti({floorDiv_:function(t,e){let n=vi(t,\"a\",\"floorDiv\"),r=vi(e,\"b\",\"floorDiv\");[n,r]=ri(n,r);const s={a:n,b:r};return di.runKernel(sn,s)}}),rl=Ti({div_:function(t,e){let n=vi(t,\"a\",\"div\"),r=vi(e,\"b\",\"div\");if([n,r]=ri(n,r),\"int32\"===n.dtype&&\"int32\"===r.dtype)return nl(n,r);const s={a:n,b:r};return di.runKernel(He,s,{})}}),sl=Ti({mul_:function(t,e){let n=vi(t,\"a\",\"mul\"),r=vi(e,\"b\",\"mul\");[n,r]=ri(n,r);const s={a:n,b:r};return di.runKernel(Vn,s)}}),il=Ti({sqrt_:function(t){const e={x:vi(t,\"x\",\"sqrt\")};return di.runKernel(_r,e)}}),al=Ti({square_:function(t){const e=vi(t,\"x\",\"square\");return di.runKernel(\"Square\",{x:e},{})}}),ol=Ti({zerosLike_:function(t){const e={x:vi(t,\"x\",\"zerosLike\")};return di.runKernel(Yr,e)}});function ll(t){return nt(Nt(t),(()=>\"The f passed in grad(f) must be a function\")),(e,n)=>{const r=vi(e,\"x\",\"tf.grad\",\"string_or_numeric\"),s=null!=n?vi(n,\"dy\",\"tf.grad\"):null;return di.tidy((()=>{const{value:e,grads:n}=di.gradients((()=>t(r)),[r],s);return null!=s&&rt(e.shape,s.shape,\"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)\"),fl(n),n[0]}))}}function ul(t){return nt(Nt(t),(()=>\"The f passed in grads(f) must be a function\")),(e,n)=>{nt(Array.isArray(e),(()=>\"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s\"));const r=wi(e,\"args\",\"tf.grads\",\"string_or_numeric\"),s=null!=n?vi(n,\"dy\",\"tf.grads\"):null;return di.tidy((()=>{const{value:e,grads:n}=di.gradients((()=>t(...r)),r,s);return null!=s&&rt(e.shape,s.shape,\"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])\"),fl(n),n}))}}function cl(t){return nt(Nt(t),(()=>\"The f passed in valueAndGrad(f) must be a function\")),(e,n)=>{nt(e instanceof js,(()=>\"The x passed in valueAndGrad(f)(x) must be a tensor\")),nt(null==n||n instanceof js,(()=>\"The dy passed in valueAndGrad(f)(x, dy) must be a tensor\"));const{grads:r,value:s}=di.gradients((()=>t(e)),[e],n);return fl(r),{grad:r[0],value:s}}}function hl(t){return nt(Nt(t),(()=>\"The f passed in valueAndGrads(f) must be a function\")),(e,n)=>{nt(Array.isArray(e)&&e.every((t=>t instanceof js)),(()=>\"The args passed in valueAndGrads(f)(args) must be array of tensors\")),nt(null==n||n instanceof js,(()=>\"The dy passed in valueAndGrads(f)(args, dy) must be a tensor\"));const r=di.gradients((()=>t(...e)),e,n);return null!=n&&rt(r.value.shape,n.shape,\"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])\"),fl(r.grads),r}}function dl(t,e){nt(Nt(t),(()=>\"The f passed in variableGrads(f) must be a function\")),nt(null==e||Array.isArray(e)&&e.every((t=>t instanceof Xs)),(()=>\"The varList passed in variableGrads(f, varList) must be an array of variables\"));const n=null!=e;if(!n){e=[];for(const t in di.registeredVariables)e.push(di.registeredVariables[t])}const r=n?e.filter((t=>!t.trainable)):null,s=e.length;nt((e=e.filter((t=>t.trainable))).length>0,(()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${s} variables is trainable.`));const{value:i,grads:a}=di.gradients(t,e,null,!0);nt(a.some((t=>null!=t)),(()=>\"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().\")),nt(0===i.rank,(()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${i.rank} tensor`));const o={};return e.forEach(((t,e)=>{null!=a[e]&&(o[t.name]=a[e])})),null!=r&&r.forEach((t=>o[t.name]=null)),{value:i,grads:o}}function pl(t){return di.customGrad(t)}function fl(t){if(t.filter((t=>null==t)).length>0)throw new Error(\"Cannot compute gradient of y=f(x) with respect to x. Make sure that\\n    the f you passed encloses all operations that lead from x to y.\")}function ml(t,e){if((Tt(t)&&\"string\"!==e||Array.isArray(t))&&\"complex64\"!==e)throw new Error(\"Error creating a new Scalar: value must be a primitive (number|boolean|string)\");if(\"string\"===e&&Tt(t)&&!(t instanceof Uint8Array))throw new Error(\"When making a scalar from encoded string, the value must be `Uint8Array`.\");return Mi(t,[],[],e)}class gl extends bo{minimize(t,e=!1,n){const{value:r,grads:s}=this.computeGradients(t,n);if(null!=n){const t=n.map((t=>({name:t.name,tensor:s[t.name]})));this.applyGradients(t)}else this.applyGradients(s);return Wo(s),e?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(t,e){return dl(t,e)}dispose(){null!=this.iterations_&&Wo(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:\"iter\",tensor:ml(this.iterations_,\"int32\")}}async getWeights(){throw new Error(\"getWeights() is not implemented for this optimizer yet.\")}async setWeights(t){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(t){return this.iterations_=(await t[0].tensor.data())[0],t.slice(1)}}Object.defineProperty(gl,Symbol.hasInstance,{value:t=>null!=t.minimize&&null!=t.computeGradients&&null!=t.applyGradients});class yl extends gl{constructor(t,e,n=null){super(),this.learningRate=t,this.rho=e,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=di.backend.epsilon())}applyGradients(t){(Array.isArray(t)?t.map((t=>t.name)):Object.keys(t)).forEach(((e,n)=>{const r=di.registeredVariables[e];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${e}/accum_grad`,variable:Vo((()=>ol(r).variable(!1)))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:`${e}/accum_var`,variable:Vo((()=>ol(r).variable(!1)))});const s=Array.isArray(t)?t[n].tensor:t[e];if(null==s)return;const i=this.accumulatedGrads[n].variable,a=this.accumulatedUpdates[n].variable;Vo((()=>{const t=el(sl(i,this.rho),sl(al(s),1-this.rho)),e=sl(rl(il(el(a,this.epsilon)),il(el(i,this.epsilon))),s),n=el(sl(a,this.rho),sl(al(e),1-this.rho));i.assign(t),a.assign(n);const o=el(sl(e,-this.learningRate),r);r.assign(o)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(Wo(this.accumulatedGrads.map((t=>t.variable))),Wo(this.accumulatedUpdates.map((t=>t.variable))))}async getWeights(){const t=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(t.map((t=>({name:t.originalName,tensor:t.variable}))))}async setWeights(t){const e=(t=await this.extractIterations(t)).length/2;this.accumulatedGrads=t.slice(0,e).map((t=>({originalName:t.name,variable:t.tensor.variable(!1)}))),this.accumulatedUpdates=t.slice(e,2*e).map((t=>({originalName:t.name,variable:t.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.rho,e.epsilon)}}function xl(t,e,n){const r={shape:t,value:e,dtype:n};return di.runKernel(en,{},r)}yl.className=\"Adadelta\",wo(yl);class bl extends gl{constructor(t,e=.1){super(),this.learningRate=t,this.initialAccumulatorValue=e,this.accumulatedGrads=[]}applyGradients(t){(Array.isArray(t)?t.map((t=>t.name)):Object.keys(t)).forEach(((e,n)=>{const r=di.registeredVariables[e];if(null==this.accumulatedGrads[n]){const t=!1;this.accumulatedGrads[n]={originalName:`${e}/accumulator`,variable:Vo((()=>xl(r.shape,this.initialAccumulatorValue).variable(t)))}}const s=Array.isArray(t)?t[n].tensor:t[e];if(null==s)return;const i=this.accumulatedGrads[n].variable;Vo((()=>{const t=el(i,al(s));i.assign(t);const e=el(sl(rl(s,il(el(t,di.backend.epsilon()))),-this.learningRate),r);r.assign(e)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&Wo(this.accumulatedGrads.map((t=>t.variable)))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map((t=>({name:t.originalName,tensor:t.variable}))))}async setWeights(t){t=await this.extractIterations(t),this.accumulatedGrads=t.map((t=>({originalName:t.name,variable:t.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(t,e){return new t(e.learningRate,e.initialAccumulatorValue)}}bl.className=\"Adagrad\",wo(bl);const vl=Ti({pow_:function(t,e){let n=vi(t,\"base\",\"pow\"),r=vi(e,\"exp\",\"pow\");[n,r]=ri(n,r);const s={a:n,b:r};return di.runKernel(Qn,s)}}),wl=Ti({sub_:function(t,e){let n=vi(t,\"a\",\"sub\"),r=vi(e,\"b\",\"sub\");[n,r]=ri(n,r);const s={a:n,b:r};return di.runKernel(Br,s)}});class Sl extends gl{constructor(t,e,n,r=null){super(),this.learningRate=t,this.beta1=e,this.beta2=n,this.epsilon=r,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],Vo((()=>{this.accBeta1=ml(e).variable(),this.accBeta2=ml(n).variable()})),null==r&&(this.epsilon=di.backend.epsilon())}applyGradients(t){const e=Array.isArray(t)?t.map((t=>t.name)):Object.keys(t);Vo((()=>{const n=wl(1,this.accBeta1),r=wl(1,this.accBeta2);e.forEach(((e,s)=>{const i=di.registeredVariables[e];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:`${e}/m`,variable:Vo((()=>ol(i).variable(!1)))}),null==this.accumulatedSecondMoment[s]&&(this.accumulatedSecondMoment[s]={originalName:`${e}/v`,variable:Vo((()=>ol(i).variable(!1)))});const a=Array.isArray(t)?t[s].tensor:t[e];if(null==a)return;const o=this.accumulatedFirstMoment[s].variable,l=this.accumulatedSecondMoment[s].variable,u=el(sl(o,this.beta1),sl(a,1-this.beta1)),c=el(sl(l,this.beta2),sl(al(a),1-this.beta2)),h=rl(u,n),d=rl(c,r);o.assign(u),l.assign(c);const p=el(sl(rl(h,el(il(d),this.epsilon)),-this.learningRate),i);i.assign(p)})),this.accBeta1.assign(sl(this.accBeta1,this.beta1)),this.accBeta2.assign(sl(this.accBeta2,this.beta2))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&Wo(this.accumulatedFirstMoment.map((t=>t.variable))),null!=this.accumulatedSecondMoment&&Wo(this.accumulatedSecondMoment.map((t=>t.variable)))}async getWeights(){const t=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(t.map((t=>({name:t.originalName,tensor:t.variable}))))}async setWeights(t){t=await this.extractIterations(t),Vo((()=>{this.accBeta1.assign(vl(this.beta1,this.iterations_+1)),this.accBeta2.assign(vl(this.beta2,this.iterations_+1))}));const e=t.length/2;this.accumulatedFirstMoment=t.slice(0,e).map((t=>({originalName:t.name,variable:t.tensor.variable(!1)}))),this.accumulatedSecondMoment=t.slice(e,2*e).map((t=>({originalName:t.name,variable:t.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon)}}Sl.className=\"Adam\",wo(Sl);const Tl=Ti({abs_:function(t){const e=vi(t,\"x\",\"abs\");if(\"complex64\"===e.dtype){const t={x:e};return di.runKernel(_e,t)}{const t={x:e};return di.runKernel(Zt,t)}}});function _l(t,e){const n=t.length,r=[];for(let s=0;s<n;s++){const i=n-1-s,a=t[i]||1;(e[e.length-1-s]||1)>1&&1===a&&r.unshift(i)}return r}function Ml(t,e){const n=[];for(let r=0;r<e.length;r++){const s=t[t.length-r-1],i=e.length-r-1,a=e[i];(null==s||1===s&&a>1)&&n.unshift(i)}return n}function kl(t,e){const n=[],r=Math.max(t.length,e.length);for(let s=0;s<r;s++){let r=t[t.length-s-1];null==r&&(r=1);let i=e[e.length-s-1];if(null==i&&(i=1),1===r)n.unshift(i);else if(1===i)n.unshift(r);else{if(r!==i)throw Error(`Operands could not be broadcast together with shapes ${t} and ${e}.`);n.unshift(r)}}return n}const El=Ti({maximum_:function(t,e){let n=vi(t,\"a\",\"maximum\"),r=vi(e,\"b\",\"maximum\");[n,r]=ri(n,r),\"bool\"===n.dtype&&(n=Sa(n,\"int32\"),r=Sa(r,\"int32\")),kl(n.shape,r.shape);const s={a:n,b:r};return di.runKernel(Nn,s)}});class Il extends gl{constructor(t,e,n,r=null,s=0){super(),this.learningRate=t,this.beta1=e,this.beta2=n,this.epsilon=r,this.decay=s,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],Vo((()=>{this.iteration=ml(0).variable(),this.accBeta1=ml(e).variable()})),null==r&&(this.epsilon=di.backend.epsilon())}applyGradients(t){const e=Array.isArray(t)?t.map((t=>t.name)):Object.keys(t);Vo((()=>{const n=wl(1,this.accBeta1),r=rl(-this.learningRate,el(sl(this.iteration,this.decay),1));e.forEach(((e,s)=>{const i=di.registeredVariables[e];null==this.accumulatedFirstMoment[s]&&(this.accumulatedFirstMoment[s]={originalName:`${e}/m`,variable:ol(i).variable(!1)}),null==this.accumulatedWeightedInfNorm[s]&&(this.accumulatedWeightedInfNorm[s]={originalName:`${e}/v`,variable:ol(i).variable(!1)});const a=Array.isArray(t)?t[s].tensor:t[e];if(null==a)return;const o=this.accumulatedFirstMoment[s].variable,l=this.accumulatedWeightedInfNorm[s].variable,u=el(sl(o,this.beta1),sl(a,1-this.beta1)),c=sl(l,this.beta2),h=Tl(a),d=El(c,h);o.assign(u),l.assign(d);const p=el(sl(rl(r,n),rl(u,el(d,this.epsilon))),i);i.assign(p)})),this.iteration.assign(el(this.iteration,1)),this.accBeta1.assign(sl(this.accBeta1,this.beta1))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&Wo(this.accumulatedFirstMoment.map((t=>t.variable))),null!=this.accumulatedWeightedInfNorm&&Wo(this.accumulatedWeightedInfNorm.map((t=>t.variable)))}async getWeights(){throw new Error(\"getWeights() is not implemented for Adamax yet.\")}async setWeights(t){throw new Error(\"setWeights() is not implemented for Adamax yet.\")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon,e.decay)}}Il.className=\"Adamax\",wo(Il);class Cl extends gl{constructor(t){super(),this.learningRate=t,this.setLearningRate(t)}applyGradients(t){(Array.isArray(t)?t.map((t=>t.name)):Object.keys(t)).forEach(((e,n)=>{const r=Array.isArray(t)?t[n].tensor:t[e];if(null==r)return;const s=di.registeredVariables[e];Vo((()=>{const t=el(sl(this.c,r),s);s.assign(t)}))})),this.incrementIterations()}setLearningRate(t){this.learningRate=t,null!=this.c&&this.c.dispose(),this.c=Go(ml(-t))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(t){if(0!==(t=await this.extractIterations(t)).length)throw new Error(\"SGD optimizer does not have settable weights.\")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(t,e){return new t(e.learningRate)}}Cl.className=\"SGD\",wo(Cl);class Nl extends Cl{constructor(t,e,n=!1){super(t),this.learningRate=t,this.momentum=e,this.useNesterov=n,this.accumulations=[],this.m=ml(this.momentum)}applyGradients(t){(Array.isArray(t)?t.map((t=>t.name)):Object.keys(t)).forEach(((e,n)=>{const r=di.registeredVariables[e];if(null==this.accumulations[n]){const t=!1;this.accumulations[n]={originalName:`${e}/momentum`,variable:Vo((()=>ol(r).variable(t)))}}const s=this.accumulations[n].variable,i=Array.isArray(t)?t[n].tensor:t[e];null!=i&&Vo((()=>{let t;const e=el(sl(this.m,s),i);t=this.useNesterov?el(sl(this.c,el(i,sl(e,this.m))),r):el(sl(this.c,e),r),s.assign(e),r.assign(t)}))})),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&Wo(this.accumulations.map((t=>t.variable)))}setMomentum(t){this.momentum=t}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map((t=>({name:t.originalName,tensor:t.variable}))))}async setWeights(t){t=await this.extractIterations(t),this.accumulations=t.map((t=>({originalName:t.name,variable:t.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(t,e){return new t(e.learningRate,e.momentum,e.useNesterov)}}Nl.className=\"Momentum\",wo(Nl);class Al extends gl{constructor(t,e=.9,n=0,r=null,s=!1){if(super(),this.learningRate=t,this.decay=e,this.momentum=n,this.epsilon=r,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=s,null==r&&(this.epsilon=di.backend.epsilon()),null==t)throw new Error(\"learningRate for RMSPropOptimizer must be defined.\")}applyGradients(t){(Array.isArray(t)?t.map((t=>t.name)):Object.keys(t)).forEach(((e,n)=>{const r=di.registeredVariables[e],s=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:`${e}/rms`,variable:Vo((()=>ol(r).variable(s)))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:`${e}/momentum`,variable:Vo((()=>ol(r).variable(s)))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${e}/mg`,variable:Vo((()=>ol(r).variable(s)))});const i=Array.isArray(t)?t[n].tensor:t[e];if(null==i)return;const a=this.accumulatedMeanSquares[n].variable,o=this.accumulatedMoments[n].variable;Vo((()=>{const t=el(sl(a,this.decay),sl(al(i),1-this.decay));if(this.centered){const e=this.accumulatedMeanGrads[n].variable,s=el(sl(e,this.decay),sl(i,1-this.decay)),l=rl(sl(i,this.learningRate),il(wl(t,el(al(s),this.epsilon)))),u=el(sl(o,this.momentum),l);a.assign(t),e.assign(s),o.assign(u);const c=wl(r,u);r.assign(c)}else{const t=el(sl(a,this.decay),sl(al(i),1-this.decay)),e=el(sl(o,this.momentum),rl(sl(i,this.learningRate),il(el(t,this.epsilon))));a.assign(t),o.assign(e);const n=wl(r,e);r.assign(n)}}))})),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&Wo(this.accumulatedMeanSquares.map((t=>t.variable))),null!=this.accumulatedMeanGrads&&this.centered&&Wo(this.accumulatedMeanGrads.map((t=>t.variable))),null!=this.accumulatedMoments&&Wo(this.accumulatedMoments.map((t=>t.variable)))}async getWeights(){const t=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&t.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(t.map((t=>({name:t.originalName,tensor:t.variable}))))}async setWeights(t){t=await this.extractIterations(t);const e=this.centered?t.length/3:t.length/2,n=!1;this.accumulatedMeanSquares=t.slice(0,e).map((t=>({originalName:t.name,variable:t.tensor.variable(n)}))),this.accumulatedMoments=t.slice(e,2*e).map((t=>({originalName:t.name,variable:t.tensor.variable(n)}))),this.centered&&(this.accumulatedMeanGrads=t.slice(2*e,3*e).map((t=>({originalName:t.name,variable:t.tensor.variable(n)}))))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(t,e){return new t(e.learningRate,e.decay,e.momentum,e.epsilon,e.centered)}}Al.className=\"RMSProp\",wo(Al);const Rl=Ti({acos_:function(t){const e={x:vi(t,\"x\",\"acos\")};return di.runKernel(Jt,e)}}),Ll=Ti({acosh_:function(t){const e={x:vi(t,\"x\",\"acosh\")};return di.runKernel(Qt,e)}}),Dl=Ti({addN_:function(t){nt(Array.isArray(t),(()=>\"The argument passed to tf.addN() must be a list of tensors\")),nt(t.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${t.length}`));const e=t.map(((t,e)=>vi(t,`tensors${e}`,\"addN\"))),n=e[0];e.forEach((t=>{if(t.dtype!==n.dtype)throw new Error(\"All tensors passed to tf.addN() must have the same dtype\")})),e.forEach((t=>{if(!lt(t.shape,n.shape))throw new Error(\"All tensors passed to tf.addN() must have the same shape\")}));const r=e;return di.runKernel(ee,r)}}),Fl=Ti({all_:function(t,e=null,n=!1){const r={x:vi(t,\"x\",\"all\",\"bool\")},s={axis:e,keepDims:n};return di.runKernel(ne,r,s)}}),$l=Ti({any_:function(t,e=null,n=!1){const r={x:vi(t,\"x\",\"any\",\"bool\")},s={axis:e,keepDims:n};return di.runKernel(re,r,s)}}),Ol=Ti({argMax_:function(t,e=0){const n={x:vi(t,\"x\",\"argMax\")},r={axis:e};return di.runKernel(se,n,r)}}),Pl=Ti({argMin_:function(t,e=0){const n={x:vi(t,\"x\",\"argMin\")},r={axis:e};return di.runKernel(ie,n,r)}}),zl=Ti({asin_:function(t){const e={x:vi(t,\"x\",\"asin\")};return di.runKernel(ae,e)}}),Bl=Ti({asinh_:function(t){const e={x:vi(t,\"x\",\"asinh\")};return di.runKernel(oe,e)}}),Ul=Ti({atan_:function(t){const e={x:vi(t,\"x\",\"atan\")};return di.runKernel(le,e)}}),Vl=Ti({atan2_:function(t,e){let n=vi(t,\"a\",\"atan2\"),r=vi(e,\"b\",\"atan2\");[n,r]=ri(n,r);const s={a:n,b:r};return di.runKernel(ce,s)}}),Wl=Ti({atanh_:function(t){const e={x:vi(t,\"x\",\"atanh\")};return di.runKernel(ue,e)}});function Gl(t,e,n,r,s=\"NHWC\",i){return ql(t,[...e,t[3]],n,i,r,null,null,nu(s))}function Hl(t,e,n,r,s,i,a=\"channelsLast\"){const[o,l]=Yl(e);let u;if(\"channelsLast\"===a)u=[o,l,t[3],t[3]];else{if(\"channelsFirst\"!==a)throw new Error(`Unknown dataFormat ${a}`);u=[o,l,t[1],t[1]]}return ql(t,u,n,r,s,i,!1,a)}function jl(t,e,n,r,s,i,a=\"NDHWC\"){const[o,l,u]=Zl(e);let c,h;if(\"NDHWC\"===a)h=\"channelsLast\",c=[o,l,u,t[4],t[4]];else{if(\"NCDHW\"!==a)throw new Error(`Unknown dataFormat ${a}`);h=\"channelsFirst\",c=[o,l,u,t[1],t[1]]}return Xl(t,c,n,r,s,!1,h,i)}function ql(t,e,n,r,s,i,a=!1,o=\"channelsLast\"){let[l,u,c,h]=[-1,-1,-1,-1];if(\"channelsLast\"===o)[l,u,c,h]=t;else{if(\"channelsFirst\"!==o)throw new Error(`Unknown dataFormat ${o}`);[l,h,u,c]=t}const[d,p,,f]=e,[m,g]=Yl(n),[y,x]=Yl(r),b=Jl(d,y),v=Jl(p,x),{padInfo:w,outHeight:S,outWidth:T}=function(t,e,n,r,s,i,a,o,l){let u,c,h;if(\"number\"==typeof t){u={top:t,bottom:t,left:t,right:t,type:0===t?\"VALID\":\"NUMBER\"};const s=function(t,e,n,r,s){null==r&&(r=Kl(t,e,n));const i=t[1];return[Ql((t[0]-e+2*r)/n+1,s),Ql((i-e+2*r)/n+1,s)]}([e,n],i,r,t,o);c=s[0],h=s[1]}else if(\"same\"===t){c=Math.ceil(e/r),h=Math.ceil(n/s);const t=Math.max(0,(c-1)*r+i-e),o=Math.max(0,(h-1)*s+a-n),l=Math.floor(t/2),d=t-l,p=Math.floor(o/2);u={top:l,bottom:d,left:p,right:o-p,type:\"SAME\"}}else if(\"valid\"===t)u={top:0,bottom:0,left:0,right:0,type:\"VALID\"},c=Math.ceil((e-i+1)/r),h=Math.ceil((n-a+1)/s);else{if(\"object\"!=typeof t)throw Error(`Unknown padding parameter: ${t}`);{const d=\"channelsLast\"===l?t[1][0]:t[2][0],p=\"channelsLast\"===l?t[1][1]:t[2][1],f=\"channelsLast\"===l?t[2][0]:t[3][0],m=\"channelsLast\"===l?t[2][1]:t[3][1];u={top:d,bottom:p,left:f,right:m,type:0===d&&0===p&&0===f&&0===m?\"VALID\":\"EXPLICIT\"},c=Ql((e-i+d+p)/r+1,o),h=Ql((n-a+f+m)/s+1,o)}}return{padInfo:u,outHeight:c,outWidth:h}}(s,u,c,m,g,b,v,i,o),_=a?f*h:f;let M;return\"channelsFirst\"===o?M=[l,_,S,T]:\"channelsLast\"===o&&(M=[l,S,T,_]),{batchSize:l,dataFormat:o,inHeight:u,inWidth:c,inChannels:h,outHeight:S,outWidth:T,outChannels:_,padInfo:w,strideHeight:m,strideWidth:g,filterHeight:d,filterWidth:p,effectiveFilterHeight:b,effectiveFilterWidth:v,dilationHeight:y,dilationWidth:x,inShape:t,outShape:M,filterShape:e}}function Xl(t,e,n,r,s,i=!1,a=\"channelsLast\",o){let[l,u,c,h,d]=[-1,-1,-1,-1,-1];if(\"channelsLast\"===a)[l,u,c,h,d]=t;else{if(\"channelsFirst\"!==a)throw new Error(`Unknown dataFormat ${a}`);[l,d,u,c,h]=t}const[p,f,m,,g]=e,[y,x,b]=Zl(n),[v,w,S]=Zl(r),T=Jl(p,v),_=Jl(f,w),M=Jl(m,S),{padInfo:k,outDepth:E,outHeight:I,outWidth:C}=function(t,e,n,r,s,i,a,o,l,u,c){let h,d,p,f;if(\"number\"==typeof t){h={top:t,bottom:t,left:t,right:t,front:t,back:t,type:0===t?\"VALID\":\"NUMBER\"};const i=function(t,e,n,r,s,i){null==s&&(s=Kl(t,e,r));const a=t[1],o=t[2];return[Ql((t[0]-e+2*s)/r+1,i),Ql((a-e+2*s)/r+1,i),Ql((o-e+2*s)/r+1,i),1]}([e,n,r,1],o,0,s,t,c);d=i[0],p=i[1],f=i[2]}else if(\"same\"===t){d=Math.ceil(e/s),p=Math.ceil(n/i),f=Math.ceil(r/a);const t=(d-1)*s+o-e,c=(p-1)*i+l-n,m=(f-1)*a+u-r,g=Math.floor(t/2),y=t-g,x=Math.floor(c/2),b=c-x,v=Math.floor(m/2);h={top:x,bottom:b,left:v,right:m-v,front:g,back:y,type:\"SAME\"}}else{if(\"valid\"!==t)throw Error(`Unknown padding parameter: ${t}`);h={top:0,bottom:0,left:0,right:0,front:0,back:0,type:\"VALID\"},d=Math.ceil((e-o+1)/s),p=Math.ceil((n-l+1)/i),f=Math.ceil((r-u+1)/a)}return{padInfo:h,outDepth:d,outHeight:p,outWidth:f}}(s,u,c,h,y,x,b,T,_,M,o),N=i?g*d:g;let A;return\"channelsFirst\"===a?A=[l,N,E,I,C]:\"channelsLast\"===a&&(A=[l,E,I,C,N]),{batchSize:l,dataFormat:a,inDepth:u,inHeight:c,inWidth:h,inChannels:d,outDepth:E,outHeight:I,outWidth:C,outChannels:N,padInfo:k,strideDepth:y,strideHeight:x,strideWidth:b,filterDepth:p,filterHeight:f,filterWidth:m,effectiveFilterDepth:T,effectiveFilterHeight:_,effectiveFilterWidth:M,dilationDepth:v,dilationHeight:w,dilationWidth:S,inShape:t,outShape:A,filterShape:e}}function Kl(t,e,n,r=1){const s=Jl(e,r);return Math.floor((t[0]*(n-1)-n+s)/2)}function Yl(t){return\"number\"==typeof t?[t,t,t]:2===t.length?[t[0],t[1],1]:t}function Zl(t){return\"number\"==typeof t?[t,t,t]:t}function Jl(t,e){return e<=1?t:t+(t-1)*(e-1)}function Ql(t,e){if(!e)return Math.trunc(t);switch(e){case\"round\":return Math.round(t);case\"ceil\":return Math.ceil(t);case\"floor\":return Math.floor(t);default:throw new Error(`Unknown roundingMode ${e}`)}}function tu(t){const[e,n,r]=Yl(t);return 1===e&&1===n&&1===r}function eu(t,e){return tu(t)||tu(e)}function nu(t){if(\"NHWC\"===t)return\"channelsLast\";if(\"NCHW\"===t)return\"channelsFirst\";throw new Error(`Unknown dataFormat ${t}`)}const ru=Ti({reshape_:function(t,e){const n={x:vi(t,\"x\",\"reshape\",\"string_or_numeric\")},r={shape:e};return di.runKernel(ar,n,r)}}),su=Ti({avgPool_:function(t,e,n,r,s){const i=vi(t,\"x\",\"avgPool\",\"float32\");nt(eu(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let a=i,o=!1;3===i.rank&&(o=!0,a=ru(i,[1,i.shape[0],i.shape[1],i.shape[2]])),nt(4===a.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${a.rank}.`)),null!=s&&nt(ut(r),(()=>`Error in avgPool: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`));const l={x:a},u={filterSize:e,strides:n,pad:r,dimRoundingMode:s};let c=di.runKernel(he,l,u);return c=Sa(c,i.dtype),o?ru(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),iu=Ti({avgPool3d_:function(t,e,n,r,s,i=\"NDHWC\"){const a=vi(t,\"x\",\"avgPool3d\",\"float32\");let o=a,l=!1;4===a.rank&&(l=!0,o=ru(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]])),nt(5===o.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${o.rank}.`)),nt(\"NDHWC\"===i,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${i}`)),null!=s&&nt(ut(r),(()=>`Error in avgPool3d: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`));const u={x:o},c={filterSize:e,strides:n,pad:r,dimRoundingMode:s,dataFormat:i};let h=di.runKernel(pe,u,c);return h=Sa(h,o.dtype),l?ru(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),au=Ti({concat_:function(t,e=0){nt(t.length>=1,(()=>\"Pass at least one tensor to concat\"));const n=wi(t,\"tensors\",\"concat\",\"string_or_numeric\");if(\"complex64\"===n[0].dtype&&n.forEach((t=>{if(\"complex64\"!==t.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\\n          with dtype ${t.dtype}. `)})),1===n.length)return Ta(n[0]);const r=n,s={axis:e};return di.runKernel(Me,r,s)}}),ou=Ti({sigmoid_:function(t){const e={x:vi(t,\"x\",\"sigmoid\")};return di.runKernel(Sr,e)}}),lu=Ti({slice_:function(t,e,n){const r=vi(t,\"x\",\"slice\",\"string_or_numeric\");if(0===r.rank)throw new Error(\"Slicing scalar is not possible\");const s={x:r},i={begin:e,size:n};return di.runKernel(xr,s,i)}}),uu=Ti({tanh_:function(t){const e={x:vi(t,\"x\",\"tanh\")};return di.runKernel(Vr,e)}}),cu=Ti({basicLSTMCell_:function(t,e,n,r,s,i){const a=vi(t,\"forgetBias\",\"basicLSTMCell\"),o=vi(e,\"lstmKernel\",\"basicLSTMCell\"),l=vi(n,\"lstmBias\",\"basicLSTMCell\"),u=vi(r,\"data\",\"basicLSTMCell\"),c=vi(s,\"c\",\"basicLSTMCell\"),h=vi(i,\"h\",\"basicLSTMCell\"),d=au([u,h],1),p=Va(d,o),f=el(p,l),m=f.shape[0],g=f.shape[1]/4,y=[m,g],x=lu(f,[0,0],y),b=lu(f,[0,g],y),v=lu(f,[0,2*g],y),w=lu(f,[0,3*g],y),S=el(sl(ou(x),uu(b)),sl(c,ou(el(a,v))));return[S,sl(uu(S),ou(w))]}}),hu=Ti({batchToSpaceND_:function(t,e,n){const r=vi(t,\"x\",\"batchToSpaceND\"),s=e.reduce(((t,e)=>t*e));nt(r.rank>=1+e.length,(()=>`input rank is ${r.rank} but should be > than blockShape.length ${e.length}`)),nt(n.length===e.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${e.length}`)),nt(r.shape[0]%s==0,(()=>`input tensor batch is ${r.shape[0]} but is not divisible by the product of the elements of blockShape ${e.join(\" * \")} === ${s}`));const i={x:r},a={blockShape:e,crops:n};return di.runKernel(ge,i,a)}}),du=Ti({batchNorm_:function(t,e,n,r,s,i){null==i&&(i=.001);const a=vi(t,\"x\",\"batchNorm\"),o=vi(e,\"mean\",\"batchNorm\"),l=vi(n,\"variance\",\"batchNorm\");let u,c;null!=s&&(u=vi(s,\"scale\",\"batchNorm\")),null!=r&&(c=vi(r,\"offset\",\"batchNorm\")),nt(o.rank===l.rank,(()=>\"Batch normalization gradient requires mean and variance to have equal ranks.\")),nt(null==c||o.rank===c.rank,(()=>\"Batch normalization gradient requires mean and offset to have equal ranks.\")),nt(null==u||o.rank===u.rank,(()=>\"Batch normalization gradient requires mean and scale to have equal ranks.\"));const h={x:function(t){let e;return e=0===t.rank||1===t.rank?ru(t,[1,1,1,t.size]):2===t.rank?ru(t,[1,1,t.shape[0],t.shape[1]]):3===t.rank?ru(t,[1,t.shape[0],t.shape[1],t.shape[2]]):t,e}(a),scale:u,offset:c,mean:o,variance:l},d={varianceEpsilon:i},p=di.runKernel(an,h,d);return ru(p,a.shape)}}),pu=Ti({batchNorm2d_:function(t,e,n,r,s,i){const a=vi(t,\"x\",\"batchNorm\"),o=vi(e,\"mean\",\"batchNorm\"),l=vi(n,\"variance\",\"batchNorm\");let u,c;return null!=s&&(u=vi(s,\"scale\",\"batchNorm\")),null!=r&&(c=vi(r,\"offset\",\"batchNorm\")),nt(2===a.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${a.rank}.`)),nt(2===o.rank||1===o.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${o.rank}.`)),nt(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`)),null!=u&&nt(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=c&&nt(2===c.rank||1===c.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`)),du(a,o,l,c,u,i)}}),fu=Ti({batchNorm3d_:function(t,e,n,r,s,i){const a=vi(t,\"x\",\"batchNorm\"),o=vi(e,\"mean\",\"batchNorm\"),l=vi(n,\"variance\",\"batchNorm\");let u,c;return null!=s&&(u=vi(s,\"scale\",\"batchNorm\")),null!=r&&(c=vi(r,\"offset\",\"batchNorm\")),nt(3===a.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${a.rank}.`)),nt(3===o.rank||1===o.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${o.rank}.`)),nt(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`)),null!=u&&nt(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=c&&nt(3===c.rank||1===c.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`)),du(a,o,l,c,u,i)}}),mu=Ti({batchNorm4d_:function(t,e,n,r,s,i){const a=vi(t,\"x\",\"batchNorm\"),o=vi(e,\"mean\",\"batchNorm\"),l=vi(n,\"variance\",\"batchNorm\");let u,c;return null!=s&&(u=vi(s,\"scale\",\"batchNorm\")),null!=r&&(c=vi(r,\"offset\",\"batchNorm\")),nt(4===a.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${a.rank}.`)),nt(4===o.rank||1===o.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${o.rank}.`)),nt(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`)),null!=u&&nt(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=c&&nt(4===c.rank||1===c.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`)),du(a,o,l,c,u,i)}}),gu=Ti({bincount_:function(t,e,n){const r=vi(t,\"x\",\"bincount\"),s=vi(e,\"weights\",\"bincount\");nt(\"int32\"===r.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${r.dtype}`)),nt(n>=0,(()=>`size must be non-negative, but got ${n}.`)),nt(s.size===r.size||0===s.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${r.shape}, weights shape: ${s.shape}.`));const i={x:r,weights:s},a={size:n};return di.runKernel(ye,i,a)}}),yu=Ti({broadcastArgs_:function(t,e){const n=vi(t,\"s0\",\"broadcastArgs\",\"int32\"),r=vi(e,\"s1\",\"broadcastArgs\",\"int32\");if(1!==n.rank)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${n.rank}`);if(1!==r.rank)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${r.rank}`);const s={s0:n,s1:r};return di.runKernel(be,s)}}),xu=Ti({broadcastTo_:function(t,e){let n=vi(t,\"broadcastTo\",\"x\");const r=n.shape;if(e.some((t=>!(t>0)||t%1!=0)))throw new Error(`broadcastTo(): Invalid broadcast shape [${e}].`);if(e.length<n.rank)throw new Error(`broadcastTo(): shape.length=${e.length} < input.rank=${n.rank}.`);if(e.length>n.rank){const t=n.shape.slice();for(;t.length<e.length;)t.unshift(1);n=ru(n,t)}const s=n.shape,i=Array.from(e);for(let t=e.length-1;t>=0;t--)if(s[t]===e[t])i[t]=1;else if(1!==n.shape[t])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${e}].`);if(0===i.map(((t,e)=>t>1?e:-1)).filter((t=>t>=0)).length)return Ta(n);const a={x:n},o={reps:i};return di.runKernel(Wr,a,o)}}),bu=Ti({ceil_:function(t){const e={x:vi(t,\"x\",\"ceil\")};return di.runKernel(we,e)}}),vu=Ti({clipByValue_:function(t,e,n){const r=vi(t,\"x\",\"clipByValue\");nt(e<=n,(()=>`Error in clip: min (${e}) must be less than or equal to max (${n}).`));const s={x:r},i={clipValueMin:e,clipValueMax:n};return di.runKernel(Se,s,i)}}),wu=Ti({concat1d_:function(t){return au(t,0)}}),Su=Ti({concat2d_:function(t,e){return au(t,e)}}),Tu=Ti({concat3d_:function(t,e){return au(t,e)}}),_u=Ti({concat4d_:function(t,e){return au(t,e)}}),Mu=Ti({conv2d_:function(t,e,n,r,s=\"NHWC\",i=[1,1],a){const o=vi(t,\"x\",\"conv2d\"),l=vi(e,\"filter\",\"conv2d\");let u=o,c=!1;3===o.rank&&(c=!0,u=ru(o,[1,o.shape[0],o.shape[1],o.shape[2]])),nt(4===u.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`)),nt(4===l.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`)),null!=a&&nt(ut(r),(()=>`Error in conv2d: pad must be an integer when using, dimRoundingMode ${a} but got pad ${r}.`));const h=\"NHWC\"===s?u.shape[3]:u.shape[1];nt(h===l.shape[2],(()=>`Error in conv2d: depth of input (${h}) must match input depth for filter ${l.shape[2]}.`)),nt(eu(n,i),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`));const d={x:u,filter:l},p={strides:n,pad:r,dataFormat:s,dilations:i,dimRoundingMode:a},f=di.runKernel(ke,d,p);return c?ru(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),ku=Ti({conv1d_:function(t,e,n,r,s=\"NWC\",i=1,a){const o=vi(t,\"x\",\"conv1d\"),l=vi(e,\"filter\",\"conv1d\");let u=o,c=!1;2===o.rank&&(c=!0,u=ru(o,[1,o.shape[0],o.shape[1]])),nt(3===u.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`)),nt(3===l.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`)),null!=a&&nt(ut(r),(()=>`Error in conv1d: pad must be an integer when using, dimRoundingMode ${a} but got pad ${r}.`)),nt(u.shape[2]===l.shape[1],(()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`)),nt(eu(n,i),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${i}'`)),nt(\"NWC\"===s,(()=>`Error in conv1d: got dataFormat of ${s} but only NWC is currently supported.`));const h=ru(l,[1,l.shape[0],l.shape[1],l.shape[2]]),d=ru(u,[u.shape[0],1,u.shape[1],u.shape[2]]),p=Mu(d,h,[1,n],r,\"NHWC\",[1,i],a);return ru(p,c?[p.shape[2],p.shape[3]]:[p.shape[0],p.shape[2],p.shape[3]])}}),Eu=Ti({conv2DBackpropInput_:function(t,e,n,r,s,i=\"NHWC\",a){nt(t.length===e.rank,(()=>`Length of inShape (${t.length}) and rank of dy (${e.rank}) must match`));let o=t,l=e,u=!1;3===e.rank&&(u=!0,l=ru(e,[1,e.shape[0],e.shape[1],e.shape[2]]),o=[1,t[0],t[1],t[2]]),nt(4===o.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${o.length}.`)),nt(4===l.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`)),nt(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const c=\"NHWC\"===i?o[3]:o[1],h=\"NHWC\"===i?l.shape[3]:l.shape[1];nt(c===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`)),nt(h===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${n.shape[3]}.`)),null!=a&&nt(ut(s),(()=>`Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode ${a} but got pad ${s}.`));const d={dy:l,filter:n},p={strides:r,pad:s,dataFormat:i,dimRoundingMode:a,inputShape:o},f=di.runKernel(Ie,d,p);return u?ru(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),Iu=Ti({conv2dTranspose_:function(t,e,n,r,s,i){const a=vi(t,\"x\",\"conv2dTranspose\"),o=vi(e,\"filter\",\"conv2dTranspose\");return Eu(n,a,o,r,s,\"NHWC\",i)}}),Cu=Ti({conv3d_:function(t,e,n,r,s=\"NDHWC\",i=[1,1,1]){const a=vi(t,\"x\",\"conv3d\"),o=vi(e,\"filter\",\"conv3d\");let l=a,u=!1;4===a.rank&&(u=!0,l=ru(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]])),nt(5===l.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`)),nt(5===o.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${o.rank}.`)),nt(l.shape[4]===o.shape[3],(()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${o.shape[3]}.`)),nt(eu(n,i),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`)),nt(\"NDHWC\"===s,(()=>`Error in conv3d: got dataFormat of ${s} but only NDHWC is currently supported.`));const c={x:l,filter:o},h={strides:n,pad:r,dataFormat:s,dilations:i},d=di.runKernel(Ce,c,h);return u?ru(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),Nu=Ti({conv3DBackpropInput_:function(t,e,n,r,s){nt(t.length===e.rank,(()=>`Length of inShape (${t.length}) and rank of dy (${e.rank}) must match`));let i=t,a=e,o=!1;4===e.rank&&(o=!0,a=ru(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]),i=[1,t[0],t[1],t[2],t[3]]);const l=i[4],u=a.shape[4];nt(5===i.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${i.length}.`)),nt(5===a.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${a.rank}`)),nt(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),nt(l===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${n.shape[3]}.`)),nt(u===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${n.shape[4]}.`));const c={dy:a,filter:n},h={pad:s,strides:r,inputShape:i},d=di.runKernel(Ae,c,h);return o?ru(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),Au=Ti({conv3dTranspose_:function(t,e,n,r,s){const i=vi(t,\"x\",\"conv3dTranspose\"),a=vi(e,\"filter\",\"conv3dTranspose\");return Nu(n,i,a,r,s)}}),Ru=Ti({cos_:function(t){const e={x:vi(t,\"x\",\"cos\")};return di.runKernel(Re,e)}}),Lu=Ti({cosh_:function(t){const e={x:vi(t,\"x\",\"cosh\")};return di.runKernel(Le,e)}}),Du=Ti({cumsum_:function(t,e=0,n=!1,r=!1){const s={x:vi(t,\"x\",\"cumsum\")},i={axis:e,exclusive:n,reverse:r};return di.runKernel(De,s,i)}}),Fu=Ti({denseBincount_:function(t,e,n,r=!1){const s=vi(t,\"x\",\"denseBincount\"),i=vi(e,\"weights\",\"denseBincount\");nt(\"int32\"===s.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${s.dtype}`)),nt(s.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${s.rank}.`)),nt(n>=0,(()=>`size must be non-negative, but got ${n}.`)),nt(i.size===s.size||0===i.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${s.shape}, weights shape: ${i.shape}.`));const a={x:s,weights:i},o={size:n,binaryOutput:r};return di.runKernel($e,a,o)}}),$u=Ti({depthToSpace_:function(t,e,n=\"NHWC\"){const r=vi(t,\"x\",\"depthToSpace\"),s=\"NHWC\"===n?r.shape[1]:r.shape[2],i=\"NHWC\"===n?r.shape[2]:r.shape[3],a=\"NHWC\"===n?r.shape[3]:r.shape[1];nt(s*e>=0,(()=>`Negative dimension size caused by overflow when multiplying\\n    ${s} and ${e}  for depthToSpace with input shape\\n    ${r.shape}`)),nt(i*e>=0,(()=>`Negative dimension size caused by overflow when multiplying\\n    ${i} and ${e} for depthToSpace with input shape\\n        ${r.shape}`)),nt(a%(e*e)==0,(()=>`Dimension size must be evenly divisible by ${e*e} but is ${a} for depthToSpace with input shape ${r.shape}`));const o={x:r},l={blockSize:e,dataFormat:n};return di.runKernel(Oe,o,l)}}),Ou=Ti({depthwiseConv2d_:function(t,e,n,r,s=\"NHWC\",i=[1,1],a){const o=vi(t,\"x\",\"depthwiseConv2d\"),l=vi(e,\"filter\",\"depthwiseConv2d\");let u=o,c=!1;3===o.rank&&(c=!0,u=ru(o,[1,o.shape[0],o.shape[1],o.shape[2]])),nt(4===u.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`)),nt(4===l.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`)),nt(u.shape[3]===l.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${l.shape[2]}.`)),null!=a&&nt(ut(r),(()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${a} but got pad ${r}.`));const h={x:u,filter:l},d={strides:n,pad:r,dataFormat:s,dilations:i,dimRoundingMode:a},p=di.runKernel(Pe,h,d);return c?ru(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),Pu=Ti({diag_:function(t){const e={x:vi(t,\"x\",\"diag\")};return di.runKernel(Ue,e)}}),zu=Ti({dilation2d_:function(t,e,n,r,s=[1,1],i=\"NHWC\"){const a=vi(t,\"x\",\"dilation2d\"),o=vi(e,\"filter\",\"dilation2d\");nt(3===a.rank||4===a.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${a.rank}.`)),nt(3===o.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${o.rank}.`)),nt(\"NHWC\"===i,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${i}`));let l=a,u=!1;3===a.rank&&(l=ru(a,[1,a.shape[0],a.shape[1],a.shape[2]]),u=!0);const c={x:l,filter:o},h={strides:n,pad:r,dilations:s},d=di.runKernel(Ve,c,h);return u?ru(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),Bu=Ti({equal_:function(t,e){let n=vi(t,\"a\",\"equal\",\"string_or_numeric\"),r=vi(e,\"b\",\"equal\",\"string_or_numeric\");[n,r]=ri(n,r),kl(n.shape,r.shape);const s={a:n,b:r};return di.runKernel(Ye,s)}}),Uu=Ti({where_:function(t,e,n){const r=vi(e,\"a\",\"where\"),s=vi(n,\"b\",\"where\"),i=vi(t,\"condition\",\"where\",\"bool\"),a=kl(kl(i.shape,r.shape),s.shape),o={condition:xu(i,a),t:xu(r,a),e:xu(s,a)};return di.runKernel(gr,o)}}),Vu=Ti({divNoNan_:function(t,e){let n=vi(t,\"a\",\"div\"),r=vi(e,\"b\",\"div\");[n,r]=ri(n,r);const s=rl(n,r),i=ol(s),a=Bu(r,i);return Uu(a,i,s)}}),Wu=Ti({dot_:function(t,e){const n=vi(t,\"t1\",\"dot\"),r=vi(e,\"t2\",\"dot\");nt(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${r.rank}.`));const s=1===n.rank?n.size:n.shape[1],i=1===r.rank?r.size:r.shape[0];if(nt(s===i,(()=>`Error in dot: inner dimensions of inputs must match, but got ${s} and ${i}.`)),1===n.rank&&1===r.rank){const t=ru(n,[1,-1]),e=ru(r,[-1,1]),s=Va(t,e);return ru(s,[])}if(1===n.rank&&2===r.rank){const t=ru(n,[1,-1]),e=ru(r,[r.shape[0],r.shape[1]]),s=Va(t,e);return ru(s,[s.size])}if(2===n.rank&&1===r.rank){const t=ru(r,[-1,1]),e=Va(n,t);return ru(e,[e.size])}{const t=ru(r,[r.shape[0],r.shape[1]]);return Va(n,t)}}}),Gu=Ti({einsum_:function(t,...e){const n=e.map(((t,e)=>vi(t,`tensors${e}`,\"einsum\"))),r={equation:t};return di.runKernel(je,n,r)}}),Hu=Ti({elu_:function(t){const e={x:vi(t,\"x\",\"elu\")};return di.runKernel(qe,e)}}),ju=Ti({erf_:function(t){let e=vi(t,\"x\",\"erf\");nt(\"int32\"===e.dtype||\"float32\"===e.dtype,(()=>\"Input dtype must be `int32` or `float32`.\")),\"int32\"===e.dtype&&(e=Sa(e,\"float32\"));const n={x:e};return di.runKernel(Ke,n)}}),qu=Ti({exp_:function(t){const e={x:vi(t,\"x\",\"exp\")};return di.runKernel(Ze,e)}}),Xu=Ti({expandDims_:function(t,e=0){const n=vi(t,\"x\",\"expandDims\",\"string_or_numeric\");nt(e<=n.rank,(()=>\"Axis must be <= rank of the tensor\"));const r={input:n},s={dim:e};return di.runKernel(Je,r,s)}}),Ku=Ti({expm1_:function(t){const e={x:vi(t,\"x\",\"expm1\")};return di.runKernel(Qe,e)}}),Yu=Ti({tile_:function(t,e){const n=vi(t,\"x\",\"tile\",\"string_or_numeric\");nt(n.rank===e.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${e}.`));const r={x:n},s={reps:e};return di.runKernel(Wr,r,s)}}),Zu=Ti({eye_:function(t,e,n,r=\"float32\"){null==e&&(e=t);const s=wa([t,e],r),i=t<=e?t:e;for(let t=0;t<i;++t)s.set(1,t,t);const a=ru(s.toTensor(),[t,e]);if(null==n)return a;if(1===n.length)return Yu(Xu(a,0),[n[0],1,1]);if(2===n.length)return Yu(Xu(Xu(a,0),0),[n[0],n[1],1,1]);if(3===n.length)return Yu(Xu(Xu(Xu(a,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}}),Ju=Ti({floor_:function(t){const e={x:vi(t,\"x\",\"floor\")};return di.runKernel(rn,e)}}),Qu=Ti({gather_:function(t,e,n=0,r=0){const s={x:vi(t,\"x\",\"gather\"),indices:vi(e,\"indices\",\"gather\",\"int32\")},i={axis:n,batchDims:r};return di.runKernel(on,s,i)}}),tc=Ti({greater_:function(t,e){let n=vi(t,\"a\",\"greater\",\"string_or_numeric\"),r=vi(e,\"b\",\"greater\",\"string_or_numeric\");[n,r]=ri(n,r),kl(n.shape,r.shape);const s={a:n,b:r};return di.runKernel(un,s)}}),ec=Ti({greaterEqual_:function(t,e){let n=vi(t,\"a\",\"greaterEqual\",\"string_or_numeric\"),r=vi(e,\"b\",\"greaterEqual\",\"string_or_numeric\");[n,r]=ri(n,r),kl(n.shape,r.shape);const s={a:n,b:r};return di.runKernel(cn,s)}}),nc=Ti({imag_:function(t){const e={input:vi(t,\"input\",\"imag\")};return di.runKernel(pn,e)}}),rc=Ti({isFinite_:function(t){const e={x:vi(t,\"x\",\"isFinite\")};return di.runKernel(fn,e)}}),sc=Ti({isInf_:function(t){const e={x:vi(t,\"x\",\"isInf\")};return di.runKernel(mn,e)}}),ic=Ti({isNaN_:function(t){const e={x:vi(t,\"x\",\"isNaN\")};return di.runKernel(gn,e)}}),ac=Ti({leakyRelu_:function(t,e=.2){const n={x:vi(t,\"x\",\"leakyRelu\")},r={alpha:e};return di.runKernel(yn,n,r)}}),oc=Ti({less_:function(t,e){let n=vi(t,\"a\",\"less\",\"string_or_numeric\"),r=vi(e,\"b\",\"less\",\"string_or_numeric\");[n,r]=ri(n,r),kl(n.shape,r.shape);const s={a:n,b:r};return di.runKernel(xn,s)}}),lc=Ti({lessEqual_:function(t,e){let n=vi(t,\"a\",\"lessEqual\",\"string_or_numeric\"),r=vi(e,\"b\",\"lessEqual\",\"string_or_numeric\");[n,r]=ri(n,r),kl(n.shape,r.shape);const s={a:n,b:r};return di.runKernel(bn,s)}});function uc(t,e,n){if(n<=0)throw new Error(\"The number of values should be positive.\");const r={start:t,stop:e,num:n};return di.runKernel(vn,{},r)}const cc=Ti({localResponseNormalization_:function(t,e=5,n=1,r=1,s=.5){const i=vi(t,\"x\",\"localResponseNormalization\");nt(4===i.rank||3===i.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\\n               rank ${i.rank}.`)),nt(ut(e),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${e}.`));let a=i,o=!1;3===i.rank&&(o=!0,a=ru(i,[1,i.shape[0],i.shape[1],i.shape[2]]));const l={x:a},u={depthRadius:e,bias:n,alpha:r,beta:s},c=di.runKernel(En,l,u);return o?ru(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),hc=Ti({log_:function(t){const e={x:vi(t,\"x\",\"log\")};return di.runKernel(wn,e)}}),dc=Ti({log1p_:function(t){const e={x:vi(t,\"x\",\"log1p\")};return di.runKernel(Sn,e)}}),pc=Ti({neg_:function(t){const e={x:vi(t,\"x\",\"neg\")};return di.runKernel(Wn,e)}}),fc=Ti({softplus_:function(t){const e={x:vi(t,\"x\",\"softplus\")};return di.runKernel(Tr,e)}}),mc=Ti({logSigmoid_:function(t){const e=vi(t,\"x\",\"logSigmoid\");return pl((t=>({value:pc(fc(pc(t))),gradFunc:e=>sl(e,ou(pc(t)))})))(e)}}),gc=Ti({max_:function(t,e=null,n=!1){const r={x:vi(t,\"x\",\"max\")},s={reductionIndices:e,keepDims:n};return di.runKernel(Cn,r,s)}}),yc=Ti({sum_:function(t,e=null,n=!1){let r=vi(t,\"x\",\"sum\");\"bool\"===r.dtype&&(r=Sa(r,\"int32\"));const s={x:r},i={axis:e,keepDims:n};return di.runKernel(Mr,s,i)}}),xc=Ti({logSoftmax_:function(t,e=-1){const n=vi(t,\"logits\",\"logSoftmax\");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${e}`);return pl(((t,n)=>{const r=gc(t,e,!0),s=wl(t,r),i=wl(Sa(s,\"float32\"),hc(yc(qu(s),e,!0)));return n([i]),{value:i,gradFunc:(t,n)=>{const[r]=n,s=qu(r);return wl(t,sl(yc(t,e,!0),s))}}}))(n)}});function bc(t,e){for(let n=0;n<t.length;++n)if(t[t.length-n-1]!==e-1-n)return!1;return!0}function vc(t,e,n){const r=t.length+e.length,s=[];let i=0,a=0;for(let o=0;o<r;o++)-1===n.indexOf(o)?s.push(t[i++]):s.push(e[a++]);return s}function wc(t,e){const n=[],r=t.length;for(let s=0;s<r;s++)-1===e.indexOf(s)&&n.push(t[s]);return[n,e.map((e=>t[e]))]}function Sc(t,e){return vc(t,e.map((t=>1)),e)}function Tc(t,e,n){nt(bc(e,n),(()=>`${t} supports only inner-most axes for now. Got axes ${e} and rank-${n} input.`))}function _c(t,e){if(bc(t,e))return null;const n=[];for(let r=0;r<e;++r)-1===t.indexOf(r)&&n.push(r);return t.forEach((t=>n.push(t))),n}function Mc(t){return t.map(((t,e)=>[e,t])).sort(((t,e)=>t[1]-e[1])).map((t=>t[0]))}function kc(t,e){const n=[];for(let r=e-t;r<e;++r)n.push(r);return n}const Ec=Ti({logSumExp_:function(t,e=null,n=!1){const r=vi(t,\"x\",\"logSumExp\"),s=gt(e,r.shape),i=gc(r,s,!0),a=wl(r,i),o=qu(a),l=yc(o,s),u=hc(l),c=el(ru(i,u.shape),u);if(n){const t=Sc(c.shape,s);return ru(c,t)}return c}}),Ic=Ti({logicalAnd_:function(t,e){const n=vi(t,\"a\",\"logicalAnd\",\"bool\"),r=vi(e,\"b\",\"logicalAnd\",\"bool\");kl(n.shape,r.shape);const s={a:n,b:r};return di.runKernel(Tn,s)}}),Cc=Ti({logicalNot_:function(t){const e={x:vi(t,\"x\",\"logicalNot\",\"bool\")};return di.runKernel(_n,e)}}),Nc=Ti({logicalOr_:function(t,e){const n=vi(t,\"a\",\"logicalOr\",\"bool\"),r=vi(e,\"b\",\"logicalOr\",\"bool\");kl(n.shape,r.shape);const s={a:n,b:r};return di.runKernel(Mn,s)}}),Ac=Ti({logicalXor_:function(t,e){const n=vi(t,\"a\",\"logicalXor\",\"bool\"),r=vi(e,\"b\",\"logicalXor\",\"bool\");return kl(n.shape,r.shape),Ic(Nc(t,e),Cc(Ic(t,e)))}}),Rc=Ti({maxPool_:function(t,e,n,r,s){const i=vi(t,\"x\",\"maxPool\");let a=i,o=!1;3===i.rank&&(o=!0,a=ru(i,[1,i.shape[0],i.shape[1],i.shape[2]])),nt(4===a.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${a.rank}.`)),nt(eu(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),null!=s&&nt(ut(r),(()=>`Error in maxPool: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`));const l={x:a},u={filterSize:e,strides:n,pad:r,dimRoundingMode:s},c=di.runKernel(An,l,u);return o?ru(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),Lc=Ti({maxPool3d_:function(t,e=[1,1,1],n,r,s,i=\"NDHWC\"){const a=vi(t,\"x\",\"maxPool3d\");let o=a,l=!1;4===a.rank&&(l=!0,o=ru(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]])),nt(5===o.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${o.rank}.`)),nt(\"NDHWC\"===i,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${i}`)),null!=s&&nt(ut(r),(()=>`Error in maxPool3d: pad must be an integer when using, dimRoundingMode ${s} but got pad ${r}.`));const u={x:o},c={filterSize:e,strides:n,pad:r,dimRoundingMode:s,dataFormat:i},h=di.runKernel(Ln,u,c);return l?ru(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),Dc=Ti({maxPoolWithArgmax_:function(t,e,n,r,s=!1){const i={x:vi(t,\"x\",\"maxPoolWithArgmax\")},a={filterSize:e,strides:n,pad:r,includeBatchInIndex:s},o=di.runKernel(Fn,i,a);return{result:o[0],indexes:o[1]}}}),Fc=Ti({mean_:function(t,e=null,n=!1){const r={x:vi(t,\"x\",\"mean\")},s={axis:e,keepDims:n};return di.runKernel($n,r,s)}});function $c(t,e=\"float32\"){if(\"complex64\"===e){const e=$c(t,\"float32\"),n=$c(t,\"float32\");return _i(e,n)}const n=$t(at(t),e);return di.makeTensor(n,t,e)}function Oc(t,e=\"float32\"){if(\"complex64\"===e){const e=Oc(t,\"float32\"),n=$c(t,\"float32\");return _i(e,n)}const n=Ft(at(t),e);return di.makeTensor(n,t,e)}function Pc(t,e,{indexing:n=\"xy\"}={}){if(\"xy\"!==n&&\"ij\"!==n)throw new TypeError(`${n} is not a valid third argument to meshgrid`);if(void 0===t)return[];let r=vi(t,\"x\",\"meshgrid\",t instanceof js?t.dtype:\"float32\");if(void 0===e)return[r];let s=vi(e,\"y\",\"meshgrid\",e instanceof js?e.dtype:\"float32\");const i=at(r.shape),a=at(s.shape);return\"xy\"===n?(r=ru(r,[1,-1]),s=ru(s,[-1,1]),[Va(Oc([a,1],r.dtype),r),Va(s,Oc([1,i],s.dtype))]):(r=ru(r,[-1,1]),s=ru(s,[1,-1]),[Va(r,Oc([1,a],r.dtype)),Va(Oc([i,1],s.dtype),s)])}const zc=Ti({min_:function(t,e=null,n=!1){const r={x:vi(t,\"x\",\"min\")},s={axis:e,keepDims:n};return di.runKernel(On,r,s)}}),Bc=Ti({minimum_:function(t,e){let n=vi(t,\"a\",\"minimum\"),r=vi(e,\"b\",\"minimum\");[n,r]=ri(n,r),\"bool\"===n.dtype&&(n=Sa(n,\"int32\"),r=Sa(r,\"int32\")),kl(n.shape,r.shape);const s={a:n,b:r};return di.runKernel(Pn,s)}}),Uc=Ti({mirrorPad_:function(t,e,n){nt(\"reflect\"===n||\"symmetric\"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const r=vi(t,\"x\",\"mirrorPad\");if(0===r.rank)throw new Error(\"mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad\");nt(e.length===r.rank,(()=>`Padding doesn't match input. Must be ${r.rank}. Got ${e.length}.`));const s=\"reflect\"===n?1:0;for(let t=0;t<r.rank;t++)nt(2===e[t].length,(()=>\"Invalid number of paddings. Must be length of 2 each.\")),nt(e[t][0]>=0&&e[t][0]<=r.shape[t]-s&&e[t][1]>=0&&e[t][1]<=r.shape[t]-s,(()=>`Padding in dimension ${t} cannot be greater than or equal to ${r.shape[t]-s} or less than 0 for input of shape ${r.shape}`));const i={paddings:e,mode:n},a={x:r};return di.runKernel(zn,a,i)}}),Vc=Ti({mod_:function(t,e){let n=vi(t,\"a\",\"mod\"),r=vi(e,\"b\",\"mod\");[n,r]=ri(n,r);const s={a:n,b:r};return di.runKernel(Bn,s)}}),Wc=Ti({moments_:function(t,e=null,n=!1){const r=gt(e,(t=vi(t,\"x\",\"moments\")).shape),s=Fc(t,r,n);let i=s.shape;n||(i=Sc(s.shape,r));const a=al(wl(Sa(t,\"float32\"),ru(s,i)));return{mean:s,variance:Fc(a,r,n)}}}),Gc=Ti({multiRNNCell_:function(t,e,n,r){const s=vi(e,\"data\",\"multiRNNCell\"),i=wi(n,\"c\",\"multiRNNCell\"),a=wi(r,\"h\",\"multiRNNCell\");let o=s;const l=[];for(let e=0;e<t.length;e++){const n=t[e](o,i[e],a[e]);l.push(n[0]),l.push(n[1]),o=n[1]}const u=[],c=[];for(let t=0;t<l.length;t+=2)u.push(l[t]),c.push(l[t+1]);return[u,c]}}),Hc=Ti({multinomial_:function(t,e,n,r=!1){const s=vi(t,\"logits\",\"multinomial\"),i=s.size,a=s.rank;if(i<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${i}.`);if(a>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${a}`);n=n||Math.random();const o={logits:1===a?ru(s,[1,-1]):s},l={numSamples:e,seed:n,normalized:r},u=di.runKernel(Un,o,l);return 1===a?ru(u,[u.size]):u}}),jc=Ti({notEqual_:function(t,e){let n=vi(t,\"a\",\"notEqual\",\"string_or_numeric\"),r=vi(e,\"b\",\"notEqual\",\"string_or_numeric\");[n,r]=ri(n,r),kl(n.shape,r.shape);const s={a:n,b:r};return di.runKernel(Gn,s)}}),qc=Ti({onesLike_:function(t){const e={x:vi(t,\"x\",\"onesLike\")};return di.runKernel(Xn,e)}}),Xc=Ti({outerProduct_:function(t,e){const n=vi(t,\"v1\",\"outerProduct\"),r=vi(e,\"v2\",\"outerProduct\");nt(1===n.rank&&1===r.rank,(()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${r.rank}.`));const s=ru(n,[-1,1]),i=ru(r,[1,-1]);return Va(s,i)}}),Kc=Ti({pad_:function(t,e,n=0){const r=vi(t,\"x\",\"pad\");if(0===r.rank)throw new Error(\"pad(scalar) is not defined. Pass non-scalar to pad\");const s={paddings:e,constantValue:n},i={x:r};return di.runKernel(Zn,i,s)}}),Yc=Ti({pad1d_:function(t,e,n=0){return nt(2===e.length,(()=>\"Invalid number of paddings. Must be length of 2.\")),Kc(t,[e],n)}}),Zc=Ti({pad2d_:function(t,e,n=0){return nt(2===e.length&&2===e[0].length&&2===e[1].length,(()=>\"Invalid number of paddings. Must be length of 2 each.\")),Kc(t,e,n)}}),Jc=Ti({pad3d_:function(t,e,n=0){return nt(3===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length,(()=>\"Invalid number of paddings. Must be length of 2 each.\")),Kc(t,e,n)}}),Qc=Ti({pad4d_:function(t,e,n=0){return nt(4===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length&&2===e[3].length,(()=>\"Invalid number of paddings. Must be length of 2 each.\")),Kc(t,e,n)}}),th=Ti({spaceToBatchND_:function(t,e,n){const r=vi(t,\"x\",\"spaceToBatchND\");nt(r.rank>=1+e.length,(()=>`input rank ${r.rank} should be > than [blockShape] ${e.length}`)),nt(n.length===e.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${e.length}`)),nt(r.shape.reduce(((t,r,s)=>s>0&&s<=e.length?t&&(r+n[s-1][0]+n[s-1][1])%e[s-1]==0:t),!0),(()=>`input spatial dimensions ${r.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${e.toString()}`));const s={x:r},i={blockShape:e,paddings:n};return di.runKernel(kr,s,i)}}),eh=Ti({pool_:function(t,e,n,r,s,i){null==s&&(s=[1,1]),null==i&&(i=1),0===r&&(r=\"valid\");const a=vi(t,\"x\",\"maxPool\");let o=a,l=!1;3===a.rank&&(l=!0,o=ru(a,[1,a.shape[0],a.shape[1],a.shape[2]])),nt(eu(i,s),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${i} and dilations '${s}'`));const u=Hl(o.shape,e,i,s,r),c=[u.dilationHeight,u.dilationWidth];let h;h=\"same\"===r?function(t,e){const n=t.map(((t,n)=>t+(t-1)*(e[n]-1))).map((t=>t-1)),r=n.map((t=>Math.floor(t/2))),s=n.map(((t,e)=>t-r[e]));return n.map(((t,e)=>[r[e],s[e]]))}([u.filterHeight,u.filterWidth],c):[[0,0],[0,0]];const d=1===c[0]&&1===c[1],[p,f]=function(t,e,n){const r=n.map((t=>t[0])),s=n.map((t=>t[1])),i=t.concat(r,s),a=e.map(((t,e)=>(t-i[e]%t)%t)),o=s.map(((t,e)=>t+a[e]));return[e.map(((t,e)=>[r[e],o[e]])),e.map(((t,e)=>[0,a[e]]))]}([u.inHeight,u.inWidth],c,h),m=d?r:\"valid\",g=d?o:th(o,c,p),y=(\"avg\"===n?()=>su(g,e,i,m):()=>Rc(g,e,i,m))(),x=d?y:hu(y,c,f);return l?ru(x,[x.shape[1],x.shape[2],x.shape[3]]):x}}),nh=Ti({prelu_:function(t,e){const n={x:vi(t,\"x\",\"prelu\"),alpha:vi(e,\"alpha\",\"prelu\")};return di.runKernel(tr,n)}}),rh=Ti({prod_:function(t,e=null,n=!1){let r=vi(t,\"x\",\"prod\");\"bool\"===r.dtype&&(r=Sa(r,\"int32\"));const s={x:r},i={axis:e,keepDims:n};return di.runKernel(er,s,i)}}),sh=Ti({rand_:function(t,e,n){const r=at(t);let s=null;if(null==n||\"float32\"===n)s=new Float32Array(r);else if(\"int32\"===n)s=new Int32Array(r);else{if(\"bool\"!==n)throw new Error(`Unknown data type ${n}`);s=new Uint8Array(r)}for(let t=0;t<r;t++)s[t]=e();return di.makeTensor(s,t,n)}});var ih=n(36377);class ah{constructor(t,e,n,r,s){this.mean=t,this.stdDev=e,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const i=s||Math.random();this.random=ih.alea(i.toString())}nextValue(){if(!isNaN(this.nextVal)){const t=this.nextVal;return this.nextVal=NaN,t}let t,e,n=!1;for(;!n;){let r,s,i;do{r=2*this.random()-1,s=2*this.random()-1,i=r*r+s*s}while(i>=1||0===i);const a=Math.sqrt(-2*Math.log(i)/i);t=this.mean+this.stdDev*r*a,e=this.mean+this.stdDev*s*a,this.truncated&&!this.isValidTruncated(t)||(n=!0)}return this.truncated&&!this.isValidTruncated(e)||(this.nextVal=this.convertValue(e)),this.convertValue(t)}convertValue(t){return null==this.dtype||\"float32\"===this.dtype?t:Math.round(t)}isValidTruncated(t){return t<=this.upper&&t>=this.lower}}class oh{constructor(t,e,n,r){this.alpha=t,this.beta=1/e,this.dtype=n;const s=r||Math.random();this.randu=ih.alea(s.toString()),this.randn=new ah(0,1,n,!1,this.randu()),this.d=t<1?t+2/3:t-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let t,e,n,r,s,i;for(;;){do{r=this.randn.nextValue(),i=1+this.c*r}while(i<=0);if(i*=i*i,t=r*r,e=1-.331*t*t,n=.5*t+this.d*(1-i+Math.log(i)),s=this.randu(),s<e||Math.log(s)<n)break}return i=1/this.beta*this.d*i,this.alpha<1&&(i*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(i)}convertValue(t){return\"float32\"===this.dtype?t:Math.round(t)}}class lh{constructor(t=0,e=1,n,r){if(this.canReturnFloat=()=>null==this.dtype||\"float32\"===this.dtype,this.min=t,this.range=e-t,this.dtype=n,null==r&&(r=Math.random()),\"number\"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${t} - ${e} <= 1 and dtype is not float`);this.random=ih.alea(r)}convertValue(t){return this.canReturnFloat()?t:Math.round(t)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const uh=Ti({randomGamma_:function(t,e,n=1,r=\"float32\",s){if(null==n&&(n=1),null==r&&(r=\"float32\"),\"float32\"!==r&&\"int32\"!==r)throw new Error(`Unsupported data type ${r}`);const i=new oh(e,n,r,s),a=wa(t,r);for(let t=0;t<a.values.length;t++)a.values[t]=i.nextValue();return a.toTensor()}}),ch=Ti({randomNormal_:function(t,e=0,n=1,r,s){if(null!=r&&\"bool\"===r)throw new Error(`Unsupported data type ${r}`);const i=new ah(e,n,r,!1,s),a=wa(t,r);for(let t=0;t<a.values.length;t++)a.values[t]=i.nextValue();return a.toTensor()}}),hh=Ti({randomUniform_:function(t,e=0,n=1,r=\"float32\",s){const i=wa(t,r),a=new lh(e,n,null,s);for(let t=0;t<i.values.length;t++)i.values[t]=a.nextValue();return i.toTensor()}});function dh(t,e,n=1,r=\"float32\"){if(0===n)throw new Error(\"Cannot have a step of zero\");const s={start:t,stop:e,step:n,dtype:r};return di.runKernel(nr,{},s)}const ph=Ti({real_:function(t){const e={input:vi(t,\"input\",\"real\")};return di.runKernel(rr,e)}}),fh=Ti({reciprocal_:function(t){const e={x:vi(t,\"x\",\"reciprocal\")};return di.runKernel(sr,e)}}),mh=Ti({relu_:function(t){const e={x:vi(t,\"x\",\"relu\")};return di.runKernel(ir,e)}}),gh=Ti({relu6_:function(t){const e={x:vi(t,\"x\",\"relu6\")};return di.runKernel(hr,e)}}),yh=Ti({reverse_:function(t,e){const n={x:vi(t,\"x\",\"reverse\")},r={dims:e};return di.runKernel(dr,n,r)}}),xh=Ti({reverse1d_:function(t){const e=vi(t,\"x\",\"reverse\");return nt(1===e.rank,(()=>`Error in reverse1D: x must be rank 1 but got rank ${e.rank}.`)),yh(e,0)}}),bh=Ti({reverse2d_:function(t,e){const n=vi(t,\"x\",\"reverse\");return nt(2===n.rank,(()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`)),yh(n,e)}}),vh=Ti({reverse3d_:function(t,e){const n=vi(t,\"x\",\"reverse\");return nt(3===n.rank,(()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`)),yh(n,e)}}),wh=Ti({reverse4d_:function(t,e){const n=vi(t,\"x\",\"reverse\");return nt(4===n.rank,(()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`)),yh(n,e)}}),Sh=Ti({round_:function(t){const e={x:vi(t,\"x\",\"round\")};return di.runKernel(pr,e)}}),Th=Ti({rsqrt_:function(t){const e={x:vi(t,\"x\",\"rsqrt\")};return di.runKernel(fr,e)}}),_h=Ti({selu_:function(t){const e={x:vi(t,\"x\",\"selu\")};return di.runKernel(yr,e)}}),Mh=Ti({separableConv2d_:function(t,e,n,r,s,i=[1,1],a=\"NHWC\"){const o=vi(t,\"x\",\"separableConv2d\"),l=vi(e,\"depthwiseFilter\",\"separableConv2d\"),u=vi(n,\"pointwiseFilter\",\"separableConv2d\");let c=o,h=!1;if(3===o.rank&&(h=!0,c=ru(o,[1,o.shape[0],o.shape[1],o.shape[2]])),\"NCHW\"===a)throw new Error(\"separableConv2d currently does not support dataFormat NCHW; only NHWC is supported\");nt(4===c.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`)),nt(4===l.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`)),nt(4===u.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`)),nt(1===u.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`)),nt(1===u.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`));const d=l.shape[2],p=l.shape[3];nt(u.shape[2]===d*p,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${d*p}, but got ${u.shape[2]}.`));const f=Ou(c,l,r,s,a,i),m=Mu(f,u,1,\"valid\",a);return h?ru(m,[m.shape[1],m.shape[2],m.shape[3]]):m}}),kh=async function(t,e){const n=vi(t,\"x\",\"setdiff1d\"),r=vi(e,\"y\",\"setdiff1d\");nt(n.dtype===r.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${r.dtype}).`)),nt(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),nt(1===r.rank,(()=>`y should be 1D tensor, but got y (${r.shape}).`));const s=await n.data(),i=await r.data(),a=new Set(i);let o=0;for(let t=0;t<s.length;t++)a.has(s[t])||o++;const l=new Vs([o],n.dtype),u=new Vs([o],\"int32\");for(let t=0,e=0;t<s.length;t++)a.has(s[t])||(l.values[e]=s[t],u.values[e]=t,e++);return[l.toTensor(),u.toTensor()]},Eh=Ti({sign_:function(t){const e={x:vi(t,\"x\",\"sign\")};return di.runKernel(wr,e)}}),Ih=Ti({sin_:function(t){const e={x:vi(t,\"x\",\"sin\")};return di.runKernel(br,e)}}),Ch=Ti({sinh_:function(t){const e={x:vi(t,\"x\",\"sinh\")};return di.runKernel(vr,e)}}),Nh=Ti({slice1d_:function(t,e,n){const r=vi(t,\"x\",\"slice1d\");return nt(1===r.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`)),lu(r,[e],[n])}}),Ah=Ti({slice2d_:function(t,e,n){const r=vi(t,\"x\",\"slice2d\");return nt(2===r.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`)),lu(r,e,n)}}),Rh=Ti({slice3d_:function(t,e,n){const r=vi(t,\"x\",\"slice3d\");return nt(3===r.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`)),lu(r,e,n)}}),Lh=Ti({slice4d_:function(t,e,n){const r=vi(t,\"x\",\"slice4d\");return nt(4===r.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`)),lu(r,e,n)}}),Dh=Ti({softmax_:function(t,e=-1){const n=vi(t,\"logits\",\"softmax\",\"float32\");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${e}`);const r={logits:n},s={dim:e};return di.runKernel(Ir,r,s)}}),Fh=Ti({fft_:function(t){nt(\"complex64\"===t.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${t.dtype}.`));const e={input:t};return di.runKernel(tn,e)}}),$h=Ti({ifft_:function(t){nt(\"complex64\"===t.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${t.dtype}.`));const e={input:t};return di.runKernel(dn,e)}}),Oh=Ti({irfft_:function(t){const e=t.shape[t.shape.length-1],n=t.size/e;let r;if(e<=2){const s=ru(t,[n,e]);r=$h(s)}else{const s=[n,2*(e-1)],i=ru(ph(t),[n,e]),a=ru(nc(t),[n,e]),o=yh(lu(i,[0,1],[n,e-2]),1),l=sl(yh(lu(a,[0,1],[n,e-2]),1),ml(-1)),u=au([i,o],1),c=au([a,l],1),h=ru(_i(u,c),[s[0],s[1]]);r=$h(h)}if(r=ph(r),3===t.rank&&0!==t.shape[0]){const e=r,n=t.shape[0];r=ru(r,[n,r.shape[0]/n,r.shape[1]]),e.dispose()}return r}}),Ph=Ti({split_:function(t,e,n=0){const r={x:vi(t,\"x\",\"split\")},s={numOrSizeSplits:e,axis:n};return di.runKernel(Er,r,s)}}),zh=Ti({rfft_:function(t,e){nt(\"float32\"===t.dtype,(()=>`The dtype for rfft() must be real value but got ${t.dtype}`));let n=t.shape[t.shape.length-1];const r=t.size/n;let s;if(null!=e&&e<n){const r=t.shape.map((t=>0)),i=t.shape.map((t=>t));i[t.shape.length-1]=e,s=lu(t,r,i),n=e}else if(null!=e&&e>n){const r=t.shape.map((t=>t));r[t.shape.length-1]=e-n,s=au([t,$c(r)],t.shape.length-1),n=e}else s=t;const i=ol(s),a=ru(_i(s,i),[r,n]),o=Fh(a),l=Math.floor(n/2)+1,u=ph(o),c=nc(o),h=Ph(u,[l,n-l],u.shape.length-1),d=Ph(c,[l,n-l],c.shape.length-1),p=s.shape.slice();return p[s.shape.length-1]=l,ru(_i(h[0],d[0]),p)}}),Bh=Ti({squaredDifference_:function(t,e){let n=vi(t,\"a\",\"squaredDifference\"),r=vi(e,\"b\",\"squaredDifference\");[n,r]=ri(n,r),kl(n.shape,r.shape);const s={a:n,b:r};return di.runKernel(Dr,s,{})}}),Uh=Ti({squeeze_:function(t,e){const n=vi(t,\"x\",\"squeeze\");return ru(n,yt(n.shape,e).newShape)}}),Vh=Ti({stack_:function(t,e=0){const n=wi(t,\"tensors\",\"stack\",\"string_or_numeric\");nt(n.length>=1,(()=>\"Pass at least one tensor to tf.stack\")),n.length>0&&nt(e<=n[0].rank,(()=>\"Axis must be <= rank of the tensor\"));const r=n,s={axis:e};return di.runKernel(Yn,r,s)}}),Wh=Ti({step_:function(t,e=0){const n={x:vi(t,\"x\",\"step\")},r={alpha:e};return di.runKernel(Zr,n,r)}}),Gh=Ti({stridedSlice_:function(t,e,n,r,s=0,i=0,a=0,o=0,l=0){const u={x:vi(t,\"x\",\"stridedSlice\",\"string_or_numeric\")},c={begin:e,end:n,strides:r,beginMask:s,endMask:i,ellipsisMask:a,newAxisMask:o,shrinkAxisMask:l};return di.runKernel($r,u,c)}}),Hh=Ti({tan_:function(t){const e={x:vi(t,\"x\",\"tan\")};return di.runKernel(Ur,e)}});function jh(t,e){st(t);const n=yi(t,e);if(1!==n.length)throw new Error(\"tensor1d() requires values to be a flat/TypedArray\");return Mi(t,null,n,e)}function qh(t,e,n){if(st(t),null!=e&&2!==e.length)throw new Error(\"tensor2d() requires shape to have two numbers\");const r=yi(t,n);if(2!==r.length&&1!==r.length)throw new Error(\"tensor2d() requires values to be number[][] or flat/TypedArray\");if(1===r.length&&null==e)throw new Error(\"tensor2d() requires shape to be provided when `values` are a flat/TypedArray\");return Mi(t,e,r,n)}function Xh(t,e,n){if(st(t),null!=e&&4!==e.length)throw new Error(\"tensor4d() requires shape to have four numbers\");const r=yi(t,n);if(4!==r.length&&1!==r.length)throw new Error(\"tensor4d() requires values to be number[][][][] or flat/TypedArray\");if(1===r.length&&null==e)throw new Error(\"tensor4d() requires shape to be provided when `values` are a flat array\");return Mi(t,e,r,n)}function Kh(t,e,n){if(st(t),null!=e&&5!==e.length)throw new Error(\"tensor5d() requires shape to have five numbers\");const r=yi(t,n);if(5!==r.length&&1!==r.length)throw new Error(\"tensor5d() requires values to be number[][][][][] or flat/TypedArray\");if(1===r.length&&null==e)throw new Error(\"tensor5d() requires shape to be provided when `values` are a flat array\");return Mi(t,e,r,n)}function Yh(t,e,n){if(st(t),null!=e&&6!==e.length)throw new Error(\"tensor6d() requires shape to have six numbers\");const r=yi(t,n);if(6!==r.length&&1!==r.length)throw new Error(\"tensor6d() requires values to be number[][][][][][] or flat/TypedArray\");if(1===r.length&&null==e)throw new Error(\"tensor6d() requires shape to be provided when `values` are a flat array\");return Mi(t,e=e||r,r,n)}const Zh=Ti({topk_:function(t,e=1,n=!0){const r=vi(t,\"x\",\"topk\");if(0===r.rank)throw new Error(\"topk() expects the input to be of rank 1 or higher\");const s=r.shape[r.shape.length-1];if(e<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${e}`);if(e>s)throw new Error(`'k' passed to topk() must be <= the last dimension (${s}) but got ${e}`);const i={x:r},a={k:e,sorted:n},[o,l]=di.runKernel(Gr,i,a);return{values:o,indices:l}}}),Jh=Ti({truncatedNormal_:function(t,e=0,n=1,r,s){if(null!=r&&\"bool\"===r)throw new Error(\"Unsupported data type $ { dtype }\");const i=new ah(e,n,r,!0,s),a=wa(t,r);for(let t=0;t<a.values.length;t++)a.values[t]=i.nextValue();return a.toTensor()}}),Qh=Ti({unique_:function(t,e=0){const n=vi(t,\"x\",\"unique\",\"string_or_numeric\");nt(n.rank>0,(()=>\"The input tensor must be at least 1D\"));const r={x:n},s={axis:e},[i,a]=di.runKernel(qr,r,s);return{values:i,indices:a}}}),td=Ti({unsortedSegmentSum_:function(t,e,n){const r=vi(t,\"x\",\"unsortedSegmentSum\"),s=vi(e,\"segmentIds\",\"unsortedSegmentSum\",\"int32\");nt(ut(n),(()=>\"numSegments must be of dtype int\"));const i={x:r,segmentIds:s},a={numSegments:n};return di.runKernel(Kr,i,a)}}),ed=Ti({unstack_:function(t,e=0){const n=vi(t,\"x\",\"unstack\",\"string_or_numeric\");nt(e>=-n.shape.length&&e<n.shape.length,(()=>`Axis = ${e} is not in [-${n.shape.length}, ${n.shape.length})`));const r={value:n},s={axis:e};return di.runKernel(Xr,r,s)}});function nd(t,e=!0,n,r){return di.makeVariable(t,e,n,r)}function rd(t,e){const n=[];for(let t=0;t<e.length;t++)e[t]&&n.push(t);const r=wa(t,\"int32\"),s=wa([n.length,t.length],\"int32\");for(let e=0;e<n.length;e++){const i=r.indexToLoc(n[e]),a=e*t.length;s.values.set(i,a)}return s.toTensor()}const sd=async function(t){const e=vi(t,\"condition\",\"whereAsync\",\"bool\"),n=await e.data(),r=rd(e.shape,n);return t!==e&&e.dispose(),r},id=async function(t,e,n){const r=vi(t,\"tensor\",\"boolMask\"),s=vi(e,\"mask\",\"boolMask\",\"bool\"),i=null==n?0:n,a=s.rank,o=r.shape;nt(a>0,(()=>\"mask cannot be scalar\")),rt(o.slice(i,i+a),s.shape,\"mask's shape must match the first K dimensions of tensor's shape,\");let l=1;for(let t=i;t<i+a;t++)l*=o[t];const u=o.slice(0,i).concat([l],o.slice(i+a)),c=ru(r,u),h=ru(s,[-1]),d=await sd(h),p=Uh(d,[1]),f=Qu(c,p,i);return t!==r&&r.dispose(),e!==s&&s.dispose(),p.dispose(),c.dispose(),h.dispose(),d.dispose(),f};function ad(t,e,n=null){if(0===t.rank)return Tl(t);if(1!==t.rank&&null===n)return ad(ru(t,[-1]),e,n);if(1===t.rank||\"number\"==typeof n||Array.isArray(n)&&1===n.length){if(1===e)return yc(Tl(t),n);if(e===1/0)return gc(Tl(t),n);if(e===-1/0)return zc(Tl(t),n);if(\"euclidean\"===e||2===e)return il(yc(vl(Tl(t),ml(2,\"int32\")),n));throw new Error(`Error in norm: invalid ord value: ${e}`)}if(Array.isArray(n)&&2===n.length){if(1===e)return gc(yc(Tl(t),n[0]),n[1]-1);if(e===1/0)return gc(yc(Tl(t),n[1]),n[0]);if(e===-1/0)return zc(yc(Tl(t),n[1]),n[0]);if(\"fro\"===e||\"euclidean\"===e)return il(yc(al(t),n));throw new Error(`Error in norm: invalid ord value: ${e}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const od=Ti({norm_:function(t,e=\"euclidean\",n=null,r=!1){const s=ad(t=vi(t,\"x\",\"norm\"),e,n);let i=s.shape;if(r){const e=gt(n,t.shape);i=Sc(s.shape,e)}return ru(s,i)}}),ld=Ti({movingAverage_:function(t,e,n,r,s=!0){const i=vi(t,\"v\",\"movingAverage\"),a=vi(e,\"x\",\"movingAverage\"),o=vi(n,\"decay\",\"movingAverage\");si(i,a),nt(lt(i.shape,a.shape),(()=>\"Shape mismatch in v and x\"));const l=ml(1),u=wl(l,o);let c=sl(wl(a,i),u);if(s){nt(null!=r,(()=>\"When using zeroDebias: true, step is required.\"));const t=vi(r,\"step\",\"movingAverage\");c=rl(c,wl(l,vl(o,t)))}return el(i,c)}}),ud=Ti({scatterND_:function(t,e,n){const r=vi(t,\"indices\",\"scatterND\",\"int32\"),s=vi(e,\"updates\",\"scatterND\");to(s,r,n);const i={indices:r,updates:s},a={shape:n};return di.runKernel(mr,i,a)}}),cd=Ti({sparseToDense_:function(t,e,n,r=0){const s=vi(t,\"sparseIndices\",\"sparseToDense\",\"int32\"),i=vi(e,\"sparseValues\",\"sparseToDense\"),a=vi(r,\"defaultValue\",\"sparseToDense\",i.dtype);!function(t,e,n,r){if(\"int32\"!==t.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${t.shape}.`);const s=t.rank>0?t.shape[0]:1,i=t.rank>1?t.shape[1]:1;if(n.length!==i)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${i}.`);const a=e.size;if(0!==e.rank&&(1!==e.rank||a!==s))throw new Error(`sparseValues has incorrect shape ${e.shape}, should be [] or [${s}]`);if(e.dtype!==r.dtype)throw new Error(\"sparseValues.dtype must match defaultValues.dtype\")}(s,i,n,a);const o={sparseIndices:s,sparseValues:i,defaultValue:a},l={outputShape:n};return di.runKernel(Lr,o,l)}}),hd=Ti({gatherND_:function(t,e){const n=vi(e,\"indices\",\"gatherND\",\"int32\"),r={params:vi(t,\"x\",\"gatherND\",\"string_or_numeric\"),indices:n};return di.runKernel(ln,r)}}),dd=Ti({dropout_:function(t,e,n,r){const s=vi(t,\"x\",\"dropout\");if(nt(\"float32\"===s.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${s.dtype} tensor instead.`)),nt(e>=0&&e<1,(()=>`rate must be a float in the range [0, 1), but got ${e}.`)),0===e)return t instanceof js?s.clone():s;const i=function(t,e){if(null==e)return t.shape.slice();if(lt(t.shape,e))return e;if(t.shape.length===e.length){const n=[];for(let r=0;r<t.shape.length;r++)null==e[r]&&null!=t.shape[r]?n.push(t.shape[r]):n.push(e[r]);return n}return e}(s,n),a=1-e,o=rl(Ju(el(hh(i,0,1,\"float32\",r),a)),a);return sl(s,o)}});function pd(t){return Math.floor(Math.pow(2,Math.ceil(Math.log(t)/Math.log(2))))}function fd(t,e,n){const r=1-t%2,s=new Float32Array(t);for(let i=0;i<t;++i){const a=2*Math.PI*i/(t+r-1);s[i]=e-n*Math.cos(a)}return jh(s,\"float32\")}const md=async function(t,e,n=1){const r=vi(t,\"predictions\",\"inTopK\"),s=vi(e,\"targets\",\"inTopK\");nt(r.rank>1,(()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${r.rank}`)),nt(r.rank-1===s.rank,(()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${r.rank} and targets rank ${s.rank}`)),rt(r.shape.slice(0,r.shape.length-1),s.shape,\"predictions's shape should be align with the targets' shape, except the last dimension.\");const i=r.shape[r.shape.length-1];nt(n>0&&n<=i,(()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${i}), but got ${n}`));const a=await r.data(),o=await s.data(),[l,u]=[a.length/i,i],c=xt(\"bool\",l);for(let t=0;t<l;t++){const e=t*u,r=a.subarray(e,e+u),s=[];for(let t=0;t<r.length;t++)s.push({value:r[t],index:t});s.sort(((t,e)=>e.value-t.value)),c[t]=0;for(let e=0;e<n;e++)if(s[e].index===o[t]){c[t]=1;break}}return t!==r&&r.dispose(),e!==s&&s.dispose(),ki(c,s.shape,\"bool\")},gd=Ti({conv2DBackpropFilter_:function(t,e,n,r,s,i=\"NHWC\",a){let o=t;3===t.rank&&(o=ru(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let l=e;3===l.rank&&(l=ru(e,[1,e.shape[0],e.shape[1],e.shape[2]])),nt(4===o.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${o.shape}.`)),nt(4===l.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`)),nt(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const u=\"NHWC\"===i?o.shape[3]:o.shape[1],c=\"NHWC\"===i?l.shape[3]:l.shape[1];nt(u===n[2],(()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${n[2]}.`)),nt(c===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`)),null!=a&&nt(ut(s),(()=>`Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode ${a} but got pad ${s}.`));const h={x:o,dy:l},d={strides:r,pad:s,dataFormat:i,dimRoundingMode:a,filterShape:n};return di.runKernel(Ee,h,d)}});function yd(t,e,n){if(null==n||\"linear\"===n)return t;if(\"relu\"===n)return sl(t,Wh(e));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function xd(t,e){let n=e;const r=Ml(t.shape,e.shape);return r.length>0&&(n=yc(n,r)),ru(n,t.shape)}function bd(t,e,n,r){if(\"linear\"===e)return t;if(\"relu\"===e)return mh(t);if(\"elu\"===e)return Hu(t);if(\"relu6\"===e)return gh(t);if(\"prelu\"===e)return nh(t,n);if(\"leakyrelu\"===e)return ac(t,r);if(\"sigmoid\"===e)return ou(t);throw new Error(`Unknown fused activation ${e}.`)}const vd=(t,e)=>!(t>0)||\"linear\"===e,wd=Ti({fusedConv2d_:function({x:t,filter:e,strides:n,pad:r,dataFormat:s=\"NHWC\",dilations:i=[1,1],dimRoundingMode:a,bias:o,activation:l=\"linear\",preluActivationWeights:u,leakyreluAlpha:c}){if(l=l||\"linear\",!1===vd(di.state.gradientDepth,l)){let h=Mu(t,e,n,r,s,i,a);return null!=o&&(h=el(h,o)),bd(h,l,u,c)}const h=vi(t,\"x\",\"conv2d\"),d=vi(e,\"filter\",\"conv2d\");let p=h,f=!1;3===h.rank&&(f=!0,p=ru(h,[1,h.shape[0],h.shape[1],h.shape[2]])),nt(4===p.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${p.rank}.`)),nt(4===d.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${d.rank}.`)),null!=a&&nt(ut(r),(()=>`Error in fused conv2d: pad must be an integer when using, dimRoundingMode ${a} but got pad ${r}.`)),nt(p.shape[3]===d.shape[2],(()=>`Error in conv2d: depth of input (${p.shape[3]}) must match input depth for filter ${d.shape[2]}.`)),nt(eu(n,i),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`)),nt(\"NHWC\"===s,(()=>`Error in conv2d: got dataFormat of ${s} but only NHWC is currently supported.`));const m=ql(p.shape,d.shape,n,i,r,a);let g,y;null!=o&&(g=vi(o,\"bias\",\"fused conv2d\"),[g]=ri(g,h),kl(m.outShape,g.shape)),null!=u&&(y=vi(u,\"prelu weights\",\"fused conv2d\"));const x=(t,e)=>{const[s,a,o,u]=e,c=yd(t,o,l);nt(tu(i),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${i}'`));const h=[Eu(a.shape,c,s,n,r),gd(a,c,s.shape,n,r)];if(null!=u){const t=xd(u,c);h.push(t)}return h},b={x:p,filter:d,bias:g,preluActivationWeights:y},v={strides:n,pad:r,dataFormat:s,dilations:i,dimRoundingMode:a,activation:l,leakyreluAlpha:c};return null==o?pl(((t,e,n)=>{let r=di.runKernel(es,b,v);return n([e,t,r]),f&&(r=ru(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:x}}))(p,d):pl(((t,e,n,r)=>{let s=di.runKernel(es,b,v);return r([e,t,s,n]),f&&(s=ru(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:x}}))(p,d,g)}}),Sd=Ti({depthwiseConv2dNativeBackpropFilter_:function(t,e,n,r,s,i=[1,1],a){let o=t;3===t.rank&&(o=ru(t,[1,t.shape[0],t.shape[1],t.shape[2]]));let l=e;3===l.rank&&(l=ru(e,[1,e.shape[0],e.shape[1],e.shape[2]]));const u={x:o,dy:l},c={strides:r,pad:s,dimRoundingMode:a,dilations:i,filterShape:n};return di.runKernel(ze,u,c)}}),Td=Ti({depthwiseConv2dNativeBackpropInput_:function(t,e,n,r,s,i=[1,1],a){let o=e,l=!1;3===e.rank&&(l=!0,o=ru(e,[1,e.shape[0],e.shape[1],e.shape[2]]));const u={dy:o,filter:n},c={strides:r,pad:s,dimRoundingMode:a,dilations:i,inputShape:t},h=di.runKernel(Be,u,c);return l?ru(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),_d=Ti({fusedDepthwiseConv2d_:function({x:t,filter:e,strides:n,pad:r,dataFormat:s=\"NHWC\",dilations:i=[1,1],dimRoundingMode:a,bias:o,activation:l=\"linear\",preluActivationWeights:u,leakyreluAlpha:c}){if(!1===vd(di.state.gradientDepth,l)){let h=Ou(t,e,n,r,s,i,a);return null!=o&&(h=el(h,o)),bd(h,l,u,c)}const h=vi(t,\"x\",\"depthwiseConv2d\"),d=vi(e,\"filter\",\"depthwiseConv2d\");let p=h,f=!1;3===h.rank&&(f=!0,p=ru(h,[1,h.shape[0],h.shape[1],h.shape[2]])),nt(4===p.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${p.rank}.`)),nt(4===d.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${d.rank}.`)),nt(p.shape[3]===d.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${p.shape[3]}) must match the inChannels dimension in filter ${d.shape[2]}.`)),null==i&&(i=[1,1]),nt(eu(n,i),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${i}'`)),null!=a&&nt(ut(r),(()=>`Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode ${a} but got pad ${r}.`));const m=ql(p.shape,d.shape,n,i,r,a,!0);let g,y;null!=o&&(g=vi(o,\"bias\",\"fused conv2d\"),[g]=ri(g,h),kl(m.outShape,g.shape)),null!=u&&(y=vi(u,\"prelu weights\",\"fused depthwiseConv2d\"));const x=(t,e)=>{nt(tu(i),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${i}'`));const[s,o,u,c]=e,h=yd(t,u,l),d=Td(o.shape,h,s,n,r,i,a),p=Sd(o,h,s.shape,n,r,i,a);return null!=c?[d,p,xd(g,h)]:[d,p]},b={x:p,filter:d,bias:g,preluActivationWeights:y},v={strides:n,pad:r,dataFormat:s,dilations:i,dimRoundingMode:a,activation:l,leakyreluAlpha:c};return null==o?pl(((t,e,n)=>{let r=di.runKernel(ns,b,v);return n([e,t,r]),f&&(r=ru(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:x}}))(p,d):pl(((t,e,n,r)=>{let s=di.runKernel(ns,b,v);return r([e,t,s,n]),f&&(s=ru(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:x}}))(p,d,g)}}),Md=Ti({fusedMatMul_:function({a:t,b:e,transposeA:n=!1,transposeB:r=!1,bias:s,activation:i=\"linear\",preluActivationWeights:a,leakyreluAlpha:o}){if(!1===vd(di.state.gradientDepth,i)){let l=Va(t,e,n,r);return null!=s&&(l=el(l,s)),bd(l,i,a,o)}let l=vi(t,\"a\",\"fused matMul\"),u=vi(e,\"b\",\"fused matMul\");[l,u]=ri(l,u);const c=n?l.shape[l.rank-2]:l.shape[l.rank-1],h=r?u.shape[u.rank-1]:u.shape[u.rank-2],d=n?l.shape[l.rank-1]:l.shape[l.rank-2],p=r?u.shape[u.rank-2]:u.shape[u.rank-1],f=l.shape.slice(0,-2),m=u.shape.slice(0,-2),g=at(f),y=at(m);nt(l.rank>=2&&u.rank>=2&&l.rank===u.rank,(()=>`Error in fused matMul: inputs must have the same rank of at least 2, got ranks ${l.rank} and ${u.rank}.`)),nt(lt(f,m),(()=>`Error in fused matMul: outer dimensions (${f}) and (${m}) of Tensors with shapes ${l.shape} and ${u.shape} must match.`)),nt(c===h,(()=>`Error in fused matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${l.shape} and ${u.shape} and transposeA=${n} and transposeB=${r} must match.`));const x=l.shape.slice(0,-2).concat([d,p]),b=ru(l,n?[g,c,d]:[g,d,c]),v=ru(u,r?[y,p,h]:[y,h,p]);let w,S;null!=s&&(w=vi(s,\"bias\",\"fused matMul\"),[w]=ri(w,l),kl(x,w.shape)),null!=a&&(S=vi(a,\"prelu weights\",\"fused matMul\"));const T=(t,e)=>{const[a,o,l,u]=e,c=yd(ru(t,l.shape),l,i);let h,d;return n||r?!n&&r?(h=Va(c,o,!1,!1),d=Va(c,a,!0,!1)):n&&!r?(h=Va(o,c,!1,!0),d=Va(a,c,!1,!1)):(h=Va(o,c,!0,!0),d=Va(c,a,!0,!0)):(h=Va(c,o,!1,!0),d=Va(a,c,!0,!1)),null!=s?[h,d,xd(u,c)]:[h,d]},_={a:b,b:v,bias:w,preluActivationWeights:S},M={transposeA:n,transposeB:r,activation:i,leakyreluAlpha:o};return null==s?pl(((t,e,n)=>{const r=di.runKernel(ts,_,M);return n([t,e,r]),{value:ru(r,x),gradFunc:T}}))(b,v):pl(((t,e,n,r)=>{const s=di.runKernel(ts,_,M);return r([t,e,s,n]),{value:ru(s,x),gradFunc:T}}))(b,v,w)}}),kd=Ti({hammingWindow_:function(t){return fd(t,.54,.46)}}),Ed=Ti({hannWindow_:function(t){return fd(t,.5,.5)}}),Id=Ti({frame_:function(t,e,n,r=!1,s=0){let i=0;const a=[];for(;i+e<=t.size;)a.push(lu(t,i,e)),i+=n;if(r)for(;i<t.size;){const r=i+e-t.size,o=au([lu(t,i,e-r),xl([r],s)]);a.push(o),i+=n}return 0===a.length?qh([],[0,e]):ru(au(a),[a.length,e])}}),Cd=Ti({stft_:function(t,e,n,r,s=Ed){null==r&&(r=pd(e));const i=Id(t,e,n),a=sl(i,s(e));return zh(a,r)}}),Nd=Ti({cropAndResize_:function(t,e,n,r,s=\"bilinear\",i=0){const a=vi(t,\"image\",\"cropAndResize\"),o=vi(e,\"boxes\",\"cropAndResize\",\"float32\"),l=vi(n,\"boxInd\",\"cropAndResize\",\"int32\"),u=o.shape[0];nt(4===a.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${a.rank}.`)),nt(2===o.rank&&4===o.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${o.shape}.`)),nt(1===l.rank&&l.shape[0]===u,(()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${o.shape}.`)),nt(2===r.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`)),nt(r[0]>=1&&r[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${r}`)),nt(\"bilinear\"===s||\"nearest\"===s,(()=>`method must be bilinear or nearest, but was ${s}`));const c={image:a,boxes:o,boxInd:l},h={method:s,extrapolationValue:i,cropSize:r};return di.runKernel(Fe,c,h)}}),Ad=Ti({flipLeftRight_:function(t){const e=vi(t,\"image\",\"flipLeftRight\",\"float32\");nt(4===e.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${e.rank}.`));const n={image:e};return di.runKernel(nn,n,{})}}),Rd=Ti({grayscaleToRGB_:function(t){const e=vi(t,\"image\",\"grayscaleToRGB\"),n=e.rank-1,r=e.shape[n];nt(e.rank>=2,(()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${e.rank}.`)),nt(1===r,(()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${r}.`));const s=new Array(e.rank);return s.fill(1,0,n),s[n]=3,Yu(e,s)}}),Ld=Ti({rotateWithOffset_:function(t,e,n=0,r=.5){const s=vi(t,\"image\",\"rotateWithOffset\",\"float32\");nt(4===s.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${s.rank}.`));const i={image:s},a={radians:e,fillValue:n,center:r};return di.runKernel(Qr,i,a)}});function Dd(t,e,n,r,s,i){null==r&&(r=.5),null==s&&(s=Number.NEGATIVE_INFINITY),null==i&&(i=0);const a=t.shape[0];return n=Math.min(n,a),nt(0<=r&&r<=1,(()=>`iouThreshold must be in [0, 1], but was '${r}'`)),nt(2===t.rank,(()=>`boxes must be a 2D tensor, but was of rank '${t.rank}'`)),nt(4===t.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${t.shape[1]}`)),nt(1===e.rank,(()=>\"scores must be a 1D tensor\")),nt(e.shape[0]===a,(()=>`scores has incompatible shape with boxes. Expected ${a}, but was ${e.shape[0]}`)),nt(0<=i&&i<=1,(()=>`softNmsSigma must be in [0, 1], but was '${i}'`)),{maxOutputSize:n,iouThreshold:r,scoreThreshold:s,softNmsSigma:i}}const Fd=Ti({nonMaxSuppression_:function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY){const i=vi(t,\"boxes\",\"nonMaxSuppression\"),a=vi(e,\"scores\",\"nonMaxSuppression\"),o=Dd(i,a,n,r,s),l={maxOutputSize:n=o.maxOutputSize,iouThreshold:r=o.iouThreshold,scoreThreshold:s=o.scoreThreshold};return di.runKernel(Hn,{boxes:i,scores:a},l)}});function $d(t,e,n){const r=function(t,e,n){return function(t,e,n){let r=0,s=t.length,i=0,a=!1;for(;r<s;){i=r+(s-r>>>1);const o=n(e,t[i]);o>0?r=i+1:(s=i,a=!o)}return a?r:-r-1}(t,e,n||Od)}(t,e,n),s=r<0?-(r+1):r;t.splice(s,0,e)}function Od(t,e){return t>e?1:t<e?-1:0}function Pd(t,e,n,r,s){return Ud(t,e,n,r,s,0)}function zd(t,e,n,r,s,i){return Ud(t,e,n,r,s,0,!1,i,!0)}function Bd(t,e,n,r,s,i){return Ud(t,e,n,r,s,i,!0)}function Ud(t,e,n,r,s,i,a=!1,o=!1,l=!1){const u=[];for(let t=0;t<e.length;t++)e[t]>s&&u.push({score:e[t],boxIndex:t,suppressBeginIndex:0});u.sort(Gd);const c=i>0?-.5/i:0,h=[],d=[];for(;h.length<n&&u.length>0;){const e=u.pop(),{score:n,boxIndex:i,suppressBeginIndex:a}=e;if(n<s)break;let o=!1;for(let n=h.length-1;n>=a;--n){const a=Vd(t,i,h[n]);if(a>=r){o=!0;break}if(e.score=e.score*Wd(r,c,a),e.score<=s)break}e.suppressBeginIndex=h.length,o||(e.score===n?(h.push(i),d.push(e.score)):e.score>s&&$d(u,e,Gd))}const p=h.length,f=n-p;o&&f>0&&(h.push(...new Array(f).fill(0)),d.push(...new Array(f).fill(0)));const m={selectedIndices:h};return a&&(m.selectedScores=d),l&&(m.validOutputs=p),m}function Vd(t,e,n){const r=t.subarray(4*e,4*e+4),s=t.subarray(4*n,4*n+4),i=Math.min(r[0],r[2]),a=Math.min(r[1],r[3]),o=Math.max(r[0],r[2]),l=Math.max(r[1],r[3]),u=Math.min(s[0],s[2]),c=Math.min(s[1],s[3]),h=Math.max(s[0],s[2]),d=Math.max(s[1],s[3]),p=(o-i)*(l-a),f=(h-u)*(d-c);if(p<=0||f<=0)return 0;const m=Math.max(i,u),g=Math.max(a,c),y=Math.min(o,h),x=Math.min(l,d),b=Math.max(y-m,0)*Math.max(x-g,0);return b/(p+f-b)}function Wd(t,e,n){const r=Math.exp(e*n*n);return n<=t?r:0}function Gd(t,e){return t.score-e.score||t.score===e.score&&e.boxIndex-t.boxIndex}const Hd=Ti({nonMaxSuppressionWithScore_:function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY,i=0){const a=vi(t,\"boxes\",\"nonMaxSuppression\"),o=vi(e,\"scores\",\"nonMaxSuppression\"),l=Dd(a,o,n,r,s,i),u={boxes:a,scores:o},c={maxOutputSize:n=l.maxOutputSize,iouThreshold:r=l.iouThreshold,scoreThreshold:s=l.scoreThreshold,softNmsSigma:i=l.softNmsSigma},h=di.runKernel(qn,u,c);return{selectedIndices:h[0],selectedScores:h[1]}}}),jd=Ti({nonMaxSuppressionPadded_:function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY,i=!1){const a=vi(t,\"boxes\",\"nonMaxSuppression\"),o=vi(e,\"scores\",\"nonMaxSuppression\"),l=Dd(a,o,n,r,s,null),u={boxes:a,scores:o},c={maxOutputSize:l.maxOutputSize,iouThreshold:l.iouThreshold,scoreThreshold:l.scoreThreshold,padToMaxOutputSize:i},h=di.runKernel(jn,u,c);return{selectedIndices:h[0],validOutputs:h[1]}}}),qd=Ti({resizeBilinear_:function(t,e,n=!1,r=!1){const s=vi(t,\"images\",\"resizeBilinear\");nt(3===s.rank||4===s.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${s.rank}.`)),nt(2===e.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${e}.`)),nt(!1===r||!1===n,(()=>\"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.\"));let i=s,a=!1;3===s.rank&&(a=!0,i=ru(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[]=e,o={images:i},l={alignCorners:n,halfPixelCenters:r,size:e},u=di.runKernel(ur,o,l);return a?ru(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),Xd=Ti({resizeNearestNeighbor_:function(t,e,n=!1,r=!1){const s=vi(t,\"images\",\"resizeNearestNeighbor\");nt(3===s.rank||4===s.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${s.rank}.`)),nt(2===e.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${e}.`)),nt(\"float32\"===s.dtype||\"int32\"===s.dtype,(()=>\"`images` must have `int32` or `float32` as dtype\")),nt(!1===r||!1===n,(()=>\"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.\"));let i=s,a=!1;3===s.rank&&(a=!0,i=ru(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[]=e,o={images:i},l={alignCorners:n,halfPixelCenters:r,size:e},u=di.runKernel(or,o,l);return a?ru(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),Kd=Ti({threshold_:function(t,e=\"binary\",n=!1,r=.5){const s=vi(t,\"image\",\"threshold\"),i=s.shape[0]*s.shape[1];let a,o,l,u,c=sl(jh([r]),255);if(nt(3===s.rank,(()=>`Error in threshold: image must be rank 3,but got rank ${s.rank}.`)),nt(3===s.shape[2]||1===s.shape[2],(()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${s.shape[2]}.`)),nt(\"int32\"===s.dtype||\"float32\"===s.dtype,(()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${s.dtype}.`)),nt(\"otsu\"===e||\"binary\"===e,(()=>`Method must be binary or otsu, but was ${e}`)),3===s.shape[2]){[a,o,l]=Ph(s,[1,1,1],-1);const t=sl(a,.2989),e=sl(o,.587),n=sl(l,.114);u=el(el(t,e),n)}else u=t;\"otsu\"===e&&(c=function(t,e){let n,r,s,i,a,o,l=jh([-1]),u=jh([0]),c=jh([0]);for(let h=0;h<t.size-1;h++){n=lu(t,0,h+1),r=lu(t,h+1),a=rl(yc(n),e),o=rl(yc(r),e);const d=yc(sl(n,dh(0,n.size)));s=rl(d,yc(n));const p=xl(r.shape,n.size),f=el(dh(0,r.size),p),m=sl(r,f);i=rl(yc(m),yc(r));const g=wl(s,i),y=wl(s,i),x=sl(a,o);c=sl(sl(x,g),y);const b=tc(c,u);u=Uu(b,c,u),l=Uu(b,jh([h]),l)}return l}(gu(Sa(Sh(u),\"int32\"),ki([]),256),i));const h=n?lc(u,c):tc(u,c);return Sa(sl(h,255),\"int32\")}}),Yd=Ti({transform_:function(t,e,n=\"nearest\",r=\"constant\",s=0,i){const a=vi(t,\"image\",\"transform\",\"float32\"),o=vi(e,\"transforms\",\"transform\",\"float32\");nt(4===a.rank,(()=>`Error in transform: image must be rank 4,but got rank ${a.rank}.`)),nt(2===o.rank&&(o.shape[0]===a.shape[0]||1===o.shape[0])&&8===o.shape[1],(()=>\"Error in transform: Input transform should be batch x 8 or 1 x 8\")),nt(null==i||2===i.length,(()=>`Error in transform: outputShape must be [height, width] or null, but got ${i}.`));const l={image:a,transforms:o},u={interpolation:n,fillMode:r,fillValue:s,outputShape:i};return di.runKernel(Hr,l,u)}}),Zd=Ti({bandPart_:function(t,e,n){nt(e%1==0,(()=>`bandPart(): numLower must be an integer, got ${e}.`)),nt(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`));const r=vi(t,\"a\",\"bandPart\");nt(r.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${r.rank}.`));const s=r.shape,[i,a]=r.shape.slice(-2);if(!(e<=i))throw new Error(`bandPart(): numLower (${e}) must not be greater than the number of rows (${i}).`);if(!(n<=a))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${a}).`);e<0&&(e=i),n<0&&(n=a);const o=ru(dh(0,i,1,\"int32\"),[-1,1]),l=dh(0,a,1,\"int32\"),u=wl(o,l),c=Ic(lc(u,ml(+e,\"int32\")),ec(u,ml(-n,\"int32\"))),h=$c([i,a],r.dtype);return ru(Vh(ed(ru(r,[-1,i,a])).map((t=>Uu(c,t,h)))),s)}}),Jd=Ti({gramSchmidt_:function(t){let e;if(Array.isArray(t)){e=!1,nt(null!=t&&t.length>0,(()=>\"Gram-Schmidt process: input must not be null, undefined, or empty\"));const n=t[0].shape[0];for(let e=1;e<t.length;++e)nt(t[e].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${t[e].shape[0]} vs. ${n})`))}else e=!0,t=Ph(t,t.shape[0],0).map((t=>Uh(t,[0])));nt(t.length<=t[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${t.length}) exceeds number of dimensions (${t[0].shape[0]}).`));const n=[],r=t;for(let e=0;e<t.length;++e)n.push(di.tidy((()=>{let t=r[e];if(e>0)for(let r=0;r<e;++r){const e=sl(yc(sl(n[r],t)),n[r]);t=wl(t,e)}return rl(t,od(t,\"euclidean\"))})));return e?Vh(n,0):n}});function Qd(t,e=!1){return di.tidy((()=>{nt(2===t.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${t.shape.length}D Tensor.`));const n=t.shape[0],r=t.shape[1];let s=Zu(n),i=Ta(t);const a=qh([[1]],[1,1]);let o=Ta(a);const l=n>=r?r:n;for(let t=0;t<l;++t){const e=i,l=o,u=s;[o,i,s]=di.tidy((()=>{const e=lu(i,[t,t],[n-t,1]),l=od(e),u=lu(i,[t,t],[1,1]),c=Uu(tc(u,0),qh([[-1]]),qh([[1]])),h=wl(u,sl(c,l)),d=rl(e,h);o=1===d.shape[0]?Ta(a):au([a,lu(d,[1,0],[d.shape[0]-1,d.shape[1]])],0);const p=pc(rl(Va(c,h),l)),f=lu(i,[t,0],[n-t,r]),m=sl(p,o),g=Ga(o);if(0===t)i=wl(f,Va(m,Va(g,f)));else{const e=wl(f,Va(m,Va(g,f)));i=au([lu(i,[0,0],[t,r]),e],0)}const y=Ga(m),x=lu(s,[0,t],[n,s.shape[1]-t]);if(0===t)s=wl(x,Va(Va(x,o),y));else{const e=wl(x,Va(Va(x,o),y));s=au([lu(s,[0,0],[n,t]),e],1)}return[o,i,s]})),Wo([e,l,u])}return!e&&n>r&&(s=lu(s,[0,0],[n,r]),i=lu(i,[0,0],[r,r])),[s,i]}))}const tp=Ti({qr_:function(t,e=!1){if(nt(t.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${t.rank}`)),2===t.rank)return Qd(t,e);{const n=t.shape.slice(0,t.shape.length-2).reduce(((t,e)=>t*e)),r=ed(ru(t,[n,t.shape[t.shape.length-2],t.shape[t.shape.length-1]]),0),s=[],i=[];return r.forEach((t=>{const[n,r]=Qd(t,e);s.push(n),i.push(r)})),[ru(Vh(s,0),t.shape),ru(Vh(i,0),t.shape)]}}});var ep;!function(t){t[t.NONE=0]=\"NONE\",t[t.MEAN=1]=\"MEAN\",t[t.SUM=2]=\"SUM\",t[t.SUM_BY_NONZERO_WEIGHTS=3]=\"SUM_BY_NONZERO_WEIGHTS\"}(ep||(ep={}));const np=Ti({computeWeightedLoss_:function(t,e,n=ep.SUM_BY_NONZERO_WEIGHTS){const r=vi(t,\"losses\",\"computeWeightedLoss\");let s=null;null!=e&&(s=vi(e,\"weights\",\"computeWeightedLoss\"));const i=null==s?r:sl(r,s);if(n===ep.NONE)return i;if(n===ep.SUM)return yc(i);if(n===ep.MEAN){if(null==s)return Fc(i);{const t=r.size/s.size,e=rl(yc(i),yc(s));return t>1?rl(e,ml(t)):e}}if(n===ep.SUM_BY_NONZERO_WEIGHTS){if(null==s)return rl(yc(i),ml(r.size));{const t=sl(s,Oc(r.shape)),e=Sa(yc(jc(t,ml(0))),\"float32\");return rl(yc(i),e)}}throw Error(`Unknown reduction: ${n}`)}}),rp=Ti({absoluteDifference_:function(t,e,n,r=ep.SUM_BY_NONZERO_WEIGHTS){const s=vi(t,\"labels\",\"absoluteDifference\"),i=vi(e,\"predictions\",\"absoluteDifference\");let a=null;null!=n&&(a=vi(n,\"weights\",\"absoluteDifference\")),rt(s.shape,i.shape,\"Error in absoluteDifference: \");const o=Tl(wl(s,i));return np(o,a,r)}}),sp=Ti({cosineDistance_:function(t,e,n,r,s=ep.SUM_BY_NONZERO_WEIGHTS){const i=vi(t,\"labels\",\"cosineDistance\"),a=vi(e,\"predictions\",\"cosineDistance\");let o=null;null!=r&&(o=vi(r,\"weights\",\"cosineDistance\")),rt(i.shape,a.shape,\"Error in cosineDistance: \");const l=ml(1),u=wl(l,yc(sl(i,a),n,!0));return np(u,o,s)}}),ip=Ti({hingeLoss_:function(t,e,n,r=ep.SUM_BY_NONZERO_WEIGHTS){let s=vi(t,\"labels\",\"hingeLoss\");const i=vi(e,\"predictions\",\"hingeLoss\");let a=null;null!=n&&(a=vi(n,\"weights\",\"hingeLoss\")),rt(s.shape,i.shape,\"Error in hingeLoss: \");const o=ml(1);s=wl(sl(ml(2),s),o);const l=mh(wl(o,sl(s,i)));return np(l,a,r)}}),ap=Ti({huberLoss_:function(t,e,n,r=1,s=ep.SUM_BY_NONZERO_WEIGHTS){const i=vi(t,\"labels\",\"huberLoss\"),a=vi(e,\"predictions\",\"huberLoss\");let o=null;null!=n&&(o=vi(n,\"weights\",\"huberLoss\")),rt(i.shape,a.shape,\"Error in huberLoss: \");const l=ml(r),u=Tl(wl(a,i)),c=Bc(u,l),h=wl(u,c),d=el(sl(ml(.5),al(c)),sl(l,h));return np(d,o,s)}}),op=Ti({logLoss_:function(t,e,n,r=1e-7,s=ep.SUM_BY_NONZERO_WEIGHTS){const i=vi(t,\"labels\",\"logLoss\"),a=vi(e,\"predictions\",\"logLoss\");let o=null;null!=n&&(o=vi(n,\"weights\",\"logLoss\")),rt(i.shape,a.shape,\"Error in logLoss: \");const l=ml(1),u=ml(r),c=pc(sl(i,hc(el(a,u)))),h=sl(wl(l,i),hc(el(wl(l,a),u))),d=wl(c,h);return np(d,o,s)}}),lp=Ti({meanSquaredError_:function(t,e,n,r=ep.SUM_BY_NONZERO_WEIGHTS){const s=vi(t,\"labels\",\"meanSquaredError\"),i=vi(e,\"predictions\",\"meanSquaredError\");let a=null;null!=n&&(a=vi(n,\"weights\",\"meanSquaredError\")),rt(s.shape,i.shape,\"Error in meanSquaredError: \");const o=Bh(s,i);return np(o,a,r)}}),up=Ti({sigmoidCrossEntropy_:function(t,e,n,r=0,s=ep.SUM_BY_NONZERO_WEIGHTS){let i=vi(t,\"multiClassLabels\",\"sigmoidCrossEntropy\");const a=vi(e,\"logits\",\"sigmoidCrossEntropy\");let o=null;if(null!=n&&(o=vi(n,\"weights\",\"sigmoidCrossEntropy\")),rt(i.shape,a.shape,\"Error in sigmoidCrossEntropy: \"),r>0){const t=ml(r),e=ml(1),n=ml(.5);i=el(sl(i,wl(e,t)),sl(n,t))}const l=function(t,e){const n=vi(t,\"labels\",\"sigmoidCrossEntropyWithLogits\"),r=vi(e,\"logits\",\"sigmoidCrossEntropyWithLogits\");rt(n.shape,r.shape,\"Error in sigmoidCrossEntropyWithLogits: \");const s=mh(r),i=sl(r,n),a=dc(qu(pc(Tl(r))));return el(wl(s,i),a)}(i,a);return np(l,o,s)}}),cp=Ti({softmaxCrossEntropy_:function(t,e,n,r=0,s=ep.SUM_BY_NONZERO_WEIGHTS){let i=vi(t,\"onehotLabels\",\"softmaxCrossEntropy\");const a=vi(e,\"logits\",\"softmaxCrossEntropy\");let o=null;if(null!=n&&(o=vi(n,\"weights\",\"softmaxCrossEntropy\")),rt(i.shape,a.shape,\"Error in softmaxCrossEntropy: \"),r>0){const t=ml(r),e=ml(1),n=ml(i.shape[1]);i=el(sl(i,wl(e,t)),rl(t,n))}const l=function(t,e,n=-1){if(-1===n&&(n=e.rank-1),n!==e.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${e.rank} and dim was ${n}`);return pl(((t,e,r)=>{const s=Ec(e,[n],!0),i=wl(Sa(e,\"float32\"),s);r([t,i]);const a=pc(sl(i,t));return{value:yc(a,[n]),gradFunc:(t,e)=>{const[r,s]=e,i=Sc(t.shape,[n]);return[sl(ru(t,i),wl(Sa(r,\"float32\"),qu(s))),sl(ru(t,i),wl(qu(s),Sa(r,\"float32\")))]}}}))(t,e)}(i,a);return np(l,o,s)}}),hp=Ti({sparseFillEmptyRows_:function(t,e,n,r){const s=vi(t,\"indices\",\"sparseFillEmptyRows\"),i=vi(e,\"values\",\"sparseFillEmptyRows\"),a=vi(n,\"denseShape\",\"sparseFillEmptyRows\"),o=vi(r,\"defaultValue\",\"sparseFillEmptyRows\",i.dtype);if(2!==s.rank)throw new Error(`Indices should be Tensor2D but received shape\\n        ${s.shape}`);if(1!==i.rank)throw new Error(`Values should be Tensor1D but received shape ${i.shape}`);if(1!==a.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${a.shape}`);if(0!==o.rank)throw new Error(`Default value should be a scalar but received shape ${o.shape}`);const l={indices:s,values:i,denseShape:a,defaultValue:o},u=di.runKernel(Cr,l);return{outputIndices:u[0],outputValues:u[1],emptyRowIndicator:u[2],reverseIndexMap:u[3]}}}),dp=Ti({sparseReshape_:function(t,e,n){const r=vi(t,\"inputIndices\",\"sparseReshape\"),s=vi(e,\"inputShape\",\"sparseReshape\"),i=vi(n,\"newShape\",\"sparseReshape\");if(2!==r.rank)throw new Error(`Input indices should be Tensor2D but received shape\\n        ${r.shape}`);if(1!==s.rank)throw new Error(`Input shape should be Tensor1D but received shape ${s.shape}`);if(1!==i.rank)throw new Error(`New shape should be Tensor1D but received shape ${i.shape}`);const a={inputIndices:r,inputShape:s,newShape:i},o=di.runKernel(Nr,a);return{outputIndices:o[0],outputShape:o[1]}}}),pp=Ti({sparseSegmentMean_:function(t,e,n){const r=vi(t,\"data\",\"sparseSegmentMean\"),s=vi(e,\"indices\",\"sparseSegmentMean\"),i=vi(n,\"segmentIds\",\"sparseSegmentMean\");if(r.rank<1)throw new Error(\"Data should be at least 1 dimensional but received scalar\");if(1!==s.rank)throw new Error(`Indices should be Tensor1D but received shape\\n          ${s.shape}`);if(1!==i.rank)throw new Error(`Segment ids should be Tensor1D but received shape\\n          ${i.shape}`);const a={data:r,indices:s,segmentIds:i};return di.runKernel(Ar,a)}}),fp=Ti({sparseSegmentSum_:function(t,e,n){const r=vi(t,\"data\",\"sparseSegmentSum\"),s=vi(e,\"indices\",\"sparseSegmentSum\"),i=vi(n,\"segmentIds\",\"sparseSegmentSum\");if(r.rank<1)throw new Error(\"Data should be at least 1 dimensional but received scalar\");if(1!==s.rank)throw new Error(`Indices should be Tensor1D but received shape\\n         ${s.shape}`);if(1!==i.rank)throw new Error(`Segment ids should be Tensor1D but received shape\\n         ${i.shape}`);const a={data:r,indices:s,segmentIds:i};return di.runKernel(Rr,a)}}),mp=Ti({stringNGrams_:function(t,e,n,r,s,i,a,o){const l=vi(t,\"data\",\"stringNGrams\",\"string\");if(\"string\"!==l.dtype)throw new Error(\"Data must be of datatype string\");if(1!==l.shape.length)throw new Error(`Data must be a vector, saw: ${l.shape}`);const u=vi(e,\"dataSplits\",\"stringNGrams\");if(\"int32\"!==u.dtype)throw new Error(\"Data splits must be of datatype int32\");const c={separator:n,nGramWidths:r,leftPad:s,rightPad:i,padWidth:a,preserveShortSequences:o},h={data:l,dataSplits:u},d=di.runKernel(Or,h,c);return{nGrams:d[0],nGramsSplits:d[1]}}}),gp=Ti({stringSplit_:function(t,e,n=!0){const r=vi(t,\"input\",\"stringSplit\",\"string\"),s=vi(e,\"delimiter\",\"stringSplit\",\"string\");if(1!==r.rank)throw new Error(`Input should be Tensor1D but received shape ${r.shape}`);if(0!==s.rank)throw new Error(`Delimiter should be a scalar but received shape ${s.shape}`);const i={skipEmpty:n},a={input:r,delimiter:s},o=di.runKernel(Pr,a,i);return{indices:o[0],values:o[1],shape:o[2]}}}),yp=Ti({stringToHashBucketFast_:function(t,e){const n=vi(t,\"input\",\"stringToHashBucketFast\",\"string\"),r={numBuckets:e};if(e<=0)throw new Error(\"Number of buckets must be at least 1\");const s={input:n};return di.runKernel(zr,s,r)}}),xp={fft:Fh,ifft:$h,rfft:zh,irfft:Oh},bp={hammingWindow:kd,hannWindow:Ed,frame:Id,stft:Cd},vp={flipLeftRight:Ad,grayscaleToRGB:Rd,resizeNearestNeighbor:Xd,resizeBilinear:qd,rotateWithOffset:Ld,cropAndResize:Nd,nonMaxSuppression:Fd,nonMaxSuppressionAsync:async function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY){const i=vi(t,\"boxes\",\"nonMaxSuppressionAsync\"),a=vi(e,\"scores\",\"nonMaxSuppressionAsync\"),o=Dd(i,a,n,r,s);n=o.maxOutputSize,r=o.iouThreshold,s=o.scoreThreshold;const l=await Promise.all([i.data(),a.data()]),u=l[0],c=l[1],{selectedIndices:h}=Pd(u,c,n,r,s);return i!==t&&i.dispose(),a!==e&&a.dispose(),jh(h,\"int32\")},nonMaxSuppressionWithScore:Hd,nonMaxSuppressionWithScoreAsync:async function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY,i=0){const a=vi(t,\"boxes\",\"nonMaxSuppressionAsync\"),o=vi(e,\"scores\",\"nonMaxSuppressionAsync\"),l=Dd(a,o,n,r,s,i);n=l.maxOutputSize,r=l.iouThreshold,s=l.scoreThreshold,i=l.softNmsSigma;const u=await Promise.all([a.data(),o.data()]),c=u[0],h=u[1],{selectedIndices:d,selectedScores:p}=Bd(c,h,n,r,s,i);return a!==t&&a.dispose(),o!==e&&o.dispose(),{selectedIndices:jh(d,\"int32\"),selectedScores:jh(p)}},nonMaxSuppressionPadded:jd,nonMaxSuppressionPaddedAsync:async function(t,e,n,r=.5,s=Number.NEGATIVE_INFINITY,i=!1){const a=vi(t,\"boxes\",\"nonMaxSuppressionAsync\"),o=vi(e,\"scores\",\"nonMaxSuppressionAsync\"),l=Dd(a,o,n,r,s,null),u=l.maxOutputSize,c=l.iouThreshold,h=l.scoreThreshold,[d,p]=await Promise.all([a.data(),o.data()]),{selectedIndices:f,validOutputs:m}=zd(d,p,u,c,h,i);return a!==t&&a.dispose(),o!==e&&o.dispose(),{selectedIndices:jh(f,\"int32\"),validOutputs:ml(m,\"int32\")}},threshold:Kd,transform:Yd},wp={bandPart:Zd,gramSchmidt:Jd,qr:tp},Sp={absoluteDifference:rp,computeWeightedLoss:np,cosineDistance:sp,hingeLoss:ip,huberLoss:ap,logLoss:op,meanSquaredError:lp,sigmoidCrossEntropy:up,softmaxCrossEntropy:cp},Tp={sparseFillEmptyRows:hp,sparseReshape:dp,sparseSegmentMean:pp,sparseSegmentSum:fp},_p={stringNGrams:mp,stringSplit:gp,stringToHashBucketFast:yp};class Mp{static sgd(t){return new Cl(t)}static momentum(t,e,n=!1){return new Nl(t,e,n)}static rmsprop(t,e=.9,n=0,r=null,s=!1){return new Al(t,e,n,r,s)}static adam(t=.001,e=.9,n=.999,r=null){return new Sl(t,e,n,r)}static adadelta(t=.001,e=.95,n=null){return new yl(t,e,n)}static adamax(t=.002,e=.9,n=.999,r=null,s=0){return new Il(t,e,n,r,s)}static adagrad(t,e=.1){return new bl(t,e)}}const kp={sgd:Mp.sgd,momentum:Mp.momentum,adadelta:Mp.adadelta,adagrad:Mp.adagrad,rmsprop:Mp.rmsprop,adamax:Mp.adamax,adam:Mp.adam},Ep=\"undefined\"!=typeof requestAnimationFrame?requestAnimationFrame:\"undefined\"!=typeof setImmediate?setImmediate:t=>t();function Ip(){return new Promise((t=>Ep((()=>t()))))}function Cp(t,e){const n=t[0].length;t.forEach(((t,e)=>{nt(t.length===n,(()=>`Error in concat${n}D: rank of tensors[${e}] must be the same as the rank of the rest (${n})`))})),nt(e>=0&&e<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const r=t[0];t.forEach(((t,s)=>{for(let i=0;i<n;i++)nt(i===e||t[i]===r[i],(()=>`Error in concat${n}D: Shape of tensors[${s}] (${t}) does not match the shape of the rest (${r}) along the non-concatenated axis ${s}.`))}))}function Np(t,e){const n=t[0].slice();for(let r=1;r<t.length;r++)n[e]+=t[r][e];return n}const Ap=30;function Rp(t){return t<=Ap?t:At(t,Math.floor(Math.sqrt(t)))}function Lp(t,e,n){return[n*(\"number\"==typeof t?t:t[0]),e*(\"number\"==typeof t?t:t[1])]}function Dp(t,e,n,r=!0){let s=[];if(r)s=s.concat(e.slice(0)),s.push(t[0]/n),s=s.concat(t.slice(1));else{s=s.concat(t[0]);const n=e.length;for(let r=0;r<n;++r)s=s.concat([t[r+1]/e[r],e[r]]);s=s.concat(t.slice(n+1))}return s}function Fp(t,e,n=!0){const r=[];if(n){r.push(e);for(let n=e+1;n<t;++n)n<=2*e?(r.push(n),r.push(n-(e+1))):r.push(n)}else{const n=[],s=[];for(let r=1;r<t;++r)r>=2*e+1||r%2==1?s.push(r):n.push(r);r.push(...n),r.push(0),r.push(...s)}return r}function $p(t,e,n,r=!0){const s=[];r?s.push(t[0]/n):s.push(t[0]*n);for(let n=1;n<t.length;++n)n<=e.length?r?s.push(e[n-1]*t[n]):s.push(t[n]/e[n-1]):s.push(t[n]);return s}function Op(t,e){const n=[0];for(let r=0;r<e;++r)n.push(t[r][0]);return n}function Pp(t,e,n){const r=t.slice(0,1);for(let s=0;s<n;++s)r.push(t[s+1]-e[s][0]-e[s][1]);return r}const zp=1.7580993408473768,Bp=1.0507009873554805,Up=.3275911,Vp=.254829592,Wp=-.284496736,Gp=1.421413741,Hp=-1.453152027,jp=1.061405429;function qp(t,e){if(t.length!==e.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${t.length}, imag: ${e.length}.`);const n=new Float32Array(2*t.length);for(let r=0;r<n.length;r+=2)n[r]=t[r/2],n[r+1]=e[r/2];return n}function Xp(t){const e=new Float32Array(t.length/2),n=new Float32Array(t.length/2);for(let r=0;r<t.length;r+=2)e[r/2]=t[r],n[r/2]=t[r+1];return{real:e,imag:n}}function Kp(t){const e=Math.ceil(t.length/4),n=new Float32Array(e),r=new Float32Array(e);for(let e=0;e<t.length;e+=4)n[Math.floor(e/4)]=t[e],r[Math.floor(e/4)]=t[e+1];return{real:n,imag:r}}function Yp(t){const e=Math.floor(t.length/4),n=new Float32Array(e),r=new Float32Array(e);for(let e=2;e<t.length;e+=4)n[Math.floor(e/4)]=t[e],r[Math.floor(e/4)]=t[e+1];return{real:n,imag:r}}function Zp(t,e){return{real:t[2*e],imag:t[2*e+1]}}function Jp(t,e,n,r){t[2*r]=e,t[2*r+1]=n}function Qp(t,e){const n=new Float32Array(t/2),r=new Float32Array(t/2);for(let s=0;s<Math.ceil(t/2);s++){const i=(e?2:-2)*Math.PI*(s/t);n[s]=Math.cos(i),r[s]=Math.sin(i)}return{real:n,imag:r}}function tf(t,e,n){const r=(n?2:-2)*Math.PI*(t/e);return{real:Math.cos(r),imag:Math.sin(r)}}const ef=/->/g;function nf(t,e){const n=((t=t.replace(/\\s/g,\"\")).length-t.replace(ef,\"\").length)/\"->\".length;if(n<1)throw new Error(\"Equations without an arrow are not supported.\");if(n>1)throw new Error('Equation must contain exactly one arrow (\"->\").');const[r,s]=t.split(\"->\");nt(-1===r.indexOf(\"...\"),(()=>'The ellipsis notation (\"...\") is not supported yet.'));const i=r.split(\",\"),a=i.length;if(e!==a)throw new Error(`Expected ${a} input tensors, received ${e}`);if(a>2)throw new Error(\"Support for more than 2 input tensors is not implemented yet.\");const o=[];for(let t=0;t<s.length;++t){const e=s[t];if(!i.some((t=>-1!==t.indexOf(e))))throw new Error(`Output subscripts contain the label ${e} not present in the input subscripts.`);-1===o.indexOf(e)&&o.push(e)}for(let t=0;t<r.length;++t){const e=r[t];-1===o.indexOf(e)&&\",\"!==e&&o.push(e)}const l=new Array(i.length);for(let t=0;t<a;++t){if(new Set(i[t].split(\"\")).size!==i[t].length)throw new Error(`Found duplicate axes in input component ${i[t]}. Support for duplicate axes in input is not implemented yet.`);l[t]=[];for(let e=0;e<i[t].length;++e)l[t].push(o.indexOf(i[t][e]))}const u=o.length,c=[];for(let t=s.length;t<u;++t)c.push(t);return{allDims:o,summedDims:c,idDims:l}}function rf(t,e){let n=new Array(t);n.fill(-1);for(let t=0;t<e.length;++t)n[e[t]]=t;const r=[];for(let e=0;e<t;++e)-1===n[e]&&r.push(e);return n=n.filter((t=>-1!==t)),{permutationIndices:n,expandDims:r}}function sf(t,e,n){const r=new Array(t);for(let t=0;t<n.length;++t){const s=n[t].shape;for(let n=0;n<e[t].length;++n)void 0===r[e[t][n]]?r[e[t][n]]=s[n]:nt(r[e[t][n]]===s[n],(()=>`Expected dimension ${r[e[t][n]]} at axis ${n} of input shaped ${JSON.stringify(s)}, but got dimension ${s[n]}`))}}function af(t,e){const n=t,r=[];let s=0;0===t.length&&n.push(-1),s=t.length+1;for(let t=0;t<s;++t)r.push([]);const i=[];for(let t=0;t<n.length;++t){const s=lf(e,n[t]);for(const e of s)-1===i.indexOf(e)&&(r[t].push(e),i.push(e))}return{path:n,steps:r}}function of(t){return t.every(((t,e)=>t===e))}function lf(t,e){const n=[];for(let r=0;r<t.length;++r)0!==t[r].length&&-1===t[r].indexOf(e)&&-1!==e||n.push(r);return n}function uf(t,e,n=0){let r=[];if(\"number\"==typeof e)nt(t.shape[n]%e==0,(()=>\"Number of splits must evenly divide the axis.\")),r=new Array(e).fill(t.shape[n]/e);else{nt(e.reduce(((t,e)=>(-1===e&&(t+=1),t)),0)<=1,(()=>\"There should be only one negative value in split array.\"));const s=e.indexOf(-1);if(-1!==s){const r=e.reduce(((t,e)=>e>0?t+e:t));e[s]=t.shape[n]-r}nt(t.shape[n]===e.reduce(((t,e)=>t+e)),(()=>\"The sum of sizes must match the size of the axis dimension.\")),r=e}return r}function cf(t,e){let n,r=!1;for(t<=Ap?(n=t,r=!0):n=At(t,Math.floor(Math.sqrt(t)));!r;)n>e||n===t?r=!0:n=At(t,n+1);return n}function hf(t,e,n){const r=[],s=t.length;for(let i=0;i<s;i++)i!==e?r.push(t[i]):r.push(n);return r}function df(t,e,n,r){const s=e.shape.length,i=t.shape.length;if(0!==r&&(r<-s||r>s))throw new Error(`Expect batchDims in the range of [-${s}, ${s}], but got ${r}`);if(r<0&&(r+=s),r>i)throw new Error(`batchDims (${r}) must be less than rank(x) (\\n    ${i}).`);if(n<r)throw new Error(`batchDims (${r}) must be less than or equal to axis (${n}).`);for(let n=0;n<r;++n)if(t.shape[n]!==e.shape[n])throw new Error(`x.shape[${n}]: ${t.shape[n]} should be equal to indices.shape[${n}]: ${e.shape[n]}.`);const a=t.shape[n],o=[];let l=1,u=1,c=1;for(let e=0;e<r;++e)o.push(t.shape[e]),l*=t.shape[e];for(let e=r;e<n;e++)o.push(t.shape[e]),u*=t.shape[e];for(let t=r;t<s;t++)o.push(e.shape[t]);for(let e=n+1;e<i;e++)o.push(t.shape[e]),c*=t.shape[e];return{batchSize:l,sliceSize:c,outerSize:u,dimSize:a,outputShape:o}}function pf(t){try{return t.map((t=>Ls(t)))}catch(t){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${t}`)}}function ff(t){return t.map((t=>Rs(t)))}const mf={kernelName:Zt,inputsToSave:[\"x\"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>sl(t,Wh(Sa(n,\"float32\"),-1))}}},gf={kernelName:Jt,inputsToSave:[\"x\"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=al(Sa(n,\"float32\")),r=il(wl(ml(1),e));return pc(rl(t,r))}}}},yf={kernelName:Qt,inputsToSave:[\"x\"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=il(wl(al(Sa(n,\"float32\")),1));return rl(t,e)}}}},xf={kernelName:te,inputsToSave:[\"a\",\"b\"],gradFunc:(t,e)=>{const[n,r]=e,s=kl(n.shape,r.shape);return{a:()=>{let e=t;const r=Ml(n.shape,s);return r.length>0&&(e=yc(e,r)),ru(e,n.shape)},b:()=>{let e=t;const n=Ml(r.shape,s);return n.length>0&&(e=yc(e,n)),ru(e,r.shape)}}}},bf={kernelName:ee,saveAllInputs:!0,gradFunc:(t,e)=>{const n={};return e.forEach(((e,r)=>{n[r]=()=>t.clone()})),n}},vf={kernelName:se,inputsToSave:[\"x\"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ol(n)}}},wf={kernelName:ie,inputsToSave:[\"x\"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ol(n)}}},Sf={kernelName:ae,inputsToSave:[\"x\"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>rl(t,il(wl(ml(1),al(Sa(n,\"float32\")))))}}},Tf={kernelName:oe,inputsToSave:[\"x\"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=il(el(ml(1),al(Sa(n,\"float32\"))));return rl(t,e)}}}},_f={kernelName:ce,inputsToSave:[\"a\",\"b\"],gradFunc:(t,e)=>{const[n,r]=e,s=kl(n.shape,r.shape);return{a:()=>{const e=el(al(n),al(r));let i=sl(t,rl(r,e));const a=Ml(n.shape,s);return a.length>0&&(i=yc(i,a)),ru(i,n.shape)},b:()=>{const e=el(al(n),al(r));let i=pc(sl(t,rl(n,e)));const a=Ml(r.shape,s);return a.length>0&&(i=yc(i,a)),ru(i,r.shape)}}}},Mf={kernelName:le,inputsToSave:[\"x\"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>rl(t,el(al(Sa(n,\"float32\")),1))}}},kf={kernelName:ue,inputsToSave:[\"x\"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>rl(t,wl(ml(1),al(Sa(n,\"float32\"))))}}},Ef=Ti({avgPool3dGrad_:function(t,e,n,r,s,i){const a=vi(t,\"dy\",\"avgPool3dGrad\"),o=vi(e,\"input\",\"avgPool3dGrad\");let l=a,u=o,c=!1;4===o.rank&&(c=!0,l=ru(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]]),u=ru(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),nt(5===l.rank,(()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`)),nt(5===u.rank,(()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${u.rank}.`)),null!=i&&nt(ut(s),(()=>`Error in avgPool3dGrad: pad must be an integer when using, dimRoundingMode ${i} but got pad ${s}.`));const h={dy:l,input:u},d={filterSize:n,strides:r,pad:s,dimRoundingMode:i},p=di.runKernel(fe,h,d);return c?ru(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),If={kernelName:pe,inputsToSave:[\"x\"],gradFunc:(t,e,n)=>{const[r]=e,{filterSize:s,strides:i,pad:a,dimRoundingMode:o}=n;return{x:()=>Ef(t,r,s,i,a,o)}}},Cf=Ti({avgPoolGrad_:function(t,e,n,r,s){const i=vi(t,\"dy\",\"avgPoolGrad\"),a=vi(e,\"input\",\"avgPoolGrad\");nt(a.rank===i.rank,(()=>`Rank of input (${a.rank}) does not match rank of dy (${i.rank})`));let o=a,l=i,u=!1;3===a.rank&&(u=!0,o=ru(a,[1,a.shape[0],a.shape[1],a.shape[2]]),l=ru(i,[1,i.shape[0],i.shape[1],i.shape[2]])),nt(4===l.rank,(()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`)),nt(4===o.rank,(()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${o.rank}.`));const c={dy:l,input:o},h={filterSize:n,strides:r,pad:s},d=di.runKernel(de,c,h);return u?ru(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),Nf={kernelName:he,inputsToSave:[\"x\"],gradFunc:(t,e,n)=>{const[r]=e,{filterSize:s,strides:i,pad:a}=n;return{x:()=>Cf(t,r,s,i,a)}}},Af={kernelName:me,inputsToSave:[\"a\",\"b\"],gradFunc:(t,e,n)=>{const[r,s]=e,{transposeA:i,transposeB:a}=n;return i||a?!i&&a?{a:()=>Va(t,s,!1,!1),b:()=>Va(t,r,!0,!1)}:i&&!a?{a:()=>Va(s,t,!1,!0),b:()=>Va(r,t,!1,!1)}:{a:()=>Va(s,t,!0,!0),b:()=>Va(t,r,!0,!0)}:{a:()=>Va(t,s,!1,!0),b:()=>Va(r,t,!0,!1)}}},Rf={kernelName:ge,gradFunc:(t,e,n)=>{const{blockShape:r,crops:s}=n;return{x:()=>th(t,r,s)}}},Lf={kernelName:xe,gradFunc:(t,e,n)=>{const r=n,s=r.inputShape,i=r.shape,a=Array.from(i);for(let t=s.length-1;t>=0;t--)if(s[t]===i[t])a[t]=1;else if(1!==s[t])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${i}].`);const o=[];for(let t=0;t<a.length;t++)a[t]>1&&o.push(t);return{x:()=>yc(t,o,!0)}}},Df={kernelName:ve,gradFunc:t=>({x:()=>t.clone()})},Ff={kernelName:we,gradFunc:t=>({x:()=>ol(t)})},$f={kernelName:Se,inputsToSave:[\"x\"],gradFunc:(t,e,n)=>{const[r]=e,{clipValueMin:s,clipValueMax:i}=n;return{x:()=>Uu(Ic(ec(r,s),lc(r,i)),t,ol(t))}}},Of={kernelName:_e,inputsToSave:[\"x\"],gradFunc:mf.gradFunc},Pf={kernelName:Me,saveAllInputs:!0,gradFunc:(t,e,n)=>{const r=e.map((t=>t.shape)),{axis:s}=n,i=gt(s,e[0].shape)[0],a=r.map((t=>t[i]));return Ph(t,a,i).map((t=>()=>t))}},zf={kernelName:ke,inputsToSave:[\"x\",\"filter\"],gradFunc:(t,e,n)=>{const[r,s]=e,{dilations:i,strides:a,pad:o,dataFormat:l}=n;return nt(tu(i),(()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${i}'`)),{x:()=>Eu(r.shape,t,s,a,o,l),filter:()=>gd(r,t,s.shape,a,o,l)}}},Bf={kernelName:Ie,inputsToSave:[\"dy\",\"filter\"],gradFunc:(t,e,n)=>{const[r,s]=e,{strides:i,pad:a,dataFormat:o,dimRoundingMode:l}=n;return{dy:()=>Mu(t,s,i,a,o,1,l),filter:()=>gd(t,r,s.shape,i,a,o,l)}}},Uf=Ti({conv3DBackpropFilter_:function(t,e,n,r,s){let i=t;4===t.rank&&(i=ru(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]));let a=e;4===a.rank&&(a=ru(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]])),nt(5===i.rank,(()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${i.shape}.`)),nt(5===a.rank,(()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${a.shape}.`)),nt(5===n.length,(()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${n}.`)),nt(i.shape[4]===n[3],(()=>`Error in conv3dDerFilter: depth of input ${i.shape[4]}) must match input depth in filter (${n[3]}.`)),nt(a.shape[4]===n[4],(()=>`Error in conv3dDerFilter: depth of dy (${a.shape[4]}) must match output depth for filter (${n[4]}).`));const o={x:i,dy:a},l={strides:r,pad:s,filterShape:n};return di.runKernel(Ne,o,l)}}),Vf={kernelName:Ce,inputsToSave:[\"x\",\"filter\"],gradFunc:(t,e,n)=>{const{dilations:r,strides:s,pad:i}=n;nt(tu(r),(()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`));const[a,o]=e;return{x:()=>Nu(a.shape,t,o,s,i),filter:()=>Uf(a,t,o.shape,s,i)}}},Wf={kernelName:Re,inputsToSave:[\"x\"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>sl(pc(Ih(Sa(n,\"float32\"))),t)}}},Gf={kernelName:Le,inputsToSave:[\"x\"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>sl(Ch(Sa(n,\"float32\")),t)}}},Hf={kernelName:De,inputsToSave:[\"x\"],gradFunc:(t,e,n)=>{const[r]=e,{axis:s,exclusive:i,reverse:a}=n;return{x:()=>{const e=_c([s],r.rank);let n=Du(t,s,i,!a);return null!=e&&(n=Ga(n,e)),n}}}},jf={kernelName:Pe,inputsToSave:[\"x\",\"filter\"],gradFunc:(t,e,n)=>{const{dilations:r,strides:s,pad:i,dimRoundingMode:a}=n,o=null==r?[1,1]:r;nt(tu(o),(()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`));const[l,u]=e;return nt(4===l.rank,(()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`)),nt(4===u.rank,(()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`)),nt(l.shape[3]===u.shape[2],(()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`)),nt(eu(s,o),(()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${s} and dilations '${o}'.`)),null!=a&&nt(ut(i),(()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${a} but got pad ${i}.`)),{x:()=>Td(l.shape,t,u,s,i,o,a),filter:()=>Sd(l,t,u.shape,s,i,o,a)}}},qf={kernelName:Ve,inputsToSave:[\"x\",\"filter\"],gradFunc:(t,e,n)=>{const[r,s]=e,i={x:r,filter:s,dy:t},a={x:r,filter:s,dy:t};return{x:()=>di.runKernel(We,i,n),filter:()=>di.runKernel(Ge,a,n)}}},Xf={kernelName:qe,outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e,r={dy:t,y:n};return{x:()=>di.runKernel(Xe,r)}}},Kf={kernelName:Ke,inputsToSave:[\"x\"],gradFunc:(t,e)=>{const[n]=e,r=sl(qu(pc(al(n))),2/Math.sqrt(Math.PI));return{x:()=>sl(t,r)}}},Yf={kernelName:Ze,outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e;return{x:()=>sl(t,n)}}},Zf={kernelName:Je,inputsToSave:[\"input\"],gradFunc:(t,e)=>{const[n]=e;return{input:()=>ru(t,n.shape)}}},Jf={kernelName:Qe,inputsToSave:[\"x\"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>sl(t,qu(n))}}},Qf={kernelName:rn,gradFunc:t=>({x:()=>ol(t)})},tm={kernelName:sn,inputsToSave:[\"a\",\"b\"],gradFunc:(t,e)=>{const[n,r]=e,s=kl(n.shape,r.shape);return{a:()=>{const e=rl(t,Sa(r,\"float32\")),i=Ml(n.shape,s);return i.length>0?ru(yc(e,i),n.shape):e},b:()=>{let e=sl(t,Sa(n,\"float32\"));const i=Ml(r.shape,s);i.length>0&&(e=ru(yc(e,i),r.shape));const a=al(r);return pc(rl(e,Sa(a,\"float32\")))}}}},em={kernelName:an,inputsToSave:[\"x\",\"mean\",\"variance\",\"scale\"],gradFunc:(t,e,n)=>{const{varianceEpsilon:r}=n,[s,i,a,o]=e,l=null==o?ml(1):o,u=Ml(i.shape,s.shape),c=[];if(1===i.rank){for(let t=0;t<s.shape.length-1;++t)c.push(s.shape[t]);c.push(1)}const h=wl(s,i),d=sl(t,l),p=Th(el(a,ml(r))),f=sl(sl(sl(p,p),p),ml(-.5));return{x:()=>1===i.rank?ru(sl(sl(t,Yu(ru(p,[1,1,1,i.shape[0]]),c)),l),s.shape):ru(sl(sl(t,p),l),s.shape),mean:()=>{let t=sl(sl(p,ml(-1)),d);return 1===i.rank&&(t=yc(t,u)),ru(t,i.shape)},variance:()=>{let t=sl(sl(f,h),d);return 1===i.rank&&(t=yc(t,u)),ru(t,i.shape)},scale:()=>{const e=sl(h,p);let n=sl(t,e);return 1===i.rank&&(n=yc(n,u)),ru(n,i.shape)},offset:()=>{let e=t;return 1===i.rank&&(e=yc(e,u)),ru(e,i.shape)}}}},nm={kernelName:on,inputsToSave:[\"x\",\"indices\"],gradFunc:(t,e,n)=>{const[r,s]=e,{axis:i}=n,a=gt(i,r.shape)[0];return{x:()=>{const e=r.shape,n=s.size,o=e.slice(0,a),l=o.length,u=e.slice(i,e.length).slice(1),c=u.length,h=rm(0,l),d=rm(l+1,l+1+c),p=sm([o,[n],u]),f=ru(t,p),m=ru(s,[n]),g=sm([[l],h,d]),y=Ga(f,g);let x=td(y,m,r.shape[a]);const b=Mc(g);return x=Ga(x,b),x},indices:()=>s}}};function rm(t,e){const n=[];for(let r=t;r<e;++r)n.push(r);return n}function sm(t){const e=[];for(let n=0;n<t.length;++n)for(let r=0;r<t[n].length;++r)e.push(t[n][r]);return e}const im={kernelName:cn,inputsToSave:[\"a\",\"b\"],gradFunc:(t,e)=>{const[n,r]=e;return{a:()=>ol(n),b:()=>ol(r)}}},am={kernelName:hn,gradFunc:t=>({x:()=>Sa(t,\"float32\")})},om={kernelName:fn,gradFunc:t=>({x:()=>ol(t)})},lm={kernelName:mn,gradFunc:t=>({x:()=>ol(t)})},um={kernelName:gn,gradFunc:t=>({x:()=>ol(t)})},cm={kernelName:yn,inputsToSave:[\"x\"],gradFunc:(t,e,n)=>{const[r]=e,{alpha:s}=n,i=tc(r,0);return{x:()=>Uu(i,t,sl(t,s))}}},hm={kernelName:Sn,inputsToSave:[\"x\"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>rl(t,el(n,1))}}},dm={kernelName:wn,inputsToSave:[\"x\"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>rl(t,Sa(n,\"float32\"))}}},pm={kernelName:kn,inputsToSave:[],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r]=e,{axis:s}=n;return{logits:()=>{const e=qu(r);return wl(t,sl(yc(t,s,!0),e))}}}},fm=Ti({localResponseNormalizationBackprop_:function(t,e,n,r=5,s=1,i=1,a=.5){const o={x:t,y:e,dy:n},l={depthRadius:r,bias:s,alpha:i,beta:a};return di.runKernel(In,o,l)}}),mm={kernelName:En,inputsToSave:[\"x\"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r,s]=e,{depthRadius:i,bias:a,alpha:o,beta:l}=n;return{x:()=>fm(r,s,t,i,a,o,l)}}};function gm(t,e,n,r){return e.rank<n.rank&&(e=ru(e,Sc(e.shape,r))),t.rank<n.rank&&(t=ru(t,Sc(t.shape,r))),{x:()=>sl(t,Sa(Bu(n,e),t.dtype))}}const ym={kernelName:Cn,inputsToSave:[\"x\"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const r=n,{reductionIndices:s}=r,i=e[0],a=gm(t,e[1],i,gt(s,i.shape));return{x:()=>a.x()}}},xm={kernelName:Nn,inputsToSave:[\"a\",\"b\"],gradFunc:(t,e)=>{const[n,r]=e;return{a:()=>sl(t,Sa(ec(n,r),\"float32\")),b:()=>sl(t,Sa(oc(n,r),\"float32\"))}}},bm=Ti({maxPool3dGrad_:function(t,e,n,r,s,i,a){const o=vi(t,\"dy\",\"maxPool3dGrad\"),l=vi(e,\"input\",\"maxPool3dGrad\"),u=vi(n,\"output\",\"maxPool3dGrad\");let c=o,h=l,d=u,p=!1;4===l.rank&&(p=!0,c=ru(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),h=ru(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),d=ru(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),nt(5===c.rank,(()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${c.rank}.`)),nt(5===h.rank,(()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${h.rank}.`)),nt(5===d.rank,(()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${d.rank}.`)),null!=a&&nt(ut(i),(()=>`Error in maxPool3dGrad: pad must be an integer when using, dimRoundingMode ${a} but got pad ${i}.`));const f={dy:c,input:h,output:d},m={filterSize:r,strides:s,pad:i,dimRoundingMode:a},g=di.runKernel(Dn,f,m);return p?ru(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}}),vm={kernelName:Ln,inputsToSave:[\"x\"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r,s]=e,{filterSize:i,strides:a,pad:o,dimRoundingMode:l}=n;return{x:()=>bm(t,r,s,i,a,o,l)}}},wm=Ti({maxPoolGrad_:function(t,e,n,r,s,i,a){const o=vi(t,\"dy\",\"maxPoolGrad\"),l=vi(e,\"input\",\"maxPoolGrad\"),u=vi(n,\"output\",\"maxPoolGrad\");nt(l.rank===o.rank,(()=>`Rank of input (${l.rank}) does not match rank of dy (${o.rank})`)),nt(4===o.rank,(()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${o.rank}.`)),nt(4===l.rank,(()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`)),null!=a&&nt(ut(i),(()=>`Error in maxPoolGrad: pad must be an integer when using, dimRoundingMode ${a} but got pad ${i}.`));const c={dy:o,input:l,output:u},h={filterSize:r,strides:s,pad:i,dimRoundingMode:a};return di.runKernel(Rn,c,h)}}),Sm={kernelName:Zn,inputsToSave:[\"x\"],gradFunc:(t,e,n)=>{const r=e[0],{paddings:s}=n,i=s.map((t=>t[0]));return{x:()=>lu(t,i,r.shape)}}},Tm={kernelName:kr,gradFunc:(t,e,n)=>{const{blockShape:r,paddings:s}=n;return{x:()=>hu(t,r,s)}}},_m={kernelName:Er,gradFunc:(t,e,n)=>{const{axis:r}=n;return{x:()=>au(t,r)}}},Mm=[mf,gf,yf,xf,bf,vf,wf,Sf,Tf,_f,Mf,kf,If,Nf,Af,Rf,Lf,Df,Ff,$f,Of,Pf,Bf,zf,Vf,Wf,Gf,Hf,jf,qf,{kernelName:He,inputsToSave:[\"a\",\"b\"],gradFunc:(t,e)=>{const[n,r]=e,s=kl(n.shape,r.shape);return{a:()=>{const e=rl(t,Sa(r,\"float32\")),i=Ml(n.shape,s);return i.length>0?ru(yc(e,i),n.shape):e},b:()=>{let e=sl(t,Sa(n,\"float32\"));const i=Ml(r.shape,s);i.length>0&&(e=ru(yc(e,i),r.shape));const a=al(r);return pc(rl(e,Sa(a,\"float32\")))}}}},Xf,Kf,Yf,Zf,Jf,tm,Qf,em,nm,im,am,om,lm,um,cm,hm,dm,pm,mm,ym,ym,xm,vm,{kernelName:An,inputsToSave:[\"x\"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r,s]=e,{filterSize:i,strides:a,pad:o}=n;return{x:()=>wm(t,r,s,i,a,o)}}},{kernelName:$n,inputsToSave:[\"x\"],gradFunc:(t,e,n)=>{const[r]=e,{axis:s}=n,i=gt(s,r.shape),a=at(wc(r.shape,i)[1]);return{x:()=>{const e=r.shape.slice();i.forEach((t=>{e[t]=1}));const n=ru(t,e);return rl(sl(n,Oc(r.shape,\"float32\")),a)}}}},{kernelName:On,inputsToSave:[\"x\"],outputsToSave:[!0],gradFunc:(t,e,n)=>{const r=n,{axis:s}=r,[i,a]=e,o=gm(t,a,i,gt(s,i.shape));return{x:()=>o.x()}}},{kernelName:Pn,inputsToSave:[\"a\",\"b\"],gradFunc:(t,e)=>{const[n,r]=e;return{a:()=>sl(t,Sa(lc(n,r),\"float32\")),b:()=>sl(t,Sa(tc(n,r),\"float32\"))}}},{kernelName:zn,inputsToSave:[\"x\"],gradFunc:(t,e,n)=>{const r=e[0],{paddings:s}=n,i=s.map((t=>t[0]));return{x:()=>lu(t,i,r.shape)}}},{kernelName:Bn,inputsToSave:[\"a\",\"b\"],gradFunc:(t,e)=>{const[n,r]=e,s=kl(n.shape,r.shape);return{a:()=>{const e=Ml(n.shape,s);return e.length>0?ru(yc(t,e),n.shape):t},b:()=>{const e=sl(t,pc(Ju(rl(n,r)))),i=Ml(r.shape,s);return i.length>0?ru(yc(e,i),r.shape):e}}}},{kernelName:Vn,inputsToSave:[\"a\",\"b\"],gradFunc:(t,e)=>{const[n,r]=e,s=kl(n.shape,r.shape);return{a:()=>{const e=sl(t,Sa(r,\"float32\")),i=Ml(n.shape,s);return i.length>0?ru(yc(e,i),n.shape):e},b:()=>{const e=sl(t,Sa(n,\"float32\")),i=Ml(r.shape,s);return i.length>0?ru(yc(e,i),r.shape):e}}}},{kernelName:Wn,gradFunc:t=>({x:()=>pc(t)})},{kernelName:Kn,inputsToSave:[\"indices\"],gradFunc:(t,e)=>{const n=e[0];return{indices:()=>$c(n.shape,\"float32\")}}},{kernelName:Xn,gradFunc:t=>({x:()=>ol(t)})},{kernelName:Yn,saveAllInputs:!0,gradFunc:(t,e,n)=>{const{axis:r}=n;return ed(t,r).map((t=>()=>t))}},Sm,Sm,{kernelName:Qn,inputsToSave:[\"a\",\"b\"],outputsToSave:[!0],gradFunc:(t,e)=>{const[n,r,s]=e,i=n,a=r,o=kl(i.shape,a.shape);return{a:()=>{const e=Sa(a,\"float32\");let n=sl(t,sl(e,vl(i,wl(e,ml(1)))));const r=Ml(i.shape,o);return r.length>0&&(n=yc(n,r)),ru(n,i.shape)},b:()=>{const e=tc(i,0),n=Uu(e,hc(i),ol(i));let r=sl(t,sl(s,n));const l=Ml(a.shape,o);return l.length>0&&(r=yc(r,l)),ru(r,a.shape)}}}},{kernelName:tr,inputsToSave:[\"x\",\"alpha\"],gradFunc:(t,e)=>{const[n,r]=e,s=tc(n,0);return{x:()=>Uu(s,t,sl(t,r)),alpha:()=>{let e=Uu(s,ol(t),sl(t,n));const i=Ml(r.shape,t.shape);return i.length>0&&(e=yc(e,i)),ru(e,r.shape)}}}},{kernelName:sr,inputsToSave:[\"x\"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>rl(t,pc(al(n)))}}},{kernelName:hr,inputsToSave:[\"x\"],gradFunc:(t,e)=>{const[n]=e,r=sl(lc(n,6),Wh(n));return{x:()=>sl(t,Sa(r,\"float32\"))}}},{kernelName:ir,inputsToSave:[\"x\"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>sl(t,Sa(Wh(n),\"float32\"))}}},{kernelName:ar,inputsToSave:[\"x\"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>ru(t,n.shape)}}},{kernelName:ur,inputsToSave:[\"images\"],gradFunc:(t,e,n)=>{const[r]=e,s={dy:t,images:r};return{images:()=>di.runKernel(cr,s,n)}}},{kernelName:or,inputsToSave:[\"images\"],gradFunc:(t,e,n)=>{const[r]=e,s={dy:t,images:r};return{images:()=>di.runKernel(lr,s,n)}}},{kernelName:dr,gradFunc:(t,e,n)=>{const{dims:r}=n,s=gt(r,t.shape);return{x:()=>yh(t,s)}}},{kernelName:pr,gradFunc:t=>({x:()=>ol(t)})},{kernelName:fr,inputsToSave:[\"x\"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>pc(rl(t,sl(vl(n,1.5),2)))}}},{kernelName:gr,inputsToSave:[\"condition\"],gradFunc:(t,e)=>{const[n]=e;return{condition:()=>Sa(ol(n),\"float32\"),t:()=>sl(t,Sa(n,t.dtype)),e:()=>sl(t,Sa(Cc(n),t.dtype))}}},{kernelName:yr,inputsToSave:[\"x\"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>{const e=tc(n,ml(0)),r=ml(zp),s=ml(Bp),i=sl(t,s),a=sl(sl(t,r),qu(Sa(n,\"float32\")));return Uu(e,i,a)}}}},{kernelName:Sr,outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e;return{x:()=>sl(t,sl(n,wl(ml(1),n)))}}},{kernelName:wr,gradFunc:t=>({x:()=>ol(t)})},{kernelName:br,inputsToSave:[\"x\"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>sl(Ru(Sa(n,\"float32\")),t)}}},{kernelName:vr,inputsToSave:[\"x\"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>sl(Lu(Sa(n,\"float32\")),t)}}},{kernelName:xr,inputsToSave:[\"x\"],gradFunc:(t,e,n)=>{const[r]=e,{begin:s,size:i}=n,a=r.shape,[o,l]=yo(r,s,i),u=[];for(let e=0;e<t.rank;e++)u.push([o[e],a[e]-o[e]-l[e]]);return{x:()=>Kc(t,u)}}},{kernelName:Ir,outputsToSave:[!0],gradFunc:(t,e,n)=>{const[r]=e,{dim:s}=n,i=sl(t,r);return{logits:()=>wl(i,sl(yc(i,[s],!0),r))}}},{kernelName:Tr,inputsToSave:[\"x\"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>sl(t,ou(n))}}},Tm,Tm,_m,_m,{kernelName:_r,inputsToSave:[\"x\"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>rl(t,sl(il(Sa(n,\"float32\")),2))}}},{kernelName:Dr,inputsToSave:[\"a\",\"b\"],gradFunc:(t,e)=>{const[n,r]=e,s=ml(2);return{a:()=>sl(t,sl(s,wl(n,r))),b:()=>sl(t,sl(s,wl(r,n)))}}},{kernelName:Fr,inputsToSave:[\"x\"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>sl(t,sl(Sa(n,\"float32\"),2))}}},{kernelName:Zr,gradFunc:t=>({x:()=>ol(t)})},{kernelName:Br,inputsToSave:[\"a\",\"b\"],gradFunc:(t,e)=>{const[n,r]=e,s=kl(n.shape,r.shape);return{a:()=>{let e=t;const r=Ml(n.shape,s);return r.length>0&&(e=yc(e,r)),ru(e,n.shape)},b:()=>{let e=t;const n=Ml(r.shape,s);return n.length>0&&(e=yc(e,n)),ru(pc(e),r.shape)}}}},{kernelName:Mr,inputsToSave:[\"x\"],gradFunc:(t,e,n)=>{const[r]=e,s=r.shape.slice(),{axis:i}=n;gt(i,r.shape).forEach((t=>{s[t]=1}));const a=ru(t,s),o=sl(a,Oc(r.shape,\"float32\"));return{x:()=>o}}},{kernelName:Ur,inputsToSave:[\"x\"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>rl(t,al(Ru(n)))}}},{kernelName:Vr,outputsToSave:[!0],gradFunc:(t,e)=>{const[n]=e;return{x:()=>sl(wl(ml(1),al(n)),t)}}},{kernelName:Wr,inputsToSave:[\"x\"],gradFunc:(t,e,n)=>{const[r]=e,{reps:s}=n;return{x:()=>{let e=ol(r);if(1===r.rank)for(let n=0;n<s[0];++n)e=el(e,lu(t,[n*r.shape[0]],[r.shape[0]]));else if(2===r.rank)for(let n=0;n<s[0];++n)for(let i=0;i<s[1];++i)e=el(e,lu(t,[n*r.shape[0],i*r.shape[1]],[r.shape[0],r.shape[1]]));else if(3===r.rank)for(let n=0;n<s[0];++n)for(let i=0;i<s[1];++i)for(let a=0;a<s[2];++a)e=el(e,lu(t,[n*r.shape[0],i*r.shape[1],a*r.shape[2]],[r.shape[0],r.shape[1],r.shape[2]]));else{if(4!==r.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${r.rank} tensors yet.`);for(let n=0;n<s[0];++n)for(let i=0;i<s[1];++i)for(let a=0;a<s[2];++a)for(let o=0;o<s[3];++o)e=el(e,lu(t,[n*r.shape[0],i*r.shape[1],a*r.shape[2],o*r.shape[3]],[r.shape[0],r.shape[1],r.shape[2],r.shape[3]]))}return e}}}},{kernelName:jr,gradFunc:(t,e,n)=>{const r=n,{perm:s}=r,i=Mc(s);return{x:()=>Ga(t,i)}}},{kernelName:Xr,gradFunc:(t,e,n)=>{const r=n,{axis:s}=r;return{value:()=>Vh(t,s)}}},{kernelName:Kr,inputsToSave:[\"segmentIds\"],gradFunc:(t,e)=>{const[n]=e;return{x:()=>function(t,e){const n=El(e,ol(e)),r=Qu(t,n);let s=ec(e,ml(0,\"int32\"));const i=r.rank-s.rank;for(let t=0;t<i;++t)s=Xu(s,t+1);s=Ic(s,Oc(r.shape,\"bool\"));const a=ol(r);return Uu(s,r,a)}(t,n)}}},{kernelName:Yr,gradFunc:t=>({x:()=>ol(t)})}];for(const t of Mm)us(t);let km;function Em(){return null==km&&(km=Qo().epsilon()),km}qs().prototype.abs=function(){return this.throwIfDisposed(),Tl(this)},qs().prototype.acos=function(){return this.throwIfDisposed(),Rl(this)},qs().prototype.acosh=function(){return this.throwIfDisposed(),Ll(this)},qs().prototype.add=function(t){return this.throwIfDisposed(),el(this,t)},qs().prototype.all=function(t,e){return this.throwIfDisposed(),Fl(this,t,e)},qs().prototype.any=function(t,e){return this.throwIfDisposed(),$l(this,t,e)},qs().prototype.argMax=function(t){return this.throwIfDisposed(),Ol(this,t)},qs().prototype.argMin=function(t){return this.throwIfDisposed(),Pl(this,t)},qs().prototype.asScalar=function(){return this.throwIfDisposed(),nt(1===this.size,(()=>\"The array must have only 1 element.\")),ru(this,[])},qs().prototype.asType=function(t){return this.throwIfDisposed(),Sa(this,t)},qs().prototype.as1D=function(){return this.throwIfDisposed(),ru(this,[this.size])},qs().prototype.as2D=function(t,e){return this.throwIfDisposed(),ru(this,[t,e])},qs().prototype.as3D=function(t,e,n){return this.throwIfDisposed(),ru(this,[t,e,n])},qs().prototype.as4D=function(t,e,n,r){return this.throwIfDisposed(),ru(this,[t,e,n,r])},qs().prototype.as5D=function(t,e,n,r,s){return this.throwIfDisposed(),ru(this,[t,e,n,r,s])},qs().prototype.asin=function(){return this.throwIfDisposed(),zl(this)},qs().prototype.asinh=function(){return this.throwIfDisposed(),Bl(this)},qs().prototype.atan=function(){return this.throwIfDisposed(),Ul(this)},qs().prototype.atan2=function(t){return this.throwIfDisposed(),Vl(this,t)},qs().prototype.atanh=function(){return this.throwIfDisposed(),Wl(this)},qs().prototype.avgPool=function(t,e,n,r){return this.throwIfDisposed(),su(this,t,e,n,r)},qs().prototype.batchToSpaceND=function(t,e){return this.throwIfDisposed(),hu(this,t,e)},qs().prototype.batchNorm=function(t,e,n,r,s){return this.throwIfDisposed(),du(this,t,e,n,r,s)},qs().prototype.broadcastTo=function(t){return this.throwIfDisposed(),xu(this,t)},qs().prototype.cast=function(t){return this.throwIfDisposed(),Sa(this,t)},qs().prototype.ceil=function(){return this.throwIfDisposed(),bu(this)},qs().prototype.clipByValue=function(t,e){return this.throwIfDisposed(),vu(this,t,e)},qs().prototype.concat=function(t,e){return this.throwIfDisposed(),t instanceof js&&(t=[t]),au([this,...t],e)},qs().prototype.conv1d=function(t,e,n,r,s,i){return this.throwIfDisposed(),ku(this,t,e,n,r,s,i)},qs().prototype.conv2dTranspose=function(t,e,n,r,s){return this.throwIfDisposed(),Iu(this,t,e,n,r,s)},qs().prototype.conv2d=function(t,e,n,r,s,i){return this.throwIfDisposed(),Mu(this,t,e,n,r,s,i)},qs().prototype.cos=function(){return this.throwIfDisposed(),Ru(this)},qs().prototype.cosh=function(){return this.throwIfDisposed(),Lu(this)},qs().prototype.cumsum=function(t,e,n){return this.throwIfDisposed(),Du(this,t,e,n)},qs().prototype.depthToSpace=function(t,e){return this.throwIfDisposed(),$u(this,t,e)},qs().prototype.depthwiseConv2d=function(t,e,n,r,s,i){return this.throwIfDisposed(),Ou(this,t,e,n,r,s,i)},qs().prototype.dilation2d=function(t,e,n,r,s){return this.throwIfDisposed(),zu(this,t,e,n,r,s)},qs().prototype.divNoNan=function(t){return this.throwIfDisposed(),Vu(this,t)},qs().prototype.div=function(t){return this.throwIfDisposed(),rl(this,t)},qs().prototype.dot=function(t){return this.throwIfDisposed(),Wu(this,t)},qs().prototype.elu=function(){return this.throwIfDisposed(),Hu(this)},qs().prototype.equal=function(t){return this.throwIfDisposed(),Bu(this,t)},qs().prototype.erf=function(){return this.throwIfDisposed(),ju(this)},qs().prototype.exp=function(){return this.throwIfDisposed(),qu(this)},qs().prototype.expandDims=function(t){return this.throwIfDisposed(),Xu(this,t)},qs().prototype.expm1=function(){return this.throwIfDisposed(),Ku(this)},qs().prototype.fft=function(){return this.throwIfDisposed(),Fh(this)},qs().prototype.flatten=function(){return this.throwIfDisposed(),ru(this,[this.size])},qs().prototype.floor=function(){return this.throwIfDisposed(),Ju(this)},qs().prototype.floorDiv=function(t){return this.throwIfDisposed(),nl(this,t)},qs().prototype.gather=function(t,e){return this.throwIfDisposed(),Qu(this,t,e)},qs().prototype.greaterEqual=function(t){return this.throwIfDisposed(),ec(this,t)},qs().prototype.greater=function(t){return this.throwIfDisposed(),tc(this,t)},qs().prototype.ifft=function(){return this.throwIfDisposed(),$h(this)},qs().prototype.irfft=function(){return this.throwIfDisposed(),Oh(this)},qs().prototype.isFinite=function(){return this.throwIfDisposed(),rc(this)},qs().prototype.isInf=function(){return this.throwIfDisposed(),sc(this)},qs().prototype.isNaN=function(){return this.throwIfDisposed(),ic(this)},qs().prototype.leakyRelu=function(t){return this.throwIfDisposed(),ac(this,t)},qs().prototype.lessEqual=function(t){return this.throwIfDisposed(),lc(this,t)},qs().prototype.less=function(t){return this.throwIfDisposed(),oc(this,t)},qs().prototype.localResponseNormalization=function(t,e,n,r){return this.throwIfDisposed(),cc(this,t,e,n,r)},qs().prototype.logSigmoid=function(){return this.throwIfDisposed(),mc(this)},qs().prototype.logSoftmax=function(t){return this.throwIfDisposed(),xc(this,t)},qs().prototype.logSumExp=function(t,e){return this.throwIfDisposed(),Ec(this,t,e)},qs().prototype.log=function(){return this.throwIfDisposed(),hc(this)},qs().prototype.log1p=function(){return this.throwIfDisposed(),dc(this)},qs().prototype.logicalAnd=function(t){return this.throwIfDisposed(),Ic(this,t)},qs().prototype.logicalNot=function(){return this.throwIfDisposed(),Cc(this)},qs().prototype.logicalOr=function(t){return this.throwIfDisposed(),Nc(this,t)},qs().prototype.logicalXor=function(t){return this.throwIfDisposed(),Ac(this,t)},qs().prototype.matMul=function(t,e,n){return this.throwIfDisposed(),Va(this,t,e,n)},qs().prototype.maxPool=function(t,e,n,r){return this.throwIfDisposed(),Rc(this,t,e,n,r)},qs().prototype.max=function(t,e){return this.throwIfDisposed(),gc(this,t,e)},qs().prototype.maximum=function(t){return this.throwIfDisposed(),El(this,t)},qs().prototype.mean=function(t,e){return this.throwIfDisposed(),Fc(this,t,e)},qs().prototype.min=function(t,e){return this.throwIfDisposed(),zc(this,t,e)},qs().prototype.minimum=function(t){return this.throwIfDisposed(),Bc(this,t)},qs().prototype.mirrorPad=function(t,e){return this.throwIfDisposed(),Uc(this,t,e)},qs().prototype.mod=function(t){return this.throwIfDisposed(),Vc(this,t)},qs().prototype.mul=function(t){return this.throwIfDisposed(),sl(this,t)},qs().prototype.neg=function(){return this.throwIfDisposed(),pc(this)},qs().prototype.norm=function(t,e,n){return this.throwIfDisposed(),od(this,t,e,n)},qs().prototype.notEqual=function(t){return this.throwIfDisposed(),jc(this,t)},qs().prototype.oneHot=function(t,e=1,n=0){return this.throwIfDisposed(),Wa(this,t,e,n)},qs().prototype.onesLike=function(){return this.throwIfDisposed(),qc(this)},qs().prototype.pad=function(t,e){return this.throwIfDisposed(),Kc(this,t,e)},qs().prototype.pool=function(t,e,n,r,s){return this.throwIfDisposed(),eh(this,t,e,n,r,s)},qs().prototype.pow=function(t){return this.throwIfDisposed(),vl(this,t)},qs().prototype.prelu=function(t){return this.throwIfDisposed(),nh(this,t)},qs().prototype.prod=function(t,e){return this.throwIfDisposed(),rh(this,t,e)},qs().prototype.reciprocal=function(){return this.throwIfDisposed(),fh(this)},qs().prototype.relu=function(){return this.throwIfDisposed(),mh(this)},qs().prototype.relu6=function(){return this.throwIfDisposed(),gh(this)},qs().prototype.reshapeAs=function(t){return this.throwIfDisposed(),ru(this,t.shape)},qs().prototype.reshape=function(t){return this.throwIfDisposed(),ru(this,t)},qs().prototype.resizeBilinear=function(t,e,n){return this.throwIfDisposed(),qd(this,t,e,n)},qs().prototype.resizeNearestNeighbor=function(t,e,n){return this.throwIfDisposed(),Xd(this,t,e,n)},qs().prototype.reverse=function(t){return this.throwIfDisposed(),yh(this,t)},qs().prototype.rfft=function(){return this.throwIfDisposed(),zh(this)},qs().prototype.round=function(){return this.throwIfDisposed(),Sh(this)},qs().prototype.rsqrt=function(){return this.throwIfDisposed(),Th(this)},qs().prototype.selu=function(){return this.throwIfDisposed(),_h(this)},qs().prototype.separableConv2d=function(t,e,n,r,s,i){return this.throwIfDisposed(),Mh(this,t,e,n,r,s,i)},qs().prototype.sigmoid=function(){return this.throwIfDisposed(),ou(this)},qs().prototype.sign=function(){return this.throwIfDisposed(),Eh(this)},qs().prototype.sin=function(){return this.throwIfDisposed(),Ih(this)},qs().prototype.sinh=function(){return this.throwIfDisposed(),Ch(this)},qs().prototype.slice=function(t,e){return this.throwIfDisposed(),lu(this,t,e)},qs().prototype.softmax=function(t){return this.throwIfDisposed(),Dh(this,t)},qs().prototype.softplus=function(){return this.throwIfDisposed(),fc(this)},qs().prototype.spaceToBatchND=function(t,e){return this.throwIfDisposed(),th(this,t,e)},qs().prototype.split=function(t,e){return this.throwIfDisposed(),Ph(this,t,e)},qs().prototype.sqrt=function(){return this.throwIfDisposed(),il(this)},qs().prototype.square=function(){return this.throwIfDisposed(),al(this)},qs().prototype.squaredDifference=function(t){return this.throwIfDisposed(),Bh(this,t)},qs().prototype.squeeze=function(t){return this.throwIfDisposed(),Uh(this,t)},qs().prototype.stack=function(t,e){this.throwIfDisposed();const n=t instanceof js?[this,t]:[this,...t];return Vh(n,e)},qs().prototype.step=function(t){return this.throwIfDisposed(),Wh(this,t)},qs().prototype.stridedSlice=function(t,e,n,r,s,i,a,o){return this.throwIfDisposed(),Gh(this,t,e,n,r,s,i,a,o)},qs().prototype.sub=function(t){return this.throwIfDisposed(),wl(this,t)},qs().prototype.sum=function(t,e){return this.throwIfDisposed(),yc(this,t,e)},qs().prototype.tan=function(){return this.throwIfDisposed(),Hh(this)},qs().prototype.tanh=function(){return this.throwIfDisposed(),uu(this)},qs().prototype.tile=function(t){return this.throwIfDisposed(),Yu(this,t)},qs().prototype.toBool=function(){return this.throwIfDisposed(),Sa(this,\"bool\")},qs().prototype.toFloat=function(){return this.throwIfDisposed(),Sa(this,\"float32\")},qs().prototype.toInt=function(){return this.throwIfDisposed(),Sa(this,\"int32\")},qs().prototype.topk=function(t,e){return this.throwIfDisposed(),Zh(this,t,e)},qs().prototype.transpose=function(t){return this.throwIfDisposed(),Ga(this,t)},qs().prototype.unique=function(t){return this.throwIfDisposed(),Qh(this,t)},qs().prototype.unsortedSegmentSum=function(t,e){return this.throwIfDisposed(),td(this,t,e)},qs().prototype.unstack=function(t){return this.throwIfDisposed(),ed(this,t)},qs().prototype.where=function(t,e){return this.throwIfDisposed(),Uu(t,this,e)},qs().prototype.zerosLike=function(){return this.throwIfDisposed(),ol(this)};class Im extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Im.prototype)}}class Cm extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Cm.prototype)}}class Nm extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Nm.prototype)}}class Am extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Am.prototype)}}class Rm extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Rm.prototype)}}function Lm(t,e){if(Array.isArray(t)){let n=[];for(let r=0;r<e;r++)n=n.concat(t);return n}{const n=new Array(e);return n.fill(t),n}}function Dm(t,e){if(!t)throw new Rm(e)}function Fm(t,e){let n=0;for(const r of t)r===e&&n++;return n}function $m(t){return 1===t.length?t[0]:t}function Om(t){return Array.isArray(t)?t:[t]}function Pm(t){const e=t.replace(/(.)([A-Z][a-z0-9]+)/g,\"$1_$2\").replace(/([a-z])([A-Z])/g,\"$1_$2\").toLowerCase();return\"_\"!==e[0]?e:\"private\"+e}function zm(t){return t.length<=1||-1===t.indexOf(\"_\")?t:t.replace(/[_]+(\\w|$)/g,((t,e)=>e.toUpperCase()))}Error;let Bm={};function Um(t){if(null==t)return null;const e={};return e.className=t.getClassName(),e.config=t.getConfig(),e}function Vm(t){if(null!=t&&\"object\"==typeof t)if(Array.isArray(t))t.forEach((t=>Vm(t)));else{const e=Object.keys(t);for(const n of e){const e=t[n];null!=e&&\"object\"==typeof e&&(Array.isArray(e)||\"ndarray\"!==e.type||\"number\"!=typeof e.value?Vm(e):t[n]=e.value)}}}function Wm(t,e={},n={},r=\"object\",s=!1){if(\"string\"==typeof t){const s=t;let i;if(s in n)i=n[s];else if(s in Bm)i=Bm[s];else if(i=e[s],null==i)throw new Nm(`Unknown ${r}: ${t}. This may be due to one of the following reasons:\\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return i}{const i=t;if(null==i.className||null==i.config)throw new Nm(`${r}: Improper config format: ${JSON.stringify(i)}.\\n'className' and 'config' must set.`);const a=i.className;let o,l;if(a in n?[o,l]=n[a]:a in Bm?[o,l]=Bm.className:a in e&&([o,l]=e[a]),null==o)throw new Nm(`Unknown ${r}: ${a}. This may be due to one of the following reasons:\\n1. The ${r} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\\n2. The custom ${r} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=l){const t={};for(const e of Object.keys(Bm))t[e]=Bm[e];for(const e of Object.keys(n))t[e]=n[e];i.config.customObjects=t;const e=Object.assign({},Bm);for(const t of Object.keys(n))Bm[t]=n[t];Vm(i.config);const r=l(o,i.config,n,s);return Bm=Object.assign({},e),r}{const t=Object.assign({},Bm);for(const t of Object.keys(n))Bm[t]=n[t];const e=new o(i.config);return Bm=Object.assign({},t),e}}}function Gm(t,e){return-1*function(t,e){return t<e?-1:t>e?1:0}(t,e)}function Hm(t){if(null==t)return t;const e=[];for(const n of t)-1===e.indexOf(n)&&e.push(n);return e}function jm(t){if(null==t)throw new Nm(`Invalid value in obj: ${JSON.stringify(t)}`);for(const e in t)if(t.hasOwnProperty(e))return!1;return!0}function qm(t,e,n){if(null!=n&&t.indexOf(n)<0)throw new Nm(`${n} is not a valid ${e}.  Valid values are ${t} or null/undefined.`)}function Xm(t,e,n=0,r=1/0){return Dm(n>=0),Dm(r>=n),Array.isArray(t)&&t.length>=n&&t.length<=r&&t.every((t=>typeof t===e))}function Km(t,e){Array.isArray(t)?(nt(t.length>0,(()=>`${e} is unexpectedly an empty array.`)),t.forEach(((t,n)=>Km(t,`element ${n+1} of ${e}`)))):nt(Number.isInteger(t)&&t>0,(()=>`Expected ${e} to be a positive integer, but got ${Ym(t)}.`))}function Ym(t){return null===t?\"null\":Array.isArray(t)?\"[\"+t.map((t=>Ym(t))).join(\",\")+\"]\":\"string\"==typeof t?`\"${t}\"`:`${t}`}function Zm(t){return\"relu\"===t?\"relu\":\"linear\"===t?\"linear\":\"elu\"===t?\"elu\":null}function Jm(t,e){return Vo((()=>il(yc(sl(t,t),e,!0))))}class Qm extends bo{getConfig(){return{}}}class tg extends Qm{constructor(t){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=t.maxValue?t.maxValue:this.defaultMaxValue,this.axis=null!=t.axis?t.axis:this.defaultAxis}apply(t){return Vo((()=>{const e=Jm(t,this.axis),n=vu(e,0,this.maxValue);return sl(t,rl(n,el(Em(),e)))}))}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}tg.className=\"MaxNorm\",wo(tg);class eg extends Qm{constructor(t){super(),this.defaultAxis=0,this.axis=null!=t.axis?t.axis:this.defaultAxis}apply(t){return Vo((()=>rl(t,el(Em(),Jm(t,this.axis)))))}getConfig(){return{axis:this.axis}}}eg.className=\"UnitNorm\",wo(eg);class ng extends Qm{apply(t){return mh(t)}}ng.className=\"NonNeg\",wo(ng);class rg extends Qm{constructor(t){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=t.minValue?t.minValue:this.defaultMinValue,this.maxValue=null!=t.maxValue?t.maxValue:this.defaultMaxValue,this.rate=null!=t.rate?t.rate:this.defaultRate,this.axis=null!=t.axis?t.axis:this.defaultAxis}apply(t){return Vo((()=>{const e=Jm(t,this.axis),n=el(sl(this.rate,vu(e,this.minValue,this.maxValue)),sl(1-this.rate,e));return sl(t,rl(n,el(Em(),e)))}))}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}rg.className=\"MinMaxNorm\",wo(rg);const sg={maxNorm:\"MaxNorm\",minMaxNorm:\"MinMaxNorm\",nonNeg:\"NonNeg\",unitNorm:\"UnitNorm\"};function ig(t){return Um(t)}function ag(t,e={}){return Wm(t,vo.getMap().classNameMap,e,\"constraint\")}function og(t){return null==t?null:\"string\"==typeof t?ag({className:t in sg?sg[t]:t,config:{}}):t instanceof Qm?t:ag(t)}function lg(t){return new tg(t)}function ug(t){return new eg(t)}function cg(){return new ng}function hg(t){return new rg(t)}const dg=[\"channelsFirst\",\"channelsLast\"],pg=[\"nearest\",\"bilinear\"],fg=[\"valid\",\"same\",\"causal\"],mg=[\"max\",\"avg\"],gg=[\"sum\",\"mul\",\"concat\",\"ave\"],yg=new Map;function xg(t){qm(dg,\"DataFormat\",t)}function bg(t){qm(fg,\"PaddingMode\",t)}function vg(t){qm(mg,\"PoolMode\",t)}const wg=[];function Sg(t,e){wg.push(t);try{const t=e();return wg.pop(),t}catch(t){throw wg.pop(),t}}function Tg(t){if(!kg(t))throw new Error(\"Not a valid tensor name: '\"+t+\"'\");return(0===wg.length?\"\":wg.join(\"/\")+\"/\")+t}function _g(t){if(!kg(t))throw new Error(\"Not a valid tensor name: '\"+t+\"'\");yg.has(t)||yg.set(t,0);const e=yg.get(t);if(yg.set(t,yg.get(t)+1),e>0){const n=`${t}_${e}`;return yg.set(n,1),n}return t}const Mg=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\\._\\/]*$/);function kg(t){return!!t.match(Mg)}function Eg(t,e,n){null==e&&(e=0),null==n&&(n=t.length);let r=1;for(let s=e;s<n;++s)r*=t[s];return r}function Ig(t){if(0===t.length)return Number.NaN;let e=Number.POSITIVE_INFINITY;for(let n=0;n<t.length;n++){const r=t[n];r<e&&(e=r)}return e}function Cg(t){if(0===t.length)return Number.NaN;let e=Number.NEGATIVE_INFINITY;for(let n=0;n<t.length;n++){const r=t[n];r>e&&(e=r)}return e}function Ng(t,e){if(e<t)throw new Nm(`end (${e}) < begin (${t}) is forbidden.`);const n=[];for(let r=t;r<e;++r)n.push(r);return n}function Ag(t,e){return Sa(t,e)}function Rg(t,e=-1){const n=t.shape.slice();return e<0&&(e=n.length+e+1),n.splice(e,0,1),ru(t,n)}function Lg(t,e,n){return Vo((()=>{switch(t.rank){case 1:return Nh(t,e,n);case 2:return Ah(t,[e,0],[n,t.shape[1]]);case 3:return Rh(t,[e,0,0],[n,t.shape[1],t.shape[2]]);case 4:return Lh(t,[e,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3]]);case 5:return lu(t,[e,0,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3],t.shape[4]]);case 6:return lu(t,[e,0,0,0,0,0],[n,t.shape[1],t.shape[2],t.shape[3],t.shape[4],t.shape[5]]);default:throw new Nm(`sliceAlongFirstAxis() received an unsupported tensor rank: ${t.rank}`)}}))}function Dg(t,e,n){return Vo((()=>{switch(t.rank){case 1:return Nh(t,e,n);case 2:return Ah(t,[0,e],[t.shape[0],n]);case 3:return Rh(t,[0,0,e],[t.shape[0],t.shape[1],n]);case 4:return Lh(t,[0,0,0,e],[t.shape[0],t.shape[1],t.shape[2],n]);default:throw new Nm(`sliceAlongLastAxis() received an unsupported tensor rank: ${t.rank}`)}}))}function Fg(t,e,n,r){return Vo((()=>{switch(t.rank){case 1:return Nh(t,e,n);case 2:switch(r){case 1:return Lg(t,e,n);case 2:return Dg(t,e,n);default:throw new Nm(`The axis is not within the rank of the tensor ${r}`)}case 3:switch(r){case 1:return Lg(t,e,n);case 2:return Rh(t,[0,e,0],[t.shape[0],n,t.shape[2]]);case 3:return Dg(t,e,n);default:throw new Nm(`The axis is not within the rank of the tensor ${r}`)}case 4:switch(r){case 1:return Lg(t,e,n);case 2:return Lh(t,[0,e,0,0],[t.shape[0],n,t.shape[2],t.shape[3]]);case 3:return Lh(t,[0,0,e,0],[t.shape[0],t.shape[1],n,t.shape[3]]);case 4:return Dg(t,e,n);default:throw new Nm(`The axis is not within the rank of the tensor ${r}`)}default:throw new Nm(`sliceAlongLastAxis() received an unsupported tensor rank: ${t.rank}`)}}))}function $g(t,e=-1){let n;return e<0&&(n=t[0].rank,e=0!==n?n:0),e===t[0].rank&&(e=-1),au(t,e)}function Og(t,e){switch(t.rank){case 1:return wu([t,e]);case 2:return Su([t,e],0);case 3:return Tu([t,e],0);case 4:return _u([t,e],0);default:throw new Nm(`concatAlongFirstAxis() received an unsupported tensor rank: ${t.rank}`)}}function Pg(t,e){if(Array.isArray(e)||(e=[e]),t.rank!==e.length)throw new Nm(`The length of input n (${e.length}) does not match the number of dimensions in input x (${t.rank})`);return Yu(t,e)}function zg(t,e=0,n=1,r,s){return ch(t,e,n,r,s)}function Bg(t,e,n,r){if(t.rank<2||e.rank<2)throw new Am(`dot requires both inputs to be rank >= 2 but got x shape = ${t.shape} and y shape = ${e.shape}`);if(e.rank>=3&&t.shape.slice(-1)[0]!==e.shape.slice(-2)[0])throw new Am(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${t.shape} and  y shape = ${e.shape}`);if(2===t.rank&&2===e.rank)return Md({a:t,b:e,transposeA:!1,transposeB:!1,bias:r?Wg(t.rank,r,\"channelsLast\"):null,activation:n});{const s=t.shape.slice(),i=s.pop();t=ru(t,[-1,i]);const a=e.shape.slice(),o=a.pop(),l=a.pop(),u=[...a,o],c=Array.from({length:e.rank},((t,n)=>0===n?e.rank-2:n<=e.rank-2?n-1:n));e=ru(Ga(e,c),[l,-1]);const h=[...s,...u];return ru(Md({a:t,b:e,transposeA:!1,transposeB:!1,bias:r?Wg(t.rank,r,\"channelsLast\"):null,activation:n}),h)}}function Ug(t,e,n){return Vo((()=>(e=Array.isArray(e)?jh(e,\"int32\"):Sa(e,\"int32\"),Qu(t,e,n))))}function Vg(t){return sl(t,t)}function Wg(t,e,n){const r=e.shape;if(1!==e.rank&&e.rank!==t)throw new Nm(`Unexpected bias dimensions: ${e.rank}; expected it to be 1 or ${t}`);if(5===t){if(\"channelsFirst\"===n)return 1===r.length?ru(e,[1,r[0],1,1,1]):ru(e,[1,r[3],r[0],r[1],r[2]]);if(\"channelsLast\"===n)return 1===r.length?ru(e,[1,1,1,1,r[0]]):ru(e,[1].concat(r))}else if(4===t){if(\"channelsFirst\"===n)return 1===r.length?ru(e,[1,r[0],1,1]):ru(e,[1,r[2],r[0],r[1]]);if(\"channelsLast\"===n)return 1===r.length?ru(e,[1,1,1,r[0]]):ru(e,[1].concat(r))}else if(3===t){if(\"channelsFirst\"===n)return 1===r.length?ru(e,[1,r[0],1]):ru(e,[1,r[1],r[0]]);if(\"channelsLast\"===n)return 1===r.length?ru(e,[1,1,r[0]]):ru(e,[1].concat(r))}else if(t<3)return e;throw new Nm(`Unsupported input rank by biasAdd: ${e.rank}`)}function Gg(t,e,n){return Vo((()=>(null==n&&(n=\"channelsLast\"),xg(n),el(t,Wg(t.rank,e,n)))))}function Hg(t,e,n,r){return Vo((()=>dd(t,e,n,r)))}function jg(t,e,n=!1){return n?t():e()}const qg=[\"fanIn\",\"fanOut\",\"fanAvg\"],Xg=[\"normal\",\"uniform\",\"truncatedNormal\"];class Kg extends bo{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class Yg extends Kg{apply(t,e){return $c(t,e)}}Yg.className=\"Zeros\",wo(Yg);class Zg extends Kg{apply(t,e){return Oc(t,e)}}Zg.className=\"Ones\",wo(Zg);class Jg extends Kg{constructor(t){if(super(),\"object\"!=typeof t)throw new Nm(`Expected argument of type ConstantConfig but got ${t}`);if(void 0===t.value)throw new Nm(`config must have value set but got ${t}`);this.value=t.value}apply(t,e){return Vo((()=>sl(ml(this.value),Oc(t,e))))}getConfig(){return{value:this.value}}}Jg.className=\"Constant\",wo(Jg);class Qg extends Kg{constructor(t){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=t.minval||this.DEFAULT_MINVAL,this.maxval=t.maxval||this.DEFAULT_MAXVAL,this.seed=t.seed}apply(t,e){return hh(t,this.minval,this.maxval,e)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}Qg.className=\"RandomUniform\",wo(Qg);class ty extends Kg{constructor(t){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=t.mean||this.DEFAULT_MEAN,this.stddev=t.stddev||this.DEFAULT_STDDEV,this.seed=t.seed}apply(t,e){if(\"float32\"!==(e=e||\"float32\")&&\"int32\"!==e)throw new Am(`randomNormal does not support dType ${e}.`);return zg(t,this.mean,this.stddev,e,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}ty.className=\"RandomNormal\",wo(ty);class ey extends Kg{constructor(t){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=t.mean||this.DEFAULT_MEAN,this.stddev=t.stddev||this.DEFAULT_STDDEV,this.seed=t.seed}apply(t,e){if(\"float32\"!==(e=e||\"float32\")&&\"int32\"!==e)throw new Am(`truncatedNormal does not support dType ${e}.`);return Jh(t,this.mean,this.stddev,e,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}ey.className=\"TruncatedNormal\",wo(ey);class ny extends Kg{constructor(t){super(),this.gain=null!=t.gain?t.gain:1}apply(t,e){return Vo((()=>{if(2!==t.length||t[0]!==t[1])throw new Nm(\"Identity matrix initializer can only be used for 2D square matrices.\");return sl(this.gain,Zu(t[0]))}))}getConfig(){return{gain:this.gain}}}ny.className=\"Identity\",wo(ny);class ry extends Kg{constructor(t){if(super(),t.scale<0)throw new Nm(`scale must be a positive float. Got: ${t.scale}`);var e;this.scale=null==t.scale?1:t.scale,this.mode=null==t.mode?\"fanIn\":t.mode,e=this.mode,qm(qg,\"FanMode\",e),this.distribution=null==t.distribution?\"normal\":t.distribution,function(t){qm(Xg,\"Distribution\",t)}(this.distribution),this.seed=t.seed}apply(t,e){const n=function(t,e=\"channelsLast\"){let n,r;if(xg(e),2===t.length)n=t[0],r=t[1];else if(-1!==[3,4,5].indexOf(t.length)){if(\"channelsFirst\"===e){const e=Eg(t,2);n=t[1]*e,r=t[0]*e}else if(\"channelsLast\"===e){const e=Eg(t,0,t.length-2);n=t[t.length-2]*e,r=t[t.length-1]*e}}else{const e=Eg(t);n=Math.sqrt(e),r=Math.sqrt(e)}return[n,r]}(t),r=n[0],s=n[1];let i=this.scale;if(\"fanIn\"===this.mode?i/=Math.max(1,r):\"fanOut\"===this.mode?i/=Math.max(1,s):i/=Math.max(1,(r+s)/2),\"normal\"===this.distribution){const n=Math.sqrt(i);if(\"float32\"!==(e=e||\"float32\")&&\"int32\"!==e)throw new Am(`${this.getClassName()} does not support dType ${e}.`);return Jh(t,0,n,e,this.seed)}{const n=Math.sqrt(3*i);return hh(t,-n,n,e)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}ry.className=\"VarianceScaling\",wo(ry);class sy extends ry{constructor(t){super({scale:1,mode:\"fanAvg\",distribution:\"uniform\",seed:null==t?null:t.seed})}getClassName(){return ry.className}}sy.className=\"GlorotUniform\",wo(sy);class iy extends ry{constructor(t){super({scale:1,mode:\"fanAvg\",distribution:\"normal\",seed:null==t?null:t.seed})}getClassName(){return ry.className}}iy.className=\"GlorotNormal\",wo(iy);class ay extends ry{constructor(t){super({scale:2,mode:\"fanIn\",distribution:\"normal\",seed:null==t?null:t.seed})}getClassName(){return ry.className}}ay.className=\"HeNormal\",wo(ay);class oy extends ry{constructor(t){super({scale:2,mode:\"fanIn\",distribution:\"uniform\",seed:null==t?null:t.seed})}getClassName(){return ry.className}}oy.className=\"HeUniform\",wo(oy);class ly extends ry{constructor(t){super({scale:1,mode:\"fanIn\",distribution:\"normal\",seed:null==t?null:t.seed})}getClassName(){return ry.className}}ly.className=\"LeCunNormal\",wo(ly);class uy extends ry{constructor(t){super({scale:1,mode:\"fanIn\",distribution:\"uniform\",seed:null==t?null:t.seed})}getClassName(){return ry.className}}uy.className=\"LeCunNormal\",wo(uy);class cy extends Kg{constructor(t){if(super(),this.DEFAULT_GAIN=1,this.gain=null==t.gain?this.DEFAULT_GAIN:t.gain,this.seed=t.seed,null!=this.seed)throw new Am(\"Random seed is not implemented for Orthogonal Initializer yet.\")}apply(t,e){return Vo((()=>{if(t.length<2)throw new Am(\"Shape must be at least 2D.\");t[0]*t[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${t[0]*t[1]}) elements: Slowness may result.`);const e=zg(t[0]>t[1]?[t[1],t[0]]:t,0,1,\"float32\");let n=wp.gramSchmidt(e);return t[0]>t[1]&&(n=Ga(n)),sl(this.gain,n)}))}getConfig(){return{gain:this.gain,seed:this.seed}}}cy.className=\"Orthogonal\",wo(cy);const hy={constant:\"Constant\",glorotNormal:\"GlorotNormal\",glorotUniform:\"GlorotUniform\",heNormal:\"HeNormal\",heUniform:\"HeUniform\",identity:\"Identity\",leCunNormal:\"LeCunNormal\",leCunUniform:\"LeCunUniform\",ones:\"Ones\",orthogonal:\"Orthogonal\",randomNormal:\"RandomNormal\",randomUniform:\"RandomUniform\",truncatedNormal:\"TruncatedNormal\",varianceScaling:\"VarianceScaling\",zeros:\"Zeros\"};function dy(t,e={}){return Wm(t,vo.getMap().classNameMap,e,\"initializer\")}function py(t){return Um(t)}function fy(t){if(\"string\"==typeof t){const e=t in hy?hy[t]:t;if(\"GlorotNormal\"===e)return new iy;if(\"GlorotUniform\"===e)return new sy;if(\"HeNormal\"===e)return new ay;if(\"HeUniform\"===e)return new oy;if(\"LeCunNormal\"===e)return new ly;if(\"LeCunUniform\"===e)return new uy;{const t={};return t.className=e,t.config={},dy(t)}}return t instanceof Kg?t:dy(t)}function my(){return new Yg}function gy(){return new Zg}function yy(t){return new Jg(t)}function xy(t){return new Qg(t)}function by(t){return new ty(t)}function vy(t){return new ey(t)}function wy(t){return new ny(t)}function Sy(t){return new ry(t)}function Ty(t){return new sy(t)}function _y(t){return new iy(t)}function My(t){return new ay(t)}function ky(t){return new oy(t)}function Ey(t){return new ly(t)}function Iy(t){return new uy(t)}function Cy(t){return new cy(t)}let Ny=0;function Ay(){return Ny++}const Ry={};function Ly(t=\"\"){return t in Ry||(Ry[t]=0),Ry[t]+=1,t+Ry[t].toString()}function Dy(t){return Array.isArray(t)&&Array.isArray(t[0])}function Fy(t){return 0===t.length?[]:Array.isArray(t[0])?t:[t]}function $y(t){let e;if(Array.isArray(t)){if(1!==t.length)throw new Nm(`Expected Tensor length to be 1; got ${t.length}`);e=t[0]}else e=t;return e}function Oy(t){if(Array.isArray(t)&&Array.isArray(t[0])){if(1===t.length)return(t=t)[0];throw new Nm(`Expected exactly 1 Shape; got ${t.length}`)}return t}function Py(t){let e=0;for(const n of t)0===n.shape.length?e+=1:e+=n.shape.reduce(((t,e)=>t*e));return e}class zy{constructor(t,e=\"float32\",n=\"Variable\",r=!0,s=null){this.dtype=null==e?\"float32\":e,this.shape=t.shape,this.id=Ay(),n=null==n?\"Variable\":n,this.originalName=Tg(n),this.name=_g(this.originalName),this.trainable_=r,this.constraint=s,this.val=nd(t,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(t){return this.assertNotDisposed(),function(t,e){if(t.shape.toString()!==e.shape.toString())throw new Error(\"Shape mismatch: \"+JSON.stringify(t.shape)+\" vs. \"+JSON.stringify(e.shape))}(this.val,t),this.val.id!==t.id&&(this.val.assign(t),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(t){this.trainable_=t,this.val.trainable=t}}function By(t){return t.map((t=>t.read()))}function Uy(t){t.forEach((t=>{t[0].write(t[1])}))}class Vy{constructor(t){this.dtype=t.dtype,this.shape=t.shape,null!=t.shape?this.ndim=t.shape.length:this.ndim=t.ndim,this.maxNDim=t.maxNDim,this.minNDim=t.minNDim,this.axes=t.axes||{}}}class Wy{constructor(t,e,n,r,s,i,a){this.dtype=t,this.shape=e,this.sourceLayer=n,this.inputs=r,this.callArgs=s,this.outputTensorIndex=a,this.id=Ay(),null!=i&&(this.originalName=Tg(i),this.name=_g(this.originalName)),this.rank=e.length}}let Gy=0;class Hy{constructor(t,e){this.callArgs=e,this.id=Gy++,this.outboundLayer=t.outboundLayer,this.inboundLayers=t.inboundLayers,this.nodeIndices=t.nodeIndices,this.tensorIndices=t.tensorIndices,this.inputTensors=t.inputTensors,this.outputTensors=t.outputTensors,this.inputMasks=t.inputMasks,this.outputMasks=t.outputMasks,this.inputShapes=t.inputShapes,this.outputShapes=t.outputShapes;for(const e of t.inboundLayers)null!=e&&e.outboundNodes.push(this);t.outboundLayer.inboundNodes.push(this)}getConfig(){const t=[];for(const e of this.inboundLayers)null!=e?t.push(e.name):t.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:t,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let jy=0;class qy extends bo{constructor(t={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=jy++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let e=t.name;if(!e){const t=this.getClassName();e=Pm(t)+\"_\"+Ly(t)}if(this.name=e,this.trainable_=null==t.trainable||t.trainable,null!=t.inputShape||null!=t.batchInputShape){let e;if(null!=t.batchInputShape)e=t.batchInputShape;else if(null!=t.inputShape){let n=null;null!=t.batchSize&&(n=t.batchSize),e=[n].concat(t.inputShape)}this.batchInputShape=e;let n=t.dtype;null==n&&(n=t.inputDType),null==n&&(n=\"float32\"),this.dtype=n}null!=t.weights?this.initialWeights=t.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(t,e){return t.name+\"_ib-\"+e.toString()}getNodeAtIndex(t,e){if(0===this.inboundNodes.length)throw new Cm(`The layer has never been called and thus has no defined ${e}.`);if(this.inboundNodes.length<=t)throw new Nm(`Asked to get ${e} at node ${t}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[t]}getInputAt(t){return $m(this.getNodeAtIndex(t,\"input\").inputTensors)}getOutputAt(t){return $m(this.getNodeAtIndex(t,\"output\").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new Im(`Layer ${this.name} has multiple inbound nodes, hence the notion of \"layer input\" is ill-defined. Use \\`getInputAt(nodeIndex)\\` instead.`);if(0===this.inboundNodes.length)throw new Im(`Layer ${this.name} is not connected, no input to return.`);return $m(this.getNodeAtIndex(0,\"input\").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new Im(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new Im(`Layer ${this.name} has multiple inbound nodes, hence the notion of \"layer output\" is ill-defined. Use \\`getOutputAt(nodeIndex)\\` instead.`);return $m(this.getNodeAtIndex(0,\"output\").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map((t=>t()))}get updates(){return this._updates}get built(){return this._built}set built(t){this._built=t}get trainable(){return this.trainable_}set trainable(t){this._trainableWeights.forEach((e=>e.trainable=t)),this.trainable_=t}get trainableWeights(){return this.trainable_?this._trainableWeights.filter((t=>t.trainable)):[]}set trainableWeights(t){this._trainableWeights=t}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter((t=>!t.trainable)).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(t){this._nonTrainableWeights=t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error(\"Cannot call the resetStates() method of a non-stateful Layer object.\")}assertInputCompatibility(t){if(t=Om(t),null==this.inputSpec||0===this.inputSpec.length)return;const e=Om(this.inputSpec);if(t.length!==e.length)throw new Nm(`Layer ${this.name} expects ${e.length} inputs, but it received ${t.length} input tensors. Input received: ${t}`);for(let n=0;n<t.length;n++){const r=t[n],s=e[n];if(null==s)continue;const i=r.rank;if(null!=s.ndim&&i!==s.ndim)throw new Nm(`Input ${n} is incompatible with layer ${this.name}: expected ndim=${s.ndim}, found ndim=${i}`);if(null!=s.maxNDim&&i>s.maxNDim)throw new Nm(`Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${s.maxNDim}, found ndim=${i}`);if(null!=s.minNDim&&i<s.minNDim)throw new Nm(`Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${s.minNDim}, found ndim=${i}.`);if(null!=s.dtype&&r.dtype!==s.dtype)throw new Nm(`Input ${n} is incompatible with layer ${this.name} : expected dtype=${s.dtype}, found dtype=${r.dtype}.`);if(s.axes){const t=r.shape;for(const e in s.axes){const r=Number(e),i=s.axes[e],a=r>=0?t[r]:t[t.length+r];if(null!=i&&-1===[i,null].indexOf(a))throw new Nm(`Input ${n} is incompatible with layer ${this.name}: expected axis ${r} of input shape to have value ${i} but got shape ${t}.`)}}if(null!=s.shape)for(let t=0;t<s.shape.length;++t){const e=s.shape[t],i=r.shape[t];if(null!=e&&null!=i&&e!==i)throw new Nm(`Input ${n} is incompatible with layer ${this.name}: expected shape=${s.shape}, found shape=${r.shape}.`)}}}call(t,e){return t}invokeCallHook(t,e){null!=this._callHook&&this._callHook(t,e)}setCallHook(t){this._callHook=t}clearCallHook(){this._callHook=null}apply(t,e){e=e||{},this.assertNotDisposed();const n=Om(t);let r=!0;for(const t of n)if(!(t instanceof Wy)){r=!1;break}let s=!0;for(const t of n)if(t instanceof Wy){s=!1;break}if(r===s)throw new Nm(\"Arguments to apply() must be all SymbolicTensors or all Tensors\");return Sg(this.name,(()=>{if(!this.built){this.assertInputCompatibility(t);const e=[];for(const n of Om(t))e.push(n.shape);this.build($m(e)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&s&&(this._refCount=1)}if(this.assertInputCompatibility(t),s){let r=this.call(t,e);const s=Om(r),i=[];for(let t of s)-1!==n.indexOf(t)&&(t=t.clone()),i.push(t);if(r=$m(i),null!=this.activityRegularizer)throw new Am(\"Layer invocation in the presence of activity regularizer(s) is not supported yet.\");return r}{const n=function(t){t=Om(t);const e=[];for(const n of t)e.push(n.shape);return $m(e)}(t),r=this.computeOutputShape(n);let s;const i=\"float32\";if(this.warnOnIncompatibleInputShape(Array.isArray(t)?n[0]:n),s=null!=r&&r.length>0&&Array.isArray(r[0])?r.map(((n,r)=>new Wy(i,n,this,Om(t),e,this.name,r))):new Wy(i,r,this,Om(t),e,this.name),this.addInboundNode(t,s,null,null,n,r,e),this._refCount++,null!=this.activityRegularizer)throw new Am(\"Layer invocation in the presence of activity regularizer(s) is not supported yet.\");return s}}))}warnOnIncompatibleInputShape(t){if(null!=this.batchInputShape)if(t.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(t)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let e=!1;this.batchInputShape.forEach(((n,r)=>{null!=n&&null!=t[r]&&t[r]!==n&&(e=!0)})),e&&console.warn(`The shape of the input tensor (${JSON.stringify(t)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new Im(`The layer ${this.name} has never been called and thus has no defined output shape.`);const t=[];for(const e of this.inboundNodes){const n=JSON.stringify(e.outputShapes);-1===t.indexOf(n)&&t.push(n)}if(1===t.length){const t=this.inboundNodes[0].outputShapes;return Array.isArray(t)&&Array.isArray(t[0])&&1===t.length?t[0]:t}throw new Im(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of \"output shape\" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new Cm(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return Py(this.weights)}build(t){this.built=!0}getWeights(t=!1){return By(t?this.trainableWeights:this.weights)}setWeights(t){Vo((()=>{const e=this.weights;if(e.length!==t.length)throw new Nm(`You called setWeights(weights) on layer \"${this.name}\" with a weight list of length ${t.length}, but the layer was expecting ${e.length} weights. Provided weights: ${t}...`);if(0===e.length)return;const n=[],r=By(e);for(let s=0;s<r.length;++s){const i=r[s],a=e[s],o=t[s];if(!lt(i.shape,o.shape))throw new Nm(`Layer weight shape ${i.shape} not compatible with provided weight shape ${o.shape}`);n.push([a,o])}Uy(n)}))}addWeight(t,e,n,r,s,i,a){if(-1!==this._addedWeightNames.indexOf(t))throw new Nm(`Duplicate weight name ${t} for layer ${this.name}`);this._addedWeightNames.push(t),null==n&&(n=\"float32\"),this.fastWeightInitDuringBuild&&(r=fy(\"zeros\"));const o=r.apply(e,n),l=new zy(o,n,t,i,a);return o.dispose(),null!=s&&this.addLoss((()=>s.apply(l.read()))),null==i&&(i=!0),i?this._trainableWeights.push(l):this._nonTrainableWeights.push(l),l}setFastWeightInitDuringBuild(t){this.fastWeightInitDuringBuild=t}addLoss(t){null==t||Array.isArray(t)&&0===t.length||(t=Om(t),void 0!==this._losses&&null!==this._losses&&this.losses.push(...t))}computeOutputShape(t){return t}computeMask(t,e){if(!this.supportsMasking){if(null!=e){if(!Array.isArray(e))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);e.forEach((t=>{if(null!=t)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)}))}return null}return e}addInboundNode(t,e,n,r,s,i,a=null){const o=Om(t);e=Om(e),n=Om(n),r=Om(r),s=Fy(s),i=Fy(i);const l=[],u=[],c=[];for(const t of o)l.push(t.sourceLayer),u.push(t.nodeIndex),c.push(t.tensorIndex);new Hy({outboundLayer:this,inboundLayers:l,nodeIndices:u,tensorIndices:c,inputTensors:o,outputTensors:e,inputMasks:n,outputMasks:r,inputShapes:s,outputShapes:i},a);for(let t=0;t<e.length;t++)e[t].sourceLayer=this,e[t].nodeIndex=this.inboundNodes.length-1,e[t].tensorIndex=t}getConfig(){const t={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(t.batchInputShape=this.batchInputShape),null!=this.dtype&&(t.dtype=this.dtype),t}disposeWeights(){return this.weights.forEach((t=>t.dispose())),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let t=0;return 0==--this._refCount&&(t=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:t}}}function Xy(t,e,n){if((null==e||null!=n&&n>0)&&(e=t.sourceLayer,n=t.nodeIndex),0===e.inboundNodes.length)return[t];{const t=e.inboundNodes[n];if(0===t.inboundLayers.length)return t.inputTensors;{const e=[];for(let n=0;n<t.inboundLayers.length;n++){const r=Xy(t.inputTensors[n],t.inboundLayers[n],t.nodeIndices[n]);for(const t of r)-1===e.indexOf(t)&&e.push(t)}return e}}}class Ky extends qy{constructor(t){if(super({dtype:t.dtype,name:null!=t.name?t.name:Ly(\"input\").toString()}),null==t.batchSize&&(t.batchSize=null),null==t.sparse&&(t.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=t.sparse,null!=t.inputShape&&null!=t.batchInputShape)throw new Nm(\"Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.\");let e=t.batchInputShape;if(null==e){if(null==t.inputShape)throw new Nm(\"An InputLayer should be passed either a `batchInputShape` or an `inputShape`.\");e=[t.batchSize].concat(t.inputShape)}else if(null!=t.batchSize)throw new Nm(\"Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.\");const n=t.dtype||\"float32\";this.batchInputShape=e,this.dtype=n,this.inputSpec=[{shape:e}];const r=new Wy(this.dtype,this.batchInputShape,this,[],{},this.name);r.nodeIndex=0,r.tensorIndex=0,new Hy({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[r],outputTensors:[r],inputMasks:[null],outputMasks:[null],inputShapes:[e],outputShapes:[e]})}apply(t,e){throw new Nm(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}function Yy(t){if(null==t.batchShape&&null==t.shape)throw new Error(\"Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.\");if(null!=t.batchShape&&null!=t.shape)throw new Nm(\"Please provide either a `shape` or `batchShape` argument to Input, but not both.\");let e=t.batchShape;null!=t.shape&&null==e&&(e=[null].concat(t.shape));let n=t.dtype;return null==n&&(n=\"float32\"),new Ky({batchInputShape:e,name:t.name,dtype:n,sparse:t.sparse}).inboundNodes[0].outputTensors[0]}async function Zy(t){if(null==t)return;const e=[],n=[],r=[];for(const s in t){const i=t[s];if(\"number\"!=typeof i){const t=i;e.push(t.data()),n.push(s),r.push(t)}}if(e.length>0){const s=await Promise.all(e);for(let e=0;e<s.length;++e)t[n[e]]=s[e][0];Wo(r)}}function Jy(t){if(null!=t)for(const e in t){const n=t[e];\"number\"!=typeof n&&n.dispose()}}var Qy;Ky.className=\"InputLayer\",wo(Ky),function(t){t[t.SILENT=0]=\"SILENT\",t[t.VERBOSE=1]=\"VERBOSE\"}(Qy||(Qy={}));class tx{constructor(){this.validationData=null}setParams(t){this.params=t}async onEpochBegin(t,e){}async onEpochEnd(t,e){}async onBatchBegin(t,e){}async onBatchEnd(t,e){}async onTrainBegin(t){}async onTrainEnd(t){}setModel(t){}}class ex{constructor(t,e=10){null==t&&(t=[]),this.callbacks=t,this.queueLength=e}append(t){this.callbacks.push(t)}setParams(t){for(const e of this.callbacks)e.setParams(t)}setModel(t){for(const e of this.callbacks)e.setModel(t)}async onEpochBegin(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onEpochBegin(t,e)}async onEpochEnd(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onEpochEnd(t,e)}async onBatchBegin(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onBatchBegin(t,e)}async onBatchEnd(t,e){null==e&&(e={});for(const n of this.callbacks)await n.onBatchEnd(t,e)}async onTrainBegin(t){null==t&&(t={});for(const e of this.callbacks)await e.onTrainBegin(t)}async onTrainEnd(t){null==t&&(t={});for(const e of this.callbacks)await e.onTrainEnd(t)}}class nx extends tx{constructor(){super()}async onEpochBegin(t){this.seen=0,this.totals={}}async onBatchEnd(t,e){null==e&&(e={});const n=null==e.size?0:e.size;this.seen+=n;for(const t in e){const r=e[t];if(\"number\"==typeof r)this.totals.hasOwnProperty(t)||(this.totals[t]=0),this.totals[t]=this.totals[t]+r*n;else{let e;t in this.totals?e=this.totals[t]:this.totals[t]=0;const s=Vo((()=>el(this.totals[t],sl(r,n))));this.totals[t]=s,null!=e&&e.dispose()}}}async onEpochEnd(t,e){if(null!=e)for(const t of this.params.metrics)null!=this.totals[t]&&(\"number\"==typeof this.totals[t]?e[t]=this.totals[t]/this.seen:Vo((()=>{const n=sl(rl(1,this.seen),this.totals[t]);e[t]=n,this.totals[t].dispose(),Go(e[t])})))}}class rx extends tx{async onTrainBegin(t){this.epoch=[],this.history={}}async onEpochEnd(t,e){null==e&&(e={}),this.epoch.push(t);for(const t in e)null==this.history[t]&&(this.history[t]=[]),this.history[t].push(e[t])}async syncData(){const t=[],e=[],n=[];for(const r in this.history){const s=this.history[r];for(let i=0;i<s.length;++i)if(\"number\"!=typeof s[i]){const a=s[i];t.push(a.data()),e.push(r),n.push(i)}}const r=await Promise.all(t);for(let t=0;t<r.length;++t)this.history[e[t]][n[t]].dispose(),this.history[e[t]][n[t]]=r[t][0]}}class sx extends tx{constructor(t,e){if(super(),this.currentEpoch=0,this.yieldEvery=e||\"auto\",\"auto\"===this.yieldEvery&&(this.yieldEvery=125),\"never\"===this.yieldEvery&&null!=t.onYield)throw new Error(\"yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback\");It(this.yieldEvery)&&(this.maybeWait=function(t,e){let n,r=Ns();return(...s)=>{const i=Ns();return i-r<e||(r=i,n=t(...s)),n}}(this.maybeWait.bind(this),this.yieldEvery)),this.trainBegin=t.onTrainBegin,this.trainEnd=t.onTrainEnd,this.epochBegin=t.onEpochBegin,this.epochEnd=t.onEpochEnd,this.batchBegin=t.onBatchBegin,this.batchEnd=t.onBatchEnd,this.yield=t.onYield}async maybeWait(t,e,n){const r=[];null!=this.yield&&(await Zy(n),r.push(this.yield(t,e,n))),r.push(Ip()),await Promise.all(r)}async onEpochBegin(t,e){this.currentEpoch=t,null!=this.epochBegin&&(await Zy(e),await this.epochBegin(t,e))}async onEpochEnd(t,e){const n=[];null!=this.epochEnd&&(await Zy(e),n.push(this.epochEnd(t,e))),\"epoch\"===this.yieldEvery&&n.push(Ip()),await Promise.all(n)}async onBatchBegin(t,e){null!=this.batchBegin&&(await Zy(e),await this.batchBegin(t,e))}async onBatchEnd(t,e){const n=[];null!=this.batchEnd&&(await Zy(e),n.push(this.batchEnd(t,e))),\"batch\"===this.yieldEvery?n.push(Ip()):It(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,t,e)),await Promise.all(n)}async onTrainBegin(t){null!=this.trainBegin&&(await Zy(t),await this.trainBegin(t))}async onTrainEnd(t){null!=this.trainEnd&&(await Zy(t),await this.trainEnd(t))}}function ix(t,e){return null==t&&(t={}),t instanceof tx?[t]:Array.isArray(t)&&t[0]instanceof tx?t:Om(t).map((t=>new sx(t,e)))}class ax{constructor(){}static registerCallbackConstructor(t,e){nt(t>=0&&Number.isInteger(t),(()=>`Verbosity level is expected to be an integer >= 0, but got ${t}`)),ax.checkForDuplicate(e),null==ax.constructors[t]&&(ax.constructors[t]=[]),ax.constructors[t].push(e)}static checkForDuplicate(t){for(const e in ax.constructors)ax.constructors[+e].forEach((e=>{if(e===t)throw new Nm(\"Duplicate callback constructor.\")}))}static clear(){ax.constructors={}}static createCallbacks(t){const e=[];for(const n in ax.constructors){const r=+n;t>=r&&e.push(...ax.constructors[r])}return e.map((t=>new t))}}function ox(t,e,n,r,s,i,a,o,l){const u=new rx,c=[new nx,...ax.createCallbacks(e)];null!=t&&c.push(...t),c.push(u);const h=new ex(c);return h.setParams({epochs:n,initialEpoch:r,samples:s,steps:i,batchSize:a,verbose:e,doValidation:o,metrics:l}),{callbackList:h,history:u}}function lx(t,e={},n=!1){return Wm(t,vo.getMap().classNameMap,e,\"layer\",n)}function ux(t,e){return Vo((()=>{\"float32\"!==t.dtype&&(t=Sa(t,\"float32\"));const n=yc(Vg(t),e,!0),r=xl(n.shape,Em()),s=il(El(n,r));return rl(t,s)}))}function cx(t,e){return Vo((()=>Fc(Vg(wl(e,t)),-1)))}function hx(t,e){return Vo((()=>Fc(Tl(wl(e,t)),-1)))}function dx(t,e){return Vo((()=>{const n=wl(t,e),r=vu(Tl(t),Em(),Number.MAX_VALUE),s=Tl(rl(n,r));return sl(100,Fc(s,-1))}))}function px(t,e,n=!1){return Vo((()=>{if(n)e=Dh(e);else{const t=yc(e,e.shape.length-1,!0);e=rl(e,t)}return e=vu(e,Em(),1-Em()),pc(yc(sl(Sa(t,\"float32\"),hc(e)),e.shape.length-1))}))}function fx(t,e,n=!1){return Vo((()=>{const r=Sa(Ju(function(t){const e=[Eg(t.shape)];return ru(t,e)}(t)),\"int32\"),s=(e=vu(e,Em(),1-Em())).shape;return px(ru(Wa(r,s[s.length-1]),s),e,n)}))}function mx(t,e){return Vo((()=>{let n;return n=vu(e,Em(),1-Em()),n=hc(rl(n,wl(1,n))),Fc(function(t,e){if(!lt(t.shape,e.shape))throw new Nm(`logits and labels must have the same shape, but got shapes ${JSON.stringify(t.shape)} and ${JSON.stringify(e.shape)}`);return Vo((()=>{const n=mh(e),r=pc(Tl(e));return el(wl(n,sl(e,t)),dc(qu(r)))}))}(t,n),-1)}))}function gx(t,e){return Vo((()=>{const n=ux(t,-1),r=ux(e,-1),s=sl(n,r);return pc(yc(s,-1))}))}ax.constructors={};const yx={meanSquaredError:cx,meanAbsoluteError:hx,meanAbsolutePercentageError:dx,meanSquaredLogarithmicError:function(t,e){return Vo((()=>{const n=vu(e,Em(),Number.MAX_VALUE),r=hc(el(1,n)),s=vu(t,Em(),Number.MAX_VALUE),i=hc(el(1,s));return Fc(Vg(wl(r,i)),-1)}))},squaredHinge:function(t,e){return Vo((()=>{const n=El(0,wl(1,sl(t,e)));return Fc(Vg(n),-1)}))},hinge:function(t,e){return Vo((()=>{const n=El(0,wl(1,sl(t,e)));return Fc(n,-1)}))},categoricalHinge:function(t,e){return Vo((()=>{const n=yc(sl(t,e),-1),r=gc(sl(wl(1,t),e),-1);return El(0,el(1,wl(r,n)))}))},logcosh:function(t,e){return Vo((()=>{const n=Math.log(2),r=wl(e,t),s=wl(el(r,fc(sl(-2,r))),n);return Fc(s,-1)}))},categoricalCrossentropy:px,sparseCategoricalCrossentropy:fx,binaryCrossentropy:mx,kullbackLeiblerDivergence:function(t,e){return Vo((()=>{const n=vu(t,Em(),1),r=vu(e,Em(),1);return yc(sl(t,hc(rl(n,r))),-1)}))},poisson:function(t,e){return Vo((()=>{const n=hc(el(Em(),e));return Fc(wl(e,sl(t,n)),-1)}))},cosineProximity:gx};function xx(t){if(\"string\"==typeof t){if(t in yx)return yx[t];let e=`Unknown loss ${t}`;throw t.toLowerCase().includes(\"softmaxcrossentropy\")&&(e=`Unknown loss ${t}. Use \"categoricalCrossentropy\" as the string name for tf.losses.softmaxCrossEntropy`),new Nm(e)}return t}function bx(t,e){return Vo((()=>{const n=sl(.5,qc(e)),r=Ag(tc(e,n),t.dtype);return Fc(Bu(t,r),-1)}))}function vx(t,e){return Vo((()=>Ag(Bu(Ol(t,-1),Ol(e,-1)),\"float32\")))}function wx(t,e){return Vo((()=>Sa(yc(Ic(Bu(t,1),Bu(e,1))),\"float32\")))}function Sx(t,e){return Vo((()=>{const n=wx(t,e),r=function(t,e){return Vo((()=>Sa(yc(Ic(Bu(t,0),Bu(e,1))),\"float32\")))}(t,e),s=el(n,r);return Sa(Uu(tc(s,0),rl(n,s),0),\"float32\")}))}function Tx(t,e){return mx(t,e)}function _x(t,e){return t.rank===e.rank&&(t=Uh(t,[t.rank-1])),(e=Ol(e,-1)).dtype!==t.dtype&&(e=Sa(e,t.dtype)),Sa(Bu(t,e),\"float32\")}const Mx=px,kx=fx,Ex={binaryAccuracy:bx,categoricalAccuracy:vx,precision:Sx,categoricalCrossentropy:Mx,sparseCategoricalCrossentropy:kx,mse:cx,MSE:cx,mae:hx,MAE:hx,mape:dx,MAPE:dx,cosine:gx};function Ix(t){if(\"string\"==typeof t&&t in Ex)return Ex[t];if(\"string\"!=typeof t&&null!=t)return t;throw new Nm(`Unknown metric ${t}`)}function Cx(t){if(Dm(null!==t,`Unknown LossOrMetricFn ${t}`),\"string\"==typeof t)return t;{let e;for(const n of Object.keys(yx))if(yx[n]===t){e=n;break}if(void 0!==e)return e;for(const n of Object.keys(Ex))if(Ex[n]===t){e=n;break}return void 0!==e?e:t.name}}function Nx(t,e,n=!1){if(null==t||\"object\"!=typeof t||Object.getPrototypeOf(t)!==Object.prototype||!Ax(t))throw new Error(\"User-defined metadata is expected to be a JSON object, but is not.\");if(n){const n=JSON.stringify(t);n.length>1048576&&console.warn(`User-defined metadata of model \"${e}\" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function Ax(t){if(null===t)return!0;if(\"object\"==typeof t){if(Object.getPrototypeOf(t)===Object.prototype){const e=Object.keys(t);for(const n of e){if(\"string\"!=typeof n)return!1;if(!Ax(t[n]))return!1}return!0}if(Array.isArray(t)){for(const e of t)if(!Ax(e))return!1;return!0}return!1}{const e=typeof t;return\"string\"===e||\"number\"===e||\"boolean\"===e}}function Rx(t,e,n=console.log){let r=\"\";for(let n=0;n<t.length;++n)n>0&&(r=r.slice(0,r.length-1)+\" \"),r+=t[n],r=r.slice(0,e[n]),r+=\" \".repeat(e[n]-r.length);n(r)}function Lx(t,e,n){let r;try{r=JSON.stringify(t.outputShape)}catch(t){r=\"multiple\"}Rx([`${t.name} (${t.getClassName()})`,r,t.countParams().toString()],e,n)}function Dx(t,e,n,r){let s;try{s=JSON.stringify(t.outputShape)}catch(t){s=\"multiple\"}const i=[];for(const e of t.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(e)))for(let t=0;t<e.inboundLayers.length;++t){const n=e.inboundLayers[t].name,r=e.nodeIndices[t],s=e.tensorIndices[t];i.push(`${n}[${r}][${s}]`)}const a=t.name,o=t.getClassName(),l=0===i.length?\"\":i[0];Rx([`${a} (${o})`,s,t.countParams().toString(),l],e,r);for(let t=1;t<i.length;++t)Rx([\"\",\"\",\"\",i[t]],e,r)}function Fx(t,e,n){return(\"inboundNodes\"===t||\"outputLayers\"===t||\"inputLayers\"===t)&&0===e&&\"string\"==typeof n}function $x(t,e){if(null===t)return null;if(\"string\"==typeof t)return zm(t);if(\"number\"==typeof t||\"boolean\"==typeof t)return t;if(t instanceof Array){const n=[],r=t.length;for(let s=0;s<r;++s){const r=t[s];Fx(e,s,r)?n.push(r):n.push($x(r,e))}return n}{const e={};for(const n of Object.keys(t)){const r=t[n];if(\"name\"===n&&\"string\"==typeof r)e[n]=r;else{const t=zm(n);e[t]=$x(r,t)}}return e}}function Ox(t,e){if(null==t)return null;if(\"string\"==typeof t)return Pm(t);if(\"number\"==typeof t||\"boolean\"==typeof t)return t;if(t instanceof Array){const n=[],r=t.length;for(let s=0;s<r;++s){const r=t[s];Fx(e,s,r)?n.push(r):n.push(Ox(r,e))}return n}{const e={};for(const n of Object.keys(t)){const r=t[n];e[Pm(n)]=\"name\"!==n&&\"className\"!==n||\"string\"!=typeof r?Ox(r,n):r}return e}}const Px=\"3.9.0\";class zx{constructor(t){if(this.id2Value={},this.id2Mask={},this.name2Id={},t instanceof zx)for(const e in t.id2Value)this.id2Value[e]=t.id2Value[e],e in t.id2Mask&&(this.id2Mask[e]=t.id2Mask[e]);else{if(null==t)return;for(const e of t)this.add(e.key,e.value)}}add(t,e,n){if(null!=this.id2Value[t.id])throw new Nm(`Duplicate key: name=${t.name}, id=${t.id}`);return this.id2Value[t.id]=function(t,e){if(null==t.dtype||t.dtype===e.dtype)return e;try{return Sa(e,t.dtype)}catch(n){throw new Nm(`The dtype of the feed (${e.dtype}) can not be cast to the dtype of the key '${t.name}' (${t.dtype}).`)}}(t,e),this.name2Id[t.name]=t.id,null!=n&&(this.id2Mask[t.id]=n),this}addFeed(t){this.add(t.key,t.value)}hasKey(t){return null!=this.id2Value[t.id]}names(){return Object.keys(this.name2Id)}getValue(t){if(t instanceof Wy){if(null==this.id2Value[t.id])throw new Nm(`Nonexistent key: ${t.name}`);return this.id2Value[t.id]}{const e=this.name2Id[t];if(null==e)throw new Nm(`Feed dict has no SymbolicTensor name: ${t}`);return this.id2Value[e]}}getMask(t){if(t instanceof Wy){if(null==this.id2Value[t.id])throw new Nm(`Nonexistent key: ${t.name}`);return this.id2Mask[t.id]}{const e=this.name2Id[t];if(null==e)throw new Nm(`Feed dict has no SymbolicTensor name: ${t}`);return this.id2Mask[e]}}disposeMasks(){null!=this.id2Mask&&Wo(this.id2Mask)}}const Bx={},Ux={};function Vx(t,e,n,r){const s=null!=n&&n.training,i=Array.isArray(t),a=i?t:[t],o=a.map((t=>t.name)),l=[],u=e.names();for(const t of o)-1!==u.indexOf(t)?l.push(e.getValue(t)):l.push(null);null!=r&&(r.maxNumTensors=-1/0,r.minNumTensors=1/0);const c=o.join(\",\")+\"|\"+e.names().join(\",\");let h,d;if(null==Bx[c]){const t=function(t,e){nt(null!=t&&t.length>0,(()=>\"Expected at least one fetch, got none\"));let n=[],r={};if(1===t.length){const s=Gx(t[0],e);n=s.sorted,r=s.recipientMap}else{const s=new Set;for(const i of t){const{sorted:t,recipientMap:a}=Gx(i,e);for(const e of t)s.has(e.name)||(n.push(e),s.add(e.name));for(const t in a)null==r[t]&&(r[t]=new Set),a[t].forEach((e=>r[t].add(e)))}}return{sorted:n,recipientCounts:Wx(r)}}(a,e);h=t.sorted,d=t.recipientCounts,Bx[c]=h,Ux[c]=d}h=Bx[c],d={},s||Object.assign(d,Ux[c]);const p=new zx(e);for(let t=0;t<h.length;++t){if(null!=r){const t=Bo().numTensors;t>r.maxNumTensors&&(r.maxNumTensors=t),t<r.minNumTensors&&(r.minNumTensors=t)}const i=h[t],a=i.sourceLayer;if(a instanceof Ky)continue;const u=[],c=[],f=[];let m=!1;for(const t of i.inputs){const n=p.getValue(t),r=p.getMask(t);u.push(n),c.push(r),null!=r&&(m=!0),s||(d[t.name]--,0!==d[t.name]||e.hasKey(t)||-1!==o.indexOf(t.name)||n.isDisposed||!0===t.sourceLayer.stateful||f.push(n))}m&&((n=n||{}).mask=c[0]);const g=Om(a.apply(u,n));let y=null;a.supportsMasking&&(y=a.computeMask(u,c));const x=Hx(i),b=Array.isArray(x)?x:[x];for(let t=0;t<b.length;++t){p.hasKey(b[t])||p.add(b[t],g[t],Array.isArray(y)?y[0]:y);const e=o.indexOf(b[t].name);-1!==e&&(l[e]=g[t])}s||Wo(f)}return p.disposeMasks(),i?l:l[0]}function Wx(t){const e={};for(const n in t)e[n]=t[n].size;return e}function Gx(t,e){const n=new Set,r=[],s={};for(const t of e.names())n.add(t);const i=[],a=[];for(i.push(t);i.length>0;){const t=i[i.length-1];if(n.has(t.name)){i.pop();continue}const e=a[a.length-1]===i.length-1;if(0===t.inputs.length||e)i.pop(),r.push(t),n.add(t.name),e&&a.pop();else{a.push(i.length-1);for(const e of t.inputs)null==s[e.name]&&(s[e.name]=new Set),s[e.name].add(t.name),n.has(e.name)||i.push(e)}}return{sorted:r,recipientMap:s}}function Hx(t){let e;if(1===t.sourceLayer.inboundNodes.length)e=t.sourceLayer.output;else{let n=null;for(let e=0;e<t.sourceLayer.inboundNodes.length;++e)for(const r of t.sourceLayer.inboundNodes[e].outputTensors)if(r.id===t.id){n=e;break}e=t.sourceLayer.getOutputAt(n)}return e}class jx extends qy{constructor(t){if(super({}),this.containerNodes=new Set,this.name=t.name,null==this.name){const t=this.getClassName().toLowerCase();this.name=Ly(t)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(t.inputs)?this.inputs=t.inputs.slice():this.inputs=[t.inputs],Array.isArray(t.outputs)?this.outputs=t.outputs.slice():this.outputs=[t.outputs],Hm(this.inputs).length!==this.inputs.length)throw new Nm(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map((t=>t.name))}`);Hm(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map((t=>t.name))}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const t of this.outputs){const e=t.sourceLayer,n=t.nodeIndex,r=t.tensorIndex;this.outputLayers.push(e),this.outputLayersNodeIndices.push(n),this.outputLayersTensorIndices.push(r)}for(const t of this.inputs){const e=t.sourceLayer,n=t.nodeIndex,r=t.tensorIndex;Dm(0===n,\"input layer has >1 nodes\"),Dm(0===r,\"input layer has >1 tensors\"),this.inputLayers.push(e),this.inputLayersNodeIndices.push(n),this.inputLayersTensorIndices.push(r)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let e=0;e<this.inputLayers.length;e++){const n=this.inputLayers[e];if(!(n instanceof Ky))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${t.inputs}. Input ${e} (0-based) originates from layer type ${n.getClassName()}.`);this.inputNames.push(n.name),this.feedInputShapes.push(n.batchInputShape),this.feedInputNames.push(n.name)}for(const t of this.outputLayers)this.outputNames.push(t.name);this.internalInputShapes=this.inputs.map((t=>t.shape)),this.internalOutputShapes=this.outputs.map((t=>t.shape));const e={},n={},r={},s={},i={},a=[],o=(t,e,n,r,s,l)=>{null!=r&&null!=s&&null!=l||(r=t.sourceLayer,s=t.nodeIndex,l=t.tensorIndex);const u=r.inboundNodes[s];if(-1!==n.indexOf(u))throw new Cm(`The tensor ${t.name} at layer \"${r.name}\" is part of a cycle.`);if(-1!==e.indexOf(u))return;this.containerNodes.add(jx.nodeKey(r,s)),r.id in i||(i[r.id]=Object.keys(i).length),-1===n.indexOf(u)&&n.push(u);const c=u.inboundLayers.length;for(let t=0;t<c;t++){const r=u.inputTensors[t],s=u.inboundLayers[t],i=u.nodeIndices[t],a=u.tensorIndices[t];o(r,e,n,s,i,a)}for(e.push(u);n.indexOf(u)>=0;)n.splice(n.indexOf(u),1);a.push(u)},l=[],u=[];for(const t of this.outputs)o(t,l,u);const c=a.slice().reverse();for(const t of c){n[t.id]=t,t.id in e||(e[t.id]=0);let i=e[t.id];const a=null==r[t.outboundLayer.id]?0:r[t.outboundLayer.id];i=Math.max(i,a),r[t.outboundLayer.id]=i,s[t.outboundLayer.id]=t.outboundLayer,e[t.id]=i;for(let r=0;r<t.inboundLayers.length;r++){const s=t.inboundLayers[r],a=t.nodeIndices[r],o=s.inboundNodes[a],l=null==e[o.id]?0:e[o.id];e[o.id]=Math.max(i+1,l),n[o.id]=o}}const h={};for(const t in e){const r=e[t];r in h||(h[r]=[]),h[r].push(n[t])}const d={};for(const t in r){const e=r[t];e in d||(d[e]=[]),d[e].push(s[t])}let p=Object.keys(d).map((t=>parseInt(t,10))).sort(Gm);this.layers=[];for(const t of p){const e=d[t];e.sort(((t,e)=>{const n=i[t.id],r=i[e.id];return n<r?-1:n>r?1:0}));for(const t of e)t instanceof jx&&this.internalContainerRefs.push(t),this.layers.push(t)}this.layersByDepth=d,p=Object.keys(h).map((t=>parseInt(t,10))).sort(Gm);const f=this.inputs.slice(),m=[];for(const t of p)for(const e of h[t]){const t=e.outboundLayer;if(null!=t){for(const n of e.inputTensors)if(-1===f.indexOf(n))throw new Cm(`Graph disconnected: cannot obtain value for tensor ${n} at layer \"${t.name}\". The following previous layers were accessed without issue: ${m}`);for(const t of e.outputTensors)f.push(t);m.push(t.name)}}this.nodesByDepth=h;const g=this.layers.map((t=>t.name));for(const t of g){const e=g.filter((e=>e===t)).length;if(1!==e)throw new Cm(`The name \"${t}\" is used ${e} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new Hy({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map((t=>null)),outputMasks:this.outputs.map((t=>null)),inputShapes:this.inputs.map((t=>t.shape)),outputShapes:this.outputs.map((t=>t.shape))}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const t={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const e of this.layers)t.numDisposedVariables+=e.dispose().numDisposedVariables;for(const e of this.internalContainerRefs)t.numDisposedVariables+=e.dispose().numDisposedVariables}return t.refCountAfterDispose=this._refCount,t}get trainable(){return this.trainable_}set trainable(t){this.layers.forEach((e=>{e._trainableWeights.forEach((e=>e.trainable=t))})),this.trainable_=t}get trainableWeights(){if(this._trainableWeights.length>0)throw new Nm(\"Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.\");if(!this.trainable)return[];let t=[];for(const e of this.layers)t=t.concat(e.trainableWeights);return t}get nonTrainableWeights(){const t=[];for(const e of this.layers)t.push(...e.nonTrainableWeights);if(!this.trainable){const e=[];for(const t of this.layers)e.push(...t.trainableWeights);return e.concat(t)}return t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(t,e=!0){const n={};let r=0;for(const t of this.layers)for(const e of t.weights){if(null!=n[e.originalName])throw new Nm(`Duplicate weight name: ${e.originalName}`);n[e.originalName]=e,r++}const s=[];for(const r in t){let i=r;if(null==n[r]){const t=r.split(\"/\");i=t.slice(0,-2).concat([t[t.length-1]]).join(\"/\")}if(null!=n[i])s.push([n[i],t[r]]);else if(e)throw new Nm(`Provided weight data has no target variable: ${r}`);delete n[i]}if(e){const t=[];for(const e in n)t.push(e);if(t.length>0)throw new Nm(`${t.length} of ${r} weights are not set: ${t}`)}Uy(s)}updatedConfig(){const t=this.getConfig(),e={};return e.className=this.getClassName(),e.config=t,e.kerasVersion=`tfjs-layers ${Px}`,e.backend=\"TensorFlow.js\",e}toJSON(t,e=!0){const n=Ox(this.updatedConfig());return e?JSON.stringify(n):n}call(t,e){return Vo((()=>{t=Om(t);const n=new zx;for(let e=0;e<this.inputs.length;++e)n.add(this.inputs[e],t[e]);return Vx(this.outputs,n,e)}))}computeMask(t,e){return Vo((()=>{let n;return t=Om(t),n=null==e?Lm(null,t.length):Om(e),this.runInternalGraph(t,n)[1]}))}computeOutputShape(t){const e=Fy(t);if(e.length!==this.inputLayers.length)throw new Nm(`Invalid inputShape argument ${t}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let t=0;t<e.length;t++){const r=this.inputLayers[t],s=e[t];n[r.name+\"_0_0\"]=s}const r=Object.keys(this.nodesByDepth).map((t=>parseInt(t,10))).sort(Gm);if(r.length>1)for(const t of r){const e=this.nodesByDepth[t];for(const t of e){const e=t.outboundLayer;if(-1!==this.inputLayers.map((t=>t.id)).indexOf(e.id))continue;const r=[];for(let e=0;e<t.inboundLayers.length;e++){const s=t.inboundLayers[e],i=t.nodeIndices[e],a=t.tensorIndices[e],o=n[`${s.name}_${i}_${a}`];r.push(o)}const s=Fy(e.computeOutputShape($m(r))),i=e.inboundNodes.indexOf(t);for(let t=0;t<s.length;t++)n[`${e.name}_${i}_${t}`]=s[t]}}const s=[],i=[];for(let t=0;t<this.outputLayers.length;t++){const e=this.outputLayers[t],n=this.outputLayersNodeIndices[t],r=this.outputLayersTensorIndices[t],s=`${e.name}_${n}_${r}`;i.push(s)}for(let t=0;t<i.length;t++){const e=i[t];Dm(e in n),s.push(n[e])}return $m(s)}runInternalGraph(t,e){null==e&&(e=Lm(null,t.length));const n={};for(let r=0;r<this.inputs.length;++r){const s=this.inputs[r],i=t[r],a=e[r];n[s.id]=[i,a]}const r=Object.keys(this.nodesByDepth).map((t=>parseInt(t,10))).sort(Gm);for(const t of r){const e=this.nodesByDepth[t];for(const t of e){const e=t.outboundLayer,r=t.inputTensors,s=t.outputTensors,i=new Array;for(const t of r)t.id in n&&i.push(n[t.id]);if(i.length===r.length){let r,a,o,l,u={};if(null!=t.callArgs&&(u=t.callArgs),1===i.length){const[t,n]=i[0];null==u.mask&&(u.mask=n),o=Om(e.call(t,u)),l=Om(e.computeMask(t,n)),r=[t],a=[n]}else r=i.map((t=>t[0])),a=i.map((t=>t[1])),null==u.mask&&(u.mask=a),o=Om(e.call(r,u)),l=Om(e.computeMask(r,a));if(e.activityRegularizer)throw new Am(\"LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.\");for(let t=0;t<s.length;++t){const e=s[t],r=o[t],i=l[t];n[e.id]=[r,i]}}}}const s=[],i=[],a=[];for(const t of this.outputs){Dm(t.id in n,`Could not compute output ${t.name} : ${t.id}`);const[e,r]=n[t.id];a.push(e.shape),s.push(e),i.push(r)}return[s,i,a]}buildNodeConversionMap(t){const e={};let n;for(const t of this.layers){n=t instanceof jx?1:0;for(let r=0;r<t.inboundNodes.length;r++){const s=jx.nodeKey(t,r);this.containerNodes.has(s)&&(e[s]=n,n+=1)}}return e}getLayer(t,e){if(null!=e){if(this.layers.length<=e)throw new Nm(`Was asked to retrieve layer at index ${e}, but model only has ${this.layers.length} layer(s).`);return this.layers[e]}if(null==t)throw new Nm(\"Provide either a layer name or layer index\");for(const e of this.layers)if(e.name===t)return e;throw new Nm(`No such layer: ${t}`)}calculateLosses(){return Vo((()=>{const t=[];for(const e of this.layers)for(let n=0;n<e.inboundNodes.length;++n){const r=jx.nodeKey(e,n);this.containerNodes.has(r)&&t.push(...e.calculateLosses())}return t}))}getConfig(){const t={name:this.name},e=this.buildNodeConversionMap(this.layers),n=[];for(const t of this.layers){const r=t.getClassName(),s=t.getConfig(),i=[];for(let n=0;n<t.inboundNodes.length;n++){const r=t.inboundNodes[n],s=jx.nodeKey(t,n);let a={};if(this.containerNodes.has(s)){if(r.callArgs)try{JSON.stringify(r.callArgs),a=r.callArgs}catch(e){console.warn(`Layer ${t.name} was passed non-serializable keyword arguments: ${r.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),a={}}if(r.inboundLayers.length>0){const t=[];for(let n=0;n<r.inboundLayers.length;n++){const s=r.inboundLayers[n],i=r.nodeIndices[n],o=r.tensorIndices[n];let l=e[jx.nodeKey(s,i)];null==l&&(l=0),t.push([s.name,l,o,a])}i.push(t)}}}const a={};a.name=t.name,a.className=r,a.config=s,a.inboundNodes=i,n.push(a)}t.layers=n;const r=[];for(let t=0;t<this.inputLayers.length;t++){const n=this.inputLayers[t],s=this.inputLayersNodeIndices[t],i=jx.nodeKey(n,s);if(!this.containerNodes.has(i))continue;let a=e[i];null==a&&(a=0);const o=this.inputLayersTensorIndices[t];r.push([n.name,a,o])}t.inputLayers=r;const s=[];for(let t=0;t<this.outputLayers.length;t++){const n=this.outputLayers[t],r=this.outputLayersNodeIndices[t],i=jx.nodeKey(n,r);if(!this.containerNodes.has(i))continue;let a=e[i];null==a&&(a=0);const o=this.outputLayersTensorIndices[t];s.push([n.name,a,o])}return t.outputLayers=s,t}static fromConfig(t,e,n={},r=!1){const s={},i={};function a(t,e){t.name in i?i[t.name].push(e):i[t.name]=[e]}function o(t,e){const n=[];let r;for(const i of e){const o=i[0],l=i[1],u=i[2];if(r=null==i[3]?{}:i[3],!(o in s))return void a(t,e);const c=s[o];if(c.inboundNodes.length<=l)return void a(t,e);const h=c.inboundNodes[l];n.push(h.outputTensors[u])}n.length>0&&t.apply($m(n),r)}function l(t){const n=t.name,i=lx(t,null!=e.customObjects?e.customObjects:{});i.setFastWeightInitDuringBuild(r),s[n]=i,t.inboundNodes.forEach((t=>{if(!(t instanceof Array))throw new Nm(`Corrupted configuration, expected array for nodeData: ${t}`);a(i,t)}))}const u=e.name,c=e.layers;for(const t of c)l(t);for(;!jm(i);)for(const t of c){const e=s[t.name];if(e.name in i){const t=i[e.name];delete i[e.name];for(const n of t)o(e,n)}}const h=[],d=[],p=e.inputLayers;for(const t of p){const e=t[0],n=t[1],r=t[2];Dm(e in s);const i=s[e].inboundNodes[n].outputTensors;h.push(i[r])}const f=e.outputLayers;for(const t of f){const e=t[0],n=t[1],r=t[2];Dm(e in s);const i=s[e].inboundNodes[n].outputTensors;d.push(i[r])}return new t({inputs:h,outputs:d,name:u})}get stateful(){if(this._stateful)throw new Nm(\"Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.\");for(const t of this.layers)if(t.stateful)return!0;return!1}resetStates(){Vo((()=>{this.layers.forEach((t=>{t.stateful&&t.resetStates()}))}))}}function qx(t,e){return function(t,e,n){const r=e.length;if(null==t||Array.isArray(t)&&0===t.length)return e.map((t=>null));if(1===r)return Array.isArray(t)&&1===t.length?t:\"object\"==typeof t&&e[0]in t?[t[e[0]]]:[t];if(Array.isArray(t)){if(t.length!==r)throw new Error(`Provided ${n} is an array of ${t.length} element(s), but the model has ${r} outputs. Make sure a set of weights is provided for each model output.`);return t}if(\"object\"==typeof t&&Object.keys(t).length>0&&\"object\"==typeof t[Object.keys(t)[0]]){const n=[];return e.forEach((e=>{e in t?n.push(t[e]):n.push(null)})),n}throw new Error(`The model has multiple (${r}) outputs, so ${n} must be either an array with ${r} elements or an object with ${e} keys. Provided ${n} not understood: ${JSON.stringify(t)}`)}(t,e,\"classWeight\")}async function Xx(t,e,n,r){if(null!=e||null!=r)throw new Error(\"Support sampleWeight is not implemented yet\");if(null!=n){const e=Vo((()=>{if(1===t.shape.length)return Ta(t);if(2===t.shape.length){if(t.shape[1]>1)return Ol(t,1);if(1===t.shape[1])return ru(t,[t.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${t.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${t.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)})),r=Array.from(await e.data());Wo(e);const s=[];return r.forEach((t=>{if(null==n[t])throw new Error(`classWeight must contain all classes in the training data. The class ${t} exists in the data but not in classWeight`);s.push(n[t])})),jh(s,\"float32\")}return null}function Kx(t,e){return sl(t,e)}function Yx(t,e){let n,r;const s=e;n=s.xs,r=s.ys,nt(null!=n&&null!=r,(()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \\`{xs: xVal, ys: yVal}\\`, where the two values may be \\`tf.Tensor\\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${e}`));const i=Zx(\"input\",t.inputNames,n),a=Zx(\"output\",t.outputNames,r),o=i[0].shape[0];nt(i.length===t.inputs.length,(()=>`LayersModel has ${t.inputs.length} inputs, but the dataset provides ${i.length} inputs.  (Expected input keys: ${JSON.stringify(t.inputNames)})`)),nt(a.length===t.outputs.length,(()=>`LayersModel has ${t.outputs.length} outputs, but the dataset provides ${a.length} outputs.  (Expected output keys: ${JSON.stringify(t.outputNames)})`));for(let e=0;e<i.length;e++)nt(i[e].shape[0]===o,(()=>`Batch size mismatch: input ${t.inputNames[e]} has ${i[e].shape[0]}; expected  ${o} based on input ${t.inputNames[0]}.`));for(let e=0;e<a.length;e++)nt(a[e].shape[0]===o,(()=>`Batch size mismatch: output ${t.outputNames[e]} has ${a[e].shape[0]}; expected  ${o} based on input ${t.inputNames[0]}.`));return{xs:i,ys:a}}function Zx(t,e,n){if(n instanceof js)return[n];if(Array.isArray(n))return nt(n.length===e.length,(()=>`Received an array of ${n.length} Tensors, but expected ${e.length} to match the ${t} keys ${e}.`)),n;{const r=[];for(const s of e){if(null==n[s])throw new Nm(`The feature data generated by the dataset lacks the required ${t} key '${s}'.`);r.push(n[s])}return r}}function Jx(t){return\"function\"==typeof t.iterator}function Qx(t){nt(t>0&&Number.isInteger(t),(()=>`batchSize is required to be a positive integer, but got ${t}`))}function tb(t,e,n){return null==t?[null]:Array.isArray(t)?t.map((t=>Lg(t,e,n-e))):Lg(t,e,n-e)}function eb(t,e){return Vo((()=>null==t?null:Array.isArray(t)?t.map((t=>eb(t,e))):Ug(t,\"int32\"===e.dtype?e:Sa(e,\"int32\"))))}function nb(t,e){const n=[];let r=0,s=null;for(;r<t;)s=r+e,s>=t&&(s=t),n.push([r,s]),r=s;return n}function rb(t){const e=[];t instanceof js&&(t=[t]);for(let n=0;n<t.length;++n){const r=t[n];if(1===r.rank)e.push(Rg(r,1));else{if(0===r.rank)throw new Error(\"Expected tensor to be at least 1D, but received a 0D tensor (scalar).\");e.push(r)}}return e}function sb(t,e){if(null==t)return;const n=[];if(e instanceof js)n.push(e.id);else if(Array.isArray(e))e.forEach((t=>n.push(t.id)));else if(null!=e)for(const t in e){const r=e[t];n.push(r.id)}const r=[];if(t instanceof js)-1===n.indexOf(t.id)&&r.push(t);else if(Array.isArray(t))t.forEach((t=>{-1===n.indexOf(t.id)&&r.push(t)}));else if(null!=t)for(const e in t){const s=t[e];-1===n.indexOf(s.id)&&r.push(s)}r.forEach((t=>{t.isDisposed||t.dispose()}))}function ib(t){return Array.isArray(t)}function ab(t){return!function(t){return t instanceof js}(t)&&!ib(t)}function ob(t,e,n,r=!0,s=\"\"){if(null==e||0===e.length){if(null!=t){let e=!1;if(ib(t)&&t.length>0)e=!0;else if(ab(t)){for(const n in t)if(t.hasOwnProperty(n)){e=!0;break}}else e=!0;if(e)throw new Nm(`Error when checking model ${s} expected no data, but got ${t}`)}return[]}if(null==t)return e.map((t=>null));let i;if(ab(t)){t=t,i=[];for(const n of e){if(null==t[n])throw new Nm(`No data provided for \"${n}\". Need data for each key in: ${e}`);i.push(t[n])}}else if(ib(t)){if((t=t).length!==e.length)throw new Nm(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${e.length} Tensor(s), but instead got the following list of Tensor(s): ${t}`);i=t}else{if(t=t,e.length>1)throw new Nm(`The model ${s} expects ${e.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${t.shape}`);i=[t]}if(i=rb(i),null!=n)for(let t=0;t<e.length;++t){if(null==n[t])continue;const a=i[t];if(a.shape.length!==n[t].length)throw new Nm(`Error when checking ${s}: expected ${e[t]} to have ${n[t].length} dimension(s). but got array with shape ${a.shape}`);for(let e=0;e<n[t].length;++e){if(0===e&&!r)continue;const i=a.shape[e],o=n[t][e];if(null!=o&&o>=0&&i!==o)throw new Nm(`${s} expected a batch of elements where each example has shape [${n[t].slice(1,n[t].length)}] (i.e.,tensor shape [*,${n[t].slice(1,n[t].length)}]) but the ${s} received an input with ${a.shape[0]} examples, each with shape [${a.shape.slice(1,a.shape.length)}] (tensor shape [${a.shape}])`)}}return i}function lb(t,e,n,r=!0,s=\"\"){let i;if(Array.isArray(t)){if(t.length!==e.length)throw new Nm(`Error when checking model ${s}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${e.length} Tensor(s), but instead got ${t.length} Tensors(s).`);i=t}else{if(e.length>1)throw new Nm(`The model expects ${e.length} ${s} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(t.shape)}.`);i=[t]}if(null!=n)for(let t=0;t<e.length;++t){if(null==n[t])continue;const a=i[t];if(a.shape.length!==n[t].length)throw new Nm(`Error when checking ${s}: expected ${e[t]} to have ${n[t].length} dimension(s), but got array with shape ${JSON.stringify(a.shape)}`);for(let i=0;i<n[t].length;++i){if(0===i&&!r)continue;const o=a.shape[i],l=n[t][i];if(null!=l&&l!==o)throw new Nm(`Error when checking ${s}: expected ${e[t]} to have shape ${JSON.stringify(n[t])} but got array with shape ${JSON.stringify(a.shape)}.`)}}}class ub extends jx{constructor(t){super(t),this.isTraining=!1}summary(t,e,n=console.log){if(!this.built)throw new Nm(\"This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).\");!function(t,e,n,r=console.log){const s=function(t){let e=!0;const n=[],r=[];for(const e in t.nodesByDepth)n.push(t.nodesByDepth[e]);for(const t of n){if(t.length>1||1===t.length&&t[0].inboundLayers.length>1){e=!1;break}r.push(...t)}if(e)for(const n of t.layers){let t=!1;for(const s of n.inboundNodes)if(-1!==r.indexOf(s)){if(t){e=!1;break}t=!0}if(!e)break}return e}(t),i=[\"Layer (type)\",\"Output shape\",\"Param #\"];let a;if(s?(e=e||65,n=n||[.45,.85,1]):(e=e||98,n=n||[.33,.55,.67,1]),n[n.length-1]<=1&&(n=n.map((t=>Math.floor(e*t)))),!s){i.push(\"Receives inputs\"),a=[];for(const e in t.nodesByDepth)a.push(...t.nodesByDepth[e])}r(\"_\".repeat(e)),Rx(i,n,r),r(\"=\".repeat(e));const o=t.layers;for(let t=0;t<o.length;++t)s?Lx(o[t],n,r):Dx(o[t],n,a,r),r((t===o.length-1?\"=\":\"_\").repeat(e));t.checkTrainableWeightsConsistency();const l=function(t){let e;return e=null!=t.collectedTrainableWeights?Py(t.collectedTrainableWeights):Py(t.trainableWeights),e}(t),u=Py(t.nonTrainableWeights);r(`Total params: ${l+u}`),r(`Trainable params: ${l}`),r(`Non-trainable params: ${u}`),r(\"_\".repeat(e))}(this,t,e,n)}compile(t){if(null==t.loss&&(t.loss=[]),this.loss=t.loss,\"string\"==typeof t.optimizer)this.optimizer_=function(t){const e={Adagrad:()=>kp.adagrad(.01),Adadelta:()=>kp.adadelta(1,.95,Em()),Adam:()=>kp.adam(.001,.9,.999,Em()),Adamax:()=>kp.adamax(.002,.9,.999,Em(),0),RMSProp:()=>kp.rmsprop(.001,.9,0,Em()),SGD:()=>kp.sgd(.01)};if(e.adagrad=e.Adagrad,e.adadelta=e.Adadelta,e.adam=e.Adam,e.adamax=e.Adamax,e.rmsprop=e.RMSProp,e.sgd=e.SGD,t in e)return e[t]();throw new Nm(`Unknown Optimizer ${t}`)}(t.optimizer),this.isOptimizerOwned=!0;else{if(!(t.optimizer instanceof gl))throw new Nm(\"User-defined optimizer must be an instance of tf.Optimizer.\");this.optimizer_=t.optimizer,this.isOptimizerOwned=!1}let e=[];if(Array.isArray(t.loss)||\"string\"==typeof t.loss||\"function\"==typeof t.loss)if(Array.isArray(t.loss)){if(t.loss.length!==this.outputs.length)throw new Nm(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${t.loss}.`);const n=t.loss;e=n.map((t=>xx(t)))}else{const n=xx(t.loss);this.outputs.forEach((t=>{e.push(n)}))}else{t.loss=t.loss;for(const e in t.loss)if(-1===this.outputNames.indexOf(e))throw new Nm(`Unknown entry in loss dictionary: \"${e}\". Only expected the following keys: ${this.outputNames}`);for(const n of this.outputNames)null==t.loss[n]&&console.warn(`Output \"${n}\" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),e.push(xx(t.loss[n]))}this.lossFunctions=e,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let t=0;t<this.outputs.length;++t){const e=this.internalOutputShapes[t],n=this.outputNames[t];this.feedOutputNames.push(n),this.feedOutputShapes.push(e),this.feedLossFns.push(this.lossFunctions[t])}const n=[];this.metrics=t.metrics,this.metricsNames=[\"loss\"],this.metricsTensors=[],Sg(\"loss\",(()=>{for(let t=0;t<this.outputs.length;++t){if(-1!==n.indexOf(t))continue;const e=this.lossFunctions[t];this.outputs.length>1&&(this.metricsTensors.push([e,t]),this.metricsNames.push(this.outputNames[t]+\"_loss\"))}}));const r=function(t,e){if(null==t||Array.isArray(t)&&0===t.length)return e.map((t=>[]));let n;if(\"string\"==typeof t||\"function\"==typeof t)n=[t];else{if(!Array.isArray(t)&&\"object\"!=typeof t)throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${t}`);n=t}if(Array.isArray(n))return e.map((t=>n));{const t=[];for(const r of e){let e=n.hasOwnProperty(r)?n[r]:[];Array.isArray(e)||(e=[e]),t.push(e)}return t}}(t.metrics,this.outputNames),s=(t,e,n)=>{this.outputNames.length>1&&(e=this.outputNames[t]+\"_\"+e),this.metricsNames.push(e),this.metricsTensors.push([n,t])};Sg(\"metric\",(()=>{for(let t=0;t<this.outputs.length;++t)-1===n.indexOf(t)&&(e=>{let n,r,i;for(const a of e){if(\"string\"==typeof a&&-1!==[\"accuracy\",\"acc\",\"crossentropy\",\"ce\"].indexOf(a)){const e=this.internalOutputShapes[t];let s;1===e[e.length-1]||this.lossFunctions[t]===mx?-1!==[\"accuracy\",\"acc\"].indexOf(a)?r=bx:-1!==[\"crossentropy\",\"ce\"].indexOf(a)&&(r=Tx):this.lossFunctions[t]===fx?-1!==[\"accuracy\",\"acc\"].indexOf(a)?r=_x:-1!==[\"crossentropy\",\"ce\"].indexOf(a)&&(r=kx):-1!==[\"accuracy\",\"acc\"].indexOf(a)?r=vx:-1!==[\"crossentropy\",\"ce\"].indexOf(a)&&(r=Mx),-1!==[\"accuracy\",\"acc\"].indexOf(a)?s=\"acc\":-1!==[\"crossentropy\",\"ce\"].indexOf(a)&&(s=\"ce\"),i=r,n=\"\"+s}else{const t=Ix(a);i=t,n=\"\"+Cx(a)}let e;Sg(n,(()=>{e=i})),s(t,n,e)}})(r[t])})),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn(\"Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?\")}evaluate(t,e,n={}){const r=null==n.batchSize?32:n.batchSize;Qx(r);const s=this.standardizeUserDataXY(t,e,!0,r);try{const i=s[0].concat(s[1]);this.makeTestFunction();const a=this.testFunction;return $m(this.testLoop(a,i,r,n.verbose,n.steps))}finally{sb(s[0],t),sb(s[1],e)}}async evaluateDataset(t,e){return this.makeTestFunction(),async function(t,e,n){const r=null!=(n=n||{}).batches,s=t.testFunction;let i=[];if(n.verbose>0)throw new Am(\"Verbose mode is not implemented yet.\");nt(!r||n.batches>0&&Number.isInteger(n.batches),(()=>`Test loop expects \\`batches\\` to be a positive integer, but received ${JSON.stringify(n.batches)}`));const a=\"function\"==typeof e.next?e:await e.iterator();let o=0,l=0;for(;!r||l<n.batches;){const e=await a.next();if(i=Vo((()=>{if(e.value){const{xs:n,ys:r}=Yx(t,e.value),a=n.concat(r),u=Vo((()=>s(a)));if(Wo(a),0===l)for(let t=0;t<u.length;++t)i.push(ml(0));const c=a[0].shape[0];for(let t=0;t<u.length;++t){const e=u[t],n=i[t];i[t]=Vo((()=>el(i[t],sl(c,e)))),l>0&&Wo(n)}Wo(u),o+=c,++l}return i})),e.done){r&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \\`batches\\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let t=0;t<i.length;++t){const e=i[t];i[t]=rl(i[t],o),Wo(e)}return $m(i)}(this,t,e)}checkNumSamples(t,e,n,r=\"steps\"){let s;if(null!=n){if(s=null,null!=e)throw new Nm(`If ${r} is set, batchSize must be null or undefined.Got batchSize = ${e}`)}else{if(null==t)throw new Nm(`Either the input data should have a defined shape, or ${r} shoud be specified.`);s=Array.isArray(t)?t[0].shape[0]:t.shape[0]}return s}execute(t,e){if(Array.isArray(e)&&0===e.length)throw new Nm(\"`outputs` is an empty Array, which is not allowed.\");const n=Array.isArray(e),r=n?e:[e],s=this.retrieveSymbolicTensors(r),i=new zx;if(t instanceof js&&(t=[t]),Array.isArray(t)){if(t.length!==this.inputs.length)throw new Nm(`The number of inputs provided (${t.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let e=0;e<this.inputs.length;++e)i.add(this.inputs[e],t[e])}else for(const e of this.inputs){const n=t[e.name];if(null==n)throw new Nm(`No value is provided for the model's input ${e.name}`);i.add(e,n)}const a=Vx(s,i);return n?a:a[0]}retrieveSymbolicTensors(t){const e=Lm(null,t.length);let n=t.length;for(const r of this.layers){const s=Array.isArray(r.output)?r.output:[r.output],i=s.map((t=>t.name));for(let r=0;r<t.length;++r){const a=i.indexOf(t[r]);if(-1!==a&&(e[r]=s[a],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw e.forEach(((e,r)=>{null==e&&n.push(t[r])})),new Nm(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(n)}`)}return e}predictLoop(t,e=32,n=!1){return Vo((()=>{const r=this.checkNumSamples(t);if(n)throw new Am(\"Verbose predictLoop() is not implemented yet.\");const s=nb(r,e),i=this.outputs.map((t=>[]));for(let e=0;e<s.length;++e)Vo((()=>{const n=s[e][0],r=s[e][1],i=tb(t,n,r),a=[];if(Array.isArray(i))for(let t=0;t<i.length;++t)a.push({key:this.inputs[t],value:i[t]});else a.push({key:this.inputs[0],value:i});const o=new zx(a);return Vx(this.outputs,o)})).forEach(((t,e)=>i[e].push(t)));return $m(i.map((t=>au(t,0))))}))}predict(t,e={}){const n=rb(t);lb(n,this.inputNames,this.feedInputShapes,!1);try{const r=null==e.batchSize?32:e.batchSize;return Qx(r),this.predictLoop(n,r)}finally{sb(n,t)}}predictOnBatch(t){lb(t,this.inputNames,this.feedInputShapes,!0);const e=(Array.isArray(t)?t[0]:t).shape[0];return this.predictLoop(t,e)}standardizeUserDataXY(t,e,n=!0,r){if(null==this.optimizer_)throw new Cm(\"You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).\");const s=[];for(let t=0;t<this.feedOutputShapes.length;++t){const e=this.feedOutputShapes[t];this.feedLossFns[t]===fx?s.push(e.slice(0,e.length-1).concat([1])):s.push(e)}if(function(t,e,n){const r=Hm(t.map((t=>t.shape[0])));r.sort();const s=Hm(e.map((t=>t.shape[0])));if(s.sort(),r.length>1)throw new Nm(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map((t=>t.shape)))}`);if(s.length>1)throw new Nm(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map((t=>t.shape)))}`);if(r.length>0&&s.length>0&&!lt(r,s))throw new Nm(`Input Tensors should have the same number of samples as target Tensors. Found ${r[0]} input sample(s) and ${s[0]} target sample(s).`)}(t=ob(t,this.feedInputNames,this.feedInputShapes,!1,\"input\"),e=ob(e,this.feedOutputNames,s,!1,\"target\")),function(t,e,n){const r=[cx,mx,px];for(let s=0;s<t.length;++s){const i=t[s],a=e[s],o=n[s];if(null!=a){if(a===px&&1===i.shape[i.shape.length-1])throw new Nm(`You are passing a target array of shape ${i.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==r.indexOf(a)){const t=i.shape.slice(1),e=o.slice(1);for(let n=0;n<t.length;++n){const r=t[n],s=e[n];if(null!=s&&r!==s)throw new Nm(`A target Tensor with shape ${i.shape} was passed for an output of shape ${o}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(e,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=r&&r>0&&t[0].shape[0]%r!=0)throw new Nm(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${r}. Found: ${t[0].shape[0]} sample(s).`);return[t,e]}async standardizeUserData(t,e,n,r,s=!0,i){const[a,o]=this.standardizeUserDataXY(t,e,s,i);if(null!=n)throw new Error(\"sample weight is not supported yet.\");let l=null;if(null!=r){const t=qx(r,this.outputNames);l=[];for(let e=0;e<t.length;++e)l.push(await Xx(o[e],null,t[e]))}return[a,o,l]}testLoop(t,e,n,r=0,s){return Vo((()=>{const i=this.checkNumSamples(e,n,s,\"steps\"),a=[];if(r>0)throw new Am(\"Verbose mode is not implemented yet.\");if(null!=s)throw new Am(\"steps mode in testLoop() is not implemented yet\");{const r=nb(i,n),s=jh(Ng(0,i));for(let n=0;n<r.length;++n){const i=r[n][0],o=r[n][1],l=Lg(s,i,o-i),u=eb(e,l),c=t(u);if(0===n)for(let t=0;t<c.length;++t)a.push(ml(0));for(let t=0;t<c.length;++t){const e=c[t];a[t]=el(a[t],sl(o-i,e))}}for(let t=0;t<a.length;++t)a[t]=rl(a[t],i)}return a}))}getDedupedMetricsNames(){const t=this.metricsNames,e=[];for(let n=0;n<t.length;++n){const r=t[n];let s=r;Fm(t,r)>1&&(s+=`_${Fm(t.slice(0,n),r)}`),e.push(s)}return e}makeTrainFunction(){return t=>{const e=[],n=t.slice(0,this.inputs.length),r=t.slice(this.inputs.length,this.inputs.length+this.outputs.length),s=t.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),i=[],a=this.collectedTrainableWeights.map((t=>t.read()));return[this.optimizer_.minimize((()=>{const t=[];for(let e=0;e<this.inputs.length;++e)t.push({key:this.inputs[e],value:n[e]});const a=new zx(t),o=Vx(this.outputs,a,{training:!0});let l;for(let t=0;t<this.lossFunctions.length;++t){let n=(0,this.lossFunctions[t])(r[t],o[t]);null!=s[t]&&(n=Kx(n,s[t]));const i=Fc(n);e.push(i),l=0===t?n:el(l,n)}for(let t=0;t<this.metricsTensors.length;++t){let n;if(this.outputs.length>1&&t<this.outputs.length)n=e[t];else{const e=this.metricsTensors[t][0],s=this.metricsTensors[t][1];n=Fc(e(r[s],o[s]))}Go(n),i.push(n)}return l=Fc(l),this.calculateLosses().forEach((t=>{l=el(l,t)})),l}),!0,a)].concat(i)}}makeTestFunction(){this.testFunction=t=>Vo((()=>{const e=[];let n;const r=t.slice(0,this.inputs.length),s=t.slice(this.inputs.length,this.inputs.length+this.outputs.length),i=[];for(let t=0;t<this.inputs.length;++t)i.push({key:this.inputs[t],value:r[t]});const a=new zx(i),o=Vx(this.outputs,a);for(let t=0;t<this.lossFunctions.length;++t){const r=this.lossFunctions[t],i=Fc(r(s[t],o[t]));n=0===t?i:el(n,i),e.push(n)}for(let t=0;t<this.metricsTensors.length;++t){const n=this.metricsTensors[t][0],r=this.metricsTensors[t][1],i=Fc(n(s[r],o[r]));e.push(i)}return e}))}async fit(t,e,n={}){return async function(t,e,n,r={}){if(t.isTraining)throw new Error(\"Cannot start training because another fit() call is ongoing.\");let s,i,a,o,l,u,c;t.isTraining=!0;try{const h=null==r.batchSize?32:r.batchSize;Qx(h);const d=!1,p=await t.standardizeUserData(e,n,r.sampleWeight,r.classWeight,d,h);s=p[0],i=p[1],c=p[2];let f,m=!1;if(null!=r.validationData&&r.validationData.length>0){if(m=!0,2!==r.validationData.length)throw 3===r.validationData.length?new Am(\"validationData including sample weights is not supported yet.\"):new Nm(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${r.validationData} is invalid.`);a=r.validationData[0],o=r.validationData[1];const e=!0,n=await t.standardizeUserData(a,o,null,null,e,h);l=n[0],u=n[1],f=l.concat(u)}else if(null!=r.validationSplit&&r.validationSplit>0&&r.validationSplit<1){m=!0;const t=Math.floor(s[0].shape[0]*(1-r.validationSplit)),e=s[0].shape[0];l=tb(s,t,e),s=tb(s,0,t),u=tb(i,t,e),i=tb(i,0,t),f=l.concat(u)}else null!=r.validationSteps&&(m=!0);const g=s.concat(i).concat(c);t.checkTrainableWeightsConsistency();const y=t.makeTrainFunction(),x=t.getDedupedMetricsNames();let b,v;m?(t.makeTestFunction(),b=t.testFunction,v=x.slice().concat(x.map((t=>\"val_\"+t)))):(b=null,f=[],v=x.slice());const w=ix(r.callbacks,r.yieldEvery);return await async function(t,e,n,r,s,i,a,o,l,u,c,h,d,p,f){null==s&&(s=32),null==i&&(i=1),null==c&&(c=!0),null==d&&(d=0);let m=!1;null!=l&&null!=u&&(m=!0);const g=t.checkNumSamples(n,s,p,\"steps_per_epoch\");let y;null!=g&&(y=Ng(0,g)),null==a&&(a=1);const{callbackList:x,history:b}=ox(o,a,i,d,g,p,s,m,h);x.setModel(t),t.history=b,await x.onTrainBegin(),t.stopTraining_=!1;for(let a=d;a<i;++a){await x.onEpochBegin(a);const i={};{if(\"batch\"===c)throw new Am(\"batch shuffling is not implemneted yet\");c&&X(y);const a=jh(y),o=nb(g,s);for(let c=0;c<o.length;++c){const h={};if(await x.onBatchBegin(c,h),Vo((()=>{const d=o[c][0],p=o[c][1],f=Lg(a,d,p-d);h.batch=c,h.size=p-d;const g=eb(n,f),y=e(g);for(let t=0;t<r.length;++t){const e=r[t],n=y[t];h[e]=n,Go(n)}if(c===o.length-1&&m){const e=t.testLoop(l,u,s);for(let t=0;t<r.length;++t){const n=r[t],s=e[t];Go(s),i[\"val_\"+n]=s}}})),await x.onBatchEnd(c,h),Jy(h),t.stopTraining_)break}a.dispose()}if(await x.onEpochEnd(a,i),t.stopTraining_)break}return await x.onTrainEnd(),await t.history.syncData(),t.history}(t,y,g,x,h,r.epochs,r.verbose,w,b,f,r.shuffle,v,r.initialEpoch,null)}finally{t.isTraining=!1,sb(s,e),sb(i,n),sb(l,a),sb(u,o),null!=c&&Wo(c)}}(this,t,e,n)}async fitDataset(t,e){return async function(t,e,n){const r=null!=n.batchesPerEpoch;if(nt(null!=t.optimizer,(()=>\"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig).\")),nt(null!=n,(()=>\"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call.\")),nt(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),(()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${n.epochs}`)),nt(!r||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),(()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${n.batchesPerEpoch}`)),nt(null==n.validationSplit,(()=>\"`validationSplit` is not supported by `fitDataset()`. Use validationData instead.\")),t.isTraining)throw new Error(\"Cannot start training because another fit() call is ongoing.\");t.isTraining=!0;try{const s=null!=n.validationData;let i,a;if(s)if(Jx(n.validationData))nt(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),(()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${n.validationBatches}`));else{const t=function(t){if(3===t.length)throw new Am(\"Validation with sample weights is not implemented yet.\");return{xs:t[0],ys:t[1]}}(n.validationData);i=t.xs,a=t.ys}const o=t.makeTrainFunction(),l=t.getDedupedMetricsNames();let u;u=s?l.slice().concat(l.map((t=>\"val_\"+t))):l.slice();const c=ix(n.callbacks,n.yieldEvery),h=null==n.verbose?1:n.verbose,{callbackList:d,history:p}=ox(c,h,n.epochs,null,null,function(t,e){let n=null;return null!=e.batchesPerEpoch?n=e.batchesPerEpoch:Number.isFinite(t.size)&&(n=t.size),n}(e,n),null,s,u);d.setModel(t),t.history=p,await d.onTrainBegin(),t.stopTraining_=!1;let f=null==n.initialEpoch?0:n.initialEpoch,m=await e.iterator();for(;f<n.epochs;){const u={};await d.onEpochBegin(f);let c=0,h=0;for(r||(m=await e.iterator());!r||c<n.batchesPerEpoch;){const e=await m.next();if(r&&e.done){console.warn(`You provided \\`batchesPerEpoch\\` as ${n.batchesPerEpoch}, but your dataset iterator ran out of data after ${c} batches; interrupting training. Make sure that your dataset can generate at least \\`batchesPerEpoch * epochs\\` batches (in this case, `+n.batchesPerEpoch*n.epochs+\" batches). You may need to use the repeat() function when building your dataset.\");break}if(null!=e.value){const{xs:r,ys:s}=Yx(t,e.value),i={};i.batch=h,i.size=r[0].shape[0],await d.onBatchBegin(h,i);const a=[];if(null!=n.classWeight){const e=qx(n.classWeight,t.outputNames);for(let t=0;t<e.length;++t)a.push(await Xx(s[t],null,e[t]))}const u=r.concat(s).concat(a),p=o(u);Wo(u);for(let t=0;t<l.length;++t){const e=l[t],n=p[t];i[e]=n,Go(n)}await d.onBatchEnd(h,i),Jy(i),h++,c++}if(r?c>=n.batchesPerEpoch:e.done){if(s){let e;e=Jx(n.validationData)?Om(await t.evaluateDataset(n.validationData,{batches:n.validationBatches})):Om(t.evaluate(i,a,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<t.metricsNames.length;++n)u[`val_${t.metricsNames[n]}`]=e[n]}break}if(t.stopTraining_)break}if(await d.onEpochEnd(f,u),f++,t.stopTraining_)break}return await d.onTrainEnd(),await t.history.syncData(),t.history}finally{t.isTraining=!1}}(this,t,e)}async trainOnBatch(t,e){const n=await this.standardizeUserData(t,e),r=n[0],s=n[1],i=this.makeTrainFunction()(r.concat(s)),a=[];for(const t of i){const e=await t.data();a.push(e[0])}return Wo(i),$m(a)}getNamedWeights(t){const e=[],n=null!=t&&t.trainableOnly,r=n?this.trainableWeights:this.weights,s=this.getWeights(n);for(let t=0;t<r.length;++t)n&&!r[t].trainable||e.push({name:r[t].originalName,tensor:s[t]});return e}set stopTraining(t){this.stopTraining_=t}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(t){this.optimizer_!==t&&(this.optimizer_=t,this.isOptimizerOwned=!1)}dispose(){const t=super.dispose();if(0===t.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const e=Bo().numTensors;this.optimizer_.dispose(),t.numDisposedVariables+=e-Bo().numTensors}return t}getLossIdentifiers(){let t;if(\"string\"==typeof this.loss)t=Pm(this.loss);else if(Array.isArray(this.loss)){for(const t of this.loss)if(\"string\"!=typeof t)throw new Error(\"Serialization of non-string loss is not supported.\");t=this.loss.map((t=>Pm(t)))}else{const e=Object.keys(this.loss);t={};const n=this.loss;for(const r of e){if(\"string\"!=typeof n[r])throw new Error(\"Serialization of non-string loss is not supported.\");t[r]=Pm(n[r])}}return t}getMetricIdentifiers(){if(\"string\"==typeof this.metrics||\"function\"==typeof this.metrics)return[Pm(Cx(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map((t=>Pm(Cx(t))));{const t={};for(const e in this.metrics)t[e]=Pm(Cx(this.metrics[e]));return t}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(t){if(null!=t.weighted_metrics)throw new Error(\"Loading weight_metrics is not supported yet.\");if(null!=t.loss_weights)throw new Error(\"Loading loss_weights is not supported yet.\");if(null!=t.sample_weight_mode)throw new Error(\"Loading sample_weight_mode is not supported yet.\");const e=lx($x(t.optimizer_config));let n,r;if(\"string\"==typeof t.loss)n=zm(t.loss);else if(Array.isArray(t.loss))n=t.loss.map((t=>zm(t)));else if(null!=t.loss){n={};for(const e in t.loss)n[e]=zm(t.loss[e])}if(Array.isArray(t.metrics))r=t.metrics.map((t=>zm(t)));else if(null!=t.metrics){r={};for(const e in t.metrics)r[e]=zm(t.metrics[e])}this.compile({loss:n,metrics:r,optimizer:e})}async save(t,e){if(\"string\"==typeof t){const e=Vi(t);if(0===e.length)throw new Nm(`Cannot find any save handlers for URL '${t}'`);if(e.length>1)throw new Nm(`Found more than one (${e.length}) save handlers for URL '${t}'`);t=e[0]}if(null==t.save)throw new Nm(\"LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.\");const n=await Ii(this.getNamedWeights(e)),r={modelTopology:this.toJSON(null,!1),format:\"layers-model\",generatedBy:`TensorFlow.js tfjs-layers v${Px}`,convertedBy:null};if(null!=e&&e.includeOptimizer&&null!=this.optimizer){r.trainingConfig=this.getTrainingConfig();const t=\"optimizer\",{data:e,specs:s}=await Ii(await this.optimizer.getWeights(),t);n.specs.push(...s),n.data=Li([n.data,e])}if(null!=this.userDefinedMetadata){const t=!0;Nx(this.userDefinedMetadata,this.name,t),r.userDefinedMetadata=this.userDefinedMetadata}return r.weightData=n.data,r.weightSpecs=n.specs,t.save(r)}setUserDefinedMetadata(t){Nx(t,this.name),this.userDefinedMetadata=t}getUserDefinedMetadata(){return this.userDefinedMetadata}}ub.className=\"Model\",wo(ub);class cb extends ub{}async function hb(t,e){\"modelTopology\"in t||(t={modelTopology:t});let n=(t=t).modelTopology;null!=n.model_config&&(n=n.model_config);const r=lx($x(n),e);if(null!=t.weightsManifest){const e=await Aa(t.weightsManifest,t.pathPrefix,r.weights.map((t=>t.originalName))),n={};for(const t of r.weights)n[t.originalName]=e[t.originalName];r.loadWeights(n),Wo(e)}return r}cb.className=\"Functional\",wo(cb);class db extends ub{constructor(t){if(super({inputs:[],outputs:[]}),t=t||{},this.trainable=!0,this.built=!1,this.name=null!=t.name?t.name:Ly(\"sequential_\"),null!=t.layers)for(const e of t.layers)this.add(e)}checkShape(t){if(t.inboundNodes[0].outputTensors[0].shape.some((t=>t<0)))throw new Nm(`Negative dimension size caused by adding layer ${t.name} with input shape [${t.inboundNodes[0].inputTensors[0].shape}]`)}add(t){const e=t instanceof db||t instanceof ub;let n;if(e){if(n=t,1!==n.outputs.length)throw new Nm(\"All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.\");if(1!==n.inputs.length)throw new Nm(\"All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.\")}if(0===this.outputs.length){if(0===t.inboundNodes.length){if(null==t.batchInputShape)throw new Nm(\"The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.\");const e=Yy({batchShape:t.batchInputShape,dtype:t.dtype,name:t.name+\"_input\"});t.apply(e)}if(e)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==t.inboundNodes.length)throw new Nm(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${t.name} which has ${t.inboundNodes.length} pre-existing inbound connections.`);if(1!==t.inboundNodes[0].outputTensors.length)throw new Nm(\"All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.\");this.checkShape(t),this.outputs=[t.inboundNodes[0].outputTensors[0]],this.inputs=Xy(this.outputs[0])}this.inboundNodes=[],new Hy({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:Lm(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map((t=>t.shape)),outputShapes:this.outputs[0].shape})}else{const e=t.apply(this.outputs[0]);if(Array.isArray(e))throw new TypeError(\"All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.\");this.checkShape(t),this.outputs=[e],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(t),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError(\"There are no layers in the model.\");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const t=this.layers.length-1;this.layers[t].outboundNodes=[],this.outputs=[this.layers[t].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(t,e){return null==this.model&&this.build(),this.model.call(t,e)}build(t){if(Oy(t),0===this.inputs.length||0===this.outputs.length)throw new TypeError(\"Sequential model cannot be built: model is empty. Add some layers first.\");this.model=new ub({inputs:this.inputs,outputs:this.outputs[0],name:this.name+\"_model\"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(t,e,n=console.log){this.built||this.build(),super.summary(t,e,n)}setWeights(t){null==this.model&&this.build(),this.model.setWeights(t)}evaluate(t,e,n={}){if(!this.built)throw new Cm(\"The model needs to be compiled before being used.\");return this.model.evaluate(t,e,n)}async evaluateDataset(t,e){if(!this.built)throw new Cm(\"The model needs to be compiled before being used.\");return this.model.evaluateDataset(t,e)}predict(t,e={}){return null==this.model&&this.build(),this.model.predict(t,e)}predictOnBatch(t){return null==this.model&&this.build(),this.model.predictOnBatch(t)}compile(t){this.build(),this.model.compile(t),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(t){this.model.optimizer=t}async fit(t,e,n={}){if(!this.built)throw new Cm(\"The model needs to be compiled before being used.\");return this.model.fit(t,e,n)}async fitDataset(t,e){if(!this.built)throw new Cm(\"The model needs to be compiled before being used.\");return this.model.fitDataset(t,e)}async trainOnBatch(t,e){return this.model.trainOnBatch(t,e)}static fromConfig(t,e,n={},r=!1){let s,i={};if(e instanceof Array){if(null==e[0].className||\"Merge\"===e[0].className)throw new Nm(\"Legacy serialization format not supported yet.\");s=e}else nt(null!=e.layers,(()=>\"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field.\")),s=e.layers,delete e.layers,i=e;const a=new t(i);if(!(a instanceof db))throw new Am(`Sequential.fromConfig called on non-Sequential input: ${a}`);for(const t of s){const e=lx(t,void 0,r);r&&e.setFastWeightInitDuringBuild(!0),a.add(e)}return a}set stopTraining(t){if(null==this.model)throw new Nm(\"Cannot set the stopTraining property of a sequential model before it is compiled.\");this.model.stopTraining=t}get stopTraining(){if(null==this.model)throw new Nm(\"Cannot get the stopTraining property of a sequential model before it is compiled.\");return this.model.stopTraining}getConfig(){const t=[];for(const e of this.layers){const n={};n.className=e.getClassName(),n.config=e.getConfig(),t.push(n)}return{name:this.name,layers:t}}}function pb(t){return new ub(t)}function fb(t){return new db(t)}function mb(t,e){return null==e&&(e={}),async function(t,e){if(null==e&&(e={}),\"string\"==typeof t){const n=Wi(t,e);if(0===n.length)n.push(Oa(t,e));else if(n.length>1)throw new Nm(`Found more than one (${n.length}) load handlers for URL '${t}'`);t=n[0]}return async function(t,e,n){if(null==n&&(n={}),null==t.load)throw new Nm(\"Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.\");const r=await t.load();let s=r.modelTopology;null!=s.model_config&&(s=s.model_config);const i=null==n.strict||n.strict,a=null!=r.weightData&&null!=r.weightSpecs&&i,o=lx($x(s),void 0,a),l=r.trainingConfig;if(null!=l&&o.loadTrainingConfig(l),null!=r.userDefinedMetadata&&o.setUserDefinedMetadata(r.userDefinedMetadata),null!=r.weightData){if(null==r.weightSpecs)throw new Nm(\"LayersModel artifacts contains weight data, but not weight specs. Therefore loading of weights cannot proceed.\");const{modelWeights:t,optimizerWeights:e}=function(t,e){const n=Ci(t,e),r={},s=[];return e.forEach((t=>{\"optimizer\"===t.group?s.push({name:t.name,tensor:n[t.name]}):r[t.name]=n[t.name]})),{modelWeights:r,optimizerWeights:s}}(r.weightData,r.weightSpecs);o.loadWeights(t,i),null!=o.optimizer&&e.length>0&&await o.optimizer.setWeights(e),Wo(t),Wo(e.map((t=>t.tensor)))}return o}(t,0,e)}(t,e)}function gb(t){return Yy(t)}function yb(t,e){ax.registerCallbackConstructor(t,e)}db.className=\"Sequential\",wo(db);class xb extends bo{getConfig(){return{}}}class bb extends xb{apply(t,e=1){return function(t,e=1){if(1!==e)throw new Am(`Support for alpha values other than 1 (${e}) is not implemented yet.`);return Hu(t)}(t,e)}}bb.className=\"elu\",wo(bb);class vb extends xb{apply(t){return _h(t)}}vb.className=\"selu\",wo(vb);class wb extends xb{apply(t){return mh(t)}}wb.className=\"relu\",wo(wb);class Sb extends xb{apply(t){return Vo((()=>Bc(6,mh(t))))}}Sb.className=\"relu6\",wo(Sb);class Tb extends xb{apply(t){return t}}Tb.className=\"linear\",wo(Tb);class _b extends xb{apply(t){return ou(t)}}_b.className=\"sigmoid\",wo(_b);class Mb extends xb{apply(t){return function(t){return Vo((()=>{const e=el(.5,sl(.2,t));return vu(e,0,1)}))}(t)}}Mb.className=\"hardSigmoid\",wo(Mb);class kb extends xb{apply(t){return fc(t)}}kb.className=\"softplus\",wo(kb);class Eb extends xb{apply(t){return function(t){return Vo((()=>rl(t,el(Tl(t),1))))}(t)}}Eb.className=\"softsign\",wo(Eb);class Ib extends xb{apply(t){return uu(t)}}Ib.className=\"tanh\",wo(Ib);class Cb extends xb{apply(t,e=-1){return Dh(t,e)}}Cb.className=\"softmax\",wo(Cb);class Nb extends xb{apply(t,e=-1){return xc(t,e)}}Nb.className=\"logSoftmax\",wo(Nb);class Ab extends xb{apply(t,e=1){return Vo((()=>sl(ou(sl(t,e)),t)))}}Ab.className=\"swish\",wo(Ab);class Rb extends xb{apply(t){return Vo((()=>sl(t,uu(fc(t)))))}}function Lb(t){return t.getClassName()}function Db(t,e={}){return Wm(t,vo.getMap().classNameMap,e,\"activation\")}function Fb(t){if(null==t){return Db({className:\"linear\",config:{}})}if(\"string\"==typeof t){const e={};return e.className=t,e.config={},Db(e)}return t instanceof xb?t:Db(t)}function $b(t){if(null!=t&&\"object\"!=typeof t)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${t}`)}Rb.className=\"mish\",wo(Rb);class Ob extends bo{}class Pb extends Ob{constructor(t){super(),$b(t),this.l1=null==t||null==t.l1?.01:t.l1,this.l2=null==t||null==t.l2?.01:t.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(t){return Vo((()=>{let e=$c([1]);return this.hasL1&&(e=el(e,yc(sl(this.l1,Tl(t))))),this.hasL2&&(e=el(e,yc(sl(this.l2,Vg(t))))),ru(e,[])}))}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(t,e){return new t({l1:e.l1,l2:e.l2})}}Pb.className=\"L1L2\",wo(Pb);const zb={l1l2:\"L1L2\"};function Bb(t){return Um(t)}function Ub(t,e={}){return Wm(t,vo.getMap().classNameMap,e,\"regularizer\")}function Vb(t){return null==t?null:\"string\"==typeof t?Ub({className:t in zb?zb[t]:t,config:{}}):t instanceof Ob?t:Ub(t)}class Wb extends qy{constructor(t){super(null==t?{}:t),this.supportsMasking=!0,null!=t&&(this.maxValue=t.maxValue)}call(t,e){t=$y(t);let n=mh(t);return null!=this.maxValue&&(n=vu(n,0,this.maxValue)),n}computeOutputShape(t){return t}getConfig(){const t={maxValue:this.maxValue},e=super.getConfig();return Object.assign(t,e),t}}Wb.className=\"ReLU\",wo(Wb);class Gb extends qy{constructor(t){super(null==t?{}:t),this.DEFAULT_ALPHA=.3,null==t&&(t={}),this.alpha=null==t.alpha?this.DEFAULT_ALPHA:t.alpha}call(t,e){const n=$y(t);return ac(n,this.alpha)}computeOutputShape(t){return t}getConfig(){const t={alpha:this.alpha},e=super.getConfig();return Object.assign(t,e),t}}Gb.className=\"LeakyReLU\",wo(Gb);class Hb extends qy{constructor(t){if(super(null==t?{}:t),this.DEFAULT_ALPHA_INITIALIZER=\"zeros\",null==t&&(t={}),this.supportsMasking=!0,this.alphaInitializer=fy(t.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=Vb(t.alphaRegularizer),this.alphaConstraint=og(t.alphaConstraint),null==t.sharedAxes)this.sharedAxes=null;else if(Array.isArray(t.sharedAxes))this.sharedAxes=t.sharedAxes;else{if(\"number\"!=typeof t.sharedAxes)throw new Nm(`Expected sharedAxes to be a number or an array of numbers, but got ${t.sharedAxes}`);this.sharedAxes=[t.sharedAxes]}}build(t){const e=(t=Oy(t)).slice(1);if(null!=this.sharedAxes)for(const t of this.sharedAxes)e[t-1]=1;this.alpha=this.addWeight(\"alpha\",e,\"float32\",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let e=1;e<t.length;++e)n[e]=t[e];this.inputSpec=[new Vy({ndim:t.length,axes:n})],this.built=!0}call(t,e){return t=$y(t),nh(t,this.alpha.read())}getConfig(){const t={alphaInitializer:py(this.alphaInitializer),alphaRegularizer:Bb(this.alphaRegularizer),alphaConstraint:ig(this.alphaConstraint),sharedAxes:this.sharedAxes},e=super.getConfig();return Object.assign(t,e),t}}Hb.className=\"PReLU\",wo(Hb);class jb extends qy{constructor(t){if(super(null==t?{}:t),this.DEFAULT_ALPHA=1,null==t&&(t={}),null!=t.alpha&&t.alpha!==this.DEFAULT_ALPHA)throw new Am(`Non-default alpha value (${t.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==t.alpha?this.DEFAULT_ALPHA:t.alpha}call(t,e){const n=$y(t);return Hu(n)}computeOutputShape(t){return t}getConfig(){const t={alpha:this.alpha},e=super.getConfig();return Object.assign(t,e),t}}jb.className=\"ELU\",wo(jb);class qb extends qy{constructor(t){super(null==t?{}:t),this.DEFAULT_THETA=1,null==t&&(t={}),this.theta=null==t.theta?this.DEFAULT_THETA:t.theta}call(t,e){const n=$y(t);return sl(n,Sa(tc(n,this.theta),\"float32\"))}computeOutputShape(t){return t}getConfig(){const t={theta:this.theta},e=super.getConfig();return Object.assign(t,e),t}}qb.className=\"ThresholdedReLU\",wo(qb);class Xb extends qy{constructor(t){super(null==t?{}:t),this.DEFAULT_AXIS=1,null==t&&(t={}),this.softmax=(new Cb).apply,this.axis=null==t.axis?this.DEFAULT_AXIS:t.axis}call(t,e){const n=$y(t);return this.softmax(n,this.axis)}computeOutputShape(t){return t}getConfig(){const t={axis:this.axis},e=super.getConfig();return Object.assign(t,e),t}}function Kb(t,e,n){if(\"number\"==typeof t)return Lm(t,e);if(t.length!==e)throw new Nm(`The ${n} argument must be an integer or tuple of ${e} integers. Received: ${t.length} elements.`);for(let s=0;s<e;++s){const i=t[s];if((r=i)!==parseInt(r.toString(),10))throw new Nm(`The ${n} argument must be an integer or tuple of ${e} integers. Received: ${JSON.stringify(t)} including a non-integer number ${i}`)}return t;var r}function Yb(t,e,n,r,s=1){if(null==t)return t;let i;return i=\"same\"===n?t:t-(e+(e-1)*(s-1))+1,Math.floor((i+r-1)/r)}function Zb(t,e,n,r){if(null==t)return null;if(\"valid\"===r)t=t*e+Cg([n-e,0]);else{if(\"same\"!==r)throw new Nm(`Unsupport padding mode: ${r}.`);t*=e}return t}function Jb(t,e){return Vo((()=>(xg(e),\"channelsFirst\"===e?Ga(t,[0,2,3,1]):t)))}function Qb(t,e){return Vo((()=>(xg(e),\"channelsFirst\"===e?Ga(t,[0,2,3,4,1]):t)))}function tv(t,e,n,r=[1,1],s=\"valid\",i,a,o=null){return Vo((()=>{if(null==i&&(i=\"channelsLast\"),xg(i),3!==t.rank&&4!==t.rank)throw new Nm(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${t.rank}.`);if(3!==e.rank&&4!==e.rank)throw new Nm(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${t.rank}.`);let l=Jb(t,i);if(\"causal\"===s)throw new Am(\"The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.\");return l=wd({x:l,filter:e,strides:r,pad:\"same\"===s?\"same\":\"valid\",dilations:a,dataFormat:\"NHWC\",bias:n,activation:o}),\"channelsFirst\"===i&&(l=Ga(l,[0,3,1,2])),l}))}Xb.className=\"Softmax\",wo(Xb);class ev extends qy{constructor(t,e){if(super(e),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER=\"glorotNormal\",this.DEFAULT_BIAS_INITIALIZER=\"zeros\",ev.verifyArgs(e),this.rank=t,Km(this.rank,\"rank\"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new Am(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=Kb(e.kernelSize,t,\"kernelSize\"),this.strides=Kb(null==e.strides?1:e.strides,t,\"strides\"),this.padding=null==e.padding?\"valid\":e.padding,bg(this.padding),this.dataFormat=null==e.dataFormat?\"channelsLast\":e.dataFormat,xg(this.dataFormat),this.activation=Fb(e.activation),this.useBias=null==e.useBias||e.useBias,this.biasInitializer=fy(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=og(e.biasConstraint),this.biasRegularizer=Vb(e.biasRegularizer),this.activityRegularizer=Vb(e.activityRegularizer),this.dilationRate=Kb(null==e.dilationRate?1:e.dilationRate,t,\"dilationRate\"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new Nm(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if(\"number\"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new Nm(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if(\"number\"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new Nm(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(t){if(Dm(\"kernelSize\"in t,\"required key 'kernelSize' not in config\"),\"number\"!=typeof t.kernelSize&&!Xm(t.kernelSize,\"number\",1,3))throw new Nm(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(t.kernelSize)}.`)}getConfig(){const t={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:Lb(this.activation),useBias:this.useBias,biasInitializer:py(this.biasInitializer),biasRegularizer:Bb(this.biasRegularizer),activityRegularizer:Bb(this.activityRegularizer),biasConstraint:ig(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}}class nv extends ev{constructor(t,e){super(t,e),this.kernel=null,nv.verifyArgs(e),this.filters=e.filters,Km(this.filters,\"filters\"),this.kernelInitializer=fy(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=og(e.kernelConstraint),this.kernelRegularizer=Vb(e.kernelRegularizer)}build(t){t=Oy(t);const e=\"channelsFirst\"===this.dataFormat?1:t.length-1;if(null==t[e])throw new Nm(`The channel dimension of the input should be defined. Found ${t[e]}`);const n=t[e],r=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight(\"kernel\",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight(\"bias\",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[e]:n}}],this.built=!0}call(t,e){return Vo((()=>{let e;t=$y(t);const n=null==this.bias?null:this.bias.read(),r=Zm(this.activation.getClassName());if(null!=r&&2===this.rank)e=tv(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,r);else{if(1===this.rank)e=function(t,e,n,r=1,s=\"valid\",i,a=1){return Vo((()=>{if(null==i&&(i=\"channelsLast\"),xg(i),3!==t.shape.length)throw new Nm(`The input of a conv1dWithBias operation should be 3, but is ${t.shape.length} instead.`);if(3!==e.shape.length)throw new Nm(`The kernel for a conv1dWithBias operation should be 3, but is ${e.shape.length} instead`);if(null!=n&&1!==n.shape.length)throw new Nm(`The bias for a conv1dWithBias operation should be 1, but is ${e.shape.length} instead`);if(\"channelsFirst\"===i&&(t=Ga(t,[0,2,1])),\"causal\"===s)throw new Am(\"The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.\");let o=ku(t,e,r,\"same\"===s?\"same\":\"valid\",\"NWC\",a);return null!=n&&(o=Gg(o,n)),o}))}(t,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)e=tv(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new Am(\"convolutions greater than 3D are not implemented yet.\");e=function(t,e,n,r=[1,1,1],s=\"valid\",i,a){return Vo((()=>{if(null==i&&(i=\"channelsLast\"),xg(i),4!==t.rank&&5!==t.rank)throw new Nm(`conv3dWithBias expects input to be of rank 4 or 5, but received ${t.rank}.`);if(4!==e.rank&&5!==e.rank)throw new Nm(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${t.rank}.`);let o=Qb(t,i);if(\"causal\"===s)throw new Am(\"The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.\");return o=Cu(o,e,r,\"same\"===s?\"same\":\"valid\",\"NDHWC\",a),null!=n&&(o=Gg(o,n)),\"channelsFirst\"===i&&(o=Ga(o,[0,4,1,2,3])),o}))}(t,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(e=this.activation.apply(e))}return e}))}computeOutputShape(t){t=Oy(t);const e=[],n=\"channelsLast\"===this.dataFormat?t.slice(1,t.length-1):t.slice(2);for(let t=0;t<n.length;++t){const r=Yb(n[t],this.kernelSize[t],this.padding,this.strides[t],\"number\"==typeof this.dilationRate?this.dilationRate:this.dilationRate[t]);e.push(r)}let r=[t[0]];return\"channelsLast\"===this.dataFormat?(r=r.concat(e),r.push(this.filters)):(r.push(this.filters),r=r.concat(e)),r}getConfig(){const t={filters:this.filters,kernelInitializer:py(this.kernelInitializer),kernelRegularizer:Bb(this.kernelRegularizer),kernelConstraint:ig(this.kernelConstraint)},e=super.getConfig();return Object.assign(t,e),t}static verifyArgs(t){if(!(\"filters\"in t)||\"number\"!=typeof t.filters||t.filters<1)throw new Nm(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(t.filters)}`)}}class rv extends nv{constructor(t){super(2,t),rv.verifyArgs(t)}getConfig(){const t=super.getConfig();return delete t.rank,t}static verifyArgs(t){if(\"number\"!=typeof t.kernelSize&&!Xm(t.kernelSize,\"number\",1,2))throw new Nm(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(t.kernelSize)}.`)}}rv.className=\"Conv2D\",wo(rv);class sv extends nv{constructor(t){super(3,t),sv.verifyArgs(t)}getConfig(){const t=super.getConfig();return delete t.rank,t}static verifyArgs(t){if(\"number\"!=typeof t.kernelSize&&(!Array.isArray(t.kernelSize)||1!==t.kernelSize.length&&3!==t.kernelSize.length))throw new Nm(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(t.kernelSize)}.`)}}sv.className=\"Conv3D\",wo(sv);class iv extends rv{constructor(t){if(super(t),this.inputSpec=[new Vy({ndim:4})],\"same\"!==this.padding&&\"valid\"!==this.padding)throw new Nm(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(t){if(4!==(t=Oy(t)).length)throw new Nm(\"Input should have rank 4; Received input shape: \"+JSON.stringify(t));const e=\"channelsFirst\"===this.dataFormat?1:t.length-1;if(null==t[e])throw new Nm(\"The channel dimension of the inputs should be defined. Found `None`.\");const n=t[e],r=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight(\"kernel\",r,\"float32\",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight(\"bias\",[this.filters],\"float32\",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new Vy({ndim:4,axes:{[e]:n}})],this.built=!0}call(t,e){return Vo((()=>{let e=$y(t);if(4!==e.shape.length)throw new Nm(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${e.shape.length}`);const n=e.shape,r=n[0];let s,i;\"channelsFirst\"===this.dataFormat?(s=2,i=3):(s=1,i=2);const a=n[s],o=n[i],l=this.kernelSize[0],u=this.kernelSize[1],c=this.strides[0],h=this.strides[1],d=[r,Zb(a,c,l,this.padding),Zb(o,h,u,this.padding),this.filters];\"channelsLast\"!==this.dataFormat&&(e=Ga(e,[0,2,3,1]));let p=Iu(e,this.kernel.read(),d,this.strides,this.padding);return\"channelsLast\"!==this.dataFormat&&(p=Ga(p,[0,3,1,2])),null!=this.bias&&(p=Gg(p,this.bias.read(),this.dataFormat)),null!=this.activation&&(p=this.activation.apply(p)),p}))}computeOutputShape(t){const e=(t=Oy(t)).slice();let n,r,s;\"channelsFirst\"===this.dataFormat?(n=1,r=2,s=3):(n=3,r=1,s=2);const i=this.kernelSize[0],a=this.kernelSize[1],o=this.strides[0],l=this.strides[1];return e[n]=this.filters,e[r]=Zb(e[r],o,i,this.padding),e[s]=Zb(e[s],l,a,this.padding),e}getConfig(){const t=super.getConfig();return delete t.dilationRate,t}}iv.className=\"Conv2DTranspose\",wo(iv);class av extends sv{constructor(t){if(super(t),this.inputSpec=[new Vy({ndim:5})],\"same\"!==this.padding&&\"valid\"!==this.padding)throw new Nm(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(t){if(5!==(t=Oy(t)).length)throw new Nm(\"Input should have rank 5; Received input shape: \"+JSON.stringify(t));const e=\"channelsFirst\"===this.dataFormat?1:t.length-1;if(null==t[e])throw new Nm(\"The channel dimension of the inputs should be defined. Found `None`.\");const n=t[e],r=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight(\"kernel\",r,\"float32\",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight(\"bias\",[this.filters],\"float32\",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new Vy({ndim:5,axes:{[e]:n}})],this.built=!0}call(t,e){return Vo((()=>{let e=$y(t);if(5!==e.shape.length)throw new Nm(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${e.shape.length}`);const n=e.shape,r=n[0];let s,i,a;\"channelsFirst\"===this.dataFormat?(a=2,s=3,i=4):(a=1,s=2,i=3);const o=n[a],l=n[s],u=n[i],c=this.kernelSize[0],h=this.kernelSize[1],d=this.kernelSize[2],p=this.strides[0],f=this.strides[1],m=this.strides[2],g=[r,Zb(o,p,c,this.padding),Zb(l,f,h,this.padding),Zb(u,m,d,this.padding),this.filters];\"channelsLast\"!==this.dataFormat&&(e=Ga(e,[0,2,3,4,1]));let y=Au(e,this.kernel.read(),g,this.strides,this.padding);return\"channelsLast\"!==this.dataFormat&&(y=Ga(y,[0,4,1,2,3])),null!==this.bias&&(y=Gg(y,this.bias.read(),this.dataFormat)),null!==this.activation&&(y=this.activation.apply(y)),y}))}computeOutputShape(t){const e=(t=Oy(t)).slice();let n,r,s,i;\"channelsFirst\"===this.dataFormat?(n=1,r=2,s=3,i=4):(n=4,r=1,s=2,i=3);const a=this.kernelSize[0],o=this.kernelSize[1],l=this.kernelSize[2],u=this.strides[0],c=this.strides[1],h=this.strides[2];return e[n]=this.filters,e[r]=Zb(e[r],u,a,this.padding),e[s]=Zb(e[s],c,o,this.padding),e[i]=Zb(e[i],h,l,this.padding),e}getConfig(){const t=super.getConfig();return delete t.dilationRate,t}}av.className=\"Conv3DTranspose\",wo(av);class ov extends nv{constructor(t,e){if(super(t,e),this.DEFAULT_DEPTHWISE_INITIALIZER=\"glorotUniform\",this.DEFAULT_POINTWISE_INITIALIZER=\"glorotUniform\",this.depthwiseKernel=null,this.pointwiseKernel=null,null==e.filters)throw new Nm(\"The `filters` configuration field is required by SeparableConv, but is unspecified.\");if(null!=e.kernelInitializer||null!=e.kernelRegularizer||null!=e.kernelConstraint)throw new Nm(\"Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.\");if(null!=e.padding&&\"same\"!==e.padding&&\"valid\"!==e.padding)throw new Nm(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(e.padding)}`);this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=fy(e.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=Vb(e.depthwiseRegularizer),this.depthwiseConstraint=og(e.depthwiseConstraint),this.pointwiseInitializer=fy(e.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=Vb(e.pointwiseRegularizer),this.pointwiseConstraint=og(e.pointwiseConstraint)}build(t){if((t=Oy(t)).length<this.rank+2)throw new Nm(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(t)}`);const e=\"channelsFirst\"===this.dataFormat?1:t.length-1;if(null==t[e]||t[e]<0)throw new Nm(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(t[e])}`);const n=t[e],r=this.kernelSize.concat([n,this.depthMultiplier]),s=[];for(let t=0;t<this.rank;++t)s.push(1);s.push(n*this.depthMultiplier,this.filters);const i=!0;this.depthwiseKernel=this.addWeight(\"depthwise_kernel\",r,\"float32\",this.depthwiseInitializer,this.depthwiseRegularizer,i,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight(\"pointwise_kernel\",s,\"float32\",this.pointwiseInitializer,this.pointwiseRegularizer,i,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight(\"bias\",[this.filters],\"float32\",this.biasInitializer,this.biasRegularizer,i,this.biasConstraint):this.bias=null,this.inputSpec=[new Vy({ndim:this.rank+2,axes:{[e]:n}})],this.built=!0}call(t,e){return Vo((()=>{let e;if(t=$y(t),1===this.rank)throw new Am(\"1D separable convolution is not implemented yet.\");return 2===this.rank&&(\"channelsFirst\"===this.dataFormat&&(t=Ga(t,[0,2,3,1])),e=Mh(t,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,\"NHWC\")),this.useBias&&(e=Gg(e,this.bias.read(),this.dataFormat)),null!=this.activation&&(e=this.activation.apply(e)),\"channelsFirst\"===this.dataFormat&&(e=Ga(e,[0,3,1,2])),e}))}getConfig(){const t=super.getConfig();return delete t.rank,delete t.kernelInitializer,delete t.kernelRegularizer,delete t.kernelConstraint,t.depthwiseInitializer=py(this.depthwiseInitializer),t.pointwiseInitializer=py(this.pointwiseInitializer),t.depthwiseRegularizer=Bb(this.depthwiseRegularizer),t.pointwiseRegularizer=Bb(this.pointwiseRegularizer),t.depthwiseConstraint=ig(this.depthwiseConstraint),t.pointwiseConstraint=ig(this.pointwiseConstraint),t}}ov.className=\"SeparableConv\";class lv extends ov{constructor(t){super(2,t)}}lv.className=\"SeparableConv2D\",wo(lv);class uv extends nv{constructor(t){super(1,t),uv.verifyArgs(t),this.inputSpec=[{ndim:3}]}getConfig(){const t=super.getConfig();return delete t.rank,delete t.dataFormat,t}static verifyArgs(t){if(\"number\"!=typeof t.kernelSize&&!Xm(t.kernelSize,\"number\",1,1))throw new Nm(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(t.kernelSize)}.`)}}uv.className=\"Conv1D\",wo(uv);class cv extends qy{constructor(t){super(t),\"number\"==typeof t.cropping?this.cropping=[[t.cropping,t.cropping],[t.cropping,t.cropping]]:\"number\"==typeof t.cropping[0]?this.cropping=[[t.cropping[0],t.cropping[0]],[t.cropping[1],t.cropping[1]]]:this.cropping=t.cropping,this.dataFormat=void 0===t.dataFormat?\"channelsLast\":t.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(t){return\"channelsFirst\"===this.dataFormat?[t[0],t[1],t[2]-this.cropping[0][0]-this.cropping[0][1],t[3]-this.cropping[1][0]-this.cropping[1][1]]:[t[0],t[1]-this.cropping[0][0]-this.cropping[0][1],t[2]-this.cropping[1][0]-this.cropping[1][1],t[3]]}call(t,e){return Vo((()=>{if(t=$y(t),\"channelsLast\"===this.dataFormat){const e=Fg(t,this.cropping[0][0],t.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return Fg(e,this.cropping[1][0],t.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const e=Fg(t,this.cropping[0][0],t.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return Fg(e,this.cropping[1][0],t.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}}))}getConfig(){const t={cropping:this.cropping,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}cv.className=\"Cropping2D\",wo(cv);class hv extends qy{constructor(t){var e;super(t),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==t.size?this.DEFAULT_SIZE:t.size,this.dataFormat=null==t.dataFormat?\"channelsLast\":t.dataFormat,xg(this.dataFormat),this.interpolation=null==t.interpolation?\"nearest\":t.interpolation,e=this.interpolation,qm(pg,\"InterpolationFormat\",e)}computeOutputShape(t){if(\"channelsFirst\"===this.dataFormat){const e=null==t[2]?null:this.size[0]*t[2],n=null==t[3]?null:this.size[1]*t[3];return[t[0],t[1],e,n]}{const e=null==t[1]?null:this.size[0]*t[1],n=null==t[2]?null:this.size[1]*t[2];return[t[0],e,n,t[3]]}}call(t,e){return Vo((()=>{let e=$y(t);const n=e.shape;if(\"channelsFirst\"===this.dataFormat){e=Ga(e,[0,2,3,1]);const t=this.size[0]*n[2],r=this.size[1]*n[3],s=\"nearest\"===this.interpolation?vp.resizeNearestNeighbor(e,[t,r]):vp.resizeBilinear(e,[t,r]);return Ga(s,[0,3,1,2])}{const t=this.size[0]*n[1],r=this.size[1]*n[2];return\"nearest\"===this.interpolation?vp.resizeNearestNeighbor(e,[t,r]):vp.resizeBilinear(e,[t,r])}}))}getConfig(){const t={size:this.size,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}hv.className=\"UpSampling2D\",wo(hv);class dv extends ev{constructor(t){super(2,t),this.depthwiseKernel=null,this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=fy(t.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=og(t.depthwiseConstraint),this.depthwiseRegularizer=Vb(t.depthwiseRegularizer)}build(t){if((t=Oy(t)).length<4)throw new Nm(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(t)}.`);const e=\"channelsFirst\"===this.dataFormat?1:3;if(null==t[e]||t[e]<0)throw new Nm(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${t[e]}).`);const n=t[e],r=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight(\"depthwise_kernel\",r,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight(\"bias\",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return Vo((()=>{let e=function(t,e,n=[1,1],r=\"valid\",s,i){return Vo((()=>{null==s&&(s=\"channelsLast\"),xg(s);let a=Jb(t,s);if(4!==t.rank)throw new Nm(`Input for depthwiseConv2d is required to be 4-D, but is instead ${t.rank}-D`);if(4!==e.rank)throw new Nm(`depthwiseKernel is required to be 4-D, but is instead ${e.rank}-D`);return a=Ou(a,e,n,\"same\"===r?\"same\":\"valid\",\"NHWC\",i),\"channelsFirst\"===s&&(a=Ga(a,[0,3,1,2])),a}))}(t=$y(t),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(e=Gg(e,this.bias.read(),this.dataFormat)),null!=this.activation&&(e=this.activation.apply(e)),e}))}computeOutputShape(t){t=Oy(t);const e=\"channelsFirst\"===this.dataFormat?t[2]:t[1],n=\"channelsFirst\"===this.dataFormat?t[3]:t[2],r=\"channelsFirst\"===this.dataFormat?t[1]*this.depthMultiplier:t[3]*this.depthMultiplier,s=Yb(e,this.kernelSize[0],this.padding,this.strides[0]),i=Yb(n,this.kernelSize[1],this.padding,this.strides[1]);return\"channelsFirst\"===this.dataFormat?[t[0],r,s,i]:[t[0],s,i,r]}getConfig(){const t=super.getConfig();return t.depthMultiplier=this.depthMultiplier,t.depthwiseInitializer=py(this.depthwiseInitializer),t.depthwiseRegularizer=Bb(this.depthwiseRegularizer),t.depthwiseConstraint=ig(this.depthwiseRegularizer),t}}function pv(t,e,n,r){if(Array.isArray(t)){if(null!=e||null!=n)throw new Nm(\"When inputs is an array, neither initialState or constants should be provided\");null!=r&&(n=t.slice(t.length-r,t.length),t=t.slice(0,t.length-r)),t.length>1&&(e=t.slice(1,t.length)),t=t[0]}function s(t){return null==t||Array.isArray(t)?t:[t]}return{inputs:t,initialState:e=s(e),constants:n=s(n)}}function fv(t,e,n,r=!1,s,i,a=!1,o=!1){return Vo((()=>{const l=e.shape.length;if(l<3)throw new Nm(`Input should be at least 3D, but is ${l}D.`);const u=[1,0].concat(Ng(2,l));if(e=Ga(e,u),null!=i)throw new Am(\"The rnn() functoin of the deeplearn.js backend does not support constants yet.\");a&&console.warn(\"Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend.\"),null!=s&&((s=Sa(Sa(s,\"bool\"),\"float32\")).rank===l-1&&(s=Xu(s,-1)),s=Ga(s,u)),r&&(e=yh(e,0),null!=s&&(s=yh(s,0)));const c=[];let h,d=n;const p=e.shape[0],f=ed(e);let m,g;null!=s&&(m=ed(s));for(let e=0;e<p;++e){const n=f[e],r=Vo((()=>t(n,d)));if(null==s)h=r[0],d=r[1];else{const t=Vo((()=>{const t=m[e],n=wl(qc(t),t);return{output:el(sl(r[0],t),sl(d[0],n)),newStates:d.map(((e,s)=>el(sl(r[1][s],t),sl(e,n))))}}));h=t.output,d=t.newStates}o&&c.push(h)}return o&&(g=Vh(c,1)),[h,g,d]}))}dv.className=\"DepthwiseConv2D\",wo(dv);class mv extends qy{constructor(t){let e;if(super(t),null==t.cell)throw new Nm(\"cell property is missing for the constructor of RNN.\");if(e=Array.isArray(t.cell)?new Tv({cells:t.cell}):t.cell,null==e.stateSize)throw new Nm(\"The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).\");this.cell=e,this.returnSequences=null!=t.returnSequences&&t.returnSequences,this.returnState=null!=t.returnState&&t.returnState,this.goBackwards=null!=t.goBackwards&&t.goBackwards,this._stateful=null!=t.stateful&&t.stateful,this.unroll=null!=t.unroll&&t.unroll,this.supportsMasking=!0,this.inputSpec=[new Vy({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){return null==this.states_?Ng(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map((t=>null)):this.states_}setStates(t){this.states_=t}computeOutputShape(t){Dy(t)&&(t=t[0]),t=t;let e=this.cell.stateSize;Array.isArray(e)||(e=[e]);const n=e[0];let r;if(r=this.returnSequences?[t[0],t[1],n]:[t[0],n],this.returnState){const n=[];for(const r of e)n.push([t[0],r]);return[r].concat(n)}return r}computeMask(t,e){return Vo((()=>{Array.isArray(e)&&(e=e[0]);const t=this.returnSequences?e:null;if(this.returnState){const e=this.states.map((t=>null));return[t].concat(e)}return t}))}get states(){if(null==this.states_){const t=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,e=[];for(let n=0;n<t;++n)e.push(null);return e}return this.states_}set states(t){this.states_=t}build(t){if(null!=this.numConstants)throw new Am(\"Constants support is not implemented in RNN yet.\");Dy(t)&&(t=t[0]),t=t;const e=this.stateful?t[0]:null,n=t.slice(2);this.inputSpec[0]=new Vy({shape:[e,null,...n]});const r=[t[0]].concat(t.slice(2));let s;if(this.cell.build(r),s=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!lt(this.stateSpec.map((t=>t.shape[t.shape.length-1])),s))throw new Nm(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=s.map((t=>new Vy({shape:[null,t]})));this.stateful&&this.resetStates()}resetStates(t,e=!1){Vo((()=>{if(!this.stateful)throw new Im(\"Cannot call resetStates() on an RNN Layer that is not stateful.\");const n=this.inputSpec[0].shape[0];if(null==n)throw new Nm(\"If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \\n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.\");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((t=>$c([n,t]))):this.states_=[$c([n,this.cell.stateSize])];else if(null==t)Wo(this.states_),null!=this.keptStates&&(Wo(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((t=>$c([n,t]))):this.states_[0]=$c([n,this.cell.stateSize]);else{if(Array.isArray(t)||(t=[t]),t.length!==this.states_.length)throw new Nm(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: ${t}`);!0===e?this.keptStates.push(this.states_.slice()):Wo(this.states_);for(let e=0;e<this.states_.length;++e){const r=t[e],s=Array.isArray(this.cell.stateSize)?this.cell.stateSize[e]:this.cell.stateSize,i=[n,s];if(!lt(r.shape,i))throw new Nm(`State ${e} is incompatible with layer ${this.name}: expected shape=${i}, received shape=${r.shape}`);this.states_[e]=r}}this.states_=this.states_.map((t=>Go(t.clone())))}))}apply(t,e){let n=null==e?null:e.initialState,r=null==e?null:e.constants;null==e&&(e={});const s=pv(t,n,r,this.numConstants);t=s.inputs,n=s.initialState,r=s.constants;let i=[],a=[];if(null!=n){e.initialState=n,i=i.concat(n),this.stateSpec=[];for(const t of n)this.stateSpec.push(new Vy({shape:t.shape}));a=a.concat(this.stateSpec)}if(null!=r&&(e.constants=r,i=i.concat(r),this.numConstants=r.length),i[0]instanceof Wy){const n=[t].concat(i),r=this.inputSpec.concat(a),s=this.inputSpec;this.inputSpec=r;const o=super.apply(n,e);return this.inputSpec=s,o}return super.apply(t,e)}call(t,e){return Vo((()=>{const n=null==e?null:e.mask,r=null==e?null:e.training;let s=null==e?null:e.initialState;t=$y(t),null==s&&(s=this.stateful?this.states_:this.getInitialState(t));const i=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(s.length!==i)throw new Nm(`RNN Layer has ${i} state(s) but was passed ${s.length} initial state(s).`);this.unroll&&console.warn(\"Ignoring unroll = true for RNN layer, due to imperative backend.\");const a={training:r},o=fv(((t,e)=>{const n=this.cell.call([t].concat(e),a);return[n[0],n.slice(1)]}),t,s,this.goBackwards,n,null,this.unroll,this.returnSequences),l=o[0],u=o[1],c=o[2];this.stateful&&this.resetStates(c,r);const h=this.returnSequences?u:l;return this.returnState?[h].concat(c):h}))}getInitialState(t){return Vo((()=>{let e=$c(t.shape);return e=yc(e,[1,2]),e=Rg(e),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map((t=>t>1?Pg(e,[1,t]):e)):this.cell.stateSize>1?[Pg(e,[1,this.cell.stateSize])]:[e]}))}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(t)}getConfig(){const t=super.getConfig(),e={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(e.numConstants=this.numConstants);const n=this.cell.getConfig();return this.getClassName()===mv.className&&(e.cell={className:this.cell.getClassName(),config:n}),Object.assign({},n,t,e)}static fromConfig(t,e,n={}){const r=lx(e.cell,n);return new t(Object.assign(e,{cell:r}))}}mv.className=\"RNN\",wo(mv);class gv extends qy{}class yv extends gv{constructor(t){super(t),this.DEFAULT_ACTIVATION=\"tanh\",this.DEFAULT_KERNEL_INITIALIZER=\"glorotNormal\",this.DEFAULT_RECURRENT_INITIALIZER=\"orthogonal\",this.DEFAULT_BIAS_INITIALIZER=\"zeros\",this.units=t.units,Km(this.units,\"units\"),this.activation=Fb(null==t.activation?this.DEFAULT_ACTIVATION:t.activation),this.useBias=null==t.useBias||t.useBias,this.kernelInitializer=fy(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=fy(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=fy(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Vb(t.kernelRegularizer),this.recurrentRegularizer=Vb(t.recurrentRegularizer),this.biasRegularizer=Vb(t.biasRegularizer),this.kernelConstraint=og(t.kernelConstraint),this.recurrentConstraint=og(t.recurrentConstraint),this.biasConstraint=og(t.biasConstraint),this.dropout=Ig([1,Cg([0,null==t.dropout?0:t.dropout])]),this.recurrentDropout=Ig([1,Cg([0,null==t.recurrentDropout?0:t.recurrentDropout])]),this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){t=Oy(t),this.kernel=this.addWeight(\"kernel\",[t[t.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight(\"recurrent_kernel\",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight(\"bias\",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return Vo((()=>{if(2!==(t=t).length)throw new Nm(`SimpleRNNCell expects 2 input Tensors, got ${t.length}.`);let n=t[1];t=t[0];const r=null!=e.training&&e.training;let s;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=_v({ones:()=>qc(t),rate:this.dropout,training:r})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=_v({ones:()=>qc(n),rate:this.recurrentDropout,training:r}));const i=this.dropoutMask,a=this.recurrentDropoutMask;s=Bg(null!=i?sl(t,i):t,this.kernel.read()),null!=this.bias&&(s=Gg(s,this.bias.read())),null!=a&&(n=sl(n,a));let o=el(s,Bg(n,this.recurrentKernel.read()));return null!=this.activation&&(o=this.activation.apply(o)),[o,o]}))}getConfig(){const t=super.getConfig(),e={units:this.units,activation:Lb(this.activation),useBias:this.useBias,kernelInitializer:py(this.kernelInitializer),recurrentInitializer:py(this.recurrentInitializer),biasInitializer:py(this.biasInitializer),kernelRegularizer:Bb(this.kernelRegularizer),recurrentRegularizer:Bb(this.recurrentRegularizer),biasRegularizer:Bb(this.biasRegularizer),activityRegularizer:Bb(this.activityRegularizer),kernelConstraint:ig(this.kernelConstraint),recurrentConstraint:ig(this.recurrentConstraint),biasConstraint:ig(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign({},t,e)}}yv.className=\"SimpleRNNCell\",wo(yv);class xv extends mv{constructor(t){t.cell=new yv(t),super(t)}call(t,e){return Vo((()=>{null!=this.cell.dropoutMask&&(Wo(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Wo(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==e?null:e.mask,r=null==e?null:e.training,s=null==e?null:e.initialState;return super.call(t,{mask:n,training:r,initialState:s})}))}static fromConfig(t,e){return new t(e)}}xv.className=\"SimpleRNN\",wo(xv);class bv extends gv{constructor(t){if(super(t),this.DEFAULT_ACTIVATION=\"tanh\",this.DEFAULT_RECURRENT_ACTIVATION=\"hardSigmoid\",this.DEFAULT_KERNEL_INITIALIZER=\"glorotNormal\",this.DEFAULT_RECURRENT_INITIALIZER=\"orthogonal\",this.DEFAULT_BIAS_INITIALIZER=\"zeros\",t.resetAfter)throw new Nm(\"GRUCell does not support reset_after parameter set to true.\");this.units=t.units,Km(this.units,\"units\"),this.activation=Fb(void 0===t.activation?this.DEFAULT_ACTIVATION:t.activation),this.recurrentActivation=Fb(void 0===t.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:t.recurrentActivation),this.useBias=null==t.useBias||t.useBias,this.kernelInitializer=fy(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=fy(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=fy(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=Vb(t.kernelRegularizer),this.recurrentRegularizer=Vb(t.recurrentRegularizer),this.biasRegularizer=Vb(t.biasRegularizer),this.kernelConstraint=og(t.kernelConstraint),this.recurrentConstraint=og(t.recurrentConstraint),this.biasConstraint=og(t.biasConstraint),this.dropout=Ig([1,Cg([0,null==t.dropout?0:t.dropout])]),this.recurrentDropout=Ig([1,Cg([0,null==t.recurrentDropout?0:t.recurrentDropout])]),this.implementation=t.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){const e=(t=Oy(t))[t.length-1];this.kernel=this.addWeight(\"kernel\",[e,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight(\"recurrent_kernel\",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight(\"bias\",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(t,e){return Vo((()=>{if(2!==(t=t).length)throw new Nm(`GRUCell expects 2 input Tensors (inputs, h, c), got ${t.length}.`);const n=null!=e.training&&e.training;let r=t[1];t=t[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=_v({ones:()=>qc(t),rate:this.dropout,training:n,count:3})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=_v({ones:()=>qc(r),rate:this.recurrentDropout,training:n,count:3}));const s=this.dropoutMask,i=this.recurrentDropoutMask;let a,o,l;0<this.dropout&&this.dropout<1&&(t=sl(t,s[0]));let u=Bg(t,this.kernel.read());this.useBias&&(u=Gg(u,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(r=sl(r,i[0]));const c=this.recurrentKernel.read(),[h,d]=Ph(c,[2*this.units,this.units],c.rank-1),p=Bg(r,h),[f,m,g]=Ph(u,3,u.rank-1),[y,x]=Ph(p,2,p.rank-1);a=this.recurrentActivation.apply(el(f,y)),o=this.recurrentActivation.apply(el(m,x));const b=Bg(sl(o,r),d);l=this.activation.apply(el(g,b));const v=el(sl(a,r),sl(el(1,pc(a)),l));return[v,v]}))}getConfig(){const t=super.getConfig(),e={units:this.units,activation:Lb(this.activation),recurrentActivation:Lb(this.recurrentActivation),useBias:this.useBias,kernelInitializer:py(this.kernelInitializer),recurrentInitializer:py(this.recurrentInitializer),biasInitializer:py(this.biasInitializer),kernelRegularizer:Bb(this.kernelRegularizer),recurrentRegularizer:Bb(this.recurrentRegularizer),biasRegularizer:Bb(this.biasRegularizer),activityRegularizer:Bb(this.activityRegularizer),kernelConstraint:ig(this.kernelConstraint),recurrentConstraint:ig(this.recurrentConstraint),biasConstraint:ig(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign({},t,e)}}bv.className=\"GRUCell\",wo(bv);class vv extends mv{constructor(t){0===t.implementation&&console.warn(\"`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call.\"),t.cell=new bv(t),super(t)}call(t,e){return Vo((()=>{null!=this.cell.dropoutMask&&(Wo(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Wo(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==e?null:e.mask,r=null==e?null:e.training,s=null==e?null:e.initialState;return super.call(t,{mask:n,training:r,initialState:s})}))}static fromConfig(t,e){return 0===e.implmentation&&(e.implementation=1),new t(e)}}vv.className=\"GRU\",wo(vv);class wv extends gv{constructor(t){super(t),this.DEFAULT_ACTIVATION=\"tanh\",this.DEFAULT_RECURRENT_ACTIVATION=\"hardSigmoid\",this.DEFAULT_KERNEL_INITIALIZER=\"glorotNormal\",this.DEFAULT_RECURRENT_INITIALIZER=\"orthogonal\",this.DEFAULT_BIAS_INITIALIZER=\"zeros\",this.units=t.units,Km(this.units,\"units\"),this.activation=Fb(void 0===t.activation?this.DEFAULT_ACTIVATION:t.activation),this.recurrentActivation=Fb(void 0===t.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:t.recurrentActivation),this.useBias=null==t.useBias||t.useBias,this.kernelInitializer=fy(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=fy(t.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=fy(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=t.unitForgetBias,this.kernelRegularizer=Vb(t.kernelRegularizer),this.recurrentRegularizer=Vb(t.recurrentRegularizer),this.biasRegularizer=Vb(t.biasRegularizer),this.kernelConstraint=og(t.kernelConstraint),this.recurrentConstraint=og(t.recurrentConstraint),this.biasConstraint=og(t.biasConstraint),this.dropout=Ig([1,Cg([0,null==t.dropout?0:t.dropout])]),this.recurrentDropout=Ig([1,Cg([0,null==t.recurrentDropout?0:t.recurrentDropout])]),this.implementation=t.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(t){var e;const n=(t=Oy(t))[t.length-1];let r;if(this.kernel=this.addWeight(\"kernel\",[n,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight(\"recurrent_kernel\",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const t=this.biasInitializer,n=this.units;r=new((e=class extends Kg{apply(e,r){const s=t.apply([n]),i=(new Zg).apply([n]),a=t.apply([2*n]);return Og(Og(s,i),a)}}).className=\"CustomInit\",e)}else r=this.biasInitializer;this.bias=this.addWeight(\"bias\",[4*this.units],null,r,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(t,e){return Vo((()=>{const n=null!=e.training&&e.training;if(3!==(t=t).length)throw new Nm(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${t.length}.`);let r=t[1];const s=t[2];t=t[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=_v({ones:()=>qc(t),rate:this.dropout,training:n,count:4})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=_v({ones:()=>qc(r),rate:this.recurrentDropout,training:n,count:4}));const i=this.dropoutMask,a=this.recurrentDropoutMask;let o,l,u,c;0<this.dropout&&this.dropout<1&&(t=sl(t,i[0]));let h=Bg(t,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(r=sl(r,a[0])),h=el(h,Bg(r,this.recurrentKernel.read())),this.useBias&&(h=Gg(h,this.bias.read()));const[d,p,f,m]=Ph(h,4,h.rank-1);o=this.recurrentActivation.apply(d),l=this.recurrentActivation.apply(p),u=el(sl(l,s),sl(o,this.activation.apply(f))),c=this.recurrentActivation.apply(m);const g=sl(c,this.activation.apply(u));return[g,g,u]}))}getConfig(){const t=super.getConfig(),e={units:this.units,activation:Lb(this.activation),recurrentActivation:Lb(this.recurrentActivation),useBias:this.useBias,kernelInitializer:py(this.kernelInitializer),recurrentInitializer:py(this.recurrentInitializer),biasInitializer:py(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:Bb(this.kernelRegularizer),recurrentRegularizer:Bb(this.recurrentRegularizer),biasRegularizer:Bb(this.biasRegularizer),activityRegularizer:Bb(this.activityRegularizer),kernelConstraint:ig(this.kernelConstraint),recurrentConstraint:ig(this.recurrentConstraint),biasConstraint:ig(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign({},t,e)}}wv.className=\"LSTMCell\",wo(wv);class Sv extends mv{constructor(t){0===t.implementation&&console.warn(\"`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call.\"),t.cell=new wv(t),super(t)}call(t,e){return Vo((()=>{null!=this.cell.dropoutMask&&(Wo(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Wo(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==e?null:e.mask,r=null==e?null:e.training,s=null==e?null:e.initialState;return super.call(t,{mask:n,training:r,initialState:s})}))}static fromConfig(t,e){return 0===e.implmentation&&(e.implementation=1),new t(e)}}Sv.className=\"LSTM\",wo(Sv);class Tv extends gv{constructor(t){super(t),this.cells=t.cells}get stateSize(){const t=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?t.push(...e.stateSize):t.push(e.stateSize);return t}call(t,e){return Vo((()=>{let n=(t=t).slice(1);const r=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?r.push(n.splice(0,t.stateSize.length)):r.push(n.splice(0,1));r.reverse();const s=[];let i;for(let a=0;a<this.cells.length;++a){const o=this.cells[a];n=r[a],i=0===a?[t[0]].concat(n):[i[0]].concat(n),i=o.call(i,e),s.push(i.slice(1))}n=[];for(const t of s.slice().reverse())n.push(...t);return[i[0]].concat(n)}))}build(t){let e;Dy(t)&&(t=t[0]),t=t,this.cells.forEach(((n,r)=>{Sg(`RNNCell_${r}`,(()=>{n.build(t),e=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,t=[t[0],e]}))})),this.built=!0}getConfig(){const t=super.getConfig(),e={cells:this.cells.map((t=>({className:t.getClassName(),config:t.getConfig()})))};return Object.assign({},t,e)}static fromConfig(t,e,n={}){const r=[];for(const t of e.cells)r.push(lx(t,n));return new t({cells:r})}get trainableWeights(){if(!this.trainable)return[];const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t}get nonTrainableWeights(){const t=[];for(const e of this.cells)t.push(...e.nonTrainableWeights);if(!this.trainable){const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e.concat(t)}return t}getWeights(){const t=[];for(const e of this.cells)t.push(...e.weights);return By(t)}setWeights(t){const e=[];for(const n of this.cells){const r=n.weights.length,s=t.splice(r);for(let t=0;t<n.weights.length;++t)e.push([n.weights[t],s[t]])}Uy(e)}}function _v(t){const{ones:e,rate:n,training:r=!1,count:s=1}=t,i=()=>Hg(e(),n),a=()=>jg(i,e,r);return!s||s<=1?Go(a().clone()):Array(s).fill(void 0).map(a).map((t=>Go(t.clone())))}Tv.className=\"StackedRNNCells\",wo(Tv);class Mv extends mv{constructor(t){if(t.unroll)throw new Am(\"Unrolling is not possible with convolutional RNNs.\");if(Array.isArray(t.cell))throw new Am(\"It is not possible at the moment to stack convolutional cells.\");super(t),this.inputSpec=[new Vy({ndim:5})]}call(t,e){return Vo((()=>{if(null!=this.cell.dropoutMask&&(Wo(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(Wo(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),e&&e.constants)throw new Nm(\"ConvRNN2D cell does not support constants\");const n=null==e?null:e.mask,r=null==e?null:e.training,s=null==e?null:e.initialState;return super.call(t,{mask:n,training:r,initialState:s})}))}computeOutputShape(t){let e=this.computeSingleOutputShape(t);return this.returnSequences||(e=[e[0],...e.slice(2)]),this.returnState&&(e=[e,...Array(2).fill([t[0],...e.slice(-3)])]),e}getInitialState(t){return Vo((()=>{const{stateSize:e}=this.cell,n=t.shape,r=this.computeSingleOutputShape(n),s=$c([r[0],...r.slice(2)]);return Array.isArray(e)?Array(e.length).fill(s):[s]}))}resetStates(t,e=!1){Vo((()=>{if(!this.stateful)throw new Im(\"Cannot call resetStates() on an RNN Layer that is not stateful.\");const n=this.inputSpec[0].shape,r=this.computeSingleOutputShape(n),s=[r[0],...r.slice(2)];if(null==n[0])throw new Nm(\"If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \\n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.\");if(null==this.getStates())Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>$c(s))):this.states_=[$c(s)];else if(null==t)Wo(this.states_),null!=this.keptStates&&(Wo(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>$c(s))):this.states_[0]=$c(s);else{if(Array.isArray(t)||(t=[t]),t.length!==this.states_.length)throw new Nm(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${t.length} state value(s). Input received: ${t}`);e?this.keptStates.push(this.states_.slice()):Wo(this.states_);for(let e=0;e<this.states_.length;++e){const n=t[e],r=s;if(!lt(n.shape,r))throw new Nm(`State ${e} is incompatible with layer ${this.name}: expected shape=${r}, received shape=${n.shape}`);this.states_[e]=n}}this.states_=this.states_.map((t=>Go(t.clone())))}))}computeSingleOutputShape(t){const{dataFormat:e,filters:n,kernelSize:r,padding:s,strides:i,dilationRate:a}=this.cell,o=\"channelsFirst\"===e,l=t[o?3:2],u=t[o?4:3],c=Yb(l,r[0],s,i[0],a[0]),h=Yb(u,r[1],s,i[1],a[1]);return[...t.slice(0,2),...o?[n,c,h]:[c,h,n]]}}Mv.className=\"ConvRNN2D\";class kv extends wv{constructor(t){const{filters:e,kernelSize:n,strides:r,padding:s,dataFormat:i,dilationRate:a}=t;super(Object.assign({},t,{units:e})),this.filters=e,Km(this.filters,\"filters\"),this.kernelSize=Kb(n,2,\"kernelSize\"),this.kernelSize.forEach((t=>Km(t,\"kernelSize\"))),this.strides=Kb(r||1,2,\"strides\"),this.strides.forEach((t=>Km(t,\"strides\"))),this.padding=s||\"valid\",bg(this.padding),this.dataFormat=i||\"channelsLast\",xg(this.dataFormat),this.dilationRate=Kb(a||1,2,\"dilationRate\"),this.dilationRate.forEach((t=>Km(t,\"dilationRate\")))}build(t){var e;t=Oy(t);const n=\"channelsFirst\"===this.dataFormat?1:t.length-1;if(null==t[n])throw new Nm(`The channel dimension of the input should be defined. Found ${t[n]}`);const r=t[n],s=this.kernelSize.concat([r,4*this.filters]);this.kernel=this.addWeight(\"kernel\",s,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const i=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight(\"recurrent_kernel\",i,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let t;if(this.unitForgetBias){const n=this.biasInitializer,r=this.filters;t=new((e=class extends Kg{apply(t,e){return $g([n.apply([r]),Oc([r]),n.apply([2*r])])}}).className=\"CustomInit\",e)}else t=this.biasInitializer;this.bias=this.addWeight(\"bias\",[4*this.filters],null,t,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(t,e){return Vo((()=>{if(3!==t.length)throw new Nm(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${t.length}.`);const n=e.training||!1,r=t[0],s=t[1],i=t[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=_v({ones:()=>qc(r),rate:this.dropout,training:n,count:4}));const a=this.dropoutMask,o=(t,e,n)=>e&&e[n]?sl(e[n],t):t;let l=o(r,a,0),u=o(r,a,1),c=o(r,a,2),h=o(r,a,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=_v({ones:()=>qc(s),rate:this.recurrentDropout,training:n,count:4}));const d=this.recurrentDropoutMask;let p=o(s,d,0),f=o(s,d,1),m=o(s,d,2),g=o(s,d,3);const[y,x,b,v]=Ph(this.kernel.read(),4,3),[w,S,T,_]=this.useBias?Ph(this.bias.read(),4):[null,null,null,null];l=this.inputConv(l,y,w,this.padding),u=this.inputConv(u,x,S,this.padding),c=this.inputConv(c,b,T,this.padding),h=this.inputConv(h,v,_,this.padding);const[M,k,E,I]=Ph(this.recurrentKernel.read(),4,3);p=this.recurrentConv(p,M),f=this.recurrentConv(f,k),m=this.recurrentConv(m,E),g=this.recurrentConv(g,I);const C=this.recurrentActivation.apply(el(l,p)),N=this.recurrentActivation.apply(el(u,f)),A=el(sl(N,i),sl(C,this.activation.apply(el(c,m)))),R=sl(this.recurrentActivation.apply(el(h,g)),this.activation.apply(A));return[R,R,A]}))}getConfig(){const t=super.getConfig(),{units:e}=t,n=function(t,e){var n={};for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&\"function\"==typeof Object.getOwnPropertySymbols){var s=0;for(r=Object.getOwnPropertySymbols(t);s<r.length;s++)e.indexOf(r[s])<0&&Object.prototype.propertyIsEnumerable.call(t,r[s])&&(n[r[s]]=t[r[s]])}return n}(t,[\"units\"]),r={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign({},n,r)}inputConv(t,e,n,r){const s=Mu(t,e,this.strides,r||\"valid\",\"channelsFirst\"===this.dataFormat?\"NCHW\":\"NHWC\",this.dilationRate);return n?Gg(s,n,this.dataFormat):s}recurrentConv(t,e){return Mu(t,e,1,\"same\",\"channelsFirst\"===this.dataFormat?\"NCHW\":\"NHWC\")}}kv.className=\"ConvLSTM2DCell\",wo(kv);class Ev extends Mv{constructor(t){const e=new kv(t);super(Object.assign({},t,{cell:e}))}static fromConfig(t,e){return new t(e)}}Ev.className=\"ConvLSTM2D\",wo(Ev);class Iv extends qy{constructor(t){super(t),this.rate=Math.max(Math.min(t.rate,1),0),this.noiseShape=t.noiseShape,this.seed=t.seed,this.supportsMasking=!0}getNoiseShape(t){if(null==this.noiseShape)return this.noiseShape;const e=t.shape,n=[];for(let t=0;t<this.noiseShape.length;++t)n.push(null==this.noiseShape[t]?e[t]:this.noiseShape[t]);return n}call(t,e){return Vo((()=>{this.invokeCallHook(t,e);const n=$y(t);if(0<this.rate&&this.rate<1){const t=null!=e.training&&e.training,r=this.getNoiseShape(n);return jg((()=>Hg(n,this.rate,r,this.seed)),(()=>n),t)}return t}))}getConfig(){const t={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},e=super.getConfig();return Object.assign(t,e),t}dispose(){return super.dispose()}}Iv.className=\"Dropout\",wo(Iv);class Cv extends Iv{constructor(t){super(t),this.inputSpec=[{ndim:3}]}getNoiseShape(t){const e=t.shape;return[e[0],1,e[2]]}}Cv.className=\"SpatialDropout1D\",wo(Cv);class Nv extends qy{constructor(t){if(super(t),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER=\"glorotNormal\",this.DEFAULT_BIAS_INITIALIZER=\"zeros\",null==t.batchInputShape&&null==t.inputShape&&null!=t.inputDim){let e=null;null!=t.batchSize&&(e=t.batchSize),this.batchInputShape=[e,t.inputDim]}this.units=t.units,Km(this.units,\"units\"),this.activation=Fb(t.activation),null!=t.useBias&&(this.useBias=t.useBias),this.kernelInitializer=fy(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=fy(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=og(t.kernelConstraint),this.biasConstraint=og(t.biasConstraint),this.kernelRegularizer=Vb(t.kernelRegularizer),this.biasRegularizer=Vb(t.biasRegularizer),this.activityRegularizer=Vb(t.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(t){const e=(t=Oy(t))[t.length-1];null==this.kernel&&(this.kernel=this.addWeight(\"kernel\",[e,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight(\"bias\",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:e}}],this.built=!0}computeOutputShape(t){const e=(t=Oy(t)).slice();return e[e.length-1]=this.units,e}call(t,e){return Vo((()=>{this.invokeCallHook(t,e);const n=$y(t),r=Zm(this.activation.getClassName());let s;return null!=r?s=Bg(n,this.kernel.read(),r,this.bias?this.bias.read():null):(s=Bg(n,this.kernel.read()),null!=this.bias&&(s=Gg(s,this.bias.read())),null!=this.activation&&(s=this.activation.apply(s))),s}))}getConfig(){const t={units:this.units,activation:Lb(this.activation),useBias:this.useBias,kernelInitializer:py(this.kernelInitializer),biasInitializer:py(this.biasInitializer),kernelRegularizer:Bb(this.kernelRegularizer),biasRegularizer:Bb(this.biasRegularizer),activityRegularizer:Bb(this.activityRegularizer),kernelConstraint:ig(this.kernelConstraint),biasConstraint:ig(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}}Nv.className=\"Dense\",wo(Nv);class Av extends qy{constructor(t){super(t=t||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=t.dataFormat}computeOutputShape(t){t=Oy(t);for(const e of t.slice(1))if(null==e)throw new Nm(`The shape of the input to \"Flatten\" is not fully defined (got ${t.slice(1)}). Make sure to pass a complete \"input_shape\" or \"batch_input_shape\" argument to the first layer in your model.`);return[t[0],Eg(t,1)]}call(t,e){return Vo((()=>{this.invokeCallHook(t,e);let n=$y(t);if(\"channelsFirst\"===this.dataFormat&&n.rank>1){const t=[0];for(let e=2;e<n.rank;++e)t.push(e);t.push(1),n=Ga(n,t)}return function(t){if(t.rank<=1)throw new Nm(`batchFlatten requires a minimum rank of 2. Got rank: ${t.rank}.`);const e=[t.shape[0],Eg(t.shape,1)];return ru(t,e)}(n)}))}getConfig(){const t={};null!=this.dataFormat&&(t.dataFormat=this.dataFormat);const e=super.getConfig();return Object.assign(t,e),t}}Av.className=\"Flatten\",wo(Av);class Rv extends qy{constructor(t){super(t),this.supportsMasking=!0,this.activation=Fb(t.activation)}call(t,e){return Vo((()=>{this.invokeCallHook(t,e);const n=$y(t);return this.activation.apply(n)}))}getConfig(){const t={activation:Lb(this.activation)},e=super.getConfig();return Object.assign(t,e),t}}Rv.className=\"Activation\",wo(Rv);class Lv extends qy{constructor(t){super(t),this.n=t.n,this.inputSpec=[{ndim:2}]}computeOutputShape(t){return[t[0],this.n,t[1]]}call(t,e){return Vo((()=>{return t=$y(t),e=t,n=this.n,Vo((()=>{if(2!==e.shape.length)throw new Nm(`repeat() expects a rank-2 tensor, but received a rank-${e.shape.length} tensor.`);return Pg(Rg(e,1),[1,n,1])}));var e,n}))}getConfig(){const t={n:this.n},e=super.getConfig();return Object.assign(t,e),t}}Lv.className=\"RepeatVector\",wo(Lv);class Dv extends qy{constructor(t){super(t),this.targetShape=t.targetShape;for(let t=0;t<this.targetShape.length;++t)this.isUnknown(this.targetShape[t])&&(this.targetShape[t]=null)}isUnknown(t){return t<0||null==t}fixUnknownDimension(t,e){const n=\"Total size of new array must be unchanged.\",r=e.slice();let s=1,i=null;for(let t=0;t<r.length;++t){const e=r[t];if(this.isUnknown(e)){if(null!==i)throw new Nm(\"Can only specifiy one unknown dimension.\");i=t}else s*=e}const a=Eg(t);if(null!==i){if(0===s||a%s!=0)throw new Nm(n);r[i]=a/s}else if(a!==s)throw new Nm(n);return r}computeOutputShape(t){let e=!1;for(let n=0;n<t.length;++n)if(this.isUnknown(t[n])){e=!0;break}return e?t.slice(0,1).concat(this.targetShape):t.slice(0,1).concat(this.fixUnknownDimension(t.slice(1),this.targetShape))}call(t,e){return Vo((()=>{this.invokeCallHook(t,e);const n=$y(t),r=n.shape,s=r.slice(0,1).concat(this.fixUnknownDimension(r.slice(1),this.targetShape));return ru(n,s)}))}getConfig(){const t={targetShape:this.targetShape},e=super.getConfig();return Object.assign(t,e),t}}Dv.className=\"Reshape\",wo(Dv);class Fv extends qy{constructor(t){if(super(t),null==t.dims)throw new Error(\"Required configuration field `dims` is missing during Permute constructor call.\");if(!Array.isArray(t.dims))throw new Error(`Permute constructor requires \\`dims\\` to be an Array, but received ${t.dims} instead.`);const e=Ng(1,t.dims.length+1);if(!lt(t.dims.slice().sort(),e))throw new Error(\"Invalid permutation `dims`: \"+JSON.stringify(t.dims)+\" `dims` must contain consecutive integers starting from 1.\");this.dims=t.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new Vy({ndim:this.dims.length+1})]}computeOutputShape(t){const e=(t=Oy(t)).slice();return this.dims.forEach(((n,r)=>{e[r+1]=t[n]})),e}call(t,e){return Ga($y(t),this.dimsIncludingBatch)}getConfig(){const t={dims:this.dims},e=super.getConfig();return Object.assign(t,e),t}}Fv.className=\"Permute\",wo(Fv);class $v extends qy{constructor(t){super(null==t?{}:t),this.supportsMasking=!0,this.maskValue=null!=t?null==t.maskValue?0:t.maskValue:0}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={maskValue:this.maskValue};return Object.assign(e,t),e}computeMask(t,e){const n=$y(t);return $l(jc(n,this.maskValue),-1)}call(t,e){return Vo((()=>{this.invokeCallHook(t,e);const n=$y(t),r=$l(jc(n,this.maskValue),-1,!0);return sl(n,Sa(r,n.dtype))}))}}$v.className=\"Masking\",wo($v);class Ov extends qy{constructor(t){if(super(t),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER=\"randomUniform\",null==t.batchInputShape&&null==t.inputShape){let e=null;null!=t.batchSize&&(e=t.batchSize),null==t.inputLength?this.batchInputShape=[e,null]:this.batchInputShape=[e].concat(Om(t.inputLength))}this.inputDim=t.inputDim,Km(this.inputDim,\"inputDim\"),this.outputDim=t.outputDim,Km(this.outputDim,\"outputDim\"),this.embeddingsInitializer=fy(t.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=Vb(t.embeddingsRegularizer),this.activityRegularizer=Vb(t.activityRegularizer),this.embeddingsConstraint=og(t.embeddingsConstraint),this.maskZero=t.maskZero,this.supportsMasking=t.maskZero,this.inputLength=t.inputLength}build(t){this.embeddings=this.addWeight(\"embeddings\",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(t){}computeMask(t,e){return Vo((()=>this.maskZero?(t=$y(t),jc(t,ol(t))):null))}computeOutputShape(t){if(t=Oy(t),null==this.inputLength)return[...t,this.outputDim];const e=Om(this.inputLength);if(e.length!==t.length-1)throw new Nm(`\"inputLength\" is ${this.inputLength}, but received input shape has shape ${t}`);{let n=0;for(let r=0;r<e.length;++r){const s=e[r],i=t[r+1];if(null!=s&&null!=i&&s!==i)throw new Nm(`\"inputLength\" is ${this.inputLength}, but received input shape has shape ${t}`);null==s&&(e[n]=i),n++}}return[t[0],...e,this.outputDim]}call(t,e){return Vo((()=>{this.invokeCallHook(t,e);let n=$y(t);\"int32\"!==n.dtype&&(n=Ag(n,\"int32\"));const r=Ug(this.embeddings.read(),ru(n,[n.size]));return ru(r,Oy(this.computeOutputShape(n.shape)))}))}getConfig(){const t={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:py(this.embeddingsInitializer),embeddingsRegularizer:Bb(this.embeddingsRegularizer),activityRegularizer:Bb(this.activityRegularizer),embeddingsConstraint:ig(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},e=super.getConfig();return Object.assign(t,e),t}}Ov.className=\"Embedding\",wo(Ov);class Pv extends qy{constructor(t){super(t||{}),this.supportsMasking=!0}mergeFunction(t){throw new Am}computeElementwiseOpOutputShape(t,e){if(null==t||null==e)return null;if(t.length<e.length)return this.computeElementwiseOpOutputShape(e,t);if(0===e.length)return t;const n=t.slice(0,t.length-e.length);for(let r=0;r<e.length;++r){const s=t[t.length-e.length+r],i=e[r];if(null==s||null==i||s<0||i<0)n.push(null);else if(1===s)n.push(i);else if(1===i)n.push(s);else{if(s!==i)throw new Nm(\"Operands could not be broadcast together with shapes \"+JSON.stringify(t)+\" \"+JSON.stringify(e));n.push(s)}}return n}build(t){if(Array.isArray(t)&&!Array.isArray(t[0])&&(t=[Oy(t)]),(t=t).length<2)throw new Nm(`A merge layer should be called on an Array of at least 2 inputs. Got ${t.length} input(s).`);let e=[];for(const n of t)null!=n&&null!==n[0]&&e.push(n[0]);if(e=Hm(e),e.length>1)throw new Nm(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(t)}.`);let n=null==t[0]?null:t[0].slice(1);for(let e=1;e<t.length;++e){const r=null==t[e]?null:t[e].slice(1);n=this.computeElementwiseOpOutputShape(n,r)}const r=t.map((t=>t.length));-1===t.indexOf(null)&&1===Hm(r).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(t,e){return Vo((()=>{if(t=t,this.reshapeRequired){const e=[],n=t.map((t=>t.rank));if(-1===n.indexOf(null)){const r=Cg(n);for(let n of t){const t=n.rank;for(let e=0;e<r-t;++e)n=Rg(n,1);e.push(n)}return this.mergeFunction(e)}{let n=!1;for(const r of t){const t=r.rank;if(null==t){const t=r.shape,s=t[0],i=t.slice(1).concat([s]);let a=ru(r,[s].concat(Eg(t.slice(1))));a=Ga(a,[1,0]),a=ru(a,i),e.push(a),n=!0}else if(t>1){const s=Ng(1,t).concat([0]);e.push(Ga(r,s)),n=!0}else e.push(r)}let r=this.mergeFunction(e);const s=r.rank;if(n)if(null==s){const t=r.shape,e=t[t.length-1],n=[e].concat(t.slice(0,t.length-1));r=ru(Ga(ru(r,[-1,e]),[1,0]),n)}else if(s>1){const t=[s-1].concat(Ng(0,s-1));r=Ga(r,t)}return r}}return this.mergeFunction(t)}))}computeOutputShape(t){let e;e=null==(t=t)[0]?null:t[0].slice(1);for(let n=1;n<t.length;++n){const r=null==t[n]?null:t[n].slice(1);e=this.computeElementwiseOpOutputShape(e,r)}let n=[];for(const e of t)null!=e&&null!==e[0]&&n.push(e[0]);return n=Hm(n),e=1===n.length?n.concat(e):[null].concat(e),e}computeMask(t,e){return Vo((()=>{if(null==e)return null;if(!Array.isArray(e))throw new Nm(\"`mask` should be an Array\");if(!Array.isArray(t))throw new Nm(\"`inputs` should be an Array\");if(e.length!==t.length)throw new Nm(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${t.length} vs ${e.length})`);if(e.every((t=>null==t)))return null;let n=(e=e.map((t=>null==t?t:Xu(t,0))))[0];for(let t=1;t<e.length-1;++t)n=Ic(n,e[t]);return n}))}}class zv extends Pv{constructor(t){super(t)}mergeFunction(t){return Vo((()=>{let e=t[0].clone();for(let n=1;n<t.length;++n)e=el(e,t[n]);return e}))}}zv.className=\"Add\",wo(zv);class Bv extends Pv{constructor(t){super(t)}mergeFunction(t){return Vo((()=>{let e=t[0].clone();for(let n=1;n<t.length;++n)e=sl(e,t[n]);return e}))}}Bv.className=\"Multiply\",wo(Bv);class Uv extends Pv{constructor(t){super(t)}mergeFunction(t){return Vo((()=>{let e=t[0].clone();for(let n=1;n<t.length;++n)e=el(e,t[n]);return sl(1/t.length,e)}))}}Uv.className=\"Average\",wo(Uv);class Vv extends Pv{constructor(t){super(t)}mergeFunction(t){return Vo((()=>{let e=t[0];for(let n=1;n<t.length;++n)e=El(e,t[n]);return e}))}}Vv.className=\"Maximum\",wo(Vv);class Wv extends Pv{constructor(t){super(t)}mergeFunction(t){return Vo((()=>{let e=t[0];for(let n=1;n<t.length;++n)e=Bc(e,t[n]);return e}))}}Wv.className=\"Minimum\",wo(Wv);class Gv extends Pv{constructor(t){super(t),this.DEFAULT_AXIS=-1,null==t&&(t={}),this.axis=null==t.axis?this.DEFAULT_AXIS:t.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(t){if(!Array.isArray(t)||!Array.isArray(t[0])||1===t.length)throw new Nm(\"A `Concatenate` layer should be called on a list of at least 2 inputs\");t=t;let e=!0;for(const n of t)if(null!=n){e=!1;break}if(e)return;const n=[];for(let e=0;e<t.length;++e){const r=t[e].slice();r.splice(this.axis,1);let s=!1;for(const t of n)if(lt(t,r)){s=!0;break}s||n.push(r)}if(n.length>1)throw new Nm(\"A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: \"+JSON.stringify(t))}mergeFunction(t){return Vo((()=>$g(t,this.axis)))}computeOutputShape(t){if(!Array.isArray(t)||!Array.isArray(t[0]))throw new Nm(\"A `Concatenate` layer should be called on a list of inputs.\");const e=t,n=e[0].slice(),r=this.axis<0?n.length+this.axis:this.axis;for(const t of e.slice(1)){if(null==n[r]||null==t[r]){n[r]=null;break}n[r]+=t[r]}return n}computeMask(t,e){if(null==e)return null;if(!Array.isArray(e))throw new Nm(\"`mask` should be an array for Concatenate\");if(!Array.isArray(t))throw new Nm(\"`inputs` should be an array for Concatenate\");if(e.length!==t.length)throw new Nm(`Mismatch in the length of mask (${e.length}) and the legnth of inputs (${t.length})`);return Vo((()=>{let n=!0;if(e.forEach((t=>{null==t||(n=!1)})),n)return null;const r=[];for(let n=0;n<t.length;++n)null==e[n]?r.push(Sa(qc(t[n]),\"bool\")):e[n].rank<t[n].rank?r.push(Xu(e[n],-1)):r.push(e[n]);const s=au(r,this.axis);return Fl(s,-1,!1)}))}getConfig(){const t={axis:this.axis},e=super.getConfig();return Object.assign(t,e),t}}function Hv(t,e){for(;t<0;)t+=e;return t}Gv.className=\"Concatenate\",wo(Gv);class jv extends Pv{constructor(t){super(t),this.axes=t.axes,this.normalize=null!=t.normalize&&t.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(t){nt(Array.isArray(t)&&2===t.length&&Array.isArray(t[0])&&Array.isArray(t[1]),(()=>\"A `Dot` layer should be called on a list of exactly 2 inputs.\"));const e=t[0],n=t[1];if(e.length>3||n.length>3)throw new Am(\"Dot layer does not support tensors of 4D or higher rank yet.\");const r=this.interpretAxes(e,n);if(e[r[0]]!==n[r[1]])throw new Nm(`Dimension incompatibility: ${e[r[0]]} !== ${n[r[1]]}`)}mergeFunction(t){if(2!==t.length)throw new Nm(`A \\`Dot\\` layer must be called on exactly 2 inputs, but received ${t.length} input(s).`);let e,n=t[0],r=t[1];return e=Array.isArray(this.axes)?this.axes.map(((e,n)=>Hv(e,t[n].shape.length))):[Hv(this.axes,n.shape.length),Hv(this.axes,r.shape.length)],this.normalize&&(n=ux(n,e[0]),r=ux(r,e[1])),function(t,e,n){if(t.shape.length>3||e.shape.length>3)throw new Am(\"batchDot is not implemented for tensors of 4D or higher rank yet\");if(nt(t.shape.length>=2,(()=>`batchDot requires the rank of x to be >= 2, but got ${t.shape.length}`)),nt(t.shape.length>=2,(()=>`batchDot requires the rank of y to be >= 2, but got ${e.shape.length}`)),\"number\"==typeof n&&(n=[n,n]),\"complex64\"===t.dtype||\"complex64\"===e.dtype)throw new Am(\"batchDot is not implemented for complex64-type Tensors yet.\");const r=t.shape.length,s=e.shape.length;null==n&&(n=[r-1,s-2]);const i=n;return Vo((()=>{let n,a;if(r>s){n=r-s;const t=[];for(let e=0;e<n;++e)t.push(1);e=ru(e,e.shape.concat(t))}else if(s>r){n=s-r;const e=[];for(let t=0;t<n;++t)e.push(1);t=ru(t,t.shape.concat(e))}else n=0;if(2===t.shape.length&&2===e.shape.length)a=i[0]===i[1]?yc(sl(t,e),i[0]):yc(sl(Ga(t,[1,0]),e),i[1]);else{const n=i[0]!==t.shape.length-1,r=i[1]===e.shape.length-1;a=Va(t,e,n,r)}if(n>0){let t;t=r>s?r+s-3:r-1;const e=[];for(let r=t;r<t+n;++r)e.push(r);a=Uh(a,e)}return 1===a.shape.length&&(a=Xu(a,1)),a}))}(n,r,e)}interpretAxes(t,e){let n;return n=Array.isArray(this.axes)?this.axes:[Hv(this.axes,t.length),Hv(this.axes,e.length)],n}computeOutputShape(t){nt(Array.isArray(t)&&2===t.length&&Array.isArray(t[0])&&Array.isArray(t[1]),(()=>\"A `Dot` layer should be called on a list of exactly 2 inputs.\"));const e=t[0].slice(),n=t[1].slice();if(e.length>3||n.length>3)throw new Am(\"Dot layer does not support tensors of 4D or higher rank yet.\");const r=this.interpretAxes(e,n);e.splice(r[0],1),n.splice(r[1],1),n.splice(0,1);const s=e.concat(n);return 1===s.length&&s.push(1),s}computeMask(t,e){return null}getConfig(){const t={axes:this.axes,normalize:this.normalize},e=super.getConfig();return Object.assign(t,e),t}}jv.className=\"Dot\",wo(jv);class qv extends qy{constructor(t){super(t),this.supportsMasking=!0,this.stddev=t.stddev}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={stddev:this.stddev};return Object.assign(e,t),e}call(t,e){return Vo((()=>{this.invokeCallHook(t,e);const n=$y(t);return jg((()=>el(zg(n.shape,0,this.stddev),n)),(()=>n),e.training||!1)}))}}qv.className=\"GaussianNoise\",wo(qv);class Xv extends qy{constructor(t){super(t),this.supportsMasking=!0,this.rate=t.rate}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={rate:this.rate};return Object.assign(e,t),e}call(t,e){return Vo((()=>{this.invokeCallHook(t,e);const n=$y(t);return this.rate>0&&this.rate<1?jg((()=>{const t=Math.sqrt(this.rate/(1-this.rate));return sl(n,zg(n.shape,1,t))}),(()=>n),e.training||!1):n}))}}Xv.className=\"GaussianDropout\",wo(Xv);class Kv extends qy{constructor(t){super(t),this.supportsMasking=!0,this.rate=t.rate,this.noiseShape=t.noiseShape}_getNoiseShape(t){return this.noiseShape||$y(t).shape}computeOutputShape(t){return t}getConfig(){const t=super.getConfig(),e={rate:this.rate};return Object.assign(e,t),e}call(t,e){return Vo((()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(t);return jg((()=>{const e=$y(t),r=-1.7580993408473766;let s=ec(hh(n),this.rate);s=Ag(s,\"float32\");const i=((1-this.rate)*(1+this.rate*r**2))**-.5,a=-i*r*this.rate,o=el(sl(e,s),sl(el(s,-1),r));return el(sl(o,i),a)}),(()=>$y(t)),e.training||!1)}return t}))}}function Yv(t,e,n,r,s,i=.001){let a;if(2===t.rank)a=pu(t,e,n,r,s,i);else if(3===t.rank)a=fu(t,e,n,r,s,i);else{if(4!==t.rank)throw new Am(`batchNormalization is not implemented for array of rank ${t.rank} yet`);a=mu(t,e,n,r,s,i)}return a}Kv.className=\"AlphaDropout\",wo(Kv);class Zv extends qy{constructor(t){null==t&&(t={}),super(t),this.supportsMasking=!0,this.axis=null==t.axis?-1:t.axis,this.momentum=null==t.momentum?.99:t.momentum,this.epsilon=null==t.epsilon?.001:t.epsilon,this.center=null==t.center||t.center,this.scale=null==t.scale||t.scale,this.betaInitializer=fy(t.betaInitializer||\"zeros\"),this.gammaInitializer=fy(t.gammaInitializer||\"ones\"),this.movingMeanInitializer=fy(t.movingMeanInitializer||\"zeros\"),this.movingVarianceInitializer=fy(t.movingVarianceInitializer||\"ones\"),this.betaConstraint=og(t.betaConstraint),this.gammaConstraint=og(t.gammaConstraint),this.betaRegularizer=Vb(t.betaRegularizer),this.gammaRegularizer=Vb(t.gammaRegularizer)}build(t){t=Oy(t);const e=this.axis>=0?this.axis:this.axis+t.length,n=t[e];if(null==n)throw new Nm(`Axis ${e} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(t)}.`);this.inputSpec=[new Vy({ndim:t.length,axes:{[e]:n}})];const r=[n];this.scale&&(this.gamma=this.addWeight(\"gamma\",r,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight(\"beta\",r,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight(\"moving_mean\",r,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight(\"moving_variance\",r,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(t,e){return Vo((()=>{const n=null!=e.training&&e.training,r=$y(t),s=r.shape,i=s.length,a=Ng(0,i),o=this.axis>=0?this.axis:this.axis+i;a.splice(o,1);const l=Lm(1,i);l[o]=s[o];const u=a.slice();u.sort();const c=!lt(u,Ng(0,i).slice(0,i-1));if(!n)return(()=>{if(c){const t=ru(this.movingMean.read(),l),e=ru(this.movingVariance.read(),l),n=this.center?ru(this.beta.read(),l):null,s=this.scale?ru(this.gamma.read(),l):null;return Yv(r,t,e,n,s,this.epsilon)}return Yv(r,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[h,d,p]=function(t,e,n,r,s=.001){return lt(r.slice().sort(),Ng(0,t.rank-1))?function(t,e,n,r,s=.001){return Vo((()=>{const i=Wc(t,r),a=i.mean,o=i.variance;return[Yv(t,a,o,n,e,s),a,o]}))}(t,e,n,r,s):function(t,e,n,r,s=.001){return Vo((()=>{const i=Wc(t,r),a=i.mean,o=i.variance,l=[];for(const e of Ng(0,t.rank))-1!==r.indexOf(e)?l.push(1):l.push(t.shape[e]);const u=ru(a,l),c=ru(o,l),h=null==e?null:ru(e,l),d=null==n?null:ru(n,l);return[Yv(t,u,c,d,h,s),a,o]}))}(t,e,n,r,s)}(r,this.gamma.read(),this.beta.read(),a,this.epsilon),f=(t,e,n)=>{Vo((()=>{const r=1-n,s=t.read(),i=sl(wl(s,e),r);t.write(wl(s,i))}))};return(()=>{f(this.movingMean,d,this.momentum),f(this.movingVariance,p,this.momentum)})(),h}))}getConfig(){const t={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:py(this.betaInitializer),gammaInitializer:py(this.gammaInitializer),movingMeanInitializer:py(this.movingMeanInitializer),movingVarianceInitializer:py(this.movingVarianceInitializer),betaRegularizer:Bb(this.betaRegularizer),gammaRegularizer:Bb(this.gammaRegularizer),betaConstraint:ig(this.betaConstraint),gammaConstraint:ig(this.gammaConstraint)},e=super.getConfig();return Object.assign(t,e),t}}Zv.className=\"BatchNormalization\",wo(Zv);class Jv extends qy{constructor(t){if(null==t&&(t={}),super(t),this.axis=null==t.axis?-1:t.axis,\"number\"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const t of this.axis)if(!Number.isInteger(t))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==t.epsilon?.001:t.epsilon,this.center=null==t.center||t.center,this.scale=null==t.scale||t.scale,this.betaInitializer=fy(t.betaInitializer||\"zeros\"),this.gammaInitializer=fy(t.gammaInitializer||\"ones\"),this.betaRegularizer=Vb(t.betaRegularizer),this.gammaRegularizer=Vb(t.gammaRegularizer),this.supportsMasking=!0}build(t){const e=(t=Oy(t)).length;\"number\"==typeof this.axis&&(this.axis=[this.axis]);for(let t=0;t<this.axis.length;++t)this.axis[t]<0&&(this.axis[t]+=e);for(const t of this.axis)if(t<0||t>=e)throw new Error(`Invalid axis: ${t}`);if(this.axis.length!==Hm(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const n=this.axis.map((e=>t[e]));this.scale?this.gamma=this.addWeight(\"gamma\",n,\"float32\",this.gammaInitializer,this.gammaRegularizer,!0):this.gamma=null,this.center?this.beta=this.addWeight(\"beta\",n,\"float32\",this.betaInitializer,this.betaRegularizer,!0):this.beta=null,this.built=!0}call(t,e){const n=$y(t),r=n.shape,s=r.length;return Vo((()=>{let{mean:t,variance:e}=Wc(n,this.axis,!0);const i=Lm(1,s);for(const t of this.axis)i[t]=r[t];const a=t=>null!=t&&t.shape.length!==s&&this.axis!==[s-1]?ru(t,i):t;let o=a(this.gamma.read()),l=a(this.beta.read());const u=[],c=[];for(let t=0;t<s;++t)-1!==this.axis.indexOf(t)?(u.push(r[t]),c.push(1)):(u.push(1),c.push(r[t]));return t=Yu(t,u),e=Yu(e,u),o=Yu(o,c),l=Yu(l,c),Yv(n,t,e,l,o,this.epsilon)}))}getConfig(){const t={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:py(this.betaInitializer),gammaInitializer:py(this.gammaInitializer),betaRegularizer:Bb(this.betaRegularizer),gammaRegularizer:Bb(this.gammaRegularizer)},e=super.getConfig();return Object.assign(t,e),t}}Jv.className=\"LayerNormalization\",wo(Jv);class Qv extends qy{constructor(t){if(null==t&&(t={}),super(t),this.dataFormat=null==t.dataFormat?\"channelsLast\":t.dataFormat,null==t.padding)this.padding=[[1,1],[1,1]];else if(\"number\"==typeof t.padding)this.padding=[[t.padding,t.padding],[t.padding,t.padding]];else{if(t.padding=t.padding,2!==t.padding.length)throw new Nm(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${t.padding.length} array.`);let e,n;if(\"number\"==typeof t.padding[0])e=[t.padding[0],t.padding[0]],n=[t.padding[1],t.padding[1]];else{if(t.padding=t.padding,2!==t.padding[0].length)throw new Nm(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${t.padding[0].length} array.`);if(e=t.padding[0],2!==t.padding[1].length)throw new Nm(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${t.padding[1].length} array.`);n=t.padding[1]}this.padding=[e,n]}this.inputSpec=[new Vy({ndim:4})]}computeOutputShape(t){let e,n;return t=Oy(t),\"channelsFirst\"===this.dataFormat?(e=null!=t[2]&&t[2]>=0?t[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=t[3]&&t[3]>=0?t[3]+this.padding[1][0]+this.padding[1][1]:null,[t[0],t[1],e,n]):(e=null!=t[1]&&t[1]>=0?t[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=t[2]&&t[2]>=0?t[2]+this.padding[1][0]+this.padding[1][1]:null,[t[0],e,n,t[3]])}call(t,e){return Vo((()=>{return e=$y(t),n=this.padding,r=this.dataFormat,Vo((()=>{if(4!==e.rank)throw new Nm(`temporalPadding expects input tensor to be 4-D, but received a ${e.rank}-D tensor.`);if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new Nm(\"spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.\");if(null==r&&(r=\"channelsLast\"),\"channelsLast\"!==r&&\"channelsFirst\"!==r)throw new Nm(`Unknown data format: ${r}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let t;return t=\"channelsFirst\"===r?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],Kc(e,t)}));var e,n,r}))}getConfig(){const t={padding:this.padding,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}function tw(t,e,n,r,s,i){return Vo((()=>{let a;xg(s),vg(i),bg(r),null==n&&(n=[1,1]),null==r&&(r=\"valid\"),null==s&&(s=\"channelsLast\"),null==i&&(i=\"max\"),t=Jb(t,s);const o=\"same\"===r?\"same\":\"valid\";return a=\"max\"===i?Rc(t,e,n,o):su(t,e,n,o),\"channelsFirst\"===s&&(a=Ga(a,[0,3,1,2])),a}))}function ew(t,e,n,r,s,i){return Vo((()=>{let a;xg(s),vg(i),bg(r),null==n&&(n=[1,1,1]),null==r&&(r=\"valid\"),null==s&&(s=\"channelsLast\"),null==i&&(i=\"max\"),t=Qb(t,s);const o=\"same\"===r?\"same\":\"valid\";return a=\"max\"===i?Lc(t,e,n,o):iu(t,e,n,o),\"channelsFirst\"===s&&(a=Ga(a,[0,4,1,2,3])),a}))}Qv.className=\"ZeroPadding2D\",wo(Qv);class nw extends qy{constructor(t){if(null==t.poolSize&&(t.poolSize=2),super(t),\"number\"==typeof t.poolSize)this.poolSize=[t.poolSize];else{if(!Array.isArray(t.poolSize)||1!==t.poolSize.length||\"number\"!=typeof t.poolSize[0])throw new Nm(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(t.poolSize)}`);this.poolSize=t.poolSize}if(Km(this.poolSize,\"poolSize\"),null==t.strides)this.strides=this.poolSize;else if(\"number\"==typeof t.strides)this.strides=[t.strides];else{if(!Array.isArray(t.strides)||1!==t.strides.length||\"number\"!=typeof t.strides[0])throw new Nm(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(t.strides)}`);this.strides=t.strides}Km(this.strides,\"strides\"),this.padding=null==t.padding?\"valid\":t.padding,bg(this.padding),this.inputSpec=[new Vy({ndim:3})]}computeOutputShape(t){const e=Yb((t=Oy(t))[1],this.poolSize[0],this.padding,this.strides[0]);return[t[0],e,t[2]]}call(t,e){return Vo((()=>{this.invokeCallHook(t,e),t=Rg($y(t),2);const n=this.poolingFunction($y(t),[this.poolSize[0],1],[this.strides[0],1],this.padding,\"channelsLast\");return Uh(n,[2])}))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides},e=super.getConfig();return Object.assign(t,e),t}}class rw extends nw{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return xg(s),bg(r),tw(t,e,n,r,s,\"max\")}}rw.className=\"MaxPooling1D\",wo(rw);class sw extends nw{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return xg(s),bg(r),tw(t,e,n,r,s,\"avg\")}}sw.className=\"AveragePooling1D\",wo(sw);class iw extends qy{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(2!==t.strides.length)throw new Nm(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${t.strides.length}.`);this.strides=t.strides}else this.strides=[t.strides,t.strides];Km(this.poolSize,\"poolSize\"),Km(this.strides,\"strides\"),this.padding=null==t.padding?\"valid\":t.padding,this.dataFormat=null==t.dataFormat?\"channelsLast\":t.dataFormat,xg(this.dataFormat),bg(this.padding),this.inputSpec=[new Vy({ndim:4})]}computeOutputShape(t){t=Oy(t);let e=\"channelsFirst\"===this.dataFormat?t[2]:t[1],n=\"channelsFirst\"===this.dataFormat?t[3]:t[2];return e=Yb(e,this.poolSize[0],this.padding,this.strides[0]),n=Yb(n,this.poolSize[1],this.padding,this.strides[1]),\"channelsFirst\"===this.dataFormat?[t[0],t[1],e,n]:[t[0],e,n,t[3]]}call(t,e){return Vo((()=>(this.invokeCallHook(t,e),this.poolingFunction($y(t),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}class aw extends iw{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return xg(s),bg(r),tw(t,e,n,r,s,\"max\")}}aw.className=\"MaxPooling2D\",wo(aw);class ow extends iw{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return xg(s),bg(r),tw(t,e,n,r,s,\"avg\")}}ow.className=\"AveragePooling2D\",wo(ow);class lw extends qy{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(3!==t.strides.length)throw new Nm(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${t.strides.length}.`);this.strides=t.strides}else this.strides=[t.strides,t.strides,t.strides];Km(this.poolSize,\"poolSize\"),Km(this.strides,\"strides\"),this.padding=null==t.padding?\"valid\":t.padding,this.dataFormat=null==t.dataFormat?\"channelsLast\":t.dataFormat,xg(this.dataFormat),bg(this.padding),this.inputSpec=[new Vy({ndim:5})]}computeOutputShape(t){t=Oy(t);let e=\"channelsFirst\"===this.dataFormat?t[2]:t[1],n=\"channelsFirst\"===this.dataFormat?t[3]:t[2],r=\"channelsFirst\"===this.dataFormat?t[4]:t[3];return e=Yb(e,this.poolSize[0],this.padding,this.strides[0]),n=Yb(n,this.poolSize[1],this.padding,this.strides[1]),r=Yb(r,this.poolSize[2],this.padding,this.strides[2]),\"channelsFirst\"===this.dataFormat?[t[0],t[1],e,n,r]:[t[0],e,n,r,t[4]]}call(t,e){return Vo((()=>(this.invokeCallHook(t,e),this.poolingFunction($y(t),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}class uw extends lw{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return xg(s),bg(r),ew(t,e,n,r,s,\"max\")}}uw.className=\"MaxPooling3D\",wo(uw);class cw extends lw{constructor(t){super(t)}poolingFunction(t,e,n,r,s){return xg(s),bg(r),ew(t,e,n,r,s,\"avg\")}}cw.className=\"AveragePooling3D\",wo(cw);class hw extends qy{constructor(t){super(t),this.inputSpec=[new Vy({ndim:3})]}computeOutputShape(t){return[t[0],t[2]]}call(t,e){throw new Am}}class dw extends hw{constructor(t){super(t||{})}call(t,e){return Vo((()=>{const e=$y(t);return Fc(e,1)}))}}dw.className=\"GlobalAveragePooling1D\",wo(dw);class pw extends hw{constructor(t){super(t||{})}call(t,e){return Vo((()=>{const e=$y(t);return gc(e,1)}))}}pw.className=\"GlobalMaxPooling1D\",wo(pw);class fw extends qy{constructor(t){super(t),this.dataFormat=null==t.dataFormat?\"channelsLast\":t.dataFormat,xg(this.dataFormat),this.inputSpec=[new Vy({ndim:4})]}computeOutputShape(t){return t=t,\"channelsLast\"===this.dataFormat?[t[0],t[3]]:[t[0],t[1]]}call(t,e){throw new Am}getConfig(){const t={dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}class mw extends fw{call(t,e){return Vo((()=>{const e=$y(t);return\"channelsLast\"===this.dataFormat?Fc(e,[1,2]):Fc(e,[2,3])}))}}mw.className=\"GlobalAveragePooling2D\",wo(mw);class gw extends fw{call(t,e){return Vo((()=>{const e=$y(t);return\"channelsLast\"===this.dataFormat?gc(e,[1,2]):gc(e,[2,3])}))}}gw.className=\"GlobalMaxPooling2D\",wo(gw);class yw extends qy{constructor(t){super(t),this.layer=t.layer}build(t){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(t){null!=this.layer&&(this.layer.trainable=t)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(t){this.layer.setWeights(t)}getConfig(){const t={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},e=super.getConfig();return Object.assign(t,e),t}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(t)}static fromConfig(t,e,n={}){const r=lx(e.layer,n);delete e.layer;const s={layer:r};return Object.assign(s,e),new t(s)}}class xw extends yw{constructor(t){super(t),this.supportsMasking=!0}build(t){if((t=Oy(t)).length<3)throw new Nm(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(t)}`);this.inputSpec=[{shape:t}];const e=[t[0]].concat(t.slice(2));this.layer.built||(this.layer.build(e),this.layer.built=!0),super.build(t)}computeOutputShape(t){const e=[(t=Oy(t))[0]].concat(t.slice(2)),n=this.layer.computeOutputShape(e),r=t[1];return[n[0],r].concat(n.slice(1))}call(t,e){return Vo((()=>fv(((t,n)=>[$y(this.layer.call(t,e)),[]]),t=$y(t),[],!1,null,null,!1,!0)[1]))}}xw.className=\"TimeDistributed\",wo(xw);class bw extends yw{constructor(t){super(t);const e=t.layer.getConfig(),n={};n.className=t.layer.getClassName(),n.config=e,this.forwardLayer=lx(n),e.goBackwards=!0!==e.goBackwards;const r={};var s;if(r.className=t.layer.getClassName(),r.config=e,this.backwardLayer=lx(r),this.forwardLayer.name=\"forward_\"+this.forwardLayer.name,this.backwardLayer.name=\"backward_\"+this.backwardLayer.name,this.mergeMode=void 0===t.mergeMode?\"concat\":t.mergeMode,s=this.mergeMode,qm(gg,\"BidirectionalMergeMode\",s),t.weights)throw new Am(\"weights support is not implemented for Bidirectional layer yet.\");this._stateful=t.layer.stateful,this.returnSequences=t.layer.returnSequences,this.returnState=t.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=t.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(t){this._trainable=t,null!=this.forwardLayer&&(this.forwardLayer.trainable=t),null!=this.backwardLayer&&(this.backwardLayer.trainable=t)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(t){const e=t.length,n=Math.floor(e/2);this.forwardLayer.setWeights(t.slice(0,n)),this.backwardLayer.setWeights(t.slice(n))}computeOutputShape(t){let e,n,r,s=this.forwardLayer.computeOutputShape(t);return Array.isArray(s)&&Array.isArray(s[0])||(s=[s]),s=s,this.returnState?(r=s.slice(1),e=s[0]):e=s[0],e=e,\"concat\"===this.mergeMode?(e[e.length-1]*=2,n=[e]):n=null==this.mergeMode?[e,e.slice()]:[e],this.returnState?null==this.mergeMode?n.concat(r).concat(r.slice()):[e].concat(r).concat(r.slice()):$m(n)}apply(t,e){let n=null==e?null:e.initialState,r=null==e?null:e.constants;null==e&&(e={});const s=pv(t,n,r,this.numConstants);if(t=s.inputs,n=s.initialState,r=s.constants,Array.isArray(t)&&(n=t.slice(1),t=t[0]),(null==n||0===n.length)&&null==r)return super.apply(t,e);const i=[],a=[];if(null!=n){const t=n.length;if(t%2>0)throw new Nm(\"When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.\");e.initialState=n,i.push(...n);const r=n.map((t=>new Vy({shape:t.shape})));this.forwardLayer.stateSpec=r.slice(0,t/2),this.backwardLayer.stateSpec=r.slice(t/2),a.push(...r)}if(null!=r)throw new Am(\"Support for constants in Bidirectional layers is not implemented yet.\");const o=i[0]instanceof Wy;for(const t of i)if(t instanceof Wy!==o)throw new Nm(\"The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors\");if(o){const n=[t].concat(i),r=this.inputSpec.concat(a),s=this.inputSpec;this.inputSpec=r;const o=super.apply(n,e);return this.inputSpec=s,o}return super.apply(t,e)}call(t,e){return Vo((()=>{const n=e.initialState;let r,s,i,a;if(null==n)r=this.forwardLayer.call(t,e),s=this.backwardLayer.call(t,e);else{const i=n.slice(0,n.length/2),a=n.slice(n.length/2);r=this.forwardLayer.call(t,Object.assign(e,{initialState:i})),s=this.backwardLayer.call(t,Object.assign(e,{initialState:a}))}return this.returnState&&(Array.isArray(r)&&(i=r.slice(1).concat(s.slice(1))),r=r[0],s=s[0]),this.returnSequences&&(s=yh(s,1)),\"concat\"===this.mergeMode?a=$g([r,s]):\"sum\"===this.mergeMode?a=el(r,s):\"ave\"===this.mergeMode?a=sl(.5,el(r,s)):\"mul\"===this.mergeMode?a=sl(r,s):null==this.mergeMode&&(a=[r,s]),this.returnState?null==this.mergeMode?a.concat(i):[a].concat(i):a}))}resetStates(t){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(t){Sg(this.forwardLayer.name,(()=>{this.forwardLayer.build(t)})),Sg(this.backwardLayer.name,(()=>{this.backwardLayer.build(t)})),this.built=!0}computeMask(t,e){let n;if(Array.isArray(e)&&(e=e[0]),n=this.returnSequences?null==this.mergeMode?[e,e]:e:null==this.mergeMode?[null,null]:null,this.returnState){const t=this.forwardLayer.states.map((t=>null));return Array.isArray(n)?n.concat(t).concat(t):[n].concat(t).concat(t)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(t),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(t)}getConfig(){const t={mergeMode:this.mergeMode},e=super.getConfig();return Object.assign(t,e),t}static fromConfig(t,e){const n=lx(e.layer);if(delete e.layer,null!=e.numConstants)throw new Am(\"Deserialization of a Bidirectional layer with numConstants present is not supported yet.\");const r=e;return r.layer=n,new t(r)}}function vw(t){return new Ky(t)}function ww(t){return new jb(t)}function Sw(t){return new Wb(t)}function Tw(t){return new Gb(t)}function _w(t){return new Hb(t)}function Mw(t){return new Xb(t)}function kw(t){return new qb(t)}function Ew(t){return new uv(t)}function Iw(t){return new rv(t)}function Cw(t){return new iv(t)}function Nw(t){return new sv(t)}function Aw(t){return new av(t)}function Rw(t){return new lv(t)}function Lw(t){return new cv(t)}function Dw(t){return new hv(t)}function Fw(t){return new dv(t)}function $w(t){return new Rv(t)}function Ow(t){return new Nv(t)}function Pw(t){return new Iv(t)}function zw(t){return new Cv(t)}function Bw(t){return new Av(t)}function Uw(t){return new Lv(t)}function Vw(t){return new Dv(t)}function Ww(t){return new Fv(t)}function Gw(t){return new Ov(t)}function Hw(t){return new zv(t)}function jw(t){return new Uv(t)}function qw(t){return new Gv(t)}function Xw(t){return new Vv(t)}function Kw(t){return new Wv(t)}function Yw(t){return new Bv(t)}function Zw(t){return new jv(t)}function Jw(t){return new Zv(t)}function Qw(t){return new Jv(t)}function tS(t){return new Qv(t)}function eS(t){return new sw(t)}function nS(t){return eS(t)}function rS(t){return eS(t)}function sS(t){return new ow(t)}function iS(t){return sS(t)}function aS(t){return sS(t)}function oS(t){return new cw(t)}function lS(t){return oS(t)}function uS(t){return oS(t)}function cS(t){return new dw(t)}function hS(t){return new mw(t)}function dS(t){return new pw(t)}function pS(t){return new gw(t)}function fS(t){return new rw(t)}function mS(t){return new aw(t)}function gS(t){return new uw(t)}function yS(t){return new vv(t)}function xS(t){return new bv(t)}function bS(t){return new Sv(t)}function vS(t){return new wv(t)}function wS(t){return new xv(t)}function SS(t){return new yv(t)}function TS(t){return new Ev(t)}function _S(t){return new kv(t)}function MS(t){return new mv(t)}function kS(t){return new Tv(t)}function ES(t){return new bw(t)}function IS(t){return new xw(t)}bw.className=\"Bidirectional\",wo(bw);const CS=dS,NS=pS,AS=fS,RS=mS;function LS(t){return new qv(t)}function DS(t){return new Xv(t)}function FS(t){return new Kv(t)}function $S(t){return new $v(t)}function OS(t,e){return bx(t,e)}function PS(t,e){return Tx(t,e)}function zS(t,e){return _x(t,e)}function BS(t,e){return vx(t,e)}function US(t,e){return Mx(t,e)}function VS(t,e){return Sx(t,e)}function WS(t,e){return function(t,e){return Vo((()=>{const n=wx(t,e),r=function(t,e){return Vo((()=>Sa(yc(Ic(Bu(t,1),Bu(e,0))),\"float32\")))}(t,e),s=el(n,r);return Sa(Uu(tc(s,0),rl(n,s),0),\"float32\")}))}(t,e)}function GS(t,e){return gx(t,e)}function HS(t,e){return hx(t,e)}function jS(t,e){return dx(t,e)}function qS(t,e){return dx(t,e)}function XS(t,e){return dx(t,e)}function KS(t,e){return cx(t,e)}function YS(t,e){return cx(t,e)}function ZS(t,e){return cx(t,e)}function JS(t){return new Pb(t)}function QS(t){return $b(e=t),new Pb({l1:null!=e?e.l1:null,l2:0});var e}function tT(t){return $b(e=t),new Pb({l2:null!=e?e.l2:null,l1:0});var e}class eT extends tx{constructor(){super(...arguments),this.model=null}setModel(t){if(!(t instanceof ub))throw new Error(\"model must be a LayersModel, not some other Container\");this.model=t}}function nT(t,e){return t<e}function rT(t,e){return t>e}class sT extends eT{constructor(t){if(super(),null==t&&(t={}),t.restoreBestWeights)throw new Am(\"restoreBestWeights = True is not implemented in EarlyStopping yet.\");this.monitor=t.monitor||\"val_loss\",this.minDelta=Math.abs(t.minDelta||0),this.patience=t.patience||0,this.verbose=t.verbose||0,this.mode=t.mode||\"auto\",this.baseline=t.baseline,-1===[\"auto\",\"min\",\"max\"].indexOf(this.mode)&&(console.warn(`EarlyStopping mode '${this.mode}' is invalid. Falling back to mode 'auto'.`),this.mode=\"auto\"),\"min\"===this.mode?this.monitorFunc=nT:\"max\"===this.mode||-1!==this.monitor.indexOf(\"acc\")?this.monitorFunc=rT:this.monitorFunc=nT,this.monitorFunc===nT&&(this.minDelta*=-1)}async onTrainBegin(t){this.wait=0,this.stoppedEpoch=0,null!=this.baseline?this.best=this.baseline:this.best=this.monitorFunc===nT?1/0:-1/0}async onEpochEnd(t,e){await Zy(e);const n=this.getMonitorValue(e);null!=n&&(this.monitorFunc(n-this.minDelta,this.best)?(this.best=n,this.wait=0):(this.wait++,this.wait>=this.patience&&(this.stoppedEpoch=t,this.model.stopTraining=!0)))}async onTrainEnd(t){this.stoppedEpoch>0&&this.verbose&&console.log(`Epoch ${this.stoppedEpoch}: early stopping.`)}getMonitorValue(t){null==t&&(t={});const e=t[this.monitor];return null==e&&console.warn(`Metric for EarlyStopping ${this.monitor} is not available. Available metrics are: ${Object.keys(t)}`),e}}const iT={earlyStopping:function(t){return new sT(t)}};var aT,oT;!function(t){t[t.DT_INVALID=0]=\"DT_INVALID\",t[t.DT_FLOAT=1]=\"DT_FLOAT\",t[t.DT_DOUBLE=2]=\"DT_DOUBLE\",t[t.DT_INT32=3]=\"DT_INT32\",t[t.DT_UINT8=4]=\"DT_UINT8\",t[t.DT_INT16=5]=\"DT_INT16\",t[t.DT_INT8=6]=\"DT_INT8\",t[t.DT_STRING=7]=\"DT_STRING\",t[t.DT_COMPLEX64=8]=\"DT_COMPLEX64\",t[t.DT_INT64=9]=\"DT_INT64\",t[t.DT_BOOL=10]=\"DT_BOOL\",t[t.DT_QINT8=11]=\"DT_QINT8\",t[t.DT_QUINT8=12]=\"DT_QUINT8\",t[t.DT_QINT32=13]=\"DT_QINT32\",t[t.DT_BFLOAT16=14]=\"DT_BFLOAT16\",t[t.DT_FLOAT_REF=101]=\"DT_FLOAT_REF\",t[t.DT_DOUBLE_REF=102]=\"DT_DOUBLE_REF\",t[t.DT_INT32_REF=103]=\"DT_INT32_REF\",t[t.DT_UINT8_REF=104]=\"DT_UINT8_REF\",t[t.DT_INT16_REF=105]=\"DT_INT16_REF\",t[t.DT_INT8_REF=106]=\"DT_INT8_REF\",t[t.DT_STRING_REF=107]=\"DT_STRING_REF\",t[t.DT_COMPLEX64_REF=108]=\"DT_COMPLEX64_REF\",t[t.DT_INT64_REF=109]=\"DT_INT64_REF\",t[t.DT_BOOL_REF=110]=\"DT_BOOL_REF\",t[t.DT_QINT8_REF=111]=\"DT_QINT8_REF\",t[t.DT_QUINT8_REF=112]=\"DT_QUINT8_REF\",t[t.DT_QINT32_REF=113]=\"DT_QINT32_REF\",t[t.DT_BFLOAT16_REF=114]=\"DT_BFLOAT16_REF\"}(aT||(aT={})),function(t){let e;!function(t){t[t.LEGACY=0]=\"LEGACY\",t[t.V1=1]=\"V1\",t[t.V2=2]=\"V2\"}(e=t.CheckpointFormatVersion||(t.CheckpointFormatVersion={}))}(oT||(oT={}));const lT={};function uT(t,e){const n={tfOpName:t,category:\"custom\",inputs:[],attrs:[],customExecutor:e};lT[t]=n}function cT(t){return lT[t]}function hT(t){delete lT[t]}function dT(t,e,n,r,s){const i=e.inputParams[t];if(i&&void 0!==i.inputIndexStart){const t=i.inputIndexStart,a=0===i.inputIndexEnd?void 0:void 0===i.inputIndexEnd?t+1:i.inputIndexEnd;if(\"tensor\"===i.type)return pT(e.inputNames[i.inputIndexStart],n,r,s);if(\"tensors\"===i.type)return e.inputNames.slice(t,a).map((t=>pT(t,n,r,s)));const o=pT(e.inputNames.slice(t)[0],n,r,s),l=o.dataSync();return\"number\"===i.type?l[0]:Dt(o.shape,l)}const a=e.attrParams[t];return a&&a.value}function pT(t,e,n,r){const[s,i]=gT(t);if(null!=r){const t=r.getHashTableHandleByName(s);if(null!=t)return t}const a=n.currentContextIds.find((t=>!!e[mT(s,t)]));return void 0!==a?e[mT(s,a)][i]:void 0}function fT(t,e){const[n,r,s]=gT(t);return[mT(n,e&&e.currentContextId),r,s]}function mT(t,e){return e?`${t}-${e}`:t}function gT(t){const e=t.split(\":\");if(1===e.length)return[t,0,void 0];const n=e[0],r=3===e.length?e[1]:void 0;return[n,Number(e[e.length-1]),r]}function yT(t,e,n){let r=dT(\"pad\",t,e,n);if(\"explicit\"===r){r=dT(\"explicitPaddings\",t,e,n);const s=[[0,0],[0,0],[0,0],[0,0]];for(let t=0;t<4;t++)s[t][0]=r[2*t],s[t][1]=r[2*t+1];return s}return r}function xT(t){return t.kept?t:Ta(t)}const bT=[{tfOpName:\"Add\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"AddV2\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"AddN\",category:\"arithmetic\",inputs:[{start:0,end:0,name:\"tensors\",type:\"tensors\"}]},{tfOpName:\"BiasAdd\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",notSupported:!0}]},{tfOpName:\"Sub\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"RealDiv\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Div\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"DivNoNan\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"FloorDiv\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Mul\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Maximum\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Minimum\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Pow\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"SquaredDifference\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Mod\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"FloorMod\",category:\"arithmetic\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]}],vT=[{tfOpName:\"Abs\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Acos\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Asin\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Atan\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Atan2\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"y\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Ceil\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"ClipByValue\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"clipValueMin\",type:\"number\"},{start:2,name:\"clipValueMax\",type:\"number\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Complex\",category:\"basic_math\",inputs:[{start:0,name:\"real\",type:\"tensor\"},{start:1,name:\"imag\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"ComplexAbs\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Cos\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Cosh\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Elu\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Exp\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Floor\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Log\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Imag\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0},{tfName:\"Tout\",name:\"outputType\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Neg\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Real\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0},{tfName:\"Tout\",name:\"outputType\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Prelu\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"alpha\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Relu\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Relu6\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Selu\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Sigmoid\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Sin\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Sinh\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Sqrt\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Rsqrt\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Square\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Tan\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Tanh\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Sign\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Round\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Expm1\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Log1p\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Reciprocal\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Softplus\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Asinh\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Acosh\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Atanh\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Erf\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Prod\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axes\",type:\"number[]\"}],attrs:[{tfName:\"keep_dims\",name:\"keepDims\",type:\"bool\",notSupported:!0},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"LeakyRelu\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"alpha\",name:\"alpha\",type:\"number\",defaultValue:.2},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"IsNan\",category:\"basic_math\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]}],wT=[{tfOpName:\"EmptyTensorList\",category:\"control\",inputs:[{start:0,name:\"elementShape\",type:\"shape\"},{start:1,name:\"maxNumElements\",type:\"number\"}],attrs:[{tfName:\"element_dtype\",name:\"elementDType\",type:\"dtype\"}]},{tfOpName:\"LoopCond\",category:\"control\",inputs:[{start:0,name:\"pred\",type:\"tensor\"}]},{tfOpName:\"Switch\",category:\"control\",inputs:[{start:0,name:\"data\",type:\"tensor\"},{start:1,name:\"pred\",type:\"tensor\"}]},{tfOpName:\"Merge\",category:\"control\",inputs:[{start:0,end:0,name:\"tensors\",type:\"tensors\"}]},{tfOpName:\"Enter\",category:\"control\",inputs:[{start:0,name:\"tensor\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0},{tfName:\"frame_name\",name:\"frameName\",type:\"string\"},{tfName:\"is_constant\",name:\"isConstant\",type:\"bool\"}]},{tfOpName:\"Exit\",category:\"control\",inputs:[{start:0,name:\"tensor\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"NextIteration\",category:\"control\",inputs:[{start:0,name:\"tensor\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"TensorArrayV3\",category:\"control\",inputs:[{start:0,name:\"size\",type:\"number\"}],attrs:[{tfName:\"dtype\",name:\"dtype\",type:\"dtype\"},{tfName:\"element_shape\",name:\"elementShape\",type:\"shape\"},{tfName:\"dynamic_size\",name:\"dynamicSize\",type:\"bool\"},{tfName:\"clear_after_read\",name:\"clearAfterRead\",type:\"bool\"},{tfName:\"identical_element_shapes\",name:\"identicalElementShapes\",type:\"bool\"},{tfName:\"tensor_array_name\",name:\"name\",type:\"string\"}]},{tfOpName:\"TensorArrayWriteV3\",category:\"control\",inputs:[{start:0,name:\"tensorArrayId\",type:\"tensor\"},{start:1,name:\"index\",type:\"number\"},{start:2,name:\"tensor\",type:\"tensor\"},{start:3,name:\"flowIn\",type:\"number\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"TensorArrayReadV3\",category:\"control\",inputs:[{start:0,name:\"tensorArrayId\",type:\"tensor\"},{start:1,name:\"index\",type:\"number\"},{start:2,name:\"flowIn\",type:\"number\"}],attrs:[{tfName:\"dtype\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"TensorArrayGatherV3\",category:\"control\",inputs:[{start:0,name:\"tensorArrayId\",type:\"tensor\"},{start:1,name:\"indices\",type:\"number[]\"},{start:2,name:\"flowIn\",type:\"number\"}],attrs:[{tfName:\"dtype\",name:\"dtype\",type:\"dtype\"},{tfName:\"element_shape\",name:\"elementShape\",type:\"shape\"}]},{tfOpName:\"TensorArrayScatterV3\",category:\"control\",inputs:[{start:0,name:\"tensorArrayId\",type:\"tensor\"},{start:1,name:\"indices\",type:\"number[]\"},{start:2,name:\"tensor\",type:\"tensor\"},{start:3,name:\"flowIn\",type:\"number\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"TensorArrayConcatV3\",category:\"control\",inputs:[{start:0,name:\"tensorArrayId\",type:\"tensor\"},{start:1,name:\"flowIn\",type:\"number\"}],attrs:[{tfName:\"dtype\",name:\"dtype\",type:\"dtype\"},{tfName:\"element_shape_except0\",name:\"elementShapeExcept0\",type:\"shape\",notSupported:!0}]},{tfOpName:\"TensorArraySplitV3\",category:\"control\",inputs:[{start:0,name:\"tensorArrayId\",type:\"tensor\"},{start:1,name:\"tensor\",type:\"tensor\"},{start:2,name:\"lengths\",type:\"number[]\"},{start:3,name:\"flowIn\",type:\"number\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"TensorArraySizeV3\",category:\"control\",inputs:[{start:0,name:\"tensorArrayId\",type:\"tensor\"},{start:1,name:\"flowIn\",type:\"number\"}]},{tfOpName:\"TensorArrayCloseV3\",category:\"control\",inputs:[{start:0,name:\"tensorArrayId\",type:\"tensor\"}]},{tfOpName:\"StatelessIf\",category:\"control\",inputs:[{start:0,name:\"cond\",type:\"tensor\"},{start:1,end:0,name:\"args\",type:\"tensors\"}],attrs:[{tfName:\"then_branch\",name:\"thenBranch\",type:\"func\"},{tfName:\"else_branch\",name:\"elseBranch\",type:\"func\"}]},{tfOpName:\"If\",category:\"control\",inputs:[{start:0,name:\"cond\",type:\"tensor\"},{start:1,end:0,name:\"args\",type:\"tensors\"}],attrs:[{tfName:\"then_branch\",name:\"thenBranch\",type:\"func\"},{tfName:\"else_branch\",name:\"elseBranch\",type:\"func\"}]},{tfOpName:\"StatelessWhile\",category:\"control\",inputs:[{start:0,end:0,name:\"args\",type:\"tensors\"}],attrs:[{tfName:\"cond\",name:\"cond\",type:\"func\"},{tfName:\"body\",name:\"body\",type:\"func\"}]},{tfOpName:\"While\",category:\"control\",inputs:[{start:0,end:0,name:\"args\",type:\"tensors\"}],attrs:[{tfName:\"cond\",name:\"cond\",type:\"func\"},{tfName:\"body\",name:\"body\",type:\"func\"}]},{tfOpName:\"TensorListScatter\",category:\"control\",inputs:[{start:0,name:\"tensor\",type:\"tensor\"},{start:1,name:\"indices\",type:\"number[]\"},{start:2,name:\"elementShape\",type:\"shape\"}],attrs:[{tfName:\"element_dtype\",name:\"elementDType\",type:\"dtype\"}]},{tfOpName:\"TensorListScatterV2\",category:\"control\",inputs:[{start:0,name:\"tensor\",type:\"tensor\"},{start:1,name:\"indices\",type:\"number[]\"},{start:2,name:\"elementShape\",type:\"shape\"},{start:3,name:\"numElements\",type:\"number\"}],attrs:[{tfName:\"element_dtype\",name:\"elementDType\",type:\"dtype\"}]},{tfOpName:\"TensorListGather\",category:\"control\",inputs:[{start:0,name:\"tensorListId\",type:\"tensor\"},{start:1,name:\"indices\",type:\"number[]\"},{start:2,name:\"elementShape\",type:\"shape\"}],attrs:[{tfName:\"element_dtype\",name:\"elementDType\",type:\"dtype\"}]},{tfOpName:\"TensorListGetItem\",category:\"control\",inputs:[{start:0,name:\"tensorListId\",type:\"tensor\"},{start:1,name:\"index\",type:\"number\"},{start:2,name:\"elementShape\",type:\"shape\"}],attrs:[{tfName:\"element_dtype\",name:\"elementDType\",type:\"dtype\"}]},{tfOpName:\"TensorListSetItem\",category:\"control\",inputs:[{start:0,name:\"tensorListId\",type:\"tensor\"},{start:1,name:\"index\",type:\"number\"},{start:2,name:\"tensor\",type:\"tensor\"}],attrs:[{tfName:\"element_dtype\",name:\"elementDType\",type:\"dtype\"}]},{tfOpName:\"TensorListReserve\",category:\"control\",inputs:[{start:0,name:\"elementShape\",type:\"shape\"},{start:1,name:\"numElements\",type:\"number\"}],attrs:[{tfName:\"element_dtype\",name:\"elementDType\",type:\"dtype\"}]},{tfOpName:\"TensorListFromTensor\",category:\"control\",inputs:[{start:0,name:\"tensor\",type:\"tensor\"},{start:1,name:\"elementShape\",type:\"shape\"}],attrs:[{tfName:\"element_dtype\",name:\"elementDType\",type:\"dtype\"}]},{tfOpName:\"TensorListStack\",category:\"control\",inputs:[{start:0,name:\"tensorListId\",type:\"tensor\"},{start:1,name:\"elementShape\",type:\"shape\"}],attrs:[{tfName:\"element_dtype\",name:\"elementDType\",type:\"dtype\"},{tfName:\"num_elements\",name:\"numElements\",type:\"dtype\"}]},{tfOpName:\"TensorListSplit\",category:\"control\",inputs:[{start:0,name:\"tensor\",type:\"tensor\"},{start:1,name:\"elementShape\",type:\"shape\"},{start:2,name:\"lengths\",type:\"number[]\"}],attrs:[{tfName:\"element_dtype\",name:\"elementDType\",type:\"dtype\"}]},{tfOpName:\"TensorListConcat\",category:\"control\",inputs:[{start:0,name:\"tensorListId\",type:\"tensor\"}],attrs:[{tfName:\"element_shape\",name:\"elementShape\",type:\"shape\"},{tfName:\"element_dtype\",name:\"elementDType\",type:\"dtype\"}]},{tfOpName:\"TensorListPopBack\",category:\"control\",inputs:[{start:0,name:\"tensorListId\",type:\"tensor\"},{start:1,name:\"elementShape\",type:\"shape\"}],attrs:[{tfName:\"element_dtype\",name:\"elementDType\",type:\"dtype\"}]},{tfOpName:\"TensorListPushBack\",category:\"control\",inputs:[{start:0,name:\"tensorListId\",type:\"tensor\"},{start:1,name:\"tensor\",type:\"tensor\"}],attrs:[{tfName:\"element_dtype\",name:\"elementDType\",type:\"dtype\"}]}],ST=[{tfOpName:\"AvgPool\",category:\"convolution\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",notSupported:!0},{tfName:\"ksize\",name:\"kernelSize\",type:\"number[]\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"MaxPool\",category:\"convolution\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",notSupported:!0},{tfName:\"ksize\",name:\"kernelSize\",type:\"number[]\"},{tfName:\"explicit_paddings\",name:\"explicitPaddings\",type:\"number[]\",defaultValue:[],notSupported:!0},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"MaxPoolWithArgmax\",category:\"convolution\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"ksize\",name:\"kernelSize\",type:\"number[]\"},{tfName:\"include_batch_in_index\",name:\"includeBatchInIndex\",type:\"bool\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"AvgPool3D\",category:\"convolution\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",notSupported:!0},{tfName:\"ksize\",name:\"kernelSize\",type:\"number[]\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"MaxPool3D\",category:\"convolution\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",notSupported:!0},{tfName:\"ksize\",name:\"kernelSize\",type:\"number[]\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Conv1D\",category:\"convolution\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"filter\",type:\"tensor\"}],attrs:[{tfName:\"stride\",name:\"stride\",type:\"number\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",defaultValue:\"NWC\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0},{tfName:\"dilation\",name:\"dilation\",type:\"number\",defaultValue:1}]},{tfOpName:\"Conv2D\",category:\"convolution\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"filter\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0},{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"useCudnnOnGpu\",name:\"useCudnnOnGpu\",type:\"bool\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",defaultValue:\"NHWC\"},{tfName:\"explicit_paddings\",name:\"explicitPaddings\",type:\"number[]\",defaultValue:[]},{tfName:\"dilations\",name:\"dilations\",type:\"number[]\"}]},{tfOpName:\"_FusedConv2D\",category:\"convolution\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"filter\",type:\"tensor\"},{start:2,end:0,name:\"args\",type:\"tensors\"}],attrs:[{tfName:\"num_args\",name:\"numArgs\",type:\"number\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0},{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"explicit_paddings\",name:\"explicitPaddings\",type:\"number[]\",defaultValue:[]},{tfName:\"use_cudnn_on_gpu\",name:\"useCudnnOnGpu\",type:\"bool\",defaultValue:!0},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",defaultValue:\"NHWC\"},{tfName:\"dilations\",name:\"dilations\",type:\"number[]\",defaultValue:[1,1,1,1]},{tfName:\"fused_ops\",name:\"fusedOps\",type:\"string[]\",defaultValue:[]},{tfName:\"epsilon\",name:\"epsilon\",type:\"number\",defaultValue:1e-4},{tfName:\"leakyrelu_alpha\",name:\"leakyreluAlpha\",type:\"number\"}]},{tfOpName:\"Conv2DBackpropInput\",category:\"convolution\",inputs:[{start:2,name:\"x\",type:\"tensor\"},{start:1,name:\"filter\",type:\"tensor\"},{start:0,name:\"outputShape\",type:\"number[]\"}],attrs:[{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",notSupported:!0},{tfName:\"explicit_paddings\",name:\"explicitPaddings\",type:\"number[]\",defaultValue:[]},{tfName:\"dilations\",name:\"dilations\",type:\"number[]\",notSupported:!0}]},{tfOpName:\"DepthwiseConv2d\",category:\"convolution\",inputs:[{start:0,name:\"input\",type:\"tensor\"},{start:1,name:\"filter\",type:\"tensor\"}],attrs:[{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",defaultValue:\"NHWC\"},{tfName:\"explicit_paddings\",name:\"explicitPaddings\",type:\"number[]\",defaultValue:[]},{tfName:\"dilations\",name:\"dilations\",type:\"number[]\"}]},{tfOpName:\"DepthwiseConv2dNative\",category:\"convolution\",inputs:[{start:0,name:\"input\",type:\"tensor\"},{start:1,name:\"filter\",type:\"tensor\"}],attrs:[{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",defaultValue:\"NHWC\"},{tfName:\"explicit_paddings\",name:\"explicitPaddings\",type:\"number[]\",defaultValue:[]},{tfName:\"dilations\",name:\"dilations\",type:\"number[]\"}]},{tfOpName:\"FusedDepthwiseConv2dNative\",category:\"convolution\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"filter\",type:\"tensor\"},{start:2,end:0,name:\"args\",type:\"tensors\"}],attrs:[{tfName:\"num_args\",name:\"numArgs\",type:\"number\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0},{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",defaultValue:\"NHWC\"},{tfName:\"dilations\",name:\"dilations\",type:\"number[]\",defaultValue:[1,1,1,1]},{tfName:\"fused_ops\",name:\"fusedOps\",type:\"string[]\",defaultValue:[]},{tfName:\"explicit_paddings\",name:\"explicitPaddings\",type:\"number[]\",defaultValue:[]}]},{tfOpName:\"Conv3D\",category:\"convolution\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"filter\",type:\"tensor\"}],attrs:[{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",defaultValue:\"NHWC\"},{tfName:\"dilations\",name:\"dilations\",type:\"number[]\"}]},{tfOpName:\"Dilation2D\",category:\"convolution\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"filter\",type:\"tensor\"}],attrs:[{tfName:\"strides\",name:\"strides\",type:\"number[]\"},{tfName:\"rates\",name:\"dilations\",type:\"number[]\"},{tfName:\"padding\",name:\"pad\",type:\"string\"}]}],TT=[{tfOpName:\"Fill\",category:\"creation\",inputs:[{start:0,name:\"shape\",type:\"number[]\"},{start:1,name:\"value\",type:\"number\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"LinSpace\",category:\"creation\",inputs:[{start:0,name:\"start\",type:\"number\"},{start:1,name:\"stop\",type:\"number\"},{start:2,name:\"num\",type:\"number\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"OneHot\",category:\"creation\",inputs:[{start:0,name:\"indices\",type:\"tensor\"},{start:1,name:\"depth\",type:\"number\"},{start:2,name:\"onValue\",type:\"number\",defaultValue:1},{start:3,name:\"offValue\",type:\"number\",defaultValue:0}],attrs:[{tfName:\"axis\",name:\"axis\",type:\"number\",notSupported:!0},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Ones\",category:\"creation\",inputs:[{start:0,name:\"shape\",type:\"number[]\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"OnesLike\",category:\"creation\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"dtype\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"RandomUniform\",category:\"creation\",inputs:[{start:0,name:\"shape\",type:\"number[]\"}],attrs:[{tfName:\"minval\",name:\"minval\",type:\"number\",defaultValue:0},{tfName:\"maxval\",name:\"maxval\",type:\"number\",defaultValue:1},{tfName:\"dtype\",name:\"dtype\",type:\"dtype\"},{tfName:\"seed\",name:\"seed\",type:\"number\",defaultValue:0},{tfName:\"seed2\",name:\"seed2\",type:\"number\",defaultValue:0,notSupported:!0},{tfName:\"T\",name:\"T\",type:\"number\",notSupported:!0}]},{tfOpName:\"Range\",category:\"creation\",inputs:[{start:0,name:\"start\",type:\"number\"},{start:1,name:\"stop\",type:\"number\"},{start:2,name:\"step\",type:\"number\",defaultValue:0}],attrs:[{tfName:\"Tidx\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"TruncatedNormal\",category:\"creation\",inputs:[{start:0,name:\"shape\",type:\"number[]\"}],attrs:[{tfName:\"means\",name:\"mean\",type:\"number\",defaultValue:0},{tfName:\"stddev\",name:\"stdDev\",type:\"number\",defaultValue:1},{tfName:\"seed\",name:\"seed\",type:\"number\"},{tfName:\"seed2\",name:\"seed2\",type:\"number\",defaultValue:0,notSupported:!0},{tfName:\"dtype\",name:\"dtype\",type:\"dtype\"},{tfName:\"T\",name:\"T\",type:\"number\",notSupported:!0}]},{tfOpName:\"Zeros\",category:\"creation\",inputs:[{start:0,name:\"shape\",type:\"number[]\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"ZerosLike\",category:\"creation\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"Multinomial\",category:\"creation\",inputs:[{start:0,name:\"logits\",type:\"tensor\"},{start:1,name:\"numSamples\",type:\"number\"}],attrs:[{tfName:\"seed\",name:\"seed\",type:\"number\"},{tfName:\"seed2\",name:\"seed2\",type:\"number\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\"},{tfName:\"output_dtype\",name:\"output_dtype\",type:\"dtype\"}]}],_T=[{tfOpName:\"NonMaxSuppressionV2\",category:\"dynamic\",inputs:[{start:0,name:\"boxes\",type:\"tensor\"},{start:1,name:\"scores\",type:\"tensor\"},{start:2,name:\"maxOutputSize\",type:\"number\"},{start:3,name:\"iouThreshold\",type:\"number\"}]},{tfOpName:\"NonMaxSuppressionV3\",category:\"dynamic\",inputs:[{start:0,name:\"boxes\",type:\"tensor\"},{start:1,name:\"scores\",type:\"tensor\"},{start:2,name:\"maxOutputSize\",type:\"number\"},{start:3,name:\"iouThreshold\",type:\"number\"},{start:4,name:\"scoreThreshold\",type:\"number\"}]},{tfOpName:\"NonMaxSuppressionV4\",category:\"dynamic\",inputs:[{start:0,name:\"boxes\",type:\"tensor\"},{start:1,name:\"scores\",type:\"tensor\"},{start:2,name:\"maxOutputSize\",type:\"number\"},{start:3,name:\"iouThreshold\",type:\"number\"},{start:4,name:\"scoreThreshold\",type:\"number\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0},{tfName:\"T_threshold\",name:\"threshold\",type:\"dtype\",notSupported:!0},{tfName:\"pad_to_max_output_size\",name:\"padToMaxOutputSize\",type:\"bool\"}]},{tfOpName:\"NonMaxSuppressionV5\",category:\"dynamic\",inputs:[{start:0,name:\"boxes\",type:\"tensor\"},{start:1,name:\"scores\",type:\"tensor\"},{start:2,name:\"maxOutputSize\",type:\"number\"},{start:3,name:\"iouThreshold\",type:\"number\"},{start:4,name:\"scoreThreshold\",type:\"number\"},{start:5,name:\"softNmsSigma\",type:\"number\"}]},{tfOpName:\"Where\",category:\"dynamic\",inputs:[{start:0,name:\"condition\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"ListDiff\",category:\"dynamic\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"y\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]}],MT=[{tfOpName:\"TopKV2\",category:\"evaluation\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"k\",type:\"number\"}],attrs:[{tfName:\"sorted\",name:\"sorted\",type:\"bool\"}]},{tfOpName:\"Unique\",category:\"evaluation\",inputs:[{start:0,name:\"x\",type:\"tensor\"}]},{tfOpName:\"UniqueV2\",category:\"evaluation\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number\"}]}],kT=[{tfOpName:\"PlaceholderWithDefault\",category:\"graph\",inputs:[{start:0,name:\"default\",type:\"tensor\"}],attrs:[{tfName:\"shape\",name:\"shape\",type:\"shape\"},{tfName:\"dtype\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"Placeholder\",category:\"graph\",attrs:[{tfName:\"shape\",name:\"shape\",type:\"shape\"},{tfName:\"dtype\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"Const\",category:\"graph\"},{tfOpName:\"Identity\",category:\"graph\",inputs:[{start:0,name:\"x\",type:\"tensor\"}]},{tfOpName:\"IdentityN\",category:\"graph\",inputs:[{start:0,end:0,name:\"x\",type:\"tensors\"}]},{tfOpName:\"Snapshot\",category:\"graph\",inputs:[{start:0,name:\"x\",type:\"tensor\"}]},{tfOpName:\"Rank\",category:\"graph\",inputs:[{start:0,name:\"x\",type:\"tensor\"}]},{tfOpName:\"Size\",category:\"graph\",inputs:[{start:0,name:\"x\",type:\"tensor\"}]},{tfOpName:\"Shape\",category:\"graph\",inputs:[{start:0,name:\"x\",type:\"tensor\"}]},{tfOpName:\"ShapeN\",category:\"graph\",inputs:[{start:0,end:0,name:\"x\",type:\"tensors\"}]},{tfOpName:\"Print\",category:\"graph\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"data\",type:\"tensors\"}],attrs:[{tfName:\"message\",name:\"message\",type:\"string\"},{tfName:\"first_n\",name:\"firstN\",type:\"number\",notSupported:!0},{tfName:\"summarize\",name:\"summarize\",type:\"number\",defaultValue:3}]},{tfOpName:\"NoOp\",category:\"graph\",inputs:[]},{tfOpName:\"StopGradient\",category:\"graph\",inputs:[{start:0,name:\"x\",type:\"tensor\"}]},{tfOpName:\"FakeQuantWithMinMaxVars\",category:\"graph\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"min\",name:\"min\",type:\"number\"},{tfName:\"max\",name:\"max\",type:\"number\"}]}],ET=[{tfOpName:\"HashTable\",category:\"hash_table\",inputs:[],attrs:[{tfName:\"shared_name\",name:\"sharedName\",type:\"string\"},{tfName:\"use_node_name_sharing\",name:\"useNodeNameSharing\",type:\"bool\"},{tfName:\"key_dtype\",name:\"keyDType\",type:\"dtype\"},{tfName:\"value_dtype\",name:\"valueDType\",type:\"dtype\"}]},{tfOpName:\"HashTableV2\",category:\"hash_table\",inputs:[],attrs:[{tfName:\"shared_name\",name:\"sharedName\",type:\"string\"},{tfName:\"use_node_name_sharing\",name:\"useNodeNameSharing\",type:\"bool\"},{tfName:\"key_dtype\",name:\"keyDType\",type:\"dtype\"},{tfName:\"value_dtype\",name:\"valueDType\",type:\"dtype\"}]},{tfOpName:\"LookupTableImport\",category:\"hash_table\",inputs:[{start:0,name:\"tableHandle\",type:\"tensor\"},{start:1,name:\"keys\",type:\"tensor\"},{start:2,name:\"values\",type:\"tensor\"}],attrs:[{tfName:\"Tin\",name:\"tIn\",type:\"dtype\",notSupported:!0},{tfName:\"Tout\",name:\"tOut\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"LookupTableImportV2\",category:\"hash_table\",inputs:[{start:0,name:\"tableHandle\",type:\"tensor\"},{start:1,name:\"keys\",type:\"tensor\"},{start:2,name:\"values\",type:\"tensor\"}],attrs:[{tfName:\"Tin\",name:\"tIn\",type:\"dtype\",notSupported:!0},{tfName:\"Tout\",name:\"tOut\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"LookupTableFind\",category:\"hash_table\",inputs:[{start:0,name:\"tableHandle\",type:\"tensor\"},{start:1,name:\"keys\",type:\"tensor\"},{start:2,name:\"defaultValue\",type:\"tensor\"}],attrs:[{tfName:\"Tin\",name:\"tIn\",type:\"dtype\",notSupported:!0},{tfName:\"Tout\",name:\"tOut\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"LookupTableFindV2\",category:\"hash_table\",inputs:[{start:0,name:\"tableHandle\",type:\"tensor\"},{start:1,name:\"keys\",type:\"tensor\"},{start:2,name:\"defaultValue\",type:\"tensor\"}],attrs:[{tfName:\"Tin\",name:\"tIn\",type:\"dtype\",notSupported:!0},{tfName:\"Tout\",name:\"tOut\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"LookupTableSize\",category:\"hash_table\",inputs:[{start:0,name:\"tableHandle\",type:\"tensor\"}]},{tfOpName:\"LookupTableSizeV2\",category:\"hash_table\",inputs:[{start:0,name:\"tableHandle\",type:\"tensor\"}]}],IT=[{tfOpName:\"ResizeBilinear\",category:\"image\",inputs:[{start:0,name:\"images\",type:\"tensor\"},{start:1,name:\"size\",type:\"number[]\"}],attrs:[{tfName:\"align_corners\",name:\"alignCorners\",type:\"bool\"},{tfName:\"half_pixel_centers\",name:\"halfPixelCenters\",type:\"bool\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"ResizeNearestNeighbor\",category:\"image\",inputs:[{start:0,name:\"images\",type:\"tensor\"},{start:1,name:\"size\",type:\"number[]\"}],attrs:[{tfName:\"align_corners\",name:\"alignCorners\",type:\"bool\"},{tfName:\"half_pixel_centers\",name:\"halfPixelCenters\",type:\"bool\"},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"CropAndResize\",category:\"image\",inputs:[{start:0,name:\"image\",type:\"tensor\"},{start:1,name:\"boxes\",type:\"tensor\"},{start:2,name:\"boxInd\",type:\"tensor\"},{start:3,name:\"cropSize\",type:\"number[]\"}],attrs:[{tfName:\"method\",name:\"method\",type:\"string\"},{tfName:\"extrapolation_value\",name:\"extrapolationValue\",type:\"number\"}]}],CT=[{tfOpName:\"Equal\",category:\"logical\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"NotEqual\",category:\"logical\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Greater\",category:\"logical\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"GreaterEqual\",category:\"logical\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Less\",category:\"logical\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"LessEqual\",category:\"logical\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"LogicalAnd\",category:\"logical\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"LogicalNot\",category:\"logical\",inputs:[{start:0,name:\"a\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"LogicalOr\",category:\"logical\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Select\",category:\"logical\",inputs:[{start:0,name:\"condition\",type:\"tensor\"},{start:1,name:\"a\",type:\"tensor\"},{start:2,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"SelectV2\",category:\"logical\",inputs:[{start:0,name:\"condition\",type:\"tensor\"},{start:1,name:\"a\",type:\"tensor\"},{start:2,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]}],NT=[{tfOpName:\"_FusedMatMul\",category:\"matrices\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"},{start:2,end:0,name:\"args\",type:\"tensors\"}],attrs:[{tfName:\"num_args\",name:\"numArgs\",type:\"number\"},{tfName:\"fused_ops\",name:\"fusedOps\",type:\"string[]\",defaultValue:[]},{tfName:\"epsilon\",name:\"epsilon\",type:\"number\",defaultValue:1e-4},{tfName:\"transpose_a\",name:\"transposeA\",type:\"bool\",defaultValue:!1},{tfName:\"transpose_b\",name:\"transposeB\",type:\"bool\",defaultValue:!1},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"MatMul\",category:\"matrices\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"transpose_a\",name:\"transposeA\",type:\"bool\",defaultValue:!1},{tfName:\"transpose_b\",name:\"transposeB\",type:\"bool\",defaultValue:!1},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"BatchMatMul\",category:\"matrices\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"adj_x\",name:\"transposeA\",type:\"bool\",defaultValue:!1},{tfName:\"adj_y\",name:\"transposeB\",type:\"bool\",defaultValue:!1},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"BatchMatMulV2\",category:\"matrices\",inputs:[{start:0,name:\"a\",type:\"tensor\"},{start:1,name:\"b\",type:\"tensor\"}],attrs:[{tfName:\"adj_x\",name:\"transposeA\",type:\"bool\",defaultValue:!1},{tfName:\"adj_y\",name:\"transposeB\",type:\"bool\",defaultValue:!1},{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Transpose\",category:\"matrices\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"perm\",type:\"number[]\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"Einsum\",category:\"matrices\",inputs:[{start:0,end:0,name:\"tensors\",type:\"tensors\"}],attrs:[{tfName:\"equation\",name:\"equation\",type:\"string\"},{tfName:\"N\",name:\"n\",type:\"number\",defaultValue:2},{tfName:\"T\",name:\"dtype\",type:\"dtype\"}]}],AT=[{tfOpName:\"FusedBatchNorm\",category:\"normalization\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"scale\",type:\"tensor\"},{start:2,name:\"offset\",type:\"tensor\"},{start:3,name:\"mean\",type:\"tensor\"},{start:4,name:\"variance\",type:\"tensor\"}],attrs:[{tfName:\"epsilon\",name:\"epsilon\",type:\"number\",defaultValue:.001},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",notSupported:!0}]},{tfOpName:\"FusedBatchNormV2\",category:\"normalization\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"scale\",type:\"tensor\"},{start:2,name:\"offset\",type:\"tensor\"},{start:3,name:\"mean\",type:\"tensor\"},{start:4,name:\"variance\",type:\"tensor\"}],attrs:[{tfName:\"epsilon\",name:\"epsilon\",type:\"number\",defaultValue:.001},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",notSupported:!0}]},{tfOpName:\"FusedBatchNormV3\",category:\"normalization\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"scale\",type:\"tensor\"},{start:2,name:\"offset\",type:\"tensor\"},{start:3,name:\"mean\",type:\"tensor\"},{start:4,name:\"variance\",type:\"tensor\"}],attrs:[{tfName:\"epsilon\",name:\"epsilon\",type:\"number\",defaultValue:.001},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\",notSupported:!0}]},{tfOpName:\"LRN\",category:\"normalization\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"depth_radius\",name:\"radius\",type:\"number\",defaultValue:5},{tfName:\"bias\",name:\"bias\",type:\"number\",defaultValue:1},{tfName:\"alpha\",name:\"alpha\",type:\"number\",defaultValue:1},{tfName:\"beta\",name:\"beta\",type:\"number\",defaultValue:.5}]},{tfOpName:\"Softmax\",category:\"normalization\",inputs:[{start:0,name:\"x\",type:\"tensor\"}]},{tfOpName:\"LogSoftmax\",category:\"normalization\",inputs:[{start:0,name:\"x\",type:\"tensor\"}]},{tfOpName:\"SparseToDense\",category:\"normalization\",inputs:[{start:0,name:\"sparseIndices\",type:\"tensor\"},{start:1,name:\"outputShape\",type:\"number[]\"},{start:2,name:\"sparseValues\",type:\"tensor\"},{start:3,name:\"defaultValue\",type:\"tensor\"}],attrs:[{tfName:\"validate_indices\",name:\"validateIndices\",type:\"bool\",defaultValue:!0,notSupported:!0}]}],RT=[{tfOpName:\"Bincount\",category:\"reduction\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"size\",type:\"number\"},{start:2,name:\"weights\",type:\"tensor\"}]},{tfOpName:\"DenseBincount\",category:\"reduction\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"size\",type:\"number\"},{start:2,name:\"weights\",type:\"tensor\"}],attrs:[{tfName:\"binary_output\",name:\"binaryOutput\",type:\"bool\"}]},{tfOpName:\"Max\",category:\"reduction\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number[]\"}],attrs:[{tfName:\"keep_dims\",name:\"keepDims\",type:\"bool\"}]},{tfOpName:\"Mean\",category:\"reduction\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number[]\"}],attrs:[{tfName:\"keep_dims\",name:\"keepDims\",type:\"bool\"}]},{tfOpName:\"Min\",category:\"reduction\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number[]\"}],attrs:[{tfName:\"keep_dims\",name:\"keepDims\",type:\"bool\"}]},{tfOpName:\"Sum\",category:\"reduction\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number[]\"}],attrs:[{tfName:\"keep_dims\",name:\"keepDims\",type:\"bool\"}]},{tfOpName:\"All\",category:\"reduction\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number[]\"}],attrs:[{tfName:\"keep_dims\",name:\"keepDims\",type:\"bool\"}]},{tfOpName:\"Any\",category:\"reduction\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number[]\"}],attrs:[{tfName:\"keep_dims\",name:\"keepDims\",type:\"bool\"}]},{tfOpName:\"ArgMax\",category:\"reduction\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number\"}]},{tfOpName:\"ArgMin\",category:\"reduction\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number\"}]},{tfOpName:\"Prod\",category:\"reduction\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number[]\"}],attrs:[{tfName:\"keep_dims\",name:\"keepDims\",type:\"bool\"}]},{tfOpName:\"Cumsum\",category:\"reduction\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number\"}],attrs:[{tfName:\"exclusive\",name:\"exclusive\",type:\"bool\"},{tfName:\"reverse\",name:\"reverse\",type:\"bool\"}]}],LT=[{tfOpName:\"ConcatV2\",category:\"slice_join\",inputs:[{start:0,end:-1,name:\"tensors\",type:\"tensors\"},{start:-1,name:\"axis\",type:\"number\"}],attrs:[{tfName:\"N\",name:\"n\",type:\"number\",defaultValue:2}]},{tfOpName:\"Concat\",category:\"slice_join\",inputs:[{start:1,end:0,name:\"tensors\",type:\"tensors\"},{start:0,name:\"axis\",type:\"number\"}],attrs:[{tfName:\"N\",name:\"n\",type:\"number\",defaultValue:2}]},{tfOpName:\"GatherV2\",category:\"slice_join\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"indices\",type:\"tensor\"},{start:2,name:\"axis\",type:\"number\",defaultValue:0}],attrs:[{tfName:\"batch_dims\",name:\"batchDims\",type:\"number\",defaultValue:0}]},{tfOpName:\"Gather\",category:\"slice_join\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"indices\",type:\"tensor\"}],attrs:[{tfName:\"validate_indices\",name:\"validateIndices\",type:\"bool\",notSupported:!0}]},{tfOpName:\"Reverse\",category:\"slice_join\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"dims\",type:\"bool[]\"}]},{tfOpName:\"ReverseV2\",category:\"slice_join\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number[]\"}]},{tfOpName:\"Slice\",category:\"slice_join\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"begin\",type:\"number[]\"},{start:2,name:\"size\",type:\"number[]\"}]},{tfOpName:\"StridedSlice\",category:\"slice_join\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"begin\",type:\"number[]\"},{start:2,name:\"end\",type:\"number[]\"},{start:3,name:\"strides\",type:\"number[]\"}],attrs:[{tfName:\"begin_mask\",name:\"beginMask\",type:\"number\",defaultValue:0},{tfName:\"end_mask\",name:\"endMask\",type:\"number\",defaultValue:0},{tfName:\"new_axis_mask\",name:\"newAxisMask\",type:\"number\",defaultValue:0},{tfName:\"ellipsis_mask\",name:\"ellipsisMask\",type:\"number\",defaultValue:0},{tfName:\"shrink_axis_mask\",name:\"shrinkAxisMask\",type:\"number\",defaultValue:0}]},{tfOpName:\"Pack\",category:\"slice_join\",inputs:[{start:0,end:0,name:\"tensors\",type:\"tensors\"}],attrs:[{tfName:\"axis\",name:\"axis\",type:\"number\",defaultValue:0}]},{tfOpName:\"Unpack\",category:\"slice_join\",inputs:[{start:0,name:\"tensor\",type:\"tensor\"}],attrs:[{tfName:\"axis\",name:\"axis\",type:\"number\",defaultValue:0},{tfName:\"num\",name:\"num\",type:\"number\",defaultValue:0,notSupported:!0}]},{tfOpName:\"Tile\",category:\"slice_join\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"reps\",type:\"number[]\"}]},{tfOpName:\"Split\",category:\"slice_join\",inputs:[{start:0,name:\"axis\",type:\"number\",defaultValue:0},{start:1,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"num_split\",name:\"numOrSizeSplits\",type:\"number\",defaultValue:1}]},{tfOpName:\"SplitV\",category:\"slice_join\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"numOrSizeSplits\",type:\"number[]\"},{start:2,name:\"axis\",type:\"number\",defaultValue:0}]},{tfOpName:\"ScatterNd\",category:\"slice_join\",inputs:[{start:0,name:\"indices\",type:\"tensor\"},{start:1,name:\"values\",type:\"tensor\"},{start:2,name:\"shape\",type:\"number[]\"}]},{tfOpName:\"GatherNd\",category:\"slice_join\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"indices\",type:\"tensor\"}]},{tfOpName:\"SparseToDense\",category:\"slice_join\",inputs:[{start:0,name:\"sparseIndices\",type:\"tensor\"},{start:1,name:\"outputShape\",type:\"number[]\"},{start:2,name:\"sparseValues\",type:\"tensor\"},{start:3,name:\"defaultValue\",type:\"tensor\"}],attrs:[{tfName:\"validate_indices\",name:\"validateIndices\",type:\"bool\",defaultValue:!1,notSupported:!0}]}],DT=[{tfOpName:\"SparseFillEmptyRows\",category:\"sparse\",inputs:[{start:0,name:\"indices\",type:\"tensor\"},{start:1,name:\"values\",type:\"tensor\"},{start:2,name:\"denseShape\",type:\"tensor\"},{start:3,name:\"defaultValue\",type:\"tensor\"}]},{tfOpName:\"SparseReshape\",category:\"sparse\",inputs:[{start:0,name:\"inputIndices\",type:\"tensor\"},{start:1,name:\"inputShape\",type:\"tensor\"},{start:2,name:\"newShape\",type:\"tensor\"}],attrs:[{tfName:\"T\",name:\"dtype\",type:\"dtype\",notSupported:!0}]},{tfOpName:\"SparseSegmentMean\",category:\"sparse\",inputs:[{start:0,name:\"data\",type:\"tensor\"},{start:1,name:\"indices\",type:\"tensor\"},{start:2,name:\"segmentIds\",type:\"tensor\"}]},{tfOpName:\"SparseSegmentSum\",category:\"sparse\",inputs:[{start:0,name:\"data\",type:\"tensor\"},{start:1,name:\"indices\",type:\"tensor\"},{start:2,name:\"segmentIds\",type:\"tensor\"}]}],FT=[{tfOpName:\"FFT\",category:\"spectral\",inputs:[{start:0,name:\"x\",type:\"tensor\"}]},{tfOpName:\"IFFT\",category:\"spectral\",inputs:[{start:0,name:\"x\",type:\"tensor\"}]},{tfOpName:\"RFFT\",category:\"spectral\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"fft_length\",type:\"number\",notSupported:!0}]},{tfOpName:\"IRFFT\",category:\"spectral\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"fft_length\",type:\"number\",notSupported:!0}]}],$T=[{tfOpName:\"StringNGrams\",category:\"string\",inputs:[{start:0,name:\"data\",type:\"tensor\"},{start:1,name:\"dataSplits\",type:\"tensor\"}],attrs:[{tfName:\"separator\",name:\"separator\",type:\"string\"},{tfName:\"ngram_widths\",name:\"nGramWidths\",type:\"number[]\"},{tfName:\"left_pad\",name:\"leftPad\",type:\"string\"},{tfName:\"right_pad\",name:\"rightPad\",type:\"string\"},{tfName:\"pad_width\",name:\"padWidth\",type:\"number\"},{tfName:\"preserve_short_sequences\",name:\"preserveShortSequences\",type:\"bool\"}],outputs:[\"ngrams\",\"ngrams_splits\"]},{tfOpName:\"StringSplit\",category:\"string\",inputs:[{start:0,name:\"input\",type:\"tensor\"},{start:1,name:\"delimiter\",type:\"tensor\"}],attrs:[{tfName:\"skip_empty\",name:\"skipEmpty\",type:\"bool\"}],outputs:[\"indices\",\"values\",\"shape\"]},{tfOpName:\"StringToHashBucketFast\",category:\"string\",inputs:[{start:0,name:\"input\",type:\"tensor\"}],attrs:[{tfName:\"num_buckets\",name:\"numBuckets\",type:\"number\"}]}],OT=[{tfOpName:\"Cast\",category:\"transformation\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"SrcT\",name:\"sdtype\",type:\"dtype\",notSupported:!0},{tfName:\"DstT\",name:\"dtype\",type:\"dtype\"}]},{tfOpName:\"ExpandDims\",category:\"transformation\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"axis\",type:\"number\"}]},{tfOpName:\"MirrorPad\",category:\"transformation\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"padding\",type:\"number[]\"}],attrs:[{tfName:\"mode\",name:\"mode\",type:\"string\"}]},{tfOpName:\"Pad\",category:\"transformation\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"padding\",type:\"number[]\"}],attrs:[{tfName:\"constant_value\",name:\"constantValue\",type:\"number\",defaultValue:0}]},{tfOpName:\"PadV2\",category:\"transformation\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"padding\",type:\"number[]\"},{start:2,name:\"constantValue\",type:\"number\",defaultValue:0}]},{tfOpName:\"Reshape\",category:\"transformation\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"shape\",type:\"number[]\"}]},{tfOpName:\"Squeeze\",category:\"transformation\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"axis\",tfDeprecatedName:\"squeeze_dims\",name:\"axis\",type:\"number[]\"}]},{tfOpName:\"SpaceToBatchND\",category:\"transformation\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"blockShape\",type:\"number[]\"},{start:2,name:\"paddings\",type:\"number[]\"}]},{tfOpName:\"BatchToSpaceND\",category:\"transformation\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"blockShape\",type:\"number[]\"},{start:2,name:\"crops\",type:\"number[]\"}]},{tfOpName:\"DepthToSpace\",category:\"transformation\",inputs:[{start:0,name:\"x\",type:\"tensor\"}],attrs:[{tfName:\"block_size\",name:\"blockSize\",type:\"number\"},{tfName:\"data_format\",name:\"dataFormat\",type:\"string\"}]},{tfOpName:\"BroadcastTo\",category:\"transformation\",inputs:[{start:0,name:\"x\",type:\"tensor\"},{start:1,name:\"shape\",type:\"number[]\"}],attrs:[]},{tfOpName:\"BroadcastArgs\",category:\"transformation\",inputs:[{start:0,name:\"s0\",type:\"tensor\"},{start:1,name:\"s1\",type:\"tensor\"}],attrs:[]}];class PT{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const t=[].concat(...[_,M,k,E,I,C,N,A,R,L,D,F,$,O,P,z,B,U,V].map((t=>t.json)));this.opMappers=t.reduce(((t,e)=>(t[e.tfOpName]=e,t)),{})}transformGraph(t,e={}){const n=t.node,r=[],s=[],i=[],a=n.reduce(((t,e)=>(t[e.name]=this.mapNode(e),e.op.startsWith(\"Placeholder\")?r.push(t[e.name]):\"Const\"===e.op?s.push(t[e.name]):null!=e.input&&0!==e.input.length||i.push(t[e.name]),t)),{});let o=[];const l=[];let u={},c={};null!=e&&(u=this.mapSignatureEntries(e.inputs),c=this.mapSignatureEntries(e.outputs));const h=Object.keys(a);h.forEach((t=>{const e=a[t];e.inputNames.forEach(((t,n)=>{const[r,,s]=fT(t),i=a[r];if(null!=i.outputs){const t=i.outputs.indexOf(s);if(-1!==t){const s=`${r}:${t}`;e.inputNames[n]=s}}e.inputs.push(i),i.children.push(e)}))})),0===Object.keys(c).length?h.forEach((t=>{const e=a[t];0===e.children.length&&l.push(e)})):Object.keys(c).forEach((t=>{const[e]=fT(t),n=a[e];null!=n&&(n.signatureKey=c[t],l.push(n))})),Object.keys(u).length>0?Object.keys(u).forEach((t=>{const[e]=fT(t),n=a[e];n&&(n.signatureKey=u[t],o.push(n))})):o=r;let d={};null!=t.library&&null!=t.library.function&&(d=t.library.function.reduce(((t,e)=>(t[e.signature.name]=this.mapFunction(e),t)),{}));const p={nodes:a,inputs:o,outputs:l,weights:s,placeholders:r,signature:e,functions:d};return i.length>0&&(p.initNodes=i),p}mapSignatureEntries(t){return Object.keys(t||{}).reduce(((e,n)=>(e[t[n].name]=n,e)),{})}mapNode(t){const e=cT(t.op)||this.opMappers[t.op]||{};null==t.attr&&(t.attr={});const n={name:t.name,op:t.op,category:e.category,inputNames:(t.input||[]).map((t=>t.startsWith(\"^\")?t.substr(1):t)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:t.attr,outputs:e.outputs};return null!=e.inputs&&(n.inputParams=e.inputs.reduce(((t,e)=>(t[e.name]={type:e.type,inputIndexStart:e.start,inputIndexEnd:e.end},t)),{})),null!=e.attrs&&(n.attrParams=e.attrs.reduce(((e,n)=>{const r=n.type;let s;switch(n.type){case\"string\":s=BT(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=BT(t.attr,n.tfDeprecatedName,n.defaultValue));break;case\"string[]\":s=YT(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=YT(t.attr,n.tfDeprecatedName,n.defaultValue));break;case\"number\":s=VT(t.attr,n.tfName,n.defaultValue||0),void 0===s&&n.tfDeprecatedName&&(s=VT(t.attr,n.tfDeprecatedName,n.defaultValue));break;case\"number[]\":s=KT(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=KT(t.attr,n.tfDeprecatedName,n.defaultValue));break;case\"bool\":s=UT(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=UT(t.attr,n.tfDeprecatedName,n.defaultValue));break;case\"bool[]\":s=JT(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=JT(t.attr,n.tfDeprecatedName,n.defaultValue));break;case\"shape\":s=XT(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=XT(t.attr,n.tfDeprecatedName,n.defaultValue));break;case\"shape[]\":s=ZT(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=ZT(t.attr,n.tfDeprecatedName,n.defaultValue));break;case\"dtype\":s=HT(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=HT(t.attr,n.tfDeprecatedName,n.defaultValue));break;case\"dtype[]\":s=jT(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=jT(t.attr,n.tfDeprecatedName,n.defaultValue));break;case\"func\":s=GT(t.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=GT(t.attr,n.tfDeprecatedName,n.defaultValue));break;case\"tensor\":case\"tensors\":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${t.op}`)}return e[n.name]={value:s,type:r},e}),{})),n}mapFunction(t){const e=t.nodeDef,n=[];let r={};null!=e&&(r=e.reduce(((t,e)=>(t[e.name]=this.mapNode(e),\"Const\"===e.op&&n.push(t[e.name]),t)),{}));const s=[],i=[];t.signature.inputArg.forEach((t=>{const[e]=fT(t.name),n={name:e,op:\"Placeholder\",inputs:[],inputNames:[],category:\"graph\",inputParams:{},attrParams:{dtype:{value:WT(t.type),type:\"dtype\"}},children:[]};n.signatureKey=t.name,s.push(n),r[e]=n})),Object.keys(r).forEach((t=>{const e=r[t];e.inputNames.forEach(((t,n)=>{const[s,,i]=fT(t),a=r[s];if(null!=a.outputs){const t=a.outputs.indexOf(i);if(-1!==t){const r=`${s}:${t}`;e.inputNames[n]=r}}e.inputs.push(a),a.children.push(e)}))}));const a=t.ret;t.signature.outputArg.forEach((t=>{const[e,n]=fT(a[t.name]),s=r[e];null!=s&&(s.defaultOutput=n,i.push(s))}));const o=this.mapArgsToSignature(t);return{nodes:r,inputs:s,outputs:i,weights:n,placeholders:[],signature:o}}mapArgsToSignature(t){return{methodName:t.signature.name,inputs:t.signature.inputArg.reduce(((t,e)=>(t[e.name]=this.mapArgToTensorInfo(e),t)),{}),outputs:t.signature.outputArg.reduce(((e,n)=>(e[n.name]=this.mapArgToTensorInfo(n,t.ret),e)),{})}}mapArgToTensorInfo(t,e){let n=t.name;return null!=e&&(n=e[n]),{name:n,dtype:t.type}}}function zT(t,e){const n=Array.isArray(t)?String.fromCharCode.apply(null,t):function(t){const e=jt().global;if(void 0!==e.atob)return e.atob(t);if(\"undefined\"!=typeof Buffer)return new Buffer(t,\"base64\").toString();throw new Error(\"Unable to decode base64 in this environment. Missing built-in atob() or Buffer()\")}(t);return e?n:n.toLowerCase()}function BT(t,e,n,r=!1){const s=t[e];return null!=s?zT(s.s,r):n}function UT(t,e,n){const r=t[e];return r?r.b:n}function VT(t,e,n){const r=t[e]||{},s=null!=r.i?r.i:null!=r.f?r.f:n;return\"number\"==typeof s?s:parseInt(s,10)}function WT(t){switch(\"string\"==typeof t&&(t=aT[t]),t){case aT.DT_FLOAT:return\"float32\";case aT.DT_INT32:case aT.DT_INT64:case aT.DT_INT8:case aT.DT_UINT8:return\"int32\";case aT.DT_BOOL:return\"bool\";case aT.DT_DOUBLE:return\"float32\";case aT.DT_STRING:return\"string\";default:return null}}function GT(t,e,n){const r=t[e];return r&&r.func?r.func.name:n}function HT(t,e,n){const r=t[e];return r&&r.type?WT(r.type):n}function jT(t,e,n){const r=t[e];return r&&r.list&&r.list.type?r.list.type.map((t=>WT(t))):n}function qT(t){if(!t.unknownRank)return null!=t.dim?t.dim.map((t=>\"number\"==typeof t.size?t.size:parseInt(t.size,10))):[]}function XT(t,e,n){const r=t[e];return r&&r.shape?qT(r.shape):n}function KT(t,e,n){const r=t[e];return r?((r.list.f&&r.list.f.length?r.list.f:r.list.i)||[]).map((t=>\"number\"==typeof t?t:parseInt(t,10))):n}function YT(t,e,n,r=!1){const s=t[e];return s&&s.list&&s.list.s?s.list.s.map((t=>zT(t,r))):n}function ZT(t,e,n){const r=t[e];return r&&r.list&&r.list.shape?r.list.shape.map((t=>qT(t))):n}function JT(t,e,n){const r=t[e];return r&&r.list&&r.list.b?r.list.b:n}class QT{constructor(t,e,n){this.node=t,this.tensorMap=e,this.context=n,this.inputs=[],this.attrs={},this.inputs=t.inputNames.map((t=>this.getInput(t))),null!=t.rawAttrs&&(this.attrs=Object.keys(t.rawAttrs).reduce(((t,e)=>(t[e]=this.getAttr(e),t)),{}))}getInput(t){return pT(t,this.tensorMap,this.context)}getAttr(t,e){const n=this.node.rawAttrs[t];if(null!=n.tensor)return pT(t,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return VT(this.node.rawAttrs,t,e);if(null!=n.s)return BT(this.node.rawAttrs,t,e);if(null!=n.b)return UT(this.node.rawAttrs,t,e);if(null!=n.shape)return XT(this.node.rawAttrs,t,e);if(null!=n.type)return HT(this.node.rawAttrs,t,e);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return KT(this.node.rawAttrs,t,e);if(null!=n.list.s)return YT(this.node.rawAttrs,t,e);if(null!=n.list.shape)return ZT(this.node.rawAttrs,t,e);if(null!=n.list.b)return JT(this.node.rawAttrs,t,e);if(null!=n.list.type)return jT(this.node.rawAttrs,t,e)}return e}}function t_(t,e,n=\"\"){if(\"number\"!=typeof t&&\"number\"!=typeof e){nt(t.length===e.length,(()=>n+` Shapes ${t} and ${e} must match`));for(let r=0;r<t.length;r++){const s=t[r],i=e[r];nt(s<0||i<0||s===i,(()=>n+` Shapes ${t} and ${e} must match`))}}}function e_(t){return\"number\"!=typeof t&&!t.some((t=>t<0))}function n_(t,e,n){let r=r_(t,n);const s=!e_(r);if(s&&0===e.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${r}`);if(s&&e.forEach((t=>{r=r_(t.shape,r)})),!e_(r))throw new Error(`Non-fully-defined elementShape: ${r}`);return r}function r_(t,e){if(\"number\"==typeof t)return e;if(\"number\"==typeof e)return t;if(t.length!==e.length)throw new Error(`Incompatible ranks during merge: ${t} vs. ${e}`);const n=[];for(let r=0;r<t.length;++r){const s=t[r],i=e[r];if(s>=0&&i>=0&&s!==i)throw new Error(`Incompatible shape during merge: ${t} vs. ${e}`);n[r]=s>=0?s:i}return n}class s_{constructor(t,e,n,r,s,i,a){this.name=t,this.dtype=e,this.maxSize=n,this.elementShape=r,this.identicalElementShapes=s,this.dynamicSize=i,this.clearAfterRead=a,this.tensors=[],this.closed_=!1,this.idTensor=ml(0),Go(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(t){this.tensors.forEach((e=>{null!=t&&t.has(e.tensor.id)||e.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||t>=this.size())throw new Error(`Tried to read from index ${t}, but array size is: ${this.size()}`);const e=this.tensors[t];if(e.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${t} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(e.cleared=!0),e.read=!0,e.tensor}readMany(t){return t.map((t=>this.read(t)))}write(t,e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||!this.dynamicSize&&t>=this.maxSize)throw new Error(`Tried to write to index ${t}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[t]||{};if(e.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t},\\n          because the value dtype is ${e.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=e.shape),t_(this.elementShape,e.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${t}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been written.`);n.tensor=e,Go(e),n.written=!0,this.tensors[t]=n}writeMany(t,e){if(t.length!==e.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${t.length} is not the same as tensors size: ${e.length}.`);t.forEach(((t,n)=>this.write(t,e[n])))}gather(t,e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${e}`);if(t)t=t.slice(0,this.size());else{t=[];for(let e=0;e<this.size();e++)t.push(e)}if(0===t.length)return ki([],[0].concat(this.elementShape));const n=this.readMany(t);return t_(this.elementShape,n[0].shape,\"TensorArray shape mismatch: \"),Vh(n,0)}concat(t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${t}`);if(0===this.size())return ki([],[0].concat(this.elementShape));const e=[];for(let t=0;t<this.size();t++)e.push(t);const n=this.readMany(e);return t_(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),au(n,0)}scatter(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const n=Math.max(...t);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(t,ed(e,0))}split(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);let n=0;const r=t.map((t=>(n+=t,n)));if(n!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\\n          tensor.shape[0], but sum of lengths is\\n        ${n}, and tensor's shape is: ${e.shape}`);if(!this.dynamicSize&&t.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${t.length}), and the TensorArray is not marked as dynamically resizeable`);const s=0===n?0:e.size/n,i=[];Vo((()=>{e=ru(e,[1,n,s]);for(let n=0;n<t.length;++n){const a=[0,0===n?0:r[n-1],0],o=[1,t[n],s];i[n]=ru(lu(e,a,o),this.elementShape)}return i}));const a=[];for(let e=0;e<t.length;e++)a[e]=e;this.writeMany(a,i)}}class i_{constructor(t,e,n,r=-1){this.tensors=t,this.elementShape=e,this.elementDtype=n,null!=t&&t.forEach((t=>{if(n!==t.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${t.dtype}`);t_(e,t.shape,\"TensorList shape mismatch: \"),Go(t)})),this.idTensor=ml(0),this.maxNumElements=r,Go(this.idTensor)}get id(){return this.idTensor.id}copy(){return new i_([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(t){this.tensors.forEach((e=>{null!=t&&t.has(e.id)||e.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(t,e,n=-1){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);t_(t,this.elementShape,\"TensorList shape mismatch: \");const r=n_(this.elementShape,this.tensors,t);return Vo((()=>{const t=this.tensors.map((t=>ru(t,r)));return Vh(t,0)}))}popBack(t,e){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error(\"Trying to pop from an empty list.\");const n=n_(this.elementShape,this.tensors,t),r=this.tensors.pop();return t_(r.shape,t,\"TensorList shape mismatch: \"),ru(r,n)}pushBack(t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(t_(t.shape,this.elementShape,\"TensorList shape mismatch: \"),this.maxNumElements===this.size())throw new Error(\"Trying to push element into a full list.\");Go(t),this.tensors.push(t)}resize(t){if(t<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${t}`);if(-1!==this.maxNumElements&&t>this.maxNumElements)throw new Error(`TensorListResize input size ${t} is greater maxNumElement ${this.maxNumElements}.`);this.tensors.length=t}getItem(t,e,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(t<0||t>this.tensors.length)throw new Error(`Trying to access element ${t} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[t])throw new Error(`element at index ${t} is null.`);t_(this.tensors[t].shape,e,\"TensorList shape mismatch: \");const r=n_(this.elementShape,this.tensors,e);return ru(this.tensors[t],r)}setItem(t,e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(t<0||-1!==this.maxNumElements&&t>=this.maxNumElements)throw new Error(`Trying to set element ${t} in a list with max ${this.maxNumElements} elements.`);t_(this.elementShape,e.shape,\"TensorList shape mismatch: \"),Go(e),this.tensors[t]=e}gather(t,e,n){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);t_(this.elementShape,n,\"TensorList shape mismatch: \"),t=t.slice(0,this.size());const r=n_(this.elementShape,this.tensors,n);return 0===t.length?ki([],[0].concat(r)):Vo((()=>{const e=t.map((t=>ru(this.tensors[t],r)));return Vh(e,0)}))}concat(t,e){if(t&&t!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${t}`);t_(this.elementShape,e,\"TensorList shape mismatch: \");const n=n_(this.elementShape,this.tensors,e);return 0===this.size()?ki([],[0].concat(n)):Vo((()=>{const t=this.tensors.map((t=>ru(t,n)));return au(t,0)}))}}function a_(t,e,n){const[r,s]=dT(\"fusedOps\",t,e,n),i=\"biasadd\"===r,a=!i,o=\"prelu\"===s,l=\"fusedbatchnorm\"===r,u=dT(\"numArgs\",t,e,n);if(i){if(o&&2!==u)throw new Error(\"FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.\");if(!o&&i&&1!==u)throw new Error(\"FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.\")}if(l)throw new Error(\"FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported\");const c=dT(\"strides\",t,e,n),h=yT(t,e,n),d=dT(\"dataFormat\",t,e,n).toUpperCase(),p=dT(\"dilations\",t,e,n);let[f,m]=dT(\"args\",t,e,n);return a&&(m=f,f=void 0),{stride:c,pad:h,dataFormat:d,dilations:p,biasArg:f,preluArg:m,activationFunc:s,leakyreluAlpha:dT(\"leakyreluAlpha\",t,e,n)}}function o_(t,e,n){return{boxes:dT(\"boxes\",t,e,n),scores:dT(\"scores\",t,e,n),maxOutputSize:dT(\"maxOutputSize\",t,e,n),iouThreshold:dT(\"iouThreshold\",t,e,n),scoreThreshold:dT(\"scoreThreshold\",t,e,n),softNmsSigma:dT(\"softNmsSigma\",t,e,n)}}class l_{constructor(t,e){this.keyDType=t,this.valueDType=e,this.handle=ml(0),this.tensorMap=new Map,Go(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach((t=>t.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return ml(this.size(),\"int32\")}async import(t,e){this.checkKeyAndValueTensor(t,e);const n=await t.data();return this.tensorMap.forEach((t=>t.dispose())),this.tensorMap.clear(),Vo((()=>{const t=ed(e),r=n.length,s=t.length;nt(r===s,(()=>`The number of elements doesn't match, keys has ${r} elements, the values has ${s} elements.`));for(let e=0;e<r;e++){const r=n[e],s=t[e];Go(s),this.tensorMap.set(r,s)}return this.handle}))}async find(t,e){this.checkKeyAndValueTensor(t,e);const n=await t.data();return Vo((()=>{const t=[];for(let r=0;r<n.length;r++){const s=n[r],i=this.findWithDefault(s,e);t.push(i)}return Vh(t)}))}findWithDefault(t,e){const n=this.tensorMap.get(t);return null!=n?n:e}checkKeyAndValueTensor(t,e){if(t.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${t.dtype}`);if(e.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${e.dtype}`)}}function u_(t,e,n,r){const s=((t,e,n)=>{switch(t.category){case\"arithmetic\":return Vo((()=>((t,e,n)=>{switch(t.op){case\"BiasAdd\":case\"AddV2\":case\"Add\":return[el(dT(\"a\",t,e,n),dT(\"b\",t,e,n))];case\"AddN\":return[Dl(dT(\"tensors\",t,e,n))];case\"FloorMod\":case\"Mod\":return[Vc(dT(\"a\",t,e,n),dT(\"b\",t,e,n))];case\"Mul\":return[sl(dT(\"a\",t,e,n),dT(\"b\",t,e,n))];case\"RealDiv\":case\"Div\":return[rl(dT(\"a\",t,e,n),dT(\"b\",t,e,n))];case\"DivNoNan\":return[Vu(dT(\"a\",t,e,n),dT(\"b\",t,e,n))];case\"FloorDiv\":return[nl(dT(\"a\",t,e,n),dT(\"b\",t,e,n))];case\"Sub\":return[wl(dT(\"a\",t,e,n),dT(\"b\",t,e,n))];case\"Minimum\":return[Bc(dT(\"a\",t,e,n),dT(\"b\",t,e,n))];case\"Maximum\":return[El(dT(\"a\",t,e,n),dT(\"b\",t,e,n))];case\"Pow\":return[vl(dT(\"a\",t,e,n),dT(\"b\",t,e,n))];case\"SquaredDifference\":return[Bh(dT(\"a\",t,e,n),dT(\"b\",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case\"basic_math\":return Vo((()=>((t,e,n)=>{switch(t.op){case\"Abs\":case\"ComplexAbs\":return[Tl(dT(\"x\",t,e,n))];case\"Acos\":return[Rl(dT(\"x\",t,e,n))];case\"Acosh\":return[Ll(dT(\"x\",t,e,n))];case\"Asin\":return[zl(dT(\"x\",t,e,n))];case\"Asinh\":return[Bl(dT(\"x\",t,e,n))];case\"Atan\":return[Ul(dT(\"x\",t,e,n))];case\"Atan2\":return[Vl(dT(\"x\",t,e,n),dT(\"y\",t,e,n))];case\"Atanh\":return[Wl(dT(\"x\",t,e,n))];case\"Ceil\":return[bu(dT(\"x\",t,e,n))];case\"Complex\":return[_i(dT(\"real\",t,e,n),dT(\"imag\",t,e,n))];case\"Cos\":return[Ru(dT(\"x\",t,e,n))];case\"Cosh\":return[Lu(dT(\"x\",t,e,n))];case\"Elu\":return[Hu(dT(\"x\",t,e,n))];case\"Erf\":return[ju(dT(\"x\",t,e,n))];case\"Exp\":return[qu(dT(\"x\",t,e,n))];case\"Expm1\":return[Ku(dT(\"x\",t,e,n))];case\"Floor\":return[Ju(dT(\"x\",t,e,n))];case\"Log\":return[hc(dT(\"x\",t,e,n))];case\"Log1p\":return[dc(dT(\"x\",t,e,n))];case\"Imag\":return[nc(dT(\"x\",t,e,n))];case\"Neg\":return[pc(dT(\"x\",t,e,n))];case\"Reciprocal\":return[fh(dT(\"x\",t,e,n))];case\"Real\":return[ph(dT(\"x\",t,e,n))];case\"Relu\":return[mh(dT(\"x\",t,e,n))];case\"Round\":return[Sh(dT(\"x\",t,e,n))];case\"Selu\":return[_h(dT(\"x\",t,e,n))];case\"Sigmoid\":return[ou(dT(\"x\",t,e,n))];case\"Sin\":return[Ih(dT(\"x\",t,e,n))];case\"Sign\":return[Eh(dT(\"x\",t,e,n))];case\"Sinh\":return[Ch(dT(\"x\",t,e,n))];case\"Softplus\":return[fc(dT(\"x\",t,e,n))];case\"Sqrt\":return[il(dT(\"x\",t,e,n))];case\"Square\":return[al(dT(\"x\",t,e,n))];case\"Tanh\":return[uu(dT(\"x\",t,e,n))];case\"Tan\":return[Hh(dT(\"x\",t,e,n))];case\"ClipByValue\":return[vu(dT(\"x\",t,e,n),dT(\"clipValueMin\",t,e,n),dT(\"clipValueMax\",t,e,n))];case\"Relu6\":return[gh(dT(\"x\",t,e,n))];case\"Rsqrt\":return[Th(pT(t.inputNames[0],e,n))];case\"Prod\":return[rh(dT(\"x\",t,e,n),dT(\"axes\",t,e,n))];case\"LeakyRelu\":return[ac(dT(\"x\",t,e,n),dT(\"alpha\",t,e,n))];case\"Prelu\":return[nh(dT(\"x\",t,e,n),dT(\"alpha\",t,e,n))];case\"IsNan\":return[ic(pT(t.inputNames[0],e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case\"control\":return(async(t,e,n)=>{switch(t.op){case\"If\":case\"StatelessIf\":{const r=dT(\"thenBranch\",t,e,n),s=dT(\"elseBranch\",t,e,n),i=dT(\"cond\",t,e,n),a=dT(\"args\",t,e,n);return(await i.data())[0]?n.functionMap[r].executeFunctionAsync(a,n.tensorArrayMap,n.tensorListMap):n.functionMap[s].executeFunctionAsync(a,n.tensorArrayMap,n.tensorListMap)}case\"While\":case\"StatelessWhile\":{const r=dT(\"body\",t,e,n),s=dT(\"cond\",t,e,n),i=dT(\"args\",t,e,n),a=await n.functionMap[s].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap),o=i.map((t=>t.id));let l=await a[0].data();a.forEach((t=>{t.kept||-1!==o.indexOf(t.id)||t.dispose()}));let u=i;for(;l[0];){const t=u;u=await n.functionMap[r].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);const e=u.map((t=>t.id));t.forEach((t=>{t.kept||-1!==o.indexOf(t.id)||-1!==e.indexOf(t.id)||t.dispose()}));const i=await n.functionMap[s].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);l=await i[0].data(),i.forEach((t=>{t.kept||-1!==o.indexOf(t.id)||-1!==e.indexOf(t.id)||t.dispose()}))}return u}case\"LoopCond\":return[xT(dT(\"pred\",t,e,n))];case\"Switch\":{const r=dT(\"pred\",t,e,n);let s=dT(\"data\",t,e,n);return s.kept||(s=xT(s)),(await r.data())[0]?[void 0,s]:[s,void 0]}case\"Merge\":{const r=t.inputNames.find((t=>void 0!==pT(t,e,n)));return r?[xT(pT(r,e,n))]:void 0}case\"Enter\":{const r=dT(\"frameName\",t,e,n),s=dT(\"tensor\",t,e,n);return n.enterFrame(r),[xT(s)]}case\"Exit\":{const r=dT(\"tensor\",t,e,n);return n.exitFrame(),[xT(r)]}case\"NextIteration\":{const r=dT(\"tensor\",t,e,n);return n.nextIteration(),[xT(r)]}case\"TensorArrayV3\":{const r=dT(\"size\",t,e,n),s=dT(\"dtype\",t,e,n),i=dT(\"elementShape\",t,e,n),a=dT(\"dynamicSize\",t,e,n),o=dT(\"clearAfterRead\",t,e,n),l=dT(\"identicalElementShapes\",t,e,n),u=dT(\"name\",t,e,n),c=new s_(u,s,r,i,l,a,o);return n.addTensorArray(c),[c.idTensor,ml(1)]}case\"TensorArrayWriteV3\":{const r=dT(\"tensorArrayId\",t,e,n),s=dT(\"index\",t,e,n),i=dT(\"tensor\",t,e,n),a=n.getTensorArray(r.id);return a.write(s,i),[a.idTensor]}case\"TensorArrayReadV3\":{const r=dT(\"tensorArrayId\",t,e,n),s=dT(\"index\",t,e,n);return[n.getTensorArray(r.id).read(s)]}case\"TensorArrayGatherV3\":{const r=dT(\"tensorArrayId\",t,e,n),s=dT(\"indices\",t,e,n),i=dT(\"dtype\",t,e,n);return[n.getTensorArray(r.id).gather(s,i)]}case\"TensorArrayScatterV3\":{const r=dT(\"tensorArrayId\",t,e,n),s=dT(\"indices\",t,e,n),i=dT(\"tensor\",t,e,n),a=n.getTensorArray(r.id);return a.scatter(s,i),[a.idTensor]}case\"TensorArrayConcatV3\":{const r=dT(\"tensorArrayId\",t,e,n),s=n.getTensorArray(r.id),i=dT(\"dtype\",t,e,n);return[s.concat(i)]}case\"TensorArraySplitV3\":{const r=dT(\"tensorArrayId\",t,e,n),s=dT(\"tensor\",t,e,n),i=dT(\"lengths\",t,e,n),a=n.getTensorArray(r.id);return a.split(i,s),[a.idTensor]}case\"TensorArraySizeV3\":{const r=dT(\"tensorArrayId\",t,e,n);return[ml(n.getTensorArray(r.id).size(),\"int32\")]}case\"TensorArrayCloseV3\":{const r=dT(\"tensorArrayId\",t,e,n),s=n.getTensorArray(r.id);return s.clearAndClose(),[s.idTensor]}case\"TensorListSetItem\":{const r=dT(\"tensorListId\",t,e,n),s=dT(\"index\",t,e,n),i=dT(\"tensor\",t,e,n),a=n.getTensorList(r.id);return a.setItem(s,i),[a.idTensor]}case\"TensorListGetItem\":{const r=dT(\"tensorListId\",t,e,n),s=dT(\"index\",t,e,n),i=dT(\"elementShape\",t,e,n),a=dT(\"elementDType\",t,e,n);return[n.getTensorList(r.id).getItem(s,i,a)]}case\"TensorListScatterV2\":case\"TensorListScatter\":{const r=dT(\"indices\",t,e,n),s=function(t,e,n,r){if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const s=Math.max(...e);if(null!=r&&-1!==r&&s>=r)throw new Error(`Max index must be < array size (${s}  vs. ${r})`);const i=new i_([],n,t.dtype,r),a=ed(t,0);return e.forEach(((t,e)=>{i.setItem(t,a[e])})),i}(dT(\"tensor\",t,e,n),r,dT(\"elementShape\",t,e,n),dT(\"numElements\",t,e,n));return n.addTensorList(s),[s.idTensor]}case\"TensorListReserve\":case\"EmptyTensorList\":{const r=dT(\"elementShape\",t,e,n),s=dT(\"elementDType\",t,e,n);let i;i=\"TensorListReserve\"===t.op?\"numElements\":\"maxNumElements\";const a=function(t,e,n){return new i_([],t,e,n)}(r,s,dT(i,t,e,n));return n.addTensorList(a),[a.idTensor]}case\"TensorListGather\":{const r=dT(\"tensorListId\",t,e,n),s=dT(\"indices\",t,e,n),i=dT(\"elementShape\",t,e,n),a=dT(\"elementDType\",t,e,n);return[n.getTensorList(r.id).gather(s,a,i)]}case\"TensorListStack\":{const r=dT(\"tensorListId\",t,e,n),s=dT(\"elementShape\",t,e,n),i=dT(\"elementDType\",t,e,n),a=dT(\"numElements\",t,e,n);return[n.getTensorList(r.id).stack(s,i,a)]}case\"TensorListFromTensor\":{const r=function(t,e,n){const r=t.dtype;if(t.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${t.shape}`);if(t.dtype!==n)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${n}`);t_(t.shape.slice(1),e,\"TensorList shape mismatch: \");const s=ed(t);return new i_(s,e,r)}(dT(\"tensor\",t,e,n),dT(\"elementShape\",t,e,n),dT(\"elementDType\",t,e,n));return n.addTensorList(r),[r.idTensor]}case\"TensorListConcat\":{const r=dT(\"tensorListId\",t,e,n),s=n.getTensorList(r.id),i=dT(\"dtype\",t,e,n),a=dT(\"elementShape\",t,e,n);return[s.concat(i,a)]}case\"TensorListPushBack\":{const r=dT(\"tensorListId\",t,e,n),s=dT(\"tensor\",t,e,n),i=n.getTensorList(r.id);return i.pushBack(s),[i.idTensor]}case\"TensorListPopBack\":{const r=dT(\"tensorListId\",t,e,n),s=dT(\"elementShape\",t,e,n),i=dT(\"elementDType\",t,e,n);return[n.getTensorList(r.id).popBack(s,i)]}case\"TensorListSplit\":{const r=dT(\"tensor\",t,e,n),s=dT(\"elementShape\",t,e,n),i=function(t,e,n){let r=0;const s=e.map((t=>(r+=t,r)));if(r!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\\n          tensor.shape[0], but sum of lengths is\\n        ${r}, and tensor's shape is: ${t.shape}`);const i=r_(t.shape.slice(1),n),a=0===r?0:t.size/r,o=Vo((()=>{const n=[];t=ru(t,[1,r,a]);for(let r=0;r<e.length;++r){const o=[0,0===r?0:s[r-1],0],l=[1,e[r],a];n[r]=ru(lu(t,o,l),i)}return t.dispose(),n})),l=new i_([],n,t.dtype,e.length);for(let t=0;t<o.length;t++)l.setItem(t,o[t]);return l}(r,dT(\"lengths\",t,e,n),s);return n.addTensorList(i),[i.idTensor]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n);case\"convolution\":return Vo((()=>((t,e,n)=>{switch(t.op){case\"Conv1D\":{const r=dT(\"stride\",t,e,n),s=dT(\"pad\",t,e,n),i=dT(\"dataFormat\",t,e,n).toUpperCase(),a=dT(\"dilation\",t,e,n);return[ku(dT(\"x\",t,e,n),dT(\"filter\",t,e,n),r,s,i,a)]}case\"Conv2D\":{const r=dT(\"strides\",t,e,n),s=yT(t,e,n),i=dT(\"dataFormat\",t,e,n).toUpperCase(),a=dT(\"dilations\",t,e,n);return[Mu(dT(\"x\",t,e,n),dT(\"filter\",t,e,n),[r[1],r[2]],s,i,[a[1],a[2]])]}case\"_FusedConv2D\":{const{stride:r,pad:s,dataFormat:i,dilations:a,biasArg:o,preluArg:l,activationFunc:u,leakyreluAlpha:c}=a_(t,e,n);return[wd({x:dT(\"x\",t,e,n),filter:dT(\"filter\",t,e,n),strides:[r[1],r[2]],pad:s,dataFormat:i,dilations:[a[1],a[2]],bias:o,activation:u,preluActivationWeights:l,leakyreluAlpha:c})]}case\"FusedDepthwiseConv2dNative\":{const{stride:r,pad:s,dataFormat:i,dilations:a,biasArg:o,preluArg:l,activationFunc:u,leakyreluAlpha:c}=a_(t,e,n);return[_d({x:dT(\"x\",t,e,n),filter:dT(\"filter\",t,e,n),strides:[r[1],r[2]],pad:s,dataFormat:i,dilations:[a[1],a[2]],bias:o,activation:u,preluActivationWeights:l,leakyreluAlpha:c})]}case\"Conv2DBackpropInput\":case\"Conv2dTranspose\":{const r=dT(\"outputShape\",t,e,n),s=dT(\"strides\",t,e,n),i=yT(t,e,n);return[Iu(dT(\"x\",t,e,n),dT(\"filter\",t,e,n),r,[s[1],s[2]],i)]}case\"DepthwiseConv2dNative\":case\"DepthwiseConv2d\":{const r=dT(\"strides\",t,e,n),s=yT(t,e,n),i=dT(\"dilations\",t,e,n),a=dT(\"dataFormat\",t,e,n).toUpperCase();return[Ou(dT(\"input\",t,e,n),dT(\"filter\",t,e,n),[r[1],r[2]],s,a,[i[1],i[2]])]}case\"Conv3D\":{const r=dT(\"strides\",t,e,n),s=dT(\"pad\",t,e,n),i=dT(\"dataFormat\",t,e,n).toUpperCase(),a=dT(\"dilations\",t,e,n);return[Cu(dT(\"x\",t,e,n),dT(\"filter\",t,e,n),[r[1],r[2],r[3]],s,i,[a[1],a[2],a[3]])]}case\"AvgPool\":{const r=dT(\"strides\",t,e,n),s=dT(\"pad\",t,e,n),i=dT(\"kernelSize\",t,e,n);return[su(dT(\"x\",t,e,n),[i[1],i[2]],[r[1],r[2]],s)]}case\"MaxPool\":{const r=dT(\"strides\",t,e,n),s=dT(\"pad\",t,e,n),i=dT(\"kernelSize\",t,e,n);return[Rc(dT(\"x\",t,e,n),[i[1],i[2]],[r[1],r[2]],s)]}case\"MaxPoolWithArgmax\":{const r=dT(\"strides\",t,e,n),s=dT(\"pad\",t,e,n),i=dT(\"kernelSize\",t,e,n),a=dT(\"includeBatchInIndex\",t,e,n),{result:o,indexes:l}=Dc(dT(\"x\",t,e,n),[i[1],i[2]],[r[1],r[2]],s,a);return[o,l]}case\"AvgPool3D\":{const r=dT(\"strides\",t,e,n),s=dT(\"pad\",t,e,n),i=dT(\"kernelSize\",t,e,n);return[iu(dT(\"x\",t,e,n),[i[1],i[2],i[3]],[r[1],r[2],r[3]],s)]}case\"MaxPool3D\":{const r=dT(\"strides\",t,e,n),s=dT(\"pad\",t,e,n),i=dT(\"kernelSize\",t,e,n);return[Lc(dT(\"x\",t,e,n),[i[1],i[2],i[3]],[r[1],r[2],r[3]],s)]}case\"Dilation2D\":{const r=dT(\"strides\",t,e,n),s=dT(\"pad\",t,e,n),i=dT(\"dilations\",t,e,n),a=r[1],o=r[2],l=i[1],u=i[2];return[zu(dT(\"x\",t,e,n),dT(\"filter\",t,e,n),[a,o],s,[l,u],\"NHWC\")]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case\"creation\":return Vo((()=>((t,e,n)=>{switch(t.op){case\"Fill\":{const r=dT(\"shape\",t,e,n),s=dT(\"dtype\",t,e,n);return[xl(r,dT(\"value\",t,e,n),s)]}case\"LinSpace\":return[uc(dT(\"start\",t,e,n),dT(\"stop\",t,e,n),dT(\"num\",t,e,n))];case\"Multinomial\":{const r=dT(\"logits\",t,e,n),s=dT(\"numSamples\",t,e,n),i=dT(\"seed\",t,e,n);return[Hc(r,s,i)]}case\"OneHot\":{const r=dT(\"indices\",t,e,n),s=dT(\"depth\",t,e,n),i=dT(\"onValue\",t,e,n),a=dT(\"offValue\",t,e,n);return[Wa(r,s,i,a)]}case\"Ones\":return[Oc(dT(\"shape\",t,e,n),dT(\"dtype\",t,e,n))];case\"OnesLike\":return[qc(dT(\"x\",t,e,n))];case\"RandomUniform\":return[hh(dT(\"shape\",t,e,n),dT(\"minval\",t,e,n),dT(\"maxval\",t,e,n),dT(\"dtype\",t,e,n))];case\"Range\":return[dh(dT(\"start\",t,e,n),dT(\"stop\",t,e,n),dT(\"step\",t,e,n),dT(\"dtype\",t,e,n))];case\"TruncatedNormal\":{const r=dT(\"shape\",t,e,n),s=dT(\"mean\",t,e,n),i=dT(\"stdDev\",t,e,n),a=dT(\"seed\",t,e,n);return[Jh(r,s,i,dT(\"dtype\",t,e,n),a)]}case\"Zeros\":return[$c(dT(\"shape\",t,e,n),dT(\"dtype\",t,e,n))];case\"ZerosLike\":return[ol(dT(\"x\",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case\"dynamic\":return(async(t,e,n)=>{switch(t.op){case\"NonMaxSuppressionV5\":{const{boxes:r,scores:s,maxOutputSize:i,iouThreshold:a,scoreThreshold:o,softNmsSigma:l}=o_(t,e,n),u=await vp.nonMaxSuppressionWithScoreAsync(r,s,i,a,o,l);return[u.selectedIndices,u.selectedScores]}case\"NonMaxSuppressionV4\":{const{boxes:r,scores:s,maxOutputSize:i,iouThreshold:a,scoreThreshold:o}=o_(t,e,n),l=dT(\"padToMaxOutputSize\",t,e,n),u=await vp.nonMaxSuppressionPaddedAsync(r,s,i,a,o,l);return[u.selectedIndices,u.validOutputs]}case\"NonMaxSuppressionV3\":case\"NonMaxSuppressionV2\":{const{boxes:r,scores:s,maxOutputSize:i,iouThreshold:a,scoreThreshold:o}=o_(t,e,n);return[await vp.nonMaxSuppressionAsync(r,s,i,a,o)]}case\"Where\":{const r=Sa(dT(\"condition\",t,e,n),\"bool\"),s=[await sd(r)];return r.dispose(),s}case\"ListDiff\":return kh(dT(\"x\",t,e,n),dT(\"y\",t,e,n));default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n);case\"evaluation\":return Vo((()=>((t,e,n)=>{switch(t.op){case\"TopKV2\":{const r=dT(\"x\",t,e,n),s=dT(\"k\",t,e,n),i=dT(\"sorted\",t,e,n),a=Zh(r,s,i);return[a.values,a.indices]}case\"Unique\":{const r=dT(\"x\",t,e,n),s=Qh(r);return[s.values,s.indices]}case\"UniqueV2\":{const r=dT(\"x\",t,e,n),s=dT(\"axis\",t,e,n),i=Qh(r,s);return[i.values,i.indices]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case\"image\":return Vo((()=>((t,e,n)=>{switch(t.op){case\"ResizeBilinear\":{const r=dT(\"images\",t,e,n),s=dT(\"size\",t,e,n),i=dT(\"alignCorners\",t,e,n),a=dT(\"halfPixelCenters\",t,e,n);return[vp.resizeBilinear(r,[s[0],s[1]],i,a)]}case\"ResizeNearestNeighbor\":{const r=dT(\"images\",t,e,n),s=dT(\"size\",t,e,n),i=dT(\"alignCorners\",t,e,n),a=dT(\"halfPixelCenters\",t,e,n);return[vp.resizeNearestNeighbor(r,[s[0],s[1]],i,a)]}case\"CropAndResize\":{const r=dT(\"image\",t,e,n),s=dT(\"boxes\",t,e,n),i=dT(\"boxInd\",t,e,n),a=dT(\"cropSize\",t,e,n),o=dT(\"method\",t,e,n),l=dT(\"extrapolationValue\",t,e,n);return[vp.cropAndResize(r,s,i,a,o,l)]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case\"graph\":return Vo((()=>((t,e,n)=>{switch(t.op){case\"Const\":return e[t.name];case\"PlaceholderWithDefault\":const r=dT(\"default\",t,e,n);return[pT(t.name,e,n)||r];case\"Placeholder\":return[pT(t.name,e,n)];case\"Identity\":case\"StopGradient\":case\"FakeQuantWithMinMaxVars\":return[xT(dT(\"x\",t,e,n))];case\"IdentityN\":return dT(\"x\",t,e,n).map((t=>xT(t)));case\"Snapshot\":return[xT(dT(\"x\",t,e,n))];case\"Shape\":return[jh(dT(\"x\",t,e,n).shape,\"int32\")];case\"ShapeN\":return dT(\"x\",t,e,n).map((t=>jh(t.shape)));case\"Size\":return[ml(dT(\"x\",t,e,n).size,\"int32\")];case\"Rank\":return[ml(dT(\"x\",t,e,n).rank,\"int32\")];case\"NoOp\":return[ml(1)];case\"Print\":const s=dT(\"x\",t,e,n),i=dT(\"data\",t,e,n),a=dT(\"message\",t,e,n),o=dT(\"summarize\",t,e,n);console.warn(\"The graph has a tf.print() operation,usually used for debugging, which slows down performance.\"),console.log(a);for(let t=0;t<i.length;t++)console.log(Array.prototype.slice.call(i[t].dataSync()).slice(0,o));return[s];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case\"logical\":return Vo((()=>((t,e,n)=>{switch(t.op){case\"Equal\":return[Bu(dT(\"a\",t,e,n),dT(\"b\",t,e,n))];case\"NotEqual\":return[jc(dT(\"a\",t,e,n),dT(\"b\",t,e,n))];case\"Greater\":return[tc(dT(\"a\",t,e,n),dT(\"b\",t,e,n))];case\"GreaterEqual\":return[ec(dT(\"a\",t,e,n),dT(\"b\",t,e,n))];case\"Less\":return[oc(dT(\"a\",t,e,n),dT(\"b\",t,e,n))];case\"LessEqual\":return[lc(dT(\"a\",t,e,n),dT(\"b\",t,e,n))];case\"LogicalAnd\":return[Ic(dT(\"a\",t,e,n),dT(\"b\",t,e,n))];case\"LogicalNot\":return[Cc(dT(\"a\",t,e,n))];case\"LogicalOr\":return[Nc(dT(\"a\",t,e,n),dT(\"b\",t,e,n))];case\"Select\":case\"SelectV2\":return[Uu(dT(\"condition\",t,e,n),dT(\"a\",t,e,n),dT(\"b\",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case\"matrices\":return Vo((()=>((t,e,n)=>{switch(t.op){case\"BatchMatMul\":case\"BatchMatMulV2\":case\"MatMul\":return[Va(dT(\"a\",t,e,n),dT(\"b\",t,e,n),dT(\"transposeA\",t,e,n),dT(\"transposeB\",t,e,n))];case\"Einsum\":return[Gu(dT(\"equation\",t,e,n),...dT(\"tensors\",t,e,n))];case\"Transpose\":return[Ga(dT(\"x\",t,e,n),dT(\"perm\",t,e,n))];case\"_FusedMatMul\":const[r,s]=dT(\"fusedOps\",t,e,n),i=\"biasadd\"===r,a=\"prelu\"===s,o=dT(\"numArgs\",t,e,n),l=dT(\"leakyreluAlpha\",t,e,n);if(i){if(a&&2!==o)throw new Error(\"Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.\");if(!a&&1!==o)throw new Error(\"Fused MatMul with BiasAdd must have one extra argument: bias.\")}const[u,c]=dT(\"args\",t,e,n);return[Md({a:dT(\"a\",t,e,n),b:dT(\"b\",t,e,n),transposeA:dT(\"transposeA\",t,e,n),transposeB:dT(\"transposeB\",t,e,n),bias:u,activation:s,preluActivationWeights:c,leakyreluAlpha:l})];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case\"normalization\":return Vo((()=>((t,e,n)=>{switch(t.op){case\"FusedBatchNorm\":case\"FusedBatchNormV2\":case\"FusedBatchNormV3\":return[du(dT(\"x\",t,e,n),dT(\"mean\",t,e,n),dT(\"variance\",t,e,n),dT(\"offset\",t,e,n),dT(\"scale\",t,e,n),dT(\"epsilon\",t,e,n))];case\"LRN\":return[cc(dT(\"x\",t,e,n),dT(\"radius\",t,e,n),dT(\"bias\",t,e,n),dT(\"alpha\",t,e,n),dT(\"beta\",t,e,n))];case\"Softmax\":return[Dh(dT(\"x\",t,e,n))];case\"LogSoftmax\":return[xc(dT(\"x\",t,e,n))];case\"SparseToDense\":return[cd(dT(\"sparseIndices\",t,e,n),dT(\"outputShape\",t,e,n),dT(\"sparseValues\",t,e,n),dT(\"defaultValue\",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case\"reduction\":return Vo((()=>((t,e,n)=>{switch(t.op){case\"Max\":{const r=dT(\"axis\",t,e,n),s=dT(\"keepDims\",t,e,n);return[gc(dT(\"x\",t,e,n),r,s)]}case\"Mean\":{const r=dT(\"axis\",t,e,n),s=dT(\"keepDims\",t,e,n);return[Fc(dT(\"x\",t,e,n),r,s)]}case\"Min\":{const r=dT(\"axis\",t,e,n),s=dT(\"keepDims\",t,e,n);return[zc(dT(\"x\",t,e,n),r,s)]}case\"Sum\":{const r=dT(\"axis\",t,e,n),s=dT(\"keepDims\",t,e,n);return[yc(dT(\"x\",t,e,n),r,s)]}case\"All\":{const r=dT(\"axis\",t,e,n),s=dT(\"keepDims\",t,e,n);return[Fl(dT(\"x\",t,e,n),r,s)]}case\"Any\":{const r=dT(\"axis\",t,e,n),s=dT(\"keepDims\",t,e,n);return[$l(dT(\"x\",t,e,n),r,s)]}case\"ArgMax\":{const r=dT(\"axis\",t,e,n);return[Ol(dT(\"x\",t,e,n),r)]}case\"ArgMin\":{const r=dT(\"axis\",t,e,n);return[Pl(dT(\"x\",t,e,n),r)]}case\"Prod\":{const r=dT(\"axis\",t,e,n),s=dT(\"keepDims\",t,e,n);return[rh(dT(\"x\",t,e,n),r,s)]}case\"Cumsum\":{const r=dT(\"axis\",t,e,n),s=dT(\"exclusive\",t,e,n),i=dT(\"reverse\",t,e,n);return[Du(dT(\"x\",t,e,n),r,s,i)]}case\"Bincount\":const r=dT(\"x\",t,e,n),s=dT(\"weights\",t,e,n),i=dT(\"size\",t,e,n);return[gu(r,s,i)];case\"DenseBincount\":{const r=dT(\"x\",t,e,n),s=dT(\"weights\",t,e,n),i=dT(\"size\",t,e,n),a=dT(\"binaryOutput\",t,e,n);return[Fu(r,s,i,a)]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case\"slice_join\":return Vo((()=>((t,e,n)=>{switch(t.op){case\"ConcatV2\":case\"Concat\":{const r=dT(\"n\",t,e,n),s=dT(\"axis\",t,e,n);let i=dT(\"tensors\",t,e,n);return i=i.slice(0,r),[au(i,s)]}case\"Gather\":{const r=dT(\"x\",t,e,n),s=dT(\"indices\",t,e,n);return[Qu(r,Sa(s,\"int32\"),0)]}case\"GatherV2\":{const r=dT(\"axis\",t,e,n),s=dT(\"batchDims\",t,e,n),i=dT(\"x\",t,e,n),a=dT(\"indices\",t,e,n);return[Qu(i,Sa(a,\"int32\"),r,s)]}case\"Reverse\":{const r=dT(\"dims\",t,e,n),s=[];for(let t=0;t<r.length;t++)r[t]&&s.push(t);const i=dT(\"x\",t,e,n);return[yh(i,s)]}case\"ReverseV2\":{const r=dT(\"axis\",t,e,n),s=dT(\"x\",t,e,n);return[yh(s,r)]}case\"Slice\":{const r=dT(\"begin\",t,e,n),s=dT(\"size\",t,e,n);return[lu(dT(\"x\",t,e,n),r,s)]}case\"StridedSlice\":{const r=dT(\"begin\",t,e,n),s=dT(\"end\",t,e,n),i=dT(\"strides\",t,e,n),a=dT(\"beginMask\",t,e,n),o=dT(\"endMask\",t,e,n),l=dT(\"ellipsisMask\",t,e,n),u=dT(\"newAxisMask\",t,e,n),c=dT(\"shrinkAxisMask\",t,e,n),h=dT(\"x\",t,e,n);return[Gh(h,r,s,i,a,o,l,u,c)]}case\"Pack\":return Vo((()=>{const r=dT(\"axis\",t,e,n),s=dT(\"tensors\",t,e,n),i=s[0].shape,a=Uh(s[0]).shape,o=s.map((t=>{const e=lt(t.shape,i);if(!e&&!lt(Uh(t).shape,a))throw new Error(\"the input tensors shape does not match\");return e?t:ru(t,i)}));return[Vh(o,r)]}));case\"Unpack\":{const r=dT(\"axis\",t,e,n),s=dT(\"tensor\",t,e,n);return ed(s,r)}case\"Tile\":{const r=dT(\"reps\",t,e,n);return[Yu(dT(\"x\",t,e,n),r)]}case\"Split\":case\"SplitV\":{const r=dT(\"axis\",t,e,n),s=dT(\"numOrSizeSplits\",t,e,n),i=dT(\"x\",t,e,n);return Ph(i,s,r)}case\"ScatterNd\":{const r=dT(\"indices\",t,e,n),s=dT(\"values\",t,e,n),i=dT(\"shape\",t,e,n);return[ud(r,s,i)]}case\"GatherNd\":{const r=dT(\"x\",t,e,n),s=dT(\"indices\",t,e,n);return[hd(r,s)]}case\"SparseToDense\":{const r=dT(\"sparseIndices\",t,e,n),s=dT(\"outputShape\",t,e,n),i=dT(\"sparseValues\",t,e,n),a=dT(\"defaultValue\",t,e,n);return[cd(r,i,s,i.dtype===a.dtype?a:Sa(a,i.dtype))]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case\"sparse\":return Vo((()=>((t,e,n)=>{switch(t.op){case\"SparseFillEmptyRows\":{const{outputIndices:r,outputValues:s,emptyRowIndicator:i,reverseIndexMap:a}=Tp.sparseFillEmptyRows(dT(\"indices\",t,e,n),dT(\"values\",t,e,n),dT(\"denseShape\",t,e,n),dT(\"defaultValue\",t,e,n));return[r,s,i,a]}case\"SparseReshape\":{const{outputIndices:r,outputShape:s}=Tp.sparseReshape(dT(\"inputIndices\",t,e,n),dT(\"inputShape\",t,e,n),dT(\"newShape\",t,e,n));return[r,s]}case\"SparseSegmentMean\":return[Tp.sparseSegmentMean(dT(\"data\",t,e,n),dT(\"indices\",t,e,n),dT(\"segmentIds\",t,e,n))];case\"SparseSegmentSum\":return[Tp.sparseSegmentSum(dT(\"data\",t,e,n),dT(\"indices\",t,e,n),dT(\"segmentIds\",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case\"spectral\":return Vo((()=>((t,e,n)=>{switch(t.op){case\"FFT\":return[Fh(dT(\"x\",t,e,n))];case\"IFFT\":return[$h(dT(\"x\",t,e,n))];case\"RFFT\":return[zh(dT(\"x\",t,e,n))];case\"IRFFT\":return[Oh(dT(\"x\",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case\"string\":return Vo((()=>((t,e,n)=>{switch(t.op){case\"StringNGrams\":{const{nGrams:r,nGramsSplits:s}=_p.stringNGrams(dT(\"data\",t,e,n),dT(\"dataSplits\",t,e,n),dT(\"separator\",t,e,n),dT(\"nGramWidths\",t,e,n),dT(\"leftPad\",t,e,n),dT(\"rightPad\",t,e,n),dT(\"padWidth\",t,e,n),dT(\"preserveShortSequences\",t,e,n));return[r,s]}case\"StringSplit\":{const{indices:r,values:s,shape:i}=_p.stringSplit(dT(\"input\",t,e,n),dT(\"delimiter\",t,e,n),dT(\"skipEmpty\",t,e,n));return[r,s,i]}case\"StringToHashBucketFast\":return[_p.stringToHashBucketFast(dT(\"input\",t,e,n),dT(\"numBuckets\",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case\"transformation\":return Vo((()=>((t,e,n)=>{switch(t.op){case\"Cast\":return[Sa(dT(\"x\",t,e,n),dT(\"dtype\",t,e,n))];case\"ExpandDims\":{const r=dT(\"axis\",t,e,n);return[Xu(dT(\"x\",t,e,n),r)]}case\"Squeeze\":{const r=dT(\"axis\",t,e,n);return[Uh(dT(\"x\",t,e,n),r)]}case\"Reshape\":return[ru(dT(\"x\",t,e,n),dT(\"shape\",t,e,n))];case\"MirrorPad\":return[Uc(dT(\"x\",t,e,n),dT(\"padding\",t,e,n),dT(\"mode\",t,e,n))];case\"PadV2\":case\"Pad\":return[Kc(dT(\"x\",t,e,n),dT(\"padding\",t,e,n),dT(\"constantValue\",t,e,n))];case\"SpaceToBatchND\":{const r=dT(\"blockShape\",t,e,n),s=dT(\"paddings\",t,e,n);return[th(dT(\"x\",t,e,n),r,s)]}case\"BatchToSpaceND\":{const r=dT(\"blockShape\",t,e,n),s=dT(\"crops\",t,e,n);return[hu(dT(\"x\",t,e,n),r,s)]}case\"DepthToSpace\":{const r=dT(\"blockSize\",t,e,n),s=dT(\"dataFormat\",t,e,n).toUpperCase();return[$u(dT(\"x\",t,e,n),r,s)]}case\"BroadcastTo\":return[xu(dT(\"x\",t,e,n),dT(\"shape\",t,e,n))];case\"BroadcastArgs\":return[yu(dT(\"s0\",t,e,n),dT(\"s1\",t,e,n))];default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n)));case\"hash_table\":return(async(t,e,n,r)=>{switch(t.op){case\"HashTable\":case\"HashTableV2\":{const s=dT(\"keyDType\",t,e,n),i=dT(\"valueDType\",t,e,n),a=new l_(s,i);return r.addHashTable(t.name,a),[a.handle]}case\"LookupTableImport\":case\"LookupTableImportV2\":{const s=dT(\"tableHandle\",t,e,n,r),i=dT(\"keys\",t,e,n),a=dT(\"values\",t,e,n),o=r.getHashTableById(s.id);return[await o.import(i,a)]}case\"LookupTableFind\":case\"LookupTableFindV2\":{const s=dT(\"tableHandle\",t,e,n,r),i=dT(\"keys\",t,e,n),a=dT(\"defaultValue\",t,e,n),o=r.getHashTableById(s.id);return[await o.find(i,a)]}case\"LookupTableSize\":case\"LookupTableSizeV2\":{const s=dT(\"tableHandle\",t,e,n,r);return[r.getHashTableById(s.id).tensorSize()]}default:throw TypeError(`Node type ${t.op} is not implemented`)}})(t,e,n,r);case\"custom\":const s=cT(t.op);if(s&&s.customExecutor)return s.customExecutor(new QT(t,e,n));throw TypeError(`Custom op ${t.op} is not registered.`);default:throw TypeError(`Unknown op '${t.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(t,e,n);return Ut(s)?s.then((t=>[].concat(t))):[].concat(s)}class c_{constructor(t={},e={},n={},r={}){this.weightMap=t,this.tensorArrayMap=e,this.tensorListMap=n,this.functionMap=r,this.rootContext={id:0,frameName:\"\",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(t,e){return{id:t,frameName:e,iterationId:0}}set currentContext(t){this.contexts!==t&&(this.contexts=t,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const t=[];for(let e=0;e<this.contexts.length-1;e++){const n=this.contexts.slice(0,this.contexts.length-e);t.push(this.contextIdforContexts(n))}t.push(\"\"),this._currentContextIds=t}contextIdforContexts(t){return t?t.map((t=>0===t.id&&0===t.iterationId?\"\":`${t.frameName}-${t.iterationId}`)).join(\"/\"):\"\"}enterFrame(t){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,t)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error(\"Cannot exit frame, the context is empty\");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error(\"Cannot increase frame iteration, the context is empty\");{this.contexts=this.contexts.slice(),this.lastId++;const t=Object.assign({},this.contexts[this.contexts.length-1]);t.iterationId+=1,t.id=this.lastId,this.contexts.splice(-1,1,t),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(t){return this.weightMap[t]}addTensorArray(t){this.tensorArrayMap[t.id]=t}getTensorArray(t){return this.tensorArrayMap[t]}addTensorList(t){this.tensorListMap[t.id]=t}getTensorList(t){return this.tensorListMap[t]}dispose(t){for(const e in this.tensorArrayMap)this.tensorArrayMap[e].clearAndClose(t);for(const e in this.tensorListMap)this.tensorListMap[e].clearAndClose(t)}}function h_(t,e,n,r){const s=new Set,i=[];let a=null,o=null;const l=new Set,u=Object.keys(t).map((t=>gT(t)[0]));let c=[];null!=r&&(c=r.map((t=>gT(t.name)[0])));const h=[...e];for(;h.length>0;){const t=h.pop();(m_(t)||g_(t)||y_(t))&&null==a&&(a=t,o=a.children.map((t=>t.name)).filter((t=>s.has(t)))),s.add(t.name),null==n[t.name]&&-1===u.indexOf(t.name)&&-1===c.indexOf(t.name)&&(0!==t.inputs.length?t.inputs.forEach((t=>{l.has(t.name)||(l.add(t.name),h.push(t))})):i.push(t.name))}return{inputs:t,outputs:e,usedNodes:s,missingInputs:i,dynamicNode:a,syncInputs:o}}const d_=[\"Switch\",\"Merge\",\"Enter\",\"Exit\",\"NextIteration\",\"StatelessIf\",\"StatelessWhile\",\"if\",\"While\"],p_=[\"NonMaxSuppressionV2\",\"NonMaxSuppressionV3\",\"NonMaxSuppressionV5\",\"Where\"],f_=[\"HashTable\",\"HashTableV2\",\"LookupTableImport\",\"LookupTableImportV2\",\"LookupTableFind\",\"LookupTableFindV2\",\"LookupTableSize\",\"LookupTableSizeV2\"];function m_(t){return d_.indexOf(t.op)>=0}function g_(t){return p_.indexOf(t.op)>=0}function y_(t){return f_.indexOf(t.op)>=0}class x_{constructor(t,e){this.graph=t,this.parent=e,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=\",\",this._functions={},this._functionExecutorMap={},this._outputs=t.outputs,this._inputs=t.inputs,this._initNodes=t.initNodes,this._signature=t.signature,this._functions=t.functions,null!=t.functions&&Object.keys(t.functions).forEach((e=>{this._functionExecutorMap[e]=new x_(t.functions[e],this)}))}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(t){const e=Object.keys(t).map((e=>t[e].map((t=>t.id))));this._weightIds=[].concat(...e),this._weightMap=t}set resourceManager(t){this._resourceManager=t}get inputs(){return this._inputs.map((t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((t=>t.signatureKey||t.name))}get outputNodes(){return this._outputs.map((t=>{const e=t.signatureKey||t.name;return t.defaultOutput?`${e}:${t.defaultOutput}`:e}))}get functions(){return Object.keys(this._functions).reduce(((t,e)=>(t[e]=this._functions[e].signature,t)),{})}getCompilationKey(t,e){const n=t.map((t=>t.name)).sort(),r=e.map((t=>t.name)).sort();return n.join(this.SEPERATOR)+\"--\"+r.join(this.SEPERATOR)}compile(t,e){const n=h_(t,e,this.weightMap,this._initNodes),{missingInputs:r,dynamicNode:s,syncInputs:i}=n;if(null!=s)throw new Error(`This execution contains the node '${s.name}', which has the dynamic op '${s.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${i}]`);if(r.length>0){const n=e.map((t=>t.name)),s=Object.keys(t);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${s}]. Missing the following inputs: [${r}]`)}return function(t,e,n){const{usedNodes:r,inputs:s}=n,i=[],a=Object.keys(s).map((t=>gT(t)[0])).map((e=>t.nodes[e])),o=t.initNodes;a.forEach((t=>{r.has(t.name)&&i.push(t)})),t.weights.forEach((t=>{r.has(t.name)&&i.push(t)})),null!=o&&o.forEach((t=>{r.has(t.name)&&i.push(t)}));const l=new Set,u=[];for(;i.length>0;){const t=i.pop();l.add(t.name),e[t.name]||u.push(t),t.children.forEach((t=>{!l.has(t.name)&&r.has(t.name)&&t.inputs.every((t=>l.has(t.name)))&&i.push(t)}))}return u}(this.graph,this.weightMap,n)}execute(t,e){t=this.mapInputs(t);const n=Object.keys(t).sort();this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e);const r=n.map((t=>this.graph.nodes[gT(t)[0]])),s=e.map((t=>gT(t)[0]));let i=s.map((t=>this.graph.nodes[t]));0===i.length&&(i=this._outputs);const a=this.getCompilationKey(r,i);let o=this.compiledMap.get(a);null==o&&(o=this.compile(t,i),this.compiledMap.set(a,o));const l={},u={};return Vo((()=>{const n=new c_(this.weightMap,l,u,this.functionExecutorMap),r=Object.assign({},this.weightMap);Object.keys(t).forEach((e=>{const[n,s]=gT(e),i=[];i[s]=t[e],r[n]=i}));const i=this.getFrozenTensorIds(r),a={};for(let t=0;t<o.length;t++){const e=o[t];if(!r[e.name]){const t=u_(e,r,n,this._resourceManager);if(Ut(t))throw new Error(`The execution of the op '${e.op}' returned a promise. Please use model.executeAsync() instead.`);r[e.name]=t,this.checkTensorForDisposal(e.name,e,r,n,i,s,a)}}return null==this.parent&&n.dispose(i),e.map((t=>pT(t,r,n)))}))}getFrozenTensorIds(t){const e=[].concat.apply([],Object.keys(t).map((e=>t[e])).map((t=>t.map((t=>t.id)))));return new Set(e)}checkTensorForDisposal(t,e,n,r,s,i,a){\"control\"!==e.category&&-1===i.indexOf(t)&&(n[t].forEach((t=>{null!=t&&(a[t.id]=(a[t.id]||0)+e.children.length)})),e.inputs.forEach((t=>{if(\"control\"!==t.category){const e=function(t,e,n){return e[mT(t,n.currentContextId)]}(t.name,n,r);null!=e&&e.forEach((t=>{if(t&&!t.kept&&!s.has(t.id)){const e=a[t.id];1===e?(t.dispose(),delete a[t.id]):null!=e&&a[t.id]--}}))}})))}async executeAsync(t,e){return this._executeAsync(t,e)}async _executeAsync(t,e,n=!1,r={},s={}){n||(t=this.mapInputs(t),this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e));const i=new c_(this.weightMap,r,s,this.functionExecutorMap),a=await this.executeWithControlFlow(t,i,e,n),o=e.map((t=>pT(t,a,i))),l=o.map((t=>t.id)),u=Object.keys(t).map((e=>t[e].id)),c=new Set([...l,...u,...this.weightIds]);return Object.keys(a).forEach((t=>{a[t].forEach((t=>{!t||t.kept||t.isDisposed||c.has(t.id)||t.dispose()}))})),null==this.parent&&i.dispose(c),o}async executeFunctionAsync(t,e,n){const r=t.reduce(((t,e,n)=>(t[this.inputs[n].name]=e,t)),{});return this._executeAsync(r,this.outputNodes,!0,e,n)}async executeWithControlFlow(t,e,n,r){const s=Object.keys(t),i=s.map((t=>this.graph.nodes[gT(t)[0]])),a=n.map((t=>gT(t)[0]));let o=a.map((t=>this.graph.nodes[t]));0===o.length&&(o=this._outputs);const{usedNodes:l,missingInputs:u,dynamicNode:c,syncInputs:h}=h_(t,o,this.weightMap,this._initNodes),d=[...i,...this.graph.weights,...this._initNodes||[]].map((t=>({node:t,contexts:e.currentContext}))),p=Object.assign({},this.weightMap);Object.keys(t).forEach((e=>{const[n,r]=gT(e),s=[];s[r]=t[e],p[n]=s}));const f={},m=this.getFrozenTensorIds(p),g={};for(;d.length>0;){const t=this.processStack(i,d,e,p,g,m,a,f,l);await Promise.all(t)}null!=c||r||console.warn(\"This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.\");const y=o.filter((t=>!m_(t)&&!pT(t.name,p,e))).map((t=>t.name));if(y.length>0){let t=\"\";throw null!=c&&(t=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${h}]`),new Error(`Cannot compute the outputs [${y}] from the provided inputs [${s}]. Consider providing the following inputs: [${u}]. ${t}`)}return p}processStack(t,e,n,r,s,i,a,o,l){const u=[];for(;e.length>0;){const t=e.pop();n.currentContext=t.contexts;let c=\"\";if(\"Enter\"===t.node.op&&dT(\"isConstant\",t.node,r,n)&&([c]=fT(t.node.name,n)),null==r[t.node.name]){const h=u_(t.node,r,n,this._resourceManager);c||([c]=fT(t.node.name,n));const d=n.currentContext;Ut(h)?u.push(h.then((u=>(r[c]=u,n.currentContext=d,this.checkTensorForDisposal(c,t.node,r,n,i,a,o),this.processChildNodes(t.node,e,n,r,s,l),u)))):(r[c]=h,this.checkTensorForDisposal(c,t.node,r,n,i,a,o),this.processChildNodes(t.node,e,n,r,s,l))}else this.processChildNodes(t.node,e,n,r,s,l)}return u}processChildNodes(t,e,n,r,s,i){t.children.forEach((t=>{const[a]=fT(t.name,n);!s[a]&&i.has(t.name)&&(\"Merge\"===t.op?t.inputNames.some((t=>!!pT(t,r,n)))&&(s[a]=!0,e.push({contexts:n.currentContext,node:t})):t.inputNames.every((t=>!!pT(t,r,n)))&&(s[a]=!0,e.push({contexts:n.currentContext,node:t})))}))}dispose(){Object.keys(this.weightMap).forEach((t=>this.weightMap[t].forEach((t=>t.dispose()))))}checkInputShapeAndType(t){Object.keys(t).forEach((e=>{const n=t[e],[r]=gT(e),s=this.graph.nodes[r];if(s.attrParams.shape&&s.attrParams.shape.value){const t=s.attrParams.shape.value;nt(t.length===n.shape.length&&n.shape.every(((e,n)=>-1===t[n]||t[n]===e)),(()=>`The shape of dict['${s.name}'] provided in model.execute(dict) must be [${t}], but was [${n.shape}]`))}s.attrParams.dtype&&s.attrParams.dtype.value&&nt(n.dtype===s.attrParams.dtype.value,(()=>`The dtype of dict['${s.name}'] provided in model.execute(dict) must be ${s.attrParams.dtype.value}, but was ${n.dtype}`))}))}mapInputs(t){const e={};for(const n in t)null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]?e[this._signature.inputs[n].name]=t[n]:e[n]=t[n];return e}checkInputs(t){const e=Object.keys(t).filter((t=>{const[e]=gT(t);return null==this.graph.nodes[e]}));if(e.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${e}] that are not part of graph`)}mapOutputs(t){return t.map((t=>null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[t]?this._signature.outputs[t].name:t),{})}checkOutputs(t){t.forEach((t=>{const[e]=gT(t);if(!this.graph.nodes[e])throw new Error(`The output '${t}' is not found in the graph`)}))}}class b_{constructor(t={},e={}){this.hashTableNameToHandle=t,this.hashTableMap=e}addHashTable(t,e){this.hashTableNameToHandle[t]=e.handle,this.hashTableMap[e.id]=e}getHashTableHandleByName(t){return this.hashTableNameToHandle[t]}getHashTableById(t){return this.hashTableMap[t]}dispose(){for(const t in this.hashTableMap)this.hashTableMap[t].clearAndClose(),delete this.hashTableMap[t];for(const t in this.hashTableNameToHandle)this.hashTableNameToHandle[t].dispose(),delete this.hashTableNameToHandle[t]}}class v_{constructor(t,e={}){this.modelUrl=t,this.loadOptions=e,this.version=\"n/a\",null==e&&(this.loadOptions={}),this.resourceManager=new b_}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}findIOHandler(){const t=this.modelUrl;if(null!=t.load)this.handler=t;else if(null!=this.loadOptions.requestInit)this.handler=Oa(t,this.loadOptions);else{const e=Wi(t,this.loadOptions);if(0===e.length)e.push(Oa(t,this.loadOptions));else if(e.length>1)throw new Error(`Found more than one (${e.length}) load handlers for URL '${[t]}'`);this.handler=e[0]}}async load(){if(this.findIOHandler(),null==this.handler.load)throw new Error(\"Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.\");const t=await this.handler.load();return this.loadSync(t)}loadSync(t){this.artifacts=t;const e=this.artifacts.modelTopology;let n;n=null!=this.artifacts.userDefinedMetadata&&null!=this.artifacts.userDefinedMetadata.signature?this.artifacts.userDefinedMetadata.signature:this.artifacts.signature,this.signature=n,this.version=`${e.versions.producer}.${e.versions.minConsumer}`;const r=Ci(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new x_(PT.Instance.transformGraph(e,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(r),this.executor.resourceManager=this.resourceManager,null!=t.modelInitializer&&null!=t.modelInitializer.node){const e=PT.Instance.transformGraph(t.modelInitializer);this.initializer=new x_(e),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(t,e){if(\"string\"==typeof t){const e=Vi(t);if(0===e.length)throw new Error(`Cannot find any save handlers for URL '${t}'`);if(e.length>1)throw new Error(`Found more than one (${e.length}) save handlers for URL '${t}'`);t=e[0]}if(null==t.save)throw new Error(\"GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.\");return t.save(this.artifacts)}predict(t,e){return this.execute(t,this.outputNodes)}normalizeInputs(t){if(!(t instanceof js||Array.isArray(t)))return t;if((t=Array.isArray(t)?t:[t]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${t.length} input tensors.`);return this.inputNodes.reduce(((e,n,r)=>(e[n]=t[r],e)),{})}normalizeOutputs(t){return t=t||this.outputNodes,Array.isArray(t)?t:[t]}execute(t,e){t=this.normalizeInputs(t),e=this.normalizeOutputs(e);const n=this.executor.execute(t,e);return n.length>1?n:n[0]}async executeAsync(t,e){t=this.normalizeInputs(t),e=this.normalizeOutputs(e);const n=await this.executor.executeAsync(t,e);return n.length>1?n:n[0]}convertTensorMapToTensorsMap(t){return Object.keys(t).reduce(((e,n)=>(e[n]=[t[n]],e)),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}async function w_(t,e={}){if(null==t)throw new Error(\"modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model\");null==e&&(e={}),e.fromTFHub&&null==t.load&&(t.endsWith(\"/\")||(t+=\"/\"),t=`${t}model.json?tfjs-format=file`);const n=new v_(t,e);return await n.load(),n}const S_=\"3.9.0\";function T_(t,e,n=new Map,r=new Set){if(null==t)return null;if(r.has(t))throw new Error(\"Circular references are not supported.\");if(n.has(t))return n.get(t);const s=e(t);if(s.recurse&&null!==s.value)throw new Error(\"A deep map function may not return both a value and recurse=true.\");if(s.recurse){if(I_(t)){const s=Array.isArray(t)?[]:{};r.add(t);for(const i in t){const a=T_(t[i],e,n,r);s[i]=a}return r.delete(t),s}throw new Error(`Can't recurse into non-iterable type: ${t}`)}return n.set(t,s.value),s.value}function __(t,e=k_){return M_(t,e)}function M_(t,e,n=new Set){const r=t[0];if(n.has(r))throw new Error(\"Circular references are not supported.\");const s=e(t);if(s.recurse&&null!==s.value)throw new Error(\"A deep zip function may not return both a value and recurse=true.\");if(s.recurse){if(I_(r)){const s=Array.isArray(r)?[]:{};n.add(r);for(const i in r){const r=M_(t.map((t=>t[i])),e,n);s[i]=r}return n.delete(r),s}throw new Error(`Can't recurse into non-iterable type: ${r}`)}return s.value}function k_(t){return null===t?null:I_(t[0])?{value:null,recurse:!0}:{value:t,recurse:!1}}async function E_(t,e){const n=new Map;T_(t,e,n);for(const t of Array.from(n.keys())){const e=n.get(t);if(Ut(e)){const r=await e;n.set(t,r)}}return T_(t,e,n)}function I_(t){let e=!1;if(jt().get(\"IS_BROWSER\"))e=t instanceof TextDecoder;else{const{StringDecoder:r}=n(84589);e=t instanceof r}return null!=t&&!ArrayBuffer.isView(t)&&(Array.isArray(t)||\"object\"==typeof t&&!(t instanceof js)&&!(t instanceof Promise)&&!e)}function C_(t){return t instanceof js?{value:t.clone(),recurse:!1}:I_(t)?{value:null,recurse:!0}:{value:t,recurse:!1}}class N_{constructor(t){if(this.capacity=t,this.begin=0,this.end=0,null==t)throw new RangeError(\"Can't create a ring buffer of unknown capacity.\");if(t<1)throw new RangeError(\"Can't create ring buffer of capacity < 1.\");this.data=new Array(t),this.doubledCapacity=2*t}wrap(t){for(;t<0;)t+=this.doubledCapacity;return t%this.doubledCapacity}get(t){if(t<0)throw new RangeError(\"Can't get item at a negative index.\");return this.data[t%this.capacity]}set(t,e){if(t<0)throw new RangeError(\"Can't set item at a negative index.\");this.data[t%this.capacity]=e}length(){let t=this.end-this.begin;return t<0&&(t=this.doubledCapacity+t),t}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(t){if(this.isFull())throw new RangeError(\"Ring buffer is full.\");this.set(this.end,t),this.end=this.wrap(this.end+1)}pushAll(t){for(const e of t)this.push(e)}pop(){if(this.isEmpty())throw new RangeError(\"Ring buffer is empty.\");this.end=this.wrap(this.end-1);const t=this.get(this.end);return this.set(this.end,void 0),t}unshift(t){if(this.isFull())throw new RangeError(\"Ring buffer is full.\");this.begin=this.wrap(this.begin-1),this.set(this.begin,t)}shift(){if(this.isEmpty())throw new RangeError(\"Ring buffer is empty.\");const t=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),t}shuffleExcise(t){if(this.isEmpty())throw new RangeError(\"Ring buffer is empty.\");const e=this.wrap(this.begin+t),n=this.get(e);return this.set(e,this.pop()),n}}class A_ extends N_{constructor(){super(A_.INITIAL_CAPACITY)}isFull(){return!1}push(t){super.isFull()&&this.expand(),super.push(t)}unshift(t){super.isFull()&&this.expand(),super.unshift(t)}expand(){const t=2*this.capacity,e=new Array(t),n=this.length();for(let t=0;t<n;t++)e[t]=this.get(this.wrap(this.begin+t));this.data=e,this.capacity=t,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}function R_(t){return new F_(t)}function L_(t){return new $_(t)}A_.INITIAL_CAPACITY=32;class D_{async toArray(){const t=[];let e=await this.next();for(;!e.done;)t.push(e.value),e=await this.next();return t}async toArrayForTest(){const t=this.prefetch(100),e=[];let n=await t.next();for(;!n.done;)e.push(n.value),n=await t.next();return e}async resolveFully(){let t=await this.next();for(;!t.done;)t=await this.next()}async resolveWhile(t){let e=await this.next(),n=t(e.value);for(;!e.done&&n;)e=await this.next(),n=t(e.value)}handleErrors(t){return new W_(this,t)}filter(t){return new U_(this,t)}map(t){return new V_(this,t)}mapAsync(t){return new G_(this,t)}serialMapAsync(t){return new G_(this,t).serial()}flatmap(t){return new j_(this,t)}async forEachAsync(t){return this.map(t).resolveFully()}async serialForEach(t){return this.serialMapAsync(t).resolveWhile((t=>!0===t))}rowMajorBatch(t,e=!0){return new B_(this,t,e)}columnMajorBatch(t,e=!0,n=k_){return this.rowMajorBatch(t,e).map((t=>__(t,n)))}concatenate(t,e){return new q_(R_([this,t]),e)}take(t){return t<0||null==t?this:new z_(this,t)}skip(t){return t<0||null==t?this:new P_(this,t)}prefetch(t){return new Y_(this,t)}shuffle(t,e){return new Z_(this,t,e)}serial(){return new O_(this)}}class F_ extends D_{constructor(t){super(),this.items=t,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};const t=this.items[this.trav];return this.trav++,{value:(e=t,function(t,e){return T_(t,e)}(e,C_)),done:!1};var e}}class $_ extends D_{constructor(t){super(),this.nextFn=t}summary(){return\"Function call\"}async next(){try{return this.nextFn()}catch(t){throw t.message=`Error thrown while iterating through a dataset: ${t.message}`,t}}}class O_ extends D_{constructor(t){super(),this.upstream=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Serial`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){return this.upstream.next()}}class P_ extends D_{constructor(t,e){super(),this.upstream=t,this.maxCount=e,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Skip`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){const t=await this.upstream.next();if(t.done)return t;Wo(t.value)}return this.upstream.next()}}class z_ extends D_{constructor(t,e){super(),this.upstream=t,this.maxCount=e,this.count=0}summary(){return`${this.upstream.summary()} -> Take`}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class B_ extends D_{constructor(t,e,n=!0){super(),this.upstream=t,this.batchSize=e,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> RowMajorBatch`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){const t=[];for(;t.length<this.batchSize;){const e=await this.upstream.next();if(e.done)return this.enableSmallLastBatch&&t.length>0?{value:t,done:!1}:{value:null,done:!0};t.push(e.value)}return{value:t,done:!1}}}class U_ extends D_{constructor(t,e){super(),this.upstream=t,this.predicate=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Filter`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;){const t=await this.upstream.next();if(t.done||this.predicate(t.value))return t;Wo(t.value)}}}class V_ extends D_{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return`${this.upstream.summary()} -> Map`}async next(){const t=await this.upstream.next();if(t.done)return{value:null,done:!0};const e=ai(t.value),n=this.transform(t.value),r=ai(n);for(const t of e)ii(t,r)||t.dispose();return{value:n,done:!1}}}class W_ extends D_{constructor(t,e){super(),this.upstream=t,this.handler=e,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> handleErrors`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(t){if(!this.handler(t))return{value:null,done:!0}}}}class G_ extends D_{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return`${this.upstream.summary()} -> AsyncMap`}async next(){const t=await this.upstream.next();if(t.done)return{value:null,done:!0};const e=ai(t.value),n=await this.transform(t.value),r=ai(n);for(const t of e)ii(t,r)||t.dispose();return{value:n,done:!1}}}class H_ extends D_{constructor(){super(),this.outputQueue=new A_,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class j_ extends H_{constructor(t,e){super(),this.upstream=t,this.transform=e}summary(){return`${this.upstream.summary()} -> Flatmap`}async pump(){const t=await this.upstream.next();if(t.done)return!1;const e=ai(t.value),n=this.transform(t.value),r=ai(n);this.outputQueue.pushAll(n);for(const t of e)ii(t,r)||t.dispose();return!0}}class q_ extends D_{constructor(t,e){super(),this.baseErrorHandler=e,this.lastRead=null,this.iterator=null,this.moreIterators=t}summary(){return\"TODO: fill in upstream of chained summaries -> Chained\"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(t){if(await t,null==this.iterator){const t=await this.moreIterators.next();if(t.done)return{value:null,done:!0};this.iterator=t.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}const e=await this.iterator.next();return e.done?(this.iterator=null,this.readFromChain(t)):e}}var X_;!function(t){t[t.FAIL=0]=\"FAIL\",t[t.SHORTEST=1]=\"SHORTEST\",t[t.LONGEST=2]=\"LONGEST\"}(X_||(X_={}));class K_ extends D_{constructor(t,e=X_.FAIL){super(),this.iterators=t,this.mismatchMode=e,this.count=0,this.currentPromise=null}summary(){return\"{TODO: fill in upstream of zip summaries} -> Zip\"}async nextState(t){await t;let e=0,n=0;const r=await E_(this.iterators,(function(t){return t instanceof D_?{value:t.next().then((t=>(e++,t.done&&n++,t.value))),recurse:!1}:{value:null,recurse:!0}}));if(e===n)return{value:null,done:!0};if(n>0)switch(this.mismatchMode){case X_.FAIL:throw new Error(`Zipped streams should have the same length. Mismatched at element ${this.count}.`);case X_.SHORTEST:return{value:null,done:!0};case X_.LONGEST:}return this.count++,{value:r,done:!1}}async next(){return this.currentPromise=this.nextState(this.currentPromise),this.currentPromise}}class Y_ extends D_{constructor(t,e){super(),this.upstream=t,this.bufferSize=e,this.buffer=new N_(e)}summary(){return`${this.upstream.summary()} -> Prefetch`}refill(){for(;!this.buffer.isFull();){const t=this.upstream.next();this.buffer.push(t)}}next(){return this.refill(),this.buffer.shift()}}class Z_ extends Y_{constructor(t,e,n){super(t,e),this.upstream=t,this.windowSize=e,this.upstreamExhausted=!1,this.random=ih.alea(n||Ns().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}randomInt(t){return Math.floor(this.random()*t)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){const t=this.chooseIndex(),e=await this.buffer.shuffleExcise(t);if(!e.done)return this.refill(),e;this.upstreamExhausted=!0}return{value:null,done:!0}}}class J_{constructor(){this.size=null}batch(t,e=!0){const n=this;let r;return nt(t>0,(()=>`batchSize needs to be positive, but it is\\n      ${t}`)),r=this.size===1/0||null==this.size?this.size:e?Math.ceil(this.size/t):Math.floor(this.size/t),Q_((async()=>(await n.iterator()).columnMajorBatch(t,e,nM)),r)}concatenate(t){const e=this;let n;return n=this.size===1/0||t.size===1/0?1/0:null!=this.size&&null!=t.size?this.size+t.size:null,Q_((async()=>(await e.iterator()).concatenate(await t.iterator())),n)}filter(t){const e=this;let n;return n=this.size===1/0?1/0:null,Q_((async()=>(await e.iterator()).filter((e=>Vo((()=>t(e)))))),n)}async forEachAsync(t){return(await this.iterator()).forEachAsync(t)}map(t){const e=this;return Q_((async()=>(await e.iterator()).map((e=>Vo((()=>t(e)))))),this.size)}mapAsync(t){const e=this;return Q_((async()=>(await e.iterator()).mapAsync(t)),this.size)}prefetch(t){if(null==t)throw new RangeError(\"`Dataset.prefetch()` requires bufferSize to be specified.\");const e=this;return Q_((async()=>(await e.iterator()).prefetch(t)),this.size)}repeat(t){const e=this;let n;return n=null!=this.size&&t>0?this.size*t:0===t?0:null!=this.size&&(void 0===t||t<0)?1/0:null,Q_((async()=>{return n=L_((async()=>({value:await e.iterator(),done:!1}))).take(t),new q_(n,r);var n,r}),n)}skip(t){const e=this;let n;return n=null!=this.size&&t>=0&&this.size>=t?this.size-t:null!=this.size&&(this.size<t||void 0===t||t<0)?0:null,Q_((async()=>(await e.iterator()).skip(t)),n)}shuffle(t,e,n=!0){if(null==t||t<0)throw null==this.size?new RangeError(\"`Dataset.shuffle()` requires bufferSize to be specified.\"):new RangeError(`\\`Dataset.shuffle()\\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \\`tf.Tensor\\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);const r=this,s=ih.alea(e||Ns().toString());return Q_((async()=>{let e=s.int32();return n&&(e+=s.int32()),(await r.iterator()).shuffle(t,e.toString())}),this.size)}take(t){const e=this;let n;return n=null!=this.size&&this.size>t?t:null!=this.size&&this.size<=t?this.size:null,Q_((async()=>(await e.iterator()).take(t)),n)}async toArray(){if(this.size===1/0)throw new Error(\"Can not convert infinite data stream to array.\");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error(\"Can not convert infinite data stream to array.\");return(await this.iterator()).toArrayForTest()}}function Q_(t,e=null){return new class extends J_{constructor(){super(...arguments),this.size=e}async iterator(){return t()}}}function tM(t){return Q_((async()=>R_(t)),t.length)}function eM(t){if(!I_(t))throw new Error(\"The argument to zip() must be an object or array.\");let e;if(Array.isArray(t))for(let n=0;n<t.length;n++)e=null==e?t[n].size:Math.min(e,t[n].size);else if(t instanceof Object)for(const n in t)e=null==e?t[n].size:Math.min(e,t[n].size);return Q_((async()=>function(t,e=X_.FAIL){return new K_(t,e)}(await E_(t,(t=>{if(t instanceof J_)return{value:t.iterator(),recurse:!1};if(I_(t))return{value:null,recurse:!0};throw new Error(\"Leaves of the structure passed to zip() must be Datasets, not primitives.\")})),X_.SHORTEST)),e)}function nM(t){if(null===t)return null;return null==(e=t[0])||null===(n=e)||\"object\"!=typeof n&&\"function\"!=typeof n||Array.isArray(e)||\"object\"==typeof e&&e instanceof js||Tt(e)?{value:function(t){if(0===t.length)throw new Error(\"Can't make a batch of zero elements.\");return t[0]instanceof js?Vh(t):ki(t)}(t),recurse:!1}:{value:null,recurse:!0};var e,n}J_.MAX_BUFFER_SIZE=1e4;class rM extends J_{constructor(t){super(),this.input=t}async iterator(){return(await this.input.iterator()).decodeUTF8().split(\"\\n\").map((t=>(t.endsWith(\"\\r\")&&(t=t.slice(0,-1)),t)))}}const sM='\"',iM=Symbol(\"out\"),aM=Symbol(\"field\"),oM=Symbol(\"quote\"),lM=Symbol(\"quoteafterquote\"),uM=Symbol(\"quoteinquote\");class cM extends J_{constructor(t,e){super(),this.input=t,this.hasHeader=!0,this.fullColumnNames=null,this.columnNamesValidated=!1,this.columnConfigs=null,this.configuredColumnsOnly=!1,this.delimiter=\",\",this.delimWhitespace=!1,this.base=new rM(t),e||(e={}),this.hasHeader=!1!==e.hasHeader,this.fullColumnNames=e.columnNames,this.columnConfigs=e.columnConfigs,this.configuredColumnsOnly=e.configuredColumnsOnly,e.delimWhitespace?(nt(null==e.delimiter,(()=>\"Delimiter should not be provided when delimWhitespace is true.\")),this.delimWhitespace=!0,this.delimiter=\" \"):this.delimiter=e.delimiter?e.delimiter:\",\"}async columnNames(){return this.columnNamesValidated||await this.setColumnNames(),this.configuredColumnsOnly?Object.keys(this.columnConfigs):this.fullColumnNames}async setColumnNames(){const t=await this.maybeReadHeaderLine();if(!this.fullColumnNames&&!t)throw new Error(\"Column names must be provided if there is no header line.\");this.fullColumnNames&&t&&nt(t.length===this.fullColumnNames.length,(()=>\"The length of provided columnNames (\"+this.fullColumnNames.length.toString()+\") does not match the length of the header line read from file (\"+t.length.toString()+\").\")),this.fullColumnNames||(this.fullColumnNames=t);const e=this.fullColumnNames.reduce(((t,e)=>(t[e]=t[e]+1||1,t)),{}),n=Object.keys(e).filter((t=>e[t]>1));if(nt(0===n.length,(()=>\"Duplicate column names found: \"+n.toString())),this.columnConfigs)for(const t of Object.keys(this.columnConfigs))if(-1===this.fullColumnNames.indexOf(t))throw new Error('The key \"'+t+'\" provided in columnConfigs does not match any of the column names ('+this.fullColumnNames.toString()+\").\");this.columnNamesValidated=!0}async maybeReadHeaderLine(){if(this.hasHeader){const t=await this.base.iterator(),e=await t.next();if(e.done)throw new Error(\"No data was found for CSV parsing.\");const n=e.value;return this.parseRow(n,!1)}return null}async iterator(){this.columnNamesValidated||await this.setColumnNames();let t=await this.base.iterator();return this.hasHeader&&(t=t.skip(1)),t.map((t=>this.makeDataElement(t)))}makeDataElement(t){const e=this.parseRow(t),n={},r={};for(let s=0;s<this.fullColumnNames.length;s++){const i=this.fullColumnNames[s],a=this.columnConfigs?this.columnConfigs[i]:null;if(!this.configuredColumnsOnly||a){const o=e[s];let l=null;if(\"\"===o)if(a&&void 0!==a.default)l=a.default;else{if(a&&(a.required||a.isLabel))throw new Error(`Required column ${i} is empty in this line: ${t}`);l=void 0}else{const t=Number(o);if(isNaN(t))l=a&&\"bool\"===a.dtype?this.getBoolean(o):o;else if(a&&a.dtype)switch(a.dtype){case\"float32\":l=t;break;case\"int32\":l=Math.floor(t);break;case\"bool\":l=this.getBoolean(o);break;default:l=t}else l=t}a&&a.isLabel?r[i]=l:n[i]=l}}return 0===Object.keys(r).length?n:{xs:n,ys:r}}getBoolean(t){return\"1\"===t||\"true\"===t.toLowerCase()?1:0}parseRow(t,e=!0){const n=[];let r=0;const s=t.length;let i=iM;for(let e=0;e<s;e++)switch(i){case iM:switch(t.charAt(e)){case sM:r=e+1,i=oM;break;case this.delimiter:if(r=e+1,\" \"===this.delimiter&&this.delimWhitespace)break;n.push(\"\"),i=iM;break;default:i=aM,r=e}break;case aM:switch(t.charAt(e)){case this.delimiter:n.push(t.substring(r,e)),i=iM,r=e+1}break;case oM:switch(t.charAt(e)){case sM:i=lM}break;case lM:switch(t.charAt(e)){case this.delimiter:n.push(t.substring(r,e-1)),i=iM,r=e+1;break;case sM:i=oM;break;default:i=uM}break;case uM:switch(t.charAt(e)){case sM:i=oM}}if(i===lM?n.push(t.substring(r,s-1)):n.push(t.substring(r)),e&&n.length!==this.fullColumnNames.length)throw new Error(`Invalid row in csv file. Should have ${this.fullColumnNames.length} elements in a row, but got ${n}`);return n}}class hM extends D_{constructor(t){super(),this.microphoneConfig=t,this.isClosed=!1,this.fftSize=t.fftSize||1024;const e=Math.log2(this.fftSize);if(this.fftSize<0||e<4||e>14||!Number.isInteger(e))throw new Error(`Invalid fftSize: it must be a power of 2 between 2 to 4 and 2 to 14, but got ${this.fftSize}`);if(this.numFrames=t.numFramesPerSpectrogram||43,this.sampleRateHz=t.sampleRateHz,this.columnTruncateLength=t.columnTruncateLength||this.fftSize,this.audioTrackConstraints=t.audioTrackConstraints,this.smoothingTimeConstant=t.smoothingTimeConstant||0,this.includeSpectrogram=!1!==t.includeSpectrogram,this.includeWaveform=!0===t.includeWaveform,!this.includeSpectrogram&&!this.includeWaveform)throw new Error(\"Both includeSpectrogram and includeWaveform are false. At least one type of data should be returned.\")}summary(){return\"microphone\"}static async create(t={}){if(jt().get(\"IS_NODE\"))throw new Error(\"microphone API is only supported in browser environment.\");const e=new hM(t);return await e.start(),e}async start(){try{this.stream=await navigator.mediaDevices.getUserMedia({audio:null==this.audioTrackConstraints||this.audioTrackConstraints,video:!1})}catch(t){throw new Error(`Error thrown while initializing video stream: ${t.message}`)}if(!this.stream)throw new Error(\"Could not obtain audio from microphone.\");const t=window.AudioContext||window.webkitAudioContext;if(this.audioContext=new t,this.sampleRateHz){if(this.audioContext.sampleRate!==this.sampleRateHz)throw new Error(`Mismatch in sampling rate: Expected: ${this.sampleRateHz}; Actual: ${this.audioContext.sampleRate}`)}else this.sampleRateHz=this.audioContext.sampleRate;const e=this.audioContext.createMediaStreamSource(this.stream);this.analyser=this.audioContext.createAnalyser(),this.analyser.fftSize=2*this.fftSize,this.analyser.smoothingTimeConstant=this.smoothingTimeConstant,e.connect(this.analyser),this.freqData=new Float32Array(this.fftSize),this.timeData=new Float32Array(this.fftSize)}async next(){if(this.isClosed)return{value:null,done:!0};let t,e;const n=await this.getAudioData();if(this.includeSpectrogram){const e=this.flattenQueue(n.freqDataQueue);t=this.getTensorFromAudioDataArray(e,[this.numFrames,this.columnTruncateLength,1])}if(this.includeWaveform){const t=this.flattenQueue(n.timeDataQueue);e=this.getTensorFromAudioDataArray(t,[this.numFrames*this.fftSize,1])}return{value:{spectrogram:t,waveform:e},done:!1}}async capture(){return(await this.next()).value}async getAudioData(){const t=[],e=[];let n=0;return new Promise((r=>{const s=setInterval((()=>{this.includeSpectrogram&&(this.analyser.getFloatFrequencyData(this.freqData),this.freqData[0]===-1/0&&r({freqDataQueue:t,timeDataQueue:e}),t.push(this.freqData.slice(0,this.columnTruncateLength))),this.includeWaveform&&(this.analyser.getFloatTimeDomainData(this.timeData),e.push(this.timeData.slice())),++n===this.numFrames&&(clearInterval(s),r({freqDataQueue:t,timeDataQueue:e}))}),this.fftSize/this.sampleRateHz*1e3)}))}stop(){this.isClosed||(this.isClosed=!0,this.analyser.disconnect(),this.audioContext.close(),null!=this.stream&&this.stream.getTracks().length>0&&this.stream.getTracks()[0].stop())}toArray(){throw new Error(\"Can not convert infinite audio stream to array.\")}getSampleRate(){return this.sampleRateHz}flattenQueue(t){const e=t[0].length,n=new Float32Array(t.length*e);return t.forEach(((t,r)=>n.set(t,r*e))),n}getTensorFromAudioDataArray(t,e){const n=new Float32Array(at(e));return n.set(t,n.length-t.length),ki(n,e)}}class dM extends D_{constructor(t,e){if(super(),this.webcamVideoElement=t,this.webcamConfig=e,this.isClosed=!0,this.resize=!1,this.needToResize())if(this.resize=!0,this.cropSize=[this.webcamConfig.resizeHeight,this.webcamConfig.resizeWidth],this.cropBoxInd=jh([0],\"int32\"),this.webcamConfig.centerCrop){const t=1*this.webcamConfig.resizeWidth/this.webcamVideoElement.width,e=1*this.webcamConfig.resizeHeight/this.webcamVideoElement.height,n=(1-t)/2,r=(1-e)/2,s=n+t,i=e+r;this.cropBox=qh([r,n,i,s],[1,4])}else this.cropBox=qh([0,0,1,1],[1,4])}summary(){return\"webcam\"}static async create(t,e={}){if(jt().get(\"IS_NODE\"))throw new Error(\"tf.data.webcam is only supported in browser environment.\");if(!t){if(t=document.createElement(\"video\"),!e.resizeWidth||!e.resizeHeight)throw new Error(\"Please provide webcam video element, or resizeWidth and resizeHeight to create a hidden video element.\");t.width=e.resizeWidth,t.height=e.resizeHeight}const n=new dM(t,e);return await n.start(),n}async start(){this.webcamConfig.facingMode&&nt(\"user\"===this.webcamConfig.facingMode||\"environment\"===this.webcamConfig.facingMode,(()=>`Invalid webcam facing mode: ${this.webcamConfig.facingMode}. Please provide 'user' or 'environment'`));try{this.stream=await navigator.mediaDevices.getUserMedia({video:{deviceId:this.webcamConfig.deviceId,facingMode:this.webcamConfig.facingMode?this.webcamConfig.facingMode:\"user\",width:this.webcamVideoElement.width,height:this.webcamVideoElement.height}})}catch(t){throw t.message=`Error thrown while initializing video stream: ${t.message}`,t}if(!this.stream)throw new Error(\"Could not obtain video from webcam.\");try{this.webcamVideoElement.srcObject=this.stream}catch(t){console.log(t),this.webcamVideoElement.src=window.URL.createObjectURL(this.stream)}return this.webcamVideoElement.play(),this.isClosed=!1,new Promise((t=>{this.webcamVideoElement.onloadedmetadata=()=>{t()}}))}async next(){if(this.isClosed)return{value:null,done:!0};let t;try{t=Za(this.webcamVideoElement)}catch(t){throw new Error(`Error thrown converting video to pixels: ${JSON.stringify(t)}`)}if(!this.resize)return{value:t,done:!1};try{return{value:this.cropAndResizeFrame(t),done:!1}}catch(t){throw new Error(`Error thrown cropping the video: ${t.message}`)}finally{t.dispose()}}needToResize(){return!(!this.webcamConfig.resizeWidth||!this.webcamConfig.resizeHeight||this.webcamVideoElement.width===this.webcamConfig.resizeWidth&&this.webcamVideoElement.height===this.webcamConfig.resizeHeight)}cropAndResizeFrame(t){return Vo((()=>{const e=Xu(Sa(t,\"float32\"),0);let n;n=vp.cropAndResize(e,this.cropBox,this.cropBoxInd,this.cropSize,\"bilinear\");const r=n.shape;return ru(n,r.slice(1))}))}async capture(){return(await this.next()).value}stop(){this.stream.getTracks().forEach((t=>t.stop()));try{this.webcamVideoElement.srcObject=null}catch(t){console.log(t),this.webcamVideoElement.src=null}this.isClosed=!0}toArray(){throw new Error(\"Can not convert infinite video stream to array.\")}}class pM{}class fM extends D_{split(t){return new mM(this,t)}}class mM extends fM{constructor(t,e){super(),this.upstream=t,this.impl=new gM(t,e)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class gM extends H_{constructor(t,e){super(),this.upstream=t,this.separator=e,this.carryover=\"\"}summary(){return`${this.upstream.summary()} -> Split('${this.separator}')`}async pump(){const t=await this.upstream.next();if(t.done)return\"\"!==this.carryover&&(this.outputQueue.push(this.carryover),this.carryover=\"\",!0);const e=t.value.split(this.separator);e[0]=this.carryover+e[0];for(const t of e.slice(0,-1))this.outputQueue.push(t);return this.carryover=e[e.length-1],!0}}class yM extends D_{decodeUTF8(){return new xM(this)}}class xM extends fM{constructor(t){super(),this.upstream=t,this.impl=new bM(t)}summary(){return this.impl.summary()}async next(){return this.impl.next()}}class bM extends H_{constructor(t){if(super(),this.upstream=t,jt().get(\"IS_BROWSER\"))this.decoder=new TextDecoder(\"utf-8\");else{const{StringDecoder:t}=n(84589);this.decoder=new t(\"utf8\")}}summary(){return`${this.upstream.summary()} -> Utf8`}async pump(){const t=await this.upstream.next();let e,n;return!t.done&&(e=t.value,n=jt().get(\"IS_BROWSER\")?this.decoder.decode(e,{stream:!0}):this.decoder.write(Buffer.from(e.buffer)),this.outputQueue.push(n),!0)}}class vM extends yM{constructor(t,e={}){super(),this.file=t,this.options=e,nt(t instanceof Uint8Array||!!jt().get(\"IS_BROWSER\")&&(t instanceof File||t instanceof Blob),(()=>\"FileChunkIterator only supports File, Blob and Uint8Array right now.\")),this.offset=e.offset||0,this.chunkSize=e.chunkSize||1048576}summary(){return`FileChunks ${this.file}`}async next(){if(this.offset>=(this.file instanceof Uint8Array?this.file.byteLength:this.file.size))return{value:null,done:!0};const t=new Promise(((t,e)=>{const n=this.offset+this.chunkSize;if(this.file instanceof Uint8Array)t(new Uint8Array(this.file.slice(this.offset,n)));else{const r=new FileReader;r.onload=n=>{let s=r.result;if(s instanceof ArrayBuffer&&(s=new Uint8Array(s)),!(s instanceof Uint8Array))return e(new TypeError(\"FileReader returned unknown type.\"));t(s)},r.onabort=t=>e(new Error(\"Aborted\")),r.onerror=t=>e(new Error(t.type));const s=this.file.slice(this.offset,n);r.readAsArrayBuffer(s)}this.offset=n}));return{value:await t,done:!1}}}function wM(t){return\"string\"==typeof t&&\"file://\"===t.substr(0,7)}class SM extends pM{constructor(t,e={}){super(),this.input=t,this.options=e}async iterator(){if(wM(this.input)&&jt().get(\"IS_NODE\")){const t=n(12993);this.input=t.readFileSync(this.input.substr(7))}return new vM(this.input,this.options)}}class TM extends pM{constructor(t,e={}){super(),this.url=t,this.fileOptions=e}async iterator(){return wM(this.url)?new SM(this.url,this.fileOptions).iterator():async function(t,e={}){let n,r;var s;\"string\"==typeof t?n=t:(n=t.url,r={method:(s=t).method,headers:s.headers,body:s.body,mode:s.mode,credentials:s.credentials,cache:s.cache,redirect:s.redirect,referrer:s.referrer,integrity:s.integrity});const i=await As(n,r);if(i.ok){const t=new Uint8Array(await i.arrayBuffer());return new vM(t,e)}throw new Error(i.statusText)}(this.url,this.fileOptions)}}function _M(t,e={}){return new cM(new TM(t),e)}function MM(t){const e=L_(t);return Q_((async()=>e))}function kM(t){return Q_((async()=>{const e=await t();return L_((()=>e.next()))}))}async function EM(t,e){return dM.create(t,e)}async function IM(t){return hM.create(t)}const CM=\"3.9.0\";function NM(t,e){Array.isArray(t)||(t=[t]),t.forEach((t=>{null!=t&&nt(\"complex64\"!==t.dtype,(()=>`${e} does not support complex64 tensors in the CPU backend.`))}))}const AM=rd;class RM extends j{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new H(this,zo())}nextDataId(){return RM.nextDataId++}write(t,e,n){this.firstUse&&(this.firstUse=!1,jt().get(\"IS_NODE\")&&Vt(\"\\n============================\\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\\n============================\"));const r={id:this.nextDataId()};return this.data.set(r,{values:t,dtype:n,refCount:1}),r}makeTensorInfo(t,e,n){let r;if(\"string\"===e&&null!=n&&n.length>0&&kt(n[0])){const s=n.map((t=>Rs(t)));r=this.write(s,t,e)}else r=this.write(n,t,e);return{dataId:r,shape:t,dtype:e}}refCount(t){return this.data.has(t)?this.data.get(t).refCount:0}incRef(t){this.data.get(t).refCount++}decRef(t){this.data.has(t)&&this.data.get(t).refCount--}move(t,e,n,r,s){this.data.set(t,{values:e,dtype:r,refCount:s})}numDataIds(){return this.data.numDataIds()}async read(t){return this.readSync(t)}readSync(t){const{dtype:e,complexTensorInfos:n}=this.data.get(t);return\"complex64\"===e?qp(this.readSync(n.real.dataId),this.readSync(n.imag.dataId)):this.data.get(t).values}bufferSync(t){const e=this.readSync(t.dataId);let n=e;if(\"string\"===t.dtype)try{n=e.map((t=>Ls(t)))}catch(t){throw new Error(\"Failed to decode encoded string bytes into utf-8\")}return wa(t.shape,t.dtype,n)}makeOutput(t,e,n){const r=this.write(t,e,n);return zo().makeTensorFromDataId(r,e,n,this)}disposeData(t,e=!1){if(this.data.has(t)){if(this.data.get(t).refCount--,!e&&this.data.get(t).refCount>0)return!1;const{complexTensorInfos:n}=this.data.get(t);null!=n&&(this.disposeData(n.real.dataId,!0),this.disposeData(n.imag.dataId,!0)),this.data.delete(t)}return!0}disposeIntermediateTensorInfo(t){this.disposeData(t.dataId)}async time(t){const e=Ns();return t(),{kernelMs:Ns()-e}}memory(){return{unreliable:!0,reasons:[\"The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less.\"]}}where(t){NM([t],\"where\");const e=this.readSync(t.dataId);return AM(t.shape,e)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}function LM(t,e,n){return({inputs:r,attrs:s,backend:i})=>{const{x:a}=r;if(NM(a,t),\"string\"===a.dtype||\"string\"===n)throw new Error(\"unaryKernelFunc does not support string input/output\");const o=i,l=o.data.get(a.dataId).values,u=at(a.shape),c=n||a.dtype,h=bt(c,u);for(let t=0;t<u;++t)h[t]=e(l[t],s);return o.makeTensorInfo(a.shape,c,h)}}function DM(t,e,n){return({inputs:r,attrs:s,backend:i})=>{const{x:a}=r;if(NM(a,t),\"string\"===a.dtype||\"string\"===n)throw new Error(\"unaryKernelFunc does not support string input/output\");const o=i,l=o.data.get(a.dataId).values,u=n||a.dtype,c=e(l,u,s);return o.makeTensorInfo(a.shape,u,c)}}RM.nextDataId=0,Jo(\"cpu\",(()=>new RM),1);const FM=LM(qe,(t=>t>=0?t:Math.exp(t)-1)),$M={kernelName:qe,backendName:\"cpu\",kernelFunc:FM};function OM(t){const{inputs:e,backend:n}=t,{x:r}=e;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const PM={kernelName:hn,backendName:\"cpu\",kernelFunc:OM};function zM(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{alpha:i}=r;NM([s],\"leakyRelu\");const a=at(s.shape),o=n.data.get(s.dataId).values,l=xt(\"float32\",a);for(let t=0;t<o.length;t++)l[t]=o[t]<0?i*o[t]:o[t];return n.makeTensorInfo(s.shape,\"float32\",l)}const BM={kernelName:yn,backendName:\"cpu\",kernelFunc:zM};function UM(t){return(e,n,r,s,i)=>{const a=kl(e,n),o=a.length,l=Rt(a),u=xt(i,at(a)),c=e.length,h=n.length,d=Rt(e),p=Rt(n),f=_l(e,a),m=_l(n,a);if(f.length+m.length===0)for(let e=0;e<u.length;++e)u[e]=t(r[e%r.length],s[e%s.length]);else for(let e=0;e<u.length;++e){const n=Bt(e,o,l),i=n.slice(-c);f.forEach((t=>i[t]=0));const a=zt(i,c,d),g=n.slice(-h);m.forEach((t=>g[t]=0));const y=zt(g,h,p);u[e]=t(r[a],s[y])}return[u,a]}}const VM=UM(((t,e)=>t<0?e*t:t));function WM(t){const{inputs:e,backend:n}=t,{x:r,alpha:s}=e;NM([r,s],\"prelu\");const i=n.data.get(r.dataId).values,a=n.data.get(s.dataId).values,[o,l]=VM(r.shape,s.shape,i,a,r.dtype);return n.makeTensorInfo(l,r.dtype,o)}const GM={kernelName:tr,backendName:\"cpu\",kernelFunc:WM},HM=LM(ir,(t=>Math.max(0,t))),jM={kernelName:ir,backendName:\"cpu\",kernelFunc:HM},qM=LM(hr,(t=>Math.min(Math.max(0,t),6))),XM={kernelName:hr,backendName:\"cpu\",kernelFunc:qM};function KM(t){return(e,n,r)=>{const s=xt(n,e.length);for(let n=0;n<e.length;++n)s[n]=t(e[n],r);return s}}const YM=KM((t=>1/(1+Math.exp(-t)))),ZM=LM(Sr,(t=>1/(1+Math.exp(-t)))),JM={kernelName:Sr,backendName:\"cpu\",kernelFunc:ZM};function QM(t,e,n,r,s){if(\"linear\"===n)return OM({inputs:{x:e},backend:t});if(\"relu\"===n)return HM({inputs:{x:e},backend:t});if(\"elu\"===n)return FM({inputs:{x:e},backend:t});if(\"relu6\"===n)return qM({inputs:{x:e},backend:t});if(\"prelu\"===n)return WM({inputs:{x:e,alpha:r},backend:t});if(\"leakyrelu\"===n)return zM({inputs:{x:e},backend:t,attrs:{alpha:s}});if(\"sigmoid\"===n)return ZM({inputs:{x:e},backend:t});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}function tk(t){const{inputs:e,backend:n}=t,{real:r,imag:s}=e,i=n.data.get(r.dataId).values,a=n.data.get(s.dataId).values,o=n.makeTensorInfo(r.shape,\"complex64\");return n.data.get(o.dataId).complexTensorInfos={real:n.makeTensorInfo(r.shape,\"float32\",i),imag:n.makeTensorInfo(s.shape,\"float32\",a)},o}const ek={kernelName:Te,backendName:\"cpu\",kernelFunc:tk};function nk(t,e,n=\"float32\"){if(\"complex64\"===n)return tk({inputs:{real:nk(t,e,\"float32\"),imag:nk(t,e,\"float32\")},backend:t});const r=$t(at(e),n);return t.makeTensorInfo(e,n,r)}function rk(t){const{inputs:e,backend:n}=t,{input:r}=e,s=n.data.get(r.dataId).complexTensorInfos.real,i=n.data.get(s.dataId).values;return n.makeTensorInfo(s.shape,s.dtype,i)}const sk={kernelName:rr,backendName:\"cpu\",kernelFunc:rk};function ik(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{dtype:i}=r;if(\"complex64\"===i){if(\"complex64\"===s.dtype)return OM({inputs:{x:s},backend:n});const t=nk(n,s.shape,s.dtype),e=ik({inputs:{x:s},backend:n,attrs:{dtype:\"float32\"}}),r=tk({inputs:{real:e,imag:t},backend:n});return n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(e),r}if(\"complex64\"===s.dtype){const t=rk({inputs:{input:s},backend:n}),e=ik({inputs:{x:t},backend:n,attrs:{dtype:i}});return n.disposeIntermediateTensorInfo(t),e}if(!St(s.dtype,i)){const t=OM({inputs:{x:s},backend:n});return{dataId:t.dataId,shape:t.shape,dtype:i}}if(\"int32\"===i){const t=n.data.get(s.dataId).values,e=Int32Array.from(t);return n.makeTensorInfo(s.shape,\"int32\",e)}if(\"bool\"===i){const t=n.data.get(s.dataId).values,e=Cs([0],s.dtype),[r,i]=UM(((t,e)=>t!==e?1:0))(s.shape,[],t,e,\"bool\");return n.makeTensorInfo(i,\"bool\",r)}throw new Error(`Error in Cast: failed to cast ${s.dtype} to ${i}`)}const ak={kernelName:ve,backendName:\"cpu\",kernelFunc:ik};function ok(t,e,n,r){return null==n?({inputs:n,backend:s})=>{const{a:i,b:a}=n,o=s;NM([i,a],t);const l=o.data.get(i.dataId).values,u=o.data.get(a.dataId).values,c=\"string\"===i.dtype?pf(l):l,h=\"string\"===i.dtype?pf(u):u,d=r||i.dtype,[p,f]=e(i.shape,a.shape,c,h,d);return o.makeTensorInfo(f,d,p)}:({inputs:t,backend:s})=>{const{a:i,b:a}=t,o=s;if(\"complex64\"===i.dtype||\"complex64\"===a.dtype){const t=ik({inputs:{x:i},backend:o,attrs:{dtype:\"complex64\"}}),e=o.data.get(t.dataId),r=e.complexTensorInfos.real,s=e.complexTensorInfos.imag,l=o.data.get(r.dataId).values,u=o.data.get(s.dataId).values,c=ik({inputs:{x:a},backend:o,attrs:{dtype:\"complex64\"}}),h=o.data.get(c.dataId),d=h.complexTensorInfos.real,p=h.complexTensorInfos.imag,f=o.data.get(d.dataId).values,m=o.data.get(p.dataId).values,[g,y,x]=n(i.shape,a.shape,l,u,f,m),b=o.makeTensorInfo(x,\"float32\",g),v=o.makeTensorInfo(x,\"float32\",y),w=tk({inputs:{real:b,imag:v},backend:o});return o.disposeIntermediateTensorInfo(t),o.disposeIntermediateTensorInfo(c),o.disposeIntermediateTensorInfo(b),o.disposeIntermediateTensorInfo(v),w}{const t=o.data.get(i.dataId).values,n=o.data.get(a.dataId).values,s=r||i.dtype,[l,u]=e(i.shape,a.shape,t,n,s);return o.makeTensorInfo(u,s,l)}}}function lk(t){return(e,n,r,s,i,a)=>{const o=kl(e,n),l=at(o),u=o.length,c=Rt(o),h=xt(\"float32\",l),d=xt(\"float32\",l),p=_l(e,o),f=_l(n,o),m=qp(r,s),g=qp(i,a),y=e.length,x=Rt(e),b=n.length,v=Rt(n);if(p.length+f.length===0)for(let e=0;e<h.length;e++){const n=e%m.length,r=e%g.length,s=t(m[2*n],m[2*n+1],g[2*r],g[2*r+1]);h[e]=s.real,d[e]=s.imag}else for(let e=0;e<h.length;e++){const n=Bt(e,u,c),r=n.slice(-y);p.forEach((t=>r[t]=0));const s=zt(r,y,x),i=n.slice(-b);f.forEach((t=>i[t]=0));const a=zt(i,b,v),o=t(m[2*s],m[2*s+1],g[2*a],g[2*a+1]);h[e]=o.real,d[e]=o.imag}return[h,d,o]}}const uk=UM(((t,e)=>t+e)),ck=lk(((t,e,n,r)=>({real:t+n,imag:e+r}))),hk=ok(te,uk,ck),dk={kernelName:te,backendName:\"cpu\",kernelFunc:hk};function pk(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{shape:i}=r,a=at(s.shape),o=mt(i,a),l=at(o);nt(a===l,(()=>`The new shape (${o}) has ${l} elements and the old shape (${s.shape}) has ${a} elements. The new shape and old shape must have the same number of elements.`)),n.incRef(s.dataId);const u=n.data.get(s.dataId);if(null!=u.complexTensorInfos){const t=u.complexTensorInfos.real,e=u.complexTensorInfos.imag;t.shape=o,e.shape=o}return{dataId:s.dataId,shape:o,dtype:s.dtype}}const fk={kernelName:ar,backendName:\"cpu\",kernelFunc:pk};function mk(t){const{inputs:e,backend:n,attrs:r}=t,{a:s,b:i}=e,{transposeA:a,transposeB:o}=r;NM([s,i],\"matMul\");const l=s.shape.length,u=i.shape.length,c=a?s.shape[l-2]:s.shape[l-1],h=o?i.shape[u-1]:i.shape[u-2],d=a?s.shape[l-1]:s.shape[l-2],p=o?i.shape[u-2]:i.shape[u-1],f=s.shape.slice(0,-2),m=i.shape.slice(0,-2),g=at(f),y=at(m);nt(l>=2&&u>=2&&(g===y||1===g||1===y),(()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${f}) and (${m}).`));const x=(g>y?s.shape.slice(0,-2):i.shape.slice(0,-2)).concat([d,p]);nt(c===h,(()=>`Error in matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${s.shape} and ${i.shape} and transposeA=${a} and transposeB=${o} must match.`));const b=o?[y,p,h]:[y,h,p],v=pk({inputs:{x:s},backend:n,attrs:{shape:a?[g,c,d]:[g,d,c]}}),w=pk({inputs:{x:i},backend:n,attrs:{shape:b}}),S=a?v.shape[1]:v.shape[2],T=a?v.shape[2]:v.shape[1],_=o?w.shape[1]:w.shape[2],M=Math.max(g,y),k=n.data.get(v.dataId).values,E=n.data.get(w.dataId).values,I=Rt(v.shape),C=Rt(w.shape),[N,A,R]=a?[I[0],1,I[1]]:[I[0],I[1],1],[L,D,F]=o?[1,C[1],C[0]]:[C[1],1,C[0]],$=T*_,O=wa([M,T,_],v.dtype),P=O.values,z=n.blockSize;for(let t=0;t<M;t++)for(let e=0;e<T;e+=z)for(let n=0;n<_;n+=z)for(let r=0;r<S;r+=z){const s=Math.min(e+z,T),i=Math.min(n+z,_),a=Math.min(r+z,S);for(let o=e;o<s;o++)for(let e=n;e<i;e++){let n=0;for(let s=r;s<a;s++){const r=Math.min(t,g-1)*N,i=Math.min(t,y-1)*F;n+=k[r+o*A+s*R]*E[s*L+e*D+i]}P[t*$+(o*_+e)]+=n}}return n.disposeIntermediateTensorInfo(v),n.disposeIntermediateTensorInfo(w),n.makeTensorInfo(x,O.dtype,O.values)}const gk={kernelName:me,backendName:\"cpu\",kernelFunc:mk},yk={kernelName:ts,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{a:s,b:i,bias:a,preluActivationWeights:o}=e,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=r;let d,p,f;const m=[];d=mk({inputs:{a:s,b:i},attrs:{transposeA:l,transposeB:u},backend:n}),a&&(p=hk({inputs:{a:d,b:a},backend:n}),m.push(d),d=p),c&&(f=QM(n,d,c,o,h),m.push(d),d=f);for(const t of m)n.disposeIntermediateTensorInfo(t);return d}};function xk(t){const e=new Float32Array(t.length);for(let n=0;n<t.length;++n)e[n]=Math.abs(t[n]);return e}const bk={kernelName:Zt,backendName:\"cpu\",kernelFunc:t=>{const{x:e}=t.inputs,n=t.backend;NM(e,\"abs\");let r=new Float32Array(at(e.shape));return r=xk(n.data.get(e.dataId).values),n.makeOutput(r,e.shape,\"float32\")}},vk=LM(Jt,(t=>Math.acos(t))),wk={kernelName:Jt,backendName:\"cpu\",kernelFunc:vk},Sk=LM(Qt,(t=>Math.acosh(t))),Tk={kernelName:Qt,backendName:\"cpu\",kernelFunc:Sk},_k={kernelName:ee,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n}=t,r=e;NM(e,\"addN\");const s=r.map((t=>n.data.get(t.dataId).values)),i=wa(r[0].shape,r[0].dtype),a=i.values;for(let t=0;t<r.length;t++){const e=s[t];for(let t=0;t<a.length;t++)a[t]+=e[t]}return n.makeTensorInfo(i.shape,i.dtype,i.values)}};function Mk(t,e,n,r,s){const i=e.length,a=at(e),o=Rt(e),l=Rt(s),u=xt(n,at(s));for(let e=0;e<a;++e){const n=Bt(e,i,o),s=new Array(n.length);for(let t=0;t<s.length;t++)s[t]=n[r[t]];u[zt(s,i,l)]=t[e]}return u}function kk(t){const{inputs:e,attrs:n,backend:r}=t,{x:s}=e,{perm:i}=n;NM(s,\"transpose\");const a=s.shape.length,o=new Array(a);for(let t=0;t<o.length;t++)o[t]=s.shape[i[t]];const l=Mk(r.data.get(s.dataId).values,s.shape,s.dtype,i,o);return{dataId:r.write(l,o,s.dtype),shape:o,dtype:s.dtype}}const Ek={kernelName:jr,backendName:\"cpu\",kernelFunc:kk},Ik={kernelName:ne,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{axis:i,keepDims:a}=r;NM(s,\"all\");const o=gt(i,s.shape);let l=o;const u=_c(l,s.shape.length);let c=s;null!=u&&(c=kk({inputs:{x:s},backend:n,attrs:{perm:u}}),l=kc(l.length,s.shape.length)),Tc(\"all\",l,c.shape.length);const[h,d]=wc(c.shape,l),p=at(d),f=$t(at(h),c.dtype),m=n.data.get(c.dataId).values;for(let t=0;t<f.length;++t){const e=t*p;let n=m[e];for(let t=0;t<p;++t){const r=m[e+t];n=n&&r}f[t]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(h,c.dtype,f);if(a){const t=pk({inputs:{x:g},backend:n,attrs:{shape:Sc(h,o)}});return n.disposeIntermediateTensorInfo(g),t}return g}},Ck={kernelName:re,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{axis:i,keepDims:a}=r;NM(s,\"any\");const o=gt(i,s.shape);let l=o;const u=_c(l,s.shape.length);let c=s;null!=u&&(c=kk({inputs:{x:s},backend:n,attrs:{perm:u}}),l=kc(l.length,s.shape.length)),Tc(\"any\",l,c.shape.length);const[h,d]=wc(c.shape,l),p=at(d),f=$t(at(h),c.dtype),m=n.data.get(c.dataId).values;for(let t=0;t<f.length;++t){const e=t*p;let n=m[e];for(let t=0;t<p;++t){const r=m[e+t];n=n||r}f[t]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(h,c.dtype,f);if(a){const t=pk({inputs:{x:g},backend:n,attrs:{shape:Sc(h,o)}});return n.disposeIntermediateTensorInfo(g),t}return g}},Nk={kernelName:se,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{axis:i}=r;NM(s,\"argMax\");let a=gt(i,s.shape);const o=_c(a,s.shape.length);let l=s;const u=[];null!=o&&(l=kk({inputs:{x:s},backend:n,attrs:{perm:o}}),u.push(l),a=kc(a.length,l.shape.length)),a=[a[0]],Tc(\"argMax\",a,l.shape.length);const[c,h]=wc(l.shape,a),d=$t(at(c),\"int32\"),p=at(h),f=n.data.get(l.dataId).values;for(let t=0;t<d.length;++t){const e=t*p;let n=f[e],r=0;for(let t=0;t<p;++t){const s=f[e+t];s>n&&(n=s,r=t)}d[t]=r}return u.forEach((t=>n.disposeIntermediateTensorInfo(t))),n.makeTensorInfo(c,\"int32\",d)}},Ak={kernelName:ie,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{axis:i}=r;NM(s,\"argMin\");let a=gt(i,s.shape);const o=_c(a,s.shape.length);let l=s;const u=[];null!=o&&(l=kk({inputs:{x:s},backend:n,attrs:{perm:o}}),u.push(l),a=kc(a.length,l.shape.length)),a=[a[0]],Tc(\"argMin\",a,l.shape.length);const[c,h]=wc(l.shape,a),d=$t(at(c),\"int32\"),p=at(h),f=n.data.get(l.dataId).values;for(let t=0;t<d.length;++t){const e=t*p;let n=f[e],r=0;for(let t=0;t<p;++t){const s=f[e+t];s<n&&(n=s,r=t)}d[t]=r}return u.forEach((t=>n.disposeIntermediateTensorInfo(t))),n.makeTensorInfo(c,\"int32\",d)}},Rk=LM(ae,(t=>Math.asin(t))),Lk={kernelName:ae,backendName:\"cpu\",kernelFunc:Rk},Dk=LM(oe,(t=>Math.asinh(t))),Fk={kernelName:oe,backendName:\"cpu\",kernelFunc:Dk},$k=LM(le,(t=>Math.atan(t))),Ok={kernelName:le,backendName:\"cpu\",kernelFunc:$k},Pk=UM(((t,e)=>Math.atan2(t,e))),zk=ok(ce,Pk),Bk={kernelName:ce,backendName:\"cpu\",kernelFunc:zk},Uk=LM(ue,(t=>Math.atanh(t))),Vk={kernelName:ue,backendName:\"cpu\",kernelFunc:Uk};function Wk(t,e,n,r,s,i){const a=s.strideHeight,o=s.strideWidth,l=s.dilationHeight,u=s.dilationWidth,c=s.effectiveFilterHeight,h=s.effectiveFilterWidth,d=s.padInfo.top,p=s.padInfo.left,f=\"max\"===i?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=wa(s.outShape,n),g=m.values,y=s.outShape[1]*s.outShape[2]*s.outShape[3],x=s.outShape[2]*s.outShape[3],b=s.outShape[3];for(let e=0;e<s.batchSize;++e){const n=e*y,m=e*r[0];for(let e=0;e<s.inChannels;++e)for(let y=0;y<s.outHeight;++y){const v=y*a-d,w=Math.max(0,v),S=Math.min(s.inHeight,c+v),T=n+y*x;for(let n=0;n<s.outWidth;++n){const a=n*o-p,c=Math.max(0,a),d=Math.min(s.inWidth,h+a);let y=f,x=0,v=0;for(let n=w;n<S;n+=l){const s=m+n*r[1];for(let n=c;n<d;n+=u){const a=t[s+n*r[2]+e];\"max\"===i&&a>y?y=a:\"avg\"===i&&(x+=a,v++)}if(isNaN(y))break}g[T+n*b+e]=\"avg\"===i?x/v:y}}}return m}function Gk(t,e,n,r,s=!1,i=!1){const a=wa(r.outShape,\"int32\"),o=r.strideHeight,l=r.strideWidth,u=r.dilationHeight,c=r.dilationWidth,h=r.effectiveFilterHeight,d=r.effectiveFilterWidth,p=r.padInfo.top,f=r.padInfo.left,m=wa(e,n,t);for(let t=0;t<r.batchSize;++t)for(let e=0;e<r.inChannels;++e)for(let n=0;n<r.outHeight;++n){const g=n*o-p;let y=g;for(;y<0;)y+=u;const x=Math.min(r.inHeight,h+g);for(let o=0;o<r.outWidth;++o){const h=o*l-f;let p=h;for(;p<0;)p+=c;const b=Math.min(r.inWidth,d+h);let v=Number.NEGATIVE_INFINITY,w=-1;for(let n=y;n<x;n+=u){const a=n-g;for(let o=p;o<b;o+=c){const l=o-h,u=m.get(t,n,o,e);u>v&&(v=u,w=s?i?((t*r.inHeight+n)*r.inWidth+o)*r.inChannels+e:(n*r.inWidth+o)*r.inChannels+e:a*d+l)}}a.set(w,t,n,o,e)}}return a}function Hk(t,e,n,r,s,i){const a=s.strideDepth,o=s.strideHeight,l=s.strideWidth,u=s.dilationDepth,c=s.dilationHeight,h=s.dilationWidth,d=s.effectiveFilterDepth,p=s.effectiveFilterHeight,f=s.effectiveFilterWidth,m=s.padInfo.front,g=s.padInfo.top,y=s.padInfo.left,x=\"max\"===i?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,b=wa(s.outShape,n),v=b.values,w=s.outShape[1]*s.outShape[2]*s.outShape[3]*s.outShape[4],S=s.outShape[2]*s.outShape[3]*s.outShape[4],T=s.outShape[3]*s.outShape[4],_=s.outShape[4];for(let e=0;e<s.batchSize;++e){const n=e*w,b=e*r[0];for(let e=0;e<s.inChannels;++e)for(let w=0;w<s.outDepth;++w){const M=w*a-m;let k=M;for(;k<0;)k+=u;const E=Math.min(s.inDepth,d+M),I=n+w*S;for(let n=0;n<s.outHeight;++n){const a=n*o-g;let d=a;for(;d<0;)d+=c;const m=Math.min(s.inHeight,p+a),w=I+n*T;for(let n=0;n<s.outWidth;++n){const a=n*l-y;let o=a;for(;o<0;)o+=h;const p=Math.min(s.inWidth,f+a),g=w+n*_;let S=x,T=0,M=0;for(let n=k;n<E;n+=u){const s=b+n*r[1];for(let n=d;n<m;n+=c){const a=s+n*r[2];for(let n=o;n<p;n+=h){const s=t[a+n*r[3]+e];if(\"max\"===i&&s>S?S=s:\"avg\"===i&&(T+=s,M++),isNaN(S))break}if(isNaN(S))break}if(isNaN(S))break}v[g+e]=\"avg\"===i?T/M:S}}}}return b}const jk={kernelName:he,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e;NM(s,\"avgPool\");const{filterSize:i,strides:a,pad:o,dimRoundingMode:l}=r;nt(eu(a,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${a} and dilations '1'`));const u=Hl(s.shape,i,a,1,o,l);let c;if(1===u.filterWidth&&1===u.filterHeight&&lt(u.inShape,u.outShape))c=OM({inputs:{x:s},backend:n});else{const t=n.data.get(s.dataId).values,e=Rt(s.shape),r=Wk(t,s.shape,s.dtype,e,u,\"avg\");c=n.makeTensorInfo(u.outShape,s.dtype,r.values)}return c}},qk={kernelName:pe,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{filterSize:i,strides:a,pad:o,dimRoundingMode:l,dataFormat:u}=r;NM(s,\"avgPool3d\");const c=jl(s.shape,i,a,1,o,l,u),h=Hk(n.data.get(s.dataId).values,s.shape,s.dtype,Rt(s.shape),c,\"avg\");return n.makeTensorInfo(h.shape,\"float32\",h.values)}},Xk={kernelName:fe,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{dy:s,input:i}=e,{filterSize:a,strides:o,pad:l,dimRoundingMode:u}=r;NM([s,i],\"avgPool3DGrad\");const c=jl(i.shape,a,o,1,l,u),h=c.strideDepth,d=c.strideHeight,p=c.strideWidth,f=c.filterDepth,m=c.filterHeight,g=c.filterWidth,y=c.dilationDepth,x=c.dilationHeight,b=c.dilationWidth,v=c.effectiveFilterDepth,w=c.effectiveFilterHeight,S=c.effectiveFilterWidth,T=v-1-c.padInfo.front,_=S-1-c.padInfo.left,M=w-1-c.padInfo.top,k=wa(i.shape,\"float32\"),E=1/(f*m*g),I=n.bufferSync(s);for(let t=0;t<c.batchSize;++t)for(let e=0;e<c.inChannels;++e)for(let n=0;n<c.inDepth;++n)for(let r=0;r<c.inHeight;++r)for(let s=0;s<c.inWidth;++s){const i=n-T,a=r-M,o=s-_;let l=0;for(let n=0;n<v;n+=y){const r=(i+n)/h;if(!(r<0||r>=c.outDepth||Math.floor(r)!==r))for(let n=0;n<w;n+=x){const s=(a+n)/d;if(!(s<0||s>=c.outHeight||Math.floor(s)!==s))for(let n=0;n<S;n+=b){const i=(o+n)/p;i<0||i>=c.outWidth||Math.floor(i)!==i||(l+=I.get(t,r,s,i,e))}}}k.set(l*E,t,n,r,s,e)}return n.makeTensorInfo(k.shape,k.dtype,k.values)}},Kk={kernelName:de,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{dy:s,input:i}=e,a=i;NM([s,i],\"avgPoolGrad\");const{filterSize:o,strides:l,pad:u}=r,c=Hl(a.shape,o,l,1,u),h=c.strideHeight,d=c.strideWidth,p=c.filterHeight,f=c.filterWidth,m=c.dilationHeight,g=c.dilationWidth,y=c.effectiveFilterHeight,x=c.effectiveFilterWidth,b=x-1-c.padInfo.left,v=y-1-c.padInfo.top,w=wa(a.shape,\"float32\"),S=1/(p*f),T=n.data.get(s.dataId).values,_=wa(s.shape,\"float32\",T);for(let t=0;t<c.batchSize;++t)for(let e=0;e<c.inChannels;++e)for(let n=0;n<c.inHeight;++n)for(let r=0;r<c.inWidth;++r){const s=n-v,i=r-b;let a=0;for(let n=0;n<y;n+=m){const r=(s+n)/h;if(!(r<0||r>=c.outHeight||Math.floor(r)!==r))for(let n=0;n<x;n+=g){const s=(i+n)/d;s<0||s>=c.outWidth||Math.floor(s)!==s||(a+=_.get(t,r,s,e))}}w.set(a*S,t,n,r,e)}return n.makeTensorInfo(w.shape,w.dtype,w.values)}},Yk={kernelName:an,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,scale:i,offset:a,mean:o,variance:l}=e;nt(o.shape.length===l.shape.length,(()=>\"Batch normalization gradient requires mean and variance to have equal ranks.\")),nt(null==a||o.shape.length===a.shape.length,(()=>\"Batch normalization gradient requires mean and offset to have equal ranks.\")),nt(null==i||o.shape.length===i.shape.length,(()=>\"Batch normalization gradient requires mean and scale to have equal ranks.\")),NM([s,o,l,i,a],\"batchNorm\");let{varianceEpsilon:u}=r;null==u&&(u=.001);const c=n.data.get(s.dataId).values,h=n.data.get(o.dataId).values,d=n.data.get(l.dataId).values,p=i?n.data.get(i.dataId).values:new Float32Array([1]),f=a?n.data.get(a.dataId).values:new Float32Array([0]),m=new Float32Array(c.length),g=f.length,y=p.length,x=d.length,b=h.length;let v=0,w=0,S=0,T=0;for(let t=0;t<c.length;++t)m[t]=f[v++]+(c[t]-h[w++])*p[S++]/Math.sqrt(d[T++]+u),v>=g&&(v=0),w>=b&&(w=0),S>=y&&(S=0),T>=x&&(T=0);return n.makeTensorInfo(s.shape,s.dtype,m)}};function Zk(t,e,n,r,s){const i=mo(r,e,n),a=at(n),o=Rt(r);if(i){const n=go(e,o);return\"string\"===s?t.slice(n,n+a):t.subarray(n,n+a)}const l=wa(r,s,\"string\"===s?pf(t):t),u=wa(n,s);for(let t=0;t<u.size;++t){const n=u.indexToLoc(t),r=n.map(((t,n)=>t+e[n]));u.set(l.get(...r),...n)}return\"string\"===s?ff(u.values):u.values}function Jk(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{begin:i,size:a}=r;NM(s,\"slice\");const[o,l]=yo(s,i,a);no(s,o,l);const u=Zk(n.data.get(s.dataId).values,o,l,s.shape,s.dtype);return n.makeTensorInfo(l,s.dtype,u)}const Qk={kernelName:xr,backendName:\"cpu\",kernelFunc:Jk},tE={kernelName:ge,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{blockShape:i,crops:a}=r;NM([s],\"batchToSpaceND\");const o=i.reduce(((t,e)=>t*e)),l=Dp(s.shape,i,o),u=Fp(l.length,i.length),c=$p(s.shape,i,o),h=Op(a,i.length),d=Pp(c,a,i.length),p=pk({inputs:{x:s},backend:n,attrs:{shape:l}}),f=kk({inputs:{x:p},backend:n,attrs:{perm:u}}),m=pk({inputs:{x:f},backend:n,attrs:{shape:c}}),g=Jk({inputs:{x:m},backend:n,attrs:{begin:h,size:d}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}};function eE(t,e,n,r,s){const i=at(r),a=$t(s,n);for(let n=0;n<t.length;n++){const r=t[n];if(r<0)throw new Error(\"Input x must be non-negative!\");r>=s||(a[r]+=i>0?e[n]:1)}return a}function nE(t,e,n,r=!1){const s=t.shape[0],i=t.shape[1],a=wa([s,n],e.dtype);for(let o=0;o<s;o++)for(let s=0;s<i;s++){const i=t.get(o,s);if(i<0)throw new Error(\"Input x must be non-negative!\");i>=n||(r?a.set(1,o,i):e.size>0?a.set(a.get(o,i)+e.get(o,s),o,i):a.set(a.get(o,i)+1,o,i))}return a}const rE={kernelName:ye,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,weights:i}=e,{size:a}=r,o=eE(n.data.get(s.dataId).values,n.data.get(i.dataId).values,i.dtype,i.shape,a);return n.makeTensorInfo([a],i.dtype,o)}},sE={kernelName:be,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n}=t,{s0:r,s1:s}=e,i=n.data.get(r.dataId).values,a=n.data.get(s.dataId).values,o=kl(Array.from(i),Array.from(a));return n.makeTensorInfo([o.length],\"int32\",Int32Array.from(o))}},iE=KM((t=>Math.ceil(t))),aE=DM(we,iE),oE={kernelName:we,backendName:\"cpu\",kernelFunc:aE},lE=LM(Se,((t,e)=>{const n=e;return t>n.clipValueMax?n.clipValueMax:t<n.clipValueMin?n.clipValueMin:t})),uE={kernelName:Se,backendName:\"cpu\",kernelFunc:lE},cE={kernelName:_e,backendName:\"cpu\",kernelFunc:t=>{const{x:e}=t.inputs,n=t.backend,r=new Float32Array(at(e.shape)),s=n.data.get(e.dataId),i=s.complexTensorInfos.real,a=s.complexTensorInfos.imag,o=n.data.get(i.dataId).values,l=n.data.get(a.dataId).values;for(let t=0;t<o.length;t++){const e=o[t],n=l[t];r[t]=Math.hypot(e,n)}return n.makeOutput(r,e.shape,\"float32\")}};function hE(t,e,n,r){const s=bt(n,at(e));if(r&&\"string\"!==n){let e=0;t.forEach((t=>{const n=at(t.shape);s.set(t.vals,e),e+=n}))}else{let r=0;t.forEach((t=>{const i=\"string\"===n?pf(t.vals):t.vals;let a=0;for(let n=0;n<t.shape[0];++n){const o=n*e[1]+r;for(let e=0;e<t.shape[1];++e)s[o+e]=i[a++]}r+=t.shape[1]}))}return s}function dE(t){const{inputs:e,backend:n}=t,{input:r}=e,s=n.data.get(r.dataId).complexTensorInfos.imag,i=n.data.get(s.dataId).values;return n.makeTensorInfo(s.shape,s.dtype,i)}const pE={kernelName:pn,backendName:\"cpu\",kernelFunc:dE};function fE(t){const{inputs:e,backend:n,attrs:r}=t,{axis:s}=r,i=gt(s,e[0].shape)[0];let a=Np(e.map((t=>t.shape)),i);if(0===at(a))return n.makeTensorInfo(a,e[0].dtype,[]);const o=e.filter((t=>at(t.shape)>0));if(1===o.length)return OM({inputs:{x:o[0]},backend:n});if(Cp(o.map((t=>t.shape)),i),\"complex64\"===o[0].dtype){const t=o.map((t=>rk({inputs:{input:t},backend:n}))),e=o.map((t=>dE({inputs:{input:t},backend:n}))),r=fE({inputs:t,backend:n,attrs:{axis:i}}),s=fE({inputs:e,backend:n,attrs:{axis:i}}),a=tk({inputs:{real:r,imag:s},backend:n});return t.forEach((t=>n.disposeIntermediateTensorInfo(t))),e.forEach((t=>n.disposeIntermediateTensorInfo(t))),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(s),a}const l=o.map((t=>{const e=at(t.shape.slice(i));return pk({inputs:{x:t},backend:n,attrs:{shape:[-1,e]}})})),u=l.map((t=>({vals:n.data.get(t.dataId).values,shape:t.shape})));a=Np(l.map((t=>t.shape)),1);const c=1===l[0].shape[0],h=hE(u,a,e[0].dtype,c),d=Np(o.map((t=>t.shape)),i),p=n.makeTensorInfo(d,e[0].dtype,h);return l.forEach((t=>n.disposeIntermediateTensorInfo(t))),p}const mE={kernelName:Me,backendName:\"cpu\",kernelFunc:fE};function gE(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,filter:i}=e,{strides:a,pad:o,dataFormat:l,dilations:u,dimRoundingMode:c}=r;NM([s,i],\"conv2d\");const h=nu(l),d=ql(s.shape,i.shape,a,u,o,c,!1,h),p=d.filterHeight,f=d.filterWidth,m=d.dilationHeight,g=d.dilationWidth,y=d.padInfo.left,x=d.padInfo.top,b=\"channelsLast\"===d.dataFormat,v=new Vs(d.outShape,s.dtype),w=Rt(s.shape),S=Rt(i.shape),T=w[0],_=b?w[1]:w[2],M=b?w[2]:1,k=b?1:w[1],E=v.strides[0],I=b?v.strides[1]:v.strides[2],C=b?v.strides[2]:1,N=b?1:v.strides[1],A=n.data.get(s.dataId).values,R=n.data.get(i.dataId).values,L=v.values;for(let t=0;t<d.batchSize;++t){const e=t*T,n=t*E;for(let t=0;t<d.outHeight;++t){const r=n+t*I,s=t*d.strideHeight-x;for(let t=0;t<p;++t){const n=s+t*m;if(n<0||n>=d.inHeight)continue;const i=t*S[0],a=e+n*_;for(let t=0;t<d.outWidth;++t){const e=r+t*C,n=t*d.strideWidth-y;for(let t=0;t<f;++t){const r=n+t*g;if(r<0||r>=d.inWidth)continue;const s=a+r*M;let o=i+t*S[1];for(let t=0;t<d.inChannels;++t){const n=A[s+t*k];for(let t=0;t<d.outChannels;++t)L[e+t*N]+=n*R[o+t];o+=d.outChannels}}}}}}return n.makeTensorInfo(v.shape,v.dtype,L)}const yE={kernelName:ke,backendName:\"cpu\",kernelFunc:gE},xE={kernelName:Ee,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,dy:i}=e,{strides:a,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:c}=r;NM([s,i],\"conv2dBackpropFilter\");const h=nu(l),d=ql(s.shape,c,a,1,o,u,!1,h),{strideHeight:p,strideWidth:f,filterHeight:m,filterWidth:g}=d,y=\"channelsLast\"===d.dataFormat,x=new Vs(d.filterShape,\"float32\"),b=d.padInfo.left,v=d.padInfo.top,w=n.data.get(s.dataId).values,S=n.data.get(i.dataId).values,T=new Vs(s.shape,s.dtype,w),_=new Vs(i.shape,i.dtype,S);for(let t=0;t<m;++t){const e=Math.max(0,Math.ceil((v-t)/p)),n=Math.min(d.outHeight,(d.inHeight+v-t)/p);for(let r=0;r<g;++r){const s=Math.max(0,Math.ceil((b-r)/f)),i=Math.min(d.outWidth,(d.inWidth+b-r)/f);for(let a=0;a<d.inChannels;++a)for(let o=0;o<d.outChannels;++o){let l=0;for(let u=0;u<d.batchSize;++u)for(let c=e;c<n;++c){const e=t+c*p-v;for(let t=s;t<i;++t){const n=r+t*f-b;l+=y?T.get(u,e,n,a)*_.get(u,c,t,o):T.get(u,a,e,n)*_.get(u,o,c,t)}}x.set(l,t,r,a,o)}}}return n.makeTensorInfo(x.shape,x.dtype,x.values)}},bE={kernelName:Ie,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{dy:s,filter:i}=e,{inputShape:a,strides:o,pad:l,dataFormat:u,dimRoundingMode:c}=r;NM([s,i],\"conv2dBackpropInput\");const h=Rt(i.shape),d=Rt(s.shape);let p=nu(u);const f=ql(a,i.shape,o,1,l,c,!1,p),m=new Vs(f.inShape,\"float32\"),g=m.values,y=n.data.get(s.dataId).values,x=n.data.get(i.dataId).values,[b,v,w]=h,{batchSize:S,filterHeight:T,filterWidth:_,inChannels:M,inHeight:k,inWidth:E,outChannels:I,outHeight:C,outWidth:N,strideHeight:A,strideWidth:R}=f;p=f.dataFormat;const L=T-1-f.padInfo.top,D=_-1-f.padInfo.left,F=\"channelsLast\"===p,$=m.strides[0],O=F?m.strides[1]:m.strides[2],P=F?m.strides[2]:1,z=F?1:m.strides[1],B=d[0],U=F?d[1]:d[2],V=F?d[2]:1,W=F?1:d[1];for(let t=0;t<S;++t)for(let e=0;e<M;++e)for(let n=0;n<k;++n){const r=n-L,s=Math.max(0,Math.ceil(r/A)),i=Math.min(C,(T+r)/A);for(let a=0;a<E;++a){const o=a-D,l=Math.max(0,Math.ceil(o/R)),u=Math.min(N,(_+o)/R);let c=0;for(let n=s;n<i;++n){const s=n*A-r;for(let r=l;r<u;++r){const i=B*t+U*n+V*r,a=b*(T-1-s)+v*(_-1-(r*R-o))+w*e;for(let t=0;t<I;++t)c+=y[i+W*t]*x[a+t]}}g[$*t+O*n+P*a+z*e]=c}}return n.makeTensorInfo(m.shape,m.dtype,m.values)}},vE={kernelName:Ce,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,filter:i}=e,{strides:a,pad:o,dilations:l}=r;NM([s,i],\"conv3d\");const u=Xl(s.shape,i.shape,a,l,o),{filterDepth:c,filterHeight:h,filterWidth:d,dilationDepth:p,dilationHeight:f,dilationWidth:m,padInfo:g}=u,y=g.front,x=g.left,b=g.top,v=new Vs(u.outShape,s.dtype),w=n.data.get(s.dataId).values,S=n.data.get(i.dataId).values,T=v.values,_=Rt(s.shape),M=Rt(i.shape);for(let t=0;t<u.batchSize;++t){const e=t*_[0],n=t*v.strides[0];for(let t=0;t<u.outDepth;++t){const r=n+t*v.strides[1],s=t*u.strideDepth-y;for(let t=0;t<c;++t){const n=s+t*p;if(n<0||n>=u.inDepth)continue;const i=t*M[0],a=e+n*_[1];for(let t=0;t<u.outHeight;++t){const e=r+t*v.strides[2],n=t*u.strideHeight-b;for(let t=0;t<h;++t){const r=n+t*f;if(r<0||r>=u.inHeight)continue;const s=i+t*M[1],o=a+r*_[2];for(let t=0;t<u.outWidth;++t){const n=e+t*u.outChannels,r=t*u.strideWidth-x;for(let t=0;t<d;++t){const e=r+t*m;if(e<0||e>=u.inWidth)continue;const i=s+t*M[2],a=o+e*u.inChannels;let l=i;for(let t=0;t<u.inChannels;++t){const e=w[a+t];for(let t=0;t<u.outChannels;++t)T[n+t]+=e*S[l+t];l+=u.outChannels}}}}}}}}return n.makeTensorInfo(v.shape,v.dtype,v.values)}},wE={kernelName:Ne,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,dy:i}=e,{strides:a,pad:o,filterShape:l}=r;NM([s,i],\"conv3dBackpropFilterV2\");const u=Rt(s.shape),c=Rt(i.shape),h=Xl(s.shape,l,a,1,o),d=h.strideDepth,p=h.strideHeight,f=h.strideWidth,m=h.filterDepth,g=h.filterHeight,y=h.filterWidth,x=new Vs(h.filterShape,\"float32\"),b=x.values,[v,w,S,T]=x.strides,_=n.data.get(i.dataId).values,[M,k,E,I]=c,C=n.data.get(s.dataId).values,[N,A,R,L]=u,D=h.padInfo.front,F=h.padInfo.left,$=h.padInfo.top;for(let t=0;t<m;++t){const e=Math.max(0,Math.ceil((D-t)/d)),n=Math.min(h.outDepth,(h.inDepth+D-t)/d),r=t*v;for(let s=0;s<g;++s){const i=Math.max(0,Math.ceil(($-s)/p)),a=Math.min(h.outHeight,(h.inHeight+$-s)/p),o=s*w+r;for(let r=0;r<y;++r){const l=Math.max(0,Math.ceil((F-r)/f)),u=Math.min(h.outWidth,(h.inWidth+F-r)/f),c=r*S+o;for(let o=0;o<h.inChannels;++o){const m=o*T+c;for(let c=0;c<h.outChannels;++c){let g=0;for(let m=0;m<h.batchSize;++m){const h=m*N,y=m*M;for(let m=e;m<n;++m){const e=(t+m*d-D)*A+h,n=m*k+y;for(let t=i;t<a;++t){const i=(s+t*p-$)*R+e,a=t*E+n;for(let t=l;t<u;++t){const e=t*I+a;g+=C[(r+t*f-F)*L+i+o]*_[e+c]}}}}b[m+c]=g}}}}}return n.makeTensorInfo(x.shape,x.dtype,x.values)}},SE={kernelName:Ae,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{dy:s,filter:i}=e,{pad:a,strides:o,inputShape:l}=r;NM([s],\"conv3dBackpropInputV2\");const u=Rt(s.shape),c=Rt(i.shape),h=Xl(l,i.shape,o,1,a),d=new Vs(h.inShape,\"float32\"),p=d.values,[f,m,g,y]=d.strides,x=n.data.get(s.dataId).values,[b,v,w,S]=u,T=n.data.get(i.dataId).values,[_,M,k,E]=c,{batchSize:I,filterDepth:C,filterHeight:N,filterWidth:A,inChannels:R,inDepth:L,inHeight:D,inWidth:F,outChannels:$,outDepth:O,outHeight:P,outWidth:z,strideDepth:B,strideHeight:U,strideWidth:V}=h,W=C-1-h.padInfo.front,G=N-1-h.padInfo.top,H=A-1-h.padInfo.left;for(let t=0;t<I;++t)for(let e=0;e<R;++e)for(let n=0;n<L;++n){const r=n-W,s=Math.max(0,Math.ceil(r/B)),i=Math.min(O,(C+r)/B);for(let a=0;a<D;++a){const o=a-G,l=Math.max(0,Math.ceil(o/U)),u=Math.min(P,(N+o)/U);for(let c=0;c<F;++c){const h=c-H,d=Math.max(0,Math.ceil(h/V)),I=Math.min(z,(A+h)/V);let R=0;for(let n=s;n<i;++n){const s=n*B-r;for(let r=l;r<u;++r){const i=r*U-o;for(let a=d;a<I;++a){const o=b*t+v*n+w*r+S*a,l=_*(C-1-s)+M*(N-1-i)+k*(A-1-(a*V-h))+E*e;for(let t=0;t<$;++t)R+=x[o+t]*T[l+t]}}}p[f*t+m*n+g*a+y*c+e]=R}}}return n.makeTensorInfo(d.shape,d.dtype,d.values)}},TE=LM(Re,(t=>Math.cos(t))),_E={kernelName:Re,backendName:\"cpu\",kernelFunc:TE},ME=LM(Le,(t=>Math.cosh(t))),kE={kernelName:Le,backendName:\"cpu\",kernelFunc:ME},EE={kernelName:Fe,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{image:s,boxes:i,boxInd:a}=e,{cropSize:o,method:l,extrapolationValue:u}=r,[c,h,d,p]=s.shape,f=i.shape[0],[m,g]=o,y=wa([f,m,g,p],\"float32\"),x=n.data.get(i.dataId).values,b=n.data.get(a.dataId).values,v=n.data.get(s.dataId).values,w=Rt(s.shape),S=Rt(y.shape);for(let t=0;t<f;t++){const e=4*t,n=x[e],r=x[e+1],s=x[e+2],i=x[e+3],a=b[t];if(a>=c)continue;const o=m>1?(s-n)*(h-1)/(m-1):0,f=g>1?(i-r)*(d-1)/(g-1):0;for(let e=0;e<m;e++){const c=m>1?n*(h-1)+e*o:.5*(n+s)*(h-1);if(c<0||c>h-1)for(let n=0;n<g;n++)for(let r=0;r<p;r++){const s=r+n*S[2]+e*S[1]+t*S[0];y.values[s]=u}else if(\"bilinear\"===l){const n=Math.floor(c),s=Math.ceil(c),o=c-n;for(let l=0;l<g;l++){const c=g>1?r*(d-1)+l*f:.5*(r+i)*(d-1);if(c<0||c>d-1){for(let n=0;n<p;n++){const r=n+l*S[2]+e*S[1]+t*S[0];y.values[r]=u}continue}const h=Math.floor(c),m=Math.ceil(c),x=c-h;for(let r=0;r<p;r++){let i=r+h*w[2]+n*w[1]+a*w[0];const u=v[i];i=r+m*w[2]+n*w[1]+a*w[0];const c=v[i];i=r+h*w[2]+s*w[1]+a*w[0];const d=v[i];i=r+m*w[2]+s*w[1]+a*w[0];const p=u+(c-u)*x,f=d+(v[i]-d)*x;i=r+l*S[2]+e*S[1]+t*S[0],y.values[i]=p+(f-p)*o}}}else for(let n=0;n<g;++n){const s=g>1?r*(d-1)+n*f:.5*(r+i)*(d-1);if(s<0||s>d-1){for(let r=0;r<p;r++){const s=r+n*S[2]+e*S[1]+t*S[0];y.values[s]=u}continue}const o=Math.round(s),l=Math.round(c);for(let r=0;r<p;r++){const s=r+o*w[2]+l*w[1]+a*w[0],i=r+n*S[2]+e*S[1]+t*S[0];y.values[i]=v[s]}}}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}},IE={kernelName:De,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{axis:i,exclusive:a,reverse:o}=r;NM(s,\"cumsum\");const l=_c([i],s.shape.length);let u=s;null!=l&&(u=kk({inputs:{x:s},backend:n,attrs:{perm:l}}));const c=kc(1,s.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const h=ei(u.dtype,\"int32\"),d=$t(at(u.shape),h),p=n.data.get(u.dataId).values,f=u.shape[u.shape.length-1],m=o?(t,e)=>t+f-e-1:(t,e)=>t+e;for(let t=0;t<p.length;t+=f)for(let e=0;e<f;e++){const n=m(t,e);if(0===e)d[n]=a?0:p[n];else{const r=m(t,e-1);d[n]=a?p[r]+d[r]:p[n]+d[r]}}const g=n.makeTensorInfo(u.shape,h,d);if(null!=l){const t=kk({inputs:{x:g},backend:n,attrs:{perm:Mc(l)}});return n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(u),t}return g}},CE={kernelName:$e,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,weights:i}=e,{size:a,binaryOutput:o}=r;if(1===s.shape.length){const t=eE(n.data.get(s.dataId).values,n.data.get(i.dataId).values,i.dtype,i.shape,a);return n.makeTensorInfo([a],i.dtype,t)}if(2===s.shape.length){const t=nE(n.bufferSync(s),n.bufferSync(i),a,o);return n.makeTensorInfo(t.shape,i.dtype,t.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${s.shape.length}.`)}},NE={kernelName:Oe,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{blockSize:i,dataFormat:a}=r;nt(\"NHWC\"===a,(()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${a}`)),nt(i>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${i}`));const o=s.shape[0],l=s.shape[1],u=s.shape[2],c=s.shape[3],h=l*i,d=u*i,p=c/(i*i),f=n.data.get(s.dataId).values,m=new Float32Array(o*h*d*p);let g=0;for(let t=0;t<o;++t)for(let e=0;e<h;++e){const n=Math.floor(e/i),r=e%i;for(let e=0;e<d;++e){const s=Math.floor(e/i),a=(r*i+e%i)*p;for(let e=0;e<p;++e){const r=e+a+c*(s+u*(n+l*t));m[g++]=f[r]}}}return n.makeTensorInfo([o,h,d,p],s.dtype,m)}};function AE(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,filter:i}=e,{strides:a,pad:o,dilations:l,dimRoundingMode:u}=r;NM([s,i],\"depthwiseConv2DNative\");const c=Rt(s.shape),h=Rt(i.shape);let d=l;null==d&&(d=[1,1]),nt(eu(a,d),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${a} and dilations '${d}'`));const p=ql(s.shape,i.shape,a,d,o,u,!0),{filterHeight:f,filterWidth:m,dilationHeight:g,dilationWidth:y,padInfo:x}=p,b=x.left,v=x.top,w=p.outChannels/p.inChannels,S=new Vs(p.outShape,s.dtype),T=n.data.get(s.dataId).values,_=n.data.get(i.dataId).values,M=S.values;for(let t=0;t<p.batchSize;++t){const e=t*c[0],n=t*S.strides[0];for(let t=0;t<p.outHeight;++t){const r=n+t*S.strides[1],s=t*p.strideHeight-v;for(let t=0;t<f;++t){const n=s+t*g;if(n<0||n>=p.inHeight)continue;const i=t*h[0],a=e+n*c[1];for(let t=0;t<p.outWidth;++t){const e=r+t*S.strides[2],n=t*p.strideWidth-b;for(let t=0;t<m;++t){const r=n+t*y;if(r<0||r>=p.inWidth)continue;const s=i+t*h[1],o=a+r*p.inChannels;let l=e,u=s;for(let t=0;t<p.inChannels;++t){const e=T[o+t];for(let t=0;t<w;++t)M[l+t]+=e*_[u+t];l+=w,u+=w}}}}}}return n.makeTensorInfo(S.shape,S.dtype,S.values)}const RE={kernelName:Pe,backendName:\"cpu\",kernelFunc:AE},LE={kernelName:ze,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,dy:i}=e,{strides:a,dilations:o,pad:l,dimRoundingMode:u,filterShape:c}=r;NM([s,i],\"depthwiseConv2dNativeBackpropFilter\");const h=ql(s.shape,c,a,o,l,u,!0),{strideHeight:d,strideWidth:p,filterHeight:f,filterWidth:m}=h,g=new Vs(h.filterShape,\"float32\"),y=h.padInfo.left,x=h.padInfo.top,b=h.outChannels/h.inChannels,v=n.data.get(s.dataId).values,w=new Vs(s.shape,s.dtype,v),S=n.data.get(i.dataId).values,T=new Vs(i.shape,i.dtype,S);for(let t=0;t<f;++t){const e=Math.max(0,Math.ceil((x-t)/d)),n=Math.min(h.outHeight,(h.inHeight+x-t)/d);for(let r=0;r<m;++r){const s=Math.max(0,Math.ceil((y-r)/p)),i=Math.min(h.outWidth,(h.inWidth+y-r)/p);for(let a=0;a<h.outChannels;++a){const o=Math.trunc(a/b),l=a%b;let u=0;for(let l=0;l<h.batchSize;++l)for(let c=e;c<n;++c){const e=t+c*d-x;for(let t=s;t<i;++t){const n=r+t*p-y;u+=w.get(l,e,n,o)*T.get(l,c,t,a)}}g.set(u,t,r,o,l)}}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}},DE={kernelName:Be,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{dy:s,filter:i}=e,{strides:a,dilations:o,pad:l,dimRoundingMode:u,inputShape:c}=r;NM([s,i],\"depthwiseConv2DNativeBackpropInput\");const h=Rt(s.shape),d=Rt(i.shape),p=ql(c,i.shape,a,o,l,u,!0),f=new Vs(p.inShape,\"float32\"),m=f.values,[g,y,x]=f.strides,b=n.data.get(s.dataId).values,[v,w,S]=h,T=n.data.get(i.dataId).values,[_,M,k]=d,{batchSize:E,filterHeight:I,filterWidth:C,inChannels:N,inHeight:A,inWidth:R,outChannels:L,outHeight:D,outWidth:F,strideHeight:$,strideWidth:O}=p,P=I-1-p.padInfo.top,z=C-1-p.padInfo.left,B=L/N;for(let t=0;t<E;++t)for(let e=0;e<N;++e)for(let n=0;n<A;++n){const r=n-P,s=Math.max(0,Math.ceil(r/$)),i=Math.min(D,(I+r)/$);for(let a=0;a<R;++a){const o=a-z,l=Math.max(0,Math.ceil(o/O)),u=Math.min(F,(C+o)/O);let c=0;for(let n=s;n<i;++n){const s=n*$-r;for(let r=l;r<u;++r){const i=v*t+w*n+S*r,a=_*(I-1-s)+M*(C-1-(r*O-o))+k*e;for(let t=0;t<B;++t)c+=b[i+(e*B+t)]*T[a+t]}}m[g*t+y*n+x*a+e]=c}}return n.makeTensorInfo(f.shape,f.dtype,f.values)}},FE={kernelName:Ue,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n}=t,{x:r}=e,s=at(r.shape),i=n.data.get(r.dataId).values,a=wa([s,s],r.dtype),o=a.values;for(let t=0;t<i.length;t++)o[t*s+t]=i[t];const l=[...r.shape,...r.shape];return n.makeTensorInfo(l,a.dtype,a.values)}},$E={kernelName:Ve,backendName:\"cpu\",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{x:r,filter:s}=t,{strides:i,pad:a,dilations:o}=n,l=e,u=l.data.get(r.dataId).values,c=r.shape.length,h=l.data.get(s.dataId).values,d=s.shape.length,{batchSize:p,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:x,padInfo:b,strideHeight:v,strideWidth:w,filterHeight:S,filterWidth:T,dilationHeight:_,dilationWidth:M,outShape:k}=Gl(r.shape,s.shape,i,a,\"NHWC\",o),E=at(k),I=k.length,C=bt(r.dtype,E);for(let t=0;t<p;++t)for(let e=0;e<y;++e){const n=e*v-b.top;for(let i=0;i<x;++i){const a=i*w-b.left;for(let o=0;o<g;++o){let l=Number.MIN_SAFE_INTEGER;for(let e=0;e<S;++e){const i=n+e*_;if(i>=0&&i<f)for(let n=0;n<T;++n){const p=a+n*M;if(p>=0&&p<m){const a=zt([t,i,p,o],c,Rt(r.shape)),f=zt([e,n,o],d,Rt(s.shape)),m=u[a]+h[f];m>l&&(l=m)}}}C[zt([t,e,i,o],I,Rt(k))]=l}}}return{dataId:l.write(Cs(C,r.dtype),k,r.dtype),shape:k,dtype:r.dtype}}},OE={kernelName:Ge,backendName:\"cpu\",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{x:r,filter:s,dy:i}=t,{strides:a,pad:o,dilations:l}=n,u=e,c=Dt(r.shape,u.data.get(r.dataId).values),h=Dt(s.shape,u.data.get(s.dataId).values),{batchSize:d,inHeight:p,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:x,strideHeight:b,strideWidth:v,filterHeight:w,filterWidth:S,dilationHeight:T,dilationWidth:_,outShape:M}=Gl(r.shape,s.shape,a,o,\"NHWC\",l);nt(i.rank===M.length,(()=>`Error in ${Ge}, dy must have the same rank as output ${M.length}, but got ${i.rank}`));const k=Dt(M,u.data.get(i.dataId).values),E=Ot(s.shape,s.dtype);for(let t=0;t<d;++t)for(let e=0;e<g;++e){const n=e*b-x.top;for(let r=0;r<y;++r){const s=r*v-x.left;for(let i=0;i<m;++i){let a=Number.MIN_SAFE_INTEGER,o=0,l=0;for(let e=0;e<w;++e){const r=n+e*T;if(r>=0&&r<p)for(let n=0;n<S;++n){const u=s+n*_;if(u>=0&&u<f){const s=c[t][r][u][i]+h[e][n][i];s>a&&(a=s,o=e,l=n)}}}E[o][l][i]+=k[t][e][r][i]}}}return{dataId:u.write(Cs(E,r.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},PE={kernelName:We,backendName:\"cpu\",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{x:r,filter:s,dy:i}=t,{strides:a,pad:o,dilations:l}=n,u=e,c=Dt(r.shape,u.data.get(r.dataId).values),h=Dt(s.shape,u.data.get(s.dataId).values),{batchSize:d,inHeight:p,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:x,strideHeight:b,strideWidth:v,filterHeight:w,filterWidth:S,dilationHeight:T,dilationWidth:_,outShape:M}=Gl(r.shape,s.shape,a,o,\"NHWC\",l);nt(i.rank===M.length,(()=>`Error in ${We}, dy must have the same rank as output ${M.length}, but got ${i.rank}`));const k=Dt(M,u.data.get(i.dataId).values),E=Ot(r.shape,r.dtype);for(let t=0;t<d;++t)for(let e=0;e<g;++e){const n=e*b-x.top;for(let r=0;r<y;++r){const s=r*v-x.left;for(let i=0;i<m;++i){let a=Number.MIN_SAFE_INTEGER,o=n<0?0:n,l=s<0?0:s;for(let e=0;e<w;++e){const r=n+e*T;if(r>=0&&r<p)for(let n=0;n<S;++n){const u=s+n*_;if(u>=0&&u<f){const s=c[t][r][u][i]+h[e][n][i];s>a&&(a=s,o=r,l=u)}}}E[t][o][l][i]+=k[t][e][r][i]}}}return{dataId:u.write(Cs(E,r.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},zE=UM(((t,e)=>t*e)),BE=lk(((t,e,n,r)=>({real:t*n-e*r,imag:t*r+e*n}))),UE=ok(Vn,zE,BE),VE={kernelName:Vn,backendName:\"cpu\",kernelFunc:UE};function WE(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{axis:i,keepDims:a}=r;let o;NM(s,\"sum\"),o=\"bool\"===s.dtype?ik({inputs:{x:s},backend:n,attrs:{dtype:\"int32\"}}):OM({inputs:{x:s},backend:n});const l=o.shape.length,u=gt(i,o.shape),c=_c(u,l);let h=u,d=o;null!=c&&(d=kk({inputs:{x:o},backend:n,attrs:{perm:c}}),h=kc(h.length,l)),Tc(\"sum\",h,d.shape.length);const[p,f]=wc(d.shape,h);let m=nk(n,p,ei(d.dtype,\"int32\"));const g=at(f),y=n.data.get(m.dataId).values,x=n.data.get(d.dataId).values;for(let t=0;t<y.length;++t){const e=t*g;let n=0;for(let t=0;t<g;++t)n+=x[e+t];y[t]=n}if(a){const t=m;m=pk({inputs:{x:m},backend:n,attrs:{shape:Sc(m.shape,u)}}),n.disposeIntermediateTensorInfo(t)}return n.disposeIntermediateTensorInfo(o),null!=c&&n.disposeIntermediateTensorInfo(d),m}const GE={kernelName:Mr,backendName:\"cpu\",kernelFunc:WE},HE={kernelName:je,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{equation:s}=r,i=e,{allDims:a,summedDims:o,idDims:l}=nf(s,i.length);sf(a.length,l,i);const{path:u,steps:c}=af(o,l),h=c.length;let d=null,p=a.length;const f=[];for(let t=0;t<h;++t){for(const e of c[t]){const{permutationIndices:t,expandDims:r}=rf(p,l[e]);let s;of(t)?s=i[e]:(s=kk({inputs:{x:i[e]},backend:n,attrs:{perm:t}}),f.push(s));const a=s.shape.slice();for(let t=0;t<r.length;++t)a.splice(r[t],0,1);lt(s.shape,a)||(s=pk({inputs:{x:s},backend:n,attrs:{shape:a}}),f.push(s)),null===d?d=s:(d=UE({inputs:{a:s,b:d},backend:n}),f.push(d))}t<h-1&&(u[t]>=0&&(d=WE({inputs:{x:d},backend:n,attrs:{axis:u[t]-(a.length-p),keepDims:!1}}),f.push(d)),p--)}for(const t of f)t!==d&&n.disposeIntermediateTensorInfo(t);return d}},jE={kernelName:Xe,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n}=t,{dy:r,y:s}=e;NM([r,s],\"eluGrad\");const i=new Float32Array(at(s.shape)),a=n.data.get(s.dataId).values,o=n.data.get(r.dataId).values;for(let t=0;t<a.length;++t){const e=a[t];i[t]=e>=1?o[t]:o[t]*(e+1)}return n.makeTensorInfo(s.shape,\"float32\",i)}},qE=UM(((t,e)=>t===e?1:0)),XE=ok(Ye,qE,null,\"bool\"),KE={kernelName:Ye,backendName:\"cpu\",kernelFunc:XE},YE=Up,ZE=Vp,JE=Wp,QE=Gp,tI=Hp,eI=jp,nI=LM(Ke,(t=>{const e=Math.sign(t),n=Math.abs(t),r=1/(1+YE*n);return e*(1-((((eI*r+tI)*r+QE)*r+JE)*r+ZE)*r*Math.exp(-n*n))})),rI={kernelName:Ke,backendName:\"cpu\",kernelFunc:nI},sI=KM((t=>Math.exp(t))),iI=DM(Ze,sI),aI={kernelName:Ze,backendName:\"cpu\",kernelFunc:iI};function oI(t){const{inputs:e,backend:n,attrs:r}=t,{input:s}=e,{dim:i}=r,a=s.shape.length,o=s.shape.slice();let l=i;return i<0&&(nt(-(a+1)<=i,(()=>`Axis must be in the interval [${-(a+1)}, ${a}]`)),l=a+i+1),o.splice(l,0,1),pk({inputs:{x:s},backend:n,attrs:{shape:o}})}const lI={kernelName:Je,backendName:\"cpu\",kernelFunc:oI},uI=KM((t=>Math.expm1(t))),cI=DM(Qe,uI),hI={kernelName:Qe,backendName:\"cpu\",kernelFunc:cI},dI=UM(((t,e)=>t/e)),pI=ok(He,dI),fI={kernelName:He,backendName:\"cpu\",kernelFunc:pI},mI=UM(((t,e)=>t-e)),gI=lk(((t,e,n,r)=>({real:t-n,imag:e-r}))),yI=ok(Br,mI,gI),xI={kernelName:Br,backendName:\"cpu\",kernelFunc:yI};function bI(t,e,n){const r=t.shape,s=r[0],i=r[1],a=n.data.get(t.dataId),o=a.complexTensorInfos.real,l=a.complexTensorInfos.imag,u=[s,i],c=at(u),h=xt(\"float32\",c),d=xt(\"float32\",c);for(let t=0;t<s;t++){const r=Jk({inputs:{x:o},backend:n,attrs:{begin:[t,0],size:[1,i]}}),s=Jk({inputs:{x:l},backend:n,attrs:{begin:[t,0],size:[1,i]}}),a=tk({inputs:{real:r,imag:s},backend:n}),{real:u,imag:c}=vI(a,e,n),p=qp(u,c);for(let e=0;e<i;e++){const n=Zp(p,e);h[t*i+e]=n.real,d[t*i+e]=n.imag}n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(a)}const p=n.makeTensorInfo(u,\"float32\",h),f=n.makeTensorInfo(u,\"float32\",d),m=tk({inputs:{real:p,imag:f},backend:n});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),m}function vI(t,e,n){const r=at(t.shape),s=n.data.get(t.dataId),i=n.data.get(s.complexTensorInfos.real.dataId).values,a=n.data.get(s.complexTensorInfos.imag.dataId).values;if(0==((o=r)&o-1)){const s=wI(i,a,r,e,n),o=[t.shape[0],t.shape[1]];if(e){const t=n.makeTensorInfo(o,\"float32\",s.real),e=n.makeTensorInfo(o,\"float32\",s.imag),i=n.makeTensorInfo([],\"float32\",Is(r,\"float32\")),a=OM({inputs:{x:i},backend:n}),l=fI.kernelFunc({inputs:{a:t,b:i},backend:n}),u=fI.kernelFunc({inputs:{a:e,b:a},backend:n}),c=n.data.get(l.dataId).values,h=n.data.get(u.dataId).values;return n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),{real:c,imag:h}}return s}return Xp(function(t,e,n){const r=new Float32Array(2*e);for(let s=0;s<e;s++){let i=0,a=0;for(let r=0;r<e;r++){const o=tf(s*r,e,n),l=Zp(t,r);i+=l.real*o.real-l.imag*o.imag,a+=l.real*o.imag+l.imag*o.real}n&&(i/=e,a/=e),Jp(r,i,a,s)}return r}(qp(i,a),r,e));var o}function wI(t,e,n,r,s){if(1===n)return{real:t,imag:e};const i=qp(t,e),a=n/2,o=Kp(i),l=o.real,u=o.imag,c=[l.length],h=s.makeTensorInfo(c,\"float32\",l),d=s.makeTensorInfo(c,\"float32\",u),p=tk({inputs:{real:h,imag:d},backend:s}),f=Yp(i),m=f.real,g=f.imag,y=[m.length],x=s.makeTensorInfo(y,\"float32\",m),b=s.makeTensorInfo(y,\"float32\",g),v=tk({inputs:{real:x,imag:b},backend:s}),w=wI(l,u,a,r,s),S=w.real,T=w.imag,_=[S.length],M=s.makeTensorInfo(_,\"float32\",S),k=s.makeTensorInfo(_,\"float32\",T),E=tk({inputs:{real:M,imag:k},backend:s}),I=wI(m,g,a,r,s),C=I.real,N=I.imag,A=[C.length],R=s.makeTensorInfo(A,\"float32\",C),L=s.makeTensorInfo(A,\"float32\",N),D=tk({inputs:{real:R,imag:L},backend:s}),F=Qp(n,r),$=[F.real.length],O=s.makeTensorInfo($,\"float32\",F.real),P=s.makeTensorInfo($,\"float32\",F.imag),z=tk({inputs:{real:O,imag:P},backend:s}),B=UE({inputs:{a:z,b:D},backend:s}),U=hk({inputs:{a:E,b:B},backend:s}),V=yI({inputs:{a:E,b:B},backend:s}),W=rk({inputs:{input:U},backend:s}),G=rk({inputs:{input:V},backend:s}),H=dE({inputs:{input:U},backend:s}),j=dE({inputs:{input:V},backend:s}),q=fE({inputs:[W,G],backend:s,attrs:{axis:0}}),X=fE({inputs:[H,j],backend:s,attrs:{axis:0}}),K=s.data.get(q.dataId).values,Y=s.data.get(X.dataId).values;return s.disposeIntermediateTensorInfo(h),s.disposeIntermediateTensorInfo(d),s.disposeIntermediateTensorInfo(p),s.disposeIntermediateTensorInfo(x),s.disposeIntermediateTensorInfo(b),s.disposeIntermediateTensorInfo(v),s.disposeIntermediateTensorInfo(M),s.disposeIntermediateTensorInfo(k),s.disposeIntermediateTensorInfo(E),s.disposeIntermediateTensorInfo(R),s.disposeIntermediateTensorInfo(L),s.disposeIntermediateTensorInfo(D),s.disposeIntermediateTensorInfo(O),s.disposeIntermediateTensorInfo(P),s.disposeIntermediateTensorInfo(z),s.disposeIntermediateTensorInfo(B),s.disposeIntermediateTensorInfo(U),s.disposeIntermediateTensorInfo(V),s.disposeIntermediateTensorInfo(W),s.disposeIntermediateTensorInfo(H),s.disposeIntermediateTensorInfo(G),s.disposeIntermediateTensorInfo(j),s.disposeIntermediateTensorInfo(q),s.disposeIntermediateTensorInfo(X),{real:K,imag:Y}}const SI={kernelName:tn,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n}=t,{input:r}=e,s=at(r.shape),i=r.shape[r.shape.length-1],a=pk({inputs:{x:r},backend:n,attrs:{shape:[s/i,i]}}),o=bI(a,!1,n),l=pk({inputs:{x:o},backend:n,attrs:{shape:r.shape}});return n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(o),l}};function TI(t){const{backend:e,attrs:n}=t,{shape:r,value:s,dtype:i}=n,a=i||Ct(s),o=bt(a,at(r));return function(t,e,n){t.fill(e)}(o,s),e.makeTensorInfo(r,a,o)}const _I={kernelName:en,backendName:\"cpu\",kernelFunc:TI},MI={kernelName:nn,backendName:\"cpu\",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{image:r}=t,s=n,i=xt(r.dtype,at(r.shape)),[a,o,l,u]=r.shape,c=s.data.get(r.dataId).values;for(let t=0;t<a;t++){const e=t*l*o*u;for(let t=0;t<o;t++){const n=t*(l*u);for(let t=0;t<l;t++){const r=t*u;for(let s=0;s<u;s++){const a=Math.round(l-t-1),o=e+n+r+s;let h=c[o];a>=0&&a<l&&(h=c[e+n+a*u+s]),i[o]=h}}}}return{dataId:s.write(i,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},kI=KM((t=>Math.floor(t))),EI=DM(rn,kI),II={kernelName:rn,backendName:\"cpu\",kernelFunc:EI},CI=UM(((t,e)=>Math.floor(t/e))),NI=ok(sn,CI,null,\"int32\"),AI={kernelName:sn,backendName:\"cpu\",kernelFunc:NI},RI={kernelName:es,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,filter:i,bias:a,preluActivationWeights:o}=e,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=r;let m=gE({inputs:{x:s,filter:i},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d}});if(a){const t=m;m=hk({inputs:{a:m,b:a},backend:n}),n.disposeIntermediateTensorInfo(t)}if(p){const t=m;m=QM(n,m,p,o,f),n.disposeIntermediateTensorInfo(t)}return m}},LI={kernelName:ns,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,filter:i,bias:a,preluActivationWeights:o}=e,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=r;let m=AE({inputs:{x:s,filter:i},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d}});if(a){const t=m;m=hk({inputs:{a:m,b:a},backend:n}),n.disposeIntermediateTensorInfo(t)}if(p){const t=m;m=QM(n,m,p,o,f),n.disposeIntermediateTensorInfo(t)}return m}};function DI(t,e,n,r,s,i,a,o,l){const u=wa([r,i],n);for(let n=0;n<r;n++){const r=[];let c=0;for(let e=0;e<s;e++){const i=t[n*s+e];c+=i*a[e],r.push(i)}if(c<0||c>=l/i)throw new Error(`Invalid indices: ${r} does not index into ${o}`);for(let t=0;t<i;t++)u.values[n*i+t]=e.get(...e.indexToLoc(c*i+t))}return u}const FI={kernelName:ln,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n}=t,{params:r,indices:s}=e,i=at(r.shape),a=s.shape,o=a[a.length-1],[l,u,c,h]=Ja(r,s);if(0===u)return n.makeTensorInfo(l,r.dtype,[]);const d=DI(n.data.get(s.dataId).values,n.bufferSync(r),r.dtype,u,o,c,h,r.shape,i);return n.makeTensorInfo(l,r.dtype,d.values)}};function $I(t,e,n){const r=wa(n,t.dtype);for(let n=0;n<r.size;++n){const s=r.indexToLoc(n).slice(),i=s[0],a=s[2],o=e.locToIndex([i,a]);s[2]=e.values[o];const l=t.locToIndex(s);r.values[n]=t.values[l]}return r}const OI={kernelName:on,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,indices:i}=e,{axis:a,batchDims:o}=r;NM([s,i],\"gatherV2\");let l=o;null==o&&(l=0);const u=at(i.shape),c=df(s,i,gt(a,s.shape)[0],l),h=pk({inputs:{x:s},backend:n,attrs:{shape:[c.batchSize,c.outerSize,c.dimSize,c.sliceSize]}}),d=pk({inputs:{x:i},backend:n,attrs:{shape:[c.batchSize,u/c.batchSize]}}),p=[c.batchSize,c.outerSize,u/c.batchSize,c.sliceSize],f=n.bufferSync(d),m=$I(n.bufferSync(h),f,p);return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),n.makeTensorInfo(c.outputShape,m.dtype,m.values)}},PI=UM(((t,e)=>t>e?1:0)),zI=ok(un,PI,null,\"bool\"),BI={kernelName:un,backendName:\"cpu\",kernelFunc:zI},UI=UM(((t,e)=>t>=e?1:0)),VI=ok(cn,UI,null,\"bool\"),WI={kernelName:cn,backendName:\"cpu\",kernelFunc:VI},GI={kernelName:dn,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n}=t,{input:r}=e,s=at(r.shape),i=r.shape[r.shape.length-1],a=pk({inputs:{x:r},backend:n,attrs:{shape:[s/i,i]}}),o=bI(a,!0,n),l=pk({inputs:{x:o},backend:n,attrs:{shape:r.shape}});return n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(o),l}},HI=LM(fn,(t=>Number.isFinite(t)?1:0),\"bool\"),jI={kernelName:fn,backendName:\"cpu\",kernelFunc:HI},qI=LM(mn,(t=>Math.abs(t)===1/0?1:0),\"bool\"),XI={kernelName:mn,backendName:\"cpu\",kernelFunc:qI},KI=LM(gn,(t=>Number.isNaN(t)?1:0),\"bool\"),YI={kernelName:gn,backendName:\"cpu\",kernelFunc:KI},ZI=UM(((t,e)=>t<e?1:0)),JI=ok(xn,ZI,null,\"bool\"),QI={kernelName:xn,backendName:\"cpu\",kernelFunc:JI},tC=UM(((t,e)=>t<=e?1:0)),eC=ok(bn,tC,null,\"bool\"),nC={kernelName:bn,backendName:\"cpu\",kernelFunc:eC};function rC(t,e,n){const r=(e-t)/(n-1),s=$t(n,\"float32\");s[0]=t;for(let t=1;t<s.length;t++)s[t]=s[t-1]+r;return s}const sC={kernelName:vn,backendName:\"cpu\",kernelFunc:function(t){const{backend:e,attrs:n}=t,{start:r,stop:s,num:i}=n,a=rC(r,s,i);return e.makeTensorInfo([a.length],\"float32\",a)}},iC=KM((t=>Math.log(t))),aC=DM(wn,iC),oC={kernelName:wn,backendName:\"cpu\",kernelFunc:aC},lC=LM(Sn,(t=>Math.log1p(t))),uC={kernelName:Sn,backendName:\"cpu\",kernelFunc:lC},cC=UM(((t,e)=>t&&e)),hC=ok(Tn,cC,null,\"bool\"),dC={kernelName:Tn,backendName:\"cpu\",kernelFunc:hC},pC=LM(_n,(t=>t?0:1),\"bool\"),fC={kernelName:_n,backendName:\"cpu\",kernelFunc:pC},mC=UM(((t,e)=>t||e)),gC=ok(Mn,mC,null,\"bool\"),yC={kernelName:Mn,backendName:\"cpu\",kernelFunc:gC},xC={kernelName:En,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{depthRadius:i,bias:a,alpha:o,beta:l}=r;NM(s,\"LRN\");const u=s.shape[3],c=u-1,h=n.data.get(s.dataId).values,d=at(s.shape),p=new Float32Array(d);function f(t){const e=t%u;let n=t-e+Math.max(0,e-i);const r=t-e+Math.min(e+i,c);let s=0;for(;n<=r;n++){const t=h[n];s+=t*t}return s}for(let t=0;t<d;t++){const e=f(t),n=h[t]*Math.pow(a+o*e,-l);p[t]=n}return n.makeTensorInfo(s.shape,s.dtype,p)}},bC={kernelName:In,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,y:i,dy:a}=e,{depthRadius:o,bias:l,alpha:u,beta:c}=r;NM(a,\"LRNGrad\");const h=at(a.shape),d=a.shape[3],p=n.data.get(a.dataId).values,f=n.data.get(s.dataId).values,m=n.data.get(i.dataId).values,g=new Float32Array(h),y=h;for(let t=0;t<y;t++){const e=t%d,n=t-e+Math.max(0,e-o),r=t-e+Math.min(d,e+o+1);let s=0;for(let t=n;t<r;t++)s+=Math.pow(f[t],2);s=u*s+l;for(let e=n;e<r;e++){let n=-2*u*c*f[e]*m[t]/s;t===e&&(n+=Math.pow(s,-c)),n*=p[t],g[e]+=n}}return n.makeTensorInfo(a.shape,s.dtype,g)}};function vC(t,e,n,r){const s=xt(r,at(n));for(let n=0;n<s.length;++n){const r=n*e;let i=t[r];for(let n=0;n<e;++n){const e=t[r+n];(Number.isNaN(e)||e>i)&&(i=e)}s[n]=i}return s}function wC(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{reductionIndices:i,keepDims:a}=r,o=n;let l=s.shape;const u=l.length,c=gt(i,l);let h=c;const d=_c(h,u);let p=o.data.get(s.dataId).values;if(null!=d){const t=new Array(u);for(let e=0;e<t.length;e++)t[e]=l[d[e]];p=Mk(p,l,s.dtype,d,t),h=kc(h.length,u),l=t}NM(s,\"max\"),Tc(\"max\",h,u);const[f,m]=wc(l,h),g=vC(p,at(m),f,s.dtype),y=o.write(g,f,s.dtype);let x=f;return a&&(x=Sc(f,c)),{dataId:y,shape:x,dtype:s.dtype}}const SC={kernelName:Cn,backendName:\"cpu\",kernelFunc:wC},TC=UM(((t,e)=>Math.max(t,e))),_C=ok(Nn,TC),MC={kernelName:Nn,backendName:\"cpu\",kernelFunc:_C},kC={kernelName:An,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e;NM(s,\"maxPool\");const{filterSize:i,strides:a,pad:o,dimRoundingMode:l}=r;nt(eu(a,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '1'`));const u=Hl(s.shape,i,a,1,o,l);let c;if(1===u.filterWidth&&1===u.filterHeight&&lt(u.inShape,u.outShape))c=OM({inputs:{x:s},backend:n});else{const t=n.data.get(s.dataId).values,e=Rt(s.shape),r=Wk(t,s.shape,s.dtype,e,u,\"max\");c=n.makeTensorInfo(u.outShape,s.dtype,r.values)}return c}},EC={kernelName:Ln,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{filterSize:i,strides:a,pad:o,dimRoundingMode:l,dataFormat:u}=r;NM(s,\"maxPool3d\");const c=jl(s.shape,i,a,1,o,l,u),h=Hk(n.data.get(s.dataId).values,s.shape,s.dtype,Rt(s.shape),c,\"max\");return n.makeTensorInfo(h.shape,\"float32\",h.values)}},IC={kernelName:Dn,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{dy:s,input:i}=e,{filterSize:a,strides:o,pad:l,dimRoundingMode:u}=r;NM([s,i],\"maxPool3DGrad\");const c=jl(i.shape,a,o,1,l,u),h=function(t,e){const n=wa(e.outShape,\"int32\"),r=e.strideDepth,s=e.strideHeight,i=e.strideWidth,a=e.dilationDepth,o=e.dilationHeight,l=e.dilationWidth,u=e.effectiveFilterDepth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,d=e.padInfo.front,p=e.padInfo.top,f=e.padInfo.left;for(let m=0;m<e.batchSize;++m)for(let g=0;g<e.inChannels;++g)for(let y=0;y<e.outDepth;++y){const x=y*r-d;let b=x;for(;b<0;)b+=a;const v=Math.min(e.inDepth,u+x);for(let r=0;r<e.outHeight;++r){const u=r*s-p;let d=u;for(;d<0;)d+=o;const w=Math.min(e.inHeight,c+u);for(let s=0;s<e.outWidth;++s){const p=s*i-f;let S=p;for(;S<0;)S+=l;const T=Math.min(e.inWidth,h+p);let _=Number.NEGATIVE_INFINITY,M=-1;for(let e=b;e<v;e+=a){const n=e-x;for(let r=d;r<w;r+=o){const s=r-u;for(let i=S;i<T;i+=l){const a=i-p,o=t.get(m,e,r,i,g);o>=_&&(_=o,M=n*c*h+s*c+a)}}}n.set(M,m,y,r,s,g)}}}return n}(n.bufferSync(i),c),d=c.strideDepth,p=c.strideHeight,f=c.strideWidth,m=c.dilationDepth,g=c.dilationHeight,y=c.dilationWidth,x=c.effectiveFilterDepth,b=c.effectiveFilterHeight,v=c.effectiveFilterWidth,w=x-1-c.padInfo.front,S=v-1-c.padInfo.left,T=b-1-c.padInfo.top,_=wa(i.shape,\"float32\"),M=n.bufferSync(s);for(let t=0;t<c.batchSize;++t)for(let e=0;e<c.inChannels;++e)for(let n=0;n<c.inDepth;++n)for(let r=0;r<c.inHeight;++r)for(let s=0;s<c.inWidth;++s){const i=n-w,a=r-T,o=s-S;let l=0;for(let n=0;n<x;n+=m){const r=(i+n)/d;if(!(r<0||r>=c.outDepth||Math.floor(r)!==r))for(let s=0;s<b;s+=g){const i=(a+s)/p;if(!(i<0||i>=c.outHeight||Math.floor(i)!==i))for(let a=0;a<v;a+=y){const u=(o+a)/f;if(u<0||u>=c.outWidth||Math.floor(u)!==u)continue;const d=x*b*v-1-h.get(t,r,i,u,e)===n*b*v+s*v+a?1:0;0!==d&&(l+=M.get(t,r,i,u,e)*d)}}}_.set(l,t,n,r,s,e)}return n.makeTensorInfo(_.shape,_.dtype,_.values)}},CC={kernelName:Rn,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{dy:s,input:i,output:a}=e,o=i;NM([i,a],\"maxPoolGrad\");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=r,d=Hl(o.shape,l,u,1,c,h),p=n.data.get(o.dataId).values,f=wa(d.outShape,o.dtype,Gk(p,o.shape,o.dtype,d).values),m=d.strideHeight,g=d.strideWidth,y=d.dilationHeight,x=d.dilationWidth,b=d.effectiveFilterHeight,v=d.effectiveFilterWidth,w=v-1-d.padInfo.left,S=b-1-d.padInfo.top,T=wa(o.shape,\"float32\"),_=n.data.get(s.dataId).values,M=wa(s.shape,\"float32\",_);for(let t=0;t<d.batchSize;++t)for(let e=0;e<d.inChannels;++e)for(let n=0;n<d.inHeight;++n)for(let r=0;r<d.inWidth;++r){const s=n-S,i=r-w;let a=0;for(let n=0;n<b;n+=y){const r=(s+n)/m;if(!(r<0||r>=d.outHeight||Math.floor(r)!==r))for(let s=0;s<v;s+=x){const o=(i+s)/g;if(o<0||o>=d.outWidth||Math.floor(o)!==o)continue;const l=b*v-1-f.get(t,r,o,e)===n*v+s?1:0;0!==l&&(a+=M.get(t,r,o,e)*l)}}T.set(a,t,n,r,e)}return n.makeTensorInfo(T.shape,T.dtype,T.values)}},NC={kernelName:Fn,backendName:\"cpu\",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{filterSize:s,strides:i,pad:a,includeBatchInIndex:o}=e,l=n;NM(r,\"MaxPoolWithArgmax\");const u=l.data.get(r.dataId).values,c=Hl(r.shape,s,i,[1,1],a),[h,d]=function(t,e,n,r,s){const i=Wk(t,0,n,Rt(e),s,\"max\"),a=Gk(t,e,n,s,!0,r);return[i.values,a.values]}(u,r.shape,r.dtype,o,c),p=l.write(h,c.outShape,r.dtype),f=l.write(d,c.outShape,r.dtype);return[{dataId:p,shape:c.outShape,dtype:r.dtype},{dataId:f,shape:c.outShape,dtype:\"int32\"}]}},AC={kernelName:$n,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{axis:i,keepDims:a}=r,o=gt(i,s.shape),l=at(wc(s.shape,o)[1]),u=[],c=n.makeTensorInfo([],\"float32\",new Float32Array([l]));u.push(c);const h=ik({inputs:{x:s},backend:n,attrs:{dtype:\"float32\"}});u.push(h);const d=pI({inputs:{a:h,b:c},backend:n});u.push(d);const p=WE({inputs:{x:d},backend:n,attrs:{axis:i,keepDims:a}});return u.forEach((t=>n.disposeIntermediateTensorInfo(t))),p}},RC={kernelName:On,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{axis:i,keepDims:a}=r;NM(s,\"min\");const o=gt(i,s.shape);let l=o;const u=_c(l,s.shape.length);let c=s;null!=u&&(c=kk({inputs:{x:s},backend:n,attrs:{perm:u}}),l=kc(l.length,s.shape.length)),Tc(\"min\",l,c.shape.length);const[h,d]=wc(c.shape,l),p=at(d),f=$t(at(h),c.dtype),m=n.data.get(c.dataId).values;for(let t=0;t<f.length;++t){const e=t*p;let n=m[e];for(let t=0;t<p;++t){const r=m[e+t];(Number.isNaN(r)||r<n)&&(n=r)}f[t]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(h,c.dtype,f);if(a){const t=pk({inputs:{x:g},backend:n,attrs:{shape:Sc(h,o)}});return n.disposeIntermediateTensorInfo(g),t}return g}},LC=UM(((t,e)=>Math.min(t,e))),DC=ok(Pn,LC),FC={kernelName:Pn,backendName:\"cpu\",kernelFunc:DC},$C={kernelName:zn,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{paddings:i,mode:a}=r;NM(s,\"mirrorPad\");const o=i.map(((t,e)=>t[0]+s.shape[e]+t[1])),l=i.map((t=>t[0])),u=i.map(((t,e)=>t[0]+s.shape[e])),c=\"reflect\"===a?0:1,h=n.data.get(s.dataId).values,d=s.shape.length,p=Rt(s.shape),f=at(o),m=o.length,g=Rt(o),y=xt(s.dtype,f);for(let t=0;t<f;t++){let e=Bt(t,m,g);for(let t=0;t<m;t++)e[t]<l[t]?e[t]=2*l[t]-e[t]-c:e[t]>=u[t]&&(e[t]=2*(u[t]-1)-e[t]+c);e=e.map(((t,e)=>t-l[e]));const n=zt(e,d,p);y[t]=h[n]}return{dataId:n.write(y,o,s.dtype),shape:o,dtype:s.dtype}}},OC=UM(((t,e)=>{const n=t%e;return t<0&&e<0||t>=0&&e>=0?n:(n+e)%e})),PC=ok(Bn,OC),zC={kernelName:Bn,backendName:\"cpu\",kernelFunc:PC};function BC(t){const{inputs:e,backend:n,attrs:r}=t,{logits:s}=e,{dim:i}=r,a=s.shape.length;let o=i;if(-1===o&&(o=a-1),o!==a-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${a} and dim was ${o}`);const l=gt([o],s.shape),u=wC({inputs:{x:s},backend:n,attrs:{reductionIndices:l,keepDims:!1}}),c=Sc(u.shape,l),h=pk({inputs:{x:u},backend:n,attrs:{shape:c}}),d=yI({inputs:{a:s,b:h},backend:n}),p=iI({inputs:{x:d},backend:n}),f=WE({inputs:{x:p},backend:n,attrs:{axis:l,keepDims:!1}}),m=pk({inputs:{x:f},backend:n,attrs:{shape:c}}),g=pI({inputs:{a:p,b:m},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}const UC={kernelName:Ir,backendName:\"cpu\",kernelFunc:BC},VC={kernelName:Un,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{logits:s}=e,{numSamples:i,seed:a,normalized:o}=r;NM(s,\"multinomial\");const l=o?s:BC({inputs:{logits:s},backend:n,attrs:{dim:-1}}),u=l.shape[0],c=l.shape[1],h=n.data.get(l.dataId).values,d=[u,i],p=$t(at(d),\"int32\");for(let t=0;t<u;++t){const e=t*c,n=new Float32Array(c-1);n[0]=h[e];for(let t=1;t<n.length;++t)n[t]=n[t-1]+h[e+t];const r=ih.alea(a.toString()),s=t*i;for(let t=0;t<i;++t){const e=r();p[s+t]=n.length;for(let r=0;r<n.length;r++)if(e<n[r]){p[s+t]=r;break}}}return o||n.disposeIntermediateTensorInfo(l),n.makeTensorInfo(d,\"int32\",p)}};function WC(t,e,n){const r=Is(-1,n);return zE([],e,r,t,n)}const GC={kernelName:Wn,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n}=t,{x:r}=e;NM(r,\"neg\");const s=n.data.get(r.dataId).values,[i,a]=WC(s,r.shape,r.dtype);return n.makeTensorInfo(a,r.dtype,i)}},HC=Pd,jC={kernelName:Hn,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{boxes:s,scores:i}=e,{maxOutputSize:a,iouThreshold:o,scoreThreshold:l}=r;NM(s,\"NonMaxSuppression\");const u=n.data.get(s.dataId).values,c=n.data.get(i.dataId).values,{selectedIndices:h}=HC(u,c,a,o,l);return n.makeTensorInfo([h.length],\"int32\",new Int32Array(h))}},qC=zd,XC={kernelName:jn,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{boxes:s,scores:i}=e,{maxOutputSize:a,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=r;NM(s,\"NonMaxSuppressionPadded\");const c=n.data.get(s.dataId).values,h=n.data.get(i.dataId).values,{selectedIndices:d,validOutputs:p}=qC(c,h,a,o,l,u);return[n.makeTensorInfo([d.length],\"int32\",new Int32Array(d)),n.makeTensorInfo([],\"int32\",new Int32Array([p]))]}},KC=Bd,YC={kernelName:qn,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{boxes:s,scores:i}=e,{maxOutputSize:a,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=r;NM(s,\"NonMaxSuppressionWithScore\");const c=n.data.get(s.dataId).values,h=n.data.get(i.dataId).values,d=a,p=o,f=l,m=u,{selectedIndices:g,selectedScores:y}=KC(c,h,d,p,f,m);return[n.makeTensorInfo([g.length],\"int32\",new Int32Array(g)),n.makeTensorInfo([y.length],\"float32\",new Float32Array(y))]}},ZC=UM(((t,e)=>t!==e?1:0)),JC=ok(Gn,ZC,null,\"bool\"),QC={kernelName:Gn,backendName:\"cpu\",kernelFunc:JC},tN={kernelName:Kn,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{indices:s}=e,{depth:i,onValue:a,offValue:o}=r;NM(s,\"oneHot\");const l=at(s.shape),u=new Float32Array(l*i);u.fill(o);const c=n.data.get(s.dataId).values;for(let t=0;t<l;++t)c[t]>=0&&c[t]<i&&(u[t*i+c[t]]=a);return n.makeTensorInfo([...s.shape,i],\"int32\",u)}};function eN(t){const{inputs:e,backend:n}=t,{x:r}=e;if(\"string\"===r.dtype)throw new Error(\"zerosLike is not supported for string tensors\");if(\"complex64\"===r.dtype){const t=rk({inputs:{input:r},backend:n}),e=eN({inputs:{x:t},backend:n}),s=dE({inputs:{input:r},backend:n}),i=eN({inputs:{x:s},backend:n}),a=tk({inputs:{real:e,imag:i},backend:n});return n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(i),a}return TI({backend:n,attrs:{shape:r.shape,value:0,dtype:r.dtype}})}const nN={kernelName:Yr,backendName:\"cpu\",kernelFunc:eN},rN={kernelName:Xn,backendName:\"cpu\",kernelFunc:function t(e){const{inputs:n,backend:r}=e,{x:s}=n;if(\"string\"===s.dtype)throw new Error(\"onesLike is not supported for string tensors\");if(\"complex64\"===s.dtype){const e=rk({inputs:{input:s},backend:r}),n=t({inputs:{x:e},backend:r}),i=dE({inputs:{input:s},backend:r}),a=eN({inputs:{x:i},backend:r}),o=tk({inputs:{real:n,imag:a},backend:r});return r.disposeIntermediateTensorInfo(e),r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(i),r.disposeIntermediateTensorInfo(a),o}return TI({backend:r,attrs:{shape:s.shape,value:1,dtype:s.dtype}})}};function sN(t){const{inputs:e,backend:n,attrs:r}=t,{axis:s}=r;if(1===e.length)return oI({inputs:{input:e[0]},backend:n,attrs:{dim:s}});const i=e[0].shape,a=e[0].dtype;e.forEach((t=>{rt(i,t.shape,\"All tensors passed to stack must have matching shapes\"),nt(a===t.dtype,(()=>\"All tensors passed to stack must have matching dtypes\"))}));const o=[],l=fE({inputs:e.map((t=>{const e=oI({inputs:{input:t},backend:n,attrs:{dim:s}});return o.push(e),e})),backend:n,attrs:{axis:s}});return o.forEach((t=>n.disposeIntermediateTensorInfo(t))),l}const iN={kernelName:Yn,backendName:\"cpu\",kernelFunc:sN},aN={kernelName:Zn,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{paddings:i,constantValue:a}=r;NM(s,\"pad\");const o=i.map(((t,e)=>t[0]+s.shape[e]+t[1])),l=i.map((t=>t[0])),u=n.data.get(s.dataId).values,c=at(s.shape),h=s.shape.length,d=Rt(s.shape),p=at(o),f=o.length,m=Rt(o),g=xt(s.dtype,p);0!==a&&g.fill(a);for(let t=0;t<c;t++)g[zt(Bt(t,h,d).map(((t,e)=>t+l[e])),f,m)]=u[t];return{dataId:n.write(g,o,s.dtype),shape:o,dtype:s.dtype}}},oN=UM(((t,e)=>Math.pow(t,e))),lN=ok(Qn,oN),uN={kernelName:Qn,backendName:\"cpu\",kernelFunc:lN};function cN(t,e,n,r){const[s,i]=wc(t,r),a=ei(e,\"int32\"),o=$t(at(s),a),l=at(i);for(let t=0;t<o.length;++t){const e=t*l;let r=1;for(let t=0;t<l;++t)r*=n[e+t];o[t]=r}return{outVals:o,outShape:s,outDtype:a}}const hN={kernelName:er,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{axis:i,keepDims:a}=r;NM(s,\"prod\");const o=s.shape.length,l=gt(i,s.shape),u=_c(l,o);let c=l,h=s;const d=[];null!=u&&(h=kk({inputs:{x:s},backend:n,attrs:{perm:u}}),d.push(h),c=kc(c.length,o));const p=n.data.get(h.dataId).values,{outVals:f,outShape:m,outDtype:g}=cN(h.shape,h.dtype,p,c);let y=m;return a&&(y=Sc(m,l)),d.forEach((t=>n.disposeIntermediateTensorInfo(t))),n.makeTensorInfo(y,g,f)}};function dN(t,e,n,r){if(t===e||t<e&&n<0||e<t&&n>1)return $t(0,r);const s=$t(Math.abs(Math.ceil((e-t)/n)),r);e<t&&1===n&&(n=-1),s[0]=t;for(let t=1;t<s.length;t++)s[t]=s[t-1]+n;return s}const pN={kernelName:nr,backendName:\"cpu\",kernelFunc:function(t){const{backend:e,attrs:n}=t,{start:r,stop:s,dtype:i,step:a}=n,o=dN(r,s,a,i);return e.makeTensorInfo([o.length],i,o)}},fN=LM(sr,(t=>1/t)),mN={kernelName:sr,backendName:\"cpu\",kernelFunc:fN},gN={kernelName:ur,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{images:s}=e,{alignCorners:i,halfPixelCenters:a,size:o}=r;NM(s,\"resizeBilinear\");const l=Rt(s.shape),[u,c]=o,[h,d,p,f]=s.shape,m=n.data.get(s.dataId).values,g=new Float32Array(at([h,u,c,f])),y=[i&&u>1?d-1:d,i&&c>1?p-1:p],x=[i&&u>1?u-1:u,i&&c>1?c-1:c];let b=0;const v=y[0]/x[0],w=y[1]/x[1];for(let t=0;t<h;t++)for(let e=0;e<u;e++){let n;n=a?v*(e+.5)-.5:v*e;const r=Math.max(0,Math.floor(n)),s=n-r,i=Math.min(d-1,Math.ceil(n)),o=t*l[0]+r*l[1],u=t*l[0]+i*l[1];for(let t=0;t<c;t++){let e;e=a?w*(t+.5)-.5:w*t;const n=Math.max(0,Math.floor(e)),r=e-n,i=Math.min(p-1,Math.ceil(e)),c=o+n*l[2],h=u+n*l[2],d=o+i*l[2],y=u+i*l[2];for(let t=0;t<f;t++){const e=m[c+t],n=m[h+t],i=e+(m[d+t]-e)*r,a=i+(n+(m[y+t]-n)*r-i)*s;g[b++]=a}}}return n.makeTensorInfo([h,u,c,f],\"float32\",g)}},yN={kernelName:cr,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{images:s,dy:i}=e,{alignCorners:a}=r;NM([i,s],\"resizeBilinearGrad\");const o=Rt(s.shape),[l,u,c,h]=s.shape,[,d,p]=i.shape,f=new Float32Array(l*u*c*h),m=[a&&d>1?u-1:u,a&&p>1?c-1:c],g=[a&&d>1?d-1:d,a&&p>1?p-1:p],y=m[0]/g[0],x=m[1]/g[1],b=n.data.get(i.dataId).values;let v=0;for(let t=0;t<l;t++){const e=t*o[0];for(let t=0;t<d;t++){const n=t*y,r=Math.floor(n),s=Math.min(Math.ceil(n),u-1),i=e+r*o[1],a=e+s*o[1],l=n-r,d=1-l;for(let t=0;t<p;t++){const e=t*x,n=Math.floor(e),r=Math.min(Math.ceil(e),c-1),s=e-n,u=1-s,p=i+n*o[2],m=i+r*o[2],g=a+n*o[2],y=a+r*o[2],w=d*u,S=d*s,T=l*u,_=l*s;for(let t=0;t<h;t++){const e=b[v++];f[p+t]+=e*w,f[m+t]+=e*S,f[g+t]+=e*T,f[y+t]+=e*_}}}}return n.makeTensorInfo([l,c,u,h],\"float32\",f)}},xN={kernelName:or,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{images:s}=e,{alignCorners:i,halfPixelCenters:a,size:o}=r;NM(s,\"resizeNearestNeighbor\");const l=Rt(s.shape),[u,c]=o,[h,d,p,f]=s.shape,m=n.data.get(s.dataId).values,g=new Float32Array(h*u*c*f),y=[i&&u>1?d-1:d,i&&c>1?p-1:p],x=[i&&u>1?u-1:u,i&&c>1?c-1:c],b=y[0]/x[0],v=y[1]/x[1];let w=0;for(let t=0;t<h;t++){const e=t*l[0];for(let t=0;t<u;t++){const n=a?b*(t+.5):b*t;let r=Math.min(d-1,i?Math.round(n):Math.floor(n));a&&(r=Math.max(0,r));const s=e+r*l[1];for(let t=0;t<c;t++){const e=a?v*(t+.5):v*t;let n=Math.min(p-1,i?Math.round(e):Math.floor(e));a&&(n=Math.max(0,n));const r=s+n*l[2];for(let t=0;t<f;t++){const e=m[r+t];g[w++]=e}}}}return n.makeTensorInfo([h,u,c,f],s.dtype,g)}},bN={kernelName:lr,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{images:s,dy:i}=e,{alignCorners:a}=r;NM([i,s],\"resizeNearestNeighborGrad\");const o=Rt(s.shape),l=Rt(i.shape),[u,c,h,d]=s.shape,[,p,f]=i.shape,m=new Float32Array(u*c*h*d),g=n.data.get(i.dataId).values,y=[a&&p>1?c-1:c,a&&f>1?h-1:h],x=[a&&p>1?p-1:p,a&&f>1?f-1:f],b=y[0]/x[0],v=y[1]/x[1],w=1/b,S=1/v,T=2*Math.ceil(w)+2,_=2*Math.ceil(S)+2;for(let t=0;t<u;t++){const e=t*o[0];for(let t=0;t<c;t++){const n=e+t*o[1],r=Math.floor(t*w),s=Math.floor(r-T/2);for(let r=0;r<h;r++){const i=n+r*o[2],u=Math.floor(r*S),y=Math.floor(u-_/2);for(let n=0;n<d;n++){let o=0;for(let i=0;i<T;i++){const u=i+s;if(u<0||u>=p)continue;const d=e+u*l[1],m=u*b;if(t===Math.min(c-1,a?Math.round(m):Math.floor(m)))for(let t=0;t<_;t++){const e=t+y;if(e<0||e>=f)continue;const s=d+e*l[2],i=e*v;r===Math.min(h-1,a?Math.round(i):Math.floor(i))&&(o+=g[s+n])}}m[i+n]=o}}}}return n.makeTensorInfo(s.shape,s.dtype,m)}},vN={kernelName:dr,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{dims:i}=r;NM(s,\"reverse\");const a=s.shape.length,o=gt(i,s.shape);if(0===a)return OM({inputs:{x:s},backend:n});const l=new Vs(s.shape,s.dtype),u=n.bufferSync(s);for(let t=0;t<l.size;t++){const e=l.indexToLoc(t),n=e.slice();o.forEach((t=>n[t]=s.shape[t]-1-n[t])),l.set(u.get(...n),...e)}return n.makeTensorInfo(l.shape,l.dtype,l.values)}},wN={kernelName:Qr,backendName:\"cpu\",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{image:r}=t,{radians:s,fillValue:i,center:a}=e,o=n,l=xt(r.dtype,at(r.shape)),[u,c,h,d]=r.shape,[p,f]=Lp(a,c,h),m=Math.sin(s),g=Math.cos(s),y=o.data.get(r.dataId).values;for(let t=0;t<u;t++){const e=t*h*c*d;for(let t=0;t<c;t++){const n=t*(h*d);for(let r=0;r<h;r++){const s=r*d;for(let a=0;a<d;a++){const o=[u,t,r,a],x=o[2],b=o[1];let v=(x-p)*g-(b-f)*m,w=(x-p)*m+(b-f)*g;v=Math.round(v+p),w=Math.round(w+f);let S=i;\"number\"!=typeof i&&(S=3===a?255:i[a]),v>=0&&v<h&&w>=0&&w<c&&(S=y[e+w*(h*d)+v*d+a]),l[e+n+s+a]=S}}}}return{dataId:o.write(l,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},SN=LM(pr,(t=>{const e=Math.floor(t);return t-e<.5?Math.floor(t):t-e>.5?Math.ceil(t):e%2==0?e:e+1})),TN={kernelName:pr,backendName:\"cpu\",kernelFunc:SN},_N=KM((t=>1/Math.sqrt(t))),MN=DM(fr,_N),kN={kernelName:fr,backendName:\"cpu\",kernelFunc:MN};function EN(t,e,n,r,s,i,a,o,l,u){const c=[r/s,s],h=t.values,d=e.values;if(0===r)return wa(n,e.dtype);const p=wa(c,e.dtype);p.values.fill(l);for(let t=0;t<i;t++){const i=[];let l=0;for(let e=0;e<a;e++){const n=h[t*a+e];i.push(n),l+=n*o[e]}if(l<0||l>=r/s)throw new Error(`Invalid indices: ${i} does not index into ${n}`);for(let n=0;n<s;n++)u?p.values[l*s+n]+=d[t*s+n]:p.values[l*s+n]=0===e.rank?d[0]:d[t*s+n]}return p}const IN={kernelName:mr,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{indices:s,updates:i}=e,{shape:a}=r,{sliceRank:o,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=eo(0,s,a),d=EN(n.bufferSync(s),n.bufferSync(i),a,h,u,l,o,c,0,!0);return n.makeTensorInfo(a,d.dtype,d.values)}},CN={kernelName:gr,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n}=t,{condition:r,t:s,e:i}=e;NM([r,s,i],\"select\");const a=r.shape.length,o=n.data.get(r.dataId).values,l=n.data.get(s.dataId).values,u=n.data.get(i.dataId).values,c=ei(s.dtype,i.dtype),h=$t(at(s.shape),c);let d=0;const p=0===a||a>1||1===s.shape.length?1:at(s.shape.slice(1));for(let t=0;t<o.length;t++)for(let e=0;e<p;e++)1===o[t]?h[d++]=l[t]:h[d++]=u[t];return n.makeTensorInfo(s.shape,c,h)}},NN=zp,AN=Bp,RN=LM(yr,(t=>t>=0?AN*t:NN*(Math.exp(t)-1))),LN={kernelName:yr,backendName:\"cpu\",kernelFunc:RN},DN=LM(wr,(t=>t<0?-1:t>0?1:0)),FN={kernelName:wr,backendName:\"cpu\",kernelFunc:DN},$N=LM(br,(t=>Math.sin(t))),ON={kernelName:br,backendName:\"cpu\",kernelFunc:$N},PN=LM(vr,(t=>Math.sinh(t))),zN={kernelName:vr,backendName:\"cpu\",kernelFunc:PN},BN=Math.log(1.1920928955078125e-7)+2,UN=LM(Tr,(t=>{const e=t>-BN,n=t<BN,r=Math.exp(t);let s;return s=n?r:e?t:Math.log(1+r),s})),VN={kernelName:Tr,backendName:\"cpu\",kernelFunc:UN},WN={kernelName:kr,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{blockShape:i,paddings:a}=r;NM([s],\"spaceToBatchND\");const o=at(i),l=[[0,0]];l.push(...a);for(let t=1+i.length;t<s.shape.length;++t)l.push([0,0]);const u=aN.kernelFunc({inputs:{x:s},backend:n,attrs:{paddings:l,constantValue:0}}),c=Dp(u.shape,i,o,!1),h=Fp(c.length,i.length,!1),d=$p(u.shape,i,o,!1),p=pk({inputs:{x:u},backend:n,attrs:{shape:c}}),f=kk({inputs:{x:p},backend:n,attrs:{perm:h}}),m=pk({inputs:{x:f},backend:n,attrs:{shape:d}});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),m}};function GN(t,e,n,r,s,i,a){const o=e[0],l=i[0],u=new Array(l),c=new Array(o),h=e[1];if(0===l){if(0!==o)throw new Error(`Received SparseTensor with denseShape[0] = 0 but\\n         indices.shape[0] = ${o}`);return[bt(n,0),[0,h],bt(s,0),u,c]}let d=!0,p=0;const f=new Array(l).fill(0);for(let e=0;e<o;++e){const n=t[e*h];if(n<0)throw new Error(`indices(${e}, 0) is invalid: ${n} < 0`);if(n>=l)throw new Error(`indices(${e}, 0) is invalid: ${n} >= ${l}`);++f[n],d=d&&n>=p,p=n}let m=!0;for(let t=0;t<l;++t){const e=0===f[t];u[t]=e,m=m&&!e,f[t]=Math.max(f[t],1),t>0&&(f[t]+=f[t-1])}if(m&&d){const e=t,n=r;for(let t=0;t<o;++t)c[t]=t;return[e,[o,h],n,u,c]}{const e=f[l-1],i=bt(n,e*h),d=bt(s,e),p=new Array(l).fill(0);for(let e=0;e<o;++e){const n=t[e*h],s=p[n],a=(0===n?0:f[n-1])+s;p[n]++;for(let n=0;n<h;++n)i[a*h+n]=t[e*h+n];d[a]=r[e],c[e]=a}for(let t=0;t<l;++t)if(0===p[t]){const e=0===t?0:f[t-1];i[e*h+0]=t;for(let t=1;t<h;++t)i[e*h+t]=0;d[e]=a}return[i,[e,h],d,u,c]}}const HN={kernelName:Cr,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n}=t,{indices:r,values:s,denseShape:i,defaultValue:a}=e;if(1!==i.shape.length)throw new Error(`Dense shape must be a vector, saw:\\n        ${i.shape}`);if(2!==r.shape.length)throw new Error(`Indices must be a matrix, saw:\\n        ${r.shape}`);if(1!==s.shape.length)throw new Error(`Values must be a vector, saw:\\n        ${s.shape}`);if(0!==a.shape.length)throw new Error(`Default value must be a scalar, saw:\\n        ${a.shape}`);const o=n.data.get(r.dataId).values,l=n.data.get(s.dataId).values,u=n.data.get(i.dataId).values,c=n.data.get(a.dataId).values[0],[h,d,p,f,m]=GN(o,r.shape,r.dtype,l,s.dtype,u,c);return[n.makeTensorInfo(d,r.dtype,h),n.makeTensorInfo([d[0]],s.dtype,p),n.makeTensorInfo([f.length],\"bool\",new Uint8Array(f.map((t=>Number(t))))),n.makeTensorInfo([m.length],r.dtype,new Int32Array(m))]}};function jN(t,e,n,r,s){const i=at(r),a=e[0],o=s.length,l=[];let u=1,c=-1;for(let t=0;t<o;++t){const e=s[t];if(-1===e){if(-1!==c)throw new Error(`only one output dimension may be -1, not both ${c} and ${t}`);c=t,l.push(1)}else{if(e<0)throw new Error(`size ${t} must be non-negative, not ${e}`);u*=e,l.push(e)}}if(-1!==c){if(u<=0)throw new Error(\"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero\");const t=Math.trunc(i/u);if(u*t!==i)throw new Error(`Input to reshape is a SparseTensor with ${i}\\n          dense values, but the requested shape requires a multiple of ${u}. inputShape=${r} outputShape= ${l}`);l[c]=t}const h=at(l);if(h!==i)throw new Error(`Input to reshape is a tensor with ${i} dense values, but the requested shape has ${h}. inputShape=${r} outputShape=${l}`);const d=r.length,p=[];if(d>0){p[d-1]=1;for(let t=d-2;t>=0;--t)p[t]=p[t+1]*r[t+1]}const f=[];if(o>0){f[o-1]=1;for(let t=o-2;t>=0;--t)f[t]=f[t+1]*l[t+1]}const m=bt(n,a*o);for(let e=0;e<a;++e){let n=0;for(let r=0;r<d;++r)n+=t[e*d+r]*p[r];for(let t=0;t<o;++t)m[e*o+t]=Math.trunc(n/f[t]),n%=f[t]}return[m,[a,o],l]}const qN={kernelName:Nr,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n}=t,{inputIndices:r,inputShape:s,newShape:i}=e;if(2!==r.shape.length)throw new Error(`Input indices should be a matrix but received shape\\n        ${r.shape}`);if(1!==s.shape.length)throw new Error(`Input shape should be a vector but received shape\\n        ${s.shape}`);if(1!==i.shape.length)throw new Error(`Target shape should be a vector but received shape ${i.shape}`);const a=Array.from(n.data.get(s.dataId).values),o=n.data.get(r.dataId).values,l=Array.from(n.data.get(i.dataId).values),[u,c,h]=jN(o,r.shape,r.dtype,a,l);return[n.makeTensorInfo(c,r.dtype,u),n.makeTensorInfo([h.length],i.dtype,new Int32Array(h))]}};function XN(t,e,n,r,s,i=!1,a=0){const o=r.length;if(o!==s.length)throw new Error(\"segmentIds and indices should have same size.\");const l=[e[0],t.length/e[0]],u=l[1],c=o>0?s[o-1]+1:0;if(c<0)throw new Error(\"segment ids must be >= 0\");const h=e.slice();h[0]=c;const d=bt(n,h.reduce(((t,e)=>t*e),1));if(0===o)return c>0&&d.fill(a),[d,h];if(c<=0)throw new Error(\"segment ids must be >= 0\");let p=0,f=1,m=0,g=s[p];for(;;){let e=0;if(f<o){if(e=s[f],g===e){++f;continue}if(g>=e)throw new Error(\"segment ids are not increasing\")}if(g<0||g>=c)throw new Error(`Segment id ${g} out of range [0, ${c}), possibly because segmentIds input is not sorted.`);g>m&&d.fill(a,m*u,g*u);for(let e=p;e<f;++e){const n=r[e];if(n<0||n>=l[0])throw new Error(`Bad: indices[${e}] == ${r[e]} out of range [0, ${l[0]})`);for(let e=0;e<u;e++)d[g*u+e]+=t[n*u+e]}if(i)for(let t=0;t<u;t++)d[g*u+t]/=f-p;if(p=f,++f,m=g+1,g=e,f>o)break}return m<c&&d.fill(a,m*u,c*u),[d,h]}const KN={kernelName:Ar,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n}=t,{data:r,indices:s,segmentIds:i}=e;if(r.shape.length<1)throw new Error(\"Data should be at least 1 dimensional but received scalar\");if(1!==s.shape.length)throw new Error(`Indices should be a vector but received shape\\n          ${s.shape}`);if(1!==i.shape.length)throw new Error(`Segment ids should be a vector but received shape\\n          ${i.shape}`);const a=n.data.get(r.dataId).values,o=n.data.get(s.dataId).values,l=n.data.get(i.dataId).values,[u,c]=XN(a,r.shape,r.dtype,o,l,!0);return n.makeTensorInfo(c,r.dtype,u)}},YN={kernelName:Rr,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n}=t,{data:r,indices:s,segmentIds:i}=e;if(r.shape.length<1)throw new Error(\"Data should be at least 1 dimensional but received scalar\");if(1!==s.shape.length)throw new Error(`Indices should be a vector but received shape\\n         ${s.shape}`);if(1!==i.shape.length)throw new Error(`Segment ids should be a vector but received shape\\n         ${i.shape}`);const a=n.data.get(r.dataId).values,o=n.data.get(s.dataId).values,l=n.data.get(i.dataId).values,[u,c]=XN(a,r.shape,r.dtype,o,l);return n.makeTensorInfo(c,r.dtype,u)}},ZN={kernelName:Lr,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{sparseIndices:s,sparseValues:i,defaultValue:a}=e,{outputShape:o}=r,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:d}=eo(0,s,o),p=EN(n.bufferSync(s),n.bufferSync(i),o,d,c,u,l,h,n.data.get(a.dataId).values[0],!1);return n.makeTensorInfo(o,p.dtype,p.values)}},JN={kernelName:Er,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{numOrSizeSplits:i,axis:a}=r,o=gt(a,s.shape)[0],l=uf(s,i,o),u=new Array(s.shape.length).fill(0),c=s.shape.slice();return l.map((t=>{const e=[...c];e[o]=t;const r=Jk({inputs:{x:s},backend:n,attrs:{begin:u,size:e}});return u[o]+=t,r}))}},QN=KM((t=>Math.sqrt(t))),tA=LM(_r,(t=>Math.sqrt(t))),eA={kernelName:_r,backendName:\"cpu\",kernelFunc:tA},nA={kernelName:Fr,backendName:\"cpu\",kernelFunc:({inputs:t,backend:e})=>{const{x:n}=t,r=e;NM(n,\"square\");const s=r.data.get(n.dataId).values,i=new Float32Array(s.length);for(let t=0;t<s.length;++t){const e=s[t];i[t]=e*e}return{dataId:r.write(i,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},rA=UM(((t,e)=>{const n=t-e;return n*n})),sA=ok(Dr,rA),iA={kernelName:Dr,backendName:\"cpu\",kernelFunc:sA},aA=LM(Zr,((t,e)=>{const n=e;return isNaN(t)?NaN:t>0?1:n.alpha})),oA={kernelName:Zr,backendName:\"cpu\",kernelFunc:aA};function lA(t,e,n,r){const s=wa(t,e.dtype);for(let t=0;t<s.size;t++){const i=s.indexToLoc(t),a=new Array(i.length);for(let t=0;t<a.length;t++)a[t]=i[t]*n[t]+r[t];s.set(e.get(...a),...i)}return s}const uA={kernelName:$r,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{begin:i,end:a,strides:o,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:d}=r;NM(s,\"stridedSlice\");const{nonStrided:p,$begin:f,$strides:m,size:g,newShape:y,outShape:x}=xo(s.shape,i,a,o,l,u,c,h,d),b=pk({inputs:{x:s},backend:n,attrs:{shape:y}});let v;if(p){const t=Jk({inputs:{x:b},backend:n,attrs:{begin:f,size:g}});v=pk({inputs:{x:t},backend:n,attrs:{shape:x}}),n.disposeIntermediateTensorInfo(t)}else if(x.some((t=>0===t)))v=n.makeTensorInfo(x,s.dtype,[]);else{const t=lA(x,n.bufferSync(b),m,f);v=n.makeTensorInfo(t.shape,t.dtype,t.values)}const w=pk({inputs:{x:v},backend:n,attrs:{shape:x}});return n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(v),w}};class cA{constructor(t,e,n,r,s,i){this.separator=Rs(t),this.nGramWidths=e,this.leftPad=Rs(n),this.rightPad=Rs(r),this.padWidth=s,this.preserveShort=i}getPadWidth(t){return Math.min(this.padWidth<0?t-1:this.padWidth,t-1)}getNumNGrams(t,e){const n=this.getPadWidth(e);return Math.max(0,t+2*n-e+1)}createNGrams(t,e,n,r,s,i){for(let a=0;a<s;++a){const o=this.getPadWidth(i),l=Math.max(0,o-a),u=Math.max(0,o-(s-(a+1))),c=i-(l+u),h=e+(l>0?0:a-o);let d=0;d+=l*this.leftPad.length;for(let e=0;e<c;++e)d+=t[h+e].length;d+=u*this.rightPad.length,d+=(l+u+c-1)*this.separator.length,n[r+a]=new Uint8Array(d);const p=n[r+a];let f=0;const m=t=>t.forEach((t=>p[f++]=t));for(let t=0;t<l;++t)m(this.leftPad),m(this.separator);for(let e=0;e<c-1;++e)m(t[h+e]),m(this.separator);if(c>0){m(t[h+c-1]);for(let t=0;t<u;++t)m(this.separator),m(this.rightPad)}else{for(let t=0;t<u-1;++t)m(this.rightPad),m(this.separator);m(this.rightPad)}}}compute(t,e){const n=t.length,r=e.length;if(r>0){let t=e[0];if(0!==t)throw new Error(`First split value must be 0, got ${t}`);for(let s=1;s<r;++s){let r=e[s]>=t;if(r=r&&e[s]<=n,!r)throw new Error(`Invalid split value ${e[s]}, must be in [${t}, ${n}]`);t=e[s]}if(t!==n)throw new Error(`Last split value must be data size. Expected ${n}, got ${t}`)}const s=r-1,i=bt(\"int32\",r);if(0===n||0===r){const t=new Array(n);for(let t=0;t<=s;++t)i[t]=0;return[t,i]}i[0]=0;for(let t=1;t<=s;++t){const n=e[t]-e[t-1];let r=0;this.nGramWidths.forEach((t=>{r+=this.getNumNGrams(n,t)})),this.preserveShort&&n>0&&0===r&&(r=1),i[t]=i[t-1]+r}const a=new Array(i[s]);for(let n=0;n<s;++n){const r=e[n];let s=i[n];if(this.nGramWidths.forEach((i=>{const o=e[n+1]-e[n],l=this.getNumNGrams(o,i);this.createNGrams(t,r,a,s,l,i),s+=l})),this.preserveShort&&s===i[n]){const i=e[n+1]-e[n];if(0===i)continue;const o=i+2*this.padWidth,l=1;this.createNGrams(t,r,a,s,l,o)}}return[a,i]}}function hA(t,e,n,r,s,i,a,o){return new cA(n,r,s,i,a,o).compute(t,e)}const dA={kernelName:Or,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{separator:s,nGramWidths:i,leftPad:a,rightPad:o,padWidth:l,preserveShortSequences:u}=r,{data:c,dataSplits:h}=e,d=n.data.get(c.dataId).values,p=n.data.get(h.dataId).values,[f,m]=hA(d,p,s,i,a,o,l,u);return[n.makeTensorInfo([f.length],\"string\",f),n.makeTensorInfo(h.shape,\"int32\",m)]}};function pA(t,e,n,r){if(!t.length)return;if(0===e.length){for(let e=0;e<t.length;++e)r.push(t.subarray(e,e+1));return}if(1===e.length){const s=e[0];let i=t.indexOf(s);for(;-1!==i;){const e=t.subarray(0,i);n&&0===e.length||r.push(e),i=(t=t.subarray(i+1)).indexOf(s)}return void(n&&0===t.length||r.push(t))}let s=0;for(let i=0;i<t.length+1;i++)if(i===t.length||-1!==e.indexOf(t[i])){const e=t.subarray(s,i);n&&0===e.length||r.push(e),s=i+1}}function fA(t,e,n){const r=t.length,s=[];let i=0,a=0;const o=new Array(r);for(let l=0;l<r;++l){const r=s.length;pA(t[l],e,n,s);const u=s.length-r;o[l]=u,i+=u,a=Math.max(a,u)}const l=bt(\"int32\",2*i),u=new Array(i),c=[r,a];let h=0;for(let t=0;t<r;++t)for(let e=0;e<o[t];++e)l[2*h]=t,l[2*h+1]=e,u[h]=s[h],++h;return[l,u,c]}const mA={kernelName:Pr,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{skipEmpty:s}=r,{input:i,delimiter:a}=e;if(\"string\"!==i.dtype)throw new Error(\"Input must be of datatype string\");if(1!==i.shape.length)throw new Error(`Input must be a vector, got shape: ${i.shape}`);if(0!==a.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${a.shape}`);const o=n.data.get(i.dataId).values,l=n.data.get(a.dataId).values[0],[u,c,h]=fA(o,l,s),d=c.length;return[n.makeTensorInfo([d,2],\"int32\",u),n.makeTensorInfo([d],\"string\",c),n.makeTensorInfo([2],\"int32\",new Int32Array(h))]}};function gA(t,e){const n=bt(\"int32\",t.length);for(let r=0;r<t.length;++r)n[r]=Es(t[r]).modulo(e).getLowBitsUnsigned();return n}const yA={kernelName:zr,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{numBuckets:s}=r,{input:i}=e;if(\"string\"!==i.dtype)throw new Error(\"Input must be of datatype string\");if(s<=0)throw new Error(\"Number of buckets must be at least 1\");const a=gA(n.data.get(i.dataId).values,s);return n.makeTensorInfo(i.shape,\"int32\",a)}},xA=LM(Ur,(t=>Math.tan(t))),bA={kernelName:Ur,backendName:\"cpu\",kernelFunc:xA},vA=LM(Vr,(t=>Math.tanh(t)));function wA(t,e){const n=new Array(t.rank);for(let r=0;r<n.length;r++)n[r]=t.shape[r]*e[r];const r=wa(n,t.dtype);for(let e=0;e<r.values.length;++e){const n=r.indexToLoc(e),s=new Array(t.rank);for(let e=0;e<s.length;e++)s[e]=n[e]%t.shape[e];const i=t.locToIndex(s);r.values[e]=t.values[i]}return r}const SA=(t,e)=>{const n=e.value-t.value;return 0===n?t.index-e.index:n};function TA(t,e,n=0,r=t.length-1){for(;r>n;){if(r-n>600){const s=r-n+1,i=e-n+1,a=Math.log(s),o=.5*Math.exp(2*a/3),l=.5*Math.sqrt(a*o*(s-o)/s)*Math.sign(i-s/2);TA(t,e,Math.max(n,Math.floor(e-i*o/s+l)),Math.min(r,Math.floor(e+(s-i)*o/s+l)))}const s=t[e];let i=n,a=r;for(J(t,n,e),SA(t[r],s)>0&&J(t,n,r);i<a;){for(J(t,i,a),i++,a--;SA(t[i],s)<0;)i+=1;for(;SA(t[a],s)>0;)a-=1}0===SA(t[n],s)?J(t,n,a):(a+=1,J(t,a,r)),a<=e&&(n=a+1),e<=a&&(r=a-1)}}function _A(t,e,n,r,s){const i=e[e.length-1],[a,o]=[t.length/i,i],l=xt(n,a*r),u=xt(\"int32\",a*r);for(let e=0;e<a;e++){const n=e*o,i=t.subarray(n,n+o);let a=new Array(i.length);i.forEach(((t,e)=>a[e]={value:t,index:e})),r<a.length&&(TA(a,r),a=a.slice(0,r)),s&&a.sort(SA);const c=e*r,h=l.subarray(c,c+r),d=u.subarray(c,c+r);for(let t=0;t<r;t++)h[t]=a[t].value,d[t]=a[t].index}const c=e.slice();return c[c.length-1]=r,[wa(c,n,l),wa(c,\"int32\",u)]}function MA(t,e,n){switch(n){case\"reflect\":return function(t,e){let n=t;if(n<0)if(e<=1)n=0;else{const t=2*e;n<t&&(n=t*Math.trunc(-n/t)+n),n=n<-e?n+t:-n-1}else if(n>e-1)if(e<=1)n=0;else{const t=2*e;n-=t*Math.trunc(n/t),n>=e&&(n=t-n-1)}return Y(0,n,e-1)}(t,e);case\"wrap\":return function(t,e){let n=t;if(n<0)if(e<=1)n=0;else{const t=e-1;n+=e*(Math.trunc(-n/t)+1)}else if(n>e-1)if(e<=1)n=0;else{const t=e-1;n-=e*Math.trunc(n/t)}return Y(0,n,e-1)}(t,e);case\"nearest\":return function(t,e){return Y(0,t,e-1)}(t,e);case\"constant\":default:return function(t,e){return t}(t)}}function kA(t,e,n,r,s,i,a,o,l,u,c){return 0<=o&&o<e&&0<=l&&l<n?t[a*r+o*s+l*i+u]:c}function EA(t,e,n,r,s,i,a,o,l,u,c){return kA(t,e,n,r,s,i,a,Math.round(o),Math.round(l),u,c)}function IA(t,e,n,r,s,i,a,o,l,u,c){const h=Math.floor(o),d=Math.floor(l),p=h+1,f=d+1;return(p-o)*((f-l)*kA(t,e,n,r,s,i,a,h,d,u,c)+(l-d)*kA(t,e,n,r,s,i,a,h,f,u,c))+(o-h)*((f-l)*kA(t,e,n,r,s,i,a,p,d,u,c)+(l-d)*kA(t,e,n,r,s,i,a,p,f,u,c))}function CA(t,e,n,r){const s=gt(e,n)[0],i=[1,n[0],1];for(let t=0;t<s;t++)i[0]*=n[t];i[1]=n[s];for(let t=s+1;t<n.length;t++)i[2]*=n[t];const a={},o=new Int32Array(n[s]),l=new Vs(i,r,t),u=[],c=1===i[0]&&1===i[2];for(let e=0;e<n[s];e++){let n;if(c)n=t[e].toString();else{const t=[];for(let n=0;n<i[0];n++)for(let r=0;r<i[2];r++)t.push(l.get(n,e,r));n=t.join(\",\")}if(void 0!==a[n])o[e]=a[n];else{const t=Object.keys(a).length;a[n]=t,o[e]=t,u.push(e)}}const h=i.slice();h[1]=Object.keys(a).length;const d=new Vs(h,r);u.forEach(((t,e)=>{for(let n=0;n<i[0];n++)for(let r=0;r<i[2];r++)d.set(l.get(n,t,r),n,e,r)}));const p=n.slice();return p[s]=h[1],{outputValues:d.values,outputShape:p,indices:o}}const NA=[yk,bk,wk,Tk,dk,_k,Ik,Ck,Nk,Ak,Lk,Fk,Ok,Bk,Vk,jk,qk,Xk,Kk,gk,Yk,tE,rE,sE,ak,oE,uE,ek,cE,mE,xE,bE,yE,wE,SE,vE,_E,kE,EE,IE,CE,NE,RE,LE,DE,FE,$E,PE,OE,fI,HE,$M,jE,KE,rI,aI,lI,hI,SI,_I,MI,II,AI,RI,LI,FI,OI,BI,WI,PM,GI,pE,jI,XI,YI,BM,QI,nC,sC,oC,uC,dC,fC,yC,xC,bC,MC,kC,EC,IC,CC,NC,SC,AC,RC,FC,$C,zC,VC,VE,GC,jC,XC,YC,QC,tN,rN,iN,aN,uN,GM,hN,pN,sk,mN,jM,XM,fk,gN,yN,xN,bN,vN,wN,TN,kN,IN,CN,LN,JM,FN,ON,zN,Qk,UC,VN,WN,HN,qN,KN,YN,ZN,JN,eA,nA,iA,oA,uA,dA,mA,yA,xI,GE,bA,{kernelName:Vr,backendName:\"cpu\",kernelFunc:vA},{kernelName:Wr,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{reps:i}=r;NM(s,\"tile\");const a=wA(n.bufferSync(s),i);return n.makeTensorInfo(a.shape,a.dtype,a.values)}},{kernelName:Gr,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{k:i,sorted:a}=r;NM(s,\"topk\");const o=n.data.get(s.dataId).values,[l,u]=_A(o,s.shape,s.dtype,i,a);return[n.makeTensorInfo(l.shape,l.dtype,l.values),n.makeTensorInfo(u.shape,u.dtype,u.values)]}},Ek,{kernelName:Hr,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,attrs:n,backend:r}=t,{image:s,transforms:i}=e,{interpolation:a,fillMode:o,fillValue:l,outputShape:u}=n,[c,h,d,p]=s.shape,[f,m]=null!=u?u:[h,d],g=[c,f,m,p],y=Rt(s.shape),x=y[0],b=y[1],v=y[2],w=xt(s.dtype,at(g));w.fill(l);const S=r.data.get(s.dataId).values,T=r.data.get(i.dataId).values;for(let t=0;t<c;++t){const e=1===i.shape[0]?T:T.subarray(8*t,8*t+8);for(let n=0;n<f;++n)for(let r=0;r<m;++r)for(let s=0;s<p;++s){let i;const u=e[6]*r+e[7]*n+1;if(0===u)continue;const c=(e[0]*r+e[1]*n+e[2])/u,p=(e[3]*r+e[4]*n+e[5])/u,f=MA(c,d,o),m=MA(p,h,o);switch(a){case\"nearest\":i=EA(S,h,d,x,b,v,t,m,f,s,l);break;case\"bilinear\":i=IA(S,h,d,x,b,v,t,m,f,s,l);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${a}`)}w[t*x+n*b+r*v+s]=i}return r.makeTensorInfo(g,s.dtype,w)}return{dataId:r.write(w,g,s.dtype),shape:s.shape,dtype:s.dtype}}},{kernelName:qr,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,attrs:n,backend:r}=t,{axis:s}=n,{x:i}=e;NM(i,\"unique\");const a=r.data.get(i.dataId).values,{outputValues:o,outputShape:l,indices:u}=CA(a,s,i.shape,i.dtype);return[r.makeTensorInfo(l,i.dtype,o),r.makeTensorInfo([u.length],\"int32\",u)]}},{kernelName:Xr,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{value:s}=e;let{axis:i}=r;i<0&&(i+=s.shape.length);const a=s.shape.length,o=s.shape[i],l=new Array(a-1);let u=0;for(let t=0;t<a;t++)t!==i&&(l[u++]=s.shape[t]);const c=new Array(a).fill(0),h=s.shape.slice();h[i]=1;const d=new Array(o);for(let t=0;t<d.length;t++){c[i]=t;const e=Jk({inputs:{x:s},backend:n,attrs:{begin:c,size:h}});d[t]=pk({inputs:{x:e},backend:n,attrs:{shape:l}}),n.disposeIntermediateTensorInfo(e)}return d}},{kernelName:Kr,backendName:\"cpu\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,segmentIds:i}=e,{numSegments:a}=r;NM(s,\"unsortedSegmentSum\");const o=[],l=[],u=s.shape.length-i.shape.length;let c=i;for(let t=0;t<u;++t){const e=oI({inputs:{input:c},backend:n,attrs:{dim:t+1}});c=e,l.push(e)}for(let t=0;t<a;++t){const e=Is(t,\"int32\"),r=n.makeTensorInfo([],\"int32\",e),i=XE({inputs:{a:r,b:c},backend:n}),a=ik({inputs:{x:i},backend:n,attrs:{dtype:\"float32\"}}),u=UE({inputs:{a,b:s},backend:n}),h=WE({inputs:{x:u},backend:n,attrs:{axis:0,keepDims:!1}});o.push(h),l.push(r),l.push(i),l.push(a),l.push(u),l.push(h)}const h=sN({inputs:o,backend:n,attrs:{axis:0}});return l.forEach((t=>n.disposeIntermediateTensorInfo(t))),h}},nN];for(const t of NA)ls(t);const AA={},RA={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function LA(t){if(!(t in AA)){const e=function(t){if(1!==t&&2!==t)throw new Error(\"Cannot get WebGL rendering context, WebGL is disabled.\");const e=function(t){if(\"undefined\"!=typeof OffscreenCanvas&&2===t)return new OffscreenCanvas(300,150);if(\"undefined\"!=typeof document)return document.createElement(\"canvas\");throw new Error(\"Cannot create a canvas in this context\")}(t);return e.addEventListener(\"webglcontextlost\",(e=>{e.preventDefault(),delete AA[t]}),!1),1===t?e.getContext(\"webgl\",RA)||e.getContext(\"experimental-webgl\",RA):e.getContext(\"webgl2\",RA)}(t);if(null===e)return console.log(\"Could not get context for WebGL version\",t),null;AA[t]=e}const e=AA[t];return e.isContextLost()?(delete AA[t],LA(t)):(e.disable(e.DEPTH_TEST),e.disable(e.STENCIL_TEST),e.disable(e.BLEND),e.disable(e.DITHER),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SAMPLE_COVERAGE),e.enable(e.SCISSOR_TEST),e.enable(e.CULL_FACE),e.cullFace(e.BACK),AA[t])}var DA,FA,$A;function OA(t,e){return[e,t]}function PA(t){const e=at(t);return ht(Math.ceil(e/4))}function zA(t,e){return[Math.max(1,Math.ceil(e/2)),Math.max(1,Math.ceil(t/2))]}function BA(t,e){const n=t;let r,s,i,a,o,l,u,c,h,d;return 2===jt().getNumber(\"WEBGL_VERSION\")?(r=n.R32F,s=n.R16F,i=n.RGBA16F,a=n.RGBA32F,o=n.RED,u=4,c=1,h=n.HALF_FLOAT,d=n.FLOAT):(r=t.RGBA,s=t.RGBA,i=t.RGBA,a=n.RGBA,o=t.RGBA,u=4,c=4,h=null!=e?e.HALF_FLOAT_OES:null,d=t.FLOAT),l=t.RGBA,{internalFormatFloat:r,internalFormatHalfFloat:s,internalFormatPackedHalfFloat:i,internalFormatPackedFloat:a,textureFormatFloat:o,downloadTextureFormat:l,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:h,textureTypeFloat:d}}function UA(t,e){const n=e();return jt().getBool(\"DEBUG\")&&function(t){const e=t.getError();if(e!==t.NO_ERROR)throw new Error(\"WebGL Error: \"+function(t,e){switch(e){case t.NO_ERROR:return\"NO_ERROR\";case t.INVALID_ENUM:return\"INVALID_ENUM\";case t.INVALID_VALUE:return\"INVALID_VALUE\";case t.INVALID_OPERATION:return\"INVALID_OPERATION\";case t.INVALID_FRAMEBUFFER_OPERATION:return\"INVALID_FRAMEBUFFER_OPERATION\";case t.OUT_OF_MEMORY:return\"OUT_OF_MEMORY\";case t.CONTEXT_LOST_WEBGL:return\"CONTEXT_LOST_WEBGL\";default:return`Unknown error code ${e}`}}(t,e))}(t),n}function VA(t){return!!(jt().getBool(\"WEBGL_RENDER_FLOAT32_ENABLED\")||0===t||5.96e-8<Math.abs(t)&&Math.abs(t)<65504)}function WA(t,e){return ZA(t,(()=>t.getExtension(e)),'Extension \"'+e+'\" not supported on this browser.')}!function(t){t[t.DENSE=0]=\"DENSE\",t[t.SHARED_BATCH=1]=\"SHARED_BATCH\"}(DA||(DA={})),function(t){t[t.RENDER=0]=\"RENDER\",t[t.UPLOAD=1]=\"UPLOAD\",t[t.PIXELS=2]=\"PIXELS\",t[t.DOWNLOAD=3]=\"DOWNLOAD\"}(FA||(FA={})),function(t){t[t.UNPACKED_FLOAT16=0]=\"UNPACKED_FLOAT16\",t[t.UNPACKED_FLOAT32=1]=\"UNPACKED_FLOAT32\",t[t.PACKED_4X1_UNSIGNED_BYTE=2]=\"PACKED_4X1_UNSIGNED_BYTE\",t[t.PACKED_2X2_FLOAT32=3]=\"PACKED_2X2_FLOAT32\",t[t.PACKED_2X2_FLOAT16=4]=\"PACKED_2X2_FLOAT16\"}($A||($A={}));const GA=/ERROR: [0-9]+:([0-9]+):/g;function HA(t,e){if(UA(t,(()=>t.validateProgram(e))),!1===t.getProgramParameter(e,t.VALIDATE_STATUS))throw console.log(t.getProgramInfoLog(e)),new Error(\"Shader program validation failed.\")}function jA(t,e,n,r,s,i,a){const o=t.getAttribLocation(e,n);return-1!==o&&(UA(t,(()=>t.bindBuffer(t.ARRAY_BUFFER,r))),UA(t,(()=>t.vertexAttribPointer(o,s,t.FLOAT,!1,i,a))),UA(t,(()=>t.enableVertexAttribArray(o))),!0)}function qA(t,e,n,r){UA(t,(()=>function(t,e,n){(function(t,e){const n=t.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=e+t.TEXTURE0;if(r<t.TEXTURE0||r>n)throw new Error(`textureUnit must be in [gl.TEXTURE0, gl.TEXTURE${n}].`)})(t,n),UA(t,(()=>t.activeTexture(t.TEXTURE0+n))),UA(t,(()=>t.bindTexture(t.TEXTURE_2D,e)))}(t,e,r))),UA(t,(()=>t.uniform1i(n,r)))}function XA(t,e,n){UA(t,(()=>t.bindFramebuffer(t.FRAMEBUFFER,n))),UA(t,(()=>t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,e,0)))}function KA(t,e){UA(t,(()=>t.bindFramebuffer(t.FRAMEBUFFER,e))),UA(t,(()=>t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,null,0)))}function YA(t){const e=t.checkFramebufferStatus(t.FRAMEBUFFER);if(e!==t.FRAMEBUFFER_COMPLETE)throw new Error(\"Error binding framebuffer: \"+function(t,e){switch(e){case t.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return\"FRAMEBUFFER_INCOMPLETE_ATTACHMENT\";case t.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return\"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT\";case t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return\"FRAMEBUFFER_INCOMPLETE_DIMENSIONS\";case t.FRAMEBUFFER_UNSUPPORTED:return\"FRAMEBUFFER_UNSUPPORTED\";default:return`unknown error ${e}`}}(t,e))}function ZA(t,e,n){const r=UA(t,(()=>e()));if(null==r)throw new Error(n);return r}function JA(t,e=2){return at(t.slice(0,t.length-e))}function QA(t){if(0===t.length)throw Error(\"Cannot get rows and columns of an empty shape array.\");return[t.length>1?t[t.length-2]:1,t[t.length-1]]}function tR(t){let e=[1,1,1];return 0===t.length||1===t.length&&1===t[0]||(e=[JA(t),...QA(t)]),e}function eR(t){return t%2==0}function nR(t,e){if(lt(t=t.slice(-2),e=e.slice(-2)))return!0;if(!t.length||!e.length)return!0;if(0===t[0]||0===t[1]||0===e[0]||0===e[1])return!0;if(t.length!==e.length){const n=t.slice(-1)[0],r=e.slice(-1)[0];if(n===r)return!0;if(eR(n)&&eR(r)&&(1===t[0]||1===e[0]))return!0}return t[1]===e[1]&&eR(t[0])&&eR(e[0])}let rR,sR;function iR(t,e){return null!=t.getExtension(e)}function aR(t){try{if(null!=LA(t))return!0}catch(t){return console.log(\"Error when getting WebGL context: \",t),!1}return!1}function oR(t){const e=BA(t),n=t.createTexture();t.bindTexture(t.TEXTURE_2D,n),t.texImage2D(t.TEXTURE_2D,0,e.internalFormatFloat,1,1,0,e.textureFormatFloat,e.textureTypeFloat,null);const r=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,r),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,n,0);const s=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(n),t.deleteFramebuffer(r),s}function lR(t,e){Array.isArray(t)||(t=[t]),t.forEach((t=>{null!=t&&nt(\"complex64\"!==t.dtype,(()=>`${e} does not support complex64 tensors in the WebGL backend.`))}))}const uR=jt();function cR(){let t,e,n,r,s,i,a,o,l,u;return 2===jt().getNumber(\"WEBGL_VERSION\")?(t=\"#version 300 es\",e=\"in\",n=\"out\",r=\"in\",s=\"texture\",i=\"outputColor\",a=\"out vec4 outputColor;\",o=\"\\n      bool isnan_custom(float val) {\\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\\n      }\\n\\n      bvec4 isnan_custom(vec4 val) {\\n        return bvec4(isnan_custom(val.x),\\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\\n      }\\n\\n      #define isnan(value) isnan_custom(value)\\n    \",l=\"\",u=\"\\n      #define round(value) newRound(value)\\n      int newRound(float value) {\\n        return int(floor(value + 0.5));\\n      }\\n\\n      ivec4 newRound(vec4 value) {\\n        return ivec4(floor(value + vec4(0.5)));\\n      }\\n    \"):(t=\"\",e=\"attribute\",n=\"varying\",r=\"varying\",s=\"texture2D\",i=\"gl_FragColor\",a=\"\",o=\"\\n      #define isnan(value) isnan_custom(value)\\n      bool isnan_custom(float val) {\\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\\n      }\\n      bvec4 isnan_custom(vec4 val) {\\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\\n      }\\n    \",l=\"\\n      uniform float INFINITY;\\n\\n      bool isinf(float val) {\\n        return abs(val) == INFINITY;\\n      }\\n      bvec4 isinf(vec4 val) {\\n        return equal(abs(val), vec4(INFINITY));\\n      }\\n    \",u=\"\\n      int round(float value) {\\n        return int(floor(value + 0.5));\\n      }\\n\\n      ivec4 round(vec4 value) {\\n        return ivec4(floor(value + vec4(0.5)));\\n      }\\n    \"),{version:t,attribute:e,varyingVs:n,varyingFs:r,texture2D:s,output:i,defineOutput:a,defineSpecialNaN:o,defineSpecialInf:l,defineRound:u}}function hR(t,e,n=\"index\"){const r=Rt(e);return r.map(((e,s)=>`int ${t[s]} = ${n} / ${e}; ${s===r.length-1?`int ${t[s+1]} = ${n} - ${t[s]} * ${e}`:`index -= ${t[s]} * ${e}`};`)).join(\"\")}function dR(t,e,n=\"index\"){const r=Rt(e);return r.map(((e,s)=>`int ${t[s]} = ${n} / outShapeStrides[${s}]; ${s===r.length-1?`int ${t[s+1]} = ${n} - ${t[s]} * outShapeStrides[${s}]`:`index -= ${t[s]} * outShapeStrides[${s}]`};`)).join(\"\")}function pR(t){const e=Rt(t).map((t=>t.toString()));return`\\n  int getFlatIndex(ivec3 coords) {\\n    return coords.x * ${e[0]} + coords.y * ${e[1]} + coords.z;\\n  }\\n`}uR.registerFlag(\"HAS_WEBGL\",(()=>uR.getNumber(\"WEBGL_VERSION\")>0)),uR.registerFlag(\"WEBGL_VERSION\",(()=>aR(2)?2:aR(1)?1:0)),uR.registerFlag(\"WEBGL_CHECK_NUMERICAL_PROBLEMS\",(()=>!1)),uR.registerFlag(\"WEBGL_BUFFER_SUPPORTED\",(()=>2===uR.get(\"WEBGL_VERSION\"))),uR.registerFlag(\"WEBGL_CPU_FORWARD\",(()=>!0)),uR.registerFlag(\"WEBGL_FORCE_F16_TEXTURES\",(()=>!1)),uR.registerFlag(\"WEBGL_PACK\",(()=>uR.getBool(\"HAS_WEBGL\"))),uR.registerFlag(\"WEBGL_PACK_NORMALIZATION\",(()=>uR.getBool(\"WEBGL_PACK\"))),uR.registerFlag(\"WEBGL_PACK_CLIP\",(()=>uR.getBool(\"WEBGL_PACK\"))),uR.registerFlag(\"WEBGL_PACK_DEPTHWISECONV\",(()=>uR.getBool(\"WEBGL_PACK\"))),uR.registerFlag(\"WEBGL_PACK_BINARY_OPERATIONS\",(()=>uR.getBool(\"WEBGL_PACK\"))),uR.registerFlag(\"WEBGL_PACK_UNARY_OPERATIONS\",(()=>uR.getBool(\"WEBGL_PACK\"))),uR.registerFlag(\"WEBGL_PACK_ARRAY_OPERATIONS\",(()=>uR.getBool(\"WEBGL_PACK\"))),uR.registerFlag(\"WEBGL_PACK_IMAGE_OPERATIONS\",(()=>uR.getBool(\"WEBGL_PACK\"))),uR.registerFlag(\"WEBGL_PACK_REDUCE\",(()=>uR.getBool(\"WEBGL_PACK\"))),uR.registerFlag(\"WEBGL_LAZILY_UNPACK\",(()=>uR.getBool(\"WEBGL_PACK\"))),uR.registerFlag(\"WEBGL_CONV_IM2COL\",(()=>uR.getBool(\"WEBGL_PACK\"))),uR.registerFlag(\"WEBGL_MAX_TEXTURE_SIZE\",(()=>function(t){if(null==rR){const e=LA(t);rR=e.getParameter(e.MAX_TEXTURE_SIZE)}return rR}(uR.getNumber(\"WEBGL_VERSION\")))),uR.registerFlag(\"WEBGL_MAX_TEXTURES_IN_SHADER\",(()=>function(t){if(null==sR){const e=LA(t);sR=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,sR)}(uR.getNumber(\"WEBGL_VERSION\")))),uR.registerFlag(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\",(()=>{const t=uR.getNumber(\"WEBGL_VERSION\");return 0===t?0:function(t){if(0===t)return 0;let e;const n=LA(t);return e=iR(n,\"EXT_disjoint_timer_query_webgl2\")&&2===t?2:iR(n,\"EXT_disjoint_timer_query\")?1:0,e}(t)})),uR.registerFlag(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE\",(()=>uR.getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\")>0&&!fi())),uR.registerFlag(\"WEBGL_RENDER_FLOAT32_CAPABLE\",(()=>function(t){if(0===t)return!1;const e=LA(t);if(1===t){if(!iR(e,\"OES_texture_float\"))return!1}else if(!iR(e,\"EXT_color_buffer_float\"))return!1;return oR(e)}(uR.getNumber(\"WEBGL_VERSION\")))),uR.registerFlag(\"WEBGL_RENDER_FLOAT32_ENABLED\",(()=>!uR.getBool(\"WEBGL_FORCE_F16_TEXTURES\")&&uR.getBool(\"WEBGL_RENDER_FLOAT32_CAPABLE\"))),uR.registerFlag(\"WEBGL_DOWNLOAD_FLOAT_ENABLED\",(()=>function(t){if(0===t)return!1;const e=LA(t);if(1!==t){if(iR(e,\"EXT_color_buffer_float\"))return oR(e);const t=\"EXT_color_buffer_half_float\";if(iR(e,t)){const n=e.getExtension(t);return function(t,e){const n=BA(t,e),r=t.createTexture();t.bindTexture(t.TEXTURE_2D,r),t.texImage2D(t.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const s=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,s),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,r,0);const i=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(r),t.deleteFramebuffer(s),i}(e,n)}return!1}return!!iR(e,\"OES_texture_float\")&&!!iR(e,\"WEBGL_color_buffer_float\")&&oR(e)}(uR.getNumber(\"WEBGL_VERSION\")))),uR.registerFlag(\"WEBGL_FENCE_API_ENABLED\",(()=>{return 2===(t=uR.getNumber(\"WEBGL_VERSION\"))&&null!=LA(t).fenceSync;var t})),uR.registerFlag(\"WEBGL_SIZE_UPLOAD_UNIFORM\",(()=>uR.getBool(\"WEBGL_RENDER_FLOAT32_ENABLED\")?4:0)),uR.registerFlag(\"WEBGL_DELETE_TEXTURE_THRESHOLD\",(()=>-1),(t=>{if(t<0&&-1!==t)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${t}.`)})),uR.registerFlag(\"WEBGL_FLUSH_THRESHOLD\",(()=>fi()&&uR.getBool(\"IS_CHROME\")?1:-1),(t=>{if(t<0&&-1!==t)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${t}.`)})),uR.registerFlag(\"CPU_HANDOFF_SIZE_THRESHOLD\",(()=>128)),uR.registerFlag(\"WEBGL_USE_SHAPES_UNIFORMS\",(()=>!1)),uR.registerFlag(\"TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD\",(()=>1e5)),uR.registerFlag(\"TOPK_K_CPU_HANDOFF_THRESHOLD\",(()=>128));const fR=\"\\n  const float FLOAT_MAX = 1.70141184e38;\\n  const float FLOAT_MIN = 1.17549435e-38;\\n\\n  lowp vec4 encode_float(highp float v) {\\n    if (isnan(v)) {\\n      return vec4(255, 255, 255, 255);\\n    }\\n\\n    highp float av = abs(v);\\n\\n    if(av < FLOAT_MIN) {\\n      return vec4(0.0, 0.0, 0.0, 0.0);\\n    } else if(v > FLOAT_MAX) {\\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\\n    } else if(v < -FLOAT_MAX) {\\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\\n    }\\n\\n    highp vec4 c = vec4(0,0,0,0);\\n\\n    highp float e = floor(log2(av));\\n    highp float m = exp2(fract(log2(av))) - 1.0;\\n\\n    c[2] = floor(128.0 * m);\\n    m -= c[2] / 128.0;\\n    c[1] = floor(32768.0 * m);\\n    m -= c[1] / 32768.0;\\n    c[0] = floor(8388608.0 * m);\\n\\n    highp float ebias = e + 127.0;\\n    c[3] = floor(ebias / 2.0);\\n    ebias -= c[3] * 2.0;\\n    c[2] += floor(ebias) * 128.0;\\n\\n    c[3] += 128.0 * step(0.0, -v);\\n\\n    return c / 255.0;\\n  }\\n\",{getBroadcastDims:mR}=g;function gR(t,e,n){const r=[];if(t.forEach((t=>{const e=at(t.shapeInfo.logicalShape);if(t.shapeInfo.isUniform?r.push(`uniform float ${t.name}${e>1?`[${e}]`:\"\"};`):(r.push(`uniform sampler2D ${t.name};`),r.push(`uniform int offset${t.name};`)),n.enableShapeUniforms){const{uniformShape:e}=kR(n.packedInputs,t.shapeInfo.logicalShape,t.shapeInfo.texShape);switch(e.length){case 1:r.push(`uniform int ${t.name}Shape;`);break;case 2:r.push(`uniform ivec2 ${t.name}Shape;`);break;case 3:r.push(`uniform ivec3 ${t.name}Shape;`);break;case 4:r.push(`uniform ivec4 ${t.name}Shape;`)}r.push(`uniform ivec2 ${t.name}TexShape;`)}})),n.enableShapeUniforms){switch(e.logicalShape.length){case 1:r.push(\"uniform int outShape;\");break;case 2:r.push(\"uniform ivec2 outShape;\"),r.push(\"uniform int outShapeStrides;\");break;case 3:r.push(\"uniform ivec3 outShape;\"),r.push(\"uniform ivec2 outShapeStrides;\");break;case 4:r.push(\"uniform ivec4 outShape;\"),r.push(\"uniform ivec3 outShapeStrides;\")}r.push(\"uniform ivec2 outTexShape;\")}n.customUniforms&&n.customUniforms.forEach((t=>{r.push(`uniform ${t.type} ${t.name}${t.arrayIndex?`[${t.arrayIndex}]`:\"\"};`)}));const s=r.join(\"\\n\"),i=t.map((t=>function(t,e,n=!1,r){let s=\"\";s+=n?xR(t,r):yR(t,r);const i=t.shapeInfo.logicalShape,a=e.logicalShape;return i.length<=a.length&&(s+=n?function(t,e){const n=t.name,r=n.charAt(0).toUpperCase()+n.slice(1),s=\"get\"+r+\"AtOutCoords\",i=t.shapeInfo.logicalShape.length,a=e.logicalShape.length,o=mR(t.shapeInfo.logicalShape,e.logicalShape),l=MR(a),u=a-i;let c;const h=[\"x\",\"y\",\"z\",\"w\",\"u\",\"v\"];c=0===i?\"\":a<2&&o.length>=1?\"coords = 0;\":o.map((t=>`coords.${h[t+u]} = 0;`)).join(\"\\n\");let d=\"\";d=a<2&&i>0?\"coords\":t.shapeInfo.logicalShape.map(((t,e)=>`coords.${h[e+u]}`)).join(\", \");let p=\"return outputValue;\";const f=1===at(t.shapeInfo.logicalShape),m=1===at(e.logicalShape);if(1!==i||f||m){if(f&&!m)p=1===a?\"\\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\\n      \":\"\\n        return vec4(outputValue.x);\\n      \";else if(o.length){const t=i-2,e=i-1;o.indexOf(t)>-1&&o.indexOf(e)>-1?p=\"return vec4(outputValue.x);\":o.indexOf(t)>-1?p=\"return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);\":o.indexOf(e)>-1&&(p=\"return vec4(outputValue.xx, outputValue.zz);\")}}else p=\"\\n      return vec4(outputValue.xy, outputValue.xy);\\n    \";return`\\n    vec4 ${s}() {\\n      ${l} coords = getOutputCoords();\\n      ${c}\\n      vec4 outputValue = get${r}(${d});\\n      ${p}\\n    }\\n  `}(t,e):function(t,e){const n=t.name,r=n.charAt(0).toUpperCase()+n.slice(1),s=\"get\"+r+\"AtOutCoords\",i=e.texShape,a=t.shapeInfo.texShape,o=t.shapeInfo.logicalShape.length,l=e.logicalShape.length;if(!t.shapeInfo.isUniform&&o===l&&null==t.shapeInfo.flatOffset&&lt(a,i))return`\\n      float ${s}() {\\n        return sampleTexture(${n}, resultUV);\\n      }\\n    `;const u=MR(l),c=mR(t.shapeInfo.logicalShape,e.logicalShape),h=l-o;let d;const p=[\"x\",\"y\",\"z\",\"w\",\"u\",\"v\"];d=0===o?\"\":l<2&&c.length>=1?\"coords = 0;\":c.map((t=>`coords.${p[t+h]} = 0;`)).join(\"\\n\");let f=\"\";return f=l<2&&o>0?\"coords\":t.shapeInfo.logicalShape.map(((t,e)=>`coords.${p[e+h]}`)).join(\", \"),`\\n    float ${s}() {\\n      ${u} coords = getOutputCoords();\\n      ${d}\\n      return get${r}(${f});\\n    }\\n  `}(t,e)),s}(t,e,n.packedInputs,n.enableShapeUniforms))).join(\"\\n\"),a=e.texShape,o=cR(),l=function(t){return`\\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\\n      return ${t.texture2D}(textureSampler, uv).r;\\n    }\\n  `}(o);let u,c,h=function(t){return`${t.version}\\n    precision highp float;\\n    precision highp int;\\n    precision highp sampler2D;\\n    ${t.varyingFs} vec2 resultUV;\\n    ${t.defineOutput}\\n    const vec2 halfCR = vec2(0.5, 0.5);\\n\\n    struct ivec5\\n    {\\n      int x;\\n      int y;\\n      int z;\\n      int w;\\n      int u;\\n    };\\n\\n    struct ivec6\\n    {\\n      int x;\\n      int y;\\n      int z;\\n      int w;\\n      int u;\\n      int v;\\n    };\\n\\n    uniform float NAN;\\n    ${t.defineSpecialNaN}\\n    ${t.defineSpecialInf}\\n    ${t.defineRound}\\n\\n    int imod(int x, int y) {\\n      return x - y * (x / y);\\n    }\\n\\n    int idiv(int a, int b, float sign) {\\n      int res = a / b;\\n      int mod = imod(a, b);\\n      if (sign < 0. && mod != 0) {\\n        res -= 1;\\n      }\\n      return res;\\n    }\\n\\n    //Based on the work of Dave Hoskins\\n    //https://www.shadertoy.com/view/4djSRW\\n    #define HASHSCALE1 443.8975\\n    float random(float seed){\\n      vec2 p = resultUV * seed;\\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\\n      p3 += dot(p3, p3.yzx + 19.19);\\n      return fract((p3.x + p3.y) * p3.z);\\n    }\\n\\n    ${bR}\\n    ${vR}\\n    ${wR}\\n  `}(o);return e.isPacked?(u=function(t,e,n){switch(t.length){case 0:return\"\\n    int getOutputCoords() {\\n      return 0;\\n    }\\n  \";case 1:return function(t,e,n){const r=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];return 1===r[0]?n?\"\\n      int getOutputCoords() {\\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\\n      }\\n    \":`\\n      int getOutputCoords() {\\n        return 2 * int(resultUV.x * ${r[1]}.0);\\n      }\\n    `:1===r[1]?n?\"\\n      int getOutputCoords() {\\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\\n      }\\n    \":`\\n      int getOutputCoords() {\\n        return 2 * int(resultUV.y * ${r[0]}.0);\\n      }\\n    `:n?\"\\n    int getOutputCoords() {\\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(packedTexShape[0], packedTexShape[1]));\\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\\n    }\\n  \":`\\n    int getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(${r[0]}, ${r[1]}));\\n      return 2 * (resTexRC.x * ${r[1]} + resTexRC.y);\\n    }\\n  `}(0,e,n);case 2:return function(t,e,n){const r=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];if(lt(t,e))return n?\"\\n      ivec2 getOutputCoords() {\\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\\n      }\\n    \":`\\n      ivec2 getOutputCoords() {\\n        return 2 * ivec2(resultUV.yx * vec2(${r[0]}, ${r[1]}));\\n      }\\n    `;const s=Math.ceil(t[1]/2);return n?\"\\n    ivec2 getOutputCoords() {\\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(packedTexShape[0], packedTexShape[1]));\\n\\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\\n      int r = 2 * (index / texelsInLogicalRow);\\n      int c = imod(index, texelsInLogicalRow) * 2;\\n\\n      return ivec2(r, c);\\n    }\\n  \":`\\n    ivec2 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(${r[0]}, ${r[1]}));\\n\\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\\n      int r = 2 * (index / ${s});\\n      int c = imod(index, ${s}) * 2;\\n\\n      return ivec2(r, c);\\n    }\\n  `}(t,e,n);case 3:return function(t,e,n){if(n)return\"\\n    ivec3 getOutputCoords() {\\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(packedTexShape[0], packedTexShape[1]));\\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\\n\\n      int b = index / texelsInBatch;\\n      index -= b * texelsInBatch;\\n\\n      int r = 2 * (index / texelsInLogicalRow);\\n      int c = imod(index, texelsInLogicalRow) * 2;\\n\\n      return ivec3(b, r, c);\\n    }\\n  \";const r=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],s=Math.ceil(t[2]/2),i=s*Math.ceil(t[1]/2);return`\\n    ivec3 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(${r[0]}, ${r[1]}));\\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\\n\\n      int b = index / ${i};\\n      index -= b * ${i};\\n\\n      int r = 2 * (index / ${s});\\n      int c = imod(index, ${s}) * 2;\\n\\n      return ivec3(b, r, c);\\n    }\\n  `}(t,e,n);default:return function(t,e,n){if(n)return\"\\n    ivec4 getOutputCoords() {\\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(packedTexShape[0], packedTexShape[1]));\\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\\n\\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\\n      int texelsInBatchN = texelsInBatch * outShape[1];\\n\\n      int b2 = index / texelsInBatchN;\\n      index -= b2 * texelsInBatchN;\\n\\n      int b = index / texelsInBatch;\\n      index -= b * texelsInBatch;\\n\\n      int r = 2 * (index / texelsInLogicalRow);\\n      int c = imod(index, texelsInLogicalRow) * 2;\\n\\n      return ivec4(b2, b, r, c);\\n    }\\n  \";const r=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],s=Math.ceil(t[t.length-1]/2),i=s*Math.ceil(t[t.length-2]/2);let a=i,o=\"\",l=\"b, r, c\";for(let e=2;e<t.length-1;e++)a*=t[t.length-e-1],o=`\\n      int b${e} = index / ${a};\\n      index -= b${e} * ${a};\\n    `+o,l=`b${e}, `+l;return`\\n    ivec${t.length} getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(${r[0]}, ${r[1]}));\\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\\n\\n      ${o}\\n\\n      int b = index / ${i};\\n      index -= b * ${i};\\n\\n      int r = 2 * (index / ${s});\\n      int c = imod(index, ${s}) * 2;\\n\\n      return ivec${t.length}(${l});\\n    }\\n  `}(t,e,n)}}(e.logicalShape,a,n.enableShapeUniforms),c=function(t){return`\\n    void setOutput(vec4 val) {\\n      ${t.output} = val;\\n    }\\n  `}(o)):(u=function(t,e,n){switch(t.length){case 0:return\"\\n    int getOutputCoords() {\\n      return 0;\\n    }\\n  \";case 1:return function(t,e,n){return 1===e[0]?n?\"\\n      int getOutputCoords() {\\n        return int(resultUV.x * float(outTexShape[1]));\\n      }\\n    \":`\\n      int getOutputCoords() {\\n        return int(resultUV.x * ${e[1]}.0);\\n      }\\n    `:1===e[1]?n?\"\\n      int getOutputCoords() {\\n        return int(resultUV.y * float(outTexShape[0]));\\n      }\\n    \":`\\n      int getOutputCoords() {\\n        return int(resultUV.y * ${e[0]}.0);\\n      }\\n    `:n?\"\\n    int getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(outTexShape[0], outTexShape[1]));\\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\\n    }\\n  \":`\\n    int getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(${e[0]}, ${e[1]}));\\n      return resTexRC.x * ${e[1]} + resTexRC.y;\\n    }\\n  `}(0,e,n);case 2:return function(t,e,n){return lt(t,e)?n?\"\\n      ivec2 getOutputCoords() {\\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\\n      }\\n    \":`\\n      ivec2 getOutputCoords() {\\n        return ivec2(resultUV.yx * vec2(${e[0]}, ${e[1]}));\\n      }\\n    `:1===t[1]?n?\"\\n      ivec2 getOutputCoords() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n                               vec2(outTexShape[0], outTexShape[1]));\\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\\n        return ivec2(index, 0);\\n      }\\n    \":`\\n      ivec2 getOutputCoords() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n                               vec2(${e[0]}, ${e[1]}));\\n        int index = resTexRC.x * ${e[1]} + resTexRC.y;\\n        return ivec2(index, 0);\\n      }\\n    `:1===t[0]?n?\"\\n      ivec2 getOutputCoords() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n                               vec2(outTexShape[0], outTexShape[1]));\\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\\n        return ivec2(0, index);\\n      }\\n    \":`\\n      ivec2 getOutputCoords() {\\n        ivec2 resTexRC = ivec2(resultUV.yx *\\n                               vec2(${e[0]}, ${e[1]}));\\n        int index = resTexRC.x * ${e[1]} + resTexRC.y;\\n        return ivec2(0, index);\\n      }\\n    `:n?\"\\n    ivec2 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(outTexShape[0], outTexShape[1]));\\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\\n      int r = index / outShape[1];\\n      int c = index - r * outShape[1];\\n      return ivec2(r, c);\\n    }\\n  \":`\\n    ivec2 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(${e[0]}, ${e[1]}));\\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\\n      int r = index / ${t[1]};\\n      int c = index - r * ${t[1]};\\n      return ivec2(r, c);\\n    }\\n  `}(t,e,n);case 3:return function(t,e,n){if(n)return`\\n  ivec3 getOutputCoords() {\\n    ivec2 resTexRC = ivec2(resultUV.yx *\\n                           vec2(outTexShape[0], outTexShape[1]));\\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\\n    ${dR([\"r\",\"c\",\"d\"],t)}\\n    return ivec3(r, c, d);\\n  }\\n`;const r=hR([\"r\",\"c\",\"d\"],t);return`\\n    ivec3 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n                             vec2(${e[0]}, ${e[1]}));\\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\\n      ${r}\\n      return ivec3(r, c, d);\\n    }\\n  `}(t,e,n);case 4:return function(t,e,n){if(n)return`\\n    ivec4 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n        vec2(outTexShape[0], outTexShape[1]));\\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\\n      ${dR([\"r\",\"c\",\"d\",\"d2\"],t)}\\n      return ivec4(r, c, d, d2);\\n    }\\n  `;const r=hR([\"r\",\"c\",\"d\",\"d2\"],t);return`\\n    ivec4 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n        vec2(${e[0]}, ${e[1]}));\\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\\n      ${r}\\n      return ivec4(r, c, d, d2);\\n    }\\n  `}(t,e,n);case 5:return function(t,e){const n=hR([\"r\",\"c\",\"d\",\"d2\",\"d3\"],t);return`\\n    ivec5 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${e[0]},\\n                             ${e[1]}));\\n\\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\\n\\n      ${n}\\n\\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\\n      return outShape;\\n    }\\n  `}(t,e);case 6:return function(t,e){const n=hR([\"r\",\"c\",\"d\",\"d2\",\"d3\",\"d4\"],t);return`\\n    ivec6 getOutputCoords() {\\n      ivec2 resTexRC = ivec2(resultUV.yx *\\n        vec2(${e[0]}, ${e[1]}));\\n      int index = resTexRC.x * ${e[1]} + resTexRC.y;\\n\\n      ${n}\\n\\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\\n      return result;\\n    }\\n  `}(t,e);default:throw new Error(`${t.length}-D output sampling is not yet supported`)}}(e.logicalShape,a,n.enableShapeUniforms),c=function(t){return`\\n    void setOutput(float val) {\\n      ${t.output} = vec4(val, 0, 0, 0);\\n    }\\n  `}(o)),n.packedInputs&&(h+=SR),[h,l,c,s,u,i,n.userCode].join(\"\\n\")}function yR(t,e=!1){const n=t.shapeInfo.logicalShape;switch(n.length){case 0:return function(t,e){const n=t.name,r=\"get\"+n.charAt(0).toUpperCase()+n.slice(1);if(t.shapeInfo.isUniform)return`float ${r}() {return ${n};}`;const[s,i]=t.shapeInfo.texShape;if(1===s&&1===i)return`\\n      float ${r}() {\\n        return sampleTexture(${n}, halfCR);\\n      }\\n    `;const a=TR(n);if(e)return`\\n    float ${r}() {\\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], ${a});\\n      return sampleTexture(${n}, uv);\\n    }\\n  `;const[o,l]=t.shapeInfo.texShape;return`\\n    float ${r}() {\\n      vec2 uv = uvFromFlat(${o}, ${l}, ${a});\\n      return sampleTexture(${n}, uv);\\n    }\\n  `}(t,e);case 1:return function(t,e){const n=t.name,r=\"get\"+n.charAt(0).toUpperCase()+n.slice(1);if(t.shapeInfo.isUniform)return`\\n      float ${r}(int index) {\\n        ${_R(t)}\\n      }\\n    `;const s=t.shapeInfo.texShape,i=s[0],a=s[1];if(1===a&&1===i)return`\\n      float ${r}(int index) {\\n        return sampleTexture(${n}, halfCR);\\n      }\\n    `;const o=TR(n);return 1===a?e?`\\n      float ${r}(int index) {\\n        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / float(${n}TexShape[0]));\\n        return sampleTexture(${n}, uv);\\n      }\\n    `:`\\n      float ${r}(int index) {\\n        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / ${i}.0);\\n        return sampleTexture(${n}, uv);\\n      }\\n    `:1===i?e?`\\n      float ${r}(int index) {\\n        vec2 uv = vec2((float(index + ${o}) + 0.5) / float(${n}TexShape[1]), 0.5);\\n        return sampleTexture(${n}, uv);\\n      }\\n    `:`\\n      float ${r}(int index) {\\n        vec2 uv = vec2((float(index + ${o}) + 0.5) / ${a}.0, 0.5);\\n        return sampleTexture(${n}, uv);\\n      }\\n    `:e?`\\n    float ${r}(int index) {\\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], index + ${o});\\n      return sampleTexture(${n}, uv);\\n    }\\n  `:`\\n    float ${r}(int index) {\\n      vec2 uv = uvFromFlat(${i}, ${a}, index + ${o});\\n      return sampleTexture(${n}, uv);\\n    }\\n  `}(t,e);case 2:return function(t,e){const n=t.shapeInfo.logicalShape,r=t.name,s=\"get\"+r.charAt(0).toUpperCase()+r.slice(1),i=t.shapeInfo.texShape;if(null!=i&&lt(n,i)){if(e)return`\\n      float ${s}(int row, int col) {\\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\\n        return sampleTexture(${r}, uv);\\n      }\\n    `;const t=i[0];return`\\n    float ${s}(int row, int col) {\\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${i[1]}.0, ${t}.0);\\n      return sampleTexture(${r}, uv);\\n    }\\n  `}const{newShape:a,keptDims:o}=yt(n),l=a;if(l.length<n.length){const n=[\"row\",\"col\"];return`\\n      ${yR(ER(t,l),e)}\\n      float ${s}(int row, int col) {\\n        return ${s}(${IR(n,o)});\\n      }\\n    `}if(t.shapeInfo.isUniform)return`\\n      float ${s}(int row, int col) {\\n        int index = round(dot(vec2(row, col), vec2(${n[1]}, 1)));\\n        ${_R(t)}\\n      }\\n    `;const u=i[0],c=i[1],h=TR(r);return 1===c?e?`\\n      float ${s}(int row, int col) {\\n        float index = dot(vec3(row, col, ${h}), vec3(${r}Shape[1], 1, 1));\\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${r}TexShape[0]));\\n        return sampleTexture(${r}, uv);\\n      }\\n    `:`\\n    float ${s}(int row, int col) {\\n      float index = dot(vec3(row, col, ${h}), vec3(${n[1]}, 1, 1));\\n      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);\\n      return sampleTexture(${r}, uv);\\n    }\\n  `:1===u?e?`\\n      float ${s}(int row, int col) {\\n        float index = dot(vec3(row, col, ${h}), vec3(${r}Shape[1], 1, 1));\\n        vec2 uv = vec2((index + 0.5) / float(${r}TexShape[1]), 0.5);\\n        return sampleTexture(${r}, uv);\\n      }\\n    `:`\\n    float ${s}(int row, int col) {\\n      float index = dot(vec3(row, col, ${h}), vec3(${n[1]}, 1, 1));\\n      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);\\n      return sampleTexture(${r}, uv);\\n    }\\n  `:e?`\\n      float ${s}(int row, int col) {\\n        // Explicitly use integer operations as dot() only works on floats.\\n        int index = row * ${r}Shape[1] + col + ${h};\\n        vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index);\\n        return sampleTexture(${r}, uv);\\n      }\\n    `:`\\n  float ${s}(int row, int col) {\\n    // Explicitly use integer operations as dot() only works on floats.\\n    int index = row * ${n[1]} + col + ${h};\\n    vec2 uv = uvFromFlat(${u}, ${c}, index);\\n    return sampleTexture(${r}, uv);\\n  }\\n`}(t,e);case 3:return function(t,e){const n=t.shapeInfo.logicalShape,r=t.name,s=\"get\"+r.charAt(0).toUpperCase()+r.slice(1),i=n[1]*n[2],a=n[2],{newShape:o,keptDims:l}=yt(n),u=o;if(u.length<n.length){const n=[\"row\",\"col\",\"depth\"];return`\\n        ${yR(ER(t,u),e)}\\n        float ${s}(int row, int col, int depth) {\\n          return ${s}(${IR(n,l)});\\n        }\\n      `}if(t.shapeInfo.isUniform)return`\\n      float ${s}(int row, int col, int depth) {\\n        int index = round(dot(vec3(row, col, depth),\\n                          vec3(${i}, ${a}, 1)));\\n        ${_R(t)}\\n      }\\n    `;const c=t.shapeInfo.texShape,h=c[0],d=c[1],p=t.shapeInfo.flatOffset;if(d===i&&null==p)return e?`\\n      float ${s}(int row, int col, int depth) {\\n        int stride1 = ${r}Shape[2];\\n        float texR = float(row);\\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(${r}TexShape[1], ${r}TexShape[0]);\\n        return sampleTexture(${r}, uv);\\n      }\\n    `:`\\n        float ${s}(int row, int col, int depth) {\\n          float texR = float(row);\\n          float texC = dot(vec2(col, depth), vec2(${a}, 1));\\n          vec2 uv = (vec2(texC, texR) + halfCR) /\\n                     vec2(${d}.0, ${h}.0);\\n          return sampleTexture(${r}, uv);\\n        }\\n      `;if(d===a&&null==p)return e?`\\n      float ${s}(int row, int col, int depth) {\\n        float texR = dot(vec2(row, col), vec2(${r}Shape[1], 1));\\n        float texC = float(depth);\\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\\n        return sampleTexture(${r}, uv);\\n      }\\n    `:`\\n    float ${s}(int row, int col, int depth) {\\n      float texR = dot(vec2(row, col), vec2(${n[1]}, 1));\\n      float texC = float(depth);\\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${d}.0, ${h}.0);\\n      return sampleTexture(${r}, uv);\\n    }\\n  `;const f=TR(r);return e?`\\n    float ${s}(int row, int col, int depth) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      int stride0 = ${r}Shape[1] * ${r}Shape[2];\\n      int stride1 = ${r}Shape[2];\\n      int index = row * ${i} + col * ${a} + depth + ${f};\\n      vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index);\\n      return sampleTexture(${r}, uv);\\n    }\\n    `:`\\n      float ${s}(int row, int col, int depth) {\\n        // Explicitly use integer operations as dot() only works on floats.\\n        int index = row * ${i} + col * ${a} + depth + ${f};\\n        vec2 uv = uvFromFlat(${h}, ${d}, index);\\n        return sampleTexture(${r}, uv);\\n      }\\n  `}(t,e);case 4:return function(t,e){const n=t.shapeInfo.logicalShape,r=t.name,s=\"get\"+r.charAt(0).toUpperCase()+r.slice(1),i=n[3],a=n[2]*i,o=n[1]*a,{newShape:l,keptDims:u}=yt(n);if(l.length<n.length){const n=[\"row\",\"col\",\"depth\",\"depth2\"];return`\\n      ${yR(ER(t,l),e)}\\n      float ${s}(int row, int col, int depth, int depth2) {\\n        return ${s}(${IR(n,u)});\\n      }\\n    `}if(t.shapeInfo.isUniform)return`\\n      float ${s}(int row, int col, int depth, int depth2) {\\n        int index = round(dot(vec4(row, col, depth, depth2),\\n                          vec4(${o}, ${a}, ${i}, 1)));\\n        ${_R(t)}\\n      }\\n    `;const c=t.shapeInfo.flatOffset,h=t.shapeInfo.texShape,d=h[0],p=h[1],f=`int stride2 = ${r}Shape[3];`,m=`int stride1 = ${r}Shape[2] * stride2;`,g=`int stride0 = ${r}Shape[1] * stride1;`;if(p===o&&null==c)return e?`\\n      float ${s}(int row, int col, int depth, int depth2) {\\n        ${f}\\n        ${m}\\n        float texR = float(row);\\n        float texC =\\n            dot(vec3(col, depth, depth2),\\n                vec3(stride1, stride2, 1));\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(${r}TexShape[1], ${r}TexShape[0]);\\n        return sampleTexture(${r}, uv);\\n      }\\n    `:`\\n      float ${s}(int row, int col, int depth, int depth2) {\\n        float texR = float(row);\\n        float texC =\\n            dot(vec3(col, depth, depth2),\\n                vec3(${a}, ${i}, 1));\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(${p}.0, ${d}.0);\\n        return sampleTexture(${r}, uv);\\n      }\\n    `;if(p===i&&null==c)return e?`\\n      float ${s}(int row, int col, int depth, int depth2) {\\n        float texR = dot(vec3(row, col, depth),\\n                         vec3(${r}Shape[1] * ${r}Shape[2], ${r}Shape[2], 1));\\n        float texC = float(depth2);\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(${r}TexShape[1], ${r}TexShape[0]);\\n        return sampleTexture(${r}, uv);\\n      }\\n    `:`\\n      float ${s}(int row, int col, int depth, int depth2) {\\n        float texR = dot(vec3(row, col, depth),\\n                         vec3(${n[1]*n[2]}, ${n[2]}, 1));\\n        float texC = float(depth2);\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(${p}.0, ${d}.0);\\n        return sampleTexture(${r}, uv);\\n      }\\n    `;const y=TR(r);return e?`\\n    float ${s}(int row, int col, int depth, int depth2) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      ${f}\\n      ${m}\\n      ${g}\\n      int index = row * stride0 + col * stride1 +\\n          depth * stride2 + depth2;\\n      vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index + ${y});\\n      return sampleTexture(${r}, uv);\\n    }\\n  `:`\\n    float ${s}(int row, int col, int depth, int depth2) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      int index = row * ${o} + col * ${a} +\\n          depth * ${i} + depth2;\\n      vec2 uv = uvFromFlat(${d}, ${p}, index + ${y});\\n      return sampleTexture(${r}, uv);\\n    }\\n  `}(t,e);case 5:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r=\"get\"+n.charAt(0).toUpperCase()+n.slice(1),s=e[4],i=e[3]*s,a=e[2]*i,o=e[1]*a,{newShape:l,keptDims:u}=yt(e);if(l.length<e.length){const e=[\"row\",\"col\",\"depth\",\"depth2\",\"depth3\"];return`\\n      ${yR(ER(t,l))}\\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\\n        return ${r}(${IR(e,u)});\\n      }\\n    `}if(t.shapeInfo.isUniform)return`\\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\\n        float index = dot(\\n          vec4(row, col, depth, depth2),\\n          vec4(${o}, ${a}, ${i}, ${s})) +\\n          depth3;\\n        ${_R(t)}\\n      }\\n    `;const c=t.shapeInfo.flatOffset,h=t.shapeInfo.texShape,d=h[0],p=h[1];if(p===o&&null==c)return`\\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\\n        int texR = row;\\n        float texC = dot(vec4(col, depth, depth2, depth3),\\n                         vec4(${a}, ${i}, ${s}, 1));\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(${p}.0, ${d}.0);\\n        return sampleTexture(${n}, uv);\\n      }\\n    `;if(p===s&&null==c)return`\\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\\n        float texR = dot(\\n          vec4(row, col, depth, depth2),\\n          vec4(${e[1]*e[2]*e[3]},\\n               ${e[2]*e[3]}, ${e[3]}, 1));\\n        int texC = depth3;\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(${p}.0, ${d}.0);\\n        return sampleTexture(${n}, uv);\\n      }\\n    `;return`\\n    float ${r}(int row, int col, int depth, int depth2, int depth3) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      int index = row * ${o} + col * ${a} + depth * ${i} +\\n          depth2 * ${s} + depth3 + ${TR(n)};\\n      vec2 uv = uvFromFlat(${d}, ${p}, index);\\n      return sampleTexture(${n}, uv);\\n    }\\n  `}(t);case 6:return function(t){const e=t.shapeInfo.logicalShape,n=t.name,r=\"get\"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:s,keptDims:i}=yt(e);if(s.length<e.length){const e=[\"row\",\"col\",\"depth\",\"depth2\",\"depth3\",\"depth4\"];return`\\n      ${yR(ER(t,s))}\\n      float ${r}(int row, int col, int depth,\\n                    int depth2, int depth3, int depth4) {\\n        return ${r}(${IR(e,i)});\\n      }\\n    `}const a=e[5],o=e[4]*a,l=e[3]*o,u=e[2]*l,c=e[1]*u;if(t.shapeInfo.isUniform)return`\\n      float ${r}(int row, int col, int depth,\\n                  int depth2, int depth3, int depth4) {\\n        int index = round(dot(\\n          vec4(row, col, depth, depth2),\\n          vec4(${c}, ${u}, ${l}, ${o})) +\\n          dot(\\n            vec2(depth3, depth4),\\n            vec2(${a}, 1)));\\n        ${_R(t)}\\n      }\\n    `;const h=t.shapeInfo.flatOffset,d=t.shapeInfo.texShape,p=d[0],f=d[1];if(f===c&&null==h)return`\\n      float ${r}(int row, int col, int depth,\\n                    int depth2, int depth3, int depth4) {\\n        int texR = row;\\n        float texC = dot(vec4(col, depth, depth2, depth3),\\n          vec4(${u}, ${l}, ${o}, ${a})) +\\n               float(depth4);\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                   vec2(${f}.0, ${p}.0);\\n        return sampleTexture(${n}, uv);\\n      }\\n    `;if(f===a&&null==h)return`\\n      float ${r}(int row, int col, int depth,\\n                    int depth2, int depth3, int depth4) {\\n        float texR = dot(vec4(row, col, depth, depth2),\\n          vec4(${e[1]*e[2]*e[3]*e[4]},\\n               ${e[2]*e[3]*e[4]},\\n               ${e[3]*e[4]},\\n               ${e[4]})) + float(depth3);\\n        int texC = depth4;\\n        vec2 uv = (vec2(texC, texR) + halfCR) /\\n                  vec2(${f}.0, ${p}.0);\\n        return sampleTexture(${n}, uv);\\n      }\\n    `;return`\\n    float ${r}(int row, int col, int depth,\\n                  int depth2, int depth3, int depth4) {\\n      // Explicitly use integer operations as dot() only works on floats.\\n      int index = row * ${c} + col * ${u} + depth * ${l} +\\n          depth2 * ${o} + depth3 * ${a} + depth4 + ${TR(n)};\\n      vec2 uv = uvFromFlat(${p}, ${f}, index);\\n      return sampleTexture(${n}, uv);\\n    }\\n  `}(t);default:throw new Error(`${n.length}-D input sampling is not yet supported`)}}function xR(t,e){switch(t.shapeInfo.logicalShape.length){case 0:return function(t){const e=t.name;return`\\n    vec4 ${\"get\"+e.charAt(0).toUpperCase()+e.slice(1)}() {\\n      return ${cR().texture2D}(${e}, halfCR);\\n    }\\n  `}(t);case 1:return function(t,e){const n=t.name,r=\"get\"+n.charAt(0).toUpperCase()+n.slice(1),s=t.shapeInfo.texShape,i=cR();if(e)return`\\n    vec4 ${r}(int index) {\\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\\n      vec2 uv = packedUVfrom1D(\\n        packedTexShape[0], packedTexShape[1], index);\\n      return ${i.texture2D}(${n}, uv);\\n    }\\n  `;const a=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];return`\\n    vec4 ${r}(int index) {\\n      vec2 uv = packedUVfrom1D(\\n        ${a[0]}, ${a[1]}, index);\\n      return ${i.texture2D}(${n}, uv);\\n    }\\n  `}(t,e);case 2:return function(t,e){const n=t.shapeInfo.logicalShape,r=t.name,s=\"get\"+r.charAt(0).toUpperCase()+r.slice(1),i=t.shapeInfo.texShape,a=i[0],o=i[1],l=cR();if(null!=i&&lt(n,i))return e?`\\n      vec4 ${s}(int row, int col) {\\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\\n\\n        return ${l.texture2D}(${r}, uv);\\n      }\\n    `:`\\n      vec4 ${s}(int row, int col) {\\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}.0, ${a}.0);\\n\\n        return ${l.texture2D}(${r}, uv);\\n      }\\n    `;if(e)return`\\n    vec4 ${s}(int row, int col) {\\n      ivec2 packedTexShape = ivec2(ceil(float(${r}TexShape[0]) / 2.0), ceil(float(${r}TexShape[1]) / 2.0));\\n      int valuesPerRow = int(ceil(float(${r}Shape[1]) / 2.0));\\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\\n      return ${l.texture2D}(${r}, uv);\\n    }\\n  `;const u=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)];return`\\n    vec4 ${s}(int row, int col) {\\n      vec2 uv = packedUVfrom2D(${Math.ceil(n[1]/2)}, ${u[0]}, ${u[1]}, row, col);\\n      return ${l.texture2D}(${r}, uv);\\n    }\\n  `}(t,e);case 3:return function(t,e){const n=t.shapeInfo.logicalShape,r=t.name,s=\"get\"+r.charAt(0).toUpperCase()+r.slice(1),i=t.shapeInfo.texShape,a=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)];if(1===n[0]){const r=[1,2],i=[\"b\",\"row\",\"col\"];return`\\n        ${xR(ER(t,n.slice(1)),e)}\\n        vec4 ${s}(int b, int row, int col) {\\n          return ${s}(${IR(i,r)});\\n        }\\n      `}const o=cR();if(e)return`\\n    vec4 ${s}(int b, int row, int col) {\\n      ivec2 packedTexShape = ivec2(ceil(float(${r}TexShape[0]) / 2.0), ceil(float(${r}TexShape[1]) / 2.0));\\n      int valuesPerRow = int(ceil(float(${r}Shape[2]) / 2.0));\\n      int texelsInBatch = valuesPerRow * int(ceil(float(${r}Shape[1]) / 2.0));\\n      vec2 uv = packedUVfrom3D(\\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\\n      return ${o.texture2D}(${r}, uv);\\n    }\\n  `;const l=a[0],u=a[1],c=Math.ceil(n[2]/2);return`\\n    vec4 ${s}(int b, int row, int col) {\\n      vec2 uv = packedUVfrom3D(\\n        ${l}, ${u}, ${c*Math.ceil(n[1]/2)}, ${c}, b, row, col);\\n      return ${o.texture2D}(${r}, uv);\\n    }\\n  `}(t,e);default:return function(t,e){const n=t.name,r=\"get\"+n.charAt(0).toUpperCase()+n.slice(1),s=cR();if(e)return`\\n    vec4 ${r}(int b2, int b, int row, int col) {\\n      int valuesPerRow = int(ceil(float(${n}Shape[3]) / 2.0));\\n      int texelsInBatch = valuesPerRow * int(ceil(float(${n}Shape[2]) / 2.0));\\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\\n      texelsInBatch *= ${n}Shape[1];\\n      index = b2 * texelsInBatch + index;\\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\\n      int texR = index / packedTexShape[1];\\n      int texC = index - texR * packedTexShape[1];\\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${s.texture2D}(${n}, uv);\\n    }\\n  `;const i=t.shapeInfo.logicalShape,a=i.length,o=t.shapeInfo.texShape,l=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)],u=l[0],c=l[1],h=Math.ceil(i[a-1]/2);let d=h*Math.ceil(i[a-2]/2),p=\"int b, int row, int col\",f=`b * ${d} + (row / 2) * ${h} + (col / 2)`;for(let t=2;t<a-1;t++)p=`int b${t}, `+p,d*=i[a-t-1],f=`b${t} * ${d} + `+f;return`\\n    vec4 ${r}(${p}) {\\n      int index = ${f};\\n      int texR = index / ${c};\\n      int texC = index - texR * ${c};\\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${u});\\n      return ${s.texture2D}(${n}, uv);\\n    }\\n  `}(t,e)}}const bR=\"\\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\\n  int texR = index / texNumC;\\n  int texC = index - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\\n  int texelIndex = index / 2;\\n  int texR = texelIndex / texNumC;\\n  int texC = texelIndex - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\",vR=\"\\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\\n  int texNumC, int row, int col) {\\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\\n  int texR = texelIndex / texNumC;\\n  int texC = texelIndex - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\",wR=\"\\nvec2 packedUVfrom3D(int texNumR, int texNumC,\\n    int texelsInBatch, int texelsInLogicalRow, int b,\\n    int row, int col) {\\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\\n  int texR = index / texNumC;\\n  int texC = index - texR * texNumC;\\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\\n}\\n\",SR=\"\\n  float getChannel(vec4 frag, vec2 innerDims) {\\n    vec2 modCoord = mod(innerDims, 2.);\\n    return modCoord.x == 0. ?\\n      (modCoord.y == 0. ? frag.r : frag.g) :\\n      (modCoord.y == 0. ? frag.b : frag.a);\\n  }\\n  float getChannel(vec4 frag, int dim) {\\n    float modCoord = mod(float(dim), 2.);\\n    return modCoord == 0. ? frag.r : frag.g;\\n  }\\n\";function TR(t){return`offset${t}`}function _R(t){const e=t.name,n=at(t.shapeInfo.logicalShape);return n<2?`return ${e};`:`\\n    for (int i = 0; i < ${n}; i++) {\\n      if (i == index) {\\n        return ${e}[i];\\n      }\\n    }\\n  `}function MR(t){if(t<=1)return\"int\";if(2===t)return\"ivec2\";if(3===t)return\"ivec3\";if(4===t)return\"ivec4\";if(5===t)return\"ivec5\";if(6===t)return\"ivec6\";throw Error(`GPU for rank ${t} is not yet supported`)}function kR(t,e,n){const{newShape:r,keptDims:s}=yt(e),i=e.length,a=t&&3===i&&1===e[0],o=a?e.slice(1):r,l=!t&&i>1&&!lt(e,n)&&r.length<i||a;return{useSqueezeShape:l,uniformShape:l?o:e,keptDims:s}}function ER(t,e){const n=JSON.parse(JSON.stringify(t));return n.shapeInfo.logicalShape=e,n}function IR(t,e){return e.map((e=>t[e])).join(\", \")}function CR(t,e){if(t.length!==e.length)throw Error(`Binary was compiled with ${t.length} inputs, but was executed with ${e.length} inputs`);t.forEach(((t,n)=>{const r=t.logicalShape,s=e[n],i=s.shape;if(!lt(r,i))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${i} must match`);if(t.isUniform&&s.isUniform)return;const a=t.texShape,o=s.isUniform?null:s.texData.texShape;if(!lt(a,o))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${a} and ${o} must match`)}))}function NR(t){return jt().getBool(\"WEBGL_USE_SHAPES_UNIFORMS\")&&t<=4}class AR{constructor(t){this.variableNames=[\"A\"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=DA.DENSE,this.customUniforms=[{name:\"texShape\",type:\"ivec2\"}];const e=cR();this.outputShape=t,this.enableShapeUniforms=NR(this.outputShape.length),this.userCode=`\\n      ivec3 outCoordsFromFlatIndex(int index) {\\n        ${this.enableShapeUniforms?dR([\"r\",\"c\",\"d\"],t):hR([\"r\",\"c\",\"d\"],t)}\\n        return ivec3(r, c, d);\\n      }\\n\\n      void main() {\\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\\n\\n        vec4 result = vec4(0.);\\n\\n        for (int i=0; i<4; i++) {\\n          int flatIndex = index + i;\\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\\n          result[i] = getA(rc.x, rc.y, rc.z);\\n        }\\n\\n        ${e.output} = result;\\n      }\\n    `}}class RR{constructor(t){this.variableNames=[\"A\"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=DA.DENSE,this.customUniforms=[{name:\"texShape\",type:\"ivec2\"}];const e=cR();this.outputShape=t,this.enableShapeUniforms=NR(this.outputShape.length),this.userCode=`\\n      ivec3 outCoordsFromFlatIndex(int index) {\\n        ${this.enableShapeUniforms?dR([\"r\",\"c\",\"d\"],t):hR([\"r\",\"c\",\"d\"],t)}\\n        return ivec3(r, c, d);\\n      }\\n\\n      void main() {\\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\\n\\n        vec4 result = vec4(0.);\\n\\n        for (int i=0; i<4; i++) {\\n          int flatIndex = index + i;\\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\\n        }\\n\\n        ${e.output} = result;\\n      }\\n    `}}class LR{constructor(t){this.variableNames=[\"A\"],this.outTexUsage=FA.DOWNLOAD;const e=cR();this.outputShape=t,this.userCode=`\\n      ${fR}\\n\\n      void main() {\\n        float x = getAAtOutCoords();\\n        ${e.output} = encode_float(x);\\n      }\\n    `}}class DR{constructor(t){this.variableNames=[\"A\"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=FA.DOWNLOAD;const e=cR();this.outputShape=t,this.userCode=`\\n      ${fR}\\n\\n      void main() {\\n        ivec3 coords = getOutputCoords();\\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\\n        ${e.output} = encode_float(x);\\n      }\\n    `}}class FR{constructor(t,e=!1){this.variableNames=[\"A\"],this.customUniforms=[{name:\"texShape\",type:\"ivec2\"}];const n=cR();this.outputShape=t,this.enableShapeUniforms=NR(this.outputShape.length);let r=\"result\";e&&(r=\"floor(result * 255. + 0.5)\"),this.userCode=`\\n      ${this.enableShapeUniforms?\"\\n  int getFlatIndex(ivec3 coords) {\\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\\n  }\\n\":pR(t)}\\n\\n      void main() {\\n        ivec3 coords = getOutputCoords();\\n\\n        int flatIndex = getFlatIndex(coords);\\n        int offset = imod(flatIndex, 4);\\n\\n        flatIndex = idiv(flatIndex, 4, 1.);\\n\\n        int r = flatIndex / texShape[1];\\n        int c = imod(flatIndex, texShape[1]);\\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\\n        vec4 values = ${n.texture2D}(A, uv);\\n\\n        float result;\\n\\n        if(offset == 0) {\\n          result = values[0];\\n        } else if(offset == 1) {\\n          result = values[1];\\n        } else if(offset == 2) {\\n          result = values[2];\\n        } else {\\n          result = values[3];\\n        }\\n\\n        ${n.output} = vec4(${r}, 0., 0., 0.);\\n      }\\n    `}}class $R{constructor(t,e=!1){this.variableNames=[\"A\"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:\"texShape\",type:\"ivec2\"}];const n=cR();this.outputShape=t,this.enableShapeUniforms=NR(this.outputShape.length);let r=\"\",s=\"result\";e&&(s=\"floor(result * 255. + 0.5)\");for(let e=0;e<=1;e++)for(let s=0;s<=1;s++){const i=2*e+s;r+=`\\n          localCoords = coords;\\n          if(localCoords[2] + ${s} < ${this.enableShapeUniforms?\"outShape[2]\":`${t[2]}`}) {\\n          localCoords[2] += ${s};\\n          if (localCoords[1] + ${e} < ${this.enableShapeUniforms?\"outShape[1]\":`${t[1]}`}) {\\n            localCoords[1] += ${e};\\n\\n            flatIndex = getFlatIndex(localCoords);\\n            offset = imod(flatIndex, 4);\\n\\n            flatIndex = idiv(flatIndex, 4, 1.);\\n\\n            int r = flatIndex / texShape[1];\\n            int c = imod(flatIndex, texShape[1]);\\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\\n            values = ${n.texture2D}(A, uv);\\n\\n            if (offset == 0) {\\n              result[${i}] = values[0];\\n            } else if (offset == 1) {\\n              result[${i}] = values[1];\\n            } else if (offset == 2) {\\n              result[${i}] = values[2];\\n            } else {\\n              result[${i}] = values[3];\\n            }\\n          }\\n        }\\n        `}this.userCode=`\\n        ${this.enableShapeUniforms?\"\\n  int getFlatIndex(ivec3 coords) {\\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\\n  }\\n\":pR(t)}\\n\\n        void main() {\\n          ivec3 coords = getOutputCoords();\\n\\n          vec4 result = vec4(0.);\\n          int flatIndex, r, c, offset;\\n          ivec3 localCoords;\\n          vec2 uv;\\n          vec4 values;\\n\\n          ${r}\\n\\n          ${n.output} = ${s};\\n        }\\n    `}}function OR(t,e,n,r,s,i){!function(t,e){const n=jt().getNumber(\"WEBGL_MAX_TEXTURE_SIZE\");if(t<=0||e<=0)throw new Error(`Requested texture size [${t}x${e}] is invalid.`);if(t>n||e>n)throw new Error(`Requested texture size [${t}x${e}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}(e,n);const a=function(t){return ZA(t,(()=>t.createTexture()),\"Unable to create WebGLTexture.\")}(t),o=t.TEXTURE_2D;return UA(t,(()=>t.bindTexture(o,a))),UA(t,(()=>t.texParameteri(o,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE))),UA(t,(()=>t.texParameteri(o,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE))),UA(t,(()=>t.texParameteri(o,t.TEXTURE_MIN_FILTER,t.NEAREST))),UA(t,(()=>t.texParameteri(o,t.TEXTURE_MAG_FILTER,t.NEAREST))),UA(t,(()=>t.texImage2D(o,0,r,e,n,0,s,i,null))),UA(t,(()=>t.bindTexture(t.TEXTURE_2D,null))),a}function PR(t){return t.internalFormatFloat}function zR(t){return t.internalFormatHalfFloat}function BR(t){return t.downloadTextureFormat}function UR(t){return t.internalFormatPackedFloat}function VR(t){return t.internalFormatPackedHalfFloat}class WR{constructor(t){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const e=jt().getNumber(\"WEBGL_VERSION\");null!=t?(this.gl=t,function(t,e){AA[t]=e}(e,t)):this.gl=LA(e);let n=\"WEBGL_color_buffer_float\";const r=\"EXT_color_buffer_half_float\";if(1===jt().getNumber(\"WEBGL_VERSION\")){const t=\"OES_texture_float\",e=\"OES_texture_half_float\";if(this.textureFloatExtension=WA(this.gl,t),iR(this.gl,e))this.textureHalfFloatExtension=WA(this.gl,e);else if(jt().get(\"WEBGL_FORCE_F16_TEXTURES\"))throw new Error(\"GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.\");if(this.colorBufferFloatExtension=this.gl.getExtension(n),iR(this.gl,r))this.colorBufferHalfFloatExtension=WA(this.gl,r);else if(jt().get(\"WEBGL_FORCE_F16_TEXTURES\"))throw new Error(\"GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.\")}else if(n=\"EXT_color_buffer_float\",iR(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!iR(this.gl,r))throw new Error(\"GL context does not support color renderable floats\");this.colorBufferHalfFloatExtension=this.gl.getExtension(r)}this.vertexBuffer=function(t){return function(t,e){const n=ZA(t,(()=>t.createBuffer()),\"Unable to create WebGLBuffer\");return UA(t,(()=>t.bindBuffer(t.ARRAY_BUFFER,n))),UA(t,(()=>t.bufferData(t.ARRAY_BUFFER,e,t.STATIC_DRAW))),n}(t,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}(this.gl),this.indexBuffer=function(t){return function(t,e){const n=ZA(t,(()=>t.createBuffer()),\"Unable to create WebGLBuffer\");return UA(t,(()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,n))),UA(t,(()=>t.bufferData(t.ELEMENT_ARRAY_BUFFER,e,t.STATIC_DRAW))),n}(t,new Uint16Array([0,1,2,2,1,3]))}(this.gl),this.framebuffer=function(t){return ZA(t,(()=>t.createFramebuffer()),\"Unable to create WebGLFramebuffer.\")}(this.gl),this.textureConfig=BA(this.gl,this.textureHalfFloatExtension)}get debug(){return jt().getBool(\"DEBUG\")}dispose(){if(this.disposed)return;null!=this.program&&console.warn(\"Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing.\"),null!=this.outputTexture&&console.warn(\"Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.\");const t=this.gl;UA(t,(()=>t.finish())),UA(t,(()=>t.bindFramebuffer(t.FRAMEBUFFER,null))),UA(t,(()=>t.deleteFramebuffer(this.framebuffer))),UA(t,(()=>t.bindBuffer(t.ARRAY_BUFFER,null))),UA(t,(()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null))),UA(t,(()=>t.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[s,i]=OA(e,n);return OR(t,s,i,PR(r),r.textureFormatFloat,t.FLOAT)}(this.gl,t,e,this.textureConfig)}createFloat16MatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[s,i]=OA(e,n);return OR(t,s,i,zR(r),r.textureFormatFloat,r.textureTypeHalfFloat)}(this.gl,t,e,this.textureConfig)}createUnsignedBytesMatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[s,i]=OA(e,n);return OR(t,s,i,BR(r),t.RGBA,t.UNSIGNED_BYTE)}(this.gl,t,e,this.textureConfig)}uploadPixelDataToTexture(t,e){this.throwIfDisposed(),function(t,e,n){UA(t,(()=>t.bindTexture(t.TEXTURE_2D,e))),n.data instanceof Uint8Array?UA(t,(()=>t.texImage2D(t.TEXTURE_2D,0,t.RGBA,n.width,n.height,0,t.RGBA,t.UNSIGNED_BYTE,n.data))):UA(t,(()=>t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,n))),UA(t,(()=>t.bindTexture(t.TEXTURE_2D,null)))}(this.gl,t,e)}uploadDenseMatrixToTexture(t,e,n,r){this.throwIfDisposed(),function(t,e,n,r,s,i){let a,o,l;UA(t,(()=>t.bindTexture(t.TEXTURE_2D,e))),s instanceof Uint8Array?(a=new Uint8Array(n*r*4),o=t.UNSIGNED_BYTE,l=t.RGBA):(a=new Float32Array(n*r*4),o=t.FLOAT,l=i.internalFormatPackedFloat),a.set(s),UA(t,(()=>t.texImage2D(t.TEXTURE_2D,0,l,n,r,0,t.RGBA,o,a))),UA(t,(()=>t.bindTexture(t.TEXTURE_2D,null)))}(this.gl,t,e,n,r,this.textureConfig)}createFloat16PackedMatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[s,i]=zA(e,n);return OR(t,s,i,VR(r),t.RGBA,r.textureTypeHalfFloat)}(this.gl,t,e,this.textureConfig)}createPackedMatrixTexture(t,e){return this.throwIfDisposed(),function(t,e,n,r){const[s,i]=zA(e,n);return OR(t,s,i,UR(r),t.RGBA,t.FLOAT)}(this.gl,t,e,this.textureConfig)}deleteMatrixTexture(t){this.throwIfDisposed(),this.outputTexture===t&&(KA(this.gl,this.framebuffer),this.outputTexture=null),UA(this.gl,(()=>this.gl.deleteTexture(t)))}downloadByteEncodedFloatMatrixFromOutputTexture(t,e,n){return this.downloadMatrixDriver(t,(()=>function(t,e,n,r){const[s,i]=OA(e,n),a=new Uint8Array(e*n*4);return UA(t,(()=>t.readPixels(0,0,s,i,r.downloadTextureFormat,t.UNSIGNED_BYTE,a))),new Float32Array(a.buffer)}(this.gl,e,n,this.textureConfig)))}downloadPackedMatrixFromBuffer(t,e,n,r,s,i){return function(t,e,n,r,s,i,a,o){const l=t,u=new Float32Array(function(t,e){const[n,r]=zA(t,e);return n*r*4}(i,a));return l.bindBuffer(l.PIXEL_PACK_BUFFER,e),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}(this.gl,t,0,0,0,s,i,this.textureConfig)}downloadFloat32MatrixFromBuffer(t,e){return function(t,e,n){const r=t,s=new Float32Array(n);return r.bindBuffer(r.PIXEL_PACK_BUFFER,e),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,s),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),s}(this.gl,t,e)}createBufferFromTexture(t,e,n){this.bindTextureToFrameBuffer(t);const r=function(t,e,n,r){const s=t.createBuffer();UA(t,(()=>t.bindBuffer(t.PIXEL_PACK_BUFFER,s)));const i=16*e*n;return UA(t,(()=>t.bufferData(t.PIXEL_PACK_BUFFER,i,t.STREAM_READ))),UA(t,(()=>t.readPixels(0,0,n,e,t.RGBA,t.FLOAT,0))),UA(t,(()=>t.bindBuffer(t.PIXEL_PACK_BUFFER,null))),s}(this.gl,e,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){const t=this.createFence(this.gl);return this.pollFence(t)}createFence(t){let e,n;if(jt().getBool(\"WEBGL_FENCE_API_ENABLED\")){const r=t,s=r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE,0);t.flush(),n=()=>{const t=r.clientWaitSync(s,0,0);return t===r.ALREADY_SIGNALED||t===r.CONDITION_SATISFIED},e=s}else jt().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\")>0?(e=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(e,jt().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\"))):n=()=>!0;return{query:e,isFencePassed:n}}downloadMatrixFromPackedTexture(t,e,n){return this.downloadMatrixDriver(t,(()=>function(t,e,n){const r=new Float32Array(e*n*4);return UA(t,(()=>t.readPixels(0,0,n,e,t.RGBA,t.FLOAT,r))),r}(this.gl,e,n)))}createProgram(t){this.throwIfDisposed();const e=this.gl,n=function(t,e){const n=ZA(t,(()=>t.createShader(t.FRAGMENT_SHADER)),\"Unable to create fragment WebGLShader.\");if(UA(t,(()=>t.shaderSource(n,e))),UA(t,(()=>t.compileShader(n))),!1===t.getShaderParameter(n,t.COMPILE_STATUS))throw function(t,e){const n=GA.exec(e);if(null==n)return console.log(`Couldn't parse line number in error: ${e}`),void console.log(t);const r=+n[1],s=t.split(\"\\n\"),i=s.length.toString().length+2,a=s.map(((t,e)=>pt((e+1).toString(),i)+t));let o=0;for(let t=0;t<a.length;t++)o=Math.max(a[t].length,o);const l=a.slice(0,r-1),u=a.slice(r-1,r),c=a.slice(r);console.log(l.join(\"\\n\")),console.log(e.split(\"\\n\")[0]),console.log(`%c ${pt(u[0],o)}`,\"border:1px solid red; background-color:#e3d2d2; color:#a61717\"),console.log(c.join(\"\\n\"))}(e,t.getShaderInfoLog(n)),new Error(\"Failed to compile fragment shader.\");return n}(e,t);null==this.vertexShader&&(this.vertexShader=function(t){const e=cR();return function(t,e){const n=ZA(t,(()=>t.createShader(t.VERTEX_SHADER)),\"Unable to create vertex WebGLShader.\");if(UA(t,(()=>t.shaderSource(n,e))),UA(t,(()=>t.compileShader(n))),!1===t.getShaderParameter(n,t.COMPILE_STATUS))throw console.log(t.getShaderInfoLog(n)),new Error(\"Failed to compile vertex shader.\");return n}(t,`${e.version}\\n    precision highp float;\\n    ${e.attribute} vec3 clipSpacePos;\\n    ${e.attribute} vec2 uv;\\n    ${e.varyingVs} vec2 resultUV;\\n\\n    void main() {\\n      gl_Position = vec4(clipSpacePos, 1);\\n      resultUV = uv;\\n    }`)}(e));const r=function(t){return ZA(t,(()=>t.createProgram()),\"Unable to create WebGLProgram.\")}(e);return UA(e,(()=>e.attachShader(r,this.vertexShader))),UA(e,(()=>e.attachShader(r,n))),function(t,e){if(UA(t,(()=>t.linkProgram(e))),!1===t.getProgramParameter(e,t.LINK_STATUS))throw console.log(t.getProgramInfoLog(e)),new Error(\"Failed to link vertex and fragment shaders.\")}(e,r),this.debug&&HA(e,r),this.vertexAttrsAreBound||(this.setProgram(r),this.vertexAttrsAreBound=function(t,e,n){return UA(t,(()=>t.bindBuffer(t.ARRAY_BUFFER,n))),jA(t,e,\"clipSpacePos\",n,3,20,0)&&jA(t,e,\"uv\",n,2,20,12)}(e,this.program,this.vertexBuffer)),r}deleteProgram(t){this.throwIfDisposed(),t===this.program&&(this.program=null),null!=t&&UA(this.gl,(()=>this.gl.deleteProgram(t)))}setProgram(t){this.throwIfDisposed(),this.program=t,null!=this.program&&this.debug&&HA(this.gl,this.program),UA(this.gl,(()=>this.gl.useProgram(t)))}getUniformLocation(t,e,n=!0){return this.throwIfDisposed(),n?function(t,e,n){return ZA(t,(()=>t.getUniformLocation(e,n)),'uniform \"'+n+'\" not present in program.')}(this.gl,t,e):function(t,e,n){return t.getUniformLocation(e,n)}(this.gl,t,e)}getAttributeLocation(t,e){return this.throwIfDisposed(),UA(this.gl,(()=>this.gl.getAttribLocation(t,e)))}getUniformLocationNoThrow(t,e){return this.throwIfDisposed(),this.gl.getUniformLocation(t,e)}setInputMatrixTexture(t,e,n){this.throwIfDisposed(),this.throwIfNoProgram(),qA(this.gl,t,e,n)}setOutputMatrixTexture(t,e,n){this.setOutputMatrixTextureDriver(t,n,e)}setOutputPackedMatrixTexture(t,e,n){this.throwIfDisposed();const[r,s]=zA(e,n);this.setOutputMatrixTextureDriver(t,r,s)}setOutputMatrixWriteRegion(t,e,n,r){this.setOutputMatrixWriteRegionDriver(n,t,r,e)}setOutputPackedMatrixWriteRegion(t,e,n,r){throw new Error(\"setOutputPackedMatrixWriteRegion not implemented.\")}debugValidate(){null!=this.program&&HA(this.gl,this.program),YA(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const t=this.gl;this.debug&&this.debugValidate(),UA(t,(()=>t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),UA(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=WA(this.gl,2===jt().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\")?\"EXT_disjoint_timer_query_webgl2\":\"EXT_disjoint_timer_query\")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===jt().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\")){const t=this.gl,e=this.getQueryTimerExtensionWebGL2(),n=t.createQuery();return t.beginQuery(e.TIME_ELAPSED_EXT,n),n}const t=this.getQueryTimerExtensionWebGL1(),e=t.createQueryEXT();return t.beginQueryEXT(t.TIME_ELAPSED_EXT,e),e}endQuery(){if(2===jt().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\")){const t=this.gl,e=this.getQueryTimerExtensionWebGL2();return void t.endQuery(e.TIME_ELAPSED_EXT)}const t=this.getQueryTimerExtensionWebGL1();t.endQueryEXT(t.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(t){return await ft((()=>this.disposed||this.isQueryAvailable(t,jt().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\")))),this.getQueryTime(t,jt().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION\"))}getQueryTime(t,e){if(0===e)return null;if(2===e){const e=this.gl;return e.getQueryParameter(t,e.QUERY_RESULT)/1e6}{const e=this.getQueryTimerExtensionWebGL1();return e.getQueryObjectEXT(t,e.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(t,e){if(0===e)return!0;if(2===e){const e=this.gl,n=this.getQueryTimerExtensionWebGL2(),r=e.getQueryParameter(t,e.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),r&&!this.disjoint}{const e=this.getQueryTimerExtensionWebGL1(),n=e.getQueryObjectEXT(t,e.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(e.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(t){return new Promise((e=>{this.addItemToPoll((()=>t.isFencePassed()),(()=>e()))}))}pollItems(){const t=function(t){let e=0;for(;e<t.length&&t[e]();++e);return e-1}(this.itemsToPoll.map((t=>t.isDoneFn)));for(let e=0;e<=t;++e){const{resolveFn:t}=this.itemsToPoll[e];t()}this.itemsToPoll=this.itemsToPoll.slice(t+1)}addItemToPoll(t,e){this.itemsToPoll.push({isDoneFn:t,resolveFn:e}),this.itemsToPoll.length>1||ft((()=>(this.pollItems(),0===this.itemsToPoll.length)))}bindTextureToFrameBuffer(t){this.throwIfDisposed(),XA(this.gl,t,this.framebuffer),this.debug&&YA(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(XA(this.gl,this.outputTexture,this.framebuffer),this.debug&&YA(this.gl)):KA(this.gl,this.framebuffer)}downloadMatrixDriver(t,e){this.bindTextureToFrameBuffer(t);const n=e();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(t,e,n){this.throwIfDisposed();const r=this.gl;XA(r,t,this.framebuffer),this.debug&&YA(r),this.outputTexture=t,UA(r,(()=>r.viewport(0,0,e,n))),UA(r,(()=>r.scissor(0,0,e,n)))}setOutputMatrixWriteRegionDriver(t,e,n,r){this.throwIfDisposed(),UA(this.gl,(()=>this.gl.scissor(t,e,n,r)))}throwIfDisposed(){if(this.disposed)throw new Error(\"Attempted to use disposed GPGPUContext.\")}throwIfNoProgram(){if(null==this.program)throw new Error(\"No GPU program is currently set.\")}}const{addImpl:GR,bincountImpl:HR,bincountReduceImpl:jR,ceilImpl:qR,concatImpl:XR,equalImpl:KR,expImpl:YR,expm1Impl:ZR,floorImpl:JR,gatherNdImpl:QR,gatherV2Impl:tL,greaterImpl:eL,greaterEqualImpl:nL,lessImpl:rL,lessEqualImpl:sL,linSpaceImpl:iL,logImpl:aL,maxImpl:oL,maximumImpl:lL,minimumImpl:uL,multiplyImpl:cL,negImpl:hL,notEqualImpl:dL,prodImpl:pL,rangeImpl:fL,rsqrtImpl:mL,sigmoidImpl:gL,simpleAbsImpl:yL,sliceImpl:xL,sparseFillEmptyRowsImpl:bL,sparseReshapeImpl:vL,sparseSegmentReductionImpl:wL,sqrtImpl:SL,stridedSliceImpl:TL,stringNGramsImpl:_L,stringSplitImpl:ML,stringToHashBucketFastImpl:kL,subImpl:EL,tileImpl:IL,topKImpl:CL,transposeImpl:NL,uniqueImpl:AL}=G;function RL(t,e){return[\"x\",\"y\",\"z\",\"w\",\"u\",\"v\"].slice(0,e).map((e=>`${t}.${e}`))}function LL(t,e){return 1===e?[t]:RL(t,e)}class DL{constructor(t){this.variableNames=[\"A\"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=t;const e=t.length;if(0===e)this.userCode=\"\\n        void main() {\\n          setOutput(vec4(getA(), 0., 0., 0.));\\n        }\\n      \";else{const n=LL(\"rc\",e),r=MR(e),s=function(t,e,n){if(1===t)return`rc > ${e[0]}`;let r=\"\";for(let s=t-2;s<t;s++)r+=`${n[s]} >= ${e[s]}`,s<t-1&&(r+=\"||\");return r}(e,t,n),i=function(t,e,n,r){if(1===t)return\"\";const s=r.slice(-2);return`\\n    int r = ${s[0]};\\n    int c = ${s[1]};\\n    int rp1 = r + 1;\\n    int cp1 = c + 1;\\n\\n    bool cEdge = cp1 >= ${e};\\n    bool rEdge = rp1 >= ${n};\\n  `}(e,t[t.length-1],t[t.length-2],n),a=function(t,e){const n=t.length,r=function(t,e){const n=[];for(let r=0;r<=1;r++)for(let s=0;s<=1;s++){let i=`${0===r?\"r\":\"rp1\"}, ${0===s?\"c\":\"cp1\"}`;for(let n=2;n<t;n++)i=`${e[e.length-1-n]},`+i;n.push(i)}return n}(n,e);return 1===n?`getA(rc),\\n            rc + 1 >= ${t[0]} ? 0. : getA(rc + 1),\\n            0, 0`:`getA(${r[0]}),\\n          cEdge ? 0. : getA(${r[1]}),\\n          rEdge ? 0. : getA(${r[2]}),\\n          rEdge || cEdge ? 0. : getA(${r[3]})`}(t,n);this.userCode=`\\n        void main() {\\n          ${r} rc = getOutputCoords();\\n\\n          if(${s}) {\\n            setOutput(vec4(0));\\n          } else {\\n            ${i}\\n\\n            setOutput(vec4(${a}));\\n          }\\n        }\\n      `}}}class FL{constructor(t,e){this.variableNames=[\"A\"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:\"inputShape\",type:\"ivec3\"}],this.outputShape=t,this.enableShapeUniforms=NR(this.outputShape.length);let n=\"\";for(let t=0;t<4;t++){let e=\"thisRC = rc;\";t%2==1&&(e+=\"thisRC.z += 1;\"),t>1&&(e+=\"thisRC.y += 1;\"),n+=`\\n        ${e}\\n        ${t>0?\"if(thisRC.y < rows && thisRC.z < cols){\":\"\"}\\n          int flatIndex = getFlatIndex(thisRC);\\n\\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\\n\\n          result[${t}] =\\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\\n        ${t>0?\"}\":\"\"}\\n      `}var r,s;this.userCode=`\\n      ${r=e,s=this.enableShapeUniforms,`\\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\\n      ${s?function(t,e,n=\"index\"){const r=function(t,e){const n=t.length,r=t.map((t=>`${e}[${t}]`)),s=new Array(n-1);s[n-2]=r[n-1];for(let t=n-3;t>=0;--t)s[t]=`(${s[t+1]} * ${r[t+1]})`;return s}(t.map(((t,e)=>e)),e);return r.map(((e,s)=>`int ${t[s]} = ${n} / ${r[s]}; ${s===r.length-1?`int ${t[s+1]} = ${n} - ${t[s]} * ${r[s]}`:`index -= ${t[s]} * ${r[s]}`};`)).join(\"\")}([\"r\",\"c\",\"d\"],\"inputShape\"):hR([\"r\",\"c\",\"d\"],r)}\\n      return ivec3(r, c, d);\\n    }\\n  `}\\n      ${this.enableShapeUniforms?\"\\n  int getFlatIndex(ivec3 coords) {\\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\\n  }\\n\":pR(t)}\\n\\n      void main() {\\n        ivec3 rc = getOutputCoords();\\n\\n        vec4 result = vec4(0.);\\n\\n        ivec3 thisRC;\\n        int rows = ${this.enableShapeUniforms?\"outShape[1]\":t[1]};\\n        int cols = ${this.enableShapeUniforms?\"outShape[2]\":t[2]};\\n\\n        ${n}\\n\\n        setOutput(result);\\n      }\\n    `}}class $L{constructor(t){this.gpgpu=t,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(t,e,n){const r=PL(e,n),s=zL(t,r,n);s in this.freeTextures||(this.freeTextures[s]=[]),s in this.usedTextures||(this.usedTextures[s]=[]);const i=OL(t,r,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[s].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=i,this.log();const t=this.freeTextures[s].shift();return this.usedTextures[s].push(t),t}let a;return r===$A.PACKED_2X2_FLOAT32?a=this.gpgpu.createPackedMatrixTexture(t[0],t[1]):r===$A.PACKED_2X2_FLOAT16?a=this.gpgpu.createFloat16PackedMatrixTexture(t[0],t[1]):r===$A.UNPACKED_FLOAT32?a=this.gpgpu.createFloat32MatrixTexture(t[0],t[1]):r===$A.UNPACKED_FLOAT16?a=this.gpgpu.createFloat16MatrixTexture(t[0],t[1]):r===$A.PACKED_4X1_UNSIGNED_BYTE&&(a=this.gpgpu.createUnsignedBytesMatrixTexture(t[0],t[1])),this.usedTextures[s].push(a),this.numUsedTextures++,this._numBytesAllocated+=i,this.log(),a}releaseTexture(t,e,n,r){if(null==this.freeTextures)return;const s=PL(n,r),i=zL(e,s,r);i in this.freeTextures||(this.freeTextures[i]=[]);const a=OL(e,s,this.gpgpu.gl,this.gpgpu.textureConfig,r),o=jt().get(\"WEBGL_DELETE_TEXTURE_THRESHOLD\");-1!==o&&this._numBytesAllocated>o?(this.gpgpu.deleteMatrixTexture(t),this._numBytesAllocated-=a):(this.freeTextures[i].push(t),this.numFreeTextures++,this._numBytesFree+=a),this.numUsedTextures--;const l=this.usedTextures[i],u=l.indexOf(t);if(u<0)throw new Error(\"Cannot release a texture that was never provided by this texture manager\");l.splice(u,1),this.log()}log(){if(!this.logEnabled)return;const t=this.numFreeTextures+this.numUsedTextures;console.log(\"Free/Used\",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${t})`);const e=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*e)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const t in this.freeTextures)this.freeTextures[t].forEach((t=>{this.gpgpu.deleteMatrixTexture(t)}));for(const t in this.usedTextures)this.usedTextures[t].forEach((t=>{this.gpgpu.deleteMatrixTexture(t)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function OL(t,e,n,r,s){const i=function(t,e){switch(t){case $A.PACKED_2X2_FLOAT32:return UR(e);case $A.PACKED_2X2_FLOAT16:return VR(e);case $A.UNPACKED_FLOAT32:return PR(e);case $A.UNPACKED_FLOAT16:return zR(e);case $A.PACKED_4X1_UNSIGNED_BYTE:return BR(e);default:throw new Error(`Unknown physical texture type ${t}`)}}(e,r);let a;if(s){const[e,n]=zA(t[0],t[1]);a=e*n}else{const[e,n]=OA(t[0],t[1]);a=e*n}return a*function(t,e){const n=t;if(e===n.R32F)return 4;if(e===n.R16F)return 2;if(e===n.RGBA32F)return 16;if(e===t.RGBA)return 16;if(e===n.RGBA16F)return 8;throw new Error(`Unknown internal format ${e}`)}(n,i)}function PL(t,e){if(t===FA.UPLOAD)return $A.PACKED_2X2_FLOAT32;if(t===FA.RENDER||null==t)return function(t){return jt().getBool(\"WEBGL_RENDER_FLOAT32_ENABLED\")?t?$A.PACKED_2X2_FLOAT32:$A.UNPACKED_FLOAT32:t?$A.PACKED_2X2_FLOAT16:$A.UNPACKED_FLOAT16}(e);if(t===FA.DOWNLOAD||t===FA.PIXELS)return $A.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${t}`)}function zL(t,e,n){return`${t[0]}_${t[1]}_${e}_${n}`}class BL{constructor(t,e){this.variableNames=[\"A\"],this.outputShape=t,this.enableShapeUniforms=NR(this.outputShape.length),this.userCode=`\\n      float unaryOperation(float x) {\\n        ${e}\\n      }\\n\\n      void main() {\\n        float x = getAAtOutCoords();\\n        float y = unaryOperation(x);\\n\\n        setOutput(y);\\n      }\\n    `}}const UL=\"return abs(x);\",VL=\"return x;\";class WL{constructor(t,e){this.variableNames=[\"A\"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.enableShapeUniforms=NR(this.outputShape.length),this.userCode=`\\n      vec4 unaryOperation(vec4 x) {\\n        ${e}\\n      }\\n\\n      void main() {\\n        vec4 x = getAAtOutCoords();\\n        vec4 y = unaryOperation(x);\\n\\n        setOutput(y);\\n      }\\n    `}}class GL{constructor(t){this.variableNames=[\"A\"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=t;const e=t.length,n=LL(\"rc\",e),r=MR(e),s=function(t,e){if(1===t)return\"rc\";let n=\"\";for(let r=0;r<t;r++)n+=e[r],r<t-1&&(n+=\",\");return n}(e,n),i=n.slice(-2),a=e<=1?\"rc\":`vec2(${i.join(\",\")})`;this.userCode=`\\n      void main() {\\n        ${r} rc = getOutputCoords();\\n        vec4 packedInput = getA(${s});\\n\\n        setOutput(getChannel(packedInput, ${a}));\\n      }\\n    `}}const HL=rd,jL={},qL=jt().getNumber(\"CPU_HANDOFF_SIZE_THRESHOLD\");class XL extends j{constructor(t){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!jt().getBool(\"HAS_WEBGL\"))throw new Error(\"WebGL is not supported on this device\");if(null==t){const t=LA(jt().getNumber(\"WEBGL_VERSION\"));this.binaryCache=((e=jt().getNumber(\"WEBGL_VERSION\"))in jL||(jL[e]={}),jL[e]),this.gpgpu=new WR(t),this.canvas=t.canvas,this.gpgpuCreatedLocally=!0}else this.gpgpu=t,this.binaryCache={},this.gpgpuCreatedLocally=!1,this.canvas=t.gl.canvas;var e;this.textureManager=new $L(this.gpgpu),this.numMBBeforeWarning=null==jt().global.screen?1024:jt().global.screen.height*jt().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new H(this,zo())}nextDataId(){return XL.nextDataId++}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}write(t,e,n){if((jt().getBool(\"WEBGL_CHECK_NUMERICAL_PROBLEMS\")||jt().getBool(\"DEBUG\"))&&this.checkNumericalProblems(t),\"complex64\"===n&&null!=t)throw new Error(\"Cannot write to a complex64 dtype. Please use tf.complex(real, imag).\");const r={id:this.nextDataId()};return this.texData.set(r,{shape:e,dtype:n,values:t,usage:FA.UPLOAD,refCount:1}),r}refCount(t){return this.texData.has(t)?this.texData.get(t).refCount:0}incRef(t){this.texData.get(t).refCount++}decRef(t){this.texData.has(t)&&this.texData.get(t).refCount--}move(t,e,n,r,s){if(jt().getBool(\"DEBUG\")&&this.checkNumericalProblems(e),\"complex64\"===r)throw new Error(\"Cannot write to a complex64 dtype. Please use tf.complex(real, imag).\");this.texData.set(t,{shape:n,dtype:r,values:e,usage:FA.UPLOAD,refCount:s})}disposeIntermediateTensorInfo(t){this.disposeData(t.dataId)}readSync(t){const e=this.texData.get(t),{values:n,dtype:r,complexTensorInfos:s,slice:i,shape:a,isPacked:o}=e;if(null!=i){let e;e=o?new WL(a,VL):new BL(a,VL);const n=this.runWebGLProgram(e,[{dataId:t,shape:a,dtype:r}],r),s=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),s}if(null!=n)return this.convertAndCacheOnCPU(t);if(\"string\"===r)return n;const l=null!=this.activeTimers;let u,c;return l&&(u=Ns()),c=\"complex64\"===r?qp(this.readSync(s.real.dataId),this.readSync(s.imag.dataId)):this.getValuesFromTexture(t),l&&(this.downloadWaitMs+=Ns()-u),this.convertAndCacheOnCPU(t,c)}async read(t){if(this.pendingRead.has(t)){const e=this.pendingRead.get(t);return new Promise((t=>e.push(t)))}const e=this.texData.get(t),{values:n,shape:r,slice:s,dtype:i,complexTensorInfos:a,isPacked:o}=e;if(null!=s){let e;e=o?new WL(r,VL):new BL(r,VL);const n=this.runWebGLProgram(e,[{dataId:t,shape:r,dtype:i}],i),s=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),s}if(null!=n)return this.convertAndCacheOnCPU(t);if(!jt().getBool(\"WEBGL_DOWNLOAD_FLOAT_ENABLED\")&&2===jt().getNumber(\"WEBGL_VERSION\"))throw new Error(\"tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.\");let l,u,c=null;if(\"complex64\"!==i&&jt().get(\"WEBGL_BUFFER_SUPPORTED\")){l=this.decode(t);const e=this.texData.get(l.dataId);c=this.gpgpu.createBufferFromTexture(e.texture,...PA(r))}if(this.pendingRead.set(t,[]),\"complex64\"!==i&&await this.gpgpu.createAndWaitForFence(),\"complex64\"===i){const t=await Promise.all([this.read(a.real.dataId),this.read(a.imag.dataId)]);u=qp(t[0],t[1])}else if(null==c)u=this.getValuesFromTexture(t);else{const t=at(r);u=this.gpgpu.downloadFloat32MatrixFromBuffer(c,t)}if(null!=l&&this.disposeIntermediateTensorInfo(l),null!=c){const t=this.gpgpu.gl;UA(t,(()=>t.deleteBuffer(c)))}const h=this.convertAndCacheOnCPU(t,u),d=this.pendingRead.get(t);return this.pendingRead.delete(t),d.forEach((t=>t(h))),this.pendingDisposal.has(t)&&(this.pendingDisposal.delete(t),this.disposeData(t)&&zo().removeDataId(t,this),this.pendingDeletes--),h}bufferSync(t){const e=this.readSync(t.dataId);let n=e;if(\"string\"===t.dtype)try{n=e.map((t=>Ls(t)))}catch(t){throw new Error(\"Failed to decode encoded string bytes into utf-8\")}return wa(t.shape,t.dtype,n)}checkNumericalProblems(t){if(null!=t)for(let e=0;e<t.length;e++){const n=t[e];if(!VA(n)){if(jt().getBool(\"WEBGL_RENDER_FLOAT32_CAPABLE\"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(t){const{shape:e,dtype:n,isPacked:r}=this.texData.get(t),s=at(e);if(jt().getBool(\"WEBGL_DOWNLOAD_FLOAT_ENABLED\")){const n=this.decode(t),r=this.texData.get(n.dataId),i=this.gpgpu.downloadMatrixFromPackedTexture(r.texture,...PA(e)).subarray(0,s);return this.disposeIntermediateTensorInfo(n),i}const i=jt().getBool(\"WEBGL_PACK\")&&!0===r,a=i?tR(e):e,o=i?new DR(a):new LR(a),l=this.runWebGLProgram(o,[{shape:a,dtype:n,dataId:t}],\"float32\"),u=this.texData.get(l.dataId),c=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(u.texture,u.texShape[0],u.texShape[1]).subarray(0,s);return this.disposeIntermediateTensorInfo(l),c}timerAvailable(){return jt().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE\")>0}async time(t){const e=this.activeTimers,n=[];let r=!1;null==this.programTimersStack?(this.programTimersStack=n,r=!0):this.activeTimers.push(n),this.activeTimers=n,t();const s=it(this.activeTimers.map((t=>t.query))).filter((t=>null!=t)),i=it(this.activeTimers.map((t=>t.name))).filter((t=>null!=t));this.activeTimers=e,r&&(this.programTimersStack=null);const a={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};if(jt().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE\")>0){const t=await Promise.all(s);a.kernelMs=Q(t),a.getExtraProfileInfo=()=>t.map(((t,e)=>({name:i[e],ms:t}))).map((t=>`${t.name}: ${t.ms}`)).join(\", \")}else a.kernelMs={error:\"WebGL query timers are not supported in this environment.\"};return this.uploadWaitMs=0,this.downloadWaitMs=0,a}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return jt().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE\")>0?this.gpgpu.beginQuery():{startMs:Ns(),endMs:null}}endTimer(t){return jt().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE\")>0?(this.gpgpu.endQuery(),t):(t.endMs=Ns(),t)}async getQueryTime(t){if(jt().getNumber(\"WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE\")>0)return this.gpgpu.waitForQueryAndGetTime(t);const e=t;return e.endMs-e.startMs}disposeData(t,e=!1){if(this.pendingDisposal.has(t))return!1;if(!this.texData.has(t))return!0;if(e?this.texData.get(t).refCount=0:this.texData.get(t).refCount--,!e&&this.texData.get(t).refCount>0)return!1;if(this.pendingRead.has(t))return this.pendingDisposal.add(t),this.pendingDeletes++,!1;this.releaseGPUData(t);const{complexTensorInfos:n}=this.texData.get(t);return null!=n&&(this.disposeData(n.real.dataId,e),this.disposeData(n.imag.dataId,e)),this.texData.delete(t),!0}releaseGPUData(t){const{texture:e,dtype:n,texShape:r,usage:s,isPacked:i,slice:a}=this.texData.get(t),o=a&&a.origDataId||t,l=this.dataRefCount.get(o);l>1?this.dataRefCount.set(o,l-1):(this.dataRefCount.delete(o),null!=e&&(this.numBytesInGPU-=this.computeBytes(r,n),this.textureManager.releaseTexture(e,r,s,i)));const u=this.texData.get(t);u.texture=null,u.texShape=null,u.isPacked=!1,u.slice=null}getTexture(t){return this.uploadToGPU(t),this.texData.get(t).texture}getDataInfo(t){return this.texData.get(t)}shouldExecuteOnCPU(t,e=qL){return jt().getBool(\"WEBGL_CPU_FORWARD\")&&t.every((t=>null==this.texData.get(t.dataId).texture&&at(t.shape)<e))}getGPGPUContext(){return this.gpgpu}where(t){Vt(\"tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead\");const e=t.dataSync();return HL(t.shape,e)}packedUnaryOp(t,e,n){const r=new WL(t.shape,e),s=this.compileAndRun(r,[t],n);return zo().makeTensorFromDataId(s.dataId,s.shape,s.dtype)}abs(t){if(this.shouldExecuteOnCPU([t])&&\"complex64\"!==t.dtype){const e=yL(this.texData.get(t.dataId).values);return this.makeOutput(t.shape,t.dtype,e)}if(jt().getBool(\"WEBGL_PACK_UNARY_OPERATIONS\"))return this.packedUnaryOp(t,UL,t.dtype);const e=new BL(t.shape,UL),n=this.compileAndRun(e,[t]);return zo().makeTensorFromDataId(n.dataId,n.shape,n.dtype)}makeTensorInfo(t,e,n){let r;if(\"string\"===e&&null!=n&&n.length>0&&kt(n[0])){const s=n.map((t=>Rs(t)));r=this.write(s,t,e)}else r=this.write(n,t,e);return this.texData.get(r).usage=null,{dataId:r,shape:t,dtype:e}}makeOutput(t,e,n){const{dataId:r}=this.makeTensorInfo(t,e,n);return zo().makeTensorFromDataId(r,t,e,this)}unpackTensor(t){const e=new GL(t.shape);return this.runWebGLProgram(e,[t],t.dtype)}packTensor(t){const e=new DL(t.shape);return this.runWebGLProgram(e,[t],t.dtype,null,!0)}packedReshape(t,e){const n=[JA(t.shape),...QA(t.shape)],r={dtype:t.dtype,shape:n,dataId:t.dataId},s=[JA(e),...QA(e)],i=new FL(s,n),a=[n],o=this.runWebGLProgram(i,[r],t.dtype,a,!0);return{dataId:o.dataId,shape:e,dtype:o.dtype}}decode(t){const e=this.texData.get(t),{isPacked:n,shape:r,dtype:s}=e,i=tR(r);let a;const o=PA(i);a=n?new RR(i):new AR(i);const l=[o];return{dtype:s,shape:r,dataId:this.runWebGLProgram(a,[{shape:i,dtype:s,dataId:t}],s,l,!0).dataId}}runWebGLProgram(t,e,n,r,s=!1){const i=this.makeTensorInfo(t.outputShape,n),a=this.texData.get(i.dataId);if(t.packedOutput&&(a.isPacked=!0),t.outPackingScheme===DA.DENSE){const e=PA(t.outputShape);a.texShape=e.map((t=>2*t))}if(null!=t.outTexUsage&&(a.usage=t.outTexUsage),0===at(i.shape))return a.values=xt(i.dtype,0),i;const o=[],l=e.map((e=>{if(\"complex64\"===e.dtype)throw new Error(\"GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.\");let n=this.texData.get(e.dataId);if(null==n.texture){if(!t.packedInputs&&at(e.shape)<=jt().getNumber(\"WEBGL_SIZE_UPLOAD_UNIFORM\"))return{shape:e.shape,texData:null,isUniform:!0,uniformValues:n.values};t.packedInputs&&(n.isPacked=!0,n.shape=e.shape)}else if(!!n.isPacked!=!!t.packedInputs)e=n.isPacked?this.unpackTensor(e):this.packTensor(e),o.push(e),n=this.texData.get(e.dataId);else if(n.isPacked&&!nR(n.shape,e.shape)){const t=e,r=e.shape;e.shape=n.shape,e=this.packedReshape(e,r),o.push(e),n=this.texData.get(e.dataId),t.shape=r}return this.uploadToGPU(e.dataId),{shape:e.shape,texData:n,isUniform:!1}}));this.uploadToGPU(i.dataId);const u={shape:i.shape,texData:a,isUniform:!1},c=function(t,e,n){let r=\"\";e.concat(n).forEach((e=>{const s=null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0;if(t.enableShapeUniforms&&!e.isUniform){const i=e.texData.texShape,{useSqueezeShape:a,uniformShape:o,keptDims:l}=kR(t.packedInputs,e.shape,i);let u=\"\",c=\"\",h=\"\";if(1===o.length&&t.packedInputs){const t=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)];u=`${t[0]>1}_${t[1]>1}`}else if(2!==o.length||t.packedInputs){if(o.length>2&&!t.packedInputs){const t=Rt(o);h=`${t[0]===i[1]}_${t[t.length-1]===i[1]}`}}else c=`${o[0]>1}_${o[1]>1}`;const d=e.shape.length,p=2===o.length&&lt(e.shape,i),f=1===at(e.shape),m=_l(e.shape,n.shape),g=!t.packedInputs&&d===n.shape.length&&lt(i,n.texData.texShape),y=t.packedInputs||o.length>2?\"\":`${i[0]>1}_${i[1]>1}`;r+=`${d}_${g}_${a?l:\"\"}_${o.length}_${f}_${m}_${p}_${u}_${c}_${h}_${y}_${s}`}else{const t=e.isUniform?\"uniform\":e.texData.texShape;r+=`${e.shape}_${t}_${s}`}}));const s=t.userCode;let i=t.constructor.name;return i+=\"_\"+r+\"_\"+s+`${jt().getNumber(\"WEBGL_VERSION\")}`,i}(t,l,u),h=this.getAndSaveBinary(c,(()=>function(t,e,n,r){const s=n.map(((t,n)=>{const r={logicalShape:t.shape,texShape:t.isUniform?null:t.texData.texShape,isUniform:t.isUniform,isPacked:!t.isUniform&&t.texData.isPacked,flatOffset:null};return null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0&&(r.flatOffset=t.texData.slice.flatOffset),{name:e.variableNames[n],shapeInfo:r}})),i=s.map((t=>t.shapeInfo)),a={logicalShape:r.shape,texShape:r.texData.texShape,isUniform:!1,isPacked:r.texData.isPacked,flatOffset:null},o=gR(s,a,e),l=t.createProgram(o);let u=null;const c=t.getUniformLocation(l,\"NAN\",!1);1===jt().getNumber(\"WEBGL_VERSION\")&&(u=t.getUniformLocation(l,\"INFINITY\",!1));const h=!1,d={},p={},f={};for(let n=0;n<e.variableNames.length;n++){const r=e.variableNames[n];d[r]=t.getUniformLocation(l,r,h),d[`offset${r}`]=t.getUniformLocation(l,`offset${r}`,h),e.enableShapeUniforms&&(p[`${r}Shape`]=t.getUniformLocation(l,`${r}Shape`,h),f[`${r}TexShape`]=t.getUniformLocation(l,`${r}TexShape`,h))}let m,g,y;e.enableShapeUniforms&&(m=t.getUniformLocation(l,\"outShape\",h),y=t.getUniformLocation(l,\"outShapeStrides\",h),g=t.getUniformLocation(l,\"outTexShape\",h));const x=[];return e.customUniforms&&e.customUniforms.forEach(((e,n)=>{x[n]=t.getUniformLocation(l,e.name,h)})),{program:e,source:o,webGLProgram:l,uniformLocations:d,customUniformLocations:x,inShapeInfos:i,outShapeInfo:a,infLoc:u,nanLoc:c,inShapesLocations:p,inTexShapesLocations:f,outShapeLocation:m,outShapeStridesLocation:y,outTexShapeLocation:g}}(this.gpgpu,t,l,u))),d=null!=this.activeTimers;let p;d&&(p=this.startTimer()),function(t,e,n,r,s){e.program.enableShapeUniforms||(CR(e.inShapeInfos,n),CR([e.outShapeInfo],[r]));const i=r.texData.texture,a=r.texData.texShape;r.texData.isPacked?t.setOutputPackedMatrixTexture(i,a[0],a[1]):t.setOutputMatrixTexture(i,a[0],a[1]),t.setProgram(e.webGLProgram),1===jt().getNumber(\"WEBGL_VERSION\")&&null!==e.infLoc&&t.gl.uniform1f(e.infLoc,1/0),null!==e.nanLoc&&t.gl.uniform1f(e.nanLoc,NaN),n.forEach(((n,r)=>{const s=e.program.variableNames[r],i=e.uniformLocations[s],a=e.uniformLocations[`offset${s}`],o=e.inShapesLocations[`${s}Shape`],l=e.inTexShapesLocations[`${s}TexShape`];if(o){const{uniformShape:r}=kR(e.program.packedInputs,n.shape,n.texData.texShape);switch(r.length){case 1:t.gl.uniform1iv(o,new Int32Array(r));break;case 2:t.gl.uniform2iv(o,new Int32Array(r));break;case 3:t.gl.uniform3iv(o,new Int32Array(r));break;case 4:t.gl.uniform4iv(o,new Int32Array(r))}}if(l&&t.gl.uniform2i(l,n.texData.texShape[0],n.texData.texShape[1]),null!=i)if(n.isUniform)if(at(n.shape)<2)t.gl.uniform1f(i,n.uniformValues[0]);else{let e=n.uniformValues;e instanceof Float32Array||(e=new Float32Array(e)),t.gl.uniform1fv(i,e)}else null!=n.texData.slice&&null!=a&&t.gl.uniform1i(a,n.texData.slice.flatOffset),t.setInputMatrixTexture(n.texData.texture,i,r)}));const o=e.outShapeLocation;if(o)switch(r.shape.length){case 1:t.gl.uniform1iv(o,new Int32Array(r.shape));break;case 2:t.gl.uniform2iv(o,new Int32Array(r.shape));break;case 3:t.gl.uniform3iv(o,new Int32Array(r.shape));break;case 4:t.gl.uniform4iv(o,new Int32Array(r.shape))}if(e.outShapeStridesLocation){const n=Rt(r.shape);switch(r.shape.length){case 2:t.gl.uniform1iv(e.outShapeStridesLocation,new Int32Array(n));break;case 3:t.gl.uniform2iv(e.outShapeStridesLocation,new Int32Array(n));break;case 4:t.gl.uniform3iv(e.outShapeStridesLocation,new Int32Array(n))}}e.outTexShapeLocation&&t.gl.uniform2i(e.outTexShapeLocation,r.texData.texShape[0],r.texData.texShape[1]),e.program.customUniforms&&s&&e.program.customUniforms.forEach(((n,r)=>{const i=e.customUniformLocations[r],a=s[r];if(\"float\"===n.type)t.gl.uniform1fv(i,a);else if(\"vec2\"===n.type)t.gl.uniform2fv(i,a);else if(\"vec3\"===n.type)t.gl.uniform3fv(i,a);else if(\"vec4\"===n.type)t.gl.uniform4fv(i,a);else if(\"int\"===n.type)t.gl.uniform1iv(i,a);else if(\"ivec2\"===n.type)t.gl.uniform2iv(i,a);else if(\"ivec3\"===n.type)t.gl.uniform3iv(i,a);else{if(\"ivec4\"!==n.type)throw Error(`uniform type ${n.type} is not supported yet.`);t.gl.uniform4iv(i,a)}})),t.executeProgram()}(this.gpgpu,h,l,u,r),o.forEach((t=>this.disposeIntermediateTensorInfo(t))),d&&(p=this.endTimer(p),this.activeTimers.push({name:t.constructor.name,query:this.getQueryTime(p)}));const f=jt().get(\"WEBGL_FLUSH_THRESHOLD\");if(f>0){const t=Ns();t-this.lastGlFlushTime>f&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=t)}if(!jt().getBool(\"WEBGL_LAZILY_UNPACK\")&&a.isPacked&&!1===s){const t=this.unpackTensor(i);return this.disposeIntermediateTensorInfo(i),t}return i}compileAndRun(t,e,n,r,s=!1){return n=n||e[0].dtype,this.runWebGLProgram(t,e,n,r,s)}getAndSaveBinary(t,e){return t in this.binaryCache||(this.binaryCache[t]=e()),this.binaryCache[t]}getTextureManager(){return this.textureManager}dispose(){this.disposed||(jt().getBool(\"IS_TEST\")||Object.keys(this.binaryCache).forEach((t=>{this.gpgpu.deleteProgram(this.binaryCache[t].webGLProgram),delete this.binaryCache[t]})),this.textureManager.dispose(),null!=this.canvas&&\"undefined\"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=Vo((()=>{if(!jt().get(\"WEBGL_RENDER_FLOAT32_ENABLED\")){const t=jt().getBool(\"DEBUG\");jt().set(\"DEBUG\",!1);const e=this.abs(ml(1e-8)).dataSync()[0];if(jt().set(\"DEBUG\",t),e>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(t){const e=this.texData.get(t),{shape:n,dtype:r,values:s,texture:i,usage:a,isPacked:o}=e;if(null!=i)return;const l=null!=this.activeTimers;let u;l&&(u=Ns());let c=e.texShape;if(null==c&&(c=function(t,e=!1){let n=jt().getNumber(\"WEBGL_MAX_TEXTURE_SIZE\");if(e&&(n*=2,1===(t=t.map(((e,n)=>n>=t.length-2?Z(t[n]):t[n]))).length&&(t=[2,t[0]])),2!==t.length){const e=yt(t);t=e.newShape}let r=at(t);if(t.length<=1&&r<=n)return[1,r];if(2===t.length&&t[0]<=n&&t[1]<=n)return t;if(3===t.length&&t[0]*t[1]<=n&&t[2]<=n)return[t[0]*t[1],t[2]];if(3===t.length&&t[0]<=n&&t[1]*t[2]<=n)return[t[0],t[1]*t[2]];if(4===t.length&&t[0]*t[1]*t[2]<=n&&t[3]<=n)return[t[0]*t[1]*t[2],t[3]];if(4===t.length&&t[0]<=n&&t[1]*t[2]*t[3]<=n)return[t[0],t[1]*t[2]*t[3]];if(e){const e=JA(t);let n=2,s=2;return t.length&&([n,s]=QA(t)),r=e*(n/2)*(s/2),ht(r).map((t=>2*t))}return ht(r)}(n,o),e.texShape=c),null!=s){const t=tR(n);let i,a=c[1],h=c[0];const d=s instanceof Uint8Array;o?([a,h]=zA(c[0],c[1]),i=new $R(t,d)):i=new FR(t,d);const p=this.makeTensorInfo([h,a],r);this.texData.get(p.dataId).usage=d?FA.PIXELS:FA.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(p.dataId),a,h,s);const f=[[h,a]],m=!0,g=this.runWebGLProgram(i,[p],r,f,m),y=this.texData.get(g.dataId);e.texture=y.texture,e.texShape=y.texShape,e.isPacked=y.isPacked,e.usage=y.usage,this.disposeIntermediateTensorInfo(p),this.texData.delete(g.dataId),e.values=null,l&&(this.uploadWaitMs+=Ns()-u)}else{const t=this.acquireTexture(c,a,r,o);e.texture=t}}convertAndCacheOnCPU(t,e){const n=this.texData.get(t),{dtype:r}=n;return this.releaseGPUData(t),null!=e&&(n.values=function(t,e){if(\"float32\"===e||\"complex64\"===e)return t;if(\"int32\"===e||\"bool\"===e){const n=\"int32\"===e?new Int32Array(t.length):new Uint8Array(t.length);for(let e=0;e<n.length;++e)n[e]=Math.round(t[e]);return n}throw new Error(`Unknown dtype ${e}`)}(e,r)),n.values}acquireTexture(t,e,n,r){if(this.numBytesInGPU+=this.computeBytes(t,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const t=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${t} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(t,e,r)}computeBytes(t,e){return t[0]*t[1]*_t(e)}}XL.nextDataId=0,mi()&&Jo(\"webgl\",(()=>new XL),2);class KL{constructor(t,e,n){this.variableNames=[\"A\",\"B\"],this.outputShape=kl(e,n),this.enableShapeUniforms=NR(this.outputShape.length),this.userCode=`\\n      float binaryOperation(float a, float b) {\\n        ${t}\\n      }\\n\\n      void main() {\\n        float a = getAAtOutCoords();\\n        float b = getBAtOutCoords();\\n        setOutput(binaryOperation(a, b));\\n      }\\n    `}}class YL{constructor(t,e,n,r=!1){this.variableNames=[\"A\",\"B\"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=kl(e,n);const s=this.outputShape.length;this.enableShapeUniforms=NR(s);let i=\"\";if(r)if(0===s||1===at(this.outputShape))i=\"\\n          result.y = 0.;\\n          result.z = 0.;\\n          result.w = 0.;\\n        \";else if(i=`\\n          ${MR(s)} coords = getOutputCoords();\\n        `,1===s)this.enableShapeUniforms?i+=\"\\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\\n            result.z = 0.;\\n            result.w = 0.;\\n          \":i+=`\\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\\n            result.z = 0.;\\n            result.w = 0.;\\n          `;else{const t=LL(\"coords\",s);this.enableShapeUniforms?i+=`\\n            bool nextRowOutOfBounds =\\n              (${t[s-2]} + 1) >= outShape[${s} - 2];\\n            bool nextColOutOfBounds =\\n              (${t[s-1]} + 1) >= outShape[${s} - 1];\\n            result.y = nextColOutOfBounds ? 0. : result.y;\\n            result.z = nextRowOutOfBounds ? 0. : result.z;\\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\\n          `:i+=`\\n            bool nextRowOutOfBounds =\\n              (${t[s-2]} + 1) >= ${this.outputShape[s-2]};\\n            bool nextColOutOfBounds =\\n              (${t[s-1]} + 1) >= ${this.outputShape[s-1]};\\n            result.y = nextColOutOfBounds ? 0. : result.y;\\n            result.z = nextRowOutOfBounds ? 0. : result.z;\\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\\n          `}this.userCode=`\\n      vec4 binaryOperation(vec4 a, vec4 b) {\\n        ${t}\\n      }\\n\\n      void main() {\\n        vec4 a = getAAtOutCoords();\\n        vec4 b = getBAtOutCoords();\\n\\n        vec4 result = binaryOperation(a, b);\\n        ${i}\\n\\n        setOutput(result);\\n      }\\n    `}}function ZL(t){const{inputs:e,backend:n}=t,{x:r}=e;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const JL={kernelName:hn,backendName:\"webgl\",kernelFunc:ZL};function QL(t){const{inputs:e,backend:n}=t,{real:r,imag:s}=e,i=n.makeTensorInfo(r.shape,\"complex64\"),a=n.texData.get(i.dataId),o=ZL({inputs:{x:r},backend:n}),l=ZL({inputs:{x:s},backend:n});return a.complexTensorInfos={real:o,imag:l},i}const tD={kernelName:Te,backendName:\"webgl\",kernelFunc:QL},eD=\"return (a < 0.) ? b * a : a;\",nD=\"\\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\\n\",rD={kernelName:yn,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{alpha:i}=r,a=n.makeTensorInfo([],\"float32\",Is(i,\"float32\")),o=jt().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")?new YL(nD,s.shape,a.shape):new KL(eD,s.shape,a.shape),l=n.runWebGLProgram(o,[s,a],s.dtype);return n.disposeIntermediateTensorInfo(a),l}},sD=\"return (a < 0.) ? b * a : a;\",iD=\"\\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\\n\",aD={kernelName:tr,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n}=t,{x:r,alpha:s}=e,i=jt().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")?new YL(iD,r.shape,s.shape):new KL(sD,r.shape,s.shape);return n.runWebGLProgram(i,[r,s],r.dtype)}};function oD({opSnippet:t,packedOpSnippet:e,cpuKernelImpl:n,dtype:r}){return({inputs:s,backend:i})=>{const{x:a}=s,o=i,l=r||a.dtype;if(o.shouldExecuteOnCPU([a])&&null!=n){const t=o.texData.get(a.dataId),e=n(t.values,l);return o.makeTensorInfo(a.shape,l,e)}let u;return u=jt().getBool(\"WEBGL_PACK_UNARY_OPERATIONS\")&&null!=e?new WL(a.shape,e):new BL(a.shape,t),o.runWebGLProgram(u,[a],l)}}function lD({opSnippet:t,packedOpSnippet:e,checkOutOfBounds:n=!1,supportsComplex:r=!1,cpuKernelImpl:s,dtype:i}){return({inputs:a,backend:o})=>{const{a:l,b:u}=a,c=o;if(r&&\"complex64\"===l.dtype){const e=c.texData.get(l.dataId),n=c.texData.get(u.dataId),[r,s]=[[e.complexTensorInfos.real,n.complexTensorInfos.real],[e.complexTensorInfos.imag,n.complexTensorInfos.imag]].map((e=>{const[n,r]=e,s={dataId:n.dataId,dtype:n.dtype,shape:l.shape},i={dataId:r.dataId,dtype:r.dtype,shape:u.shape},a=new KL(t,l.shape,u.shape);return c.runWebGLProgram(a,[s,i],ei(n.dtype,r.dtype))})),i=QL({inputs:{real:r,imag:s},backend:c});return c.disposeIntermediateTensorInfo(r),c.disposeIntermediateTensorInfo(s),i}const h=i||ei(l.dtype,u.dtype);if((\"string\"===l.dtype||\"string\"===u.dtype||c.shouldExecuteOnCPU([l,u]))&&null!=s){const t=c.texData.get(l.dataId).values,e=c.texData.get(u.dataId).values,n=\"string\"===l.dtype?pf(t):t,r=\"string\"===l.dtype?pf(e):e,[i,a]=s(l.shape,u.shape,n,r,h),o=c.makeTensorInfo(a,h);return c.texData.get(o.dataId).values=i,o}let d;return d=jt().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")&&null!=e?new YL(e,l.shape,u.shape,n):new KL(t,l.shape,u.shape),c.runWebGLProgram(d,[l,u],h)}}function uD(t,e=!1){if(\"linear\"===t)return\"return x;\";if(\"relu\"===t)return e?\"\\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\\n  bvec4 isNaN = isnan(x);\\n\\n  result.r = isNaN.r ? x.r : result.r;\\n  result.g = isNaN.g ? x.g : result.g;\\n  result.b = isNaN.b ? x.b : result.b;\\n  result.a = isNaN.a ? x.a : result.a;\\n\\n  return result;\\n\":\"if (isnan(x)) return x;\\n  return (x < 0.0) ? 0.0 : x;\\n\";if(\"elu\"===t)return e?\"\\n  vec4 result;\\n\\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\\n\\n  return result;\\n\":\"return (x >= 0.0) ? x : (exp(x) - 1.0);\";if(\"relu6\"===t)return e?\"\\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\\n  bvec4 isNaN = isnan(x);\\n\\n  result.r = isNaN.r ? x.r : result.r;\\n  result.g = isNaN.g ? x.g : result.g;\\n  result.b = isNaN.b ? x.b : result.b;\\n  result.a = isNaN.a ? x.a : result.a;\\n\\n  return result;\\n\":\"if (isnan(x)) return x;\\n  return (x < 0.0) ? 0.0 : min(6.0, x);\\n\";if(\"prelu\"===t)return e?iD:sD;if(\"leakyrelu\"===t)return e?nD:eD;if(\"sigmoid\"===t)return\"return 1.0 / (1.0 + exp(-1.0 * x));\";throw new Error(`Activation ${t} has not been implemented for the WebGL backend.`)}class cD{constructor(t,e,n,r=!1,s=!1,i=!1,a=null,o=!1,l=!1){this.variableNames=[\"matrixA\",\"matrixB\"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n,this.enableShapeUniforms=NR(this.outputShape.length);const u=r?t[1]:t[2],c=Math.ceil(u/2),h=r?\"i * 2, rc.y\":\"rc.y, i * 2\",d=s?\"rc.z, i * 2\":\"i * 2, rc.z\",p=r?[\"a.xxyy\",\"a.zzww\"]:[\"a.xxzz\",\"a.yyww\"],f=s?[\"b.xzxz\",\"b.ywyw\"]:[\"b.xyxy\",\"b.zwzw\"];let m=\"\",g=\"\";a&&(m=o?`vec4 activation(vec4 a) {\\n          vec4 b = getPreluActivationWeightsAtOutCoords();\\n          ${a}\\n        }`:l?`vec4 activation(vec4 a) {\\n          vec4 b = getLeakyreluAlphaAtOutCoords();\\n          ${a}\\n        }`:`vec4 activation(vec4 x) {\\n          ${a}\\n        }`,g=\"result = activation(result);\");const y=i?\"result += getBiasAtOutCoords();\":\"\";i&&this.variableNames.push(\"bias\"),o&&this.variableNames.push(\"preluActivationWeights\"),l&&this.variableNames.push(\"leakyreluAlpha\");let x=\"rc.x\",b=\"rc.x\";t[0]<e[0]?x=`int(min(float(rc.x), ${t[0]-1}.))`:e[0]<t[0]&&(b=`int(min(float(rc.x), ${e[0]-1}.))`),this.userCode=`\\n      ${m}\\n      // Don't use uniform for sharedDimensionPacked for performance.\\n      const float sharedDimension = ${c}.0;\\n\\n      vec4 dot2x2ARowBCol(ivec3 rc) {\\n        vec4 result = vec4(0);\\n        for (int i = 0; i < ${c}; i++) {\\n          int batchA = ${x};\\n          int batchB = ${b};\\n          vec4 a = getMatrixA(batchA, ${h});\\n          vec4 b = getMatrixB(batchB, ${d});\\n\\n          // These swizzled products need to be separately added.\\n          // See: https://github.com/tensorflow/tfjs/issues/1735\\n          result += (${p[0]} * ${f[0]});\\n          result += (${p[1]} * ${f[1]});\\n        }\\n        return result;\\n      }\\n\\n      void main() {\\n        ivec3 rc = getOutputCoords();\\n        vec4 result = dot2x2ARowBCol(rc);\\n\\n        ${y}\\n\\n        ${g}\\n\\n        setOutput(result);\\n      }\\n    `}}class hD{constructor(t,e,n){this.variableNames=[\"AReal\",\"AImag\",\"BReal\",\"BImag\"],this.outputShape=kl(e,n),this.userCode=`\\n      float binaryOpComplex(\\n          float areal, float aimag, float breal, float bimag) {\\n        ${t}\\n      }\\n\\n      void main() {\\n        float areal = getARealAtOutCoords();\\n        float aimag = getAImagAtOutCoords();\\n        float breal = getBRealAtOutCoords();\\n        float bimag = getBImagAtOutCoords();\\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\\n      }\\n    `}}const dD=\"return a * b;\";function pD(t){const{inputs:e,backend:n}=t,{a:r,b:s}=e,i=ei(r.dtype,s.dtype);if(\"complex64\"===r.dtype){const t=n.texData.get(r.dataId),e=n.texData.get(s.dataId),i=new hD(\"return areal * breal - aimag * bimag;\",r.shape,s.shape),a=new hD(\"return areal * bimag + aimag * breal;\",r.shape,s.shape),o=[{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:r.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:r.shape},{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:s.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:s.shape}],l=n.runWebGLProgram(i,o,\"float32\"),u=n.runWebGLProgram(a,o,\"float32\"),c=QL({inputs:{real:l,imag:u},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),c}if(n.shouldExecuteOnCPU([r,s])){const t=n.texData.get(r.dataId),e=n.texData.get(s.dataId),[a,o]=cL(r.shape,s.shape,t.values,e.values,i),l=n.makeTensorInfo(o,i);return n.texData.get(l.dataId).values=a,l}let a;return a=jt().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")?new YL(dD,r.shape,s.shape):new KL(dD,r.shape,s.shape),n.runWebGLProgram(a,[r,s],i)}const fD={kernelName:Vn,backendName:\"webgl\",kernelFunc:pD};function mD(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{shape:i}=r,a=n,o=at(s.shape),l=mt(i,o),u=at(l);nt(o===u,(()=>`The new shape (${l}) has ${u} elements and the old shape (${s.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`));const c=a.texData.get(s.dataId);return!c.isPacked||nR(s.shape,l)||null!==c.texture&&nR(c.shape,l)?(a.incRef(s.dataId),{dataId:s.dataId,shape:l,dtype:s.dtype}):function(t,e,n){const r=[JA(t.shape),...QA(t.shape)],s={dtype:t.dtype,shape:r,dataId:t.dataId},i=[JA(e),...QA(e)],a=new FL(i,r),o=[r],l=n.runWebGLProgram(a,[s],t.dtype,o,!0);return{dataId:l.dataId,shape:e,dtype:l.dtype}}(s,l,a)}const gD={kernelName:ar,backendName:\"webgl\",kernelFunc:mD};class yD{constructor(t,e){this.variableNames=[\"x\"];const{windowSize:n,batchSize:r,inSize:s,outSize:i}=t;this.outputShape=[r,i];const a=4*Math.floor(n/4),o=n%4;let l=\"sumValue += dot(values, ones);\";if(null!=e){const t=1/e;l=`sumValue += dot(values * ${ut(t)?t.toPrecision(2):t}, ones);`}let u=\"\";s%n>0&&(u=`\\n        if (inIdx < 0 || inIdx >= ${s}) {\\n          return 0.0;\\n        }\\n      `),this.userCode=`\\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\\n\\n      float getValue(int batch, int inIdx) {\\n        ${u}\\n        return getX(batch, inIdx);\\n      }\\n\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int outIdx = coords[1];\\n        int inOffset = outIdx * ${n};\\n\\n        float sumValue = 0.0;\\n\\n        for (int i = 0; i < ${a}; i += 4) {\\n          int inIdx = inOffset + i;\\n          vec4 values = vec4(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            getValue(batch, inIdx + 2),\\n            getValue(batch, inIdx + 3)\\n          );\\n\\n          ${l}\\n        }\\n\\n        int inIdx = inOffset + ${a};\\n        if (${1===o}) {\\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\\n\\n          ${l}\\n        } else if (${2===o}) {\\n          vec4 values = vec4(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1), 0.0, 0.0);\\n\\n          ${l}\\n        } else if (${3===o}) {\\n          vec4 values = vec4(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            getValue(batch, inIdx + 2), 0.0);\\n\\n          ${l}\\n        }\\n        setOutput(sumValue);\\n      }\\n    `}}class xD{constructor(t,e){this.variableNames=[\"x\"];const{windowSize:n,batchSize:r,inSize:s,outSize:i}=t;this.outputShape=[r,i];let a=\"0.0\",o=\"\";\"prod\"===e?a=\"1.0\":\"min\"===e?(a=\"1.0 / 1e-20\",o=\"min\"):\"max\"===e&&(a=\"-1.0 / 1e-20\",o=\"max\");let l=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;\"sum\"===e?l=\"sumValue\":\"prod\"===e?l=\"prodValue\":\"all\"===e?l=\"allValue\":\"any\"===e&&(l=\"anyValue\");const u=4*Math.floor(n/4),c=n%4;let h=`\\n      if (${\"sum\"===e}) {\\n        sumValue += dot(values, ones);\\n      } else if (${\"prod\"===e}) {\\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\\n        prodValue *= tmp[0] * tmp[1];\\n      } else {\\n        minMaxValue = ${o}(values, minMaxValue);\\n        if (${\"min\"===e} || ${\"max\"===e}) {\\n          minMaxValue = ${o}(values, minMaxValue);\\n          bvec4 isNaN = isnan(values);\\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\\n            minMaxValue = vec4(NAN);\\n          }\\n        }\\n      }\\n    `,d=\"vec4\";\"all\"===e?(a=\"1.0\",h=\"\\n        bool reducedAllValue = all(values);\\n        float floatedReducedAllValue = float(reducedAllValue);\\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\\n      \",d=\"bvec4\"):\"any\"===e&&(a=\"0.0\",h=\"\\n        bool reducedAnyValue = any(values);\\n        float floatedReducedAnyValue = float(reducedAnyValue);\\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\\n      \",d=\"bvec4\");let p=\"\";s%n>0&&(p=`\\n        if (inIdx < 0 || inIdx >= ${s}) {\\n          return initializationValue;\\n        }\\n      `),this.userCode=`\\n      const float initializationValue = ${a};\\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\\n\\n      float getValue(int batch, int inIdx) {\\n        ${p}\\n        return getX(batch, inIdx);\\n      }\\n\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int outIdx = coords[1];\\n        int inOffset = outIdx * ${n};\\n\\n        vec4 minMaxValue = vec4(${a});\\n        float prodValue = 1.0;\\n        float sumValue = 0.0;\\n        float allValue = 1.0;\\n        float anyValue = 0.0;\\n\\n        for (int i = 0; i < ${u}; i += 4) {\\n          int inIdx = inOffset + i;\\n          ${d} values = ${d}(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            getValue(batch, inIdx + 2),\\n            getValue(batch, inIdx + 3)\\n          );\\n\\n          ${h}\\n        }\\n\\n        int inIdx = inOffset + ${u};\\n        if (${1===c}) {\\n          ${d} values = ${d}(\\n            getValue(batch, inIdx),\\n            initializationValue,\\n            initializationValue,\\n            initializationValue\\n          );\\n\\n          ${h}\\n        } else if (${2===c}) {\\n          ${d} values = ${d}(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            initializationValue,\\n            initializationValue\\n          );\\n\\n          ${h}\\n        } else if (${3===c}) {\\n          ${d} values = ${d}(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            getValue(batch, inIdx + 2),\\n            initializationValue\\n          );\\n\\n          ${h}\\n        }\\n        setOutput(${l});\\n      }\\n    `}}function bD(t,e,n,r){const s=function(t){const e=[];for(;0===e.length||1!==e[e.length-1].outSize;){const n=e.length?e[e.length-1].outSize:t[1],r=Rp(n);e.push({inSize:n,windowSize:r,outSize:Math.ceil(n/r)})}return e}(t.shape);let i=t;for(let a=0;a<s.length;a++){const{inSize:o,windowSize:l,outSize:u}=s[a];let c,h;c=\"mean\"===n?0===a?new yD({windowSize:l,inSize:o,batchSize:t.shape[0],outSize:u},o):new yD({windowSize:l,inSize:o,batchSize:t.shape[0],outSize:u}):new xD({windowSize:l,inSize:o,batchSize:t.shape[0],outSize:u},n),h=i,i=r.runWebGLProgram(c,[i],e),h.dataId!==t.dataId&&r.disposeIntermediateTensorInfo(h)}return i}class vD{constructor(t,e){this.variableNames=[\"A\"];const n=new Array(t.length);for(let r=0;r<n.length;r++)n[r]=t[e[r]];this.outputShape=n,this.rank=n.length;const r=MR(this.rank),s=function(t){const e=t.length;if(e>6)throw Error(`Transpose for rank ${e} is not yet supported`);const n=[\"resRC.x\",\"resRC.y\",\"resRC.z\",\"resRC.w\",\"resRC.u\",\"resRC.v\"],r=new Array(e);for(let e=0;e<t.length;e++)r[t[e]]=n[e];return r.join()}(e);this.userCode=`\\n    void main() {\\n      ${r} resRC = getOutputCoords();\\n      setOutput(getA(${s}));\\n    }\\n    `}}class wD{constructor(t,e){this.variableNames=[\"A\"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(t.length);for(let r=0;r<n.length;r++)n[r]=t[e[r]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const r=MR(this.rank),s=RL(\"rc\",this.rank),i=new Array(this.rank);for(let t=0;t<e.length;t++)i[e[t]]=s[t];const a=`vec2(${i.slice(-2).join()})`,o=`++${s[this.rank-1]} < ${n[this.rank-1]}`,l=`getChannel(getA(${i.join()}), ${a})`;this.userCode=`\\n    void main() {\\n      ${r} rc = getOutputCoords();\\n      vec4 result = vec4(0.);\\n      result[0] = ${l};\\n      if(${o}) {\\n        result[1] = ${l};\\n      }\\n      --${s[this.rank-1]};\\n      if(++${s[this.rank-2]} < ${n[this.rank-2]}) {\\n        result[2] = ${l};\\n        if(${o}) {\\n          result[3] = ${l};\\n        }\\n      }\\n      setOutput(result);\\n    }\\n    `}}function SD(t,e,n){const r=jt().getBool(\"WEBGL_PACK_ARRAY_OPERATIONS\")?new wD(t.shape,e):new vD(t.shape,e);return n.runWebGLProgram(r,[t],t.dtype)}function TD(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{axis:i,keepDims:a}=r;return function(t,e,n,r){const s=e,i=t.shape.length,a=gt(s,t.shape);let o=a;const l=_c(o,i),u=null!=l;let c=t;u&&(c=SD(t,l,r),o=kc(o.length,i)),Tc(\"sum\",o,i);const[h,d]=wc(c.shape,o);let p=h;n&&(p=Sc(h,a));const f=at(d),m=mD({inputs:{x:c},attrs:{shape:[at(t.shape)/f,f]},backend:r}),g=bD(m,ni(t.dtype),\"sum\",r),y=mD({inputs:{x:g},attrs:{shape:p},backend:r});return r.disposeIntermediateTensorInfo(m),r.disposeIntermediateTensorInfo(g),u&&r.disposeIntermediateTensorInfo(c),y}(s,i,a,n)}const _D={kernelName:Mr,backendName:\"webgl\",kernelFunc:TD};function MD(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{perm:i}=r,a=n,o=s.shape.length,l=new Array(o);for(let t=0;t<l.length;t++)l[t]=s.shape[i[t]];let u;if(a.shouldExecuteOnCPU([s])){const t=a.texData.get(s.dataId).values,e=NL(t,s.shape,s.dtype,i,l);u=a.makeTensorInfo(l,s.dtype),a.texData.get(u.dataId).values=e}else u=SD(s,i,a);return u}const kD={kernelName:jr,backendName:\"webgl\",kernelFunc:MD};function ED({a:t,b:e,transposeA:n,transposeB:r,backend:s,bias:i=null,preluActivationWeights:a=null,leakyreluAlpha:o=0,activation:l=null}){const u=t.shape.length,c=e.shape.length,h=n?t.shape[u-2]:t.shape[u-1],d=r?e.shape[c-1]:e.shape[c-2],p=n?t.shape[u-1]:t.shape[u-2],f=r?e.shape[c-2]:e.shape[c-1],m=t.shape.slice(0,-2),g=e.shape.slice(0,-2),y=at(m),x=at(g);nt(u>=2&&c>=2&&(y===x||1===y||1===x),(()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${m}) and (${g}).`));const b=(y>x?t.shape.slice(0,-2):e.shape.slice(0,-2)).concat([p,f]);nt(h===d,(()=>`Error in matMul: inner shapes (${h}) and (${d}) of Tensors with shapes ${t.shape} and ${e.shape} and transposeA=${n} and transposeB=${r} must match.`));const v=n?[y,h,p]:[y,p,h],w=r?[x,f,d]:[x,d,f],S=mD({inputs:{x:t},backend:s,attrs:{shape:v}}),T=mD({inputs:{x:e},backend:s,attrs:{shape:w}}),_=[S,T],M=Math.max(y,x),k=n?S.shape[1]:S.shape[2],E=null!=i,I=null!=a,C=\"leakyrelu\"===l,N=null!=l?uD(l,!0):null;let A;if((1===p||1===f)&&k>1e3&&!1===(E||I||C||null!=N)){let t=S,e=T;n&&(t=MD({inputs:{x:S},backend:s,attrs:{perm:[0,2,1]}}),_.push(t)),r&&(e=MD({inputs:{x:T},backend:s,attrs:{perm:[0,2,1]}}),_.push(e));const i=1===f;let a=t;1!==f&&(a=mD({inputs:{x:t},backend:s,attrs:{shape:[M,k,1]}}),_.push(a));const o=1===f?2:1;let l=e;i&&(l=mD({inputs:{x:e},backend:s,attrs:{shape:[M,1,k]}}),_.push(l));const u=pD({inputs:{a,b:l},backend:s});A=TD({inputs:{x:u},backend:s,attrs:{axis:o,keepDims:!0}}),_.push(u)}else{const l=ei(t.dtype,e.dtype),u=new cD(v,w,[M,p,f],n,r,E,N,I,C),c=[S,T];if(null!=i&&c.push(i),I&&c.push(a),C){const t=s.makeTensorInfo([],\"float32\",Is(o,\"float32\"));c.push(t),_.push(t)}A=s.runWebGLProgram(u,c,l)}const R=mD({inputs:{x:A},backend:s,attrs:{shape:b}});_.push(A);for(const t of _)s.disposeIntermediateTensorInfo(t);return R}const ID={kernelName:ts,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{a:s,b:i,bias:a,preluActivationWeights:o}=e,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=r;return ED({a:s,b:i,transposeA:l,transposeB:u,backend:n,bias:a,preluActivationWeights:o,leakyreluAlpha:h,activation:c})}},CD=\"return abs(x);\",ND={kernelName:Zt,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n}=t,{x:r}=e;if(n.shouldExecuteOnCPU([r])&&\"complex64\"!==r.dtype){const t=n.texData.get(r.dataId),e=yL(t.values);return n.makeTensorInfo(r.shape,r.dtype,e)}let s;return s=jt().getBool(\"WEBGL_PACK_UNARY_OPERATIONS\")?new WL(r.shape,CD):new BL(r.shape,CD),n.runWebGLProgram(s,[r],r.dtype)}},AD=oD({opSnippet:\"if (isnan(x)) return x;\\n  if (abs(x) > 1.) {\\n    return NAN;\\n  }\\n  return acos(x);\\n\"}),RD={kernelName:Jt,backendName:\"webgl\",kernelFunc:AD},LD=oD({opSnippet:\"if (isnan(x)) return x;\\n  if (x < 1.0) return NAN;\\nreturn log(x + sqrt(x * x - 1.0));\"}),DD={kernelName:Qt,backendName:\"webgl\",kernelFunc:LD},FD=\"return a + b;\",$D=lD({opSnippet:FD,packedOpSnippet:FD,supportsComplex:!0,cpuKernelImpl:GR}),OD={kernelName:te,backendName:\"webgl\",kernelFunc:$D};class PD{constructor(t,e){this.outputShape=[],this.outputShape=t,this.variableNames=e.map(((t,e)=>`T${e}`));const n=[];this.variableNames.forEach((t=>{n.push(`float v${t} = get${t}AtOutCoords();`)}));const r=this.variableNames.map((t=>`v${t}`)).join(\" + \");this.userCode=`\\n      void main() {\\n        ${n.join(\"\\n        \")}\\n\\n        float result = ${r};\\n        setOutput(result);\\n      }\\n    `}}class zD{constructor(t,e){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.variableNames=e.map(((t,e)=>`T${e}`));const n=[];this.variableNames.forEach((t=>{n.push(`vec4 v${t} = get${t}AtOutCoords();`)}));const r=this.variableNames.map((t=>`v${t}`)).join(\" + \");this.userCode=`\\n      void main() {\\n        ${n.join(\"\\n        \")}\\n\\n        vec4 result = ${r};\\n        setOutput(result);\\n      }\\n    `}}const BD={kernelName:ee,backendName:\"webgl\",kernelFunc:function t(e){const{inputs:n,backend:r}=e,s=n;if(1===s.length)return ZL({inputs:{x:s[0]},backend:r});if(s.length>jt().get(\"WEBGL_MAX_TEXTURES_IN_SHADER\")){const e=Math.floor(s.length/2),n=t({inputs:s.slice(0,e),backend:r}),i=t({inputs:s.slice(e),backend:r});return t({inputs:[n,i],backend:r})}const i=s.map((t=>t.dtype)).reduce(((t,e)=>ei(t,e))),a=s.map((t=>t.shape)),o=jt().getBool(\"WEBGL_PACK\")?new zD(s[0].shape,a):new PD(s[0].shape,a);return r.runWebGLProgram(o,s,i)}},UD={kernelName:ne,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{axis:i,keepDims:a}=r,o=s.shape.length,l=gt(i,s.shape);let u=l;const c=_c(u,o);let h=s;null!=c&&(h=MD({inputs:{x:s},backend:n,attrs:{perm:c}}),u=kc(u.length,o)),Tc(\"all\",u,o);const[d,p]=wc(h.shape,u),f=mD({inputs:{x:h},backend:n,attrs:{shape:[-1,at(p)]}}),m=bD(f,f.dtype,\"all\",n);let g;return g=mD(a?{inputs:{x:m},backend:n,attrs:{shape:Sc(d,l)}}:{inputs:{x:m},backend:n,attrs:{shape:d}}),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),g}},VD={kernelName:re,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{axis:i,keepDims:a}=r,o=s.shape.length,l=gt(i,s.shape);let u=l;const c=_c(u,o);let h=s;null!=c&&(h=MD({inputs:{x:s},backend:n,attrs:{perm:c}}),u=kc(u.length,o)),Tc(\"any\",u,o);const[d,p]=wc(h.shape,u),f=mD({inputs:{x:h},backend:n,attrs:{shape:[-1,at(p)]}}),m=bD(f,f.dtype,\"any\",n);let g;return g=mD(a?{inputs:{x:m},backend:n,attrs:{shape:Sc(d,l)}}:{inputs:{x:m},backend:n,attrs:{shape:d}}),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),g}};class WD{constructor(t,e,n){this.variableNames=[\"A\"];const{windowSize:r,batchSize:s,outSize:i}=t;n||this.variableNames.push(\"bestIndicesA\"),this.outputShape=[s,i];const a=\"max\"===e?\">\":\"<\",o=n?\"inOffset + i;\":\"round(getBestIndicesA(batch, inOffset + i));\";this.userCode=`\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int outIdx = coords[1];\\n        int inOffset = outIdx * ${r};\\n\\n        int bestIndex = inOffset;\\n        float bestValue = getA(batch, bestIndex);\\n\\n        for (int i = 0; i < ${r}; i++) {\\n          int inIdx = ${o};\\n          float candidate = getA(batch, inIdx);\\n          if (candidate ${a} bestValue) {\\n            bestValue = candidate;\\n            bestIndex = inIdx;\\n          }\\n        }\\n        setOutput(float(bestIndex));\\n      }\\n    `}}class GD{constructor(t,e,n,r){this.variableNames=[\"A\"],this.packedInputs=!0,this.packedOutput=!0,nt(t.length>2,(()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`));const s=t[t.length-1],i=Math.ceil(s/e);this.outputShape=t.slice(0,-1),i>1&&this.outputShape.push(i),r||this.variableNames.push(\"bestIndicesA\");const a=this.outputShape,o=a.length,l=MR(o),u=LL(\"coords\",o);let c,h;if(1===i){h=o+1;const t=MR(h);c=`\\n        ${t} sourceLocR = ${t}(${u.join()}, 0);\\n        ++${u[o-1]};\\n        ${t} sourceLocG = ${t}(${u.join()}, 0);\\n        ++${u[o-2]};\\n        ${t} sourceLocA = ${t}(${u.join()}, 0);\\n        --${u[o-1]};\\n        ${t} sourceLocB = ${t}(${u.join()}, 0);\\n        --${u[o-2]};`}else h=o,c=`\\n        ${l} sourceLocR = coords;\\n        ++${u[o-1]};\\n        ${l} sourceLocG = coords;\\n        ++${u[o-2]};\\n        ${l} sourceLocA = coords;\\n        --${u[o-1]};\\n        ${l} sourceLocB = coords;\\n        --${u[o-2]};`;const d=[\"x\",\"y\",\"z\",\"w\",\"u\",\"v\"].slice(0,h),p=\".\"+d[h-1],f=d.map((t=>\"int \"+t)),m=LL(\"sourceLocR\",h-1).concat(\"inIdx.r\"),g=LL(\"sourceLocG\",h-1).concat(\"inIdx.g\"),y=LL(\"sourceLocB\",h-1).concat(\"inIdx.b\"),x=LL(\"sourceLocA\",h-1).concat(\"inIdx.a\"),b=\"max\"===n?\"greaterThan\":\"lessThan\",v=r?\"\":`\\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\\n                             getBestIndicesAChannel(${g.join()}),\\n                             getBestIndicesAChannel(${y.join()}),\\n                             getBestIndicesAChannel(${x.join()})));`,w=`vec4(\\n            getAChannel(${m.join()}),\\n            hasNextCol ? getAChannel(${g.join()}) : 0.,\\n            hasNextRow ? getAChannel(${y.join()}) : 0.,\\n            hasNextRow && hasNextCol ? getAChannel(${x.join()}) : 0.)`,S=r?\"\":`\\n      float getBestIndicesAChannel(${f.join()}) {\\n        return getChannel(getBestIndicesA(${d.join()}),\\n                                          vec2(${d.slice(-2).join()}));\\n      }`;this.userCode=`\\n      float getAChannel(${f.join()}) {\\n        return getChannel(getA(${d.join()}),\\n                               vec2(${d.slice(-2).join()}));\\n      }\\n      ${S}\\n      void main() {\\n        ${l} coords = getOutputCoords();\\n        bool hasNextCol = ${u[o-1]} < ${a[o-1]-1};\\n        bool hasNextRow = ${u[o-2]} < ${a[o-2]-1};\\n        ${c}\\n        ivec4 srcIdx = ivec4(sourceLocR${p}, sourceLocG${p},\\n          sourceLocB${p}, sourceLocA${p}) * ${e};\\n        ivec4 inIdx = srcIdx;\\n        vec4 bestIndex = vec4(inIdx);\\n        vec4 bestValue = ${w};\\n\\n        for (int i = 0; i < ${e}; i++) {\\n          inIdx = srcIdx;\\n          ${v}\\n          vec4 candidate = ${w};\\n          bvec4 nan = isnan(candidate);\\n          bvec4 replace = bvec4(\\n            vec4(${b}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\\n\\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\\n                           replace.y  ? candidate.y : bestValue.y,\\n                           replace.z  ? candidate.z : bestValue.z,\\n                           replace.w  ? candidate.w : bestValue.w);\\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\\n          srcIdx++;\\n        }\\n        setOutput(bestIndex);\\n      }\\n    `}}function HD(t,e,n,r=null){let s=e.shape[0],i=e.shape[1];null!=r&&(s=r.shape[0],i=r.shape[1]);const a=Rp(i),o={windowSize:a,inSize:i,batchSize:s,outSize:Math.ceil(i/a)},l=new WD(o,n,null==r),u=[e];null!=r&&u.push(r);const c=t.runWebGLProgram(l,u,\"int32\");if(1===c.shape[1])return c;const h=HD(t,e,n,c);return t.disposeIntermediateTensorInfo(c),h}function jD(t,e,n,r=null){const s=null!=r?r.shape:e.shape,i=Rp(s[s.length-1]),a=new GD(s,i,n,null==r),o=null==r?[e]:[e,r],l=t.runWebGLProgram(a,o,\"int32\");if(l.shape.length===e.shape.length){const r=jD(t,e,n,l);return t.disposeIntermediateTensorInfo(l),r}return l}function qD(t,e,n,r){const s=[n];if(Tc(\"arg\"+r.charAt(0).toUpperCase()+r.slice(1),s,e.shape.length),!jt().getBool(\"WEBGL_PACK_REDUCE\")||e.shape.length<=2){const n=[],i=t.texData.get(e.dataId);let a=e;null!==i&&i.isPacked&&(a=t.unpackTensor(e),n.push(a));const[o,l]=wc(a.shape,s),u=at(l),c=mD({inputs:{x:a},backend:t,attrs:{shape:[-1,u]}});n.push(c);const h=HD(t,c,r);n.push(h);const d=mD({inputs:{x:h},backend:t,attrs:{shape:o}});return n.forEach((e=>t.disposeIntermediateTensorInfo(e))),d}return jD(t,e,r)}const XD={kernelName:se,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{axis:i}=r;let a=gt(i,s.shape);const o=_c(a,s.shape.length);let l=s;const u=[];null!=o&&(l=MD({inputs:{x:s},backend:n,attrs:{perm:o}}),u.push(l),a=kc(a.length,l.shape.length)),Tc(\"argMax\",[a[0]],l.shape.length);const c=qD(n,l,a[0],\"max\");return u.forEach((t=>n.disposeIntermediateTensorInfo(t))),c}},KD={kernelName:ie,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{axis:i}=r;let a=gt(i,s.shape);const o=_c(a,s.shape.length);let l=s;const u=[];null!=o&&(l=MD({inputs:{x:s},backend:n,attrs:{perm:o}}),u.push(l),a=kc(a.length,l.shape.length)),Tc(\"argMin\",[a[0]],l.shape.length);const c=qD(n,l,a[0],\"min\");return u.forEach((t=>n.disposeIntermediateTensorInfo(t))),c}},YD=oD({opSnippet:\"if (isnan(x)) return x;\\n  if (abs(x) > 1.) {\\n    return NAN;\\n  }\\n  return asin(x);\\n\"}),ZD={kernelName:ae,backendName:\"webgl\",kernelFunc:YD},JD=oD({opSnippet:\"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));\"}),QD={kernelName:oe,backendName:\"webgl\",kernelFunc:JD},tF=oD({opSnippet:\"if (isnan(x)) return x;\\n  return atan(x);\\n\"}),eF={kernelName:le,backendName:\"webgl\",kernelFunc:tF},nF=lD({opSnippet:\"\\n  if (isnan(a)) return a;\\n  if (isnan(b)) return b;\\n\\n  return atan(a, b);\\n\",packedOpSnippet:\"\\n  vec4 result = atan(a, b);\\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\\n  \\n  result.r = isNaN.r > 0. ? NAN : result.r;\\n  result.g = isNaN.g > 0. ? NAN : result.g;\\n  result.b = isNaN.b > 0. ? NAN : result.b;\\n  result.a = isNaN.a > 0. ? NAN : result.a;\\n\\n  return result;\\n\"}),rF={kernelName:ce,backendName:\"webgl\",kernelFunc:nF},sF=oD({opSnippet:\"if (isnan(x)) return x;\\n  if ((x < -1.0) || (x > 1.0)) return NAN;\\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;\"}),iF={kernelName:ue,backendName:\"webgl\",kernelFunc:sF};class aF{constructor(t,e,n,r=!1,s=!1){if(this.variableNames=[\"x\"],\"avg\"===e&&n)throw new Error(\"Cannot compute positions for average pool.\");const i=t.filterWidth,a=t.strideHeight,o=t.strideWidth,l=t.dilationHeight,u=t.dilationWidth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,d=t.padInfo.top,p=t.padInfo.left;this.outputShape=t.outShape;const f=\"avg\"===e,m=`((batch  * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + d`,g=`(xR * ${t.inWidth} + xC) * ${t.inChannels} + d`;let y=\"0.0\";if(f||(y=\"-1.0 / 1e-20\"),n){const e=\">=\";return void(this.userCode=`\\n        const ivec2 strides = ivec2(${a}, ${o});\\n        const ivec2 pads = ivec2(${d}, ${p});\\n\\n        void main() {\\n          ivec4 coords = getOutputCoords();\\n          int batch = coords[0];\\n          int d = coords[3];\\n\\n          ivec2 xRCCorner = coords.yz * strides - pads;\\n          int xRCorner = xRCCorner.x;\\n          int xCCorner = xRCCorner.y;\\n\\n          // max/min x(?, ?, d) to get y(yR, yC, d).\\n          // ? = to be determined\\n          float minMaxValue = 0.0;\\n          float minMaxValueFound = 0.0;\\n          int minMaxPosition = 0;\\n          float avgValue = 0.0;\\n\\n          for (int wR = 0; wR < ${c};\\n              wR += ${l}) {\\n            int xR = xRCorner + wR;\\n\\n            if (xR < 0 || xR >= ${t.inHeight}) {\\n              continue;\\n            }\\n\\n            for (int wC = 0; wC < ${h};\\n                wC += ${u}) {\\n              int xC = xCCorner + wC;\\n\\n              if (xC < 0 || xC >= ${t.inWidth}) {\\n                continue;\\n              }\\n\\n              float value = getX(batch, xR, xC, d);\\n\\n              // If a min / max value has already been found, use it. If not,\\n              // use the current value.\\n              float currMinMaxValue = mix(\\n                  value, minMaxValue, minMaxValueFound);\\n              if (value ${e} currMinMaxValue) {\\n                minMaxValue = value;\\n                minMaxValueFound = 1.0;\\n                minMaxPosition = ${r?s?m:g:`wR * ${h} + wC`};\\n              }\\n            }\\n          }\\n          setOutput(float(minMaxPosition));\\n        }\\n      `)}let x=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;\"avg\"===e&&(x=\"avgValue / count\");const b=4*Math.floor(i/4),v=i%4,w=`\\n      if (${f}) {\\n        avgValue += dot(values, ones);\\n      } else {\\n        minMaxValue = max(values, minMaxValue);\\n      }\\n    `;this.userCode=`\\n      const ivec2 strides = ivec2(${a}, ${o});\\n      const ivec2 pads = ivec2(${d}, ${p});\\n      const float initializationValue = ${y};\\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\\n\\n      float count = 0.0;\\n\\n      float getValue(int batch, int xR, int xC, int d) {\\n        if (xC < 0 || xC >= ${t.inWidth}) {\\n          return initializationValue;\\n        }\\n        count += 1.0;\\n        return getX(batch, xR, xC, d);\\n      }\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int d = coords[3];\\n\\n        ivec2 xRCCorner = coords.yz * strides - pads;\\n        int xRCorner = xRCCorner.x;\\n        int xCCorner = xRCCorner.y;\\n\\n        // max/min x(?, ?, d) to get y(yR, yC, d).\\n        // ? = to be determined\\n        vec4 minMaxValue = vec4(${y});\\n        float avgValue = 0.0;\\n        count = 0.0;\\n\\n        for (int wR = 0; wR < ${c};\\n            wR += ${l}) {\\n          int xR = xRCorner + wR;\\n\\n          if (xR < 0 || xR >= ${t.inHeight}) {\\n            continue;\\n          }\\n\\n          for (int wC = 0; wC < ${b}; wC += 4) {\\n            int xC = xCCorner + wC * ${u};\\n\\n            vec4 values = vec4(\\n              getValue(batch, xR, xC, d),\\n              getValue(batch, xR, xC + ${u}, d),\\n              getValue(batch, xR, xC + 2 * ${u}, d),\\n              getValue(batch, xR, xC + 3 * ${u}, d)\\n            );\\n\\n            ${w}\\n          }\\n\\n          int xC = xCCorner + ${b};\\n          if (${1===v}) {\\n            vec4 values = vec4(\\n              getValue(batch, xR, xC, d),\\n              initializationValue,\\n              initializationValue,\\n              initializationValue\\n            );\\n\\n            ${w}\\n          } else if (${2===v}) {\\n            vec4 values = vec4(\\n              getValue(batch, xR, xC, d),\\n              getValue(batch, xR, xC + ${u}, d),\\n              initializationValue,\\n              initializationValue\\n            );\\n\\n            ${w}\\n          } else if (${3===v}) {\\n            vec4 values = vec4(\\n              getValue(batch, xR, xC, d),\\n              getValue(batch, xR, xC + ${u}, d),\\n              getValue(batch, xR, xC + 2 * ${u}, d),\\n              initializationValue\\n            );\\n\\n            ${w}\\n          }\\n        }\\n        setOutput(${x});\\n      }\\n    `}}class oF{constructor(t,e,n,r=!1,s=!1){if(this.variableNames=[\"x\"],\"avg\"===e&&n)throw new Error(\"Cannot compute positions for average pool.\");const i=t.filterWidth,a=t.strideDepth,o=t.strideHeight,l=t.strideWidth,u=t.dilationDepth,c=t.dilationHeight,h=t.dilationWidth,d=t.effectiveFilterDepth,p=t.effectiveFilterHeight,f=t.effectiveFilterWidth,m=t.padInfo.front,g=t.padInfo.top,y=t.padInfo.left;this.outputShape=t.outShape;const x=\"avg\"===e;let b=\"0.0\";if(x||(b=\"-1.0 / 1e-20\"),n){const e=\">=\";return void(this.userCode=`\\n        const ivec3 strides =\\n            ivec3(${a}, ${o}, ${l});\\n        const ivec3 pads = ivec3(${m}, ${g}, ${y});\\n\\n        void main() {\\n          ivec5 coords = getOutputCoords();\\n          int batch = coords.x;\\n          int ch = coords.u;\\n\\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\\n          int xDCorner = xCorner.x;\\n          int xRCorner = xCorner.y;\\n          int xCCorner = xCorner.z;\\n\\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\\n          // ? = to be determined\\n          float minMaxValue = 0.0;\\n          float minMaxValueFound = 0.0;\\n          int minMaxPosition = 0;\\n\\n          for (int wD = 0; wD < ${d};\\n              wD += ${u}) {\\n            int xD = xDCorner + wD;\\n\\n            if (xD < 0 || xD >= ${t.inDepth}) {\\n              continue;\\n            }\\n\\n            for (int wR = 0; wR < ${p};\\n                wR += ${c}) {\\n              int xR = xRCorner + wR;\\n\\n              if (xR < 0 || xR >= ${t.inHeight}) {\\n                continue;\\n              }\\n\\n              for (int wC = 0; wC < ${f};\\n                  wC += ${h}) {\\n                int xC = xCCorner + wC;\\n\\n                if (xC < 0 || xC >= ${t.inWidth}) {\\n                  continue;\\n                }\\n\\n                float value = getX(batch, xD, xR, xC, ch);\\n\\n                // If a min / max value has already been found, use it. If not,\\n                // use the current value.\\n                float currMinMaxValue = mix(\\n                    value, minMaxValue, minMaxValueFound);\\n                if (value ${e} currMinMaxValue) {\\n                  minMaxValue = value;\\n                  minMaxValueFound = 1.0;\\n                  minMaxPosition = ${r?s?`(((batch * ${t.inDepth} + xD) * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`((xD * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`wD * ${p} * ${f} +\\n                      wR * ${f} + wC`};\\n                }\\n              }\\n            }\\n          }\\n          setOutput(float(minMaxPosition));\\n        }\\n      `)}let v=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;\"avg\"===e&&(v=\"avgValue / count\");const w=4*Math.floor(i/4),S=i%4,T=`\\n      if (${x}) {\\n        avgValue += dot(values, ones);\\n      } else {\\n        minMaxValue = max(values, minMaxValue);\\n      }\\n    `;this.userCode=`\\n      const ivec3 strides =\\n        ivec3(${a}, ${o}, ${l});\\n      const ivec3 pads = ivec3(${m}, ${g}, ${y});\\n      const float initializationValue = ${b};\\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\\n\\n      float count = 0.0;\\n\\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\\n        if (xC < 0 || xC >= ${t.inWidth}) {\\n          return initializationValue;\\n        }\\n        count += 1.0;\\n        return getX(batch, xD, xR, xC, ch);\\n      }\\n\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int batch = coords.x;\\n        int ch = coords.u;\\n\\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\\n        int xDCorner = xCorner.x;\\n        int xRCorner = xCorner.y;\\n        int xCCorner = xCorner.z;\\n\\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\\n        // ? = to be determined\\n        vec4 minMaxValue = vec4(${b});\\n        float avgValue = 0.0;\\n        count = 0.0;\\n\\n        for (int wD = 0; wD < ${d};\\n            wD += ${u}) {\\n          int xD = xDCorner + wD;\\n\\n          if (xD < 0 || xD >= ${t.inDepth}) {\\n            continue;\\n          }\\n\\n          for (int wR = 0; wR < ${p};\\n            wR += ${c}) {\\n            int xR = xRCorner + wR;\\n\\n            if (xR < 0 || xR >= ${t.inHeight}) {\\n              continue;\\n            }\\n\\n            for (int wC = 0; wC < ${w}; wC += 4) {\\n              int xC = xCCorner + wC * ${h};\\n\\n              vec4 values = vec4(\\n                getValue(batch, xD, xR, xC, ch),\\n                getValue(batch, xD, xR, xC + ${h}, ch),\\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\\n              );\\n\\n              ${T}\\n            }\\n\\n            int xC = xCCorner + ${w};\\n            if (${1===S}) {\\n              vec4 values = vec4(\\n                getValue(batch, xD, xR, xC, ch),\\n                initializationValue,\\n                initializationValue,\\n                initializationValue\\n              );\\n\\n              ${T}\\n            } else if (${2===S}) {\\n              vec4 values = vec4(\\n                getValue(batch, xD, xR, xC, ch),\\n                getValue(batch, xD, xR, xC + ${h}, ch),\\n                initializationValue,\\n                initializationValue\\n              );\\n\\n              ${T}\\n            } else if (${3===S}) {\\n              vec4 values = vec4(\\n                getValue(batch, xD, xR, xC, ch),\\n                getValue(batch, xD, xR, xC + ${h}, ch),\\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\\n                initializationValue\\n              );\\n\\n              ${T}\\n            }\\n          }\\n          setOutput(${v});\\n        }\\n      }\\n    `}}const lF={kernelName:he,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e;lR(s,\"avgPool\");const{filterSize:i,strides:a,pad:o,dimRoundingMode:l}=r;nt(eu(a,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${a} and dilations '1'`));const u=Hl(s.shape,i,a,1,o,l);if(1===u.filterWidth&&1===u.filterHeight&&lt(u.inShape,u.outShape))return ZL({inputs:{x:s},backend:n});const c=new aF(u,\"avg\",!1);return n.runWebGLProgram(c,[s],\"float32\")}},uF={kernelName:pe,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{filterSize:i,strides:a,pad:o,dimRoundingMode:l,dataFormat:u}=r,c=jl(s.shape,i,a,[1,1,1],o,l,u),h=new oF(c,\"avg\",!1);return n.runWebGLProgram(h,[s],\"float32\")}};class cF{constructor(t){this.variableNames=[\"dy\"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,s=t.strideWidth,i=t.dilationHeight,a=t.dilationWidth,o=t.effectiveFilterHeight,l=t.effectiveFilterWidth,u=o-1-t.padInfo.top,c=l-1-t.padInfo.left,h=1/(e*n);this.userCode=`\\n      const ivec2 pads = ivec2(${u}, ${c});\\n      const float avgMultiplier = float(${h});\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n\\n        ivec2 dyRCCorner = coords.yz - pads;\\n        int dyRCorner = dyRCCorner.x;\\n        int dyCCorner = dyRCCorner.y;\\n\\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        for (int wR = 0; wR < ${o};\\n            wR += ${i}) {\\n          float dyR = float(dyRCorner + wR) / ${r}.0;\\n\\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\\n            continue;\\n          }\\n          int idyR = int(dyR);\\n\\n          for (int wC = 0; wC < ${l};\\n            wC+= ${a}) {\\n            float dyC = float(dyCCorner + wC) / ${s}.0;\\n\\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\\n                fract(dyC) > 0.0) {\\n              continue;\\n            }\\n            int idyC = int(dyC);\\n\\n            float dyValue = getDy(b, idyR, idyC, d);\\n\\n            dotProd += dyValue * avgMultiplier;\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    `}}class hF{constructor(t){this.variableNames=[\"dy\"],this.outputShape=t.inShape;const e=t.filterDepth,n=t.filterHeight,r=t.filterWidth,s=t.strideDepth,i=t.strideHeight,a=t.strideWidth,o=t.dilationDepth,l=t.dilationHeight,u=t.dilationWidth,c=t.effectiveFilterDepth,h=t.effectiveFilterHeight,d=t.effectiveFilterWidth,p=c-1-t.padInfo.front,f=h-1-t.padInfo.top,m=d-1-t.padInfo.left,g=1/(e*n*r);this.userCode=`\\n      const ivec3 pads = ivec3(${p}, ${f}, ${m});\\n      const float avgMultiplier = float(${g});\\n\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int batch = coords.x;\\n        int ch = coords.u;\\n\\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\\n        int dyDCorner = dyCorner.x;\\n        int dyRCorner = dyCorner.y;\\n        int dyCCorner = dyCorner.z;\\n\\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\\n        // dx(xD, xR, xC, ch).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n\\n        for (int wD = 0; wD < ${c};\\n            wD += ${o}) {\\n          float dyD = float(dyDCorner + wD) / ${s}.0;\\n\\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\\n            continue;\\n          }\\n          int idyD = int(dyD);\\n\\n          for (int wR = 0; wR < ${h};\\n              wR += ${l}) {\\n            float dyR = float(dyRCorner + wR) / ${i}.0;\\n\\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\\n                fract(dyR) > 0.0) {\\n              continue;\\n            }\\n            int idyR = int(dyR);\\n\\n            for (int wC = 0; wC < ${d};\\n                wC += ${u}) {\\n              float dyC = float(dyCCorner + wC) / ${a}.0;\\n\\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\\n                  fract(dyC) > 0.0) {\\n                continue;\\n              }\\n              int idyC = int(dyC);\\n\\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\\n\\n              dotProd += dyValue * avgMultiplier;\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    `}}const dF={kernelName:fe,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{dy:s,input:i}=e,a=i,{filterSize:o,strides:l,pad:u,dimRoundingMode:c}=r,h=jl(a.shape,o,l,[1,1,1],u,c),d=new hF(h);return n.runWebGLProgram(d,[s],a.dtype)}},pF={kernelName:de,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{dy:s,input:i}=e,a=i;lR([s,i],\"avgPoolGrad\");const{filterSize:o,strides:l,pad:u}=r,c=Hl(a.shape,o,l,1,u),h=new cF(c);return n.runWebGLProgram(h,[s],a.dtype)}},fF={kernelName:me,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{a:s,b:i}=e,{transposeA:a,transposeB:o}=r;return ED({a:s,b:i,transposeA:a,transposeB:o,backend:n})}};class mF{constructor(t,e,n,r,s,i){this.outputShape=[],this.variableNames=[\"x\",\"mean\",\"variance\"],kl(t,e),kl(t,n);let a=\"0.0\";null!=r&&(kl(t,r),this.variableNames.push(\"offset\"),a=\"getOffsetAtOutCoords()\");let o=\"1.0\";null!=s&&(kl(t,s),this.variableNames.push(\"scale\"),o=\"getScaleAtOutCoords()\"),this.outputShape=t,this.userCode=`\\n      void main() {\\n        float x = getXAtOutCoords();\\n        float mean = getMeanAtOutCoords();\\n        float variance = getVarianceAtOutCoords();\\n        float offset = ${a};\\n        float scale = ${o};\\n        float inv = scale * inversesqrt(variance + float(${i}));\\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\\n      }\\n    `}}class gF{constructor(t,e,n,r,s,i){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=[\"x\",\"mean\",\"variance\"],kl(t,e),kl(t,n);let a=\"vec4(0.0)\";null!=r&&(kl(t,r),this.variableNames.push(\"offset\"),a=\"getOffsetAtOutCoords()\");let o=\"vec4(1.0)\";null!=s&&(kl(t,s),this.variableNames.push(\"scale\"),o=\"getScaleAtOutCoords()\"),this.outputShape=t,this.userCode=`\\n      void main() {\\n        vec4 offset = ${a};\\n        vec4 scale = ${o};\\n\\n        vec4 x = getXAtOutCoords();\\n        vec4 mean = getMeanAtOutCoords();\\n        vec4 variance = getVarianceAtOutCoords();\\n\\n        vec4 inv = scale * inversesqrt(variance + vec4(${i}));\\n\\n        setOutput((x - mean) * inv + offset);\\n      }\\n    `}}const yF={kernelName:an,backendName:\"webgl\",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{x:r,mean:s,variance:i,offset:a,scale:o}=t;nt(s.shape.length===i.shape.length,(()=>\"Batch normalization gradient requires mean and variance to have equal ranks.\")),nt(null==a||s.shape.length===a.shape.length,(()=>\"Batch normalization gradient requires mean and offset to have equal ranks.\")),nt(null==o||s.shape.length===o.shape.length,(()=>\"Batch normalization gradient requires mean and scale to have equal ranks.\"));let{varianceEpsilon:l}=n;null==l&&(l=.001);const u=[r,s,i];let c=null;null!=a&&(c=a.shape,u.push(a));let h=null;null!=o&&(h=o.shape,u.push(o));const d=jt().getBool(\"WEBGL_PACK_NORMALIZATION\")?new gF(r.shape,s.shape,i.shape,c,h,l):new mF(r.shape,s.shape,i.shape,c,h,l);return e.runWebGLProgram(d,u,u[0].dtype)}};class xF{constructor(t){this.variableNames=[\"source\"],this.outputShape=t,this.rank=t.length;const e=MR(this.rank);this.customUniforms=[{name:\"start\",arrayIndex:this.rank,type:\"int\"}];const n=function(t){if(1===t)return\"sourceLoc\";if(t<=6)return bF.slice(0,t).map((t=>\"sourceLoc.\"+t)).join(\",\");throw Error(`Slicing for rank ${t} is not yet supported`)}(this.rank);let r;r=`\\n        ${e} sourceLoc;\\n        ${e} coords = getOutputCoords();\\n        ${t.map(((t,e)=>`sourceLoc.${bF[e]} = start[${e}] + coords.${bF[e]};`)).join(\"\\n\")}\\n      `,this.userCode=`\\n      void main() {\\n        ${r}\\n        setOutput(getSource(${n}));\\n      }\\n    `}}const bF=[\"x\",\"y\",\"z\",\"w\",\"u\",\"v\"];class vF{constructor(t){this.variableNames=[\"source\"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.rank=t.length,this.customUniforms=[{name:\"start\",arrayIndex:this.rank,type:\"int\"}];const e=MR(this.rank),n=LL(\"coords\",this.rank),r=LL(\"sourceLoc\",this.rank),s=1===this.rank?\"sourceLoc\":`vec2(${r.slice(-2).join()})`,i=`getChannel(getSource(${r.join()}), ${s})`,a=`\\n      result.x = ${i};\\n      if (++${n[this.rank-1]} < ${t[this.rank-1]}) {\\n        ++${r[this.rank-1]};\\n        result.y = ${i};\\n        --${r[this.rank-1]};\\n      }\\n    `,o=1===this.rank?\"\":`\\n      --${n[this.rank-1]};\\n      if (++${n[this.rank-2]} < ${t[this.rank-2]}) {\\n        ++${r[this.rank-2]};\\n        result.z = ${i};\\n        if (++${n[this.rank-1]} < ${t[this.rank-1]}) {\\n          ++${r[this.rank-1]};\\n          result.w = ${i};\\n        }\\n      }\\n    `,l=this.rank<=4?`sourceLoc = coords +\\n            ${e}(${t.map(((t,e)=>`start[${e}]`)).join()});`:t.map(((t,e)=>`${r[e]} = ${n[e]} + start[${e}];`)).join(\"\\n\");this.userCode=`\\n      void main() {\\n        ${e} coords = getOutputCoords();\\n        ${e} sourceLoc;\\n        ${l}\\n        vec4 result = vec4(0.);\\n        ${a}\\n        ${o}\\n        setOutput(result);\\n      }\\n    `}}function wF(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{begin:i,size:a}=r,[o,l]=yo(s,i,a);if(no(s,o,l),0===at(l))return n.makeTensorInfo(l,s.dtype,[]);if(n.shouldExecuteOnCPU([s])||\"string\"===s.dtype){const t=n.texData.get(s.dataId),e=xL(t.values,o,l,s.shape,s.dtype);return n.makeTensorInfo(l,s.dtype,e)}const{isPacked:u}=n.texData.get(s.dataId),c=mo(s.shape,o,l);if(u||!c){const t=jt().getBool(\"WEBGL_PACK_ARRAY_OPERATIONS\")?new vF(l):new xF(l),e=[o];return n.runWebGLProgram(t,[s],s.dtype,e)}return n.uploadToGPU(s.dataId),function(t,e,n,r){const s=r.texData.get(t.dataId),i=r.makeTensorInfo(n,t.dtype),a=r.texData.get(i.dataId);Object.assign(a,s),a.refCount=1,a.shape=n,a.dtype=t.dtype;let o=go(e,Rt(t.shape));s.slice&&(o+=s.slice.flatOffset),a.slice={flatOffset:o,origDataId:s.slice&&s.slice.origDataId||t.dataId};const l=r.dataRefCount.get(a.slice.origDataId)||1;return r.dataRefCount.set(a.slice.origDataId,l+1),i}(s,o,l,n)}const SF={kernelName:xr,backendName:\"webgl\",kernelFunc:wF},TF={kernelName:ge,backendName:\"webgl\",kernelFunc:t=>{const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{blockShape:i,crops:a}=r;nt(s.shape.length<=4,(()=>\"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet\"));const o=i.reduce(((t,e)=>t*e)),l=Dp(s.shape,i,o),u=Fp(l.length,i.length),c=$p(s.shape,i,o),h=Op(a,i.length),d=Pp(c,a,i.length),p=[],f=mD({inputs:{x:s},backend:n,attrs:{shape:l}}),m=MD({inputs:{x:f},backend:n,attrs:{perm:u}}),g=mD({inputs:{x:m},backend:n,attrs:{shape:c}}),y=wF({inputs:{x:g},backend:n,attrs:{begin:h,size:d}});return p.push(f),p.push(m),p.push(g),p.forEach((t=>n.disposeIntermediateTensorInfo(t))),y}},_F={kernelName:ye,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,weights:i}=e,{size:a}=r,o=n.readSync(s.dataId),l=n.readSync(i.dataId),u=HR(o,l,i.dtype,i.shape,a);return n.makeTensorInfo([a],i.dtype,u)}},MF=lD({opSnippet:\"return float(a != b);\",cpuKernelImpl:dL,dtype:\"bool\"}),kF={kernelName:Gn,backendName:\"webgl\",kernelFunc:MF};function EF(t){const{inputs:e,backend:n}=t,{input:r}=e;return ZL({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.real},backend:n})}const IF={kernelName:rr,backendName:\"webgl\",kernelFunc:EF},CF={kernelName:ve,backendName:\"webgl\",kernelFunc:function t(e){const{inputs:n,backend:r,attrs:s}=e,{x:i}=n,{dtype:a}=s;if(\"complex64\"===a){if(\"complex64\"===i.dtype)return ZL({inputs:{x:i},backend:r});const e=$c(i.shape),n=t({inputs:{x:i},backend:r,attrs:{dtype:\"float32\"}}),s=QL({inputs:{real:n,imag:e},backend:r});return e.dispose(),r.disposeIntermediateTensorInfo(n),s}if(\"complex64\"===i.dtype){const e=EF({inputs:{input:i},backend:r}),n=t({inputs:{x:e},backend:r,attrs:{dtype:a}});return r.disposeIntermediateTensorInfo(e),n}if(!St(i.dtype,a)){const t=ZL({inputs:{x:i},backend:r});return{dataId:t.dataId,shape:t.shape,dtype:a}}if(\"int32\"===a)return function(t,e){const n=new BL(t.shape,\"return float(int(x));\"),r=e.runWebGLProgram(n,[t],\"int32\");return{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}(i,r);if(\"bool\"===a){const t=r.makeTensorInfo([],\"bool\",xt(\"bool\",1)),e=MF({inputs:{a:i,b:t},backend:r});return r.disposeIntermediateTensorInfo(t),e}throw new Error(`Error in Cast: failed to cast ${i.dtype} to ${a}`)}},NF=\"return ceil(x);\",AF=oD({opSnippet:NF,packedOpSnippet:NF,cpuKernelImpl:qR}),RF={kernelName:we,backendName:\"webgl\",kernelFunc:AF};class LF{constructor(t){this.variableNames=[\"A\"],this.customUniforms=[{name:\"minVal\",type:\"float\"},{name:\"maxVal\",type:\"float\"}],this.outputShape=t,this.userCode=\"\\n\\n      void main() {\\n        float value = getAAtOutCoords();\\n        if (isnan(value)) {\\n          setOutput(value);\\n          return;\\n        }\\n\\n        setOutput(clamp(value, minVal, maxVal));\\n      }\\n    \"}}class DF{constructor(t){this.variableNames=[\"A\"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:\"minVal\",type:\"float\"},{name:\"maxVal\",type:\"float\"}],this.outputShape=t,this.userCode=\"\\n      void main() {\\n        vec4 value = getAAtOutCoords();\\n\\n        if (any(isnan(value))) {\\n          setOutput(value);\\n          return;\\n        }\\n\\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\\n      }\\n    \"}}const FF={kernelName:Se,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{clipValueMin:i,clipValueMax:a}=r;let o;o=jt().getBool(\"WEBGL_PACK_CLIP\")?new DF(s.shape):new LF(s.shape);const l=[[i],[a]];return n.runWebGLProgram(o,[s],s.dtype,l)}};class $F{constructor(t){this.variableNames=[\"real\",\"imag\"],this.outputShape=t,this.userCode=\"\\n      void main() {\\n        float re = abs(getRealAtOutCoords());\\n        float im = abs(getImagAtOutCoords());\\n        float mx = max(re, im);\\n\\n        // sadly the length function in glsl is not underflow-safe\\n        // (at least not on Intel GPUs). So the safe solution is\\n        // to ensure underflow-safety in all cases.\\n        setOutput(\\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\\n        );\\n      }\\n    \"}}function OF(t,e){return{dataId:e.dataId,dtype:e.dtype,shape:t.shape}}const PF={kernelName:_e,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n}=t,{x:r}=e,s=n.texData.get(r.dataId),i=new $F(r.shape),a=[OF(r,s.complexTensorInfos.real),OF(r,s.complexTensorInfos.imag)];return n.runWebGLProgram(i,a,a[0].dtype)}};class zF{constructor(t){this.outputShape=[],this.outputShape=Np(t,1),this.variableNames=t.map(((t,e)=>`T${e}`));const e=new Array(t.length-1);e[0]=t[0][1];for(let n=1;n<e.length;n++)e[n]=e[n-1]+t[n][1];const n=[`if (yC < ${e[0]}) setOutput(getT0(yR, yC));`];for(let t=1;t<e.length;t++){const r=e[t-1];n.push(`else if (yC < ${e[t]}) setOutput(getT${t}(yR, yC-${r}));`)}const r=e.length,s=e[e.length-1];n.push(`else setOutput(getT${r}(yR, yC-${s}));`),this.userCode=`\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int yR = coords.x;\\n        int yC = coords.y;\\n\\n        ${n.join(\"\\n        \")}\\n      }\\n    `}}class BF{constructor(t,e){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=Np(t,e);const n=this.outputShape,r=n.length,s=MR(r),i=LL(\"coords\",r),a=[\"x\",\"y\",\"z\",\"w\",\"u\",\"v\"].slice(0,r);this.variableNames=t.map(((t,e)=>`T${e}`));const o=new Array(t.length-1);o[0]=t[0][e];for(let n=1;n<o.length;n++)o[n]=o[n-1]+t[n][e];const l=a[e],u=a.slice(-2),c=a.join();let h=`if (${l} < ${o[0]}) {\\n        return getChannel(\\n            getT0(${c}), vec2(${u.join()}));\\n        }`;for(let t=1;t<o.length;t++){const e=o[t-1];h+=`\\n        if (${l} < ${o[t]}  && ${l} >= ${o[t-1]}) {\\n          return getChannel(\\n            getT${t}(${UF(a,l,e)}),\\n            vec2(${UF(u,l,e)}));\\n        }`}const d=o.length,p=o[o.length-1];h+=`\\n        return getChannel(\\n          getT${d}(${UF(a,l,p)}),\\n          vec2(${UF(u,l,p)}));`,this.userCode=`\\n      float getValue(${a.map((t=>\"int \"+t))}) {\\n        ${h}\\n      }\\n\\n      void main() {\\n        ${s} coords = getOutputCoords();\\n        vec4 result = vec4(getValue(${i}), 0., 0., 0.);\\n\\n        ${i[r-1]} = ${i[r-1]} + 1;\\n        if (${i[r-1]} < ${n[r-1]}) {\\n          result.g = getValue(${i});\\n        }\\n\\n        ${i[r-2]} = ${i[r-2]} + 1;\\n        if (${i[r-2]} < ${n[r-2]}) {\\n          result.a = getValue(${i});\\n        }\\n\\n        ${i[r-1]} = ${i[r-1]} - 1;\\n        if (${i[r-2]} < ${n[r-2]} &&\\n            ${i[r-1]} < ${n[r-1]}) {\\n          result.b = getValue(${i});\\n        }\\n        setOutput(result);\\n      }\\n    `}}function UF(t,e,n){const r=t.indexOf(e);return t.map(((t,e)=>e===r?`${t} - ${n}`:t)).join()}function VF(t){const{inputs:e,backend:n}=t,{input:r}=e;return ZL({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.imag},backend:n})}const WF={kernelName:pn,backendName:\"webgl\",kernelFunc:VF};function GF(t,e,n){const r=t[0].dtype;if(\"complex64\"===r){const r=t.map((t=>EF({inputs:{input:t},backend:n}))),s=t.map((t=>VF({inputs:{input:t},backend:n}))),i=GF(r,e,n),a=GF(s,e,n),o=QL({inputs:{real:i,imag:a},backend:n});return r.forEach((t=>n.disposeIntermediateTensorInfo(t))),s.forEach((t=>n.disposeIntermediateTensorInfo(t))),n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(a),o}let s=n.shouldExecuteOnCPU(t);if(\"string\"===r&&(s=!0),s){const s=t.map((t=>{const r=at(t.shape.slice(e));return mD({inputs:{x:t},backend:n,attrs:{shape:[-1,r]}})})),i=s.map((t=>({vals:n.readSync(t.dataId),shape:t.shape}))),a=Np(s.map((t=>t.shape)),1),o=1===s[0].shape[0],l=XR(i,a,r,o),u=Np(t.map((t=>t.shape)),e),c=n.makeTensorInfo(u,r,l);return s.forEach((t=>n.disposeIntermediateTensorInfo(t))),c}if(t.length>jt().getNumber(\"WEBGL_MAX_TEXTURES_IN_SHADER\")){const r=Math.floor(t.length/2),s=GF(t.slice(0,r),e,n),i=GF(t.slice(r),e,n),a=GF([s,i],e,n);return n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(i),a}if(jt().getBool(\"WEBGL_PACK_ARRAY_OPERATIONS\")&&t[0].shape.length>1){const s=new BF(t.map((t=>t.shape)),e);return n.runWebGLProgram(s,t,r)}const{tensors2D:i,outShape:a}=function(t,e,n){const r=Np(t.map((t=>t.shape)),e);return{tensors2D:t.map((t=>mD({inputs:{x:t},attrs:{shape:[-1,at(t.shape.slice(e))]},backend:n}))),outShape:r}}(t,e,n),o=new zF(i.map((t=>t.shape))),l=n.runWebGLProgram(o,i,r);i.forEach((t=>n.disposeIntermediateTensorInfo(t)));const u=mD({inputs:{x:l},attrs:{shape:a},backend:n});return n.disposeIntermediateTensorInfo(l),u}function HF(t){const{inputs:e,backend:n,attrs:r}=t,{axis:s}=r,i=gt(s,e[0].shape)[0],a=Np(e.map((t=>t.shape)),i);if(0===at(a))return n.makeTensorInfo(a,e[0].dtype,[]);const o=e.filter((t=>at(t.shape)>0));return 1===o.length?ZL({inputs:{x:o[0]},backend:n}):(Cp(o.map((t=>t.shape)),i),GF(o,i,n))}const jF={kernelName:Me,backendName:\"webgl\",kernelFunc:HF};class qF{constructor(t,e=!1,n=null,r=!1,s=!1){this.variableNames=[\"x\",\"W\"],this.outputShape=t.outShape;const i=t.padInfo.top,a=t.padInfo.left,o=t.strideHeight,l=t.strideWidth,u=t.dilationHeight,c=t.dilationWidth,h=t.filterHeight,d=t.filterWidth,p=4*Math.floor(t.inChannels/4),f=t.inChannels%4,m=\"channelsLast\"===t.dataFormat,g=m?1:2,y=m?2:3,x=m?3:1;let b=\"\",v=\"\";n&&(b=r?`float activation(float a) {\\n          float b = getPreluActivationWeightsAtOutCoords();\\n          ${n}\\n        }`:s?`float activation(float a) {\\n          float b = getLeakyreluAlphaAtOutCoords();\\n          ${n}\\n        }`:`\\n          float activation(float x) {\\n            ${n}\\n          }\\n        `,v=\"result = activation(result);\");const w=e?\"result += getBiasAtOutCoords();\":\"\";e&&this.variableNames.push(\"bias\"),r&&this.variableNames.push(\"preluActivationWeights\"),s&&this.variableNames.push(\"leakyreluAlpha\"),this.userCode=`\\n      ${b}\\n\\n      const ivec2 strides = ivec2(${o}, ${l});\\n      const ivec2 pads = ivec2(${i}, ${a});\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int d2 = coords[${x}];\\n\\n        ivec2 xRCCorner =\\n            ivec2(coords[${g}], coords[${y}]) * strides - pads;\\n        int xRCorner = xRCCorner.x;\\n        int xCCorner = xRCCorner.y;\\n\\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        for (int wR = 0; wR < ${h}; wR++) {\\n          int xR = xRCorner + wR * ${u};\\n\\n          if (xR < 0 || xR >= ${t.inHeight}) {\\n            continue;\\n          }\\n\\n          for (int wC = 0; wC < ${d}; wC++) {\\n            int xC = xCCorner + wC * ${c};\\n\\n            if (xC < 0 || xC >= ${t.inWidth}) {\\n              continue;\\n            }\\n\\n            for (int d1 = 0; d1 < ${p}; d1 += 4) {\\n              vec4 wValues = vec4(\\n                getW(wR, wC, d1, d2),\\n                getW(wR, wC, d1 + 1, d2),\\n                getW(wR, wC, d1 + 2, d2),\\n                getW(wR, wC, d1 + 3, d2)\\n              );\\n\\n              if (${m}) {\\n                vec4 xValues = vec4(\\n                  getX(batch, xR, xC, d1),\\n                  getX(batch, xR, xC, d1 + 1),\\n                  getX(batch, xR, xC, d1 + 2),\\n                  getX(batch, xR, xC, d1 + 3)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              } else {\\n                vec4 xValues = vec4(\\n                  getX(batch, d1, xR, xC),\\n                  getX(batch, d1 + 1, xR, xC),\\n                  getX(batch, d1 + 2, xR, xC),\\n                  getX(batch, d1 + 3, xR, xC)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              }\\n            }\\n\\n            if (${1===f}) {\\n\\n              if (${m}) {\\n                dotProd +=\\n                    getX(batch, xR, xC, ${p}) *\\n                    getW(wR, wC, ${p}, d2);\\n              } else {\\n                dotProd +=\\n                    getX(batch, ${p}, xR, xC) *\\n                    getW(wR, wC, ${p}, d2);\\n              }\\n\\n            } else if (${2===f}) {\\n              vec2 wValues = vec2(\\n                getW(wR, wC, ${p}, d2),\\n                getW(wR, wC, ${p} + 1, d2)\\n              );\\n\\n              if (${m}) {\\n                vec2 xValues = vec2(\\n                  getX(batch, xR, xC, ${p}),\\n                  getX(batch, xR, xC, ${p} + 1)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              } else {\\n                vec2 xValues = vec2(\\n                  getX(batch, ${p}, xR, xC),\\n                  getX(batch, ${p} + 1, xR, xC)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              }\\n\\n            } else if (${3===f}) {\\n              vec3 wValues = vec3(\\n                getW(wR, wC, ${p}, d2),\\n                getW(wR, wC, ${p} + 1, d2),\\n                getW(wR, wC, ${p} + 2, d2)\\n              );\\n\\n              if (${m}) {\\n                vec3 xValues = vec3(\\n                  getX(batch, xR, xC, ${p}),\\n                  getX(batch, xR, xC, ${p} + 1),\\n                  getX(batch, xR, xC, ${p} + 2)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              } else {\\n                vec3 xValues = vec3(\\n                  getX(batch, ${p}, xR, xC),\\n                  getX(batch, ${p} + 1, xR, xC),\\n                  getX(batch, ${p} + 2, xR, xC)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              }\\n\\n            }\\n          }\\n        }\\n\\n        float result = dotProd;\\n        ${w}\\n        ${v}\\n        setOutput(result);\\n      }\\n    `}}class XF{constructor(t){this.variableNames=[\"x\",\"W\"],this.outputShape=t.outShape;const e=t.padInfo.front,n=t.padInfo.top,r=t.padInfo.left,s=t.strideDepth,i=t.strideHeight,a=t.strideWidth,o=t.dilationDepth,l=t.dilationHeight,u=t.dilationWidth,c=t.filterDepth,h=t.filterHeight,d=t.filterWidth,p=4*Math.floor(t.inChannels/4),f=t.inChannels%4;this.userCode=`\\n      const ivec3 strides = ivec3(${s}, ${i}, ${a});\\n      const ivec3 pads = ivec3(${e}, ${n}, ${r});\\n\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int batch = coords.x;\\n        int d2 = coords.u;\\n\\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\\n        int xFCorner = xFRCCorner.x;\\n        int xRCorner = xFRCCorner.y;\\n        int xCCorner = xFRCCorner.z;\\n\\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\\n        // values in that axis.\\n        float dotProd = 0.0;\\n        for (int wF = 0; wF < ${c}; wF++) {\\n          int xF = xFCorner + wF * ${o};\\n\\n          if (xF < 0 || xF >= ${t.inDepth}) {\\n            continue;\\n          }\\n\\n          for (int wR = 0; wR < ${h}; wR++) {\\n            int xR = xRCorner + wR * ${l};\\n\\n            if (xR < 0 || xR >= ${t.inHeight}) {\\n              continue;\\n            }\\n\\n            for (int wC = 0; wC < ${d}; wC++) {\\n              int xC = xCCorner + wC * ${u};\\n\\n              if (xC < 0 || xC >= ${t.inWidth}) {\\n                continue;\\n              }\\n\\n              for (int d1 = 0; d1 < ${p}; d1 += 4) {\\n                vec4 xValues = vec4(\\n                  getX(batch, xF, xR, xC, d1),\\n                  getX(batch, xF, xR, xC, d1 + 1),\\n                  getX(batch, xF, xR, xC, d1 + 2),\\n                  getX(batch, xF, xR, xC, d1 + 3)\\n                );\\n                vec4 wValues = vec4(\\n                  getW(wF, wR, wC, d1, d2),\\n                  getW(wF, wR, wC, d1 + 1, d2),\\n                  getW(wF, wR, wC, d1 + 2, d2),\\n                  getW(wF, wR, wC, d1 + 3, d2)\\n                );\\n\\n                dotProd += dot(xValues, wValues);\\n              }\\n\\n              if (${1===f}) {\\n                dotProd +=\\n                  getX(batch, xF, xR, xC, ${p}) *\\n                  getW(wF, wR, wC, ${p}, d2);\\n              } else if (${2===f}) {\\n                vec2 xValues = vec2(\\n                  getX(batch, xF, xR, xC, ${p}),\\n                  getX(batch, xF, xR, xC, ${p} + 1)\\n                );\\n                vec2 wValues = vec2(\\n                  getW(wF, wR, wC, ${p}, d2),\\n                  getW(wF, wR, wC, ${p} + 1, d2)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              } else if (${3===f}) {\\n                vec3 xValues = vec3(\\n                  getX(batch, xF, xR, xC, ${p}),\\n                  getX(batch, xF, xR, xC, ${p} + 1),\\n                  getX(batch, xF, xR, xC, ${p} + 2)\\n                );\\n                vec3 wValues = vec3(\\n                  getW(wF, wR, wC, ${p}, d2),\\n                  getW(wF, wR, wC, ${p} + 1, d2),\\n                  getW(wF, wR, wC, ${p} + 2, d2)\\n                );\\n                dotProd += dot(xValues, wValues);\\n              }\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    `}}class KF{constructor(t,e){this.variableNames=[\"A\"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:\"inputShape\",type:\"ivec3\"},{name:\"pad\",type:\"ivec2\"},{name:\"stride\",type:\"ivec2\"},{name:\"dilation\",type:\"ivec2\"},{name:\"inChannels\",type:\"int\"},{name:\"itemsPerBlockRow\",type:\"int\"},{name:\"outWidth\",type:\"int\"}],this.outputShape=t,this.enableShapeUniforms=NR(this.outputShape.length);const{dataFormat:n}=e,r=cR(),s=\"channelsLast\"===n,i=s?0:1,a=s?1:2,o=this.enableShapeUniforms?\"if(blockIndex < outShape[1] && pos < outShape[0]) {\":`if(blockIndex < ${t[1]} && pos < ${t[0]}) {`;let l=\"\";for(let t=0;t<=1;t++)for(let e=0;e<=1;e++)l+=`\\n          blockIndex = rc.y + ${e};\\n          pos = rc.x + ${t};\\n\\n          ${o}\\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\\n\\n            if(d0 < inputShape[${i}] && d0 >= 0) {\\n              // Use custom imod instead mod. On Intel GPU, mod may generate\\n              // unexpected value.\\n              // https://github.com/tensorflow/tfjs/issues/5447\\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\\n                  inChannels);\\n\\n              if(d1 < inputShape[${a}] && d1 >= 0) {\\n\\n                ch = imod(pos, inChannels);\\n\\n                if (${s}) {\\n                  innerDims = vec2(d1, ch);\\n                  result[${2*t+e}] = getChannel(\\n                    getA(d0, int(innerDims.x),\\n                    int(innerDims.y)), innerDims);\\n                } else {\\n                  innerDims = vec2(d0, d1);\\n                  result[${2*t+e}] = getChannel(\\n                    getA(ch, int(innerDims.x),\\n                    int(innerDims.y)), innerDims);\\n                }\\n              }\\n            }\\n          }\\n        `;this.userCode=`\\n      void main() {\\n        ivec2 rc = getOutputCoords();\\n\\n        vec4 result = vec4(0);\\n\\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\\n        vec2 innerDims;\\n\\n        ${l}\\n\\n        ${r.output} = result;\\n      }\\n    `}}function YF({x:t,filter:e,convInfo:n,backend:r,bias:s=null,preluActivationWeights:i=null,leakyreluAlpha:a=0,activation:o=null}){const l=t.shape,u=r.texData.get(t.dataId),c=n.inChannels,h=l[0]*l[1]*l[2],d=n.outChannels,p=\"channelsLast\"===n.dataFormat;let f;const m=[];if((1!==h&&1!==d||!(c>1e3))&&u.isPacked&&p&&null!=u.texture&&l[2]%2!=0&&lt(u.shape.slice(-3),l.slice(-3))){const c=l[0]*l[1]*(l[2]+1),h={dataId:t.dataId,shape:[1,c,n.inChannels],dtype:t.dtype},d=u.shape;u.shape=u.shape.slice(),u.shape[u.shape.length-2]++,nt(nR(u.shape,h.shape),(()=>`packed reshape ${u.shape} to ${h.shape} isn't free`));const p=mD({inputs:{x:e},backend:r,attrs:{shape:[1,n.inChannels,n.outChannels]}});m.push(p);const g=ED({a:h,b:p,backend:r,transposeA:!1,transposeB:!1,bias:s,activation:o,preluActivationWeights:i,leakyreluAlpha:a}),y=r.texData.get(g.dataId);nt(y.isPacked,(()=>\"batchMatMul result is expected to be packed\")),u.shape=d,y.shape=n.outShape,f=ZL({inputs:{x:g},backend:r}),f.shape=n.outShape,m.push(g)}else{const u=mD({inputs:{x:t},backend:r,attrs:{shape:[1,p?l[0]*l[1]*l[2]:l[0]*l[2]*l[3],n.inChannels]}}),c=mD({inputs:{x:e},backend:r,attrs:{shape:[1,n.inChannels,n.outChannels]}}),h=ED({a:u,b:c,transposeA:!1,transposeB:!1,backend:r,bias:s,activation:o,preluActivationWeights:i,leakyreluAlpha:a});f=mD({inputs:{x:h},backend:r,attrs:{shape:n.outShape}}),m.push(u),m.push(c),m.push(h)}for(const t of m)r.disposeIntermediateTensorInfo(t);return f}function ZF({x:t,filter:e,convInfo:n,backend:r,bias:s=null,preluActivationWeights:i=null,leakyreluAlpha:a=0,activation:o=null}){const{filterWidth:l,filterHeight:u,inChannels:c,outWidth:h,outHeight:d,dataFormat:p}=n,f=\"channelsLast\"===p,m=l*u*c,g=d*h,y=[m,g],x=[],b=mD({inputs:{x:t},backend:r,attrs:{shape:t.shape.slice(1)}}),v=mD({inputs:{x:e},backend:r,attrs:{shape:[1,m,at(e.shape)/m]}});x.push(b),x.push(v);const w=new KF(y,n),S=[b.shape,[n.padInfo.top,n.padInfo.left],[n.strideHeight,n.strideWidth],[n.dilationHeight,n.dilationWidth],[n.inChannels],[n.filterWidth*n.inChannels],[n.outWidth]],T=r.runWebGLProgram(w,[b],\"float32\",S),_=mD({inputs:{x:T},backend:r,attrs:{shape:[1,y[0],y[1]]}});x.push(T),x.push(_);const M=null!=s,k=null!=i,E=\"leakyrelu\"===o,I=o?uD(o,!0):null,C=new cD(_.shape,v.shape,[1,g,n.outChannels],!0,!1,M,I,k,E),N=[_,v];if(s&&N.push(s),k&&N.push(i),E){const t=r.makeTensorInfo([],\"float32\",Is(a,\"float32\"));N.push(t),x.push(t)}const A=r.runWebGLProgram(C,N,\"float32\"),R=mD({inputs:{x:A},backend:r,attrs:{shape:f?[1,d,h,n.outChannels]:[1,n.outChannels,d,h]}});x.push(A);for(const t of x)r.disposeIntermediateTensorInfo(t);return R}const JF={kernelName:ke,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,filter:i}=e,{strides:a,pad:o,dataFormat:l,dilations:u,dimRoundingMode:c}=r,h=nu(l),d=ql(s.shape,i.shape,a,u,o,c,!1,h);let p;if(1!==d.filterHeight||1!==d.filterWidth||1!==d.dilationHeight||1!==d.dilationWidth||1!==d.strideHeight||1!==d.strideWidth||\"SAME\"!==d.padInfo.type&&\"VALID\"!==d.padInfo.type)if(jt().getBool(\"WEBGL_CONV_IM2COL\")&&1===s.shape[0])p=ZF({x:s,filter:i,convInfo:d,backend:n});else{const t=new qF(d);p=n.runWebGLProgram(t,[s,i],\"float32\")}else p=YF({x:s,filter:i,convInfo:d,backend:n});const f=mD({inputs:{x:p},backend:n,attrs:{shape:d.outShape}});return n.disposeIntermediateTensorInfo(p),f}};class QF{constructor(t){this.variableNames=[\"x\",\"dy\"],this.outputShape=t.filterShape;const e=t.strideHeight,n=t.strideWidth,r=t.padInfo.top,s=t.padInfo.left,i=\"channelsLast\"===t.dataFormat;this.userCode=`\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int wR = coords.x;\\n        int wC = coords.y;\\n        int d1 = coords.z;\\n        int d2 = coords.w;\\n\\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n\\n        for (int b = 0; b < ${t.batchSize}; b++) {\\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\\n            int xR = wR + yR * ${e} - ${r};\\n\\n            if (xR < 0 || xR >= ${t.inHeight}) {\\n              continue;\\n            }\\n\\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\\n              int xC = wC + yC * ${n} - ${s};\\n\\n              if (xC < 0 || xC >= ${t.inWidth}) {\\n                continue;\\n              }\\n\\n              if (${i}) {\\n                float dyValue = getDy(b, yR, yC, d2);\\n                float xValue = getX(b, xR, xC, d1);\\n                dotProd += (xValue * dyValue);\\n              } else {\\n                float dyValue = getDy(b, d2, yR, yC);\\n                float xValue = getX(b, d1, xR, xC);\\n                dotProd += (xValue * dyValue);\\n              }\\n\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    `}}class t${constructor(t){this.variableNames=[\"dy\",\"W\"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,s=t.strideWidth,i=\"channelsLast\"===t.dataFormat,a=e-1-t.padInfo.top,o=n-1-t.padInfo.left,l=i?1:2,u=i?2:3,c=i?3:1;this.userCode=`\\n      const ivec2 pads = ivec2(${a}, ${o});\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int d1 = coords[${c}];\\n\\n        ivec2 dyCorner = ivec2(coords[${l}], coords[${u}]) - pads;\\n        int dyRCorner = dyCorner.x;\\n        int dyCCorner = dyCorner.y;\\n\\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        for (int wR = 0; wR < ${e}; wR++) {\\n          float dyR = float(dyRCorner + wR) / ${r}.0;\\n\\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\\n            continue;\\n          }\\n          int idyR = int(dyR);\\n\\n          int wRPerm = ${e} - 1 - wR;\\n\\n          for (int wC = 0; wC < ${n}; wC++) {\\n            float dyC = float(dyCCorner + wC) / ${s}.0;\\n\\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\\n                fract(dyC) > 0.0) {\\n              continue;\\n            }\\n            int idyC = int(dyC);\\n\\n            int wCPerm = ${n} - 1 - wC;\\n\\n            for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\\n\\n              if (${i}) {\\n                float xValue = getDy(batch, idyR, idyC, d2);\\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\\n                dotProd += xValue * wValue;\\n              } else {\\n                float xValue = getDy(batch, d2, idyR, idyC);\\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\\n                dotProd += xValue * wValue;\\n              }\\n\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    `}}class e${constructor(t){this.variableNames=[\"x\",\"dy\"],this.outputShape=t.filterShape;const e=t.strideDepth,n=t.strideHeight,r=t.strideWidth,s=t.padInfo.front,i=t.padInfo.top,a=t.padInfo.left;this.userCode=`\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int wF = coords.x;\\n        int wR = coords.y;\\n        int wC = coords.z;\\n        int d1 = coords.w;\\n        int d2 = coords.u;\\n\\n        float dotProd = 0.0;\\n\\n        for (int b = 0; b < ${t.batchSize}; b++) {\\n          for (int yF = 0; yF < ${t.outDepth}; yF++) {\\n            int xF = wF + yF * ${e} - ${s};\\n\\n            if (xF < 0 || xF >= ${t.inDepth}) {\\n              continue;\\n            }\\n\\n            for (int yR = 0; yR < ${t.outHeight}; yR++) {\\n              int xR = wR + yR * ${n} - ${i};\\n\\n              if (xR < 0 || xR >= ${t.inHeight}) {\\n                continue;\\n              }\\n\\n              for (int yC = 0; yC < ${t.outWidth}; yC++) {\\n                int xC = wC + yC * ${r} - ${a};\\n\\n                if (xC < 0 || xC >= ${t.inWidth}) {\\n                  continue;\\n                }\\n\\n                float dyValue = getDy(b, yF, yR, yC, d2);\\n                float xValue = getX(b, xF, xR, xC, d1);\\n                dotProd += (xValue * dyValue);\\n              }\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    `}}class n${constructor(t){this.variableNames=[\"dy\",\"W\"],this.outputShape=t.inShape;const e=t.filterDepth,n=t.filterHeight,r=t.filterWidth,s=t.strideDepth,i=t.strideHeight,a=t.strideWidth,o=e-1-t.padInfo.front,l=n-1-t.padInfo.top,u=r-1-t.padInfo.left;this.userCode=`\\n      const ivec3 pads = ivec3(${o}, ${l}, ${u});\\n\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int batch = coords.x;\\n        int d1 = coords.u;\\n\\n\\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\\n        int dyFCorner = dyCorner.x;\\n        int dyRCorner = dyCorner.y;\\n        int dyCCorner = dyCorner.z;\\n\\n        float dotProd = 0.0;\\n        for (int wF = 0; wF < ${e}; wF++) {\\n          float dyF = float(dyFCorner + wF) / ${s}.0;\\n\\n          if (dyF < 0.0 || dyF >= ${t.outDepth}.0 || fract(dyF) > 0.0) {\\n            continue;\\n          }\\n          int idyF = int(dyF);\\n\\n          int wFPerm = ${e} - 1 - wF;\\n\\n          for (int wR = 0; wR < ${n}; wR++) {\\n            float dyR = float(dyRCorner + wR) / ${i}.0;\\n\\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\\n              fract(dyR) > 0.0) {\\n              continue;\\n            }\\n            int idyR = int(dyR);\\n\\n            int wRPerm = ${n} - 1 - wR;\\n\\n            for (int wC = 0; wC < ${r}; wC++) {\\n              float dyC = float(dyCCorner + wC) / ${a}.0;\\n\\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\\n                  fract(dyC) > 0.0) {\\n                continue;\\n              }\\n              int idyC = int(dyC);\\n\\n              int wCPerm = ${r} - 1 - wC;\\n\\n              for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\\n                dotProd += xValue * wValue;\\n              }\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    `}}const r$={kernelName:Ee,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,dy:i}=e,{strides:a,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:c}=r,h=nu(l),d=ql(s.shape,c,a,1,o,u,!1,h),p=new QF(d);return n.runWebGLProgram(p,[s,i],\"float32\")}},s$={kernelName:Ie,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{dy:s,filter:i}=e,{inputShape:a,strides:o,pad:l,dataFormat:u,dimRoundingMode:c}=r,h=nu(u),d=ql(a,i.shape,o,1,l,c,!1,h),p=new t$(d);return n.runWebGLProgram(p,[s,i],\"float32\")}},i$={kernelName:Ce,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,filter:i}=e,{strides:a,pad:o,dilations:l}=r,u=Xl(s.shape,i.shape,a,l,o),c=new XF(u);return n.runWebGLProgram(c,[s,i],\"float32\")}},a$={kernelName:Ne,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,dy:i}=e,{strides:a,pad:o,filterShape:l}=r,u=Xl(s.shape,l,a,1,o),c=new e$(u);return n.runWebGLProgram(c,[s,i],\"float32\")}},o$={kernelName:Ae,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{dy:s,filter:i}=e,{pad:a,strides:o,inputShape:l}=r,u=Xl(l,i.shape,o,1,a),c=new n$(u);return n.runWebGLProgram(c,[s,i],\"float32\")}},l$=oD({opSnippet:\"if (isnan(x)) return x;\\n  return cos(x);\\n\"}),u$={kernelName:Re,backendName:\"webgl\",kernelFunc:l$},c$=oD({opSnippet:\"\\n  float e2x = exp(-x);\\n  return (e2x + 1.0 / e2x) / 2.0;\\n\"}),h$={kernelName:Le,backendName:\"webgl\",kernelFunc:c$};class d${constructor(t,e,n,r,s){this.variableNames=[\"Image\",\"Boxes\",\"BoxInd\"],this.outputShape=[];const[i,a,o,l]=t,[u]=e,[c,h]=n;this.outputShape=[u,c,h,l];const d=\"bilinear\"===r?1:0,[p,f]=[a-1+\".0\",o-1+\".0\"],[m,g,y]=c>1?[\"\"+(a-1)/(c-1),\"(y2-y1) * height_ratio\",`y1*${p} + float(y)*(height_scale)`]:[\"0.0\",\"0.0\",`0.5 * (y1+y2) * ${p}`],[x,b,v]=h>1?[\"\"+(o-1)/(h-1),\"(x2-x1) * width_ratio\",`x1*${f} + float(x)*(width_scale)`]:[\"0.0\",\"0.0\",`0.5 * (x1+x2) * ${f}`];this.userCode=`\\n      const float height_ratio = float(${m});\\n      const float width_ratio = float(${x});\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int y = coords[1];\\n        int x = coords[2];\\n        int d = coords[3];\\n\\n        // get box vals\\n        float y1 = getBoxes(b,0);\\n        float x1 = getBoxes(b,1);\\n        float y2 = getBoxes(b,2);\\n        float x2 = getBoxes(b,3);\\n\\n        // get image in batch index\\n        int bInd = round(getBoxInd(b));\\n        if(bInd < 0 || bInd >= ${i}) {\\n          return;\\n        }\\n\\n        float height_scale = ${g};\\n        float width_scale = ${b};\\n\\n        float in_y = ${y};\\n        if( in_y < 0.0 || in_y > ${p} ) {\\n          setOutput(float(${s}));\\n          return;\\n        }\\n        float in_x = ${v};\\n        if( in_x < 0.0 || in_x > ${f} ) {\\n          setOutput(float(${s}));\\n          return;\\n        }\\n\\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\\n        if(${d} == 1) {\\n          // Compute the four integer indices.\\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\\n\\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\\n\\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\\n\\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\\n          float newValue = top + (bottom - top) * fracCR.y;\\n          setOutput(newValue);\\n        } else {\\n          // Compute the coordinators of nearest neighbor point.\\n          ivec2 sourceNearestCR = ivec2(floor(\\n            sourceFracIndexCR + vec2(0.5,0.5)));\\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\\n          setOutput(newValue);\\n        }\\n      }\\n    `}}const p$={kernelName:Fe,backendName:\"webgl\",kernelFunc:t=>{const{inputs:e,backend:n,attrs:r}=t,{image:s,boxes:i,boxInd:a}=e,{cropSize:o,method:l,extrapolationValue:u}=r,c=new d$(s.shape,i.shape,o,l,u);return n.runWebGLProgram(c,[s,i,a],\"float32\")}};class f${constructor(t,e,n){this.variableNames=[\"x\"],this.customUniforms=[{name:\"index\",type:\"float\"}],this.outputShape=t;const r=t.length,s=e?\"0.0\":`getX(${m$(r,\"coords\")})`,i=t[t.length-1];let a=\"\",o=\"\";e?(a=n?\"end != \"+(i-1):\"end != 0\",o=n?\"end + 1\":\"end - 1\"):(a=n?`end + pow2 < ${i}`:\"end >= pow2\",o=n?\"end + pow2\":\"end - pow2\"),this.userCode=`\\n      void main() {\\n        ${MR(r)} coords = getOutputCoords();\\n        int end = ${g$(r,\"coords\")};\\n        float val = ${s};\\n        int pow2 = int(pow(2.0, index));\\n        if (${a}) {\\n          int idx = ${o};\\n          ${g$(r,\"coords\")} = idx;\\n          val += getX(${m$(r,\"coords\")});\\n        }\\n        setOutput(val);\\n      }\\n    `}}function m$(t,e){if(1===t)return`${e}`;if(2===t)return`${e}.x, ${e}.y`;if(3===t)return`${e}.x, ${e}.y, ${e}.z`;if(4===t)return`${e}.x, ${e}.y, ${e}.z, ${e}.w`;throw Error(`Cumulative sum for rank ${t} is not yet supported`)}function g$(t,e){if(1===t)return`${e}`;if(2===t)return`${e}.y`;if(3===t)return`${e}.z`;if(4===t)return`${e}.w`;throw Error(`Cumulative sum for rank ${t} is not yet supported`)}const y$={kernelName:De,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{axis:i,exclusive:a,reverse:o}=r,l=s.shape.length,u=_c([i],l);let c=s;null!=u&&(c=MD({inputs:{x:s},backend:n,attrs:{perm:u}}));const h=kc(1,l)[0];if(h!==l-1)throw new Error(`WebGL cumsum shader expects an inner-most axis=${s.shape.length-1} but got axis=${i}`);const d=c.shape[h];let p=ZL({inputs:{x:c},backend:n});for(let t=0;t<=Math.ceil(Math.log2(d))-1;t++){const e=new f$(c.shape,!1,o),r=[[t]],s=p;p=n.runWebGLProgram(e,[p],p.dtype,r),n.disposeIntermediateTensorInfo(s)}if(a){const t=new f$(c.shape,a,o),e=p;p=n.runWebGLProgram(t,[p],p.dtype),n.disposeIntermediateTensorInfo(e)}if(null!=u){const t=MD({inputs:{x:p},backend:n,attrs:{perm:Mc(u)}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(c),t}return p}},x$={kernelName:$e,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,weights:i}=e,{size:a,binaryOutput:o}=r;if(1===s.shape.length){const t=n.readSync(s.dataId),e=n.readSync(i.dataId),r=HR(t,e,i.dtype,i.shape,a);return n.makeTensorInfo([a],i.dtype,r)}if(2===s.shape.length){const t=n.bufferSync(s),e=n.bufferSync(i),r=jR(t,e,a,o);return n.makeTensorInfo(r.shape,i.dtype,r.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${s.shape.length}.`)}};class b${constructor(t,e,n){this.variableNames=[\"x\"],this.outputShape=[],this.outputShape=t,this.blockSize=e,this.dataFormat=n,this.userCode=`\\n    void main() {\\n      ivec4 coords = getOutputCoords();\\n      int b = coords[0];\\n      int h = ${this.getHeightCoordString()};\\n      int w = ${this.getWidthCoordString()};\\n      int d = ${this.getDepthCoordString()};\\n\\n      int in_h = h / ${e};\\n      int offset_h = imod(h, ${e});\\n      int in_w = w / ${e};\\n      int offset_w = imod(w, ${e});\\n      int offset_d = (offset_h * ${e} + offset_w) *\\n        ${this.getOutputDepthSize()};\\n      int in_d = d + offset_d;\\n\\n      float result = ${this.getInputSamplingString()};\\n      setOutput(result);\\n    }\\n  `}getHeightCoordString(){return\"NHWC\"===this.dataFormat?\"coords[1]\":\"coords[2]\"}getWidthCoordString(){return\"NHWC\"===this.dataFormat?\"coords[2]\":\"coords[3]\"}getDepthCoordString(){return\"NHWC\"===this.dataFormat?\"coords[3]\":\"coords[1]\"}getOutputDepthSize(){return\"NHWC\"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return\"NHWC\"===this.dataFormat?\"getX(b, in_h, in_w, in_d)\":\"getX(b, in_d, in_h, in_w)\"}}const v$={kernelName:Oe,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{blockSize:i,dataFormat:a}=r;nt(i>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${i}`));const o=s.shape[0],l=\"NHWC\"===a?s.shape[1]:s.shape[2],u=\"NHWC\"===a?s.shape[2]:s.shape[3],c=\"NHWC\"===a?s.shape[3]:s.shape[1],h=l*i,d=u*i,p=c/(i*i),f=new b$(\"NHWC\"===a?[o,h,d,p]:[o,p,h,d],i,a);return n.runWebGLProgram(f,[s],s.dtype)}};class w${constructor(t,e=!1,n=null,r=!1,s=!1){this.variableNames=[\"x\",\"W\"],this.customUniforms=[{name:\"pads\",type:\"ivec2\"},{name:\"strides\",type:\"ivec2\"},{name:\"dilations\",type:\"ivec2\"},{name:\"inDims\",type:\"ivec2\"}],this.outputShape=t.outShape,this.enableShapeUniforms=NR(this.outputShape.length);const i=t.filterHeight,a=t.filterWidth,o=t.outChannels/t.inChannels;let l=\"\",u=\"\";n&&(l=r?`float activation(float a) {\\n          float b = getPreluActivationWeightsAtOutCoords();\\n          ${n}\\n        }`:s?`float activation(float a) {\\n          float b = getLeakyreluAlphaAtOutCoords();\\n          ${n}\\n        }`:`\\n          float activation(float x) {\\n            ${n}\\n          }\\n        `,u=\"result = activation(result);\");const c=e?\"result += getBiasAtOutCoords();\":\"\";e&&this.variableNames.push(\"bias\"),r&&this.variableNames.push(\"preluActivationWeights\"),s&&this.variableNames.push(\"leakyreluAlpha\"),this.userCode=`\\n      ${l}\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords.x;\\n        ivec2 xRCCorner = coords.yz * strides - pads;\\n        int d2 = coords.w;\\n        int d1 = d2 / ${o};\\n        int q = d2 - d1 * ${o};\\n\\n        int xRCorner = xRCCorner.x;\\n        int xCCorner = xRCCorner.y;\\n\\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\\n        for (int wR = 0; wR < ${i}; wR++) {\\n          int xR = xRCorner + wR * dilations[0];\\n\\n          if (xR < 0 || xR >= inDims[0]) {\\n            continue;\\n          }\\n\\n          for (int wC = 0; wC < ${a}; wC++) {\\n            int xC = xCCorner + wC * dilations[1];\\n\\n            if (xC < 0 || xC >= inDims[1]) {\\n              continue;\\n            }\\n\\n            float xVal = getX(batch, xR, xC, d1);\\n            float wVal = getW(wR, wC, d1, q);\\n            dotProd += xVal * wVal;\\n          }\\n        }\\n\\n        float result = dotProd;\\n        ${c}\\n        ${u}\\n        setOutput(result);\\n      }\\n    `}}class S${constructor(t,e=!1,n=null,r=!1,s=!1){this.variableNames=[\"x\",\"W\"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:\"pads\",type:\"ivec2\"},{name:\"strides\",type:\"ivec2\"},{name:\"dilations\",type:\"ivec2\"},{name:\"inDims\",type:\"ivec2\"}],this.outputShape=t.outShape,this.enableShapeUniforms=NR(this.outputShape.length);const i=t.outChannels/t.inChannels,a=t.padInfo.left,o=t.strideWidth,l=t.dilationWidth,u=t.filterHeight,c=t.filterWidth,h=c;let d=\"\\n      int xR; int xC; int xCOffset;\\n      vec4 wTexel; vec4 previous; vec4 final;\";for(let t=0;t<c;t++)d+=`\\n          vec4 xTexelC${2*t};\\n          int xTexelC${2*t}Ready;\\n          vec4 xTexelC${2*t+1};\\n          int xTexelC${2*t+1}Ready;\\n          vec4 xC${t};`;for(let t=0;t<u;t++){for(let t=0;t<c;t++)d+=`\\n          xTexelC${2*t} = vec4(0.0);\\n          xTexelC${2*t}Ready = 0;\\n          xTexelC${2*t+1} = vec4(0.0);\\n          xTexelC${2*t+1}Ready = 0;\\n          xC${t} = vec4(0.0);`;d+=`\\n        xR = xRCorner + ${t} * dilations[0];\\n        if (xR >=0 && xR < inDims[0]) {\\n      `;for(let e=0;e<(h+1)/2;e++){const n=2*e;if(d+=`\\n          xC = xCCorner + ${n*l};\\n          `,1===o){if(n<c&&(a%2==1?(d+=`\\n                xCOffset = xC + 1;\\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\\n                  xTexelC${n} = getX(batch, xR, xCOffset, d1);\\n\\n                  // Need to manually clear unused channels in case\\n                  // we're reading from recycled texture.\\n                  if (xCOffset + 1 >= inDims[1]) {\\n                    xTexelC${n}.zw = vec2(0.0);\\n                  }\\n                  xTexelC${n}Ready = 1;\\n                }\\n              `,d+=1===l&&n>0?`\\n                xC${n} = vec4(xTexelC${n-2}.zw, xTexelC${n}.xy);\\n                `:`\\n                  xCOffset = xC + 1 - 2;\\n\\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\\n                    previous = getX(batch, xR, xCOffset, d1);\\n\\n                    // Need to manually clear unused channels in case\\n                    // we're reading from recycled texture.\\n                    if (xCOffset + 1 >= inDims[1]) {\\n                      previous.zw = vec2(0.0);\\n                    }\\n\\n                    xC${n} = vec4(previous.zw, xTexelC${n}.xy);\\n                  } else {\\n                    xC${n} = vec4(0.0, 0.0, xTexelC${n}.xy);\\n                  }\\n                  `):d+=`\\n                if (xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {\\n                  xTexelC${n} = getX(batch, xR, xC, d1);\\n                  if (xC + 1 >= inDims[1]) {\\n                    xTexelC${n}.zw = vec2(0.0);\\n                  }\\n                  xTexelC${n}Ready = 1;\\n                }\\n\\n                xC${n} = xTexelC${n};\\n                `,n+1<c)){const t=a%2==0?Z(l):l;l%2==0&&a%2==1||l%2!=0&&a%2!=1?(d+=`\\n                  xCOffset = xC + imod(pads[1], 2) + ${t};\\n\\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\\n                    xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\\n\\n                    // Need to manually clear unused channels in case\\n                    // we're reading from recycled texture.\\n                    if (xCOffset + 1 >= inDims[1]) {\\n                      xTexelC${n+1}.zw = vec2(0.0);\\n                    }\\n                    xTexelC${n+1}Ready = 1;\\n                  }\\n                  `,l>1&&(d+=`\\n                    xCOffset -= 2;\\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\\n                      xTexelC${n} = getX(batch, xR, xCOffset, d1);\\n                      xTexelC${n}Ready = 1;\\n                    }\\n                    `),d+=`\\n                  xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.xy);\\n                  `):d+=1===t?`\\n                    xC${n+1} = xTexelC${n};\\n                    `:`\\n                    xCOffset = xC + ${t};\\n\\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\\n                      xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\\n                      if (xCOffset + 1 >= inDims[1]) {\\n                        xTexelC${n+1}.zw = vec2(0.0);\\n                      }\\n                      xTexelC${n+1}Ready = 1;\\n                    }\\n\\n                    xC${n+1} = xTexelC${n+1};\\n                    `}}else n<c&&(a%2==1?(d+=`\\n                xCOffset = xC + 1 - strides[1];\\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n}Ready == 0) {\\n                  xTexelC${n} = getX(batch, xR, xCOffset, d1);\\n                  // Need to manually clear unused channels in case\\n                  // we're reading from recycled texture.\\n                  if (xCOffset + 1 >= inDims[1]) {\\n                    xTexelC${n}.zw = vec2(0.0);\\n                  }\\n                  xTexelC${n}Ready = 1;\\n                }\\n\\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${n+1}Ready == 0) {\\n                  xTexelC${n+1} = getX(batch, xR, xC + 1, d1);\\n                  // Need to manually clear unused channels in case\\n                  // we're reading from recycled texture.\\n                  if (xC + 2 >= inDims[1]) {\\n                    xTexelC${n+1}.zw = vec2(0.0);\\n                  }\\n                  xTexelC${n+1}Ready = 1;\\n                }\\n\\n                xC${n} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\\n              `,n+1<c&&(d+=`\\n                  final = vec4(0.0);\\n                  xCOffset = xC + 1 + strides[1];\\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\\n                    final = getX(batch, xR, xCOffset, d1);\\n                  }\\n                  xC${n+1} = vec4(xTexelC${n+1}.xy, final.xy);\\n                `)):(d+=`\\n                if(xC >= 0 && xC < inDims[1] && xTexelC${n}Ready == 0) {\\n                  xTexelC${n} = getX(batch, xR, xC, d1);\\n                  if (xC + 1 >= inDims[1]) {\\n                    xTexelC${n}.zw = vec2(0.0);\\n                  }\\n                  xTexelC${n}Ready = 1;\\n                }\\n\\n                xCOffset = xC + strides[1];\\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${n+1}Ready == 0) {\\n                  xTexelC${n+1} = getX(batch, xR, xCOffset, d1);\\n                  if (xCOffset + 1 >= inDims[1]) {\\n                    xTexelC${n+1}.zw = vec2(0.);\\n                  }\\n                  xTexelC${n+1}Ready = 1;\\n                }\\n\\n                xC${n} = vec4(\\n                  xTexelC${n}.xy, xTexelC${n+1}.xy);\\n              `,n+1<c&&(d+=`\\n                  xC${n+1} = vec4(xTexelC${n}.zw, xTexelC${n+1}.zw);\\n                `)));n<c&&(d+=`\\n            wTexel = getW(${t}, ${n}, d1, q);\\n            dotProd += xC${n} * vec4(wTexel.xz, wTexel.xz);\\n          `,n+1<c&&(d+=`\\n              wTexel = getW(${t}, ${n+1}, d1, q);\\n              dotProd += xC${n+1} * vec4(wTexel.xz, wTexel.xz);\\n            `))}d+=\"\\n        }\\n      \"}let p=\"\",f=\"\";n&&(p=r?`vec4 activation(vec4 a) {\\n          vec4 b = getPreluActivationWeightsAtOutCoords();\\n          ${n}\\n        }`:s?`vec4 activation(vec4 a) {\\n          vec4 b = getLeakyreluAlphaAtOutCoords();\\n          ${n}\\n        }`:`vec4 activation(vec4 x) {\\n          ${n}\\n        }`,f=\"result = activation(result);\");const m=e?\"result += getBiasAtOutCoords();\":\"\";e&&this.variableNames.push(\"bias\"),r&&this.variableNames.push(\"preluActivationWeights\"),s&&this.variableNames.push(\"leakyreluAlpha\"),this.userCode=`\\n      ${p}\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords.x;\\n        ivec2 xRCCorner = coords.yz * strides - pads;\\n        int d2 = coords.w;\\n        int d1 = d2 / ${i};\\n        int q = d2 - d1 * ${i};\\n        int xRCorner = xRCCorner.x;\\n        int xCCorner = xRCCorner.y;\\n\\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\\n        vec4 dotProd = vec4(0.000000000000001);\\n\\n        ${d}\\n\\n        vec4 result = dotProd - vec4(0.000000000000001);\\n        ${m}\\n        ${f}\\n        setOutput(result);\\n      }\\n    `}}const T$={kernelName:Pe,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,filter:i}=e,{strides:a,pad:o,dilations:l,dimRoundingMode:u}=r;let c=l;null==c&&(c=[1,1]),nt(eu(a,c),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${a} and dilations '${c}'`));const h=ql(s.shape,i.shape,a,c,o,u,!0);let d;d=jt().getBool(\"WEBGL_PACK_DEPTHWISECONV\")&&h.strideWidth<=2&&h.outChannels/h.inChannels==1?new S$(h):new w$(h);const p=[[h.padInfo.top,h.padInfo.left],[h.strideHeight,h.strideWidth],[h.dilationHeight,h.dilationWidth],[h.inHeight,h.inWidth]];return n.runWebGLProgram(d,[s,i],\"float32\",p)}};class _${constructor(t){this.variableNames=[\"x\",\"dy\"],this.outputShape=t.filterShape;const e=t.strideHeight,n=t.strideWidth,r=t.padInfo.top,s=t.padInfo.left,i=t.outChannels/t.inChannels;this.userCode=`\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int wR = coords.x;\\n        int wC = coords.y;\\n        int d1 = coords.z;\\n        int dm = coords.w;\\n        int d2 = d1 * ${i} + dm;\\n\\n        float dotProd = 0.0;\\n\\n        // TO DO: Vec4 over the batch size\\n        for (int b = 0; b < ${t.batchSize}; b++) {\\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\\n            int xR = wR + yR * ${e} - ${r};\\n\\n            if (xR < 0 || xR >= ${t.inHeight}) {\\n              continue;\\n            }\\n\\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\\n              int xC = wC + yC * ${n} - ${s};\\n\\n              if (xC < 0 || xC >= ${t.inWidth}) {\\n                continue;\\n              }\\n\\n              float dyValue = getDy(b, yR, yC, d2);\\n              float xValue = getX(b, xR, xC, d1);\\n              dotProd += (xValue * dyValue);\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    `}}class M${constructor(t){this.variableNames=[\"dy\",\"W\"],this.outputShape=t.inShape;const e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,s=t.strideWidth,i=e-1-t.padInfo.top,a=n-1-t.padInfo.left,o=t.outChannels/t.inChannels;this.userCode=`\\n      const ivec2 pads = ivec2(${i}, ${a});\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int d1 = coords[3];\\n        ivec2 dyCorner = coords.yz - pads;\\n        int dyRCorner = dyCorner.x;\\n        int dyCCorner = dyCorner.y;\\n\\n        float dotProd = 0.0;\\n\\n        for (int wR = 0; wR < ${e}; wR++) {\\n          float dyR = float(dyRCorner + wR) / ${r}.0;\\n\\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\\n            continue;\\n          }\\n          int idyR = int(dyR);\\n\\n          int wRPerm = ${e} - 1 - wR;\\n\\n          for (int wC = 0; wC < ${n}; wC++) {\\n            float dyC = float(dyCCorner + wC) / ${s}.0;\\n\\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\\n                fract(dyC) > 0.0) {\\n              continue;\\n            }\\n            int idyC = int(dyC);\\n\\n            int wCPerm = ${n} - 1 - wC;\\n\\n            // TO DO: Vec4 over the channelMul\\n            for (int dm = 0; dm < ${o}; dm++) {\\n              int d2 = d1 * ${o} + dm;\\n              float xValue = getDy(batch, idyR, idyC, d2);\\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\\n              dotProd += xValue * wValue;\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    `}}const k$={kernelName:ze,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,dy:i}=e,{strides:a,dilations:o,pad:l,dimRoundingMode:u,filterShape:c}=r,h=ql(s.shape,c,a,o,l,u,!0),d=new _$(h);return n.runWebGLProgram(d,[s,i],\"float32\")}},E$={kernelName:Be,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{dy:s,filter:i}=e,{strides:a,dilations:o,pad:l,dimRoundingMode:u,inputShape:c}=r,h=ql(c,i.shape,a,o,l,u,!0),d=new M$(h);return n.runWebGLProgram(d,[s,i],\"float32\")}};class I${constructor(t){this.variableNames=[\"X\"],this.outputShape=[t,t],this.userCode=\"\\n      void main() {\\n          ivec2 coords = getOutputCoords();\\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\\n          setOutput(val);\\n      }\\n    \"}}const C$={kernelName:Ue,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n}=t,{x:r}=e,s=[...r.shape,...r.shape],i=at(r.shape),a=mD({inputs:{x:r},backend:n,attrs:{shape:[i]}}),o=new I$(i),l=n.runWebGLProgram(o,[a],a.dtype),u=mD({inputs:{x:l},backend:n,attrs:{shape:s}});return n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(l),u}};class N${constructor(t){this.variableNames=[\"x\",\"W\"],this.outputShape=t.outShape;const{inHeight:e,inWidth:n,padInfo:r,strideHeight:s,strideWidth:i,filterHeight:a,filterWidth:o,dilationHeight:l,dilationWidth:u}=t,{top:c,left:h}=r;this.userCode=`\\n      const ivec2 strides = ivec2(${s}, ${i});\\n      const ivec2 pads = ivec2(${c}, ${h});\\n      const float neg_infinity = -3.4e38;\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int batch = coords.x;\\n        int d1 = coords.w;\\n        ivec2 outTopLeftCorner =\\n            coords.yz * strides - pads;\\n        int hBeg = outTopLeftCorner.x;\\n        int wBeg = outTopLeftCorner.y;\\n\\n        float curVal = neg_infinity;\\n        for (int h = 0; h < ${a}; h++) {\\n          int hIn = hBeg + h * ${l};\\n\\n          if (hIn >= 0 && hIn < ${e}) {\\n            for (int w = 0; w < ${o}; w++) {\\n              int wIn = wBeg + w * ${u};\\n\\n              if (wIn >= 0 && wIn < ${n}) {\\n                float xVal = getX(batch, hIn, wIn, d1);\\n                float wVal = getW(h, w, d1);\\n\\n                float val = xVal + wVal;\\n                if (val > curVal) {\\n                  curVal = val;\\n                }\\n              }\\n            }\\n          }\\n        }\\n\\n        float result = curVal;\\n        setOutput(result);\\n      }\\n    `}}const A$={kernelName:Ve,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,filter:i}=e,{strides:a,pad:o,dilations:l}=r,u=Gl(s.shape,i.shape,a,o,\"NHWC\",l);let c;const h=new N$(u);c=n.runWebGLProgram(h,[s,i],\"float32\");const d=mD({inputs:{x:c},backend:n,attrs:{shape:u.outShape}});return n.disposeIntermediateTensorInfo(c),d}},R$={kernelName:je,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{equation:s}=r,i=e,{allDims:a,summedDims:o,idDims:l}=nf(s,i.length);sf(a.length,l,i);const{path:u,steps:c}=af(o,l),h=c.length;let d=null,p=a.length;const f=[];for(let t=0;t<h;++t){for(const e of c[t]){const{permutationIndices:t,expandDims:r}=rf(p,l[e]);let s;of(t)?s=i[e]:(s=MD({inputs:{x:i[e]},backend:n,attrs:{perm:t}}),f.push(s));const a=s.shape.slice();for(let t=0;t<r.length;++t)a.splice(r[t],0,1);lt(s.shape,a)||(s=mD({inputs:{x:s},backend:n,attrs:{shape:a}}),f.push(s)),null===d?d=s:(d=pD({inputs:{a:s,b:d},backend:n}),f.push(d))}t<h-1&&(u[t]>=0&&(d=TD({inputs:{x:d},backend:n,attrs:{axis:u[t]-(a.length-p),keepDims:!1}}),f.push(d)),p--)}for(const t of f)t!==d&&n.disposeIntermediateTensorInfo(t);return d}},L$=oD({opSnippet:\"return (x >= 0.0) ? x : (exp(x) - 1.0);\",packedOpSnippet:\"\\n  vec4 result;\\n\\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\\n\\n  return result;\\n\"}),D$={kernelName:qe,backendName:\"webgl\",kernelFunc:L$},F$={kernelName:Xe,backendName:\"webgl\",kernelFunc:t=>{const{inputs:e,backend:n}=t,{dy:r,y:s}=e,i=jt().getBool(\"WEBGL_PACK_BINARY_OPERATIONS\")?new YL(\"\\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\\n\",r.shape,s.shape):new KL(\"return (b >= 1.0) ? a : a * (b + 1.0);\",r.shape,s.shape);return n.runWebGLProgram(i,[r,s],r.dtype)}},$$=lD({opSnippet:\"return float(a == b);\",packedOpSnippet:\"\\n  return vec4(equal(a, b));\\n\",dtype:\"bool\",cpuKernelImpl:KR}),O$={kernelName:Ye,backendName:\"webgl\",kernelFunc:$$},P$=oD({opSnippet:`\\n  // Error function is calculated approximately with elementary function.\\n  // See \"Handbook of Mathematical Functions with Formulas,\\n  // Graphs, and Mathematical Tables\", Abramowitz and Stegun.\\n  float p = ${Up};\\n  float a1 = ${Vp};\\n  float a2 = ${Wp};\\n  float a3 = ${Gp};\\n  float a4 = ${Hp};\\n  float a5 = ${jp};\\n\\n  float sign = sign(x);\\n  x = abs(x);\\n  float t = 1.0 / (1.0 + p * x);\\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\\n`}),z$={kernelName:Ke,backendName:\"webgl\",kernelFunc:P$},B$=\"return exp(x);\",U$=oD({opSnippet:B$,packedOpSnippet:B$,cpuKernelImpl:YR}),V$={kernelName:Ze,backendName:\"webgl\",kernelFunc:U$};function W$(t){const{inputs:e,attrs:n,backend:r}=t,{dim:s}=n,{input:i}=e,a=i.shape.length,o=i.shape.slice();let l=s;return s<0&&(nt(-(a+1)<=s,(()=>`Axis must be in the interval [${-(a+1)}, ${a}]`)),l=a+s+1),o.splice(l,0,1),mD({inputs:{x:i},backend:r,attrs:{shape:o}})}const G$={kernelName:Je,backendName:\"webgl\",kernelFunc:W$},H$=\"return exp(x) - 1.0;\",j$=oD({opSnippet:H$,packedOpSnippet:H$,cpuKernelImpl:ZR}),q$={kernelName:Qe,backendName:\"webgl\",kernelFunc:j$};class X${constructor(t,e,n){this.variableNames=[\"real\",\"imag\"];const r=e[1];this.outputShape=e;const s=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,i=n?`${r}.0`:\"1.0\";let a;if(\"real\"===t)a=\"return real * expR - imag * expI;\";else{if(\"imag\"!==t)throw new Error(`FFT component must be either \"real\" or \"imag\", got ${t}.`);a=\"return real * expI + imag * expR;\"}this.userCode=`\\n      const float exponentMultiplier = ${s};\\n\\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\\n        ${a}\\n      }\\n\\n      float mulMatDFT(int batch, int index) {\\n        float indexRatio = float(index) / float(${r});\\n        float exponentMultiplierTimesIndexRatio =\\n            exponentMultiplier * indexRatio;\\n\\n        float result = 0.0;\\n\\n        for (int i = 0; i < ${r}; i++) {\\n          // x = (-2|2 * PI / N) * index * i;\\n          float x = exponentMultiplierTimesIndexRatio * float(i);\\n          float expR = cos(x);\\n          float expI = sin(x);\\n          float real = getReal(batch, i);\\n          float imag = getImag(batch, i);\\n\\n          result +=\\n              unaryOpComplex(real, expR, imag, expI) / ${i};\\n        }\\n\\n        return result;\\n      }\\n\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        setOutput(mulMatDFT(coords[0], coords[1]));\\n      }\\n    `}}function K$(t,e,n){const r=n.texData.get(t.dataId),s=at(t.shape),i=t.shape[t.shape.length-1],a=mD({inputs:{x:t},backend:n,attrs:{shape:[s/i,i]}}),o=a.shape,l=new X$(\"real\",o,e),u=new X$(\"imag\",o,e),c=[{dataId:r.complexTensorInfos.real.dataId,dtype:r.complexTensorInfos.real.dtype,shape:o},{dataId:r.complexTensorInfos.imag.dataId,dtype:r.complexTensorInfos.imag.dtype,shape:o}],h=n.runWebGLProgram(l,c,\"float32\"),d=n.runWebGLProgram(u,c,\"float32\"),p=QL({inputs:{real:h,imag:d},backend:n});n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d);const f=mD({inputs:{x:p},backend:n,attrs:{shape:t.shape}});return n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(p),f}const Y$={kernelName:tn,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n}=t,{input:r}=e;return K$(r,!1,n)}};class Z${constructor(t,e){this.outputShape=[],this.customUniforms=[{name:\"value\",type:\"float\"}],this.variableNames=[\"x\"],this.outputShape=t,this.userCode=\"\\n      void main() {\\n        // Input can be obtained from uniform value.\\n        setOutput(value);\\n      }\\n    \"}}function J$(t){const{backend:e,attrs:n}=t,{shape:r,value:s}=n;let{dtype:i}=n;if(i=i||Ct(s),\"string\"===i){const t=bt(i,at(r));return t.fill(s),e.makeTensorInfo(r,i,t)}{const t=new Z$(r,s),n=[[s]];return e.runWebGLProgram(t,[],i,n)}}const Q$={kernelName:en,backendName:\"webgl\",kernelFunc:J$};class tO{constructor(t){this.variableNames=[\"Image\"],this.outputShape=[];const e=t[2];this.outputShape=t,this.userCode=`\\n        void main() {\\n          ivec4 coords = getOutputCoords();\\n          int x = coords[2];\\n\\n          int coordX = ${e} - x - 1;\\n          float outputValue;\\n          if(coordX >= 0 && coordX < ${e}) {\\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\\n          } else {\\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\\n          }\\n          setOutput(outputValue);\\n        }\\n    `}}const eO={kernelName:nn,backendName:\"webgl\",kernelFunc:({inputs:t,backend:e})=>{const{image:n}=t,r=e,s=new tO(n.shape);return r.runWebGLProgram(s,[n],n.dtype)}},nO=\"return floor(x);\",rO=oD({opSnippet:nO,packedOpSnippet:nO,cpuKernelImpl:JR}),sO={kernelName:rn,backendName:\"webgl\",kernelFunc:rO},iO=lD({opSnippet:\"\\n  float s = sign(a) * sign(b);\\n  int ia = round(a);\\n  int ib = round(b);\\n  if (ib != 0) {\\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\\n    return float(idiv(ia, ib, s));\\n  } else {\\n    return NAN;\\n  }\\n\",packedOpSnippet:\"\\n  ivec4 ia = round(a);\\n  ivec4 ib = round(b);\\n  bvec4 cond = notEqual(ib, ivec4(0));\\n  ivec4 result = ivec4(0);\\n  vec4 s = sign(a) * sign(b);\\n\\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\\n  if (cond[0]) {\\n    result[0] = idiv(ia[0], ib[0], s[0]);\\n  }\\n  if (cond[1]) {\\n    result[1] = idiv(ia[1], ib[1], s[1]);\\n  }\\n  if (cond[2]) {\\n    result[2] = idiv(ia[2], ib[2], s[2]);\\n  }\\n  if (cond[3]) {\\n    result[3] = idiv(ia[3], ib[3], s[3]);\\n  }\\n  return vec4(result);\\n\",dtype:\"int32\"}),aO={kernelName:sn,backendName:\"webgl\",kernelFunc:iO};class oO{constructor(t){this.variableNames=[\"A\"];const e=cR(),[n,r]=t;this.outputShape=t,this.userCode=`\\n      void main() {\\n        ivec3 coords = getOutputCoords();\\n        int texR = coords[0];\\n        int texC = coords[1];\\n        int depth = coords[2];\\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${n}.0);\\n\\n        vec4 values = ${e.texture2D}(A, uv);\\n        float value;\\n        if (depth == 0) {\\n          value = values.r;\\n        } else if (depth == 1) {\\n          value = values.g;\\n        } else if (depth == 2) {\\n          value = values.b;\\n        } else if (depth == 3) {\\n          value = values.a;\\n        }\\n\\n        setOutput(floor(value * 255.0 + 0.5));\\n      }\\n    `}}class lO{constructor(t){this.variableNames=[\"A\"],this.packedInputs=!1,this.packedOutput=!0;const e=cR(),[n,r]=t;this.outputShape=t,this.userCode=`\\n      void main() {\\n        ivec3 coords = getOutputCoords();\\n        int texR = coords[0];\\n        int texC = coords[1];\\n        int depth = coords[2];\\n\\n        vec4 result = vec4(0.);\\n\\n        for(int row=0; row<=1; row++) {\\n          for(int col=0; col<=1; col++) {\\n            texC = coords[1] + row;\\n            depth = coords[2] + col;\\n\\n            vec2 uv = (vec2(texC, texR) + halfCR) /\\n                       vec2(${r}.0, ${n}.0);\\n            vec4 values = ${e.texture2D}(A, uv);\\n            float value;\\n            if (depth == 0) {\\n              value = values.r;\\n            } else if (depth == 1) {\\n              value = values.g;\\n            } else if (depth == 2) {\\n              value = values.b;\\n            } else if (depth == 3) {\\n              value = values.a;\\n            }\\n\\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\\n          }\\n        }\\n\\n        ${e.output} = result;\\n      }\\n    `}}const uO={kernelName:Jr,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t;let{pixels:s}=e;const{numChannels:i}=r,a=\"undefined\"!=typeof HTMLVideoElement&&s instanceof HTMLVideoElement,o=\"undefined\"!=typeof HTMLImageElement&&s instanceof HTMLImageElement,[l,u]=a?[s.videoWidth,s.videoHeight]:[s.width,s.height],c=[u,l],h=[u,l,i];(o||a)&&(null==cO&&(cO=document.createElement(\"canvas\").getContext(\"2d\")),cO.canvas.width=l,cO.canvas.height=u,cO.drawImage(s,0,0,l,u),s=cO.canvas);const d=n.makeTensorInfo(c,\"int32\");n.texData.get(d.dataId).usage=FA.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(d.dataId),s);const p=jt().getBool(\"WEBGL_PACK\")?new lO(h):new oO(h),f=n.runWebGLProgram(p,[d],\"int32\");return n.disposeData(d.dataId),f}};let cO;const hO={kernelName:es,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,filter:i,bias:a,preluActivationWeights:o}=e,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=r,m=nu(c),g=ql(s.shape,i.shape,l,h,u,d,!1,m);let y;const x=[];if(1!==g.filterHeight||1!==g.filterWidth||1!==g.dilationHeight||1!==g.dilationWidth||1!==g.strideHeight||1!==g.strideWidth||\"SAME\"!==g.padInfo.type&&\"VALID\"!==g.padInfo.type)if(jt().getBool(\"WEBGL_CONV_IM2COL\")&&1===s.shape[0])y=ZF({x:s,filter:i,convInfo:g,backend:n,bias:a,activation:p,preluActivationWeights:o,leakyreluAlpha:f});else{const t=null!=a,e=null!=o,r=\"leakyrelu\"===p,l=p?uD(p,!1):null,u=new qF(g,t,l,e,r),c=[s,i];if(a&&c.push(a),o&&c.push(o),r){const t=n.makeTensorInfo([],\"float32\",Is(f,\"float32\"));c.push(t),x.push(t)}y=n.runWebGLProgram(u,c,\"float32\")}else y=YF({x:s,filter:i,convInfo:g,backend:n,bias:a,activation:p,preluActivationWeights:o,leakyreluAlpha:f});const b=mD({inputs:{x:y},backend:n,attrs:{shape:g.outShape}});return x.push(y),x.forEach((t=>n.disposeIntermediateTensorInfo(t))),b}},dO={kernelName:ns,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,filter:i,bias:a,preluActivationWeights:o}=e,{strides:l,pad:u,dilations:c,dimRoundingMode:h,activation:d,leakyreluAlpha:p}=r,f=[];let m=c;null==m&&(m=[1,1]),nt(eu(l,m),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${m}'`));const g=ql(s.shape,i.shape,l,m,u,h,!0),y=jt().getBool(\"WEBGL_PACK_DEPTHWISECONV\")&&g.strideWidth<=2&&g.outChannels/g.inChannels==1,x=d?uD(d,y):null,b=[s,i],v=null!=a,w=null!=o,S=\"leakyrelu\"===d;if(v&&b.push(a),w&&b.push(o),S){const t=n.makeTensorInfo([],\"float32\",Is(p,\"float32\"));b.push(t),f.push(t)}let T;T=y?new S$(g,v,x,w,S):new w$(g,v,x,w,S);const _=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],M=n.runWebGLProgram(T,b,\"float32\",_);return f.forEach((t=>n.disposeIntermediateTensorInfo(t))),M}};class pO{constructor(t,e,n){this.sliceDim=t,this.strides=e,this.variableNames=[\"x\",\"indices\"],this.outputShape=n;const r=MR(e.length),s=MR(n.length),i=this.sliceDim>1?\"strides[j]\":\"strides\";this.userCode=`\\n        ${r} strides = ${r}(${this.strides});\\n         void main() {\\n          ${s} coords = getOutputCoords();\\n          int flattenIndex = 0;\\n          for (int j = 0; j < ${this.sliceDim}; j++) {\\n            int index = round(getIndices(coords[0], j));\\n            flattenIndex += index * ${i};\\n          }\\n          setOutput(getX(flattenIndex, coords[1]));\\n        }\\n      `}}const fO={kernelName:ln,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n}=t,{params:r,indices:s}=e,i=s.shape,a=i[i.length-1],o=at(r.shape),[l,u,c,h]=Ja(r,s),d=mD({inputs:{x:s},backend:n,attrs:{shape:[u,a]}}),p=mD({inputs:{x:r},backend:n,attrs:{shape:[at(r.shape)/c,c]}});if(n.shouldExecuteOnCPU([r,s])||\"string\"===r.dtype){const t=n.readSync(s.dataId),e=n.bufferSync(r),i=QR(t,e,r.dtype,u,a,c,h,r.shape,o);return n.makeTensorInfo(l,r.dtype,i.values)}const f=new pO(a,h,[u,c]),m=n.runWebGLProgram(f,[p,d],p.dtype),g=mD({inputs:{x:m},backend:n,attrs:{shape:l}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(m),g}};class mO{constructor(t,e){this.variableNames=[\"A\",\"indices\"],this.outputShape=e,this.rank=e.length;const n=MR(this.rank),r=function(t,e){const n=[\"resRC.x\",\"resRC.y\",\"resRC.z\",\"resRC.w\"],r=[];for(let e=0;e<t.length;e++)2===e?r.push(\"int(getIndices(resRC.x, resRC.z))\"):r.push(`${n[e]}`);return r.join()}(t);this.userCode=`\\n      void main() {\\n        ${n} resRC = getOutputCoords();\\n        setOutput(getA(${r}));\\n      }\\n    `}}function gO(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,indices:i}=e,{axis:a,batchDims:o}=r,l=df(s,i,gt(a,s.shape)[0],o),u=at(i.shape),c=[],h=mD({inputs:{x:s},backend:n,attrs:{shape:[l.batchSize,l.outerSize,l.dimSize,l.sliceSize]}}),d=mD({inputs:{x:i},backend:n,attrs:{shape:[l.batchSize,u/l.batchSize]}});c.push(h),c.push(d);const p=[l.batchSize,l.outerSize,u/l.batchSize,l.sliceSize];if(n.shouldExecuteOnCPU([s,i])||\"string\"===s.dtype){const t=n.bufferSync(d),e=n.bufferSync(h),r=tL(e,t,p);return c.forEach((t=>n.disposeIntermediateTensorInfo(t))),n.makeTensorInfo(l.outputShape,r.dtype,r.values)}const f=new mO(h.shape,p),m=n.runWebGLProgram(f,[h,d],h.dtype);c.push(m);const g=mD({inputs:{x:m},backend:n,attrs:{shape:l.outputShape}});return c.forEach((t=>n.disposeIntermediateTensorInfo(t))),g}const yO={kernelName:on,backendName:\"webgl\",kernelFunc:gO},xO=lD({opSnippet:\"return float(a > b);\",packedOpSnippet:\"\\n  return vec4(greaterThan(a, b));\\n\",cpuKernelImpl:eL,dtype:\"bool\"}),bO={kernelName:un,backendName:\"webgl\",kernelFunc:xO},vO=lD({opSnippet:\"return float(a >= b);\",packedOpSnippet:\"\\n  return vec4(greaterThanEqual(a, b));\\n\",dtype:\"bool\",cpuKernelImpl:nL}),wO={kernelName:cn,backendName:\"webgl\",kernelFunc:vO},SO={kernelName:dn,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n}=t,{input:r}=e;return K$(r,!0,n)}},TO=oD({opSnippet:\"return float(!isnan(x) && !isinf(x));\",dtype:\"bool\"}),_O={kernelName:fn,backendName:\"webgl\",kernelFunc:TO},MO=oD({opSnippet:\"return float(isinf(x));\",dtype:\"bool\"}),kO={kernelName:mn,backendName:\"webgl\",kernelFunc:MO},EO=oD({opSnippet:\"return float(isnan(x));\",dtype:\"bool\"}),IO={kernelName:gn,backendName:\"webgl\",kernelFunc:EO},CO=lD({opSnippet:\"return float(a < b);\",packedOpSnippet:\"\\n  return vec4(lessThan(a, b));\\n\",cpuKernelImpl:rL,dtype:\"bool\"}),NO={kernelName:xn,backendName:\"webgl\",kernelFunc:CO},AO=lD({opSnippet:\"return float(a <= b);\",packedOpSnippet:\"\\n  return vec4(lessThanEqual(a, b));\\n\",cpuKernelImpl:sL,dtype:\"bool\"}),RO={kernelName:bn,backendName:\"webgl\",kernelFunc:AO},LO={kernelName:vn,backendName:\"webgl\",kernelFunc:function(t){const{backend:e,attrs:n}=t,{start:r,stop:s,num:i}=n,a=iL(r,s,i);return e.makeTensorInfo([a.length],\"float32\",a)}},DO=oD({opSnippet:\"if (x < 0.0) return NAN;\\n  return log(x);\",packedOpSnippet:\"\\n  vec4 result = log(x);\\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\\n\\n  return result;\\n\",cpuKernelImpl:aL}),FO={kernelName:wn,backendName:\"webgl\",kernelFunc:DO},$O=oD({opSnippet:\"return log(1.0 + x);\"}),OO={kernelName:Sn,backendName:\"webgl\",kernelFunc:$O},PO=lD({opSnippet:\"return float(a >= 1.0 && b >= 1.0);\",packedOpSnippet:\"\\n  return vec4(\\n    vec4(greaterThanEqual(a, vec4(1.0))) *\\n    vec4(greaterThanEqual(b, vec4(1.0))));\\n\",dtype:\"bool\"}),zO={kernelName:Tn,backendName:\"webgl\",kernelFunc:PO},BO=oD({opSnippet:\"return float(!(x >= 1.0));\"}),UO={kernelName:_n,backendName:\"webgl\",kernelFunc:BO},VO=lD({opSnippet:\"return float(a >= 1.0 || b >= 1.0);\",packedOpSnippet:\"\\n  return min(\\n    vec4(greaterThanEqual(a, vec4(1.0))) +\\n    vec4(greaterThanEqual(b, vec4(1.0))),\\n    vec4(1.0));\\n\",dtype:\"bool\"}),WO={kernelName:Mn,backendName:\"webgl\",kernelFunc:VO};class GO{constructor(t,e,n,r,s){this.variableNames=[\"x\"],this.outputShape=[];const i=e,a=t[3]-1;let o;this.outputShape=t;const l=`float(${n}) + float(${r}) * sum`;o=.5===s?`inversesqrt(${l})`:1===s?`1.0/(${l})`:`exp(log(${l}) * float(-${s}));`,this.userCode=`\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int r = coords[1];\\n        int c = coords[2];\\n        int d = coords[3];\\n        float x = getX(b, r, c, d);\\n        float sum = 0.0;\\n        for (int j = -${i}; j <= ${i}; j++) {\\n          int idx = d + j;\\n          if (idx >= 0 && idx <=  ${a}) {\\n            float z = getX(b, r, c, idx);\\n            sum += z * z;\\n          }\\n        }\\n        float val = x * ${o};\\n        setOutput(val);\\n      }\\n    `}}class HO{constructor(t,e,n,r,s){this.variableNames=[\"x\"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const i=e,a=t[3]-1;let o;this.outputShape=t;const l=`float(${n}) + float(${r}) * sum`;o=.5===s?`inversesqrt(${l})`:1===s?`1.0/(${l})`:`exp(log(${l}) * float(-${s}));`,this.userCode=`\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords.x;\\n        int r = coords.y;\\n        int c = coords.z;\\n        int d = coords.w;\\n\\n        bool hasNextCol = d < ${this.outputShape[3]};\\n        bool hasNextRow = c < ${this.outputShape[2]};\\n\\n        vec4 sum = vec4(0.);\\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\\n\\n        vec4 xAtOutputCoords = vec4(\\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\\n          hasNextCol ?\\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\\n          hasNextRow ?\\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\\n          (hasNextRow && hasNextCol) ?\\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\\n        );\\n\\n        int firstChannel = d - ${i};\\n        vec2 cache = vec2(0.);\\n        if(firstChannel >= 0){\\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\\n            if(hasNextRow){\\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\\n            }\\n        }\\n\\n        ivec2 depth = ivec2(d, d + 1);\\n        for (int j = - ${i}; j <= ${i}; j++) {\\n          ivec2 idx = depth + j;\\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${a}));\\n\\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\\n\\n          if(depthInRange || depthPlusOneInRange){\\n            vec4 z = vec4(0.);\\n            vec4 xFragAtCurrentDepth;\\n            z.xz = cache.xy;\\n            if(depthPlusOneInRange && hasNextCol){\\n              xFragAtCurrentDepth = idx.y != d ?\\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\\n              if(hasNextRow){\\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\\n              }\\n            }\\n            cache.xy = z.yw;\\n            sum += z * z;\\n          }\\n        }\\n        vec4 result = xAtOutputCoords * ${o};\\n        setOutput(result);\\n      }\\n    `}}const jO={kernelName:En,backendName:\"webgl\",kernelFunc:t=>{const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{depthRadius:i,bias:a,alpha:o,beta:l}=r,u=jt().getBool(\"WEBGL_PACK_NORMALIZATION\")?new HO(s.shape,i,a,o,l):new GO(s.shape,i,a,o,l);return n.runWebGLProgram(u,[s],s.dtype)}};class qO{constructor(t,e,n,r,s){this.variableNames=[\"inputImage\",\"outputImage\",\"dy\"],this.outputShape=[],this.outputShape=t,this.depth=t[3],this.depthRadius=e,this.bias=n,this.alpha=r,this.beta=s,this.userCode=`\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int r = coords[1];\\n        int c = coords[2];\\n\\n        float result = 0.0;\\n        for (int d = 0; d < ${this.depth}; ++d) {\\n          int depthBegin = int(max(0.0, float(d - ${e})));\\n          int depthEnd = int(min(float(${this.depth}),\\n              float(d + ${e} + 1)));\\n\\n          const int MIN_DEPTH_BEGIN = 0;\\n          const int MAX_DEPTH_END = ${this.depth};\\n\\n          float norm = 0.0;\\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\\n            if (k < depthBegin){\\n              continue;\\n            }\\n            else if (k >= depthBegin && k < depthEnd) {\\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\\n            }\\n            else {\\n              break;\\n            }\\n          }\\n\\n          norm = float(${r}) * norm + float(${n});\\n\\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\\n            if (k < depthBegin){\\n              continue;\\n            }\\n            else if (k >= depthBegin && k < depthEnd){\\n              float dyi = -2.0 * float(${r})\\n                * float(${s})\\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\\n                / norm;\\n              if (k == d) {\\n                dyi += pow(norm, -1.0 * ${s});\\n              }\\n              if (k == coords[3]) {\\n                dyi *= getDy(b, r, c, d);\\n                result += dyi;\\n              }\\n            }\\n            else {\\n              break;\\n            }\\n          }\\n      }\\n      setOutput(result);\\n      }\\n    `}}const XO={kernelName:In,backendName:\"webgl\",kernelFunc:t=>{const{inputs:e,backend:n,attrs:r}=t,{x:s,y:i,dy:a}=e,{depthRadius:o,bias:l,alpha:u,beta:c}=r,h=new qO(s.shape,o,l,u,c);return n.runWebGLProgram(h,[s,i,a],s.dtype)}};function KO(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{reductionIndices:i,keepDims:a}=r,o=s.shape.length,l=gt(i,s.shape);let u=l;const c=_c(u,o),h=null!=c,d=n.shouldExecuteOnCPU([s]);let p=s;if(h){if(d){const t=n.texData.get(p.dataId).values,e=new Array(o);for(let t=0;t<e.length;t++)e[t]=s.shape[c[t]];const r=NL(t,s.shape,s.dtype,c,e);p=n.makeTensorInfo(e,s.dtype),n.texData.get(p.dataId).values=r}else p=SD(s,c,n);u=kc(u.length,o)}Tc(\"max\",u,o);const[f,m]=wc(p.shape,u);let g,y=f;if(a&&(y=Sc(f,l)),d){const t=n.texData.get(p.dataId).values,e=oL(t,at(m),y,s.dtype);g=n.makeTensorInfo(y,s.dtype),n.texData.get(g.dataId).values=e}else g=function(t,e,n,r){const s=at(e),i=mD({inputs:{x:t},attrs:{shape:[at(t.shape)/s,s]},backend:r}),a=bD(i,t.dtype,\"max\",r),o=mD({inputs:{x:a},attrs:{shape:n},backend:r});return r.disposeIntermediateTensorInfo(i),r.disposeIntermediateTensorInfo(a),o}(p,m,y,n);return h&&n.disposeIntermediateTensorInfo(p),g}const YO={kernelName:Cn,backendName:\"webgl\",kernelFunc:KO},ZO=lD({opSnippet:\"\\n  if (isnan(a)) return a;\\n  if (isnan(b)) return b;\\n\\n  return max(a, b);\\n\",packedOpSnippet:\"\\n  vec4 result = vec4(max(a, b));\\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\\n  \\n  result.r = isNaN.r > 0. ? NAN : result.r;\\n  result.g = isNaN.g > 0. ? NAN : result.g;\\n  result.b = isNaN.b > 0. ? NAN : result.b;\\n  result.a = isNaN.a > 0. ? NAN : result.a;\\n\\n  return result;\\n\",cpuKernelImpl:lL}),JO={kernelName:Nn,backendName:\"webgl\",kernelFunc:ZO},QO={kernelName:An,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e;lR(s,\"maxPool\");const{filterSize:i,strides:a,pad:o,dimRoundingMode:l}=r;nt(eu(a,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '1'`));const u=Hl(s.shape,i,a,1,o,l);if(1===u.filterWidth&&1===u.filterHeight&&lt(u.inShape,u.outShape))return ZL({inputs:{x:s},backend:n});const c=new aF(u,\"max\",!1);return n.runWebGLProgram(c,[s],s.dtype)}},tP={kernelName:Ln,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{filterSize:i,strides:a,pad:o,dataFormat:l,dimRoundingMode:u}=r,c=jl(s.shape,i,a,[1,1,1],o,u,l),h=new oF(c,\"max\",!1);return n.runWebGLProgram(h,[s],s.dtype)}};class eP{constructor(t){this.variableNames=[\"dy\",\"maxPos\"],this.outputShape=t.inShape;const e=t.strideHeight,n=t.strideWidth,r=t.dilationHeight,s=t.effectiveFilterHeight,i=t.effectiveFilterWidth,a=s-1-t.padInfo.top,o=i-1-t.padInfo.left,l=s*i-1;this.userCode=`\\n      const ivec2 pads = ivec2(${a}, ${o});\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n\\n        ivec2 dyRCCorner = coords.yz - pads;\\n        int dyRCorner = dyRCCorner.x;\\n        int dyCCorner = dyRCCorner.y;\\n\\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n        for (int wR = 0; wR < ${s};\\n          wR += ${r}) {\\n          float dyR = float(dyRCorner + wR) / ${e}.0;\\n\\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\\n            continue;\\n          }\\n          int idyR = int(dyR);\\n\\n          for (int wC = 0; wC < ${i}; wC++) {\\n            float dyC = float(dyCCorner + wC) / ${n}.0;\\n\\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\\n                fract(dyC) > 0.0) {\\n              continue;\\n            }\\n            int idyC = int(dyC);\\n\\n            float dyValue = getDy(b, idyR, idyC, d);\\n            int maxPosValue = ${l} - int(getMaxPos(b, idyR, idyC, d));\\n\\n            // Get the current value, check it against the value from the\\n            // position matrix.\\n            int curPosValue = wR * ${i} + wC;\\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\\n\\n            dotProd += dyValue * mask;\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    `}}class nP{constructor(t){this.variableNames=[\"dy\",\"maxPos\"],this.outputShape=t.inShape;const e=t.strideDepth,n=t.strideHeight,r=t.strideWidth,s=t.dilationDepth,i=t.dilationHeight,a=t.dilationWidth,o=t.effectiveFilterDepth,l=t.effectiveFilterHeight,u=t.effectiveFilterWidth,c=o-1-t.padInfo.front,h=l-1-t.padInfo.top,d=u-1-t.padInfo.left,p=o*l*u-1;this.userCode=`\\n      const ivec3 pads = ivec3(${c}, ${h}, ${d});\\n\\n      void main() {\\n        ivec5 coords = getOutputCoords();\\n        int batch = coords.x;\\n        int ch = coords.u;\\n\\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\\n        int dyDCorner = dyCorner.x;\\n        int dyRCorner = dyCorner.y;\\n        int dyCCorner = dyCorner.z;\\n\\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\\n        // dx(xD, xR, xC, ch).\\n        // ? = to be determined. : = across all values in that axis.\\n        float dotProd = 0.0;\\n\\n        for (int wD = 0; wD < ${o};\\n           wD += ${s}) {\\n          float dyD = float(dyDCorner + wD) / ${e}.0;\\n\\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\\n            continue;\\n          }\\n          int idyD = int(dyD);\\n\\n          for (int wR = 0; wR < ${l};\\n              wR += ${i}) {\\n            float dyR = float(dyRCorner + wR) / ${n}.0;\\n\\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\\n                fract(dyR) > 0.0) {\\n              continue;\\n            }\\n            int idyR = int(dyR);\\n\\n            for (int wC = 0; wC < ${u};\\n                wC += ${a}) {\\n              float dyC = float(dyCCorner + wC) / ${r}.0;\\n\\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\\n                  fract(dyC) > 0.0) {\\n                continue;\\n              }\\n              int idyC = int(dyC);\\n\\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\\n              int maxPosValue = ${p} -\\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\\n\\n              // Get the current value, check it against the value from the\\n              // position matrix.\\n              int curPosValue =\\n                  wD * ${l} * ${u} +\\n                  wR * ${u} + wC;\\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\\n\\n              dotProd += dyValue * mask;\\n            }\\n          }\\n        }\\n        setOutput(dotProd);\\n      }\\n    `}}const rP={kernelName:Dn,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{dy:s,input:i}=e,a=i,{filterSize:o,strides:l,pad:u,dimRoundingMode:c}=r,h=jl(a.shape,o,l,[1,1,1],u,c),d=new oF(h,\"max\",!0),p=n.runWebGLProgram(d,[a],a.dtype),f=new nP(h),m=n.runWebGLProgram(f,[s,p],a.dtype);return n.disposeIntermediateTensorInfo(p),m}},sP={kernelName:Rn,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{dy:s,input:i,output:a}=e,o=i;lR([i,a],\"maxPoolGrad\");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=r,d=Hl(o.shape,l,u,1,c,h),p=new aF(d,\"max\",!0),f=n.runWebGLProgram(p,[o],o.dtype),m=new eP(d),g=n.runWebGLProgram(m,[s,f],o.dtype);return n.disposeIntermediateTensorInfo(f),g}},iP={kernelName:Fn,backendName:\"webgl\",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{filterSize:s,strides:i,pad:a,includeBatchInIndex:o}=e,l=n;nt(4===r.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${r.shape.length}.`));const u=[1,1];nt(eu(i,u),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${u}'`));const c=Hl(r.shape,s,i,u,a),[h,d]=function(t,e,n,r){let s=new aF(n,\"max\",!1);const i=r.runWebGLProgram(s,[t],\"float32\");return s=new aF(n,\"max\",!0,!0,e),[i,r.runWebGLProgram(s,[t],\"float32\")]}(r,o,c,l);return[h,d]}},aP={kernelName:$n,backendName:\"webgl\",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{x:r}=t,{keepDims:s,axis:i}=e,a=n,o=r.shape.length,l=gt(i,r.shape);let u=l;const c=_c(u,o),h=null!=c,d=a.shouldExecuteOnCPU([r]),p=[];let f=r;if(h){if(d){const t=a.texData.get(f.dataId).values,e=new Array(o);for(let t=0;t<e.length;t++)e[t]=r.shape[c[t]];const n=NL(t,r.shape,r.dtype,c,e);f=a.makeTensorInfo(e,r.dtype),a.texData.get(f.dataId).values=n}else f=SD(r,c,a);p.push(f),u=kc(u.length,o)}Tc(\"sum\",u,o);const[m,g]=wc(f.shape,u);let y=m;s&&(y=Sc(m,l));const x=function(t,e,n,r){const s=at(e),i=mD({inputs:{x:t},attrs:{shape:[at(t.shape)/s,s]},backend:r}),a=bD(i,\"float32\",\"mean\",r),o=mD({inputs:{x:a},attrs:{shape:n},backend:r});return r.disposeIntermediateTensorInfo(i),r.disposeIntermediateTensorInfo(a),o}(f,g,y,a);for(const t of p)a.disposeIntermediateTensorInfo(t);return x}},oP={kernelName:On,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{axis:i,keepDims:a}=r,o=s.shape.length,l=gt(i,s.shape);let u=l;const c=_c(u,o);let h=s;null!=c&&(h=MD({inputs:{x:s},backend:n,attrs:{perm:c}}),u=kc(u.length,s.shape.length)),Tc(\"min\",u,o);const[d,p]=wc(h.shape,u),f=mD({inputs:{x:h},backend:n,attrs:{shape:[-1,at(p)]}}),m=bD(f,f.dtype,\"min\",n);let g;return g=mD(a?{inputs:{x:m},backend:n,attrs:{shape:Sc(d,l)}}:{inputs:{x:m},backend:n,attrs:{shape:d}}),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),g}},lP=lD({opSnippet:\"\\n  if (isnan(a)) return a;\\n  if (isnan(b)) return b;\\n\\n  return min(a, b);\\n\",packedOpSnippet:\"\\n  vec4 result = vec4(min(a, b));\\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\\n  \\n  result.r = isNaN.r > 0. ? NAN : result.r;\\n  result.g = isNaN.g > 0. ? NAN : result.g;\\n  result.b = isNaN.b > 0. ? NAN : result.b;\\n  result.a = isNaN.a > 0. ? NAN : result.a;\\n\\n  return result;\\n\",cpuKernelImpl:uL}),uP={kernelName:Pn,backendName:\"webgl\",kernelFunc:lP};class cP{constructor(t,e,n){this.variableNames=[\"x\"],this.outputShape=e.map(((e,n)=>e[0]+t[n]+e[1]));const r=t.length,s=MR(r),i=e.map((t=>t[0])).join(\",\"),a=e.map(((e,n)=>e[0]+t[n])).join(\",\"),o=[\"coords[0]\",\"coords[1]\",\"coords[2]\",\"coords[3]\"].slice(0,r),l=\"reflect\"===n?0:1;this.userCode=1!==r?`\\n      ${s} start = ${s}(${i});\\n      ${s} end = ${s}(${a});\\n\\n      void main() {\\n        ${s} outC = getOutputCoords();\\n        for (int i = 0; i < ${r}; i++) {\\n          if (outC[i] < start[i]) {\\n            outC[i] = start[i] * 2 - outC[i] - ${l};\\n          } else if(outC[i] >= end[i]) {\\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${l};\\n          }\\n        }\\n        ${s} coords = outC - start;\\n        setOutput(getX(${o}));\\n      }\\n    `:`\\n        int start = ${i};\\n        int end = ${a};\\n\\n        void main() {\\n          int outC = getOutputCoords();\\n          if (outC < start) {\\n            outC = start * 2 - outC - ${l};\\n          } else if(outC >= end) {\\n            outC = (end - 1) * 2 - outC + ${l};\\n          }\\n          setOutput(getX(outC - start));\\n        }\\n      `}}class hP{constructor(t,e,n){this.variableNames=[\"x\"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.map(((e,n)=>e[0]+t[n]+e[1]));const r=t.length,s=MR(r),i=e.map((t=>t[0])).join(\",\"),a=e.map(((e,n)=>e[0]+t[n])).join(\",\"),o=LL(\"rc\",r),l=LL(\"source\",r),u=`${o[r-1]} < ${this.outputShape[r-1]}`,c=1===r?\"source\":`vec2(${l.slice(-2).join()})`,h=\"reflect\"===n?0:1;let d=\"\";if(1===r){const t=`\\n        ${s} source = rc;\\n        if (source < start) {\\n          source = start * 2 - source - ${h};\\n        } else if (source >= end) {\\n          source = (end - 1) * 2 - source + ${h};\\n        }\\n        source -= start;\\n      `;d=`\\n        ${s} rc = outputLoc;\\n        ${t}\\n        result[0] = getChannel(getX(${l.join()}), ${c});\\n        ${o[r-1]} += 1;\\n        if(${u}) {\\n          ${t}\\n          result[1] = getChannel(getX(${l.join()}), ${c});\\n        }\\n      `}else{const t=`\\n        ${s} source = rc;\\n        ${s} lt = ${s}(lessThan(source, start));\\n        ${s} gte = ${s}(greaterThanEqual(source, end));\\n        ${s} orig = 1 - (lt + gte);\\n        source = orig * source +\\n                lt * (start * 2 - source - ${h}) +\\n                gte * ((end - 1) * 2 - source + ${h});\\n        source -= start;\\n      `;d=`\\n        ${s} rc = outputLoc;\\n        ${t}\\n        result[0] = getChannel(getX(${l.join()}), ${c});\\n        ${o[r-1]} += 1;\\n        if(${u}) {\\n          ${t}\\n          result[1] = getChannel(getX(${l.join()}), ${c});\\n        }\\n        rc = outputLoc;\\n        ${o[r-2]} += 1;\\n        if(${o[r-2]} < ${this.outputShape[r-2]}) {\\n          ${t}\\n          result[2] = getChannel(getX(${l.join()}), ${c});\\n          ${o[r-1]} += 1;\\n          if(${u}) {\\n            ${t}\\n            result[3] = getChannel(getX(${l.join()}), ${c});\\n          }\\n        }\\n      `}this.userCode=`\\n      const ${s} start = ${s}(${i});\\n      const ${s} end = ${s}(${a});\\n\\n      void main() {\\n        ${s} outputLoc = getOutputCoords();\\n        vec4 result = vec4(0.);\\n        ${d}\\n        setOutput(result);\\n      }\\n    `}}const dP={kernelName:zn,backendName:\"webgl\",kernelFunc:({inputs:t,backend:e,attrs:n})=>{const{x:r}=t,{paddings:s,mode:i}=n,a=jt().getBool(\"WEBGL_PACK_ARRAY_OPERATIONS\")?new hP(r.shape,s,i):new cP(r.shape,s,i);return e.runWebGLProgram(a,[r],r.dtype)}},pP=lD({opSnippet:\"if (b == 0.0) return NAN;\\n  return mod(a, b);\",packedOpSnippet:\"\\n  vec4 result = mod(a, b);\\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\\n  \\n  result.r = isNaN.r > 0. ? NAN : result.r;\\n  result.g = isNaN.g > 0. ? NAN : result.g;\\n  result.b = isNaN.b > 0. ? NAN : result.b;\\n  result.a = isNaN.a > 0. ? NAN : result.a;\\n\\n  return result;\\n\"}),fP={kernelName:Bn,backendName:\"webgl\",kernelFunc:pP};class mP{constructor(t,e,n){this.variableNames=[\"probs\"],this.customUniforms=[{name:\"seed\",type:\"float\"}],this.outputShape=[t,n],this.userCode=`\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int batch = coords[0];\\n\\n        float r = random(seed);\\n        float cdf = 0.0;\\n\\n        for (int i = 0; i < ${e-1}; i++) {\\n          cdf += getProbs(batch, i);\\n\\n          if (r < cdf) {\\n            setOutput(float(i));\\n            return;\\n          }\\n        }\\n\\n        // If no other event happened, last event happened.\\n        setOutput(float(${e-1}));\\n      }\\n    `}}const gP=lD({opSnippet:\"\\nif (a == b) {\\n  return 1.0;\\n};\\nreturn a / b;\",packedOpSnippet:\"\\n  // vec4 one = vec4(equal(a, b));\\n  // return one + (vec4(1.0) - one) * a / b;\\n  vec4 result = a / b;\\n  if(a.x == b.x) {\\n    result.x = 1.;\\n  }\\n  if(a.y == b.y) {\\n    result.y = 1.;\\n  }\\n  if(a.z == b.z) {\\n    result.z = 1.;\\n  }\\n  if(a.w == b.w) {\\n    result.w = 1.;\\n  }\\n\\n  return result;\\n\",checkOutOfBounds:!0}),yP={kernelName:He,backendName:\"webgl\",kernelFunc:gP},xP=\"return a - b;\",bP=lD({opSnippet:xP,packedOpSnippet:xP,supportsComplex:!0,cpuKernelImpl:EL}),vP={kernelName:Br,backendName:\"webgl\",kernelFunc:bP};function wP(t){const{inputs:e,backend:n,attrs:r}=t,{logits:s}=e,{dim:i}=r,a=gt([i],s.shape),o=KO({inputs:{x:s},backend:n,attrs:{reductionIndices:a,keepDims:!1}}),l=Sc(o.shape,a),u=mD({inputs:{x:o},backend:n,attrs:{shape:l}}),c=bP({inputs:{a:s,b:u},backend:n}),h=U$({inputs:{x:c},backend:n}),d=TD({inputs:{x:h},backend:n,attrs:{axis:a,keepDims:!1}}),p=mD({inputs:{x:d},backend:n,attrs:{shape:l}}),f=gP({inputs:{a:h,b:p},backend:n});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(p),f}const SP={kernelName:Ir,backendName:\"webgl\",kernelFunc:wP},TP={kernelName:Un,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{logits:s}=e,{numSamples:i,seed:a,normalized:o}=r,l=o?s:wP({inputs:{logits:s},backend:n,attrs:{dim:s.shape.length-1}}),u=l.shape[0],c=l.shape[1],h=new mP(u,c,i),d=[[a]],p=n.runWebGLProgram(h,[l],\"int32\",d);return o||n.disposeIntermediateTensorInfo(l),p}},_P=\"return -x;\",MP={kernelName:Wn,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n}=t,{x:r}=e;if(n.shouldExecuteOnCPU([r])){const t=n.texData.get(r.dataId),[e,s]=hL(t.values,r.shape,r.dtype);return n.makeTensorInfo(s,r.dtype,e)}let s;return s=jt().getBool(\"WEBGL_PACK_UNARY_OPERATIONS\")?new WL(r.shape,_P):new BL(r.shape,_P),n.runWebGLProgram(s,[r],r.dtype)}},kP=Pd,EP={kernelName:Hn,backendName:\"webgl\",kernelFunc:function(t){Vt(\"tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead\");const{inputs:e,backend:n,attrs:r}=t,{boxes:s,scores:i}=e,{maxOutputSize:a,iouThreshold:o,scoreThreshold:l}=r,u=n.readSync(s.dataId),c=n.readSync(i.dataId),{selectedIndices:h}=kP(u,c,a,o,l);return n.makeTensorInfo([h.length],\"int32\",new Int32Array(h))}},IP=zd,CP={kernelName:jn,backendName:\"webgl\",kernelFunc:function(t){Vt(\"tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead\");const{inputs:e,backend:n,attrs:r}=t,{boxes:s,scores:i}=e,{maxOutputSize:a,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=r,c=n.readSync(s.dataId),h=n.readSync(i.dataId),{selectedIndices:d,validOutputs:p}=IP(c,h,a,o,l,u);return[n.makeTensorInfo([d.length],\"int32\",new Int32Array(d)),n.makeTensorInfo([],\"int32\",new Int32Array([p]))]}},NP=Bd,AP={kernelName:qn,backendName:\"webgl\",kernelFunc:function(t){Vt(\"tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead\");const{inputs:e,backend:n,attrs:r}=t,{boxes:s,scores:i}=e,{maxOutputSize:a,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=r,c=n.readSync(s.dataId),h=n.readSync(i.dataId),d=a,p=o,f=l,m=u,{selectedIndices:g,selectedScores:y}=NP(c,h,d,p,f,m);return[n.makeTensorInfo([g.length],\"int32\",new Int32Array(g)),n.makeTensorInfo([y.length],\"float32\",new Float32Array(y))]}};class RP{constructor(t,e,n,r){this.variableNames=[\"indices\"],this.outputShape=[t,e],this.userCode=`\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int index = round(getIndices(coords.x));\\n        setOutput(mix(float(${r}), float(${n}),\\n                      float(index == coords.y)));\\n      }\\n    `}}const LP={kernelName:Kn,backendName:\"webgl\",kernelFunc:t=>{const{inputs:e,backend:n,attrs:r}=t,{indices:s}=e,{depth:i,onValue:a,offValue:o}=r,l=at(s.shape),u=new RP(l,i,a,o),c=mD({inputs:{x:s},backend:n,attrs:{shape:[l]}}),h=n.runWebGLProgram(u,[c],s.dtype);n.disposeIntermediateTensorInfo(c);const d=mD({inputs:{x:h},backend:n,attrs:{shape:[...s.shape,i]}});return n.disposeIntermediateTensorInfo(h),d}};function DP(t){const{inputs:e,backend:n}=t,{x:r}=e;if(\"complex64\"===r.dtype){const t=EF({inputs:{input:r},backend:n}),e=DP({inputs:{x:t},backend:n}),s=VF({inputs:{input:r},backend:n}),i=DP({inputs:{x:s},backend:n}),a=QL({inputs:{real:e,imag:i},backend:n});return n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(i),a}return J$({attrs:{shape:r.shape,dtype:r.dtype,value:\"string\"===r.dtype?\"\":0},backend:n})}const FP={kernelName:Yr,backendName:\"webgl\",kernelFunc:DP},$P={kernelName:Xn,backendName:\"webgl\",kernelFunc:function t(e){const{inputs:n,backend:r}=e,{x:s}=n;if(\"string\"===s.dtype)throw new Error(\"onesLike is not supported under string dtype\");if(\"complex64\"===s.dtype){const e=EF({inputs:{input:s},backend:r}),n=t({inputs:{x:e},backend:r}),i=VF({inputs:{input:s},backend:r}),a=DP({inputs:{x:i},backend:r}),o=QL({inputs:{real:n,imag:a},backend:r});return r.disposeIntermediateTensorInfo(e),r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(i),r.disposeIntermediateTensorInfo(a),o}return J$({attrs:{shape:s.shape,dtype:s.dtype,value:1},backend:r})}},OP={kernelName:Yn,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{axis:s}=r;if(1===e.length)return W$({inputs:{input:e[0]},backend:n,attrs:{dim:s}});const i=e[0].shape,a=e[0].dtype;e.forEach((t=>{rt(i,t.shape,\"All tensors passed to stack must have matching shapes\"),nt(a===t.dtype,(()=>\"All tensors passed to stack must have matching dtypes\"))}));const o=[],l=HF({inputs:e.map((t=>{const e=W$({inputs:{input:t},backend:n,attrs:{dim:s}});return o.push(e),e})),backend:n,attrs:{axis:s}});return o.forEach((t=>n.disposeIntermediateTensorInfo(t))),l}};class PP{constructor(t,e,n){this.variableNames=[\"x\"],this.customUniforms=[{name:\"value\",type:\"float\"}],this.outputShape=e.map(((e,n)=>e[0]+t[n]+e[1]));const r=t.length,s=MR(r),i=e.map((t=>t[0])).join(\",\"),a=e.map(((e,n)=>e[0]+t[n])).join(\",\"),o=[\"coords[0]\",\"coords[1]\",\"coords[2]\",\"coords[3]\"].slice(0,r);this.userCode=1!==r?`\\n      ${s} start = ${s}(${i});\\n      ${s} end = ${s}(${a});\\n\\n      void main() {\\n        ${s} outC = getOutputCoords();\\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\\n          setOutput(value);\\n        } else {\\n          ${s} coords = outC - start;\\n          setOutput(getX(${o}));\\n        }\\n      }\\n    `:`\\n        int start = ${i};\\n        int end = ${a};\\n\\n        void main() {\\n          int outC = getOutputCoords();\\n          if (outC < start || outC >= end) {\\n            setOutput(value);\\n          } else {\\n            setOutput(getX(outC - start));\\n          }\\n        }\\n      `}}class zP{constructor(t,e,n){this.variableNames=[\"x\"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:\"value\",type:\"float\"}],this.outputShape=e.map(((e,n)=>e[0]+t[n]+e[1]));const r=t.length,s=MR(r),i=e.map((t=>t[0])).join(\",\"),a=e.map(((e,n)=>e[0]+t[n])).join(\",\"),o=LL(\"rc\",r),l=LL(\"source\",r),u=`${o[r-1]} < ${this.outputShape[r-1]}`,c=1===r?\"source\":`vec2(${l.slice(-2).join()})`,h=[`${s} rc = outputLoc;`,`${o[r-1]} += 1;\\n       if(${u}) {\\n      `,1===r?\"\":`}\\n       rc = outputLoc;\\n       ${o[r-2]} += 1;\\n       if(${o[r-2]} < ${this.outputShape[r-2]}) {`,1===r?\"\":`  ${o[r-1]} += 1;\\n         if(${u}) {`],d=1===r?\"rc < start || rc >= end\":\"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))\";let p=\"\";for(let t=0,e=1===r?2:4;t<e;t++)p+=`\\n        ${h[t]}\\n        if (${d}) {\\n          result[${t}] = float(value);\\n        } else {\\n          ${s} source = rc - start;\\n          result[${t}] = getChannel(getX(${l.join()}), ${c});\\n        }\\n      `;p+=1===r?\"} \":\"}}\",this.userCode=`\\n      const ${s} start = ${s}(${i});\\n      const ${s} end = ${s}(${a});\\n\\n      void main() {\\n        ${s} outputLoc = getOutputCoords();\\n        vec4 result = vec4(0.);\\n        ${p}\\n        setOutput(result);\\n      }\\n    `}}const BP=t=>{const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{paddings:i,constantValue:a}=r;if(0===at(s.shape))return J$({backend:n,attrs:{shape:i.map(((t,e)=>t[0]+s.shape[e]+t[1])),value:a,dtype:s.dtype}});const o=jt().getBool(\"WEBGL_PACK_ARRAY_OPERATIONS\")?new zP(s.shape,i,a):new PP(s.shape,i,a),l=[[a]];return n.runWebGLProgram(o,[s],s.dtype,l)},UP={kernelName:Zn,backendName:\"webgl\",kernelFunc:BP},VP=lD({opSnippet:\"\\n  if(a < 0.0 && floor(b) < b){\\n    return NAN;\\n  }\\n  if (b == 0.0) {\\n    return 1.0;\\n  }\\n  return (round(mod(b, 2.0)) != 1) ?\\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\\n\",packedOpSnippet:\"\\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\\n  vec4 result = multiplier * pow(abs(a), b);\\n\\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\\n  bvec4 isExpZero = equal(b, vec4(0.0));\\n  result.r = isExpZero.r ? 1.0 : result.r;\\n  result.g = isExpZero.g ? 1.0 : result.g;\\n  result.b = isExpZero.b ? 1.0 : result.b;\\n  result.a = isExpZero.a ? 1.0 : result.a;\\n\\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\\n  \\n  result.r = isNaN.r > 0. ? NAN : result.r;\\n  result.g = isNaN.g > 0. ? NAN : result.g;\\n  result.b = isNaN.b > 0. ? NAN : result.b;\\n  result.a = isNaN.a > 0. ? NAN : result.a;\\n\\n  return result;\\n\"}),WP={kernelName:Qn,backendName:\"webgl\",kernelFunc:VP},GP={kernelName:er,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{axis:i,keepDims:a}=r,o=s.shape.length,l=[],u=gt(i,s.shape);let c=u;const h=_c(c,o);let d,p=s;if(null!=h&&(p=MD({inputs:{x:s},backend:n,attrs:{perm:h}}),c=kc(c.length,o),l.push(p)),Tc(\"prod\",c,o),n.shouldExecuteOnCPU([p])){const t=n.texData.get(p.dataId).values,{outVals:e,outShape:r,outDtype:s}=pL(p.shape,p.dtype,t,c);d=n.makeTensorInfo(r,s,e)}else{const[t,e]=wc(p.shape,c),r=at(e),i=mD({inputs:{x:p},backend:n,attrs:{shape:[-1,r]}}),a=bD(i,ni(s.dtype),\"prod\",n);d=mD({inputs:{x:a},backend:n,attrs:{shape:t}}),l.push(i),l.push(a)}if(a){l.push(d);const t=Sc(d.shape,u);d=mD({inputs:{x:d},backend:n,attrs:{shape:t}})}return l.forEach((t=>n.disposeIntermediateTensorInfo(t))),d}},HP=t=>{const{backend:e,attrs:n}=t,{start:r,stop:s,step:i,dtype:a}=n,o=fL(r,s,i,a);return e.makeTensorInfo([o.length],a,o)},jP={kernelName:nr,backendName:\"webgl\",kernelFunc:HP},qP=oD({opSnippet:\"return 1.0 / x;\"}),XP={kernelName:sr,backendName:\"webgl\",kernelFunc:qP},KP=oD({opSnippet:\"if (isnan(x)) return x;\\n  return (x < 0.0) ? 0.0 : x;\\n\",packedOpSnippet:\"\\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\\n  bvec4 isNaN = isnan(x);\\n\\n  result.r = isNaN.r ? x.r : result.r;\\n  result.g = isNaN.g ? x.g : result.g;\\n  result.b = isNaN.b ? x.b : result.b;\\n  result.a = isNaN.a ? x.a : result.a;\\n\\n  return result;\\n\"}),YP={kernelName:ir,backendName:\"webgl\",kernelFunc:KP},ZP=oD({opSnippet:\"if (isnan(x)) return x;\\n  return (x < 0.0) ? 0.0 : min(6.0, x);\\n\",packedOpSnippet:\"\\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\\n  bvec4 isNaN = isnan(x);\\n\\n  result.r = isNaN.r ? x.r : result.r;\\n  result.g = isNaN.g ? x.g : result.g;\\n  result.b = isNaN.b ? x.b : result.b;\\n  result.a = isNaN.a ? x.a : result.a;\\n\\n  return result;\\n\"}),JP={kernelName:hr,backendName:\"webgl\",kernelFunc:ZP};class QP{constructor(t,e,n,r,s){this.variableNames=[\"A\"],this.outputShape=[];const[i,a,o,l]=t;this.outputShape=[i,e,n,l];const u=[r&&e>1?a-1:a,r&&n>1?o-1:o],c=[r&&e>1?e-1:e,r&&n>1?n-1:n];let h;h=s?\"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)\":\"vec2(yRC) * effectiveInputOverOutputRatioRC\",this.userCode=`\\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\\n          ${u[0]/c[0]},\\n          ${u[1]/c[1]});\\n      const vec2 inputShapeRC = vec2(${a}.0, ${o}.0);\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        ivec2 yRC = coords.yz;\\n\\n        // Fractional source index.\\n        vec2 sourceFracIndexRC = ${h};\\n\\n        // Compute the four integer indices.\\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\\n        ivec2 sourceCeilRC = ivec2(\\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\\n\\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\\n\\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\\n\\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\\n        float newValue = top + (bottom - top) * fracRC.x;\\n\\n        setOutput(newValue);\\n      }\\n    `}}class tz{constructor(t,e,n,r,s){this.variableNames=[\"A\"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[i,a,o,l]=t;this.outputShape=[i,e,n,l];const u=[r&&e>1?a-1:a,r&&n>1?o-1:o],c=[r&&e>1?e-1:e,r&&n>1?n-1:n];let h;h=s?\"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)\":\"vec3(yRC) * effectiveInputOverOutputRatioRC\",this.userCode=`\\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\\n          ${u[0]/c[0]},\\n          ${u[1]/c[1]},\\n          ${u[1]/c[1]});\\n      const vec3 inputShapeRC = vec3(${a}.0, ${o}.0,\\n                                     ${o}.0);\\n\\n      float getAValue(int b, int r, int c, int d) {\\n        return getChannel(getA(b, r, c, d), vec2(c, d));\\n      }\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        // Calculate values for next column in yRC.z.\\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\\n\\n        // Fractional source index.\\n        vec3 sourceFracIndexRC = ${h};\\n\\n        // Compute the four integer indices.\\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\\n        ivec3 sourceCeilRC = ivec3(\\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\\n\\n        // Should we calculate next column and row elements in 2x2 packed cell.\\n        bool hasNextCol = d < ${l-1};\\n        bool hasNextRow = coords.z < ${n-1};\\n\\n        // In parallel, construct four corners for all four components in\\n        // packed 2x2 cell.\\n        vec4 topLeft = vec4(\\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\\n                     : 0.0,\\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\\n                     : 0.0,\\n          (hasNextRow && hasNextCol) ?\\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\\n\\n        vec4 bottomLeft = vec4(\\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\\n                     : 0.0,\\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\\n                     : 0.0,\\n          (hasNextRow && hasNextCol) ?\\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\\n\\n        vec4 topRight = vec4(\\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\\n                     : 0.0,\\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\\n                     : 0.0,\\n          (hasNextRow && hasNextCol) ?\\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\\n\\n        vec4 bottomRight = vec4(\\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\\n                     : 0.0,\\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\\n                     : 0.0,\\n          (hasNextRow && hasNextCol) ?\\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\\n\\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\\n\\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\\n        vec4 newValue = mix(top, bottom, fracRC.x);\\n\\n        setOutput(newValue);\\n      }\\n    `}}const ez={kernelName:ur,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{images:s}=e,{alignCorners:i,halfPixelCenters:a,size:o}=r,[l,u]=o,c=jt().getBool(\"WEBGL_PACK_IMAGE_OPERATIONS\")?new tz(s.shape,l,u,i,a):new QP(s.shape,l,u,i,a);return n.runWebGLProgram(c,[s],\"float32\")}};class nz{constructor(t,e,n){this.variableNames=[\"dy\"],this.outputShape=[],this.outputShape=e;const[,r,s]=e,[,i,a]=t,o=[n&&i>1?r-1:r,n&&a>1?s-1:s],l=[n&&i>1?i-1:i,n&&a>1?a-1:a],u=o[0]/l[0],c=o[1]/l[1],h=1/u,d=1/c,p=2*Math.ceil(h)+2,f=2*Math.ceil(d)+2;this.userCode=`\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        int r = coords[1];\\n        int c = coords[2];\\n\\n        float accumulator = 0.0;\\n\\n        const float heightScale = float(${u});\\n        const float widthScale = float(${c});\\n\\n        const float invHeightScale = float(${h});\\n        const float invWidthScale = float(${d});\\n\\n        const int winHeight = int(${p});\\n        const int winWidth = int(${f});\\n\\n        // Compute bounds for where in dy we will look\\n        float startRLerp = floor(float(r) * invHeightScale);\\n        int startDyR = int(startRLerp - float(winHeight / 2));\\n\\n        float startCLerp = floor(float(c) * invWidthScale);\\n        int startDyC = int(startCLerp - float(winWidth / 2));\\n\\n        // Loop over dy\\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\\n          int dyR = dyROffset + startDyR;\\n\\n          // Guard against the window exceeding the bounds of dy\\n          if (dyR < 0 || dyR >= ${i}) {\\n            continue;\\n          }\\n\\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\\n            int dyC = dyCOffset + startDyC;\\n\\n            // Guard against the window exceeding the bounds of dy\\n            if (dyC < 0 || dyC >= ${a}) {\\n              continue;\\n            }\\n\\n            float dxR = float(dyR) * heightScale;\\n            int topDxRIndex = int(floor(dxR));\\n            int bottomDxRIndex = int(min(ceil(dxR), ${r-1}.0));\\n            float dxRLerp = dxR - float(topDxRIndex);\\n            float inverseDxRLerp = 1.0 - dxRLerp;\\n\\n            float dxC = float(dyC) * widthScale;\\n            int leftDxCIndex = int(floor(dxC));\\n            int rightDxCIndex = int(min(ceil(dxC), ${s-1}.0));\\n            float dxCLerp = dxC - float(leftDxCIndex);\\n            float inverseDxCLerp = 1.0 - dxCLerp;\\n\\n            if (r == topDxRIndex && c == leftDxCIndex) {\\n              // topLeft\\n              accumulator +=\\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\\n            }\\n\\n            if (r == topDxRIndex && c == rightDxCIndex) {\\n              // topRight\\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\\n            }\\n\\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\\n              // bottomLeft\\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\\n            }\\n\\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\\n              // bottomRight\\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\\n            }\\n          }\\n        }\\n        // End loop over dy\\n\\n        setOutput(accumulator);\\n      }\\n    `}}const rz={kernelName:cr,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{images:s,dy:i}=e,{alignCorners:a}=r,o=new nz(i.shape,s.shape,a);return n.runWebGLProgram(o,[i],i.dtype)}};class sz{constructor(t,e,n,r,s){this.variableNames=[\"A\"],this.outputShape=[];const[i,a,o,l]=t;this.outputShape=[i,e,n,l];const u=[r&&e>1?a-1:a,r&&n>1?o-1:o],c=[r&&e>1?e-1:e,r&&n>1?n-1:n],h=r?\"0.5\":\"0.0\";let d;d=s?\"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))\":\"vec2(yRC) * effectiveInputOverOutputRatioRC\",this.userCode=`\\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\\n          ${u[0]/c[0]},\\n          ${u[1]/c[1]});\\n      const vec2 inputShapeRC = vec2(${a}.0, ${o}.0);\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        ivec2 yRC = coords.yz;\\n\\n        // Fractional source index.\\n        vec2 sourceFracIndexRC = ${d};\\n\\n        // Compute the coordinators of nearest neighbor point.\\n        ivec2 sourceNearestRC = ivec2(\\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));\\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\\n\\n        setOutput(newValue);\\n      }\\n    `}}class iz{constructor(t,e,n,r,s){this.variableNames=[\"A\"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[i,a,o,l]=t;this.outputShape=[i,e,n,l];const u=[r&&e>1?a-1:a,r&&n>1?o-1:o],c=[r&&e>1?e-1:e,r&&n>1?n-1:n],h=r?\"0.5\":\"0.0\";let d;d=s?\"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))\":\"vec3(yRC) * effectiveInputOverOutputRatioRC\",this.userCode=`\\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\\n          ${u[0]/c[0]},\\n          ${u[1]/c[1]},\\n          ${u[1]/c[1]});\\n      const vec3 inputShapeRC = vec3(${a}.0, ${o}.0,\\n                                     ${o}.0);\\n\\n      float getAValue(int b, int r, int c, int d) {\\n        return getChannel(getA(b, r, c, d), vec2(c, d));\\n      }\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        // Calculate values for next column in yRC.z.\\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\\n\\n        // Fractional source index.\\n        vec3 sourceFracIndexRC = ${d};\\n\\n        // Compute the coordinators of nearest neighbor point.\\n        ivec3 sourceNearestRC = ivec3(\\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));\\n\\n        // Should we calculate next column and row elements in 2x2 packed cell.\\n        bool hasNextCol = d < ${l-1};\\n        bool hasNextRow = coords.z < ${n-1};\\n\\n        vec4 newValue = vec4(\\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\\n                     : 0.0,\\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\\n                     : 0.0,\\n          (hasNextRow && hasNextCol) ?\\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\\n\\n        setOutput(newValue);\\n      }\\n    `}}const az={kernelName:or,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{images:s}=e,{alignCorners:i,halfPixelCenters:a,size:o}=r,[l,u]=o,c=jt().getBool(\"WEBGL_PACK_IMAGE_OPERATIONS\")?new iz(s.shape,l,u,i,a):new sz(s.shape,l,u,i,a);return n.runWebGLProgram(c,[s],s.dtype)}};class oz{constructor(t,e,n){this.variableNames=[\"dy\"],this.outputShape=[],this.outputShape=e;const[,r,s]=e,[,i,a]=t,o=[n&&i>1?r-1:r,n&&a>1?s-1:s],l=[n&&i>1?i-1:i,n&&a>1?a-1:a],u=o[0]/l[0],c=o[1]/l[1],h=1/u,d=1/c,p=2*Math.ceil(h)+2,f=2*Math.ceil(d)+2;this.userCode=`\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        int r = coords[1];\\n        int c = coords[2];\\n\\n        float accumulator = 0.0;\\n\\n        const float heightScale = float(${u});\\n        const float widthScale = float(${c});\\n\\n        const float invHeightScale = float(${h});\\n        const float invWidthScale = float(${d});\\n\\n        const int winHeight = int(${p});\\n        const int winWidth = int(${f});\\n\\n        // Compute bounds for where in dy we will look\\n        float startRLerp = floor(float(r) * invHeightScale);\\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\\n\\n        float startCLerp = floor(float(c) * invWidthScale);\\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\\n\\n        // Loop over dy\\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\\n          int dyR = dyROffset + startDyR;\\n\\n          // Guard against the window exceeding the bounds of dy\\n          if (dyR < 0 || dyR >= ${i}) {\\n            continue;\\n          }\\n\\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\\n            int dyC = dyCOffset + startDyC;\\n\\n            // Guard against the window exceeding the bounds of dy\\n            if (dyC < 0 || dyC >= ${a}) {\\n              continue;\\n            }\\n\\n            float sourceFracRow =\\n              float(${o[0]}) *\\n                (float(dyR) / float(${l[0]}));\\n\\n            float sourceFracCol =\\n                float(${o[1]}) *\\n                  (float(dyC) / float(${l[1]}));\\n\\n            int sourceNearestRow = int(min(\\n                float(int(${r}) - 1),\\n                ${n} ? float(round(sourceFracRow)) :\\n                                  float(floor(sourceFracRow))));\\n\\n            int sourceNearestCol = int(min(\\n                float(int(${s}) - 1),\\n                ${n} ? float(round(sourceFracCol)) :\\n                                  float(floor(sourceFracCol))));\\n\\n            if (r == sourceNearestRow && c == sourceNearestCol) {\\n              accumulator += getDy(b, dyR, dyC, d);\\n            }\\n          }\\n        }\\n        // End loop over dy\\n\\n        setOutput(accumulator);\\n      }\\n    `}}const lz={kernelName:lr,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{images:s,dy:i}=e,{alignCorners:a}=r,o=new oz(i.shape,s.shape,a);return n.runWebGLProgram(o,[i],i.dtype)}};class uz{constructor(t,e){this.variableNames=[\"x\"];const n=t.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=t,1===n)return void(this.userCode=`\\n        void main() {\\n          int coord = getOutputCoords();\\n          setOutput(getX(${t[0]} - coord - 1));\\n        }\\n      `);const r=t.map(((n,r)=>(n=>-1!==e.indexOf(n)&&1!==t[n]?`${t[n]} - coords[${n}] - 1`:`coords[${n}]`)(r))).join(\",\"),s=MR(n);this.userCode=`\\n      void main() {\\n        ${s} coords = getOutputCoords();\\n        setOutput(getX(${r}));\\n      }\\n    `}}class cz{constructor(t,e){this.variableNames=[\"x\"],this.packedInputs=!0,this.packedOutput=!0;const n=t.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=t;const r=LL(\"rc\",n),s=`${r[n-1]} + 1 < ${this.outputShape[n-1]}`,i=`${r[n-2]} + 1 < ${this.outputShape[n-2]}`,a=MR(n);function o(n){const r=t.map(((r,s)=>function(n,r){return-1!==e.indexOf(n)&&1!==t[n]?`${t[n]} - ${r[n]} - 1`:`${r[n]}`}(s,n)));return`getChannel(getX(${r.join(\",\")}), vec2(${r.slice(-2).join(\",\")}))`}this.userCode=1===n?`\\n        void main(){\\n          int rc = getOutputCoords();\\n          vec4 result = vec4(0.);\\n          result.r = getChannel(getX(${t[0]} - rc - 1),\\n            ${t[0]} - rc - 1);\\n          if(${s}){\\n              result.g = getChannel(getX(${t[0]} - (rc  + 1) - 1),\\n                ${t[0]} - (rc  + 1) - 1);\\n          }\\n          setOutput(result);\\n        }\\n      `:`\\n        void main() {\\n          ${a} rc = getOutputCoords();\\n          vec4 result = vec4(0.);\\n          result.r = ${function(t){return o(t)}(r.slice())};\\n          if(${s}){\\n            result.g = ${function(t){return t[n-1]=\"(\"+t[n-1]+\" + 1)\",o(t)}(r.slice())};\\n          }\\n          if(${i}) {\\n            result.b = ${function(t){return t[n-2]=\"(\"+t[n-2]+\" + 1)\",o(t)}(r.slice())};\\n            if(${s}) {\\n              result.a = ${function(t){return t[n-1]=\"(\"+t[n-1]+\" + 1)\",t[n-2]=\"(\"+t[n-2]+\" + 1)\",o(t)}(r.slice())};\\n            }\\n          }\\n          setOutput(result);\\n        }\\n    `}}const hz={kernelName:dr,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{dims:i}=r,a=s.shape.length,o=gt(i,s.shape);if(0===a)return ZL({inputs:{x:s},backend:n});const l=jt().getBool(\"WEBGL_PACK_ARRAY_OPERATIONS\")?new cz(s.shape,o):new uz(s.shape,o);return n.runWebGLProgram(l,[s],s.dtype)}};class dz{constructor(t,e){this.variableNames=[\"Image\"],this.outputShape=[],this.customUniforms=[{name:\"params\",type:\"vec4\"}];const n=t[1],r=t[2];this.outputShape=t;let s=\"\";s=\"number\"==typeof e?`float outputValue = ${e.toFixed(2)};`:`\\n        vec3 fill = vec3(${e.join(\",\")});\\n        float outputValue = fill[coords[3]];`,this.userCode=`\\n        void main() {\\n          ivec4 coords = getOutputCoords();\\n          int x = coords[2];\\n          int y = coords[1];\\n          float coordXFloat = (float(x) - params[0]) * params[3] -\\n            (float(y) - params[1]) * params[2];\\n          float coordYFloat = (float(x) - params[0]) * params[2] +\\n            (float(y) - params[1]) * params[3];\\n          int coordX = int(round(coordXFloat + params[0]));\\n          int coordY = int(round(coordYFloat + params[1]));\\n          ${s}\\n          if(coordX >= 0 && coordX < ${r} && coordY >= 0 && coordY < ${n}) {\\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\\n          }\\n          setOutput(outputValue);\\n        }\\n    `}}const pz={kernelName:Qr,backendName:\"webgl\",kernelFunc:({inputs:t,attrs:e,backend:n})=>{const{image:r}=t,{radians:s,fillValue:i,center:a}=e,o=n,l=new dz(r.shape,i),[u,c]=Lp(a,r.shape[1],r.shape[2]),h=[[u,c,Math.sin(s),Math.cos(s)]];return o.runWebGLProgram(l,[r],r.dtype,h)}},fz=oD({opSnippet:\"\\n  // OpenGL ES does not support round function.\\n  // The algorithm is based on banker's rounding.\\n  float base = floor(x);\\n  if ((x - base) < 0.5) {\\n    return floor(x);\\n  } else if ((x - base) > 0.5) {\\n    return ceil(x);\\n  } else {\\n    if (mod(base, 2.0) == 0.0) {\\n      return base;\\n    } else {\\n      return base + 1.0;\\n    }\\n  }\\n\"}),mz={kernelName:pr,backendName:\"webgl\",kernelFunc:fz},gz=oD({opSnippet:\"return inversesqrt(x);\",cpuKernelImpl:mL}),yz={kernelName:fr,backendName:\"webgl\",kernelFunc:gz};class xz{constructor(t,e,n,r,s,i,a=!0){this.variableNames=[\"updates\",\"indices\",\"defaultValue\"],this.outputShape=i;const o=MR(s.length),l=MR(i.length);let u=\"\";1===n?u=\"i\":2===n&&(u=\"i, j\");const c=`getIndices(${u})`;let h=\"\";1===r?h=\"i\":2===r&&(h=\"i, coords[1]\");const d=`getUpdates(${h})`,p=e>1?\"strides[j]\":\"strides\";this.userCode=`\\n        ${o} strides = ${o}(${s});\\n\\n        void main() {\\n          ${l} coords = getOutputCoords();\\n          float sum = 0.0;\\n          bool found = false;\\n          for (int i = 0; i < ${t}; i++) {\\n            int flattenedIndex = 0;\\n            for (int j = 0; j < ${e}; j++) {\\n              int index = round(${c});\\n              flattenedIndex += index * ${p};\\n            }\\n            if (flattenedIndex == coords[0]) {\\n              sum += ${d};\\n              found = true;\\n            }\\n          }\\n          setOutput(mix(getDefaultValue(), sum, float(found)));\\n        }\\n      `}}const bz={kernelName:mr,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{indices:s,updates:i}=e,{shape:a}=r,{sliceRank:o,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=eo(0,s,a),d=[h/u,u];if(0===h)return n.makeTensorInfo(a,s.dtype);const p=mD({inputs:{x:s},backend:n,attrs:{shape:[l,o]}}),f=mD({inputs:{x:i},backend:n,attrs:{shape:[l,u]}}),m=n.makeTensorInfo([],\"float32\",new Float32Array([0])),g=new xz(l,o,p.shape.length,f.shape.length,c,d),y=n.runWebGLProgram(g,[f,p,m],f.dtype),x=mD({inputs:{x:y},backend:n,attrs:{shape:a}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(m),x}};class vz{constructor(t,e,n){let r,s;if(this.variableNames=[\"c\",\"a\",\"b\"],this.outputShape=e,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)s=\"resRC\",r=\"resRC\";else{const n=[\"resRC.x\",\"resRC.y\",\"resRC.z\",\"resRC.w\"],i=[],a=[];for(let r=0;r<e.length;r++)a.push(`${n[r]}`),r<t&&i.push(`${n[r]}`);r=i.join(),s=a.join()}const i=MR(n);this.userCode=`\\n      void main() {\\n        ${i} resRC = getOutputCoords();\\n        float cVal = getC(${r});\\n        if (cVal >= 1.0) {\\n          setOutput(getA(${s}));\\n        } else {\\n          setOutput(getB(${s}));\\n        }\\n      }\\n    `}}const wz={kernelName:gr,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n}=t,{condition:r,t:s,e:i}=e,a=new vz(r.shape.length,s.shape,s.shape.length);return n.runWebGLProgram(a,[r,s,i],ei(s.dtype,i.dtype))}},Sz=oD({opSnippet:`\\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\\n  // see: https://arxiv.org/abs/1706.02515\\n  float scaleAlpha = ${zp};\\n  float scale = ${Bp};\\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\\n`}),Tz={kernelName:yr,backendName:\"webgl\",kernelFunc:Sz},_z=\"return 1.0 / (1.0 + exp(-1.0 * x));\",Mz=oD({opSnippet:_z,packedOpSnippet:_z,cpuKernelImpl:gL}),kz={kernelName:Sr,backendName:\"webgl\",kernelFunc:Mz},Ez=oD({opSnippet:\"\\n  if (isnan(x)) { return 0.0; }\\n  return sign(x);\\n\"}),Iz={kernelName:wr,backendName:\"webgl\",kernelFunc:Ez},Cz=oD({opSnippet:\"if (isnan(x)) return x;\\n  return sin(x);\\n\"}),Nz={kernelName:br,backendName:\"webgl\",kernelFunc:Cz},Az=oD({opSnippet:\"\\n  float e2x = exp(x);\\n  return (e2x - 1.0 / e2x) / 2.0;\\n\"}),Rz={kernelName:vr,backendName:\"webgl\",kernelFunc:Az},Lz=oD({opSnippet:\"\\n  float epsilon = 1.1920928955078125e-7;\\n  float threshold = log(epsilon) + 2.0;\\n\\n  bool too_large = x > -threshold;\\n  bool too_small = x < threshold;\\n\\n  float result;\\n  float exp_x = exp(x);\\n\\n  if (too_large){\\n    result = x;\\n  }\\n  else if (too_small){\\n    result = exp_x;\\n  }\\n  else{\\n    result = log(exp_x + 1.0);\\n  }\\n  return result;\\n\"}),Dz={kernelName:Tr,backendName:\"webgl\",kernelFunc:Lz},Fz={kernelName:kr,backendName:\"webgl\",kernelFunc:t=>{const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{blockShape:i,paddings:a}=r;nt(s.shape.length<=4,(()=>\"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet\"));const o=i.reduce(((t,e)=>t*e)),l=[[0,0]];l.push(...a);for(let t=1+i.length;t<s.shape.length;++t)l.push([0,0]);const u=[],c=BP({inputs:{x:s},backend:n,attrs:{paddings:l,constantValue:0}}),h=Dp(c.shape,i,o,!1),d=Fp(h.length,i.length,!1),p=$p(c.shape,i,o,!1),f=mD({inputs:{x:c},backend:n,attrs:{shape:h}}),m=MD({inputs:{x:f},backend:n,attrs:{perm:d}}),g=mD({inputs:{x:m},backend:n,attrs:{shape:p}});return u.push(c),u.push(f),u.push(m),u.forEach((t=>n.disposeIntermediateTensorInfo(t))),g}},$z={kernelName:Cr,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n}=t,{indices:r,values:s,denseShape:i,defaultValue:a}=e;if(1!==i.shape.length)throw new Error(`Dense shape must be a vector, saw:\\n         ${i.shape}`);if(2!==r.shape.length)throw new Error(`Indices must be a matrix, saw:\\n         ${r.shape}`);if(1!==s.shape.length)throw new Error(`Values must be a vector, saw:\\n         ${s.shape}`);if(0!==a.shape.length)throw new Error(`Default value must be a scalar, saw:\\n        ${a.shape}`);const o=n.readSync(r.dataId),l=n.readSync(s.dataId),u=n.readSync(i.dataId),c=n.readSync(a.dataId)[0],[h,d,p,f,m]=bL(o,r.shape,r.dtype,l,s.dtype,u,c);return[n.makeTensorInfo(d,r.dtype,h),n.makeTensorInfo([d[0]],s.dtype,p),n.makeTensorInfo([f.length],\"bool\",new Uint8Array(f.map((t=>Number(t))))),n.makeTensorInfo([m.length],r.dtype,new Int32Array(m))]}},Oz={kernelName:Nr,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n}=t,{inputIndices:r,inputShape:s,newShape:i}=e;if(2!==r.shape.length)throw new Error(`Input indices should be a matrix but received shape ${r.shape}`);if(1!==s.shape.length)throw new Error(`Input shape should be a vector but received shape ${s.shape}`);if(1!==i.shape.length)throw new Error(`Target shape should be a vector but received shape ${i.shape}`);const a=Array.from(n.readSync(s.dataId)),o=n.readSync(r.dataId),l=Array.from(n.readSync(i.dataId)),[u,c,h]=vL(o,r.shape,r.dtype,a,l);return[n.makeTensorInfo(c,r.dtype,u),n.makeTensorInfo([h.length],i.dtype,new Int32Array(h))]}},Pz={kernelName:Ar,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n}=t,{data:r,indices:s,segmentIds:i}=e;if(r.shape.length<1)throw new Error(\"Data should be at least 1 dimensional but received scalar\");if(1!==s.shape.length)throw new Error(`Indices should be a vector but received shape\\n              ${s.shape}`);if(1!==i.shape.length)throw new Error(`Segment ids should be a vector but received shape\\n              ${i.shape}`);const a=n.readSync(r.dataId),o=n.readSync(s.dataId),l=n.readSync(i.dataId),[u,c]=wL(a,r.shape,r.dtype,o,l,!0);return n.makeTensorInfo(c,r.dtype,u)}},zz={kernelName:Rr,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n}=t,{data:r,indices:s,segmentIds:i}=e;if(r.shape.length<1)throw new Error(\"Data should be at least 1 dimensional but received scalar\");if(1!==s.shape.length)throw new Error(`Indices should be a vector but received shape\\n             ${s.shape}`);if(1!==i.shape.length)throw new Error(`Segment ids should be a vector but received shape\\n             ${i.shape}`);const a=n.readSync(r.dataId),o=n.readSync(s.dataId),l=n.readSync(i.dataId),[u,c]=wL(a,r.shape,r.dtype,o,l);return n.makeTensorInfo(c,r.dtype,u)}},Bz={kernelName:Lr,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{sparseIndices:s,sparseValues:i,defaultValue:a}=e,{outputShape:o}=r,{sliceRank:l,numUpdates:u,strides:c,outputSize:h}=eo(0,s,o),d=new xz(u,l,s.shape.length,i.shape.length,c,[h,1],!1),p=n.runWebGLProgram(d,[i,s,a],i.dtype),f=mD({inputs:{x:p},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(p),f}},Uz={kernelName:Er,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{numOrSizeSplits:i,axis:a}=r,o=gt(a,s.shape)[0],l=uf(s,i,o),u=s.shape.length,c=new Array(u).fill(0),h=s.shape.slice();return l.map((t=>{const e=[...h];e[o]=t;const r=wF({inputs:{x:s},backend:n,attrs:{begin:c,size:e}});return c[o]+=t,r}))}},Vz=\"return sqrt(x);\",Wz=oD({opSnippet:Vz,packedOpSnippet:Vz,cpuKernelImpl:SL}),Gz={kernelName:_r,backendName:\"webgl\",kernelFunc:Wz},Hz=oD({opSnippet:\"return x * x;\"}),jz={kernelName:Fr,backendName:\"webgl\",kernelFunc:Hz},qz=\"return (a - b) * (a - b);\",Xz=lD({opSnippet:qz,packedOpSnippet:qz}),Kz={kernelName:Dr,backendName:\"webgl\",kernelFunc:Xz},Yz={kernelName:Zr,backendName:\"webgl\",kernelFunc:function({inputs:t,attrs:e,backend:n}){const{x:r}=t,s=`if (isnan(x)) return x;\\n    return x > 0.0 ? 1.0 : float(${e.alpha});\\n  `,i=new BL(r.shape,s);return n.runWebGLProgram(i,[r],r.dtype)}};class Zz{constructor(t,e,n){this.variableNames=[\"x\"],this.outputShape=n;const r=n.length,s=MR(n.length),i=MR(n.length);let a=\"\";if(1===r)a=\"coords * strides + begin\";else{let t=0;a=n.map(((e,r)=>(t++,1===n.length?`coords * strides[${r}] + begin[${r}]`:`coords[${t-1}] * strides[${r}] + begin[${r}]`))).join(\",\")}this.userCode=`\\n      ${s} begin = ${s}(${t});\\n      ${s} strides = ${s}(${e});\\n\\n      void main() {\\n        ${i} coords = getOutputCoords();\\n        setOutput(getX(${a}));\\n      }\\n    `}}const Jz={kernelName:$r,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{begin:i,end:a,strides:o,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:d}=r,{nonStrided:p,$begin:f,$strides:m,size:g,newShape:y,outShape:x}=xo(s.shape,i,a,o,l,u,c,h,d),b=mD({inputs:{x:s},backend:n,attrs:{shape:y}});let v;if(p){const t=wF({inputs:{x:b},backend:n,attrs:{begin:f,size:g}});v=mD({inputs:{x:t},backend:n,attrs:{shape:x}}),n.disposeIntermediateTensorInfo(t)}else if(x.some((t=>0===t)))v=n.makeTensorInfo(x,s.dtype,[]);else if(n.shouldExecuteOnCPU([b])){const t=n.texData.get(b.dataId).values,e=wa(b.shape,b.dtype,t),r=TL(x,e,m,f);v=n.makeTensorInfo(x,b.dtype,r.values)}else{const t=new Zz(f,m,x);v=n.runWebGLProgram(t,[b],b.dtype)}const w=mD({inputs:{x:v},backend:n,attrs:{shape:x}});return n.disposeIntermediateTensorInfo(b),n.disposeIntermediateTensorInfo(v),w}},Qz={kernelName:Or,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{separator:s,nGramWidths:i,leftPad:a,rightPad:o,padWidth:l,preserveShortSequences:u}=r,{data:c,dataSplits:h}=e,d=n.readSync(c.dataId),p=n.readSync(h.dataId),[f,m]=_L(d,p,s,i,a,o,l,u);return[n.makeTensorInfo([f.length],\"string\",f),n.makeTensorInfo(h.shape,\"int32\",m)]}},tB={kernelName:Pr,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{skipEmpty:s}=r,{input:i,delimiter:a}=e;if(\"string\"!==i.dtype)throw new Error(\"Input must be of datatype string\");if(1!==i.shape.length)throw new Error(`Input must be a vector, got shape: ${i.shape}`);if(0!==a.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${a.shape}`);const o=n.readSync(i.dataId),l=n.readSync(a.dataId)[0],[u,c,h]=ML(o,l,s),d=c.length;return[n.makeTensorInfo([d,2],\"int32\",u),n.makeTensorInfo([d],\"string\",c),n.makeTensorInfo([2],\"int32\",new Int32Array(h))]}},eB={kernelName:zr,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{numBuckets:s}=r,{input:i}=e;if(\"string\"!==i.dtype)throw new Error(\"Input must be of datatype string\");if(s<=0)throw new Error(\"Number of buckets must be at least 1\");const a=n.readSync(i.dataId),o=kL(a,s);return n.makeTensorInfo(i.shape,\"int32\",o)}},nB=oD({opSnippet:\"return tan(x);\"}),rB={kernelName:Ur,backendName:\"webgl\",kernelFunc:nB},sB=oD({opSnippet:\"\\n  float e2x = exp(-2.0 * abs(x));\\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\\n\"}),iB={kernelName:Vr,backendName:\"webgl\",kernelFunc:sB};class aB{constructor(t,e){this.variableNames=[\"A\"];const n=new Array(t.length);for(let r=0;r<n.length;r++)n[r]=t[r]*e[r];this.outputShape=n,this.rank=n.length;const r=MR(this.rank),s=function(t){const e=t.length;if(e>5)throw Error(`Tile for rank ${e} is not yet supported`);if(1===e)return`imod(resRC, ${t[0]})`;const n=[\"resRC.x\",\"resRC.y\",\"resRC.z\",\"resRC.w\",\"resRC.u\"],r=[];for(let e=0;e<t.length;e++)r.push(`imod(${n[e]}, ${t[e]})`);return r.join()}(t);this.userCode=`\\n      void main() {\\n        ${r} resRC = getOutputCoords();\\n        setOutput(getA(${s}));\\n      }\\n    `}}function oB(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{reps:i}=r;if(\"string\"===s.dtype||s.shape.length>5){const t=n.readSync(s.dataId),e=\"string\"===s.dtype?t.map((t=>Ls(t))):t,r=wa(s.shape,s.dtype,e),a=IL(r,i);return n.makeTensorInfo(a.shape,a.dtype,a.values)}const a=new aB(s.shape,i);return n.runWebGLProgram(a,[s],s.dtype)}const lB={kernelName:Wr,backendName:\"webgl\",kernelFunc:oB};class uB{constructor(t){this.variableNames=[\"x\",\"indices\"],this.customUniforms=[{name:\"n\",type:\"int\"},{name:\"firstPass\",type:\"int\"},{name:\"negativeInf\",type:\"float\"},{name:\"dir\",type:\"int\"},{name:\"inc\",type:\"int\"}],this.outputShape=t,this.userCode=\"\\n       void main() {\\n         ivec2 coords = getOutputCoords();\\n         int batch = coords[0];\\n         int elemIdx = coords[1];\\n\\n         // We compare elements pair-wise within a group of size 2 * inc.\\n         // The comparing rule for each group alternates between ascending\\n         // and descending. Within each group, we compare each pair at\\n         // positions i and i+inc. To decide whether an element at position i\\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\\n         // inc, it is in the first half of the group, we denote it as x0,\\n         // otherwise we denote it as x1.\\n         // For example, as shown in the Bitonic top K paper referenced above,\\n         // Figure5(a) shows that element[1] is in the\\n         // second half of the group when group size is 2, but it is in the\\n         // first half of the group when group size is 4.\\n\\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\\n\\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\\n\\n         // Denotes which direction indices are in (ascending or descending).\\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\\n         if (reverse == isGreater) { // Elements in opposite order of direction\\n           int iTemp = i0;\\n           i0 = i1;\\n           i1 = iTemp;\\n         }\\n         if (isFirstInPair) {\\n            setOutput(float(i0));\\n         } else {\\n            setOutput(float(i1));\\n         }\\n       }\\n     \"}}class cB{constructor(t){this.variableNames=[\"x\",\"indices\"],this.customUniforms=[{name:\"n\",type:\"int\"},{name:\"firstPass\",type:\"int\"},{name:\"k\",type:\"int\"}],this.outputShape=t,this.userCode=\"\\n    void main() {\\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\\n         ivec2 coords = getOutputCoords();\\n         int batch = coords[0];\\n         int elemIdx = coords[1];\\n\\n         // The output size is half of the previous size.\\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\\n         // we only need to output the indices at positions |, the indices at\\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\\n         // (Merge phase) in the Bitonic Top K paper referenced above.\\n         // For example, the paper shows we only need to output the orange bars.\\n         // The output sequence should look like this | | | | | | | |.\\n         // Because the sequence is halved, to map the output index back\\n         // to the previous sequence to find the corresponding value,\\n         // we need to double the index. When we double the index,\\n         // we basically interpolate a position, so 2i looks like\\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\\n         // of each 2k positions by - elemIdx % k. E.g. for output at\\n         // index 4,5,6,7, we want to get the corresponding element at\\n         // original index 8,9,10,11, for output at index 8,9,10,11,\\n         // we want to get the corresponding element at original index\\n         // 16,17,18,19, so on and so forth.\\n\\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\\n\\n         float x0 = getX(batch, i0);\\n         float x1 = i1 < n ? getX(batch, i1) : x0;\\n\\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\\n       }\\n     \"}}function hB(t,e){null!==e&&t.disposeIntermediateTensorInfo(e)}function dB(t){let e=1;for(;e<t;)e*=2;return e}const pB={kernelName:Gr,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s}=e,{k:i,sorted:a}=r,o=jt().getNumber(\"TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD\"),l=jt().getNumber(\"TOPK_K_CPU_HANDOFF_THRESHOLD\"),u=s.shape,c=u[u.length-1];if(n.shouldExecuteOnCPU([s])||c<o||i>l){const t=n.readSync(s.dataId),[e,r]=CL(t,u,s.dtype,i,a);return[n.makeTensorInfo(e.shape,e.dtype,e.values),n.makeTensorInfo(r.shape,r.dtype,r.values)]}if(0===i)return u[u.length-1]=0,[n.makeTensorInfo(u,s.dtype,[]),n.makeTensorInfo(u,\"int32\",[])];if(1===c)return[s,J$({attrs:{shape:u,dtype:\"int32\",value:0},backend:n})];const h=n.texData.get(s.dataId),d=null!==h&&h.isPacked,p=d?n.unpackTensor(s):s,f=at(u)/c,m=mD({inputs:{x:p},attrs:{shape:[f,c]},backend:n});d&&hB(n,p);const g=dB(i),y=dB(c);let x=null;const b=()=>null===x?[m,m]:[m,x],v=(t,e,r)=>{const s=b(),i=new uB(r),a=[[c],[null===x?1:0],[Number.NEGATIVE_INFINITY],[t],[e]],o=x;x=n.runWebGLProgram(i,s,\"int32\",a),hB(n,o)};for(let t=1;t<g;t*=2){const e=2*t;for(let n=t;n>=1;n/=2)v(e,n,[f,y])}for(let t=y;t>g;t/=2){const e=b(),r=new cB([f,t/2]),s=[[c],[null===x?1:0],[g]],i=x;x=n.runWebGLProgram(r,e,\"int32\",s),hB(n,i);const a=g/2,o=2*a;for(let t=a;t>=1;t/=2)v(o,t,x.shape)}let w=x;x=wF({inputs:{x},backend:n,attrs:{begin:0,size:[f,i]}}),hB(n,w);let S=gO({inputs:{x:m,indices:x},backend:n,attrs:{axis:1,batchDims:1}});hB(n,m);const T=u.slice(0,-1);T.push(i),w=x,x=mD({inputs:{x},attrs:{shape:T},backend:n}),hB(n,w);const _=S;return S=mD({inputs:{x:S},attrs:{shape:T},backend:n}),hB(n,_),[S,x]}};class fB{constructor(t,e,n,r,s,i){this.variableNames=[\"Image\",\"Transforms\"],this.outputShape=i;const a=\"nearest\"===n?1:2;let o;switch(r){case\"constant\":o=1;break;case\"reflect\":o=2;break;case\"wrap\":o=3;break;case\"nearest\":o=4;break;default:o=1}this.userCode=`\\n            float mapCoord(float outCoord, float len) {\\n              float inCoord = outCoord;\\n              if(${o} == 2) {\\n                if (inCoord < 0.0) {\\n                  if (len <= 1.0) {\\n                    inCoord = 0.0;\\n                  } else {\\n                    float sz2 = 2.0 * len;\\n                    if (inCoord < sz2) {\\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\\n                      inCoord;\\n                    }\\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\\n                  }\\n                } else if (inCoord > len - 1.0) {\\n                  if (len <= 1.0) {\\n                    inCoord = 0.0;\\n                  } else {\\n                    float sz2 = 2.0 * len;\\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\\n                    if (inCoord >= len) {\\n                      inCoord = sz2 - inCoord - 1.0;\\n                    }\\n                  }\\n                }\\n                return clamp(inCoord, 0.0, len - 1.0);\\n              } else if (${o} == 3) {\\n                if (inCoord < 0.0) {\\n                  if (len <= 1.0) {\\n                    inCoord = 0.0;\\n                  } else {\\n                    float sz = len - 1.0;\\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\\n                  }\\n                } else if (inCoord > len - 1.0) {\\n                  if (len <= 1.0) {\\n                    inCoord = 0.0;\\n                  } else {\\n                    float sz = len - 1.0;\\n                    inCoord -= len * float(int(float(inCoord / sz)));\\n                  }\\n                }\\n                return clamp(inCoord, 0.0, len - 1.0);\\n              } else if (${o} == 4) {\\n                return clamp(outCoord, 0.0, len - 1.0);\\n              } else {\\n                return outCoord;\\n              }\\n            }\\n\\n            float readWithFillValue(int batch, int coordY, int coordX,\\n              int channel) {\\n              float outputValue;\\n              if (0 <= coordY && coordY < ${t} && 0 <= coordX && coordX < ${e}) {\\n                  outputValue = getImage(batch, coordY, coordX, channel);\\n              } else {\\n                outputValue = float(${s});\\n              }\\n              return outputValue;\\n            }\\n\\n            void main() {\\n              ivec4 coords = getOutputCoords();\\n              float outputValue;\\n              int batch = coords[0];\\n              int x = coords[2];\\n              int y = coords[1];\\n              int channel = coords[3];\\n              float xf = float(x);\\n              float yf = float(y);\\n              float a1 = getTransforms(batch, 0);\\n              float a2 = getTransforms(batch, 1);\\n              float a3 = getTransforms(batch, 2);\\n              float b1 = getTransforms(batch, 3);\\n              float b2 = getTransforms(batch, 4);\\n              float b3 = getTransforms(batch, 5);\\n              float c1 = getTransforms(batch, 6);\\n              float c2 = getTransforms(batch, 7);\\n              float projection = c1 * xf + c2 * yf + 1.0;\\n              if (projection == 0.0) {\\n                outputValue = float(${s});\\n              } else {\\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\\n                float mapX = mapCoord(inX, float(${e}));\\n                float mapY = mapCoord(inY, float(${t}));\\n\\n                if (${a} == 1) {\\n                  int coordY = int(round(mapY));\\n                  int coordX = int(round(mapX));\\n                  outputValue = readWithFillValue(batch, coordY, coordX,\\n                    channel);\\n                } else {\\n                  float yFloor = floor(mapY);\\n                  float xFloor = floor(mapX);\\n                  float yCeil = yFloor + 1.0;\\n                  float xCeil = xFloor + 1.0;\\n                  float valueYFloor = (xCeil - mapX) *\\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\\n                  (mapX - xFloor) *\\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\\n                  float valueYCeil = (xCeil - mapX) *\\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\\n                  (mapX - xFloor) *\\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\\n                  outputValue = (yCeil - mapY) * valueYFloor +\\n                  (mapY - yFloor) * valueYCeil;\\n                }\\n              }\\n              setOutput(outputValue);\\n            }\\n        `}}const mB={kernelName:Hr,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{image:s,transforms:i}=e,{interpolation:a,fillMode:o,fillValue:l,outputShape:u}=r,[c,h,d,p]=s.shape,[f,m]=null!=u?u:[h,d],g=new fB(h,d,a,o,l,[c,f,m,p]);return n.runWebGLProgram(g,[s,i],\"float32\")}},gB={kernelName:qr,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,attrs:n,backend:r}=t,{axis:s}=n,{x:i}=e;lR(i,\"unique\"),console.warn(\"WARNING: \",\"UI might be locked temporarily as data is being downloaded\");const a=r.readSync(i.dataId),{outputValues:o,outputShape:l,indices:u}=AL(a,s,i.shape,i.dtype);return[r.makeTensorInfo(l,i.dtype,o),r.makeTensorInfo([u.length],\"int32\",u)]}},yB={kernelName:Xr,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{value:s}=e;let{axis:i}=r;i<0&&(i+=s.shape.length);const a=s,o=a.shape.length,l=s.shape[i],u=new Array(o-1);let c=0;for(let t=0;t<o;t++)t!==i&&(u[c++]=a.shape[t]);const h=[],d=new Array(o).fill(0),p=a.shape.slice();p[i]=1;const f=new Array(l);for(let t=0;t<f.length;t++){d[i]=t;const e=wF({inputs:{x:a},backend:n,attrs:{begin:d,size:p}}),r=mD({inputs:{x:e},backend:n,attrs:{shape:u}});f[t]=r,h.push(e)}return h.forEach((t=>n.disposeIntermediateTensorInfo(t))),f}};class xB{constructor(t,e){this.variableNames=[\"x\",\"segmentIds\"];const n=t.windowSize,r=t.batchSize,s=t.inSize,i=t.numSegments,a=i*Math.ceil(s/n);this.outputShape=[r,a];const o=4*Math.floor(n/4),l=n%4,u=\"\\n        sumValue += dot(values, segFilter);\\n    \";let c=\"\";s%n>0&&(c=`\\n        if (inIdx < 0 || inIdx >= ${s}) {\\n          return initializationValue;\\n        }\\n      `);let h=\"\";s%n>0&&(h=`\\n        if (inIdx < 0 || inIdx >= ${s}) {\\n          return -1.0;\\n        }\\n      `),this.userCode=`\\n      const float initializationValue = 0.0;\\n\\n      float getValue(int batch, int inIdx) {\\n        ${c}\\n        return getX(batch, inIdx);\\n      }\\n\\n      float getSegmentIdAtIndex(int inIdx) {\\n        ${h}\\n        return getSegmentIds(inIdx);\\n      }\\n\\n      void main() {\\n        ivec2 coords = getOutputCoords();\\n        int batch = coords[0];\\n        int outIdx = coords[1];\\n        int inOffset = int(floor(float(outIdx) / float(\\n          ${i})) * float(${n}));\\n        int currentSeg = int(mod(float(outIdx), float(${i})));\\n\\n        float sumValue = 0.0;\\n\\n        for (int i = 0; i < ${o}; i += 4) {\\n          int inIdx = inOffset + i;\\n          vec4 values = vec4(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            getValue(batch, inIdx + 2),\\n            getValue(batch, inIdx + 3)\\n          );\\n\\n          vec4 segFilter = vec4(\\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\\n          );\\n\\n          ${u}\\n        }\\n\\n        int inIdx = inOffset + ${o};\\n        if (${1===l}) {\\n          vec4 values = vec4(\\n            getValue(batch, inIdx),\\n            initializationValue,\\n            initializationValue,\\n            initializationValue\\n          );\\n\\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\\n\\n          vec4 segFilter = vec4(\\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\\n            0,\\n            0,\\n            0\\n          );\\n\\n          ${u}\\n        } else if (${2===l}) {\\n          vec4 values = vec4(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            initializationValue,\\n            initializationValue\\n          );\\n\\n          vec4 segFilter = vec4(\\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\\n              0,\\n              0\\n          );\\n\\n          ${u}\\n        } else if (${3===l}) {\\n          vec4 values = vec4(\\n            getValue(batch, inIdx),\\n            getValue(batch, inIdx + 1),\\n            getValue(batch, inIdx + 2),\\n            initializationValue\\n          );\\n\\n          vec4 segFilter = vec4(\\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\\n            0\\n          );\\n\\n          ${u}\\n        }\\n        setOutput(sumValue);\\n      }\\n    `}}const bB=[jO,XO,ID,ND,RD,DD,OD,BD,UD,VD,XD,KD,ZD,QD,rF,eF,iF,uF,lF,dF,pF,fF,yF,TF,_F,CF,RF,FF,PF,tD,jF,r$,s$,JF,a$,o$,i$,u$,h$,p$,y$,x$,v$,k$,E$,T$,C$,A$,R$,D$,F$,O$,z$,V$,G$,q$,Y$,Q$,eO,sO,aO,uO,hO,dO,fO,yO,bO,wO,JL,SO,WF,_O,kO,IO,rD,NO,RO,LO,OO,FO,zO,UO,WO,YO,tP,QO,rP,sP,iP,JO,aP,oP,uP,dP,fP,TP,fD,MP,EP,CP,AP,kF,LP,$P,OP,UP,WP,aD,GP,jP,IF,yP,XP,JP,YP,gD,ez,rz,az,lz,hz,pz,mz,yz,bz,wz,Tz,kz,Iz,Nz,Rz,SF,SP,Dz,Fz,$z,Oz,Pz,zz,Bz,Uz,Gz,jz,Kz,Yz,Jz,Qz,tB,eB,vP,_D,rB,iB,lB,pB,mB,kD,gB,yB,{kernelName:Kr,backendName:\"webgl\",kernelFunc:function(t){const{inputs:e,backend:n,attrs:r}=t,{x:s,segmentIds:i}=e,{numSegments:a}=r,o=s.shape.length,l=[];let u=0;const c=_c([u],o);let h=s;null!=c&&(h=MD({inputs:{x:s},backend:n,attrs:{perm:c}}),l.push(h),u=kc(1,o)[0]);const d=hf(h.shape,u,a),p=at([h.shape[u]]),f=mD({inputs:{x:h},backend:n,attrs:{shape:[-1,p]}});l.push(f);const m=ni(s.dtype),g=(t,e,r,s,i)=>{const a=t.shape[0],o=t.shape[1],u=cf(o,i),c=new xB({windowSize:u,inSize:o,batchSize:a,numSegments:i},e),h=n.compileAndRun(c,[t,r],s);if(l.push(h),h.shape[1]===i)return h;const d=HP({backend:n,attrs:{start:0,stop:i,step:1,dtype:\"float32\"}}),p=oB({inputs:{x:d},backend:n,attrs:{reps:[o/u]}});return l.push(d),l.push(p),g(h,e,p,s,i)},y=mD({inputs:{x:g(f,\"unsortedSegmentSum\",i,m,a)},backend:n,attrs:{shape:d}});let x=y;if(null!=c){l.push(y);const t=Mc(c);x=MD({inputs:{x},backend:n,attrs:{perm:t}})}return l.forEach((t=>n.disposeIntermediateTensorInfo(t))),x}},FP];for(const t of bB)ls(t);const vB={\"tfjs-core\":Lo,\"tfjs-backend-cpu\":\"3.9.0\",\"tfjs-backend-webgl\":\"3.9.0\",\"tfjs-data\":CM,\"tfjs-layers\":Px,\"tfjs-converter\":S_,tfjs:\"3.9.0\"}},58485:(t,e,n)=>{\"use strict\";n.d(e,{Z:()=>i});var r=n(23645),s=n.n(r)()((function(t){return t[1]}));s.push([t.id,\".mindar-ui-overlay{display:flex;align-items:center;justify-content:center;position:absolute;left:0;right:0;top:0;bottom:0;background:transparent;z-index:2}.mindar-ui-overlay.hidden{display:none}.mindar-ui-loading .loader{border:16px solid #222;border-top:16px solid #fff;opacity:0.8;border-radius:50%;width:120px;height:120px;animation:spin 2s linear infinite}@keyframes spin{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}.mindar-ui-compatibility .content{background:black;color:white;opacity:0.8;text-align:center;margin:20px;padding:20px;min-height:50vh}@media (min-aspect-ratio: 1 / 1){.mindar-ui-scanning .scanning{width:50vh;height:50vh}}@media (max-aspect-ratio: 1 / 1){.mindar-ui-scanning .scanning{width:80vw;height:80vw}}.mindar-ui-scanning .scanning .inner{position:relative;width:100%;height:100%;opacity:0.8;background:linear-gradient(to right, #fff 10px, transparent 10px) 0 0,linear-gradient(to right, #fff 10px, transparent 10px) 0 100%,linear-gradient(to left, #fff 10px, transparent 10px) 100% 0,linear-gradient(to left, #fff 10px, transparent 10px) 100% 100%,linear-gradient(to bottom, #fff 10px, transparent 10px) 0 0,linear-gradient(to bottom, #fff 10px, transparent 10px) 100% 0,linear-gradient(to top, #fff 10px, transparent 10px) 0 100%,linear-gradient(to top, #fff 10px, transparent 10px) 100% 100%;background-repeat:no-repeat;background-size:40px 40px}.mindar-ui-scanning .scanning .inner .scanline{position:absolute;width:100%;height:10px;background:#fff;animation:move 2s linear infinite}@keyframes move{0%,100%{top:0%}50%{top:calc(100% - 10px)}}\\n\",\"\"]);const i=s},23645:t=>{\"use strict\";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?\"@media \".concat(e[2],\" {\").concat(n,\"}\"):n})).join(\"\")},e.i=function(t,n,r){\"string\"==typeof t&&(t=[[null,t,\"\"]]);var s={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(s[a]=!0)}for(var o=0;o<t.length;o++){var l=[].concat(t[o]);r&&s[l[0]]||(n&&(l[2]?l[2]=\"\".concat(n,\" and \").concat(l[2]):l[2]=n),e.push(l))}},e}},97676:(t,e,n)=>{\"use strict\";n.d(e,{Z:()=>r});const r='<div class=\"mindar-ui-overlay mindar-ui-compatibility\"> <div class=\"content\"> <h1>Failed to launch :(</h1> <p> Looks like your device/browser is not compatible. </p> <br/> <br/> <p> Please try the following recommended browsers: </p> <p> For Android device - Chrome </p> <p> For iOS device - Safari </p> </div> </div> '},69894:(t,e,n)=>{\"use strict\";n.d(e,{Z:()=>r});const r='<div class=\"mindar-ui-overlay mindar-ui-loading\"> <div class=\"loader\"/> </div> '},22810:(t,e,n)=>{\"use strict\";n.d(e,{Z:()=>r});const r='<div class=\"mindar-ui-overlay mindar-ui-scanning\"> <div class=\"scanning\"> <div class=\"inner\"> <div class=\"scanline\"/> </div> </div> </div> '},43720:t=>{t.exports=n;var e=null;try{e=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(t){}function n(t,e,n){this.low=0|t,this.high=0|e,this.unsigned=!!n}function r(t){return!0===(t&&t.__isLong__)}n.prototype.__isLong__,Object.defineProperty(n.prototype,\"__isLong__\",{value:!0}),n.isLong=r;var s={},i={};function a(t,e){var n,r,a;return e?(a=0<=(t>>>=0)&&t<256)&&(r=i[t])?r:(n=l(t,(0|t)<0?-1:0,!0),a&&(i[t]=n),n):(a=-128<=(t|=0)&&t<128)&&(r=s[t])?r:(n=l(t,t<0?-1:0,!1),a&&(s[t]=n),n)}function o(t,e){if(isNaN(t))return e?y:g;if(e){if(t<0)return y;if(t>=p)return S}else{if(t<=-f)return T;if(t+1>=f)return w}return t<0?o(-t,e).neg():l(t%d|0,t/d|0,e)}function l(t,e,r){return new n(t,e,r)}n.fromInt=a,n.fromNumber=o,n.fromBits=l;var u=Math.pow;function c(t,e,n){if(0===t.length)throw Error(\"empty string\");if(\"NaN\"===t||\"Infinity\"===t||\"+Infinity\"===t||\"-Infinity\"===t)return g;if(\"number\"==typeof e?(n=e,e=!1):e=!!e,(n=n||10)<2||36<n)throw RangeError(\"radix\");var r;if((r=t.indexOf(\"-\"))>0)throw Error(\"interior hyphen\");if(0===r)return c(t.substring(1),e,n).neg();for(var s=o(u(n,8)),i=g,a=0;a<t.length;a+=8){var l=Math.min(8,t.length-a),h=parseInt(t.substring(a,a+l),n);if(l<8){var d=o(u(n,l));i=i.mul(d).add(o(h))}else i=(i=i.mul(s)).add(o(h))}return i.unsigned=e,i}function h(t,e){return\"number\"==typeof t?o(t,e):\"string\"==typeof t?c(t,e):l(t.low,t.high,\"boolean\"==typeof e?e:t.unsigned)}n.fromString=c,n.fromValue=h;var d=4294967296,p=d*d,f=p/2,m=a(1<<24),g=a(0);n.ZERO=g;var y=a(0,!0);n.UZERO=y;var x=a(1);n.ONE=x;var b=a(1,!0);n.UONE=b;var v=a(-1);n.NEG_ONE=v;var w=l(-1,2147483647,!1);n.MAX_VALUE=w;var S=l(-1,-1,!0);n.MAX_UNSIGNED_VALUE=S;var T=l(0,-2147483648,!1);n.MIN_VALUE=T;var _=n.prototype;_.toInt=function(){return this.unsigned?this.low>>>0:this.low},_.toNumber=function(){return this.unsigned?(this.high>>>0)*d+(this.low>>>0):this.high*d+(this.low>>>0)},_.toString=function(t){if((t=t||10)<2||36<t)throw RangeError(\"radix\");if(this.isZero())return\"0\";if(this.isNegative()){if(this.eq(T)){var e=o(t),n=this.div(e),r=n.mul(e).sub(this);return n.toString(t)+r.toInt().toString(t)}return\"-\"+this.neg().toString(t)}for(var s=o(u(t,6),this.unsigned),i=this,a=\"\";;){var l=i.div(s),c=(i.sub(l.mul(s)).toInt()>>>0).toString(t);if((i=l).isZero())return c+a;for(;c.length<6;)c=\"0\"+c;a=\"\"+c+a}},_.getHighBits=function(){return this.high},_.getHighBitsUnsigned=function(){return this.high>>>0},_.getLowBits=function(){return this.low},_.getLowBitsUnsigned=function(){return this.low>>>0},_.getNumBitsAbs=function(){if(this.isNegative())return this.eq(T)?64:this.neg().getNumBitsAbs();for(var t=0!=this.high?this.high:this.low,e=31;e>0&&0==(t&1<<e);e--);return 0!=this.high?e+33:e+1},_.isZero=function(){return 0===this.high&&0===this.low},_.eqz=_.isZero,_.isNegative=function(){return!this.unsigned&&this.high<0},_.isPositive=function(){return this.unsigned||this.high>=0},_.isOdd=function(){return 1==(1&this.low)},_.isEven=function(){return 0==(1&this.low)},_.equals=function(t){return r(t)||(t=h(t)),(this.unsigned===t.unsigned||this.high>>>31!=1||t.high>>>31!=1)&&this.high===t.high&&this.low===t.low},_.eq=_.equals,_.notEquals=function(t){return!this.eq(t)},_.neq=_.notEquals,_.ne=_.notEquals,_.lessThan=function(t){return this.comp(t)<0},_.lt=_.lessThan,_.lessThanOrEqual=function(t){return this.comp(t)<=0},_.lte=_.lessThanOrEqual,_.le=_.lessThanOrEqual,_.greaterThan=function(t){return this.comp(t)>0},_.gt=_.greaterThan,_.greaterThanOrEqual=function(t){return this.comp(t)>=0},_.gte=_.greaterThanOrEqual,_.ge=_.greaterThanOrEqual,_.compare=function(t){if(r(t)||(t=h(t)),this.eq(t))return 0;var e=this.isNegative(),n=t.isNegative();return e&&!n?-1:!e&&n?1:this.unsigned?t.high>>>0>this.high>>>0||t.high===this.high&&t.low>>>0>this.low>>>0?-1:1:this.sub(t).isNegative()?-1:1},_.comp=_.compare,_.negate=function(){return!this.unsigned&&this.eq(T)?T:this.not().add(x)},_.neg=_.negate,_.add=function(t){r(t)||(t=h(t));var e=this.high>>>16,n=65535&this.high,s=this.low>>>16,i=65535&this.low,a=t.high>>>16,o=65535&t.high,u=t.low>>>16,c=0,d=0,p=0,f=0;return p+=(f+=i+(65535&t.low))>>>16,d+=(p+=s+u)>>>16,c+=(d+=n+o)>>>16,c+=e+a,l((p&=65535)<<16|(f&=65535),(c&=65535)<<16|(d&=65535),this.unsigned)},_.subtract=function(t){return r(t)||(t=h(t)),this.add(t.neg())},_.sub=_.subtract,_.multiply=function(t){if(this.isZero())return g;if(r(t)||(t=h(t)),e)return l(e.mul(this.low,this.high,t.low,t.high),e.get_high(),this.unsigned);if(t.isZero())return g;if(this.eq(T))return t.isOdd()?T:g;if(t.eq(T))return this.isOdd()?T:g;if(this.isNegative())return t.isNegative()?this.neg().mul(t.neg()):this.neg().mul(t).neg();if(t.isNegative())return this.mul(t.neg()).neg();if(this.lt(m)&&t.lt(m))return o(this.toNumber()*t.toNumber(),this.unsigned);var n=this.high>>>16,s=65535&this.high,i=this.low>>>16,a=65535&this.low,u=t.high>>>16,c=65535&t.high,d=t.low>>>16,p=65535&t.low,f=0,y=0,x=0,b=0;return x+=(b+=a*p)>>>16,y+=(x+=i*p)>>>16,x&=65535,y+=(x+=a*d)>>>16,f+=(y+=s*p)>>>16,y&=65535,f+=(y+=i*d)>>>16,y&=65535,f+=(y+=a*c)>>>16,f+=n*p+s*d+i*c+a*u,l((x&=65535)<<16|(b&=65535),(f&=65535)<<16|(y&=65535),this.unsigned)},_.mul=_.multiply,_.divide=function(t){if(r(t)||(t=h(t)),t.isZero())throw Error(\"division by zero\");var n,s,i;if(e)return this.unsigned||-2147483648!==this.high||-1!==t.low||-1!==t.high?l((this.unsigned?e.div_u:e.div_s)(this.low,this.high,t.low,t.high),e.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?y:g;if(this.unsigned){if(t.unsigned||(t=t.toUnsigned()),t.gt(this))return y;if(t.gt(this.shru(1)))return b;i=y}else{if(this.eq(T))return t.eq(x)||t.eq(v)?T:t.eq(T)?x:(n=this.shr(1).div(t).shl(1)).eq(g)?t.isNegative()?x:v:(s=this.sub(t.mul(n)),i=n.add(s.div(t)));if(t.eq(T))return this.unsigned?y:g;if(this.isNegative())return t.isNegative()?this.neg().div(t.neg()):this.neg().div(t).neg();if(t.isNegative())return this.div(t.neg()).neg();i=g}for(s=this;s.gte(t);){n=Math.max(1,Math.floor(s.toNumber()/t.toNumber()));for(var a=Math.ceil(Math.log(n)/Math.LN2),c=a<=48?1:u(2,a-48),d=o(n),p=d.mul(t);p.isNegative()||p.gt(s);)p=(d=o(n-=c,this.unsigned)).mul(t);d.isZero()&&(d=x),i=i.add(d),s=s.sub(p)}return i},_.div=_.divide,_.modulo=function(t){return r(t)||(t=h(t)),e?l((this.unsigned?e.rem_u:e.rem_s)(this.low,this.high,t.low,t.high),e.get_high(),this.unsigned):this.sub(this.div(t).mul(t))},_.mod=_.modulo,_.rem=_.modulo,_.not=function(){return l(~this.low,~this.high,this.unsigned)},_.and=function(t){return r(t)||(t=h(t)),l(this.low&t.low,this.high&t.high,this.unsigned)},_.or=function(t){return r(t)||(t=h(t)),l(this.low|t.low,this.high|t.high,this.unsigned)},_.xor=function(t){return r(t)||(t=h(t)),l(this.low^t.low,this.high^t.high,this.unsigned)},_.shiftLeft=function(t){return r(t)&&(t=t.toInt()),0==(t&=63)?this:t<32?l(this.low<<t,this.high<<t|this.low>>>32-t,this.unsigned):l(0,this.low<<t-32,this.unsigned)},_.shl=_.shiftLeft,_.shiftRight=function(t){return r(t)&&(t=t.toInt()),0==(t&=63)?this:t<32?l(this.low>>>t|this.high<<32-t,this.high>>t,this.unsigned):l(this.high>>t-32,this.high>=0?0:-1,this.unsigned)},_.shr=_.shiftRight,_.shiftRightUnsigned=function(t){if(r(t)&&(t=t.toInt()),0==(t&=63))return this;var e=this.high;return t<32?l(this.low>>>t|e<<32-t,e>>>t,this.unsigned):l(32===t?e:e>>>t-32,0,this.unsigned)},_.shru=_.shiftRightUnsigned,_.shr_u=_.shiftRightUnsigned,_.toSigned=function(){return this.unsigned?l(this.low,this.high,!1):this},_.toUnsigned=function(){return this.unsigned?this:l(this.low,this.high,!0)},_.toBytes=function(t){return t?this.toBytesLE():this.toBytesBE()},_.toBytesLE=function(){var t=this.high,e=this.low;return[255&e,e>>>8&255,e>>>16&255,e>>>24,255&t,t>>>8&255,t>>>16&255,t>>>24]},_.toBytesBE=function(){var t=this.high,e=this.low;return[t>>>24,t>>>16&255,t>>>8&255,255&t,e>>>24,e>>>16&255,e>>>8&255,255&e]},n.fromBytes=function(t,e,r){return r?n.fromBytesLE(t,e):n.fromBytesBE(t,e)},n.fromBytesLE=function(t,e){return new n(t[0]|t[1]<<8|t[2]<<16|t[3]<<24,t[4]|t[5]<<8|t[6]<<16|t[7]<<24,e)},n.fromBytesBE=function(t,e){return new n(t[4]<<24|t[5]<<16|t[6]<<8|t[7],t[0]<<24|t[1]<<16|t[2]<<8|t[3],e)}},36377:(t,e,n)=>{var r=n(84832),s=n(68652),i=n(90801),a=n(92030),o=n(3618),l=n(89049),u=n(51971);u.alea=r,u.xor128=s,u.xorwow=i,u.xorshift7=a,u.xor4096=o,u.tychei=l,t.exports=u},84832:function(t,e,n){var r;!function(t,s,i){function a(t){var e,n=this,r=(e=4022871197,function(t){t=t.toString();for(var n=0;n<t.length;n++){var r=.02519603282416938*(e+=t.charCodeAt(n));r-=e=r>>>0,e=(r*=e)>>>0,e+=4294967296*(r-=e)}return 2.3283064365386963e-10*(e>>>0)});n.next=function(){var t=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=t-(n.c=0|t)},n.c=1,n.s0=r(\" \"),n.s1=r(\" \"),n.s2=r(\" \"),n.s0-=r(t),n.s0<0&&(n.s0+=1),n.s1-=r(t),n.s1<0&&(n.s1+=1),n.s2-=r(t),n.s2<0&&(n.s2+=1),r=null}function o(t,e){return e.c=t.c,e.s0=t.s0,e.s1=t.s1,e.s2=t.s2,e}function l(t,e){var n=new a(t),r=e&&e.state,s=n.next;return s.int32=function(){return 4294967296*n.next()|0},s.double=function(){return s()+11102230246251565e-32*(2097152*s()|0)},s.quick=s,r&&(\"object\"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=l:n.amdD&&n.amdO?void 0===(r=function(){return l}.call(e,n,e,s))||(s.exports=r):this.alea=l}(0,t=n.nmd(t),n.amdD)},89049:function(t,e,n){var r;!function(t,s,i){function a(t){var e=this,n=\"\";e.next=function(){var t=e.b,n=e.c,r=e.d,s=e.a;return t=t<<25^t>>>7^n,n=n-r|0,r=r<<24^r>>>8^s,s=s-t|0,e.b=t=t<<20^t>>>12^n,e.c=n=n-r|0,e.d=r<<16^n>>>16^s,e.a=s-t|0},e.a=0,e.b=0,e.c=-1640531527,e.d=1367130551,t===Math.floor(t)?(e.a=t/4294967296|0,e.b=0|t):n+=t;for(var r=0;r<n.length+20;r++)e.b^=0|n.charCodeAt(r),e.next()}function o(t,e){return e.a=t.a,e.b=t.b,e.c=t.c,e.d=t.d,e}function l(t,e){var n=new a(t),r=e&&e.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},s.int32=n.next,s.quick=s,r&&(\"object\"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=l:n.amdD&&n.amdO?void 0===(r=function(){return l}.call(e,n,e,s))||(s.exports=r):this.tychei=l}(0,t=n.nmd(t),n.amdD)},68652:function(t,e,n){var r;!function(t,s,i){function a(t){var e=this,n=\"\";e.x=0,e.y=0,e.z=0,e.w=0,e.next=function(){var t=e.x^e.x<<11;return e.x=e.y,e.y=e.z,e.z=e.w,e.w^=e.w>>>19^t^t>>>8},t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),e.next()}function o(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e}function l(t,e){var n=new a(t),r=e&&e.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},s.int32=n.next,s.quick=s,r&&(\"object\"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=l:n.amdD&&n.amdO?void 0===(r=function(){return l}.call(e,n,e,s))||(s.exports=r):this.xor128=l}(0,t=n.nmd(t),n.amdD)},3618:function(t,e,n){var r;!function(t,s,i){function a(t){var e=this;e.next=function(){var t,n,r=e.w,s=e.X,i=e.i;return e.w=r=r+1640531527|0,n=s[i+34&127],t=s[i=i+1&127],n^=n<<13,t^=t<<17,n^=n>>>15,t^=t>>>12,n=s[i]=n^t,e.i=i,n+(r^r>>>16)|0},function(t,e){var n,r,s,i,a,o=[],l=128;for(e===(0|e)?(r=e,e=null):(e+=\"\\0\",r=0,l=Math.max(l,e.length)),s=0,i=-32;i<l;++i)e&&(r^=e.charCodeAt((i+32)%e.length)),0===i&&(a=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,i>=0&&(a=a+1640531527|0,s=0==(n=o[127&i]^=r+a)?s+1:0);for(s>=128&&(o[127&(e&&e.length||0)]=-1),s=127,i=512;i>0;--i)r=o[s+34&127],n=o[s=s+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,o[s]=r^n;t.w=a,t.X=o,t.i=s}(e,t)}function o(t,e){return e.i=t.i,e.w=t.w,e.X=t.X.slice(),e}function l(t,e){null==t&&(t=+new Date);var n=new a(t),r=e&&e.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},s.int32=n.next,s.quick=s,r&&(r.X&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=l:n.amdD&&n.amdO?void 0===(r=function(){return l}.call(e,n,e,s))||(s.exports=r):this.xor4096=l}(0,t=n.nmd(t),n.amdD)},92030:function(t,e,n){var r;!function(t,s,i){function a(t){var e=this;e.next=function(){var t,n,r=e.x,s=e.i;return t=r[s],n=(t^=t>>>7)^t<<24,n^=(t=r[s+1&7])^t>>>10,n^=(t=r[s+3&7])^t>>>3,n^=(t=r[s+4&7])^t<<7,t=r[s+7&7],n^=(t^=t<<13)^t<<9,r[s]=n,e.i=s+1&7,n},function(t,e){var n,r=[];if(e===(0|e))r[0]=e;else for(e=\"\"+e,n=0;n<e.length;++n)r[7&n]=r[7&n]<<15^e.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],t.x=r,t.i=0,n=256;n>0;--n)t.next()}(e,t)}function o(t,e){return e.x=t.x.slice(),e.i=t.i,e}function l(t,e){null==t&&(t=+new Date);var n=new a(t),r=e&&e.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},s.int32=n.next,s.quick=s,r&&(r.x&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=l:n.amdD&&n.amdO?void 0===(r=function(){return l}.call(e,n,e,s))||(s.exports=r):this.xorshift7=l}(0,t=n.nmd(t),n.amdD)},90801:function(t,e,n){var r;!function(t,s,i){function a(t){var e=this,n=\"\";e.next=function(){var t=e.x^e.x>>>2;return e.x=e.y,e.y=e.z,e.z=e.w,e.w=e.v,(e.d=e.d+362437|0)+(e.v=e.v^e.v<<4^t^t<<1)|0},e.x=0,e.y=0,e.z=0,e.w=0,e.v=0,t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),r==n.length&&(e.d=e.x<<10^e.x>>>4),e.next()}function o(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e.v=t.v,e.d=t.d,e}function l(t,e){var n=new a(t),r=e&&e.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},s.int32=n.next,s.quick=s,r&&(\"object\"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=l:n.amdD&&n.amdO?void 0===(r=function(){return l}.call(e,n,e,s))||(s.exports=r):this.xorwow=l}(0,t=n.nmd(t),n.amdD)},51971:(t,e,n)=>{var r;!function(s,i){var a,o=this,l=256,u=i.pow(l,6),c=i.pow(2,52),h=2*c,d=255;function p(t,e,n){var r=[],d=y(g((e=1==e?{entropy:!0}:e||{}).entropy?[t,x(s)]:null==t?function(){try{var t;return a&&(t=a.randomBytes)?t=t(l):(t=new Uint8Array(l),(o.crypto||o.msCrypto).getRandomValues(t)),x(t)}catch(t){var e=o.navigator,n=e&&e.plugins;return[+new Date,o,n,o.screen,x(s)]}}():t,3),r),p=new f(r),b=function(){for(var t=p.g(6),e=u,n=0;t<c;)t=(t+n)*l,e*=l,n=p.g(1);for(;t>=h;)t/=2,e/=2,n>>>=1;return(t+n)/e};return b.int32=function(){return 0|p.g(4)},b.quick=function(){return p.g(4)/4294967296},b.double=b,y(x(p.S),s),(e.pass||n||function(t,e,n,r){return r&&(r.S&&m(r,p),t.state=function(){return m(p,{})}),n?(i.random=t,e):t})(b,d,\"global\"in e?e.global:this==i,e.state)}function f(t){var e,n=t.length,r=this,s=0,i=r.i=r.j=0,a=r.S=[];for(n||(t=[n++]);s<l;)a[s]=s++;for(s=0;s<l;s++)a[s]=a[i=d&i+t[s%n]+(e=a[s])],a[i]=e;(r.g=function(t){for(var e,n=0,s=r.i,i=r.j,a=r.S;t--;)e=a[s=d&s+1],n=n*l+a[d&(a[s]=a[i=d&i+e])+(a[i]=e)];return r.i=s,r.j=i,n})(l)}function m(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function g(t,e){var n,r=[],s=typeof t;if(e&&\"object\"==s)for(n in t)try{r.push(g(t[n],e-1))}catch(t){}return r.length?r:\"string\"==s?t:t+\"\\0\"}function y(t,e){for(var n,r=t+\"\",s=0;s<r.length;)e[d&s]=d&(n^=19*e[d&s])+r.charCodeAt(s++);return x(e)}function x(t){return String.fromCharCode.apply(0,t)}if(i.seedrandom=p,y(i.random(),s),t.exports){t.exports=p;try{a=n(63906)}catch(t){}}else void 0===(r=function(){return p}.call(e,n,e,t))||(t.exports=r)}([],Math)},74412:(t,e,n)=>{\"use strict\";n.r(e),n.d(e,{default:()=>a});var r=n(93379),s=n.n(r),i=n(58485);s()(i.Z,{insert:\"head\",singleton:!1});const a=i.Z.locals||{}},93379:(t,e,n)=>{\"use strict\";var r,s=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),i=[];function a(t){for(var e=-1,n=0;n<i.length;n++)if(i[n].identifier===t){e=n;break}return e}function o(t,e){for(var n={},r=[],s=0;s<t.length;s++){var o=t[s],l=e.base?o[0]+e.base:o[0],u=n[l]||0,c=\"\".concat(l,\" \").concat(u);n[l]=u+1;var h=a(c),d={css:o[1],media:o[2],sourceMap:o[3]};-1!==h?(i[h].references++,i[h].updater(d)):i.push({identifier:c,updater:m(d,e),references:1}),r.push(c)}return r}function l(t){var e=document.createElement(\"style\"),r=t.attributes||{};if(void 0===r.nonce){var i=n.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(t){e.setAttribute(t,r[t])})),\"function\"==typeof t.insert)t.insert(e);else{var a=s(t.insert||\"head\");if(!a)throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");a.appendChild(e)}return e}var u,c=(u=[],function(t,e){return u[t]=e,u.filter(Boolean).join(\"\\n\")});function h(t,e,n,r){var s=n?\"\":r.media?\"@media \".concat(r.media,\" {\").concat(r.css,\"}\"):r.css;if(t.styleSheet)t.styleSheet.cssText=c(e,s);else{var i=document.createTextNode(s),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(i,a[e]):t.appendChild(i)}}function d(t,e,n){var r=n.css,s=n.media,i=n.sourceMap;if(s?t.setAttribute(\"media\",s):t.removeAttribute(\"media\"),i&&\"undefined\"!=typeof btoa&&(r+=\"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i)))),\" */\")),t.styleSheet)t.styleSheet.cssText=r;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(r))}}var p=null,f=0;function m(t,e){var n,r,s;if(e.singleton){var i=f++;n=p||(p=l(e)),r=h.bind(null,n,i,!1),s=h.bind(null,n,i,!0)}else n=l(e),r=d.bind(null,n,e),s=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else s()}}t.exports=function(t,e){(e=e||{}).singleton||\"boolean\"==typeof e.singleton||(e.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=o(t=t||[],e);return function(t){if(t=t||[],\"[object Array]\"===Object.prototype.toString.call(t)){for(var r=0;r<n.length;r++){var s=a(n[r]);i[s].references--}for(var l=o(t,e),u=0;u<n.length;u++){var c=a(n[u]);0===i[c].references&&(i[c].updater(),i.splice(c,1))}n=l}}}},2212:(t,e,n)=>{\"use strict\";n.r(e),n.d(e,{ACESFilmicToneMapping:()=>nt,AddEquation:()=>M,AddOperation:()=>Z,AdditiveAnimationBlendMode:()=>je,AdditiveBlending:()=>w,AlphaFormat:()=>$t,AlwaysDepth:()=>V,AlwaysStencilFunc:()=>_n,AmbientLight:()=>ed,AmbientLightProbe:()=>Sd,AnimationClip:()=>Th,AnimationLoader:()=>Ah,AnimationMixer:()=>Qd,AnimationObjectGroup:()=>Zd,AnimationUtils:()=>ch,ArcCurve:()=>ju,ArrayCamera:()=>gl,ArrowHelper:()=>Wp,Audio:()=>Ld,AudioAnalyser:()=>zd,AudioContext:()=>bd,AudioListener:()=>Rd,AudioLoader:()=>vd,AxesHelper:()=>Gp,AxisHelper:()=>bf,BackSide:()=>m,BasicDepthPacking:()=>sn,BasicShadowMap:()=>c,BinaryTextureLoader:()=>_f,Bone:()=>eu,BooleanKeyframeTrack:()=>gh,BoundingBoxHelper:()=>vf,Box2:()=>up,Box3:()=>cr,Box3Helper:()=>Pp,BoxBufferGeometry:()=>vi,BoxGeometry:()=>vi,BoxHelper:()=>Op,BufferAttribute:()=>Ls,BufferGeometry:()=>ti,BufferGeometryLoader:()=>ld,ByteType:()=>Mt,Cache:()=>Mh,Camera:()=>Mi,CameraHelper:()=>Dp,CanvasRenderer:()=>kf,CanvasTexture:()=>Ru,CatmullRomCurve3:()=>Ju,CineonToneMapping:()=>et,CircleBufferGeometry:()=>Du,CircleGeometry:()=>Du,ClampToEdgeWrapping:()=>dt,Clock:()=>kd,Color:()=>Cs,ColorKeyframeTrack:()=>yh,CompressedTexture:()=>Au,CompressedTextureLoader:()=>Rh,ConeBufferGeometry:()=>$u,ConeGeometry:()=>$u,CubeCamera:()=>Ii,CubeReflectionMapping:()=>it,CubeRefractionMapping:()=>at,CubeTexture:()=>Ci,CubeTextureLoader:()=>Dh,CubeUVReflectionMapping:()=>ut,CubeUVRefractionMapping:()=>ct,CubicBezierCurve:()=>nc,CubicBezierCurve3:()=>rc,CubicInterpolant:()=>dh,CullFaceBack:()=>o,CullFaceFront:()=>l,CullFaceFrontBack:()=>u,CullFaceNone:()=>a,Curve:()=>Gu,CurvePath:()=>Oh,CustomBlending:()=>_,CustomToneMapping:()=>rt,CylinderBufferGeometry:()=>Fu,CylinderGeometry:()=>Fu,Cylindrical:()=>op,DataTexture:()=>nu,DataTexture2DArray:()=>Ea,DataTexture3D:()=>Ia,DataTextureLoader:()=>Fh,DataUtils:()=>qp,DecrementStencilOp:()=>pn,DecrementWrapStencilOp:()=>mn,DefaultLoadingManager:()=>Eh,DepthFormat:()=>Vt,DepthStencilFormat:()=>Wt,DepthTexture:()=>Lu,DirectionalLight:()=>td,DirectionalLightHelper:()=>Ap,DiscreteInterpolant:()=>fh,DodecahedronBufferGeometry:()=>Pu,DodecahedronGeometry:()=>Pu,DoubleSide:()=>g,DstAlphaFactor:()=>$,DstColorFactor:()=>P,DynamicBufferAttribute:()=>uf,DynamicCopyUsage:()=>Rn,DynamicDrawUsage:()=>kn,DynamicReadUsage:()=>Cn,EdgesGeometry:()=>Wu,EdgesHelper:()=>wf,EllipseCurve:()=>Hu,EqualDepth:()=>H,EqualStencilFunc:()=>bn,EquirectangularReflectionMapping:()=>ot,EquirectangularRefractionMapping:()=>lt,Euler:()=>Xr,EventDispatcher:()=>$n,ExtrudeBufferGeometry:()=>Oc,ExtrudeGeometry:()=>Oc,FaceColors:()=>Zp,FileLoader:()=>Nh,FlatShading:()=>y,Float16BufferAttribute:()=>Us,Float32Attribute:()=>yf,Float32BufferAttribute:()=>Vs,Float64Attribute:()=>xf,Float64BufferAttribute:()=>Ws,FloatType:()=>Nt,Fog:()=>Ml,FogExp2:()=>_l,Font:()=>md,FontLoader:()=>yd,FrontSide:()=>f,Frustum:()=>Oi,GLBufferAttribute:()=>np,GLSL1:()=>Dn,GLSL3:()=>Fn,GammaEncoding:()=>Je,GreaterDepth:()=>q,GreaterEqualDepth:()=>j,GreaterEqualStencilFunc:()=>Tn,GreaterStencilFunc:()=>wn,GridHelper:()=>kp,Group:()=>yl,HalfFloatType:()=>At,HemisphereLight:()=>Uh,HemisphereLightHelper:()=>Mp,HemisphereLightProbe:()=>wd,IcosahedronBufferGeometry:()=>zc,IcosahedronGeometry:()=>zc,ImageBitmapLoader:()=>pd,ImageLoader:()=>Lh,ImageUtils:()=>Jn,ImmediateRenderObject:()=>pp,IncrementStencilOp:()=>dn,IncrementWrapStencilOp:()=>fn,InstancedBufferAttribute:()=>au,InstancedBufferGeometry:()=>od,InstancedInterleavedBuffer:()=>ep,InstancedMesh:()=>hu,Int16Attribute:()=>pf,Int16BufferAttribute:()=>Os,Int32Attribute:()=>mf,Int32BufferAttribute:()=>zs,Int8Attribute:()=>cf,Int8BufferAttribute:()=>Ds,IntType:()=>It,InterleavedBuffer:()=>El,InterleavedBufferAttribute:()=>Cl,Interpolant:()=>hh,InterpolateDiscrete:()=>ze,InterpolateLinear:()=>Be,InterpolateSmooth:()=>Ue,InvertStencilOp:()=>gn,JSONLoader:()=>Ef,KeepStencilOp:()=>cn,KeyframeTrack:()=>mh,LOD:()=>Xl,LatheBufferGeometry:()=>Bc,LatheGeometry:()=>Bc,Layers:()=>Kr,LensFlare:()=>Cf,LessDepth:()=>W,LessEqualDepth:()=>G,LessEqualStencilFunc:()=>vn,LessStencilFunc:()=>xn,Light:()=>Bh,LightProbe:()=>sd,Line:()=>xu,Line3:()=>dp,LineBasicMaterial:()=>du,LineCurve:()=>sc,LineCurve3:()=>ic,LineDashedMaterial:()=>lh,LineLoop:()=>Su,LinePieces:()=>Kp,LineSegments:()=>wu,LineStrip:()=>Xp,LinearEncoding:()=>Ye,LinearFilter:()=>bt,LinearInterpolant:()=>ph,LinearMipMapLinearFilter:()=>Tt,LinearMipMapNearestFilter:()=>wt,LinearMipmapLinearFilter:()=>St,LinearMipmapNearestFilter:()=>vt,LinearToneMapping:()=>Q,Loader:()=>Ih,LoaderUtils:()=>ad,LoadingManager:()=>kh,LogLuvEncoding:()=>tn,LoopOnce:()=>$e,LoopPingPong:()=>Pe,LoopRepeat:()=>Oe,LuminanceAlphaFormat:()=>Bt,LuminanceFormat:()=>zt,MOUSE:()=>s,Material:()=>Ss,MaterialLoader:()=>id,Math:()=>Xn,MathUtils:()=>Xn,Matrix3:()=>Yn,Matrix4:()=>Pr,MaxEquation:()=>C,Mesh:()=>xi,MeshBasicMaterial:()=>Ns,MeshDepthMaterial:()=>cl,MeshDistanceMaterial:()=>hl,MeshFaceMaterial:()=>Qp,MeshLambertMaterial:()=>ah,MeshMatcapMaterial:()=>oh,MeshNormalMaterial:()=>ih,MeshPhongMaterial:()=>rh,MeshPhysicalMaterial:()=>nh,MeshStandardMaterial:()=>eh,MeshToonMaterial:()=>sh,MinEquation:()=>I,MirroredRepeatWrapping:()=>pt,MixOperation:()=>Y,MultiMaterial:()=>tf,MultiplyBlending:()=>T,MultiplyOperation:()=>K,NearestFilter:()=>ft,NearestMipMapLinearFilter:()=>xt,NearestMipMapNearestFilter:()=>gt,NearestMipmapLinearFilter:()=>yt,NearestMipmapNearestFilter:()=>mt,NeverDepth:()=>U,NeverStencilFunc:()=>yn,NoBlending:()=>b,NoColors:()=>Yp,NoToneMapping:()=>J,NormalAnimationBlendMode:()=>He,NormalBlending:()=>v,NotEqualDepth:()=>X,NotEqualStencilFunc:()=>Sn,NumberKeyframeTrack:()=>xh,Object3D:()=>us,ObjectLoader:()=>ud,ObjectSpaceNormalMap:()=>ln,OctahedronBufferGeometry:()=>Uc,OctahedronGeometry:()=>Uc,OneFactor:()=>A,OneMinusDstAlphaFactor:()=>O,OneMinusDstColorFactor:()=>z,OneMinusSrcAlphaFactor:()=>F,OneMinusSrcColorFactor:()=>L,OrthographicCamera:()=>Yi,PCFShadowMap:()=>h,PCFSoftShadowMap:()=>d,PMREMGenerator:()=>ha,ParametricBufferGeometry:()=>Vc,ParametricGeometry:()=>Vc,Particle:()=>nf,ParticleBasicMaterial:()=>af,ParticleSystem:()=>rf,ParticleSystemMaterial:()=>of,Path:()=>Ph,PerspectiveCamera:()=>ki,Plane:()=>Di,PlaneBufferGeometry:()=>Bi,PlaneGeometry:()=>Bi,PlaneHelper:()=>zp,PointCloud:()=>ef,PointCloudMaterial:()=>sf,PointLight:()=>Jh,PointLightHelper:()=>wp,Points:()=>Iu,PointsMaterial:()=>Tu,PolarGridHelper:()=>Ep,PolyhedronBufferGeometry:()=>Ou,PolyhedronGeometry:()=>Ou,PositionalAudio:()=>Pd,PropertyBinding:()=>Yd,PropertyMixer:()=>Bd,QuadraticBezierCurve:()=>ac,QuadraticBezierCurve3:()=>oc,Quaternion:()=>ar,QuaternionKeyframeTrack:()=>vh,QuaternionLinearInterpolant:()=>bh,REVISION:()=>r,RGBADepthPacking:()=>an,RGBAFormat:()=>Pt,RGBAIntegerFormat:()=>Kt,RGBA_ASTC_10x10_Format:()=>xe,RGBA_ASTC_10x5_Format:()=>me,RGBA_ASTC_10x6_Format:()=>ge,RGBA_ASTC_10x8_Format:()=>ye,RGBA_ASTC_12x10_Format:()=>be,RGBA_ASTC_12x12_Format:()=>ve,RGBA_ASTC_4x4_Format:()=>oe,RGBA_ASTC_5x4_Format:()=>le,RGBA_ASTC_5x5_Format:()=>ue,RGBA_ASTC_6x5_Format:()=>ce,RGBA_ASTC_6x6_Format:()=>he,RGBA_ASTC_8x5_Format:()=>de,RGBA_ASTC_8x6_Format:()=>pe,RGBA_ASTC_8x8_Format:()=>fe,RGBA_BPTC_Format:()=>we,RGBA_ETC2_EAC_Format:()=>ae,RGBA_PVRTC_2BPPV1_Format:()=>re,RGBA_PVRTC_4BPPV1_Format:()=>ne,RGBA_S3TC_DXT1_Format:()=>Zt,RGBA_S3TC_DXT3_Format:()=>Jt,RGBA_S3TC_DXT5_Format:()=>Qt,RGBDEncoding:()=>rn,RGBEEncoding:()=>Qe,RGBEFormat:()=>Ut,RGBFormat:()=>Ot,RGBIntegerFormat:()=>Xt,RGBM16Encoding:()=>nn,RGBM7Encoding:()=>en,RGB_ETC1_Format:()=>se,RGB_ETC2_Format:()=>ie,RGB_PVRTC_2BPPV1_Format:()=>ee,RGB_PVRTC_4BPPV1_Format:()=>te,RGB_S3TC_DXT1_Format:()=>Yt,RGFormat:()=>jt,RGIntegerFormat:()=>qt,RawShaderMaterial:()=>Zi,Ray:()=>Or,Raycaster:()=>rp,RectAreaLight:()=>nd,RedFormat:()=>Gt,RedIntegerFormat:()=>Ht,ReinhardToneMapping:()=>tt,RepeatWrapping:()=>ht,ReplaceStencilOp:()=>hn,ReverseSubtractEquation:()=>E,RingBufferGeometry:()=>Wc,RingGeometry:()=>Wc,SRGB8_ALPHA8_ASTC_10x10_Format:()=>Le,SRGB8_ALPHA8_ASTC_10x5_Format:()=>Ne,SRGB8_ALPHA8_ASTC_10x6_Format:()=>Ae,SRGB8_ALPHA8_ASTC_10x8_Format:()=>Re,SRGB8_ALPHA8_ASTC_12x10_Format:()=>De,SRGB8_ALPHA8_ASTC_12x12_Format:()=>Fe,SRGB8_ALPHA8_ASTC_4x4_Format:()=>Se,SRGB8_ALPHA8_ASTC_5x4_Format:()=>Te,SRGB8_ALPHA8_ASTC_5x5_Format:()=>_e,SRGB8_ALPHA8_ASTC_6x5_Format:()=>Me,SRGB8_ALPHA8_ASTC_6x6_Format:()=>ke,SRGB8_ALPHA8_ASTC_8x5_Format:()=>Ee,SRGB8_ALPHA8_ASTC_8x6_Format:()=>Ie,SRGB8_ALPHA8_ASTC_8x8_Format:()=>Ce,Scene:()=>kl,SceneUtils:()=>If,ShaderChunk:()=>Ui,ShaderLib:()=>Wi,ShaderMaterial:()=>_i,ShadowMaterial:()=>th,Shape:()=>zh,ShapeBufferGeometry:()=>Gc,ShapeGeometry:()=>Gc,ShapePath:()=>fd,ShapeUtils:()=>Dc,ShortType:()=>kt,Skeleton:()=>iu,SkeletonHelper:()=>bp,SkinnedMesh:()=>tu,SmoothShading:()=>x,Sphere:()=>Cr,SphereBufferGeometry:()=>Hc,SphereGeometry:()=>Hc,Spherical:()=>ap,SphericalHarmonics3:()=>rd,SplineCurve:()=>lc,SpotLight:()=>qh,SpotLightHelper:()=>mp,Sprite:()=>Gl,SpriteMaterial:()=>Nl,SrcAlphaFactor:()=>D,SrcAlphaSaturateFactor:()=>B,SrcColorFactor:()=>R,StaticCopyUsage:()=>An,StaticDrawUsage:()=>Mn,StaticReadUsage:()=>In,StereoCamera:()=>Md,StreamCopyUsage:()=>Ln,StreamDrawUsage:()=>En,StreamReadUsage:()=>Nn,StringKeyframeTrack:()=>wh,SubtractEquation:()=>k,SubtractiveBlending:()=>S,TOUCH:()=>i,TangentSpaceNormalMap:()=>on,TetrahedronBufferGeometry:()=>jc,TetrahedronGeometry:()=>jc,TextBufferGeometry:()=>qc,TextGeometry:()=>qc,Texture:()=>tr,TextureLoader:()=>$h,TorusBufferGeometry:()=>Xc,TorusGeometry:()=>Xc,TorusKnotBufferGeometry:()=>Kc,TorusKnotGeometry:()=>Kc,Triangle:()=>vs,TriangleFanDrawMode:()=>Ke,TriangleStripDrawMode:()=>Xe,TrianglesDrawMode:()=>qe,TubeBufferGeometry:()=>Yc,TubeGeometry:()=>Yc,UVMapping:()=>st,Uint16Attribute:()=>ff,Uint16BufferAttribute:()=>Ps,Uint32Attribute:()=>gf,Uint32BufferAttribute:()=>Bs,Uint8Attribute:()=>hf,Uint8BufferAttribute:()=>Fs,Uint8ClampedAttribute:()=>df,Uint8ClampedBufferAttribute:()=>$s,Uniform:()=>tp,UniformsLib:()=>Vi,UniformsUtils:()=>Ti,UnsignedByteType:()=>_t,UnsignedInt248Type:()=>Ft,UnsignedIntType:()=>Ct,UnsignedShort4444Type:()=>Rt,UnsignedShort5551Type:()=>Lt,UnsignedShort565Type:()=>Dt,UnsignedShortType:()=>Et,VSMShadowMap:()=>p,Vector2:()=>Kn,Vector3:()=>or,Vector4:()=>nr,VectorKeyframeTrack:()=>Sh,Vertex:()=>lf,VertexColors:()=>Jp,VideoTexture:()=>Nu,WebGL1Renderer:()=>Tl,WebGLCubeRenderTarget:()=>Ni,WebGLMultipleRenderTargets:()=>sr,WebGLMultisampleRenderTarget:()=>ir,WebGLRenderTarget:()=>rr,WebGLRenderTargetCube:()=>Mf,WebGLRenderer:()=>Sl,WebGLUtils:()=>ml,WireframeGeometry:()=>Zc,WireframeHelper:()=>Sf,WrapAroundEnding:()=>Ge,XHRLoader:()=>Tf,ZeroCurvatureEnding:()=>Ve,ZeroFactor:()=>N,ZeroSlopeEnding:()=>We,ZeroStencilOp:()=>un,sRGBEncoding:()=>Ze});const r=\"132\",s={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2},i={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},a=0,o=1,l=2,u=3,c=0,h=1,d=2,p=3,f=0,m=1,g=2,y=1,x=2,b=0,v=1,w=2,S=3,T=4,_=5,M=100,k=101,E=102,I=103,C=104,N=200,A=201,R=202,L=203,D=204,F=205,$=206,O=207,P=208,z=209,B=210,U=0,V=1,W=2,G=3,H=4,j=5,q=6,X=7,K=0,Y=1,Z=2,J=0,Q=1,tt=2,et=3,nt=4,rt=5,st=300,it=301,at=302,ot=303,lt=304,ut=306,ct=307,ht=1e3,dt=1001,pt=1002,ft=1003,mt=1004,gt=1004,yt=1005,xt=1005,bt=1006,vt=1007,wt=1007,St=1008,Tt=1008,_t=1009,Mt=1010,kt=1011,Et=1012,It=1013,Ct=1014,Nt=1015,At=1016,Rt=1017,Lt=1018,Dt=1019,Ft=1020,$t=1021,Ot=1022,Pt=1023,zt=1024,Bt=1025,Ut=Pt,Vt=1026,Wt=1027,Gt=1028,Ht=1029,jt=1030,qt=1031,Xt=1032,Kt=1033,Yt=33776,Zt=33777,Jt=33778,Qt=33779,te=35840,ee=35841,ne=35842,re=35843,se=36196,ie=37492,ae=37496,oe=37808,le=37809,ue=37810,ce=37811,he=37812,de=37813,pe=37814,fe=37815,me=37816,ge=37817,ye=37818,xe=37819,be=37820,ve=37821,we=36492,Se=37840,Te=37841,_e=37842,Me=37843,ke=37844,Ee=37845,Ie=37846,Ce=37847,Ne=37848,Ae=37849,Re=37850,Le=37851,De=37852,Fe=37853,$e=2200,Oe=2201,Pe=2202,ze=2300,Be=2301,Ue=2302,Ve=2400,We=2401,Ge=2402,He=2500,je=2501,qe=0,Xe=1,Ke=2,Ye=3e3,Ze=3001,Je=3007,Qe=3002,tn=3003,en=3004,nn=3005,rn=3006,sn=3200,an=3201,on=0,ln=1,un=0,cn=7680,hn=7681,dn=7682,pn=7683,fn=34055,mn=34056,gn=5386,yn=512,xn=513,bn=514,vn=515,wn=516,Sn=517,Tn=518,_n=519,Mn=35044,kn=35048,En=35040,In=35045,Cn=35049,Nn=35041,An=35046,Rn=35050,Ln=35042,Dn=\"100\",Fn=\"300 es\";class $n{addEventListener(t,e){void 0===this._listeners&&(this._listeners={});const n=this._listeners;void 0===n[t]&&(n[t]=[]),-1===n[t].indexOf(e)&&n[t].push(e)}hasEventListener(t,e){if(void 0===this._listeners)return!1;const n=this._listeners;return void 0!==n[t]&&-1!==n[t].indexOf(e)}removeEventListener(t,e){if(void 0===this._listeners)return;const n=this._listeners[t];if(void 0!==n){const t=n.indexOf(e);-1!==t&&n.splice(t,1)}}dispatchEvent(t){if(void 0===this._listeners)return;const e=this._listeners[t.type];if(void 0!==e){t.target=this;const n=e.slice(0);for(let e=0,r=n.length;e<r;e++)n[e].call(this,t);t.target=null}}}const On=[];for(let t=0;t<256;t++)On[t]=(t<16?\"0\":\"\")+t.toString(16);let Pn=1234567;const zn=Math.PI/180,Bn=180/Math.PI;function Un(){const t=4294967295*Math.random()|0,e=4294967295*Math.random()|0,n=4294967295*Math.random()|0,r=4294967295*Math.random()|0;return(On[255&t]+On[t>>8&255]+On[t>>16&255]+On[t>>24&255]+\"-\"+On[255&e]+On[e>>8&255]+\"-\"+On[e>>16&15|64]+On[e>>24&255]+\"-\"+On[63&n|128]+On[n>>8&255]+\"-\"+On[n>>16&255]+On[n>>24&255]+On[255&r]+On[r>>8&255]+On[r>>16&255]+On[r>>24&255]).toUpperCase()}function Vn(t,e,n){return Math.max(e,Math.min(n,t))}function Wn(t,e){return(t%e+e)%e}function Gn(t,e,n){return(1-n)*t+n*e}function Hn(t){return 0==(t&t-1)&&0!==t}function jn(t){return Math.pow(2,Math.ceil(Math.log(t)/Math.LN2))}function qn(t){return Math.pow(2,Math.floor(Math.log(t)/Math.LN2))}var Xn=Object.freeze({__proto__:null,DEG2RAD:zn,RAD2DEG:Bn,generateUUID:Un,clamp:Vn,euclideanModulo:Wn,mapLinear:function(t,e,n,r,s){return r+(t-e)*(s-r)/(n-e)},inverseLerp:function(t,e,n){return t!==e?(n-t)/(e-t):0},lerp:Gn,damp:function(t,e,n,r){return Gn(t,e,1-Math.exp(-n*r))},pingpong:function(t,e=1){return e-Math.abs(Wn(t,2*e)-e)},smoothstep:function(t,e,n){return t<=e?0:t>=n?1:(t=(t-e)/(n-e))*t*(3-2*t)},smootherstep:function(t,e,n){return t<=e?0:t>=n?1:(t=(t-e)/(n-e))*t*t*(t*(6*t-15)+10)},randInt:function(t,e){return t+Math.floor(Math.random()*(e-t+1))},randFloat:function(t,e){return t+Math.random()*(e-t)},randFloatSpread:function(t){return t*(.5-Math.random())},seededRandom:function(t){return void 0!==t&&(Pn=t%2147483647),Pn=16807*Pn%2147483647,(Pn-1)/2147483646},degToRad:function(t){return t*zn},radToDeg:function(t){return t*Bn},isPowerOfTwo:Hn,ceilPowerOfTwo:jn,floorPowerOfTwo:qn,setQuaternionFromProperEuler:function(t,e,n,r,s){const i=Math.cos,a=Math.sin,o=i(n/2),l=a(n/2),u=i((e+r)/2),c=a((e+r)/2),h=i((e-r)/2),d=a((e-r)/2),p=i((r-e)/2),f=a((r-e)/2);switch(s){case\"XYX\":t.set(o*c,l*h,l*d,o*u);break;case\"YZY\":t.set(l*d,o*c,l*h,o*u);break;case\"ZXZ\":t.set(l*h,l*d,o*c,o*u);break;case\"XZX\":t.set(o*c,l*f,l*p,o*u);break;case\"YXY\":t.set(l*p,o*c,l*f,o*u);break;case\"ZYZ\":t.set(l*f,l*p,o*c,o*u);break;default:console.warn(\"THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: \"+s)}}});class Kn{constructor(t=0,e=0){this.x=t,this.y=e}get width(){return this.x}set width(t){this.x=t}get height(){return this.y}set height(t){this.y=t}set(t,e){return this.x=t,this.y=e,this}setScalar(t){return this.x=t,this.y=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;default:throw new Error(\"index is out of range: \"+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error(\"index is out of range: \"+t)}}clone(){return new this.constructor(this.x,this.y)}copy(t){return this.x=t.x,this.y=t.y,this}add(t,e){return void 0!==e?(console.warn(\"THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.\"),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this)}addScalar(t){return this.x+=t,this.y+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this}sub(t,e){return void 0!==e?(console.warn(\"THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.\"),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this)}subScalar(t){return this.x-=t,this.y-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this}multiply(t){return this.x*=t.x,this.y*=t.y,this}multiplyScalar(t){return this.x*=t,this.y*=t,this}divide(t){return this.x/=t.x,this.y/=t.y,this}divideScalar(t){return this.multiplyScalar(1/t)}applyMatrix3(t){const e=this.x,n=this.y,r=t.elements;return this.x=r[0]*e+r[3]*n+r[6],this.y=r[1]*e+r[4]*n+r[7],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,n=this.y-t.y;return e*e+n*n}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this}equals(t){return t.x===this.x&&t.y===this.y}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t}fromBufferAttribute(t,e,n){return void 0!==n&&console.warn(\"THREE.Vector2: offset has been removed from .fromBufferAttribute().\"),this.x=t.getX(e),this.y=t.getY(e),this}rotateAround(t,e){const n=Math.cos(e),r=Math.sin(e),s=this.x-t.x,i=this.y-t.y;return this.x=s*n-i*r+t.x,this.y=s*r+i*n+t.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}}Kn.prototype.isVector2=!0;class Yn{constructor(){this.elements=[1,0,0,0,1,0,0,0,1],arguments.length>0&&console.error(\"THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.\")}set(t,e,n,r,s,i,a,o,l){const u=this.elements;return u[0]=t,u[1]=r,u[2]=a,u[3]=e,u[4]=s,u[5]=o,u[6]=n,u[7]=i,u[8]=l,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(t){const e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],this}extractBasis(t,e,n){return t.setFromMatrix3Column(this,0),e.setFromMatrix3Column(this,1),n.setFromMatrix3Column(this,2),this}setFromMatrix4(t){const e=t.elements;return this.set(e[0],e[4],e[8],e[1],e[5],e[9],e[2],e[6],e[10]),this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const n=t.elements,r=e.elements,s=this.elements,i=n[0],a=n[3],o=n[6],l=n[1],u=n[4],c=n[7],h=n[2],d=n[5],p=n[8],f=r[0],m=r[3],g=r[6],y=r[1],x=r[4],b=r[7],v=r[2],w=r[5],S=r[8];return s[0]=i*f+a*y+o*v,s[3]=i*m+a*x+o*w,s[6]=i*g+a*b+o*S,s[1]=l*f+u*y+c*v,s[4]=l*m+u*x+c*w,s[7]=l*g+u*b+c*S,s[2]=h*f+d*y+p*v,s[5]=h*m+d*x+p*w,s[8]=h*g+d*b+p*S,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[3]*=t,e[6]*=t,e[1]*=t,e[4]*=t,e[7]*=t,e[2]*=t,e[5]*=t,e[8]*=t,this}determinant(){const t=this.elements,e=t[0],n=t[1],r=t[2],s=t[3],i=t[4],a=t[5],o=t[6],l=t[7],u=t[8];return e*i*u-e*a*l-n*s*u+n*a*o+r*s*l-r*i*o}invert(){const t=this.elements,e=t[0],n=t[1],r=t[2],s=t[3],i=t[4],a=t[5],o=t[6],l=t[7],u=t[8],c=u*i-a*l,h=a*o-u*s,d=l*s-i*o,p=e*c+n*h+r*d;if(0===p)return this.set(0,0,0,0,0,0,0,0,0);const f=1/p;return t[0]=c*f,t[1]=(r*l-u*n)*f,t[2]=(a*n-r*i)*f,t[3]=h*f,t[4]=(u*e-r*o)*f,t[5]=(r*s-a*e)*f,t[6]=d*f,t[7]=(n*o-l*e)*f,t[8]=(i*e-n*s)*f,this}transpose(){let t;const e=this.elements;return t=e[1],e[1]=e[3],e[3]=t,t=e[2],e[2]=e[6],e[6]=t,t=e[5],e[5]=e[7],e[7]=t,this}getNormalMatrix(t){return this.setFromMatrix4(t).invert().transpose()}transposeIntoArray(t){const e=this.elements;return t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8],this}setUvTransform(t,e,n,r,s,i,a){const o=Math.cos(s),l=Math.sin(s);return this.set(n*o,n*l,-n*(o*i+l*a)+i+t,-r*l,r*o,-r*(-l*i+o*a)+a+e,0,0,1),this}scale(t,e){const n=this.elements;return n[0]*=t,n[3]*=t,n[6]*=t,n[1]*=e,n[4]*=e,n[7]*=e,this}rotate(t){const e=Math.cos(t),n=Math.sin(t),r=this.elements,s=r[0],i=r[3],a=r[6],o=r[1],l=r[4],u=r[7];return r[0]=e*s+n*o,r[3]=e*i+n*l,r[6]=e*a+n*u,r[1]=-n*s+e*o,r[4]=-n*i+e*l,r[7]=-n*a+e*u,this}translate(t,e){const n=this.elements;return n[0]+=t*n[2],n[3]+=t*n[5],n[6]+=t*n[8],n[1]+=e*n[2],n[4]+=e*n[5],n[7]+=e*n[8],this}equals(t){const e=this.elements,n=t.elements;for(let t=0;t<9;t++)if(e[t]!==n[t])return!1;return!0}fromArray(t,e=0){for(let n=0;n<9;n++)this.elements[n]=t[n+e];return this}toArray(t=[],e=0){const n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t}clone(){return(new this.constructor).fromArray(this.elements)}}let Zn;Yn.prototype.isMatrix3=!0;class Jn{static getDataURL(t){if(/^data:/i.test(t.src))return t.src;if(\"undefined\"==typeof HTMLCanvasElement)return t.src;let e;if(t instanceof HTMLCanvasElement)e=t;else{void 0===Zn&&(Zn=document.createElementNS(\"http://www.w3.org/1999/xhtml\",\"canvas\")),Zn.width=t.width,Zn.height=t.height;const n=Zn.getContext(\"2d\");t instanceof ImageData?n.putImageData(t,0,0):n.drawImage(t,0,0,t.width,t.height),e=Zn}return e.width>2048||e.height>2048?(console.warn(\"THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons\",t),e.toDataURL(\"image/jpeg\",.6)):e.toDataURL(\"image/png\")}}let Qn=0;class tr extends $n{constructor(t=tr.DEFAULT_IMAGE,e=tr.DEFAULT_MAPPING,n=dt,r=dt,s=bt,i=St,a=Pt,o=_t,l=1,u=Ye){super(),Object.defineProperty(this,\"id\",{value:Qn++}),this.uuid=Un(),this.name=\"\",this.image=t,this.mipmaps=[],this.mapping=e,this.wrapS=n,this.wrapT=r,this.magFilter=s,this.minFilter=i,this.anisotropy=l,this.format=a,this.internalFormat=null,this.type=o,this.offset=new Kn(0,0),this.repeat=new Kn(1,1),this.center=new Kn(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new Yn,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=u,this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return(new this.constructor).copy(this)}copy(t){return this.name=t.name,this.image=t.image,this.mipmaps=t.mipmaps.slice(0),this.mapping=t.mapping,this.wrapS=t.wrapS,this.wrapT=t.wrapT,this.magFilter=t.magFilter,this.minFilter=t.minFilter,this.anisotropy=t.anisotropy,this.format=t.format,this.internalFormat=t.internalFormat,this.type=t.type,this.offset.copy(t.offset),this.repeat.copy(t.repeat),this.center.copy(t.center),this.rotation=t.rotation,this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrix.copy(t.matrix),this.generateMipmaps=t.generateMipmaps,this.premultiplyAlpha=t.premultiplyAlpha,this.flipY=t.flipY,this.unpackAlignment=t.unpackAlignment,this.encoding=t.encoding,this}toJSON(t){const e=void 0===t||\"string\"==typeof t;if(!e&&void 0!==t.textures[this.uuid])return t.textures[this.uuid];const n={metadata:{version:4.5,type:\"Texture\",generator:\"Texture.toJSON\"},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};if(void 0!==this.image){const r=this.image;if(void 0===r.uuid&&(r.uuid=Un()),!e&&void 0===t.images[r.uuid]){let e;if(Array.isArray(r)){e=[];for(let t=0,n=r.length;t<n;t++)r[t].isDataTexture?e.push(er(r[t].image)):e.push(er(r[t]))}else e=er(r);t.images[r.uuid]={uuid:r.uuid,url:e}}n.image=r.uuid}return e||(t.textures[this.uuid]=n),n}dispose(){this.dispatchEvent({type:\"dispose\"})}transformUv(t){if(this.mapping!==st)return t;if(t.applyMatrix3(this.matrix),t.x<0||t.x>1)switch(this.wrapS){case ht:t.x=t.x-Math.floor(t.x);break;case dt:t.x=t.x<0?0:1;break;case pt:1===Math.abs(Math.floor(t.x)%2)?t.x=Math.ceil(t.x)-t.x:t.x=t.x-Math.floor(t.x)}if(t.y<0||t.y>1)switch(this.wrapT){case ht:t.y=t.y-Math.floor(t.y);break;case dt:t.y=t.y<0?0:1;break;case pt:1===Math.abs(Math.floor(t.y)%2)?t.y=Math.ceil(t.y)-t.y:t.y=t.y-Math.floor(t.y)}return this.flipY&&(t.y=1-t.y),t}set needsUpdate(t){!0===t&&this.version++}}function er(t){return\"undefined\"!=typeof HTMLImageElement&&t instanceof HTMLImageElement||\"undefined\"!=typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement||\"undefined\"!=typeof ImageBitmap&&t instanceof ImageBitmap?Jn.getDataURL(t):t.data?{data:Array.prototype.slice.call(t.data),width:t.width,height:t.height,type:t.data.constructor.name}:(console.warn(\"THREE.Texture: Unable to serialize Texture.\"),{})}tr.DEFAULT_IMAGE=void 0,tr.DEFAULT_MAPPING=st,tr.prototype.isTexture=!0;class nr{constructor(t=0,e=0,n=0,r=1){this.x=t,this.y=e,this.z=n,this.w=r}get width(){return this.z}set width(t){this.z=t}get height(){return this.w}set height(t){this.w=t}set(t,e,n,r){return this.x=t,this.y=e,this.z=n,this.w=r,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this.w=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setW(t){return this.w=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;case 3:this.w=e;break;default:throw new Error(\"index is out of range: \"+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error(\"index is out of range: \"+t)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=void 0!==t.w?t.w:1,this}add(t,e){return void 0!==e?(console.warn(\"THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.\"),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this)}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this.w=t.w+e.w,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this.w+=t.w*e,this}sub(t,e){return void 0!==e?(console.warn(\"THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.\"),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this)}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this.w-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this.w=t.w-e.w,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this.w*=t.w,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this}applyMatrix4(t){const e=this.x,n=this.y,r=this.z,s=this.w,i=t.elements;return this.x=i[0]*e+i[4]*n+i[8]*r+i[12]*s,this.y=i[1]*e+i[5]*n+i[9]*r+i[13]*s,this.z=i[2]*e+i[6]*n+i[10]*r+i[14]*s,this.w=i[3]*e+i[7]*n+i[11]*r+i[15]*s,this}divideScalar(t){return this.multiplyScalar(1/t)}setAxisAngleFromQuaternion(t){this.w=2*Math.acos(t.w);const e=Math.sqrt(1-t.w*t.w);return e<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=t.x/e,this.y=t.y/e,this.z=t.z/e),this}setAxisAngleFromRotationMatrix(t){let e,n,r,s;const i=.01,a=.1,o=t.elements,l=o[0],u=o[4],c=o[8],h=o[1],d=o[5],p=o[9],f=o[2],m=o[6],g=o[10];if(Math.abs(u-h)<i&&Math.abs(c-f)<i&&Math.abs(p-m)<i){if(Math.abs(u+h)<a&&Math.abs(c+f)<a&&Math.abs(p+m)<a&&Math.abs(l+d+g-3)<a)return this.set(1,0,0,0),this;e=Math.PI;const t=(l+1)/2,o=(d+1)/2,y=(g+1)/2,x=(u+h)/4,b=(c+f)/4,v=(p+m)/4;return t>o&&t>y?t<i?(n=0,r=.707106781,s=.707106781):(n=Math.sqrt(t),r=x/n,s=b/n):o>y?o<i?(n=.707106781,r=0,s=.707106781):(r=Math.sqrt(o),n=x/r,s=v/r):y<i?(n=.707106781,r=.707106781,s=0):(s=Math.sqrt(y),n=b/s,r=v/s),this.set(n,r,s,e),this}let y=Math.sqrt((m-p)*(m-p)+(c-f)*(c-f)+(h-u)*(h-u));return Math.abs(y)<.001&&(y=1),this.x=(m-p)/y,this.y=(c-f)/y,this.z=(h-u)/y,this.w=Math.acos((l+d+g-1)/2),this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this.w=Math.min(this.w,t.w),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this.w=Math.max(this.w,t.w),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this.w=Math.max(t.w,Math.min(e.w,this.w)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this.w=Math.max(t,Math.min(e,this.w)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this.w+=(t.w-this.w)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this.z=t.z+(e.z-t.z)*n,this.w=t.w+(e.w-t.w)*n,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this.w=t[e+3],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,t}fromBufferAttribute(t,e,n){return void 0!==n&&console.warn(\"THREE.Vector4: offset has been removed from .fromBufferAttribute().\"),this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this.w=t.getW(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}}nr.prototype.isVector4=!0;class rr extends $n{constructor(t,e,n={}){super(),this.width=t,this.height=e,this.depth=1,this.scissor=new nr(0,0,t,e),this.scissorTest=!1,this.viewport=new nr(0,0,t,e),this.texture=new tr(void 0,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.encoding),this.texture.isRenderTargetTexture=!0,this.texture.image={width:t,height:e,depth:1},this.texture.generateMipmaps=void 0!==n.generateMipmaps&&n.generateMipmaps,this.texture.internalFormat=void 0!==n.internalFormat?n.internalFormat:null,this.texture.minFilter=void 0!==n.minFilter?n.minFilter:bt,this.depthBuffer=void 0===n.depthBuffer||n.depthBuffer,this.stencilBuffer=void 0!==n.stencilBuffer&&n.stencilBuffer,this.depthTexture=void 0!==n.depthTexture?n.depthTexture:null}setTexture(t){t.image={width:this.width,height:this.height,depth:this.depth},this.texture=t}setSize(t,e,n=1){this.width===t&&this.height===e&&this.depth===n||(this.width=t,this.height=e,this.depth=n,this.texture.image.width=t,this.texture.image.height=e,this.texture.image.depth=n,this.dispose()),this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e)}clone(){return(new this.constructor).copy(this)}copy(t){return this.width=t.width,this.height=t.height,this.depth=t.depth,this.viewport.copy(t.viewport),this.texture=t.texture.clone(),this.texture.image={...this.texture.image},this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,this.depthTexture=t.depthTexture,this}dispose(){this.dispatchEvent({type:\"dispose\"})}}rr.prototype.isWebGLRenderTarget=!0;class sr extends rr{constructor(t,e,n){super(t,e);const r=this.texture;this.texture=[];for(let t=0;t<n;t++)this.texture[t]=r.clone()}setSize(t,e,n=1){if(this.width!==t||this.height!==e||this.depth!==n){this.width=t,this.height=e,this.depth=n;for(let r=0,s=this.texture.length;r<s;r++)this.texture[r].image.width=t,this.texture[r].image.height=e,this.texture[r].image.depth=n;this.dispose()}return this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e),this}copy(t){this.dispose(),this.width=t.width,this.height=t.height,this.depth=t.depth,this.viewport.set(0,0,this.width,this.height),this.scissor.set(0,0,this.width,this.height),this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,this.depthTexture=t.depthTexture,this.texture.length=0;for(let e=0,n=t.texture.length;e<n;e++)this.texture[e]=t.texture[e].clone();return this}}sr.prototype.isWebGLMultipleRenderTargets=!0;class ir extends rr{constructor(t,e,n){super(t,e,n),this.samples=4}copy(t){return super.copy.call(this,t),this.samples=t.samples,this}}ir.prototype.isWebGLMultisampleRenderTarget=!0;class ar{constructor(t=0,e=0,n=0,r=1){this._x=t,this._y=e,this._z=n,this._w=r}static slerp(t,e,n,r){return console.warn(\"THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead.\"),n.slerpQuaternions(t,e,r)}static slerpFlat(t,e,n,r,s,i,a){let o=n[r+0],l=n[r+1],u=n[r+2],c=n[r+3];const h=s[i+0],d=s[i+1],p=s[i+2],f=s[i+3];if(0===a)return t[e+0]=o,t[e+1]=l,t[e+2]=u,void(t[e+3]=c);if(1===a)return t[e+0]=h,t[e+1]=d,t[e+2]=p,void(t[e+3]=f);if(c!==f||o!==h||l!==d||u!==p){let t=1-a;const e=o*h+l*d+u*p+c*f,n=e>=0?1:-1,r=1-e*e;if(r>Number.EPSILON){const s=Math.sqrt(r),i=Math.atan2(s,e*n);t=Math.sin(t*i)/s,a=Math.sin(a*i)/s}const s=a*n;if(o=o*t+h*s,l=l*t+d*s,u=u*t+p*s,c=c*t+f*s,t===1-a){const t=1/Math.sqrt(o*o+l*l+u*u+c*c);o*=t,l*=t,u*=t,c*=t}}t[e]=o,t[e+1]=l,t[e+2]=u,t[e+3]=c}static multiplyQuaternionsFlat(t,e,n,r,s,i){const a=n[r],o=n[r+1],l=n[r+2],u=n[r+3],c=s[i],h=s[i+1],d=s[i+2],p=s[i+3];return t[e]=a*p+u*c+o*d-l*h,t[e+1]=o*p+u*h+l*c-a*d,t[e+2]=l*p+u*d+a*h-o*c,t[e+3]=u*p-a*c-o*h-l*d,t}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get w(){return this._w}set w(t){this._w=t,this._onChangeCallback()}set(t,e,n,r){return this._x=t,this._y=e,this._z=n,this._w=r,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this._onChangeCallback(),this}setFromEuler(t,e){if(!t||!t.isEuler)throw new Error(\"THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.\");const n=t._x,r=t._y,s=t._z,i=t._order,a=Math.cos,o=Math.sin,l=a(n/2),u=a(r/2),c=a(s/2),h=o(n/2),d=o(r/2),p=o(s/2);switch(i){case\"XYZ\":this._x=h*u*c+l*d*p,this._y=l*d*c-h*u*p,this._z=l*u*p+h*d*c,this._w=l*u*c-h*d*p;break;case\"YXZ\":this._x=h*u*c+l*d*p,this._y=l*d*c-h*u*p,this._z=l*u*p-h*d*c,this._w=l*u*c+h*d*p;break;case\"ZXY\":this._x=h*u*c-l*d*p,this._y=l*d*c+h*u*p,this._z=l*u*p+h*d*c,this._w=l*u*c-h*d*p;break;case\"ZYX\":this._x=h*u*c-l*d*p,this._y=l*d*c+h*u*p,this._z=l*u*p-h*d*c,this._w=l*u*c+h*d*p;break;case\"YZX\":this._x=h*u*c+l*d*p,this._y=l*d*c+h*u*p,this._z=l*u*p-h*d*c,this._w=l*u*c-h*d*p;break;case\"XZY\":this._x=h*u*c-l*d*p,this._y=l*d*c-h*u*p,this._z=l*u*p+h*d*c,this._w=l*u*c+h*d*p;break;default:console.warn(\"THREE.Quaternion: .setFromEuler() encountered an unknown order: \"+i)}return!1!==e&&this._onChangeCallback(),this}setFromAxisAngle(t,e){const n=e/2,r=Math.sin(n);return this._x=t.x*r,this._y=t.y*r,this._z=t.z*r,this._w=Math.cos(n),this._onChangeCallback(),this}setFromRotationMatrix(t){const e=t.elements,n=e[0],r=e[4],s=e[8],i=e[1],a=e[5],o=e[9],l=e[2],u=e[6],c=e[10],h=n+a+c;if(h>0){const t=.5/Math.sqrt(h+1);this._w=.25/t,this._x=(u-o)*t,this._y=(s-l)*t,this._z=(i-r)*t}else if(n>a&&n>c){const t=2*Math.sqrt(1+n-a-c);this._w=(u-o)/t,this._x=.25*t,this._y=(r+i)/t,this._z=(s+l)/t}else if(a>c){const t=2*Math.sqrt(1+a-n-c);this._w=(s-l)/t,this._x=(r+i)/t,this._y=.25*t,this._z=(o+u)/t}else{const t=2*Math.sqrt(1+c-n-a);this._w=(i-r)/t,this._x=(s+l)/t,this._y=(o+u)/t,this._z=.25*t}return this._onChangeCallback(),this}setFromUnitVectors(t,e){let n=t.dot(e)+1;return n<Number.EPSILON?(n=0,Math.abs(t.x)>Math.abs(t.z)?(this._x=-t.y,this._y=t.x,this._z=0,this._w=n):(this._x=0,this._y=-t.z,this._z=t.y,this._w=n)):(this._x=t.y*e.z-t.z*e.y,this._y=t.z*e.x-t.x*e.z,this._z=t.x*e.y-t.y*e.x,this._w=n),this.normalize()}angleTo(t){return 2*Math.acos(Math.abs(Vn(this.dot(t),-1,1)))}rotateTowards(t,e){const n=this.angleTo(t);if(0===n)return this;const r=Math.min(1,e/n);return this.slerp(t,r),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let t=this.length();return 0===t?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this._onChangeCallback(),this}multiply(t,e){return void 0!==e?(console.warn(\"THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.\"),this.multiplyQuaternions(t,e)):this.multiplyQuaternions(this,t)}premultiply(t){return this.multiplyQuaternions(t,this)}multiplyQuaternions(t,e){const n=t._x,r=t._y,s=t._z,i=t._w,a=e._x,o=e._y,l=e._z,u=e._w;return this._x=n*u+i*a+r*l-s*o,this._y=r*u+i*o+s*a-n*l,this._z=s*u+i*l+n*o-r*a,this._w=i*u-n*a-r*o-s*l,this._onChangeCallback(),this}slerp(t,e){if(0===e)return this;if(1===e)return this.copy(t);const n=this._x,r=this._y,s=this._z,i=this._w;let a=i*t._w+n*t._x+r*t._y+s*t._z;if(a<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,a=-a):this.copy(t),a>=1)return this._w=i,this._x=n,this._y=r,this._z=s,this;const o=1-a*a;if(o<=Number.EPSILON){const t=1-e;return this._w=t*i+e*this._w,this._x=t*n+e*this._x,this._y=t*r+e*this._y,this._z=t*s+e*this._z,this.normalize(),this._onChangeCallback(),this}const l=Math.sqrt(o),u=Math.atan2(l,a),c=Math.sin((1-e)*u)/l,h=Math.sin(e*u)/l;return this._w=i*c+this._w*h,this._x=n*c+this._x*h,this._y=r*c+this._y*h,this._z=s*c+this._z*h,this._onChangeCallback(),this}slerpQuaternions(t,e,n){this.copy(t).slerp(e,n)}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w}fromArray(t,e=0){return this._x=t[e],this._y=t[e+1],this._z=t[e+2],this._w=t[e+3],this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._w,t}fromBufferAttribute(t,e){return this._x=t.getX(e),this._y=t.getY(e),this._z=t.getZ(e),this._w=t.getW(e),this}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}}ar.prototype.isQuaternion=!0;class or{constructor(t=0,e=0,n=0){this.x=t,this.y=e,this.z=n}set(t,e,n){return void 0===n&&(n=this.z),this.x=t,this.y=e,this.z=n,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;default:throw new Error(\"index is out of range: \"+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error(\"index is out of range: \"+t)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}add(t,e){return void 0!==e?(console.warn(\"THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.\"),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this.z+=t.z,this)}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this}sub(t,e){return void 0!==e?(console.warn(\"THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.\"),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this.z-=t.z,this)}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this}multiply(t,e){return void 0!==e?(console.warn(\"THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.\"),this.multiplyVectors(t,e)):(this.x*=t.x,this.y*=t.y,this.z*=t.z,this)}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this}multiplyVectors(t,e){return this.x=t.x*e.x,this.y=t.y*e.y,this.z=t.z*e.z,this}applyEuler(t){return t&&t.isEuler||console.error(\"THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.\"),this.applyQuaternion(ur.setFromEuler(t))}applyAxisAngle(t,e){return this.applyQuaternion(ur.setFromAxisAngle(t,e))}applyMatrix3(t){const e=this.x,n=this.y,r=this.z,s=t.elements;return this.x=s[0]*e+s[3]*n+s[6]*r,this.y=s[1]*e+s[4]*n+s[7]*r,this.z=s[2]*e+s[5]*n+s[8]*r,this}applyNormalMatrix(t){return this.applyMatrix3(t).normalize()}applyMatrix4(t){const e=this.x,n=this.y,r=this.z,s=t.elements,i=1/(s[3]*e+s[7]*n+s[11]*r+s[15]);return this.x=(s[0]*e+s[4]*n+s[8]*r+s[12])*i,this.y=(s[1]*e+s[5]*n+s[9]*r+s[13])*i,this.z=(s[2]*e+s[6]*n+s[10]*r+s[14])*i,this}applyQuaternion(t){const e=this.x,n=this.y,r=this.z,s=t.x,i=t.y,a=t.z,o=t.w,l=o*e+i*r-a*n,u=o*n+a*e-s*r,c=o*r+s*n-i*e,h=-s*e-i*n-a*r;return this.x=l*o+h*-s+u*-a-c*-i,this.y=u*o+h*-i+c*-s-l*-a,this.z=c*o+h*-a+l*-i-u*-s,this}project(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)}unproject(t){return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)}transformDirection(t){const e=this.x,n=this.y,r=this.z,s=t.elements;return this.x=s[0]*e+s[4]*n+s[8]*r,this.y=s[1]*e+s[5]*n+s[9]*r,this.z=s[2]*e+s[6]*n+s[10]*r,this.normalize()}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this}divideScalar(t){return this.multiplyScalar(1/t)}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this.z=t.z+(e.z-t.z)*n,this}cross(t,e){return void 0!==e?(console.warn(\"THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.\"),this.crossVectors(t,e)):this.crossVectors(this,t)}crossVectors(t,e){const n=t.x,r=t.y,s=t.z,i=e.x,a=e.y,o=e.z;return this.x=r*o-s*a,this.y=s*i-n*o,this.z=n*a-r*i,this}projectOnVector(t){const e=t.lengthSq();if(0===e)return this.set(0,0,0);const n=t.dot(this)/e;return this.copy(t).multiplyScalar(n)}projectOnPlane(t){return lr.copy(this).projectOnVector(t),this.sub(lr)}reflect(t){return this.sub(lr.copy(t).multiplyScalar(2*this.dot(t)))}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(0===e)return Math.PI/2;const n=this.dot(t)/e;return Math.acos(Vn(n,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,n=this.y-t.y,r=this.z-t.z;return e*e+n*n+r*r}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)}setFromSpherical(t){return this.setFromSphericalCoords(t.radius,t.phi,t.theta)}setFromSphericalCoords(t,e,n){const r=Math.sin(e)*t;return this.x=r*Math.sin(n),this.y=Math.cos(e)*t,this.z=r*Math.cos(n),this}setFromCylindrical(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)}setFromCylindricalCoords(t,e,n){return this.x=t*Math.sin(e),this.y=n,this.z=t*Math.cos(e),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this}setFromMatrixScale(t){const e=this.setFromMatrixColumn(t,0).length(),n=this.setFromMatrixColumn(t,1).length(),r=this.setFromMatrixColumn(t,2).length();return this.x=e,this.y=n,this.z=r,this}setFromMatrixColumn(t,e){return this.fromArray(t.elements,4*e)}setFromMatrix3Column(t,e){return this.fromArray(t.elements,3*e)}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t}fromBufferAttribute(t,e,n){return void 0!==n&&console.warn(\"THREE.Vector3: offset has been removed from .fromBufferAttribute().\"),this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}}or.prototype.isVector3=!0;const lr=new or,ur=new ar;class cr{constructor(t=new or(1/0,1/0,1/0),e=new or(-1/0,-1/0,-1/0)){this.min=t,this.max=e}set(t,e){return this.min.copy(t),this.max.copy(e),this}setFromArray(t){let e=1/0,n=1/0,r=1/0,s=-1/0,i=-1/0,a=-1/0;for(let o=0,l=t.length;o<l;o+=3){const l=t[o],u=t[o+1],c=t[o+2];l<e&&(e=l),u<n&&(n=u),c<r&&(r=c),l>s&&(s=l),u>i&&(i=u),c>a&&(a=c)}return this.min.set(e,n,r),this.max.set(s,i,a),this}setFromBufferAttribute(t){let e=1/0,n=1/0,r=1/0,s=-1/0,i=-1/0,a=-1/0;for(let o=0,l=t.count;o<l;o++){const l=t.getX(o),u=t.getY(o),c=t.getZ(o);l<e&&(e=l),u<n&&(n=u),c<r&&(r=c),l>s&&(s=l),u>i&&(i=u),c>a&&(a=c)}return this.min.set(e,n,r),this.max.set(s,i,a),this}setFromPoints(t){this.makeEmpty();for(let e=0,n=t.length;e<n;e++)this.expandByPoint(t[e]);return this}setFromCenterAndSize(t,e){const n=dr.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(n),this.max.copy(t).add(n),this}setFromObject(t){return this.makeEmpty(),this.expandByObject(t)}clone(){return(new this.constructor).copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(t){return this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}expandByObject(t){t.updateWorldMatrix(!1,!1);const e=t.geometry;void 0!==e&&(null===e.boundingBox&&e.computeBoundingBox(),pr.copy(e.boundingBox),pr.applyMatrix4(t.matrixWorld),this.union(pr));const n=t.children;for(let t=0,e=n.length;t<e;t++)this.expandByObject(n[t]);return this}containsPoint(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y||t.z<this.min.z||t.z>this.max.z)}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z}getParameter(t,e){return e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y||t.max.z<this.min.z||t.min.z>this.max.z)}intersectsSphere(t){return this.clampPoint(t.center,dr),dr.distanceToSquared(t.center)<=t.radius*t.radius}intersectsPlane(t){let e,n;return t.normal.x>0?(e=t.normal.x*this.min.x,n=t.normal.x*this.max.x):(e=t.normal.x*this.max.x,n=t.normal.x*this.min.x),t.normal.y>0?(e+=t.normal.y*this.min.y,n+=t.normal.y*this.max.y):(e+=t.normal.y*this.max.y,n+=t.normal.y*this.min.y),t.normal.z>0?(e+=t.normal.z*this.min.z,n+=t.normal.z*this.max.z):(e+=t.normal.z*this.max.z,n+=t.normal.z*this.min.z),e<=-t.constant&&n>=-t.constant}intersectsTriangle(t){if(this.isEmpty())return!1;this.getCenter(vr),wr.subVectors(this.max,vr),fr.subVectors(t.a,vr),mr.subVectors(t.b,vr),gr.subVectors(t.c,vr),yr.subVectors(mr,fr),xr.subVectors(gr,mr),br.subVectors(fr,gr);let e=[0,-yr.z,yr.y,0,-xr.z,xr.y,0,-br.z,br.y,yr.z,0,-yr.x,xr.z,0,-xr.x,br.z,0,-br.x,-yr.y,yr.x,0,-xr.y,xr.x,0,-br.y,br.x,0];return!!_r(e,fr,mr,gr,wr)&&(e=[1,0,0,0,1,0,0,0,1],!!_r(e,fr,mr,gr,wr)&&(Sr.crossVectors(yr,xr),e=[Sr.x,Sr.y,Sr.z],_r(e,fr,mr,gr,wr)))}clampPoint(t,e){return e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return dr.copy(t).clamp(this.min,this.max).sub(t).length()}getBoundingSphere(t){return this.getCenter(t.center),t.radius=.5*this.getSize(dr).length(),t}intersect(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}applyMatrix4(t){return this.isEmpty()||(hr[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),hr[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),hr[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),hr[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),hr[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),hr[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),hr[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),hr[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(hr)),this}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}cr.prototype.isBox3=!0;const hr=[new or,new or,new or,new or,new or,new or,new or,new or],dr=new or,pr=new cr,fr=new or,mr=new or,gr=new or,yr=new or,xr=new or,br=new or,vr=new or,wr=new or,Sr=new or,Tr=new or;function _r(t,e,n,r,s){for(let i=0,a=t.length-3;i<=a;i+=3){Tr.fromArray(t,i);const a=s.x*Math.abs(Tr.x)+s.y*Math.abs(Tr.y)+s.z*Math.abs(Tr.z),o=e.dot(Tr),l=n.dot(Tr),u=r.dot(Tr);if(Math.max(-Math.max(o,l,u),Math.min(o,l,u))>a)return!1}return!0}const Mr=new cr,kr=new or,Er=new or,Ir=new or;class Cr{constructor(t=new or,e=-1){this.center=t,this.radius=e}set(t,e){return this.center.copy(t),this.radius=e,this}setFromPoints(t,e){const n=this.center;void 0!==e?n.copy(e):Mr.setFromPoints(t).getCenter(n);let r=0;for(let e=0,s=t.length;e<s;e++)r=Math.max(r,n.distanceToSquared(t[e]));return this.radius=Math.sqrt(r),this}copy(t){return this.center.copy(t.center),this.radius=t.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(t){return t.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(t){return t.distanceTo(this.center)-this.radius}intersectsSphere(t){const e=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=e*e}intersectsBox(t){return t.intersectsSphere(this)}intersectsPlane(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius}clampPoint(t,e){const n=this.center.distanceToSquared(t);return e.copy(t),n>this.radius*this.radius&&(e.sub(this.center).normalize(),e.multiplyScalar(this.radius).add(this.center)),e}getBoundingBox(t){return this.isEmpty()?(t.makeEmpty(),t):(t.set(this.center,this.center),t.expandByScalar(this.radius),t)}applyMatrix4(t){return this.center.applyMatrix4(t),this.radius=this.radius*t.getMaxScaleOnAxis(),this}translate(t){return this.center.add(t),this}expandByPoint(t){Ir.subVectors(t,this.center);const e=Ir.lengthSq();if(e>this.radius*this.radius){const t=Math.sqrt(e),n=.5*(t-this.radius);this.center.add(Ir.multiplyScalar(n/t)),this.radius+=n}return this}union(t){return Er.subVectors(t.center,this.center).normalize().multiplyScalar(t.radius),this.expandByPoint(kr.copy(t.center).add(Er)),this.expandByPoint(kr.copy(t.center).sub(Er)),this}equals(t){return t.center.equals(this.center)&&t.radius===this.radius}clone(){return(new this.constructor).copy(this)}}const Nr=new or,Ar=new or,Rr=new or,Lr=new or,Dr=new or,Fr=new or,$r=new or;class Or{constructor(t=new or,e=new or(0,0,-1)){this.origin=t,this.direction=e}set(t,e){return this.origin.copy(t),this.direction.copy(e),this}copy(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this}at(t,e){return e.copy(this.direction).multiplyScalar(t).add(this.origin)}lookAt(t){return this.direction.copy(t).sub(this.origin).normalize(),this}recast(t){return this.origin.copy(this.at(t,Nr)),this}closestPointToPoint(t,e){e.subVectors(t,this.origin);const n=e.dot(this.direction);return n<0?e.copy(this.origin):e.copy(this.direction).multiplyScalar(n).add(this.origin)}distanceToPoint(t){return Math.sqrt(this.distanceSqToPoint(t))}distanceSqToPoint(t){const e=Nr.subVectors(t,this.origin).dot(this.direction);return e<0?this.origin.distanceToSquared(t):(Nr.copy(this.direction).multiplyScalar(e).add(this.origin),Nr.distanceToSquared(t))}distanceSqToSegment(t,e,n,r){Ar.copy(t).add(e).multiplyScalar(.5),Rr.copy(e).sub(t).normalize(),Lr.copy(this.origin).sub(Ar);const s=.5*t.distanceTo(e),i=-this.direction.dot(Rr),a=Lr.dot(this.direction),o=-Lr.dot(Rr),l=Lr.lengthSq(),u=Math.abs(1-i*i);let c,h,d,p;if(u>0)if(c=i*o-a,h=i*a-o,p=s*u,c>=0)if(h>=-p)if(h<=p){const t=1/u;c*=t,h*=t,d=c*(c+i*h+2*a)+h*(i*c+h+2*o)+l}else h=s,c=Math.max(0,-(i*h+a)),d=-c*c+h*(h+2*o)+l;else h=-s,c=Math.max(0,-(i*h+a)),d=-c*c+h*(h+2*o)+l;else h<=-p?(c=Math.max(0,-(-i*s+a)),h=c>0?-s:Math.min(Math.max(-s,-o),s),d=-c*c+h*(h+2*o)+l):h<=p?(c=0,h=Math.min(Math.max(-s,-o),s),d=h*(h+2*o)+l):(c=Math.max(0,-(i*s+a)),h=c>0?s:Math.min(Math.max(-s,-o),s),d=-c*c+h*(h+2*o)+l);else h=i>0?-s:s,c=Math.max(0,-(i*h+a)),d=-c*c+h*(h+2*o)+l;return n&&n.copy(this.direction).multiplyScalar(c).add(this.origin),r&&r.copy(Rr).multiplyScalar(h).add(Ar),d}intersectSphere(t,e){Nr.subVectors(t.center,this.origin);const n=Nr.dot(this.direction),r=Nr.dot(Nr)-n*n,s=t.radius*t.radius;if(r>s)return null;const i=Math.sqrt(s-r),a=n-i,o=n+i;return a<0&&o<0?null:a<0?this.at(o,e):this.at(a,e)}intersectsSphere(t){return this.distanceSqToPoint(t.center)<=t.radius*t.radius}distanceToPlane(t){const e=t.normal.dot(this.direction);if(0===e)return 0===t.distanceToPoint(this.origin)?0:null;const n=-(this.origin.dot(t.normal)+t.constant)/e;return n>=0?n:null}intersectPlane(t,e){const n=this.distanceToPlane(t);return null===n?null:this.at(n,e)}intersectsPlane(t){const e=t.distanceToPoint(this.origin);return 0===e||t.normal.dot(this.direction)*e<0}intersectBox(t,e){let n,r,s,i,a,o;const l=1/this.direction.x,u=1/this.direction.y,c=1/this.direction.z,h=this.origin;return l>=0?(n=(t.min.x-h.x)*l,r=(t.max.x-h.x)*l):(n=(t.max.x-h.x)*l,r=(t.min.x-h.x)*l),u>=0?(s=(t.min.y-h.y)*u,i=(t.max.y-h.y)*u):(s=(t.max.y-h.y)*u,i=(t.min.y-h.y)*u),n>i||s>r?null:((s>n||n!=n)&&(n=s),(i<r||r!=r)&&(r=i),c>=0?(a=(t.min.z-h.z)*c,o=(t.max.z-h.z)*c):(a=(t.max.z-h.z)*c,o=(t.min.z-h.z)*c),n>o||a>r?null:((a>n||n!=n)&&(n=a),(o<r||r!=r)&&(r=o),r<0?null:this.at(n>=0?n:r,e)))}intersectsBox(t){return null!==this.intersectBox(t,Nr)}intersectTriangle(t,e,n,r,s){Dr.subVectors(e,t),Fr.subVectors(n,t),$r.crossVectors(Dr,Fr);let i,a=this.direction.dot($r);if(a>0){if(r)return null;i=1}else{if(!(a<0))return null;i=-1,a=-a}Lr.subVectors(this.origin,t);const o=i*this.direction.dot(Fr.crossVectors(Lr,Fr));if(o<0)return null;const l=i*this.direction.dot(Dr.cross(Lr));if(l<0)return null;if(o+l>a)return null;const u=-i*Lr.dot($r);return u<0?null:this.at(u/a,s)}applyMatrix4(t){return this.origin.applyMatrix4(t),this.direction.transformDirection(t),this}equals(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}clone(){return(new this.constructor).copy(this)}}class Pr{constructor(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],arguments.length>0&&console.error(\"THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.\")}set(t,e,n,r,s,i,a,o,l,u,c,h,d,p,f,m){const g=this.elements;return g[0]=t,g[4]=e,g[8]=n,g[12]=r,g[1]=s,g[5]=i,g[9]=a,g[13]=o,g[2]=l,g[6]=u,g[10]=c,g[14]=h,g[3]=d,g[7]=p,g[11]=f,g[15]=m,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return(new Pr).fromArray(this.elements)}copy(t){const e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],e[9]=n[9],e[10]=n[10],e[11]=n[11],e[12]=n[12],e[13]=n[13],e[14]=n[14],e[15]=n[15],this}copyPosition(t){const e=this.elements,n=t.elements;return e[12]=n[12],e[13]=n[13],e[14]=n[14],this}setFromMatrix3(t){const e=t.elements;return this.set(e[0],e[3],e[6],0,e[1],e[4],e[7],0,e[2],e[5],e[8],0,0,0,0,1),this}extractBasis(t,e,n){return t.setFromMatrixColumn(this,0),e.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this}makeBasis(t,e,n){return this.set(t.x,e.x,n.x,0,t.y,e.y,n.y,0,t.z,e.z,n.z,0,0,0,0,1),this}extractRotation(t){const e=this.elements,n=t.elements,r=1/zr.setFromMatrixColumn(t,0).length(),s=1/zr.setFromMatrixColumn(t,1).length(),i=1/zr.setFromMatrixColumn(t,2).length();return e[0]=n[0]*r,e[1]=n[1]*r,e[2]=n[2]*r,e[3]=0,e[4]=n[4]*s,e[5]=n[5]*s,e[6]=n[6]*s,e[7]=0,e[8]=n[8]*i,e[9]=n[9]*i,e[10]=n[10]*i,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromEuler(t){t&&t.isEuler||console.error(\"THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.\");const e=this.elements,n=t.x,r=t.y,s=t.z,i=Math.cos(n),a=Math.sin(n),o=Math.cos(r),l=Math.sin(r),u=Math.cos(s),c=Math.sin(s);if(\"XYZ\"===t.order){const t=i*u,n=i*c,r=a*u,s=a*c;e[0]=o*u,e[4]=-o*c,e[8]=l,e[1]=n+r*l,e[5]=t-s*l,e[9]=-a*o,e[2]=s-t*l,e[6]=r+n*l,e[10]=i*o}else if(\"YXZ\"===t.order){const t=o*u,n=o*c,r=l*u,s=l*c;e[0]=t+s*a,e[4]=r*a-n,e[8]=i*l,e[1]=i*c,e[5]=i*u,e[9]=-a,e[2]=n*a-r,e[6]=s+t*a,e[10]=i*o}else if(\"ZXY\"===t.order){const t=o*u,n=o*c,r=l*u,s=l*c;e[0]=t-s*a,e[4]=-i*c,e[8]=r+n*a,e[1]=n+r*a,e[5]=i*u,e[9]=s-t*a,e[2]=-i*l,e[6]=a,e[10]=i*o}else if(\"ZYX\"===t.order){const t=i*u,n=i*c,r=a*u,s=a*c;e[0]=o*u,e[4]=r*l-n,e[8]=t*l+s,e[1]=o*c,e[5]=s*l+t,e[9]=n*l-r,e[2]=-l,e[6]=a*o,e[10]=i*o}else if(\"YZX\"===t.order){const t=i*o,n=i*l,r=a*o,s=a*l;e[0]=o*u,e[4]=s-t*c,e[8]=r*c+n,e[1]=c,e[5]=i*u,e[9]=-a*u,e[2]=-l*u,e[6]=n*c+r,e[10]=t-s*c}else if(\"XZY\"===t.order){const t=i*o,n=i*l,r=a*o,s=a*l;e[0]=o*u,e[4]=-c,e[8]=l*u,e[1]=t*c+s,e[5]=i*u,e[9]=n*c-r,e[2]=r*c-n,e[6]=a*u,e[10]=s*c+t}return e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromQuaternion(t){return this.compose(Ur,t,Vr)}lookAt(t,e,n){const r=this.elements;return Hr.subVectors(t,e),0===Hr.lengthSq()&&(Hr.z=1),Hr.normalize(),Wr.crossVectors(n,Hr),0===Wr.lengthSq()&&(1===Math.abs(n.z)?Hr.x+=1e-4:Hr.z+=1e-4,Hr.normalize(),Wr.crossVectors(n,Hr)),Wr.normalize(),Gr.crossVectors(Hr,Wr),r[0]=Wr.x,r[4]=Gr.x,r[8]=Hr.x,r[1]=Wr.y,r[5]=Gr.y,r[9]=Hr.y,r[2]=Wr.z,r[6]=Gr.z,r[10]=Hr.z,this}multiply(t,e){return void 0!==e?(console.warn(\"THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.\"),this.multiplyMatrices(t,e)):this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const n=t.elements,r=e.elements,s=this.elements,i=n[0],a=n[4],o=n[8],l=n[12],u=n[1],c=n[5],h=n[9],d=n[13],p=n[2],f=n[6],m=n[10],g=n[14],y=n[3],x=n[7],b=n[11],v=n[15],w=r[0],S=r[4],T=r[8],_=r[12],M=r[1],k=r[5],E=r[9],I=r[13],C=r[2],N=r[6],A=r[10],R=r[14],L=r[3],D=r[7],F=r[11],$=r[15];return s[0]=i*w+a*M+o*C+l*L,s[4]=i*S+a*k+o*N+l*D,s[8]=i*T+a*E+o*A+l*F,s[12]=i*_+a*I+o*R+l*$,s[1]=u*w+c*M+h*C+d*L,s[5]=u*S+c*k+h*N+d*D,s[9]=u*T+c*E+h*A+d*F,s[13]=u*_+c*I+h*R+d*$,s[2]=p*w+f*M+m*C+g*L,s[6]=p*S+f*k+m*N+g*D,s[10]=p*T+f*E+m*A+g*F,s[14]=p*_+f*I+m*R+g*$,s[3]=y*w+x*M+b*C+v*L,s[7]=y*S+x*k+b*N+v*D,s[11]=y*T+x*E+b*A+v*F,s[15]=y*_+x*I+b*R+v*$,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[4]*=t,e[8]*=t,e[12]*=t,e[1]*=t,e[5]*=t,e[9]*=t,e[13]*=t,e[2]*=t,e[6]*=t,e[10]*=t,e[14]*=t,e[3]*=t,e[7]*=t,e[11]*=t,e[15]*=t,this}determinant(){const t=this.elements,e=t[0],n=t[4],r=t[8],s=t[12],i=t[1],a=t[5],o=t[9],l=t[13],u=t[2],c=t[6],h=t[10],d=t[14];return t[3]*(+s*o*c-r*l*c-s*a*h+n*l*h+r*a*d-n*o*d)+t[7]*(+e*o*d-e*l*h+s*i*h-r*i*d+r*l*u-s*o*u)+t[11]*(+e*l*c-e*a*d-s*i*c+n*i*d+s*a*u-n*l*u)+t[15]*(-r*a*u-e*o*c+e*a*h+r*i*c-n*i*h+n*o*u)}transpose(){const t=this.elements;let e;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this}setPosition(t,e,n){const r=this.elements;return t.isVector3?(r[12]=t.x,r[13]=t.y,r[14]=t.z):(r[12]=t,r[13]=e,r[14]=n),this}invert(){const t=this.elements,e=t[0],n=t[1],r=t[2],s=t[3],i=t[4],a=t[5],o=t[6],l=t[7],u=t[8],c=t[9],h=t[10],d=t[11],p=t[12],f=t[13],m=t[14],g=t[15],y=c*m*l-f*h*l+f*o*d-a*m*d-c*o*g+a*h*g,x=p*h*l-u*m*l-p*o*d+i*m*d+u*o*g-i*h*g,b=u*f*l-p*c*l+p*a*d-i*f*d-u*a*g+i*c*g,v=p*c*o-u*f*o-p*a*h+i*f*h+u*a*m-i*c*m,w=e*y+n*x+r*b+s*v;if(0===w)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const S=1/w;return t[0]=y*S,t[1]=(f*h*s-c*m*s-f*r*d+n*m*d+c*r*g-n*h*g)*S,t[2]=(a*m*s-f*o*s+f*r*l-n*m*l-a*r*g+n*o*g)*S,t[3]=(c*o*s-a*h*s-c*r*l+n*h*l+a*r*d-n*o*d)*S,t[4]=x*S,t[5]=(u*m*s-p*h*s+p*r*d-e*m*d-u*r*g+e*h*g)*S,t[6]=(p*o*s-i*m*s-p*r*l+e*m*l+i*r*g-e*o*g)*S,t[7]=(i*h*s-u*o*s+u*r*l-e*h*l-i*r*d+e*o*d)*S,t[8]=b*S,t[9]=(p*c*s-u*f*s-p*n*d+e*f*d+u*n*g-e*c*g)*S,t[10]=(i*f*s-p*a*s+p*n*l-e*f*l-i*n*g+e*a*g)*S,t[11]=(u*a*s-i*c*s-u*n*l+e*c*l+i*n*d-e*a*d)*S,t[12]=v*S,t[13]=(u*f*r-p*c*r+p*n*h-e*f*h-u*n*m+e*c*m)*S,t[14]=(p*a*r-i*f*r-p*n*o+e*f*o+i*n*m-e*a*m)*S,t[15]=(i*c*r-u*a*r+u*n*o-e*c*o-i*n*h+e*a*h)*S,this}scale(t){const e=this.elements,n=t.x,r=t.y,s=t.z;return e[0]*=n,e[4]*=r,e[8]*=s,e[1]*=n,e[5]*=r,e[9]*=s,e[2]*=n,e[6]*=r,e[10]*=s,e[3]*=n,e[7]*=r,e[11]*=s,this}getMaxScaleOnAxis(){const t=this.elements,e=t[0]*t[0]+t[1]*t[1]+t[2]*t[2],n=t[4]*t[4]+t[5]*t[5]+t[6]*t[6],r=t[8]*t[8]+t[9]*t[9]+t[10]*t[10];return Math.sqrt(Math.max(e,n,r))}makeTranslation(t,e,n){return this.set(1,0,0,t,0,1,0,e,0,0,1,n,0,0,0,1),this}makeRotationX(t){const e=Math.cos(t),n=Math.sin(t);return this.set(1,0,0,0,0,e,-n,0,0,n,e,0,0,0,0,1),this}makeRotationY(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,0,n,0,0,1,0,0,-n,0,e,0,0,0,0,1),this}makeRotationZ(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,-n,0,0,n,e,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(t,e){const n=Math.cos(e),r=Math.sin(e),s=1-n,i=t.x,a=t.y,o=t.z,l=s*i,u=s*a;return this.set(l*i+n,l*a-r*o,l*o+r*a,0,l*a+r*o,u*a+n,u*o-r*i,0,l*o-r*a,u*o+r*i,s*o*o+n,0,0,0,0,1),this}makeScale(t,e,n){return this.set(t,0,0,0,0,e,0,0,0,0,n,0,0,0,0,1),this}makeShear(t,e,n,r,s,i){return this.set(1,n,s,0,t,1,i,0,e,r,1,0,0,0,0,1),this}compose(t,e,n){const r=this.elements,s=e._x,i=e._y,a=e._z,o=e._w,l=s+s,u=i+i,c=a+a,h=s*l,d=s*u,p=s*c,f=i*u,m=i*c,g=a*c,y=o*l,x=o*u,b=o*c,v=n.x,w=n.y,S=n.z;return r[0]=(1-(f+g))*v,r[1]=(d+b)*v,r[2]=(p-x)*v,r[3]=0,r[4]=(d-b)*w,r[5]=(1-(h+g))*w,r[6]=(m+y)*w,r[7]=0,r[8]=(p+x)*S,r[9]=(m-y)*S,r[10]=(1-(h+f))*S,r[11]=0,r[12]=t.x,r[13]=t.y,r[14]=t.z,r[15]=1,this}decompose(t,e,n){const r=this.elements;let s=zr.set(r[0],r[1],r[2]).length();const i=zr.set(r[4],r[5],r[6]).length(),a=zr.set(r[8],r[9],r[10]).length();this.determinant()<0&&(s=-s),t.x=r[12],t.y=r[13],t.z=r[14],Br.copy(this);const o=1/s,l=1/i,u=1/a;return Br.elements[0]*=o,Br.elements[1]*=o,Br.elements[2]*=o,Br.elements[4]*=l,Br.elements[5]*=l,Br.elements[6]*=l,Br.elements[8]*=u,Br.elements[9]*=u,Br.elements[10]*=u,e.setFromRotationMatrix(Br),n.x=s,n.y=i,n.z=a,this}makePerspective(t,e,n,r,s,i){void 0===i&&console.warn(\"THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.\");const a=this.elements,o=2*s/(e-t),l=2*s/(n-r),u=(e+t)/(e-t),c=(n+r)/(n-r),h=-(i+s)/(i-s),d=-2*i*s/(i-s);return a[0]=o,a[4]=0,a[8]=u,a[12]=0,a[1]=0,a[5]=l,a[9]=c,a[13]=0,a[2]=0,a[6]=0,a[10]=h,a[14]=d,a[3]=0,a[7]=0,a[11]=-1,a[15]=0,this}makeOrthographic(t,e,n,r,s,i){const a=this.elements,o=1/(e-t),l=1/(n-r),u=1/(i-s),c=(e+t)*o,h=(n+r)*l,d=(i+s)*u;return a[0]=2*o,a[4]=0,a[8]=0,a[12]=-c,a[1]=0,a[5]=2*l,a[9]=0,a[13]=-h,a[2]=0,a[6]=0,a[10]=-2*u,a[14]=-d,a[3]=0,a[7]=0,a[11]=0,a[15]=1,this}equals(t){const e=this.elements,n=t.elements;for(let t=0;t<16;t++)if(e[t]!==n[t])return!1;return!0}fromArray(t,e=0){for(let n=0;n<16;n++)this.elements[n]=t[n+e];return this}toArray(t=[],e=0){const n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t[e+9]=n[9],t[e+10]=n[10],t[e+11]=n[11],t[e+12]=n[12],t[e+13]=n[13],t[e+14]=n[14],t[e+15]=n[15],t}}Pr.prototype.isMatrix4=!0;const zr=new or,Br=new Pr,Ur=new or(0,0,0),Vr=new or(1,1,1),Wr=new or,Gr=new or,Hr=new or,jr=new Pr,qr=new ar;class Xr{constructor(t=0,e=0,n=0,r=Xr.DefaultOrder){this._x=t,this._y=e,this._z=n,this._order=r}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get order(){return this._order}set order(t){this._order=t,this._onChangeCallback()}set(t,e,n,r=this._order){return this._x=t,this._y=e,this._z=n,this._order=r,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(t){return this._x=t._x,this._y=t._y,this._z=t._z,this._order=t._order,this._onChangeCallback(),this}setFromRotationMatrix(t,e=this._order,n=!0){const r=t.elements,s=r[0],i=r[4],a=r[8],o=r[1],l=r[5],u=r[9],c=r[2],h=r[6],d=r[10];switch(e){case\"XYZ\":this._y=Math.asin(Vn(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(-u,d),this._z=Math.atan2(-i,s)):(this._x=Math.atan2(h,l),this._z=0);break;case\"YXZ\":this._x=Math.asin(-Vn(u,-1,1)),Math.abs(u)<.9999999?(this._y=Math.atan2(a,d),this._z=Math.atan2(o,l)):(this._y=Math.atan2(-c,s),this._z=0);break;case\"ZXY\":this._x=Math.asin(Vn(h,-1,1)),Math.abs(h)<.9999999?(this._y=Math.atan2(-c,d),this._z=Math.atan2(-i,l)):(this._y=0,this._z=Math.atan2(o,s));break;case\"ZYX\":this._y=Math.asin(-Vn(c,-1,1)),Math.abs(c)<.9999999?(this._x=Math.atan2(h,d),this._z=Math.atan2(o,s)):(this._x=0,this._z=Math.atan2(-i,l));break;case\"YZX\":this._z=Math.asin(Vn(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(-u,l),this._y=Math.atan2(-c,s)):(this._x=0,this._y=Math.atan2(a,d));break;case\"XZY\":this._z=Math.asin(-Vn(i,-1,1)),Math.abs(i)<.9999999?(this._x=Math.atan2(h,l),this._y=Math.atan2(a,s)):(this._x=Math.atan2(-u,d),this._y=0);break;default:console.warn(\"THREE.Euler: .setFromRotationMatrix() encountered an unknown order: \"+e)}return this._order=e,!0===n&&this._onChangeCallback(),this}setFromQuaternion(t,e,n){return jr.makeRotationFromQuaternion(t),this.setFromRotationMatrix(jr,e,n)}setFromVector3(t,e=this._order){return this.set(t.x,t.y,t.z,e)}reorder(t){return qr.setFromEuler(this),this.setFromQuaternion(qr,t)}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order}fromArray(t){return this._x=t[0],this._y=t[1],this._z=t[2],void 0!==t[3]&&(this._order=t[3]),this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._order,t}toVector3(t){return t?t.set(this._x,this._y,this._z):new or(this._x,this._y,this._z)}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}}Xr.prototype.isEuler=!0,Xr.DefaultOrder=\"XYZ\",Xr.RotationOrders=[\"XYZ\",\"YZX\",\"ZXY\",\"XZY\",\"YXZ\",\"ZYX\"];class Kr{constructor(){this.mask=1}set(t){this.mask=1<<t|0}enable(t){this.mask|=1<<t|0}enableAll(){this.mask=-1}toggle(t){this.mask^=1<<t|0}disable(t){this.mask&=~(1<<t|0)}disableAll(){this.mask=0}test(t){return 0!=(this.mask&t.mask)}}let Yr=0;const Zr=new or,Jr=new ar,Qr=new Pr,ts=new or,es=new or,ns=new or,rs=new ar,ss=new or(1,0,0),is=new or(0,1,0),as=new or(0,0,1),os={type:\"added\"},ls={type:\"removed\"};class us extends $n{constructor(){super(),Object.defineProperty(this,\"id\",{value:Yr++}),this.uuid=Un(),this.name=\"\",this.type=\"Object3D\",this.parent=null,this.children=[],this.up=us.DefaultUp.clone();const t=new or,e=new Xr,n=new ar,r=new or(1,1,1);e._onChange((function(){n.setFromEuler(e,!1)})),n._onChange((function(){e.setFromQuaternion(n,void 0,!1)})),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:t},rotation:{configurable:!0,enumerable:!0,value:e},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:r},modelViewMatrix:{value:new Pr},normalMatrix:{value:new Yn}}),this.matrix=new Pr,this.matrixWorld=new Pr,this.matrixAutoUpdate=us.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new Kr,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeRender(){}onAfterRender(){}applyMatrix4(t){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(t),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(t){return this.quaternion.premultiply(t),this}setRotationFromAxisAngle(t,e){this.quaternion.setFromAxisAngle(t,e)}setRotationFromEuler(t){this.quaternion.setFromEuler(t,!0)}setRotationFromMatrix(t){this.quaternion.setFromRotationMatrix(t)}setRotationFromQuaternion(t){this.quaternion.copy(t)}rotateOnAxis(t,e){return Jr.setFromAxisAngle(t,e),this.quaternion.multiply(Jr),this}rotateOnWorldAxis(t,e){return Jr.setFromAxisAngle(t,e),this.quaternion.premultiply(Jr),this}rotateX(t){return this.rotateOnAxis(ss,t)}rotateY(t){return this.rotateOnAxis(is,t)}rotateZ(t){return this.rotateOnAxis(as,t)}translateOnAxis(t,e){return Zr.copy(t).applyQuaternion(this.quaternion),this.position.add(Zr.multiplyScalar(e)),this}translateX(t){return this.translateOnAxis(ss,t)}translateY(t){return this.translateOnAxis(is,t)}translateZ(t){return this.translateOnAxis(as,t)}localToWorld(t){return t.applyMatrix4(this.matrixWorld)}worldToLocal(t){return t.applyMatrix4(Qr.copy(this.matrixWorld).invert())}lookAt(t,e,n){t.isVector3?ts.copy(t):ts.set(t,e,n);const r=this.parent;this.updateWorldMatrix(!0,!1),es.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?Qr.lookAt(es,ts,this.up):Qr.lookAt(ts,es,this.up),this.quaternion.setFromRotationMatrix(Qr),r&&(Qr.extractRotation(r.matrixWorld),Jr.setFromRotationMatrix(Qr),this.quaternion.premultiply(Jr.invert()))}add(t){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.add(arguments[t]);return this}return t===this?(console.error(\"THREE.Object3D.add: object can't be added as a child of itself.\",t),this):(t&&t.isObject3D?(null!==t.parent&&t.parent.remove(t),t.parent=this,this.children.push(t),t.dispatchEvent(os)):console.error(\"THREE.Object3D.add: object not an instance of THREE.Object3D.\",t),this)}remove(t){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.remove(arguments[t]);return this}const e=this.children.indexOf(t);return-1!==e&&(t.parent=null,this.children.splice(e,1),t.dispatchEvent(ls)),this}removeFromParent(){const t=this.parent;return null!==t&&t.remove(this),this}clear(){for(let t=0;t<this.children.length;t++){const e=this.children[t];e.parent=null,e.dispatchEvent(ls)}return this.children.length=0,this}attach(t){return this.updateWorldMatrix(!0,!1),Qr.copy(this.matrixWorld).invert(),null!==t.parent&&(t.parent.updateWorldMatrix(!0,!1),Qr.multiply(t.parent.matrixWorld)),t.applyMatrix4(Qr),this.add(t),t.updateWorldMatrix(!1,!0),this}getObjectById(t){return this.getObjectByProperty(\"id\",t)}getObjectByName(t){return this.getObjectByProperty(\"name\",t)}getObjectByProperty(t,e){if(this[t]===e)return this;for(let n=0,r=this.children.length;n<r;n++){const r=this.children[n].getObjectByProperty(t,e);if(void 0!==r)return r}}getWorldPosition(t){return this.updateWorldMatrix(!0,!1),t.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(es,t,ns),t}getWorldScale(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(es,rs,t),t}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(e[8],e[9],e[10]).normalize()}raycast(){}traverse(t){t(this);const e=this.children;for(let n=0,r=e.length;n<r;n++)e[n].traverse(t)}traverseVisible(t){if(!1===this.visible)return;t(this);const e=this.children;for(let n=0,r=e.length;n<r;n++)e[n].traverseVisible(t)}traverseAncestors(t){const e=this.parent;null!==e&&(t(e),e.traverseAncestors(t))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||t)&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,t=!0);const e=this.children;for(let n=0,r=e.length;n<r;n++)e[n].updateMatrixWorld(t)}updateWorldMatrix(t,e){const n=this.parent;if(!0===t&&null!==n&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),!0===e){const t=this.children;for(let e=0,n=t.length;e<n;e++)t[e].updateWorldMatrix(!1,!0)}}toJSON(t){const e=void 0===t||\"string\"==typeof t,n={};e&&(t={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{}},n.metadata={version:4.5,type:\"Object\",generator:\"Object3D.toJSON\"});const r={};function s(e,n){return void 0===e[n.uuid]&&(e[n.uuid]=n.toJSON(t)),n.uuid}if(r.uuid=this.uuid,r.type=this.type,\"\"!==this.name&&(r.name=this.name),!0===this.castShadow&&(r.castShadow=!0),!0===this.receiveShadow&&(r.receiveShadow=!0),!1===this.visible&&(r.visible=!1),!1===this.frustumCulled&&(r.frustumCulled=!1),0!==this.renderOrder&&(r.renderOrder=this.renderOrder),\"{}\"!==JSON.stringify(this.userData)&&(r.userData=this.userData),r.layers=this.layers.mask,r.matrix=this.matrix.toArray(),!1===this.matrixAutoUpdate&&(r.matrixAutoUpdate=!1),this.isInstancedMesh&&(r.type=\"InstancedMesh\",r.count=this.count,r.instanceMatrix=this.instanceMatrix.toJSON(),null!==this.instanceColor&&(r.instanceColor=this.instanceColor.toJSON())),this.isScene)this.background&&(this.background.isColor?r.background=this.background.toJSON():this.background.isTexture&&(r.background=this.background.toJSON(t).uuid)),this.environment&&this.environment.isTexture&&(r.environment=this.environment.toJSON(t).uuid);else if(this.isMesh||this.isLine||this.isPoints){r.geometry=s(t.geometries,this.geometry);const e=this.geometry.parameters;if(void 0!==e&&void 0!==e.shapes){const n=e.shapes;if(Array.isArray(n))for(let e=0,r=n.length;e<r;e++){const r=n[e];s(t.shapes,r)}else s(t.shapes,n)}}if(this.isSkinnedMesh&&(r.bindMode=this.bindMode,r.bindMatrix=this.bindMatrix.toArray(),void 0!==this.skeleton&&(s(t.skeletons,this.skeleton),r.skeleton=this.skeleton.uuid)),void 0!==this.material)if(Array.isArray(this.material)){const e=[];for(let n=0,r=this.material.length;n<r;n++)e.push(s(t.materials,this.material[n]));r.material=e}else r.material=s(t.materials,this.material);if(this.children.length>0){r.children=[];for(let e=0;e<this.children.length;e++)r.children.push(this.children[e].toJSON(t).object)}if(this.animations.length>0){r.animations=[];for(let e=0;e<this.animations.length;e++){const n=this.animations[e];r.animations.push(s(t.animations,n))}}if(e){const e=i(t.geometries),r=i(t.materials),s=i(t.textures),a=i(t.images),o=i(t.shapes),l=i(t.skeletons),u=i(t.animations);e.length>0&&(n.geometries=e),r.length>0&&(n.materials=r),s.length>0&&(n.textures=s),a.length>0&&(n.images=a),o.length>0&&(n.shapes=o),l.length>0&&(n.skeletons=l),u.length>0&&(n.animations=u)}return n.object=r,n;function i(t){const e=[];for(const n in t){const r=t[n];delete r.metadata,e.push(r)}return e}}clone(t){return(new this.constructor).copy(this,t)}copy(t,e=!0){if(this.name=t.name,this.up.copy(t.up),this.position.copy(t.position),this.rotation.order=t.rotation.order,this.quaternion.copy(t.quaternion),this.scale.copy(t.scale),this.matrix.copy(t.matrix),this.matrixWorld.copy(t.matrixWorld),this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate,this.layers.mask=t.layers.mask,this.visible=t.visible,this.castShadow=t.castShadow,this.receiveShadow=t.receiveShadow,this.frustumCulled=t.frustumCulled,this.renderOrder=t.renderOrder,this.userData=JSON.parse(JSON.stringify(t.userData)),!0===e)for(let e=0;e<t.children.length;e++){const n=t.children[e];this.add(n.clone())}return this}}us.DefaultUp=new or(0,1,0),us.DefaultMatrixAutoUpdate=!0,us.prototype.isObject3D=!0;const cs=new or,hs=new or,ds=new or,ps=new or,fs=new or,ms=new or,gs=new or,ys=new or,xs=new or,bs=new or;class vs{constructor(t=new or,e=new or,n=new or){this.a=t,this.b=e,this.c=n}static getNormal(t,e,n,r){r.subVectors(n,e),cs.subVectors(t,e),r.cross(cs);const s=r.lengthSq();return s>0?r.multiplyScalar(1/Math.sqrt(s)):r.set(0,0,0)}static getBarycoord(t,e,n,r,s){cs.subVectors(r,e),hs.subVectors(n,e),ds.subVectors(t,e);const i=cs.dot(cs),a=cs.dot(hs),o=cs.dot(ds),l=hs.dot(hs),u=hs.dot(ds),c=i*l-a*a;if(0===c)return s.set(-2,-1,-1);const h=1/c,d=(l*o-a*u)*h,p=(i*u-a*o)*h;return s.set(1-d-p,p,d)}static containsPoint(t,e,n,r){return this.getBarycoord(t,e,n,r,ps),ps.x>=0&&ps.y>=0&&ps.x+ps.y<=1}static getUV(t,e,n,r,s,i,a,o){return this.getBarycoord(t,e,n,r,ps),o.set(0,0),o.addScaledVector(s,ps.x),o.addScaledVector(i,ps.y),o.addScaledVector(a,ps.z),o}static isFrontFacing(t,e,n,r){return cs.subVectors(n,e),hs.subVectors(t,e),cs.cross(hs).dot(r)<0}set(t,e,n){return this.a.copy(t),this.b.copy(e),this.c.copy(n),this}setFromPointsAndIndices(t,e,n,r){return this.a.copy(t[e]),this.b.copy(t[n]),this.c.copy(t[r]),this}clone(){return(new this.constructor).copy(this)}copy(t){return this.a.copy(t.a),this.b.copy(t.b),this.c.copy(t.c),this}getArea(){return cs.subVectors(this.c,this.b),hs.subVectors(this.a,this.b),.5*cs.cross(hs).length()}getMidpoint(t){return t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(t){return vs.getNormal(this.a,this.b,this.c,t)}getPlane(t){return t.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(t,e){return vs.getBarycoord(t,this.a,this.b,this.c,e)}getUV(t,e,n,r,s){return vs.getUV(t,this.a,this.b,this.c,e,n,r,s)}containsPoint(t){return vs.containsPoint(t,this.a,this.b,this.c)}isFrontFacing(t){return vs.isFrontFacing(this.a,this.b,this.c,t)}intersectsBox(t){return t.intersectsTriangle(this)}closestPointToPoint(t,e){const n=this.a,r=this.b,s=this.c;let i,a;fs.subVectors(r,n),ms.subVectors(s,n),ys.subVectors(t,n);const o=fs.dot(ys),l=ms.dot(ys);if(o<=0&&l<=0)return e.copy(n);xs.subVectors(t,r);const u=fs.dot(xs),c=ms.dot(xs);if(u>=0&&c<=u)return e.copy(r);const h=o*c-u*l;if(h<=0&&o>=0&&u<=0)return i=o/(o-u),e.copy(n).addScaledVector(fs,i);bs.subVectors(t,s);const d=fs.dot(bs),p=ms.dot(bs);if(p>=0&&d<=p)return e.copy(s);const f=d*l-o*p;if(f<=0&&l>=0&&p<=0)return a=l/(l-p),e.copy(n).addScaledVector(ms,a);const m=u*p-d*c;if(m<=0&&c-u>=0&&d-p>=0)return gs.subVectors(s,r),a=(c-u)/(c-u+(d-p)),e.copy(r).addScaledVector(gs,a);const g=1/(m+f+h);return i=f*g,a=h*g,e.copy(n).addScaledVector(fs,i).addScaledVector(ms,a)}equals(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}}let ws=0;class Ss extends $n{constructor(){super(),Object.defineProperty(this,\"id\",{value:ws++}),this.uuid=Un(),this.name=\"\",this.type=\"Material\",this.fog=!0,this.blending=v,this.side=f,this.vertexColors=!1,this.opacity=1,this.format=Pt,this.transparent=!1,this.blendSrc=D,this.blendDst=F,this.blendEquation=M,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=G,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=_n,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=cn,this.stencilZFail=cn,this.stencilZPass=cn,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(t){this._alphaTest>0!=t>0&&this.version++,this._alphaTest=t}onBuild(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(t){if(void 0!==t)for(const e in t){const n=t[e];if(void 0===n){console.warn(\"THREE.Material: '\"+e+\"' parameter is undefined.\");continue}if(\"shading\"===e){console.warn(\"THREE.\"+this.type+\": .shading has been removed. Use the boolean .flatShading instead.\"),this.flatShading=n===y;continue}const r=this[e];void 0!==r?r&&r.isColor?r.set(n):r&&r.isVector3&&n&&n.isVector3?r.copy(n):this[e]=n:console.warn(\"THREE.\"+this.type+\": '\"+e+\"' is not a property of this material.\")}}toJSON(t){const e=void 0===t||\"string\"==typeof t;e&&(t={textures:{},images:{}});const n={metadata:{version:4.5,type:\"Material\",generator:\"Material.toJSON\"}};function r(t){const e=[];for(const n in t){const r=t[n];delete r.metadata,e.push(r)}return e}if(n.uuid=this.uuid,n.type=this.type,\"\"!==this.name&&(n.name=this.name),this.color&&this.color.isColor&&(n.color=this.color.getHex()),void 0!==this.roughness&&(n.roughness=this.roughness),void 0!==this.metalness&&(n.metalness=this.metalness),this.sheenTint&&this.sheenTint.isColor&&(n.sheenTint=this.sheenTint.getHex()),this.emissive&&this.emissive.isColor&&(n.emissive=this.emissive.getHex()),this.emissiveIntensity&&1!==this.emissiveIntensity&&(n.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(n.specular=this.specular.getHex()),void 0!==this.specularIntensity&&(n.specularIntensity=this.specularIntensity),this.specularTint&&this.specularTint.isColor&&(n.specularTint=this.specularTint.getHex()),void 0!==this.shininess&&(n.shininess=this.shininess),void 0!==this.clearcoat&&(n.clearcoat=this.clearcoat),void 0!==this.clearcoatRoughness&&(n.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(n.clearcoatMap=this.clearcoatMap.toJSON(t).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(n.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(t).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(t).uuid,n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.map&&this.map.isTexture&&(n.map=this.map.toJSON(t).uuid),this.matcap&&this.matcap.isTexture&&(n.matcap=this.matcap.toJSON(t).uuid),this.alphaMap&&this.alphaMap.isTexture&&(n.alphaMap=this.alphaMap.toJSON(t).uuid),this.lightMap&&this.lightMap.isTexture&&(n.lightMap=this.lightMap.toJSON(t).uuid,n.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(n.aoMap=this.aoMap.toJSON(t).uuid,n.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(n.bumpMap=this.bumpMap.toJSON(t).uuid,n.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(n.normalMap=this.normalMap.toJSON(t).uuid,n.normalMapType=this.normalMapType,n.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(n.displacementMap=this.displacementMap.toJSON(t).uuid,n.displacementScale=this.displacementScale,n.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(n.roughnessMap=this.roughnessMap.toJSON(t).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(n.metalnessMap=this.metalnessMap.toJSON(t).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(n.emissiveMap=this.emissiveMap.toJSON(t).uuid),this.specularMap&&this.specularMap.isTexture&&(n.specularMap=this.specularMap.toJSON(t).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(n.specularIntensityMap=this.specularIntensityMap.toJSON(t).uuid),this.specularTintMap&&this.specularTintMap.isTexture&&(n.specularTintMap=this.specularTintMap.toJSON(t).uuid),this.envMap&&this.envMap.isTexture&&(n.envMap=this.envMap.toJSON(t).uuid,void 0!==this.combine&&(n.combine=this.combine)),void 0!==this.envMapIntensity&&(n.envMapIntensity=this.envMapIntensity),void 0!==this.reflectivity&&(n.reflectivity=this.reflectivity),void 0!==this.refractionRatio&&(n.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(n.gradientMap=this.gradientMap.toJSON(t).uuid),void 0!==this.transmission&&(n.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(n.transmissionMap=this.transmissionMap.toJSON(t).uuid),void 0!==this.thickness&&(n.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(n.thicknessMap=this.thicknessMap.toJSON(t).uuid),void 0!==this.attenuationDistance&&(n.attenuationDistance=this.attenuationDistance),void 0!==this.attenuationTint&&(n.attenuationTint=this.attenuationTint.getHex()),void 0!==this.size&&(n.size=this.size),null!==this.shadowSide&&(n.shadowSide=this.shadowSide),void 0!==this.sizeAttenuation&&(n.sizeAttenuation=this.sizeAttenuation),this.blending!==v&&(n.blending=this.blending),this.side!==f&&(n.side=this.side),this.vertexColors&&(n.vertexColors=!0),this.opacity<1&&(n.opacity=this.opacity),this.format!==Pt&&(n.format=this.format),!0===this.transparent&&(n.transparent=this.transparent),n.depthFunc=this.depthFunc,n.depthTest=this.depthTest,n.depthWrite=this.depthWrite,n.colorWrite=this.colorWrite,n.stencilWrite=this.stencilWrite,n.stencilWriteMask=this.stencilWriteMask,n.stencilFunc=this.stencilFunc,n.stencilRef=this.stencilRef,n.stencilFuncMask=this.stencilFuncMask,n.stencilFail=this.stencilFail,n.stencilZFail=this.stencilZFail,n.stencilZPass=this.stencilZPass,this.rotation&&0!==this.rotation&&(n.rotation=this.rotation),!0===this.polygonOffset&&(n.polygonOffset=!0),0!==this.polygonOffsetFactor&&(n.polygonOffsetFactor=this.polygonOffsetFactor),0!==this.polygonOffsetUnits&&(n.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth&&1!==this.linewidth&&(n.linewidth=this.linewidth),void 0!==this.dashSize&&(n.dashSize=this.dashSize),void 0!==this.gapSize&&(n.gapSize=this.gapSize),void 0!==this.scale&&(n.scale=this.scale),!0===this.dithering&&(n.dithering=!0),this.alphaTest>0&&(n.alphaTest=this.alphaTest),!0===this.alphaToCoverage&&(n.alphaToCoverage=this.alphaToCoverage),!0===this.premultipliedAlpha&&(n.premultipliedAlpha=this.premultipliedAlpha),!0===this.wireframe&&(n.wireframe=this.wireframe),this.wireframeLinewidth>1&&(n.wireframeLinewidth=this.wireframeLinewidth),\"round\"!==this.wireframeLinecap&&(n.wireframeLinecap=this.wireframeLinecap),\"round\"!==this.wireframeLinejoin&&(n.wireframeLinejoin=this.wireframeLinejoin),!0===this.flatShading&&(n.flatShading=this.flatShading),!1===this.visible&&(n.visible=!1),!1===this.toneMapped&&(n.toneMapped=!1),\"{}\"!==JSON.stringify(this.userData)&&(n.userData=this.userData),e){const e=r(t.textures),s=r(t.images);e.length>0&&(n.textures=e),s.length>0&&(n.images=s)}return n}clone(){return(new this.constructor).copy(this)}copy(t){this.name=t.name,this.fog=t.fog,this.blending=t.blending,this.side=t.side,this.vertexColors=t.vertexColors,this.opacity=t.opacity,this.format=t.format,this.transparent=t.transparent,this.blendSrc=t.blendSrc,this.blendDst=t.blendDst,this.blendEquation=t.blendEquation,this.blendSrcAlpha=t.blendSrcAlpha,this.blendDstAlpha=t.blendDstAlpha,this.blendEquationAlpha=t.blendEquationAlpha,this.depthFunc=t.depthFunc,this.depthTest=t.depthTest,this.depthWrite=t.depthWrite,this.stencilWriteMask=t.stencilWriteMask,this.stencilFunc=t.stencilFunc,this.stencilRef=t.stencilRef,this.stencilFuncMask=t.stencilFuncMask,this.stencilFail=t.stencilFail,this.stencilZFail=t.stencilZFail,this.stencilZPass=t.stencilZPass,this.stencilWrite=t.stencilWrite;const e=t.clippingPlanes;let n=null;if(null!==e){const t=e.length;n=new Array(t);for(let r=0;r!==t;++r)n[r]=e[r].clone()}return this.clippingPlanes=n,this.clipIntersection=t.clipIntersection,this.clipShadows=t.clipShadows,this.shadowSide=t.shadowSide,this.colorWrite=t.colorWrite,this.precision=t.precision,this.polygonOffset=t.polygonOffset,this.polygonOffsetFactor=t.polygonOffsetFactor,this.polygonOffsetUnits=t.polygonOffsetUnits,this.dithering=t.dithering,this.alphaTest=t.alphaTest,this.alphaToCoverage=t.alphaToCoverage,this.premultipliedAlpha=t.premultipliedAlpha,this.visible=t.visible,this.toneMapped=t.toneMapped,this.userData=JSON.parse(JSON.stringify(t.userData)),this}dispose(){this.dispatchEvent({type:\"dispose\"})}set needsUpdate(t){!0===t&&this.version++}}Ss.prototype.isMaterial=!0;const Ts={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},_s={h:0,s:0,l:0},Ms={h:0,s:0,l:0};function ks(t,e,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?t+6*(e-t)*n:n<.5?e:n<2/3?t+6*(e-t)*(2/3-n):t}function Es(t){return t<.04045?.0773993808*t:Math.pow(.9478672986*t+.0521327014,2.4)}function Is(t){return t<.0031308?12.92*t:1.055*Math.pow(t,.41666)-.055}class Cs{constructor(t,e,n){return void 0===e&&void 0===n?this.set(t):this.setRGB(t,e,n)}set(t){return t&&t.isColor?this.copy(t):\"number\"==typeof t?this.setHex(t):\"string\"==typeof t&&this.setStyle(t),this}setScalar(t){return this.r=t,this.g=t,this.b=t,this}setHex(t){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(255&t)/255,this}setRGB(t,e,n){return this.r=t,this.g=e,this.b=n,this}setHSL(t,e,n){if(t=Wn(t,1),e=Vn(e,0,1),n=Vn(n,0,1),0===e)this.r=this.g=this.b=n;else{const r=n<=.5?n*(1+e):n+e-n*e,s=2*n-r;this.r=ks(s,r,t+1/3),this.g=ks(s,r,t),this.b=ks(s,r,t-1/3)}return this}setStyle(t){function e(e){void 0!==e&&parseFloat(e)<1&&console.warn(\"THREE.Color: Alpha component of \"+t+\" will be ignored.\")}let n;if(n=/^((?:rgb|hsl)a?)\\(([^\\)]*)\\)/.exec(t)){let t;const r=n[1],s=n[2];switch(r){case\"rgb\":case\"rgba\":if(t=/^\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(s))return this.r=Math.min(255,parseInt(t[1],10))/255,this.g=Math.min(255,parseInt(t[2],10))/255,this.b=Math.min(255,parseInt(t[3],10))/255,e(t[4]),this;if(t=/^\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(s))return this.r=Math.min(100,parseInt(t[1],10))/100,this.g=Math.min(100,parseInt(t[2],10))/100,this.b=Math.min(100,parseInt(t[3],10))/100,e(t[4]),this;break;case\"hsl\":case\"hsla\":if(t=/^\\s*(\\d*\\.?\\d+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec(s)){const n=parseFloat(t[1])/360,r=parseInt(t[2],10)/100,s=parseInt(t[3],10)/100;return e(t[4]),this.setHSL(n,r,s)}}}else if(n=/^\\#([A-Fa-f\\d]+)$/.exec(t)){const t=n[1],e=t.length;if(3===e)return this.r=parseInt(t.charAt(0)+t.charAt(0),16)/255,this.g=parseInt(t.charAt(1)+t.charAt(1),16)/255,this.b=parseInt(t.charAt(2)+t.charAt(2),16)/255,this;if(6===e)return this.r=parseInt(t.charAt(0)+t.charAt(1),16)/255,this.g=parseInt(t.charAt(2)+t.charAt(3),16)/255,this.b=parseInt(t.charAt(4)+t.charAt(5),16)/255,this}return t&&t.length>0?this.setColorName(t):this}setColorName(t){const e=Ts[t.toLowerCase()];return void 0!==e?this.setHex(e):console.warn(\"THREE.Color: Unknown color \"+t),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(t){return this.r=t.r,this.g=t.g,this.b=t.b,this}copyGammaToLinear(t,e=2){return this.r=Math.pow(t.r,e),this.g=Math.pow(t.g,e),this.b=Math.pow(t.b,e),this}copyLinearToGamma(t,e=2){const n=e>0?1/e:1;return this.r=Math.pow(t.r,n),this.g=Math.pow(t.g,n),this.b=Math.pow(t.b,n),this}convertGammaToLinear(t){return this.copyGammaToLinear(this,t),this}convertLinearToGamma(t){return this.copyLinearToGamma(this,t),this}copySRGBToLinear(t){return this.r=Es(t.r),this.g=Es(t.g),this.b=Es(t.b),this}copyLinearToSRGB(t){return this.r=Is(t.r),this.g=Is(t.g),this.b=Is(t.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(){return 255*this.r<<16^255*this.g<<8^255*this.b<<0}getHexString(){return(\"000000\"+this.getHex().toString(16)).slice(-6)}getHSL(t){const e=this.r,n=this.g,r=this.b,s=Math.max(e,n,r),i=Math.min(e,n,r);let a,o;const l=(i+s)/2;if(i===s)a=0,o=0;else{const t=s-i;switch(o=l<=.5?t/(s+i):t/(2-s-i),s){case e:a=(n-r)/t+(n<r?6:0);break;case n:a=(r-e)/t+2;break;case r:a=(e-n)/t+4}a/=6}return t.h=a,t.s=o,t.l=l,t}getStyle(){return\"rgb(\"+(255*this.r|0)+\",\"+(255*this.g|0)+\",\"+(255*this.b|0)+\")\"}offsetHSL(t,e,n){return this.getHSL(_s),_s.h+=t,_s.s+=e,_s.l+=n,this.setHSL(_s.h,_s.s,_s.l),this}add(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this}addColors(t,e){return this.r=t.r+e.r,this.g=t.g+e.g,this.b=t.b+e.b,this}addScalar(t){return this.r+=t,this.g+=t,this.b+=t,this}sub(t){return this.r=Math.max(0,this.r-t.r),this.g=Math.max(0,this.g-t.g),this.b=Math.max(0,this.b-t.b),this}multiply(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this}multiplyScalar(t){return this.r*=t,this.g*=t,this.b*=t,this}lerp(t,e){return this.r+=(t.r-this.r)*e,this.g+=(t.g-this.g)*e,this.b+=(t.b-this.b)*e,this}lerpColors(t,e,n){return this.r=t.r+(e.r-t.r)*n,this.g=t.g+(e.g-t.g)*n,this.b=t.b+(e.b-t.b)*n,this}lerpHSL(t,e){this.getHSL(_s),t.getHSL(Ms);const n=Gn(_s.h,Ms.h,e),r=Gn(_s.s,Ms.s,e),s=Gn(_s.l,Ms.l,e);return this.setHSL(n,r,s),this}equals(t){return t.r===this.r&&t.g===this.g&&t.b===this.b}fromArray(t,e=0){return this.r=t[e],this.g=t[e+1],this.b=t[e+2],this}toArray(t=[],e=0){return t[e]=this.r,t[e+1]=this.g,t[e+2]=this.b,t}fromBufferAttribute(t,e){return this.r=t.getX(e),this.g=t.getY(e),this.b=t.getZ(e),!0===t.normalized&&(this.r/=255,this.g/=255,this.b/=255),this}toJSON(){return this.getHex()}}Cs.NAMES=Ts,Cs.prototype.isColor=!0,Cs.prototype.r=1,Cs.prototype.g=1,Cs.prototype.b=1;class Ns extends Ss{constructor(t){super(),this.type=\"MeshBasicMaterial\",this.color=new Cs(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=K,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap=\"round\",this.wireframeLinejoin=\"round\",this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this}}Ns.prototype.isMeshBasicMaterial=!0;const As=new or,Rs=new Kn;class Ls{constructor(t,e,n){if(Array.isArray(t))throw new TypeError(\"THREE.BufferAttribute: array should be a Typed Array.\");this.name=\"\",this.array=t,this.itemSize=e,this.count=void 0!==t?t.length/e:0,this.normalized=!0===n,this.usage=Mn,this.updateRange={offset:0,count:-1},this.version=0}onUploadCallback(){}set needsUpdate(t){!0===t&&this.version++}setUsage(t){return this.usage=t,this}copy(t){return this.name=t.name,this.array=new t.array.constructor(t.array),this.itemSize=t.itemSize,this.count=t.count,this.normalized=t.normalized,this.usage=t.usage,this}copyAt(t,e,n){t*=this.itemSize,n*=e.itemSize;for(let r=0,s=this.itemSize;r<s;r++)this.array[t+r]=e.array[n+r];return this}copyArray(t){return this.array.set(t),this}copyColorsArray(t){const e=this.array;let n=0;for(let r=0,s=t.length;r<s;r++){let s=t[r];void 0===s&&(console.warn(\"THREE.BufferAttribute.copyColorsArray(): color is undefined\",r),s=new Cs),e[n++]=s.r,e[n++]=s.g,e[n++]=s.b}return this}copyVector2sArray(t){const e=this.array;let n=0;for(let r=0,s=t.length;r<s;r++){let s=t[r];void 0===s&&(console.warn(\"THREE.BufferAttribute.copyVector2sArray(): vector is undefined\",r),s=new Kn),e[n++]=s.x,e[n++]=s.y}return this}copyVector3sArray(t){const e=this.array;let n=0;for(let r=0,s=t.length;r<s;r++){let s=t[r];void 0===s&&(console.warn(\"THREE.BufferAttribute.copyVector3sArray(): vector is undefined\",r),s=new or),e[n++]=s.x,e[n++]=s.y,e[n++]=s.z}return this}copyVector4sArray(t){const e=this.array;let n=0;for(let r=0,s=t.length;r<s;r++){let s=t[r];void 0===s&&(console.warn(\"THREE.BufferAttribute.copyVector4sArray(): vector is undefined\",r),s=new nr),e[n++]=s.x,e[n++]=s.y,e[n++]=s.z,e[n++]=s.w}return this}applyMatrix3(t){if(2===this.itemSize)for(let e=0,n=this.count;e<n;e++)Rs.fromBufferAttribute(this,e),Rs.applyMatrix3(t),this.setXY(e,Rs.x,Rs.y);else if(3===this.itemSize)for(let e=0,n=this.count;e<n;e++)As.fromBufferAttribute(this,e),As.applyMatrix3(t),this.setXYZ(e,As.x,As.y,As.z);return this}applyMatrix4(t){for(let e=0,n=this.count;e<n;e++)As.x=this.getX(e),As.y=this.getY(e),As.z=this.getZ(e),As.applyMatrix4(t),this.setXYZ(e,As.x,As.y,As.z);return this}applyNormalMatrix(t){for(let e=0,n=this.count;e<n;e++)As.x=this.getX(e),As.y=this.getY(e),As.z=this.getZ(e),As.applyNormalMatrix(t),this.setXYZ(e,As.x,As.y,As.z);return this}transformDirection(t){for(let e=0,n=this.count;e<n;e++)As.x=this.getX(e),As.y=this.getY(e),As.z=this.getZ(e),As.transformDirection(t),this.setXYZ(e,As.x,As.y,As.z);return this}set(t,e=0){return this.array.set(t,e),this}getX(t){return this.array[t*this.itemSize]}setX(t,e){return this.array[t*this.itemSize]=e,this}getY(t){return this.array[t*this.itemSize+1]}setY(t,e){return this.array[t*this.itemSize+1]=e,this}getZ(t){return this.array[t*this.itemSize+2]}setZ(t,e){return this.array[t*this.itemSize+2]=e,this}getW(t){return this.array[t*this.itemSize+3]}setW(t,e){return this.array[t*this.itemSize+3]=e,this}setXY(t,e,n){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=n,this}setXYZ(t,e,n,r){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=r,this}setXYZW(t,e,n,r,s){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=r,this.array[t+3]=s,this}onUpload(t){return this.onUploadCallback=t,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const t={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.prototype.slice.call(this.array),normalized:this.normalized};return\"\"!==this.name&&(t.name=this.name),this.usage!==Mn&&(t.usage=this.usage),0===this.updateRange.offset&&-1===this.updateRange.count||(t.updateRange=this.updateRange),t}}Ls.prototype.isBufferAttribute=!0;class Ds extends Ls{constructor(t,e,n){super(new Int8Array(t),e,n)}}class Fs extends Ls{constructor(t,e,n){super(new Uint8Array(t),e,n)}}class $s extends Ls{constructor(t,e,n){super(new Uint8ClampedArray(t),e,n)}}class Os extends Ls{constructor(t,e,n){super(new Int16Array(t),e,n)}}class Ps extends Ls{constructor(t,e,n){super(new Uint16Array(t),e,n)}}class zs extends Ls{constructor(t,e,n){super(new Int32Array(t),e,n)}}class Bs extends Ls{constructor(t,e,n){super(new Uint32Array(t),e,n)}}class Us extends Ls{constructor(t,e,n){super(new Uint16Array(t),e,n)}}Us.prototype.isFloat16BufferAttribute=!0;class Vs extends Ls{constructor(t,e,n){super(new Float32Array(t),e,n)}}class Ws extends Ls{constructor(t,e,n){super(new Float64Array(t),e,n)}}function Gs(t){if(0===t.length)return-1/0;let e=t[0];for(let n=1,r=t.length;n<r;++n)t[n]>e&&(e=t[n]);return e}const Hs={Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array};function js(t,e){return new Hs[t](e)}let qs=0;const Xs=new Pr,Ks=new us,Ys=new or,Zs=new cr,Js=new cr,Qs=new or;class ti extends $n{constructor(){super(),Object.defineProperty(this,\"id\",{value:qs++}),this.uuid=Un(),this.name=\"\",this.type=\"BufferGeometry\",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(t){return Array.isArray(t)?this.index=new(Gs(t)>65535?Bs:Ps)(t,1):this.index=t,this}getAttribute(t){return this.attributes[t]}setAttribute(t,e){return this.attributes[t]=e,this}deleteAttribute(t){return delete this.attributes[t],this}hasAttribute(t){return void 0!==this.attributes[t]}addGroup(t,e,n=0){this.groups.push({start:t,count:e,materialIndex:n})}clearGroups(){this.groups=[]}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}applyMatrix4(t){const e=this.attributes.position;void 0!==e&&(e.applyMatrix4(t),e.needsUpdate=!0);const n=this.attributes.normal;if(void 0!==n){const e=(new Yn).getNormalMatrix(t);n.applyNormalMatrix(e),n.needsUpdate=!0}const r=this.attributes.tangent;return void 0!==r&&(r.transformDirection(t),r.needsUpdate=!0),null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this}applyQuaternion(t){return Xs.makeRotationFromQuaternion(t),this.applyMatrix4(Xs),this}rotateX(t){return Xs.makeRotationX(t),this.applyMatrix4(Xs),this}rotateY(t){return Xs.makeRotationY(t),this.applyMatrix4(Xs),this}rotateZ(t){return Xs.makeRotationZ(t),this.applyMatrix4(Xs),this}translate(t,e,n){return Xs.makeTranslation(t,e,n),this.applyMatrix4(Xs),this}scale(t,e,n){return Xs.makeScale(t,e,n),this.applyMatrix4(Xs),this}lookAt(t){return Ks.lookAt(t),Ks.updateMatrix(),this.applyMatrix4(Ks.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(Ys).negate(),this.translate(Ys.x,Ys.y,Ys.z),this}setFromPoints(t){const e=[];for(let n=0,r=t.length;n<r;n++){const r=t[n];e.push(r.x,r.y,r.z||0)}return this.setAttribute(\"position\",new Vs(e,3)),this}computeBoundingBox(){null===this.boundingBox&&(this.boundingBox=new cr);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute)return console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set \"mesh.frustumCulled\" to \"false\".',this),void this.boundingBox.set(new or(-1/0,-1/0,-1/0),new or(1/0,1/0,1/0));if(void 0!==t){if(this.boundingBox.setFromBufferAttribute(t),e)for(let t=0,n=e.length;t<n;t++){const n=e[t];Zs.setFromBufferAttribute(n),this.morphTargetsRelative?(Qs.addVectors(this.boundingBox.min,Zs.min),this.boundingBox.expandByPoint(Qs),Qs.addVectors(this.boundingBox.max,Zs.max),this.boundingBox.expandByPoint(Qs)):(this.boundingBox.expandByPoint(Zs.min),this.boundingBox.expandByPoint(Zs.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.',this)}computeBoundingSphere(){null===this.boundingSphere&&(this.boundingSphere=new Cr);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute)return console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set \"mesh.frustumCulled\" to \"false\".',this),void this.boundingSphere.set(new or,1/0);if(t){const n=this.boundingSphere.center;if(Zs.setFromBufferAttribute(t),e)for(let t=0,n=e.length;t<n;t++){const n=e[t];Js.setFromBufferAttribute(n),this.morphTargetsRelative?(Qs.addVectors(Zs.min,Js.min),Zs.expandByPoint(Qs),Qs.addVectors(Zs.max,Js.max),Zs.expandByPoint(Qs)):(Zs.expandByPoint(Js.min),Zs.expandByPoint(Js.max))}Zs.getCenter(n);let r=0;for(let e=0,s=t.count;e<s;e++)Qs.fromBufferAttribute(t,e),r=Math.max(r,n.distanceToSquared(Qs));if(e)for(let s=0,i=e.length;s<i;s++){const i=e[s],a=this.morphTargetsRelative;for(let e=0,s=i.count;e<s;e++)Qs.fromBufferAttribute(i,e),a&&(Ys.fromBufferAttribute(t,e),Qs.add(Ys)),r=Math.max(r,n.distanceToSquared(Qs))}this.boundingSphere.radius=Math.sqrt(r),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.',this)}}computeTangents(){const t=this.index,e=this.attributes;if(null===t||void 0===e.position||void 0===e.normal||void 0===e.uv)return void console.error(\"THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)\");const n=t.array,r=e.position.array,s=e.normal.array,i=e.uv.array,a=r.length/3;void 0===e.tangent&&this.setAttribute(\"tangent\",new Ls(new Float32Array(4*a),4));const o=e.tangent.array,l=[],u=[];for(let t=0;t<a;t++)l[t]=new or,u[t]=new or;const c=new or,h=new or,d=new or,p=new Kn,f=new Kn,m=new Kn,g=new or,y=new or;function x(t,e,n){c.fromArray(r,3*t),h.fromArray(r,3*e),d.fromArray(r,3*n),p.fromArray(i,2*t),f.fromArray(i,2*e),m.fromArray(i,2*n),h.sub(c),d.sub(c),f.sub(p),m.sub(p);const s=1/(f.x*m.y-m.x*f.y);isFinite(s)&&(g.copy(h).multiplyScalar(m.y).addScaledVector(d,-f.y).multiplyScalar(s),y.copy(d).multiplyScalar(f.x).addScaledVector(h,-m.x).multiplyScalar(s),l[t].add(g),l[e].add(g),l[n].add(g),u[t].add(y),u[e].add(y),u[n].add(y))}let b=this.groups;0===b.length&&(b=[{start:0,count:n.length}]);for(let t=0,e=b.length;t<e;++t){const e=b[t],r=e.start;for(let t=r,s=r+e.count;t<s;t+=3)x(n[t+0],n[t+1],n[t+2])}const v=new or,w=new or,S=new or,T=new or;function _(t){S.fromArray(s,3*t),T.copy(S);const e=l[t];v.copy(e),v.sub(S.multiplyScalar(S.dot(e))).normalize(),w.crossVectors(T,e);const n=w.dot(u[t])<0?-1:1;o[4*t]=v.x,o[4*t+1]=v.y,o[4*t+2]=v.z,o[4*t+3]=n}for(let t=0,e=b.length;t<e;++t){const e=b[t],r=e.start;for(let t=r,s=r+e.count;t<s;t+=3)_(n[t+0]),_(n[t+1]),_(n[t+2])}}computeVertexNormals(){const t=this.index,e=this.getAttribute(\"position\");if(void 0!==e){let n=this.getAttribute(\"normal\");if(void 0===n)n=new Ls(new Float32Array(3*e.count),3),this.setAttribute(\"normal\",n);else for(let t=0,e=n.count;t<e;t++)n.setXYZ(t,0,0,0);const r=new or,s=new or,i=new or,a=new or,o=new or,l=new or,u=new or,c=new or;if(t)for(let h=0,d=t.count;h<d;h+=3){const d=t.getX(h+0),p=t.getX(h+1),f=t.getX(h+2);r.fromBufferAttribute(e,d),s.fromBufferAttribute(e,p),i.fromBufferAttribute(e,f),u.subVectors(i,s),c.subVectors(r,s),u.cross(c),a.fromBufferAttribute(n,d),o.fromBufferAttribute(n,p),l.fromBufferAttribute(n,f),a.add(u),o.add(u),l.add(u),n.setXYZ(d,a.x,a.y,a.z),n.setXYZ(p,o.x,o.y,o.z),n.setXYZ(f,l.x,l.y,l.z)}else for(let t=0,a=e.count;t<a;t+=3)r.fromBufferAttribute(e,t+0),s.fromBufferAttribute(e,t+1),i.fromBufferAttribute(e,t+2),u.subVectors(i,s),c.subVectors(r,s),u.cross(c),n.setXYZ(t+0,u.x,u.y,u.z),n.setXYZ(t+1,u.x,u.y,u.z),n.setXYZ(t+2,u.x,u.y,u.z);this.normalizeNormals(),n.needsUpdate=!0}}merge(t,e){if(!t||!t.isBufferGeometry)return void console.error(\"THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.\",t);void 0===e&&(e=0,console.warn(\"THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.\"));const n=this.attributes;for(const r in n){if(void 0===t.attributes[r])continue;const s=n[r].array,i=t.attributes[r],a=i.array,o=i.itemSize*e,l=Math.min(a.length,s.length-o);for(let t=0,e=o;t<l;t++,e++)s[e]=a[t]}return this}normalizeNormals(){const t=this.attributes.normal;for(let e=0,n=t.count;e<n;e++)Qs.fromBufferAttribute(t,e),Qs.normalize(),t.setXYZ(e,Qs.x,Qs.y,Qs.z)}toNonIndexed(){function t(t,e){const n=t.array,r=t.itemSize,s=t.normalized,i=new n.constructor(e.length*r);let a=0,o=0;for(let s=0,l=e.length;s<l;s++){a=t.isInterleavedBufferAttribute?e[s]*t.data.stride+t.offset:e[s]*r;for(let t=0;t<r;t++)i[o++]=n[a++]}return new Ls(i,r,s)}if(null===this.index)return console.warn(\"THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.\"),this;const e=new ti,n=this.index.array,r=this.attributes;for(const s in r){const i=t(r[s],n);e.setAttribute(s,i)}const s=this.morphAttributes;for(const r in s){const i=[],a=s[r];for(let e=0,r=a.length;e<r;e++){const r=t(a[e],n);i.push(r)}e.morphAttributes[r]=i}e.morphTargetsRelative=this.morphTargetsRelative;const i=this.groups;for(let t=0,n=i.length;t<n;t++){const n=i[t];e.addGroup(n.start,n.count,n.materialIndex)}return e}toJSON(){const t={metadata:{version:4.5,type:\"BufferGeometry\",generator:\"BufferGeometry.toJSON\"}};if(t.uuid=this.uuid,t.type=this.type,\"\"!==this.name&&(t.name=this.name),Object.keys(this.userData).length>0&&(t.userData=this.userData),void 0!==this.parameters){const e=this.parameters;for(const n in e)void 0!==e[n]&&(t[n]=e[n]);return t}t.data={attributes:{}};const e=this.index;null!==e&&(t.data.index={type:e.array.constructor.name,array:Array.prototype.slice.call(e.array)});const n=this.attributes;for(const e in n){const r=n[e];t.data.attributes[e]=r.toJSON(t.data)}const r={};let s=!1;for(const e in this.morphAttributes){const n=this.morphAttributes[e],i=[];for(let e=0,r=n.length;e<r;e++){const r=n[e];i.push(r.toJSON(t.data))}i.length>0&&(r[e]=i,s=!0)}s&&(t.data.morphAttributes=r,t.data.morphTargetsRelative=this.morphTargetsRelative);const i=this.groups;i.length>0&&(t.data.groups=JSON.parse(JSON.stringify(i)));const a=this.boundingSphere;return null!==a&&(t.data.boundingSphere={center:a.center.toArray(),radius:a.radius}),t}clone(){return(new ti).copy(this)}copy(t){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const e={};this.name=t.name;const n=t.index;null!==n&&this.setIndex(n.clone(e));const r=t.attributes;for(const t in r){const n=r[t];this.setAttribute(t,n.clone(e))}const s=t.morphAttributes;for(const t in s){const n=[],r=s[t];for(let t=0,s=r.length;t<s;t++)n.push(r[t].clone(e));this.morphAttributes[t]=n}this.morphTargetsRelative=t.morphTargetsRelative;const i=t.groups;for(let t=0,e=i.length;t<e;t++){const e=i[t];this.addGroup(e.start,e.count,e.materialIndex)}const a=t.boundingBox;null!==a&&(this.boundingBox=a.clone());const o=t.boundingSphere;return null!==o&&(this.boundingSphere=o.clone()),this.drawRange.start=t.drawRange.start,this.drawRange.count=t.drawRange.count,this.userData=t.userData,this}dispose(){this.dispatchEvent({type:\"dispose\"})}}ti.prototype.isBufferGeometry=!0;const ei=new Pr,ni=new Or,ri=new Cr,si=new or,ii=new or,ai=new or,oi=new or,li=new or,ui=new or,ci=new or,hi=new or,di=new or,pi=new Kn,fi=new Kn,mi=new Kn,gi=new or,yi=new or;class xi extends us{constructor(t=new ti,e=new Ns){super(),this.type=\"Mesh\",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t){return super.copy(t),void 0!==t.morphTargetInfluences&&(this.morphTargetInfluences=t.morphTargetInfluences.slice()),void 0!==t.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},t.morphTargetDictionary)),this.material=t.material,this.geometry=t.geometry,this}updateMorphTargets(){const t=this.geometry;if(t.isBufferGeometry){const e=t.morphAttributes,n=Object.keys(e);if(n.length>0){const t=e[n[0]];if(void 0!==t){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let e=0,n=t.length;e<n;e++){const n=t[e].name||String(e);this.morphTargetInfluences.push(0),this.morphTargetDictionary[n]=e}}}}else{const e=t.morphTargets;void 0!==e&&e.length>0&&console.error(\"THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.\")}}raycast(t,e){const n=this.geometry,r=this.material,s=this.matrixWorld;if(void 0===r)return;if(null===n.boundingSphere&&n.computeBoundingSphere(),ri.copy(n.boundingSphere),ri.applyMatrix4(s),!1===t.ray.intersectsSphere(ri))return;if(ei.copy(s).invert(),ni.copy(t.ray).applyMatrix4(ei),null!==n.boundingBox&&!1===ni.intersectsBox(n.boundingBox))return;let i;if(n.isBufferGeometry){const s=n.index,a=n.attributes.position,o=n.morphAttributes.position,l=n.morphTargetsRelative,u=n.attributes.uv,c=n.attributes.uv2,h=n.groups,d=n.drawRange;if(null!==s)if(Array.isArray(r))for(let n=0,p=h.length;n<p;n++){const p=h[n],f=r[p.materialIndex];for(let n=Math.max(p.start,d.start),r=Math.min(p.start+p.count,d.start+d.count);n<r;n+=3){const r=s.getX(n),h=s.getX(n+1),d=s.getX(n+2);i=bi(this,f,t,ni,a,o,l,u,c,r,h,d),i&&(i.faceIndex=Math.floor(n/3),i.face.materialIndex=p.materialIndex,e.push(i))}}else for(let n=Math.max(0,d.start),h=Math.min(s.count,d.start+d.count);n<h;n+=3){const h=s.getX(n),d=s.getX(n+1),p=s.getX(n+2);i=bi(this,r,t,ni,a,o,l,u,c,h,d,p),i&&(i.faceIndex=Math.floor(n/3),e.push(i))}else if(void 0!==a)if(Array.isArray(r))for(let n=0,s=h.length;n<s;n++){const s=h[n],p=r[s.materialIndex];for(let n=Math.max(s.start,d.start),r=Math.min(s.start+s.count,d.start+d.count);n<r;n+=3)i=bi(this,p,t,ni,a,o,l,u,c,n,n+1,n+2),i&&(i.faceIndex=Math.floor(n/3),i.face.materialIndex=s.materialIndex,e.push(i))}else for(let n=Math.max(0,d.start),s=Math.min(a.count,d.start+d.count);n<s;n+=3)i=bi(this,r,t,ni,a,o,l,u,c,n,n+1,n+2),i&&(i.faceIndex=Math.floor(n/3),e.push(i))}else n.isGeometry&&console.error(\"THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.\")}}function bi(t,e,n,r,s,i,a,o,l,u,c,h){si.fromBufferAttribute(s,u),ii.fromBufferAttribute(s,c),ai.fromBufferAttribute(s,h);const d=t.morphTargetInfluences;if(i&&d){ci.set(0,0,0),hi.set(0,0,0),di.set(0,0,0);for(let t=0,e=i.length;t<e;t++){const e=d[t],n=i[t];0!==e&&(oi.fromBufferAttribute(n,u),li.fromBufferAttribute(n,c),ui.fromBufferAttribute(n,h),a?(ci.addScaledVector(oi,e),hi.addScaledVector(li,e),di.addScaledVector(ui,e)):(ci.addScaledVector(oi.sub(si),e),hi.addScaledVector(li.sub(ii),e),di.addScaledVector(ui.sub(ai),e)))}si.add(ci),ii.add(hi),ai.add(di)}t.isSkinnedMesh&&(t.boneTransform(u,si),t.boneTransform(c,ii),t.boneTransform(h,ai));const p=function(t,e,n,r,s,i,a,o){let l;if(l=e.side===m?r.intersectTriangle(a,i,s,!0,o):r.intersectTriangle(s,i,a,e.side!==g,o),null===l)return null;yi.copy(o),yi.applyMatrix4(t.matrixWorld);const u=n.ray.origin.distanceTo(yi);return u<n.near||u>n.far?null:{distance:u,point:yi.clone(),object:t}}(t,e,n,r,si,ii,ai,gi);if(p){o&&(pi.fromBufferAttribute(o,u),fi.fromBufferAttribute(o,c),mi.fromBufferAttribute(o,h),p.uv=vs.getUV(gi,si,ii,ai,pi,fi,mi,new Kn)),l&&(pi.fromBufferAttribute(l,u),fi.fromBufferAttribute(l,c),mi.fromBufferAttribute(l,h),p.uv2=vs.getUV(gi,si,ii,ai,pi,fi,mi,new Kn));const t={a:u,b:c,c:h,normal:new or,materialIndex:0};vs.getNormal(si,ii,ai,t.normal),p.face=t}return p}xi.prototype.isMesh=!0;class vi extends ti{constructor(t=1,e=1,n=1,r=1,s=1,i=1){super(),this.type=\"BoxGeometry\",this.parameters={width:t,height:e,depth:n,widthSegments:r,heightSegments:s,depthSegments:i};const a=this;r=Math.floor(r),s=Math.floor(s),i=Math.floor(i);const o=[],l=[],u=[],c=[];let h=0,d=0;function p(t,e,n,r,s,i,p,f,m,g,y){const x=i/m,b=p/g,v=i/2,w=p/2,S=f/2,T=m+1,_=g+1;let M=0,k=0;const E=new or;for(let i=0;i<_;i++){const a=i*b-w;for(let o=0;o<T;o++){const h=o*x-v;E[t]=h*r,E[e]=a*s,E[n]=S,l.push(E.x,E.y,E.z),E[t]=0,E[e]=0,E[n]=f>0?1:-1,u.push(E.x,E.y,E.z),c.push(o/m),c.push(1-i/g),M+=1}}for(let t=0;t<g;t++)for(let e=0;e<m;e++){const n=h+e+T*t,r=h+e+T*(t+1),s=h+(e+1)+T*(t+1),i=h+(e+1)+T*t;o.push(n,r,i),o.push(r,s,i),k+=6}a.addGroup(d,k,y),d+=k,h+=M}p(\"z\",\"y\",\"x\",-1,-1,n,e,t,i,s,0),p(\"z\",\"y\",\"x\",1,-1,n,e,-t,i,s,1),p(\"x\",\"z\",\"y\",1,1,t,n,e,r,i,2),p(\"x\",\"z\",\"y\",1,-1,t,n,-e,r,i,3),p(\"x\",\"y\",\"z\",1,-1,t,e,n,r,s,4),p(\"x\",\"y\",\"z\",-1,-1,t,e,-n,r,s,5),this.setIndex(o),this.setAttribute(\"position\",new Vs(l,3)),this.setAttribute(\"normal\",new Vs(u,3)),this.setAttribute(\"uv\",new Vs(c,2))}static fromJSON(t){return new vi(t.width,t.height,t.depth,t.widthSegments,t.heightSegments,t.depthSegments)}}function wi(t){const e={};for(const n in t){e[n]={};for(const r in t[n]){const s=t[n][r];s&&(s.isColor||s.isMatrix3||s.isMatrix4||s.isVector2||s.isVector3||s.isVector4||s.isTexture||s.isQuaternion)?e[n][r]=s.clone():Array.isArray(s)?e[n][r]=s.slice():e[n][r]=s}}return e}function Si(t){const e={};for(let n=0;n<t.length;n++){const r=wi(t[n]);for(const t in r)e[t]=r[t]}return e}const Ti={clone:wi,merge:Si};class _i extends Ss{constructor(t){super(),this.type=\"ShaderMaterial\",this.defines={},this.uniforms={},this.vertexShader=\"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\",this.fragmentShader=\"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,void 0!==t&&(void 0!==t.attributes&&console.error(\"THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.\"),this.setValues(t))}copy(t){return super.copy(t),this.fragmentShader=t.fragmentShader,this.vertexShader=t.vertexShader,this.uniforms=wi(t.uniforms),this.defines=Object.assign({},t.defines),this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.lights=t.lights,this.clipping=t.clipping,this.extensions=Object.assign({},t.extensions),this.glslVersion=t.glslVersion,this}toJSON(t){const e=super.toJSON(t);e.glslVersion=this.glslVersion,e.uniforms={};for(const n in this.uniforms){const r=this.uniforms[n].value;r&&r.isTexture?e.uniforms[n]={type:\"t\",value:r.toJSON(t).uuid}:r&&r.isColor?e.uniforms[n]={type:\"c\",value:r.getHex()}:r&&r.isVector2?e.uniforms[n]={type:\"v2\",value:r.toArray()}:r&&r.isVector3?e.uniforms[n]={type:\"v3\",value:r.toArray()}:r&&r.isVector4?e.uniforms[n]={type:\"v4\",value:r.toArray()}:r&&r.isMatrix3?e.uniforms[n]={type:\"m3\",value:r.toArray()}:r&&r.isMatrix4?e.uniforms[n]={type:\"m4\",value:r.toArray()}:e.uniforms[n]={value:r}}Object.keys(this.defines).length>0&&(e.defines=this.defines),e.vertexShader=this.vertexShader,e.fragmentShader=this.fragmentShader;const n={};for(const t in this.extensions)!0===this.extensions[t]&&(n[t]=!0);return Object.keys(n).length>0&&(e.extensions=n),e}}_i.prototype.isShaderMaterial=!0;class Mi extends us{constructor(){super(),this.type=\"Camera\",this.matrixWorldInverse=new Pr,this.projectionMatrix=new Pr,this.projectionMatrixInverse=new Pr}copy(t,e){return super.copy(t,e),this.matrixWorldInverse.copy(t.matrixWorldInverse),this.projectionMatrix.copy(t.projectionMatrix),this.projectionMatrixInverse.copy(t.projectionMatrixInverse),this}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(-e[8],-e[9],-e[10]).normalize()}updateMatrixWorld(t){super.updateMatrixWorld(t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(t,e){super.updateWorldMatrix(t,e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return(new this.constructor).copy(this)}}Mi.prototype.isCamera=!0;class ki extends Mi{constructor(t=50,e=1,n=.1,r=2e3){super(),this.type=\"PerspectiveCamera\",this.fov=t,this.zoom=1,this.near=n,this.far=r,this.focus=10,this.aspect=e,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.fov=t.fov,this.zoom=t.zoom,this.near=t.near,this.far=t.far,this.focus=t.focus,this.aspect=t.aspect,this.view=null===t.view?null:Object.assign({},t.view),this.filmGauge=t.filmGauge,this.filmOffset=t.filmOffset,this}setFocalLength(t){const e=.5*this.getFilmHeight()/t;this.fov=2*Bn*Math.atan(e),this.updateProjectionMatrix()}getFocalLength(){const t=Math.tan(.5*zn*this.fov);return.5*this.getFilmHeight()/t}getEffectiveFOV(){return 2*Bn*Math.atan(Math.tan(.5*zn*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}setViewOffset(t,e,n,r,s,i){this.aspect=t/e,null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=n,this.view.offsetY=r,this.view.width=s,this.view.height=i,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=this.near;let e=t*Math.tan(.5*zn*this.fov)/this.zoom,n=2*e,r=this.aspect*n,s=-.5*r;const i=this.view;if(null!==this.view&&this.view.enabled){const t=i.fullWidth,a=i.fullHeight;s+=i.offsetX*r/t,e-=i.offsetY*n/a,r*=i.width/t,n*=i.height/a}const a=this.filmOffset;0!==a&&(s+=t*a/this.getFilmWidth()),this.projectionMatrix.makePerspective(s,s+r,e,e-n,t,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.fov=this.fov,e.object.zoom=this.zoom,e.object.near=this.near,e.object.far=this.far,e.object.focus=this.focus,e.object.aspect=this.aspect,null!==this.view&&(e.object.view=Object.assign({},this.view)),e.object.filmGauge=this.filmGauge,e.object.filmOffset=this.filmOffset,e}}ki.prototype.isPerspectiveCamera=!0;const Ei=90;class Ii extends us{constructor(t,e,n){if(super(),this.type=\"CubeCamera\",!0!==n.isWebGLCubeRenderTarget)return void console.error(\"THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.\");this.renderTarget=n;const r=new ki(Ei,1,t,e);r.layers=this.layers,r.up.set(0,-1,0),r.lookAt(new or(1,0,0)),this.add(r);const s=new ki(Ei,1,t,e);s.layers=this.layers,s.up.set(0,-1,0),s.lookAt(new or(-1,0,0)),this.add(s);const i=new ki(Ei,1,t,e);i.layers=this.layers,i.up.set(0,0,1),i.lookAt(new or(0,1,0)),this.add(i);const a=new ki(Ei,1,t,e);a.layers=this.layers,a.up.set(0,0,-1),a.lookAt(new or(0,-1,0)),this.add(a);const o=new ki(Ei,1,t,e);o.layers=this.layers,o.up.set(0,-1,0),o.lookAt(new or(0,0,1)),this.add(o);const l=new ki(Ei,1,t,e);l.layers=this.layers,l.up.set(0,-1,0),l.lookAt(new or(0,0,-1)),this.add(l)}update(t,e){null===this.parent&&this.updateMatrixWorld();const n=this.renderTarget,[r,s,i,a,o,l]=this.children,u=t.xr.enabled,c=t.getRenderTarget();t.xr.enabled=!1;const h=n.texture.generateMipmaps;n.texture.generateMipmaps=!1,t.setRenderTarget(n,0),t.render(e,r),t.setRenderTarget(n,1),t.render(e,s),t.setRenderTarget(n,2),t.render(e,i),t.setRenderTarget(n,3),t.render(e,a),t.setRenderTarget(n,4),t.render(e,o),n.texture.generateMipmaps=h,t.setRenderTarget(n,5),t.render(e,l),t.setRenderTarget(c),t.xr.enabled=u}}class Ci extends tr{constructor(t,e,n,r,s,i,a,o,l,u){super(t=void 0!==t?t:[],e=void 0!==e?e:it,n,r,s,i,a=void 0!==a?a:Ot,o,l,u),this.flipY=!1}get images(){return this.image}set images(t){this.image=t}}Ci.prototype.isCubeTexture=!0;class Ni extends rr{constructor(t,e,n){Number.isInteger(e)&&(console.warn(\"THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )\"),e=n),super(t,t,e),e=e||{},this.texture=new Ci(void 0,e.mapping,e.wrapS,e.wrapT,e.magFilter,e.minFilter,e.format,e.type,e.anisotropy,e.encoding),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=void 0!==e.generateMipmaps&&e.generateMipmaps,this.texture.minFilter=void 0!==e.minFilter?e.minFilter:bt,this.texture._needsFlipEnvMap=!1}fromEquirectangularTexture(t,e){this.texture.type=e.type,this.texture.format=Pt,this.texture.encoding=e.encoding,this.texture.generateMipmaps=e.generateMipmaps,this.texture.minFilter=e.minFilter,this.texture.magFilter=e.magFilter;const n={tEquirect:{value:null}},r=\"\\n\\n\\t\\t\\t\\tvarying vec3 vWorldDirection;\\n\\n\\t\\t\\t\\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\n\\t\\t\\t\\t\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\t\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\n\\t\\t\\t\\t\\t#include <begin_vertex>\\n\\t\\t\\t\\t\\t#include <project_vertex>\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\",s=\"\\n\\n\\t\\t\\t\\tuniform sampler2D tEquirect;\\n\\n\\t\\t\\t\\tvarying vec3 vWorldDirection;\\n\\n\\t\\t\\t\\t#include <common>\\n\\n\\t\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\t\\tvec3 direction = normalize( vWorldDirection );\\n\\n\\t\\t\\t\\t\\tvec2 sampleUV = equirectUv( direction );\\n\\n\\t\\t\\t\\t\\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n\\n\\t\\t\\t\\t}\\n\\t\\t\\t\",i=new vi(5,5,5),a=new _i({name:\"CubemapFromEquirect\",uniforms:wi(n),vertexShader:r,fragmentShader:s,side:m,blending:b});a.uniforms.tEquirect.value=e;const o=new xi(i,a),l=e.minFilter;return e.minFilter===St&&(e.minFilter=bt),new Ii(1,10,this).update(t,o),e.minFilter=l,o.geometry.dispose(),o.material.dispose(),this}clear(t,e,n,r){const s=t.getRenderTarget();for(let s=0;s<6;s++)t.setRenderTarget(this,s),t.clear(e,n,r);t.setRenderTarget(s)}}Ni.prototype.isWebGLCubeRenderTarget=!0;const Ai=new or,Ri=new or,Li=new Yn;class Di{constructor(t=new or(1,0,0),e=0){this.normal=t,this.constant=e}set(t,e){return this.normal.copy(t),this.constant=e,this}setComponents(t,e,n,r){return this.normal.set(t,e,n),this.constant=r,this}setFromNormalAndCoplanarPoint(t,e){return this.normal.copy(t),this.constant=-e.dot(this.normal),this}setFromCoplanarPoints(t,e,n){const r=Ai.subVectors(n,e).cross(Ri.subVectors(t,e)).normalize();return this.setFromNormalAndCoplanarPoint(r,t),this}copy(t){return this.normal.copy(t.normal),this.constant=t.constant,this}normalize(){const t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(t){return this.normal.dot(t)+this.constant}distanceToSphere(t){return this.distanceToPoint(t.center)-t.radius}projectPoint(t,e){return e.copy(this.normal).multiplyScalar(-this.distanceToPoint(t)).add(t)}intersectLine(t,e){const n=t.delta(Ai),r=this.normal.dot(n);if(0===r)return 0===this.distanceToPoint(t.start)?e.copy(t.start):null;const s=-(t.start.dot(this.normal)+this.constant)/r;return s<0||s>1?null:e.copy(n).multiplyScalar(s).add(t.start)}intersectsLine(t){const e=this.distanceToPoint(t.start),n=this.distanceToPoint(t.end);return e<0&&n>0||n<0&&e>0}intersectsBox(t){return t.intersectsPlane(this)}intersectsSphere(t){return t.intersectsPlane(this)}coplanarPoint(t){return t.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(t,e){const n=e||Li.getNormalMatrix(t),r=this.coplanarPoint(Ai).applyMatrix4(t),s=this.normal.applyMatrix3(n).normalize();return this.constant=-r.dot(s),this}translate(t){return this.constant-=t.dot(this.normal),this}equals(t){return t.normal.equals(this.normal)&&t.constant===this.constant}clone(){return(new this.constructor).copy(this)}}Di.prototype.isPlane=!0;const Fi=new Cr,$i=new or;class Oi{constructor(t=new Di,e=new Di,n=new Di,r=new Di,s=new Di,i=new Di){this.planes=[t,e,n,r,s,i]}set(t,e,n,r,s,i){const a=this.planes;return a[0].copy(t),a[1].copy(e),a[2].copy(n),a[3].copy(r),a[4].copy(s),a[5].copy(i),this}copy(t){const e=this.planes;for(let n=0;n<6;n++)e[n].copy(t.planes[n]);return this}setFromProjectionMatrix(t){const e=this.planes,n=t.elements,r=n[0],s=n[1],i=n[2],a=n[3],o=n[4],l=n[5],u=n[6],c=n[7],h=n[8],d=n[9],p=n[10],f=n[11],m=n[12],g=n[13],y=n[14],x=n[15];return e[0].setComponents(a-r,c-o,f-h,x-m).normalize(),e[1].setComponents(a+r,c+o,f+h,x+m).normalize(),e[2].setComponents(a+s,c+l,f+d,x+g).normalize(),e[3].setComponents(a-s,c-l,f-d,x-g).normalize(),e[4].setComponents(a-i,c-u,f-p,x-y).normalize(),e[5].setComponents(a+i,c+u,f+p,x+y).normalize(),this}intersectsObject(t){const e=t.geometry;return null===e.boundingSphere&&e.computeBoundingSphere(),Fi.copy(e.boundingSphere).applyMatrix4(t.matrixWorld),this.intersectsSphere(Fi)}intersectsSprite(t){return Fi.center.set(0,0,0),Fi.radius=.7071067811865476,Fi.applyMatrix4(t.matrixWorld),this.intersectsSphere(Fi)}intersectsSphere(t){const e=this.planes,n=t.center,r=-t.radius;for(let t=0;t<6;t++)if(e[t].distanceToPoint(n)<r)return!1;return!0}intersectsBox(t){const e=this.planes;for(let n=0;n<6;n++){const r=e[n];if($i.x=r.normal.x>0?t.max.x:t.min.x,$i.y=r.normal.y>0?t.max.y:t.min.y,$i.z=r.normal.z>0?t.max.z:t.min.z,r.distanceToPoint($i)<0)return!1}return!0}containsPoint(t){const e=this.planes;for(let n=0;n<6;n++)if(e[n].distanceToPoint(t)<0)return!1;return!0}clone(){return(new this.constructor).copy(this)}}function Pi(){let t=null,e=!1,n=null,r=null;function s(e,i){n(e,i),r=t.requestAnimationFrame(s)}return{start:function(){!0!==e&&null!==n&&(r=t.requestAnimationFrame(s),e=!0)},stop:function(){t.cancelAnimationFrame(r),e=!1},setAnimationLoop:function(t){n=t},setContext:function(e){t=e}}}function zi(t,e){const n=e.isWebGL2,r=new WeakMap;return{get:function(t){return t.isInterleavedBufferAttribute&&(t=t.data),r.get(t)},remove:function(e){e.isInterleavedBufferAttribute&&(e=e.data);const n=r.get(e);n&&(t.deleteBuffer(n.buffer),r.delete(e))},update:function(e,s){if(e.isGLBufferAttribute){const t=r.get(e);return void((!t||t.version<e.version)&&r.set(e,{buffer:e.buffer,type:e.type,bytesPerElement:e.elementSize,version:e.version}))}e.isInterleavedBufferAttribute&&(e=e.data);const i=r.get(e);void 0===i?r.set(e,function(e,r){const s=e.array,i=e.usage,a=t.createBuffer();t.bindBuffer(r,a),t.bufferData(r,s,i),e.onUploadCallback();let o=5126;return s instanceof Float32Array?o=5126:s instanceof Float64Array?console.warn(\"THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.\"):s instanceof Uint16Array?e.isFloat16BufferAttribute?n?o=5131:console.warn(\"THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.\"):o=5123:s instanceof Int16Array?o=5122:s instanceof Uint32Array?o=5125:s instanceof Int32Array?o=5124:s instanceof Int8Array?o=5120:(s instanceof Uint8Array||s instanceof Uint8ClampedArray)&&(o=5121),{buffer:a,type:o,bytesPerElement:s.BYTES_PER_ELEMENT,version:e.version}}(e,s)):i.version<e.version&&(function(e,r,s){const i=r.array,a=r.updateRange;t.bindBuffer(s,e),-1===a.count?t.bufferSubData(s,0,i):(n?t.bufferSubData(s,a.offset*i.BYTES_PER_ELEMENT,i,a.offset,a.count):t.bufferSubData(s,a.offset*i.BYTES_PER_ELEMENT,i.subarray(a.offset,a.offset+a.count)),a.count=-1)}(i.buffer,e,s),i.version=e.version)}}}class Bi extends ti{constructor(t=1,e=1,n=1,r=1){super(),this.type=\"PlaneGeometry\",this.parameters={width:t,height:e,widthSegments:n,heightSegments:r};const s=t/2,i=e/2,a=Math.floor(n),o=Math.floor(r),l=a+1,u=o+1,c=t/a,h=e/o,d=[],p=[],f=[],m=[];for(let t=0;t<u;t++){const e=t*h-i;for(let n=0;n<l;n++){const r=n*c-s;p.push(r,-e,0),f.push(0,0,1),m.push(n/a),m.push(1-t/o)}}for(let t=0;t<o;t++)for(let e=0;e<a;e++){const n=e+l*t,r=e+l*(t+1),s=e+1+l*(t+1),i=e+1+l*t;d.push(n,r,i),d.push(r,s,i)}this.setIndex(d),this.setAttribute(\"position\",new Vs(p,3)),this.setAttribute(\"normal\",new Vs(f,3)),this.setAttribute(\"uv\",new Vs(m,2))}static fromJSON(t){return new Bi(t.width,t.height,t.widthSegments,t.heightSegments)}}const Ui={alphamap_fragment:\"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\",alphamap_pars_fragment:\"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\",alphatest_fragment:\"#ifdef USE_ALPHATEST\\n\\tif ( diffuseColor.a < alphaTest ) discard;\\n#endif\",alphatest_pars_fragment:\"#ifdef USE_ALPHATEST\\n\\tuniform float alphaTest;\\n#endif\",aomap_fragment:\"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD )\\n\\t\\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\\n\\t#endif\\n#endif\",aomap_pars_fragment:\"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\",begin_vertex:\"vec3 transformed = vec3( position );\",beginnormal_vertex:\"vec3 objectNormal = vec3( normal );\\n#ifdef USE_TANGENT\\n\\tvec3 objectTangent = vec3( tangent.xyz );\\n#endif\",bsdfs:\"vec3 BRDF_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\\n\\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\\n\\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\\n}\\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( incidentLight.direction + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, incidentLight.direction ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\\n\\tvec3 F = F_Schlick( f0, f90, dotVH );\\n\\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\tfloat D = D_GGX( alpha, dotNH );\\n\\treturn F * ( V * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\\tfloat dotVH = saturate( dot( geometry.viewDir, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n}\\n#if defined( USE_SHEEN )\\nfloat D_Charlie( float roughness, float NoH ) {\\n\\tfloat invAlpha = 1.0 / roughness;\\n\\tfloat cos2h = NoH * NoH;\\n\\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\\n\\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\\n}\\nfloat V_Neubelt( float NoV, float NoL ) {\\n\\treturn saturate( 1.0 / ( 4.0 * ( NoL + NoV - NoL * NoV ) ) );\\n}\\nvec3 BRDF_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\\n\\tvec3 N = geometry.normal;\\n\\tvec3 V = geometry.viewDir;\\n\\tvec3 H = normalize( V + L );\\n\\tfloat dotNH = saturate( dot( N, H ) );\\n\\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\\n}\\n#endif\",bumpmap_pars_fragment:\"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vUv );\\n\\t\\tvec2 dSTdy = dFdy( vUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\\n\\t\\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\\n\\t\\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\",clipping_planes_fragment:\"#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\tplane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t\\tif ( clipped ) discard;\\n\\t#endif\\n#endif\",clipping_planes_pars_fragment:\"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\",clipping_planes_pars_vertex:\"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n#endif\",clipping_planes_vertex:\"#if NUM_CLIPPING_PLANES > 0\\n\\tvClipPosition = - mvPosition.xyz;\\n#endif\",color_fragment:\"#if defined( USE_COLOR_ALPHA )\\n\\tdiffuseColor *= vColor;\\n#elif defined( USE_COLOR )\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\",color_pars_fragment:\"#if defined( USE_COLOR_ALPHA )\\n\\tvarying vec4 vColor;\\n#elif defined( USE_COLOR )\\n\\tvarying vec3 vColor;\\n#endif\",color_pars_vertex:\"#if defined( USE_COLOR_ALPHA )\\n\\tvarying vec4 vColor;\\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvarying vec3 vColor;\\n#endif\",color_vertex:\"#if defined( USE_COLOR_ALPHA )\\n\\tvColor = vec4( 1.0 );\\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvColor = vec3( 1.0 );\\n#endif\\n#ifdef USE_COLOR\\n\\tvColor *= color;\\n#endif\\n#ifdef USE_INSTANCING_COLOR\\n\\tvColor.xyz *= instanceColor.xyz;\\n#endif\",common:\"#define PI 3.141592653589793\\n#define PI2 6.283185307179586\\n#define PI_HALF 1.5707963267948966\\n#define RECIPROCAL_PI 0.3183098861837907\\n#define RECIPROCAL_PI2 0.15915494309189535\\n#define EPSILON 1e-6\\n#ifndef saturate\\n#define saturate( a ) clamp( a, 0.0, 1.0 )\\n#endif\\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract( sin( sn ) * c );\\n}\\n#ifdef HIGH_PRECISION\\n\\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\\n#else\\n\\tfloat precisionSafeLength( vec3 v ) {\\n\\t\\tfloat maxComponent = max3( abs( v ) );\\n\\t\\treturn length( v / maxComponent ) * maxComponent;\\n\\t}\\n#endif\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\\tvec3 position;\\n\\tvec3 normal;\\n\\tvec3 viewDir;\\n#ifdef USE_CLEARCOAT\\n\\tvec3 clearcoatNormal;\\n#endif\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat linearToRelativeLuminance( const in vec3 color ) {\\n\\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\\n\\treturn dot( weights, color.rgb );\\n}\\nbool isPerspectiveMatrix( mat4 m ) {\\n\\treturn m[ 2 ][ 3 ] == - 1.0;\\n}\\nvec2 equirectUv( in vec3 dir ) {\\n\\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\treturn vec2( u, v );\\n}\",cube_uv_reflection_fragment:\"#ifdef ENVMAP_TYPE_CUBE_UV\\n\\t#define cubeUV_maxMipLevel 8.0\\n\\t#define cubeUV_minMipLevel 4.0\\n\\t#define cubeUV_maxTileSize 256.0\\n\\t#define cubeUV_minTileSize 16.0\\n\\tfloat getFace( vec3 direction ) {\\n\\t\\tvec3 absDirection = abs( direction );\\n\\t\\tfloat face = - 1.0;\\n\\t\\tif ( absDirection.x > absDirection.z ) {\\n\\t\\t\\tif ( absDirection.x > absDirection.y )\\n\\t\\t\\t\\tface = direction.x > 0.0 ? 0.0 : 3.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t} else {\\n\\t\\t\\tif ( absDirection.z > absDirection.y )\\n\\t\\t\\t\\tface = direction.z > 0.0 ? 2.0 : 5.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t}\\n\\t\\treturn face;\\n\\t}\\n\\tvec2 getUV( vec3 direction, float face ) {\\n\\t\\tvec2 uv;\\n\\t\\tif ( face == 0.0 ) {\\n\\t\\t\\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 1.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\\n\\t\\t} else if ( face == 2.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\\n\\t\\t} else if ( face == 3.0 ) {\\n\\t\\t\\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 4.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\\n\\t\\t} else {\\n\\t\\t\\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\\n\\t\\t}\\n\\t\\treturn 0.5 * ( uv + 1.0 );\\n\\t}\\n\\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\\n\\t\\tfloat face = getFace( direction );\\n\\t\\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\\n\\t\\tmipInt = max( mipInt, cubeUV_minMipLevel );\\n\\t\\tfloat faceSize = exp2( mipInt );\\n\\t\\tfloat texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\\n\\t\\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );\\n\\t\\tvec2 f = fract( uv );\\n\\t\\tuv += 0.5 - f;\\n\\t\\tif ( face > 2.0 ) {\\n\\t\\t\\tuv.y += faceSize;\\n\\t\\t\\tface -= 3.0;\\n\\t\\t}\\n\\t\\tuv.x += face * faceSize;\\n\\t\\tif ( mipInt < cubeUV_maxMipLevel ) {\\n\\t\\t\\tuv.y += 2.0 * cubeUV_maxTileSize;\\n\\t\\t}\\n\\t\\tuv.y += filterInt * 2.0 * cubeUV_minTileSize;\\n\\t\\tuv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\\n\\t\\tuv *= texelSize;\\n\\t\\tvec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.x += texelSize;\\n\\t\\tvec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.y += texelSize;\\n\\t\\tvec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tuv.x -= texelSize;\\n\\t\\tvec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\\n\\t\\tvec3 tm = mix( tl, tr, f.x );\\n\\t\\tvec3 bm = mix( bl, br, f.x );\\n\\t\\treturn mix( tm, bm, f.y );\\n\\t}\\n\\t#define r0 1.0\\n\\t#define v0 0.339\\n\\t#define m0 - 2.0\\n\\t#define r1 0.8\\n\\t#define v1 0.276\\n\\t#define m1 - 1.0\\n\\t#define r4 0.4\\n\\t#define v4 0.046\\n\\t#define m4 2.0\\n\\t#define r5 0.305\\n\\t#define v5 0.016\\n\\t#define m5 3.0\\n\\t#define r6 0.21\\n\\t#define v6 0.0038\\n\\t#define m6 4.0\\n\\tfloat roughnessToMip( float roughness ) {\\n\\t\\tfloat mip = 0.0;\\n\\t\\tif ( roughness >= r1 ) {\\n\\t\\t\\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\\n\\t\\t} else if ( roughness >= r4 ) {\\n\\t\\t\\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\\n\\t\\t} else if ( roughness >= r5 ) {\\n\\t\\t\\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\\n\\t\\t} else if ( roughness >= r6 ) {\\n\\t\\t\\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\\n\\t\\t} else {\\n\\t\\t\\tmip = - 2.0 * log2( 1.16 * roughness );\\t\\t}\\n\\t\\treturn mip;\\n\\t}\\n\\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\\n\\t\\tfloat mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\\n\\t\\tfloat mipF = fract( mip );\\n\\t\\tfloat mipInt = floor( mip );\\n\\t\\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\\n\\t\\tif ( mipF == 0.0 ) {\\n\\t\\t\\treturn vec4( color0, 1.0 );\\n\\t\\t} else {\\n\\t\\t\\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\\n\\t\\t\\treturn vec4( mix( color0, color1, mipF ), 1.0 );\\n\\t\\t}\\n\\t}\\n#endif\",defaultnormal_vertex:\"vec3 transformedNormal = objectNormal;\\n#ifdef USE_INSTANCING\\n\\tmat3 m = mat3( instanceMatrix );\\n\\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\\n\\ttransformedNormal = m * transformedNormal;\\n#endif\\ntransformedNormal = normalMatrix * transformedNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n#ifdef USE_TANGENT\\n\\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#ifdef FLIP_SIDED\\n\\t\\ttransformedTangent = - transformedTangent;\\n\\t#endif\\n#endif\",displacementmap_pars_vertex:\"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\",displacementmap_vertex:\"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\\n#endif\",emissivemap_fragment:\"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\",emissivemap_pars_fragment:\"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\",encodings_fragment:\"gl_FragColor = linearToOutputTexel( gl_FragColor );\",encodings_pars_fragment:\"\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n\\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n\\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n\\tfloat maxComponent = max( max( value.r, value.g ), value.b );\\n\\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n\\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n\\tM = ceil( M * 255.0 ) / 255.0;\\n\\treturn vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n\\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n\\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\\n\\tfloat D = max( maxRange / maxRGB, 1.0 );\\n\\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\\n\\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value ) {\\n\\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\\n\\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\\n\\tvec4 vResult;\\n\\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n\\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n\\tvResult.w = fract( Le );\\n\\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\\n\\treturn vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n\\tfloat Le = value.z * 255.0 + value.w;\\n\\tvec3 Xp_Y_XYZp;\\n\\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\\n\\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n\\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n\\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\\n\\treturn vec4( max( vRGB, 0.0 ), 1.0 );\\n}\",envmap_fragment:\"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvec3 cameraToFrag;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t\\tenvColor = envMapTexelToLinear( envColor );\\n\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\",envmap_common_pars_fragment:\"#ifdef USE_ENVMAP\\n\\tuniform float envMapIntensity;\\n\\tuniform float flipEnvMap;\\n\\tuniform int maxMipLevel;\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\t\\n#endif\",envmap_pars_fragment:\"#ifdef USE_ENVMAP\\n\\tuniform float reflectivity;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\",envmap_pars_vertex:\"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\t\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\",envmap_physical_pars_fragment:\"#if defined( USE_ENVMAP )\\n\\t#ifdef ENVMAP_MODE_REFRACTION\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n\\tvec3 getIBLIrradiance( const in GeometricContext geometry ) {\\n\\t\\t#if defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\\n\\t\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t\\t#else\\n\\t\\t\\treturn vec3( 0.0 );\\n\\t\\t#endif\\n\\t}\\n\\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\\n\\t\\t#if defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\t\\tvec3 reflectVec;\\n\\t\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\t\\treflectVec = reflect( - viewDir, normal );\\n\\t\\t\\t\\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\\n\\t\\t\\t#else\\n\\t\\t\\t\\treflectVec = refract( - viewDir, normal, refractionRatio );\\n\\t\\t\\t#endif\\n\\t\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\\n\\t\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t\\t#else\\n\\t\\t\\treturn vec3( 0.0 );\\n\\t\\t#endif\\n\\t}\\n#endif\",envmap_vertex:\"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\",fog_vertex:\"#ifdef USE_FOG\\n\\tvFogDepth = - mvPosition.z;\\n#endif\",fog_pars_vertex:\"#ifdef USE_FOG\\n\\tvarying float vFogDepth;\\n#endif\",fog_fragment:\"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\",fog_pars_fragment:\"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float vFogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\",gradientmap_pars_fragment:\"#ifdef USE_GRADIENTMAP\\n\\tuniform sampler2D gradientMap;\\n#endif\\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\tfloat dotNL = dot( normal, lightDirection );\\n\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t#ifdef USE_GRADIENTMAP\\n\\t\\treturn texture2D( gradientMap, coord ).rgb;\\n\\t#else\\n\\t\\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\\n\\t#endif\\n}\",lightmap_fragment:\"#ifdef USE_LIGHTMAP\\n\\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\\n\\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\tlightMapIrradiance *= PI;\\n\\t#endif\\n\\treflectedLight.indirectDiffuse += lightMapIrradiance;\\n#endif\",lightmap_pars_fragment:\"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\",lights_lambert_vertex:\"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\nvIndirectFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\\tvLightBack = vec3( 0.0 );\\n\\tvIndirectBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry );\\n#ifdef DOUBLE_SIDED\\n\\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\\n\\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry );\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tgetPointLightInfo( pointLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tgetSpotLightInfo( spotLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tgetDirectionalLightInfo( directionalLights[ i ], geometry, directLight );\\n\\t\\tdotNL = dot( geometry.normal, directLight.direction );\\n\\t\\tdirectLightColor_Diffuse = directLight.color;\\n\\t\\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\\t\\t#endif\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\",lights_pars_begin:\"uniform bool receiveShadow;\\nuniform vec3 ambientLightColor;\\nuniform vec3 lightProbe[ 9 ];\\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\\n\\tfloat x = normal.x, y = normal.y, z = normal.z;\\n\\tvec3 result = shCoefficients[ 0 ] * 0.886227;\\n\\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\\n\\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\\n\\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\\n\\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\\n\\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\\n\\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\\n\\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\\n\\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\\n\\treturn result;\\n}\\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\\n\\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\\n\\treturn irradiance;\\n}\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\treturn irradiance;\\n}\\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\\t#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\\t\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\t\\tif ( cutoffDistance > 0.0 ) {\\n\\t\\t\\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t\\t}\\n\\t\\treturn distanceFalloff;\\n\\t#else\\n\\t\\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\\n\\t\\t\\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n\\t\\t}\\n\\t\\treturn 1.0;\\n\\t#endif\\n}\\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\\n\\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\\n\\t\\tlight.color = directionalLight.color;\\n\\t\\tlight.direction = directionalLight.direction;\\n\\t\\tlight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\\n\\t\\tvec3 lVector = pointLight.position - geometry.position;\\n\\t\\tlight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tlight.color = pointLight.color;\\n\\t\\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tlight.visible = ( light.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\\n\\t\\tvec3 lVector = spotLight.position - geometry.position;\\n\\t\\tlight.direction = normalize( lVector );\\n\\t\\tfloat angleCos = dot( light.direction, spotLight.direction );\\n\\t\\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\tif ( spotAttenuation > 0.0 ) {\\n\\t\\t\\tfloat lightDistance = length( lVector );\\n\\t\\t\\tlight.color = spotLight.color * spotAttenuation;\\n\\t\\t\\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tlight.visible = ( light.color != vec3( 0.0 ) );\\n\\t\\t} else {\\n\\t\\t\\tlight.color = vec3( 0.0 );\\n\\t\\t\\tlight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\\t\\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\",lights_toon_fragment:\"ToonMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\",lights_toon_pars_fragment:\"varying vec3 vViewPosition;\\nstruct ToonMaterial {\\n\\tvec3 diffuseColor;\\n};\\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Toon\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Toon\\n#define Material_LightProbeLOD( material )\\t(0)\",lights_phong_fragment:\"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\",lights_phong_pars_fragment:\"varying vec3 vViewPosition;\\nstruct BlinnPhongMaterial {\\n\\tvec3 diffuseColor;\\n\\tvec3 specularColor;\\n\\tfloat specularShininess;\\n\\tfloat specularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\\t(0)\",lights_physical_fragment:\"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\\nmaterial.roughness = min( material.roughness, 1.0 );\\n#ifdef IOR\\n\\t#ifdef SPECULAR\\n\\t\\tfloat specularIntensityFactor = specularIntensity;\\n\\t\\tvec3 specularTintFactor = specularTint;\\n\\t\\t#ifdef USE_SPECULARINTENSITYMAP\\n\\t\\t\\tspecularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;\\n\\t\\t#endif\\n\\t\\t#ifdef USE_SPECULARTINTMAP\\n\\t\\t\\tspecularTintFactor *= specularTintMapTexelToLinear( texture2D( specularTintMap, vUv ) ).rgb;\\n\\t\\t#endif\\n\\t\\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\\n\\t#else\\n\\t\\tfloat specularIntensityFactor = 1.0;\\n\\t\\tvec3 specularTintFactor = vec3( 1.0 );\\n\\t\\tmaterial.specularF90 = 1.0;\\n\\t#endif\\n\\tmaterial.specularColor = mix( min( pow2( ( ior - 1.0 ) / ( ior + 1.0 ) ) * specularTintFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\\n\\tmaterial.specularF90 = 1.0;\\n#endif\\n#ifdef USE_CLEARCOAT\\n\\tmaterial.clearcoat = clearcoat;\\n\\tmaterial.clearcoatRoughness = clearcoatRoughness;\\n\\tmaterial.clearcoatF0 = vec3( 0.04 );\\n\\tmaterial.clearcoatF90 = 1.0;\\n\\t#ifdef USE_CLEARCOATMAP\\n\\t\\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\\n\\t#endif\\n\\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\t\\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\\n\\t#endif\\n\\tmaterial.clearcoat = saturate( material.clearcoat );\\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\\n\\tmaterial.clearcoatRoughness += geometryRoughness;\\n\\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\\n#endif\\n#ifdef USE_SHEEN\\n\\tmaterial.sheenTint = sheenTint;\\n#endif\",lights_physical_pars_fragment:\"struct PhysicalMaterial {\\n\\tvec3 diffuseColor;\\n\\tfloat roughness;\\n\\tvec3 specularColor;\\n\\tfloat specularF90;\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tfloat clearcoat;\\n\\t\\tfloat clearcoatRoughness;\\n\\t\\tvec3 clearcoatF0;\\n\\t\\tfloat clearcoatF90;\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\tvec3 sheenTint;\\n\\t#endif\\n};\\nvec3 clearcoatSpecular = vec3( 0.0 );\\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\\n\\treturn fab;\\n}\\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\\n\\tvec2 fab = DFGApprox( normal, viewDir, roughness );\\n\\treturn specularColor * fab.x + specularF90 * fab.y;\\n}\\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\n\\tvec2 fab = DFGApprox( normal, viewDir, roughness );\\n\\tvec3 FssEss = specularColor * fab.x + specularF90 * fab.y;\\n\\tfloat Ess = fab.x + fab.y;\\n\\tfloat Ems = 1.0 - Ess;\\n\\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\\n\\tsingleScatter += FssEss;\\n\\tmultiScatter += Fms * Ems;\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometry.normal;\\n\\t\\tvec3 viewDir = geometry.viewDir;\\n\\t\\tvec3 position = geometry.position;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.roughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(    0, 1,    0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tfloat dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\\n\\t\\tvec3 ccIrradiance = dotNLcc * directLight.color;\\n\\t\\tclearcoatSpecular += ccIrradiance * BRDF_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\treflectedLight.directSpecular += irradiance * BRDF_Sheen( material.roughness, directLight.direction, geometry, material.sheenTint );\\n\\t#else\\n\\t\\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );\\n\\t#endif\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tclearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\\n\\t#endif\\n\\tvec3 singleScattering = vec3( 0.0 );\\n\\tvec3 multiScattering = vec3( 0.0 );\\n\\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\\n\\tcomputeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\\n\\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\\n\\treflectedLight.indirectSpecular += radiance * singleScattering;\\n\\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\\n\\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\",lights_fragment_begin:\"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\\n#ifdef USE_CLEARCOAT\\n\\tgeometry.clearcoatNormal = clearcoatNormal;\\n#endif\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointLightInfo( pointLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\\n\\t\\tpointLightShadow = pointLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotLightInfo( spotLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\tspotLightShadow = spotLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalLightInfo( directionalLight, geometry, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\\n\\t\\tdirectionalLightShadow = directionalLightShadows[ i ];\\n\\t\\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 iblIrradiance = vec3( 0.0 );\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\tirradiance += getLightProbeIrradiance( lightProbe, geometry );\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tvec3 radiance = vec3( 0.0 );\\n\\tvec3 clearcoatRadiance = vec3( 0.0 );\\n#endif\",lights_fragment_maps:\"#if defined( RE_IndirectDiffuse )\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\\n\\t\\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t\\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\\t\\t\\tlightMapIrradiance *= PI;\\n\\t\\t#endif\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tiblIrradiance += getIBLIrradiance( geometry );\\n\\t#endif\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\tradiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tclearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\\n\\t#endif\\n#endif\",lights_fragment_end:\"#if defined( RE_IndirectDiffuse )\\n\\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\\n#endif\",logdepthbuf_fragment:\"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\",logdepthbuf_pars_fragment:\"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tuniform float logDepthBufFC;\\n\\tvarying float vFragDepth;\\n\\tvarying float vIsPerspective;\\n#endif\",logdepthbuf_pars_vertex:\"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t\\tvarying float vIsPerspective;\\n\\t#else\\n\\t\\tuniform float logDepthBufFC;\\n\\t#endif\\n#endif\",logdepthbuf_vertex:\"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t\\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\\n\\t#else\\n\\t\\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\\n\\t\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\t\\tgl_Position.z *= gl_Position.w;\\n\\t\\t}\\n\\t#endif\\n#endif\",map_fragment:\"#ifdef USE_MAP\\n\\tvec4 texelColor = texture2D( map, vUv );\\n\\ttexelColor = mapTexelToLinear( texelColor );\\n\\tdiffuseColor *= texelColor;\\n#endif\",map_pars_fragment:\"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\",map_particle_fragment:\"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n#endif\\n#ifdef USE_MAP\\n\\tvec4 mapTexel = texture2D( map, uv );\\n\\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\\n#endif\",map_particle_pars_fragment:\"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\tuniform mat3 uvTransform;\\n#endif\\n#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\",metalnessmap_fragment:\"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\",metalnessmap_pars_fragment:\"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\",morphnormal_vertex:\"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal *= morphTargetBaseInfluence;\\n\\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\\n\\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\\n\\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\\n\\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\\n#endif\",morphtarget_pars_vertex:\"#ifdef USE_MORPHTARGETS\\n\\tuniform float morphTargetBaseInfluence;\\n\\t#ifndef USE_MORPHNORMALS\\n\\t\\tuniform float morphTargetInfluences[ 8 ];\\n\\t#else\\n\\t\\tuniform float morphTargetInfluences[ 4 ];\\n\\t#endif\\n#endif\",morphtarget_vertex:\"#ifdef USE_MORPHTARGETS\\n\\ttransformed *= morphTargetBaseInfluence;\\n\\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\\n\\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\\n\\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\\n\\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\\n\\t#ifndef USE_MORPHNORMALS\\n\\t\\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\\n\\t\\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\\n\\t\\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\\n\\t\\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\\n\\t#endif\\n#endif\",normal_fragment_begin:\"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\\n#ifdef FLAT_SHADED\\n\\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * faceDirection;\\n\\t#endif\\n\\t#ifdef USE_TANGENT\\n\\t\\tvec3 tangent = normalize( vTangent );\\n\\t\\tvec3 bitangent = normalize( vBitangent );\\n\\t\\t#ifdef DOUBLE_SIDED\\n\\t\\t\\ttangent = tangent * faceDirection;\\n\\t\\t\\tbitangent = bitangent * faceDirection;\\n\\t\\t#endif\\n\\t\\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\\n\\t\\t\\tmat3 vTBN = mat3( tangent, bitangent, normal );\\n\\t\\t#endif\\n\\t#endif\\n#endif\\nvec3 geometryNormal = normal;\",normal_fragment_maps:\"#ifdef OBJECTSPACE_NORMALMAP\\n\\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\t#ifdef FLIP_SIDED\\n\\t\\tnormal = - normal;\\n\\t#endif\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * faceDirection;\\n\\t#endif\\n\\tnormal = normalize( normalMatrix * normal );\\n#elif defined( TANGENTSPACE_NORMALMAP )\\n\\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tmapN.xy *= normalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tnormal = normalize( vTBN * mapN );\\n\\t#else\\n\\t\\tnormal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );\\n\\t#endif\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\\n#endif\",normal_pars_fragment:\"#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\",normal_pars_vertex:\"#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\",normal_vertex:\"#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\",normalmap_pars_fragment:\"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n#endif\\n#ifdef OBJECTSPACE_NORMALMAP\\n\\tuniform mat3 normalMatrix;\\n#endif\\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\\n\\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\\n\\t\\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\\n\\t\\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\\n\\t\\tvec2 st0 = dFdx( vUv.st );\\n\\t\\tvec2 st1 = dFdy( vUv.st );\\n\\t\\tvec3 N = surf_norm;\\n\\t\\tvec3 q1perp = cross( q1, N );\\n\\t\\tvec3 q0perp = cross( N, q0 );\\n\\t\\tvec3 T = q1perp * st0.x + q0perp * st1.x;\\n\\t\\tvec3 B = q1perp * st0.y + q0perp * st1.y;\\n\\t\\tfloat det = max( dot( T, T ), dot( B, B ) );\\n\\t\\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\\n\\t\\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\\n\\t}\\n#endif\",clearcoat_normal_fragment_begin:\"#ifdef USE_CLEARCOAT\\n\\tvec3 clearcoatNormal = geometryNormal;\\n#endif\",clearcoat_normal_fragment_maps:\"#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\\n\\tclearcoatMapN.xy *= clearcoatNormalScale;\\n\\t#ifdef USE_TANGENT\\n\\t\\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\\n\\t#else\\n\\t\\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\\n\\t#endif\\n#endif\",clearcoat_pars_fragment:\"#ifdef USE_CLEARCOATMAP\\n\\tuniform sampler2D clearcoatMap;\\n#endif\\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\tuniform sampler2D clearcoatRoughnessMap;\\n#endif\\n#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tuniform sampler2D clearcoatNormalMap;\\n\\tuniform vec2 clearcoatNormalScale;\\n#endif\",output_fragment:\"#ifdef OPAQUE\\ndiffuseColor.a = 1.0;\\n#endif\\n#ifdef USE_TRANSMISSION\\ndiffuseColor.a *= transmissionAlpha + 0.1;\\n#endif\\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );\",packing:\"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nvec4 pack2HalfToRGBA( vec2 v ) {\\n\\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\\n\\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\\n}\\nvec2 unpackRGBATo2Half( vec4 v ) {\\n\\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n\\treturn linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\",premultiplied_alpha_fragment:\"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\",project_vertex:\"vec4 mvPosition = vec4( transformed, 1.0 );\\n#ifdef USE_INSTANCING\\n\\tmvPosition = instanceMatrix * mvPosition;\\n#endif\\nmvPosition = modelViewMatrix * mvPosition;\\ngl_Position = projectionMatrix * mvPosition;\",dithering_fragment:\"#ifdef DITHERING\\n\\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\",dithering_pars_fragment:\"#ifdef DITHERING\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\",roughnessmap_fragment:\"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\",roughnessmap_pars_fragment:\"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\",shadowmap_pars_fragment:\"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\\n\\t\\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\\n\\t}\\n\\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\\n\\t\\tfloat occlusion = 1.0;\\n\\t\\tvec2 distribution = texture2DDistribution( shadow, uv );\\n\\t\\tfloat hard_shadow = step( compare , distribution.x );\\n\\t\\tif (hard_shadow != 1.0 ) {\\n\\t\\t\\tfloat distance = compare - distribution.x ;\\n\\t\\t\\tfloat variance = max( 0.00000, distribution.y * distribution.y );\\n\\t\\t\\tfloat softness_probability = variance / (variance + distance * distance );\\t\\t\\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\\t\\t\\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\\n\\t\\t}\\n\\t\\treturn occlusion;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\\t\\tbool inFrustum = all( inFrustumVec );\\n\\t\\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\\t\\tbool frustumTest = all( frustumTestVec );\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx2 = dx0 / 2.0;\\n\\t\\t\\tfloat dy2 = dy0 / 2.0;\\n\\t\\t\\tfloat dx3 = dx1 / 2.0;\\n\\t\\t\\tfloat dy3 = dy1 / 2.0;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 17.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx = texelSize.x;\\n\\t\\t\\tfloat dy = texelSize.y;\\n\\t\\t\\tvec2 uv = shadowCoord.xy;\\n\\t\\t\\tvec2 f = fract( uv * shadowMapSize + 0.5 );\\n\\t\\t\\tuv -= f * texelSize;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  f.x ),\\n\\t\\t\\t\\t\\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \\n\\t\\t\\t\\t\\t\\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  f.x ),\\n\\t\\t\\t\\t\\t f.y )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\",shadowmap_pars_vertex:\"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n#endif\",shadowmap_vertex:\"#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\tvec4 shadowWorldPosition;\\n\\t#endif\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\",shadowmask_pars_fragment:\"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tspotLight = spotLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tpointLight = pointLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\",skinbase_vertex:\"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\",skinning_pars_vertex:\"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\t#ifdef BONE_TEXTURE\\n\\t\\tuniform highp sampler2D boneTexture;\\n\\t\\tuniform int boneTextureSize;\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tfloat j = i * 4.0;\\n\\t\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\t\\ty = dy * ( y + 0.5 );\\n\\t\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#else\\n\\t\\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\\t\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\t\\tmat4 bone = boneMatrices[ int(i) ];\\n\\t\\t\\treturn bone;\\n\\t\\t}\\n\\t#endif\\n#endif\",skinning_vertex:\"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\",skinnormal_vertex:\"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n\\t#ifdef USE_TANGENT\\n\\t\\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#endif\\n#endif\",specularmap_fragment:\"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\",specularmap_pars_fragment:\"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\",tonemapping_fragment:\"#if defined( TONE_MAPPING )\\n\\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\",tonemapping_pars_fragment:\"#ifndef saturate\\n#define saturate( a ) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\nvec3 RRTAndODTFit( vec3 v ) {\\n\\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\\n\\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\\n\\treturn a / b;\\n}\\nvec3 ACESFilmicToneMapping( vec3 color ) {\\n\\tconst mat3 ACESInputMat = mat3(\\n\\t\\tvec3( 0.59719, 0.07600, 0.02840 ),\\t\\tvec3( 0.35458, 0.90834, 0.13383 ),\\n\\t\\tvec3( 0.04823, 0.01566, 0.83777 )\\n\\t);\\n\\tconst mat3 ACESOutputMat = mat3(\\n\\t\\tvec3(  1.60475, -0.10208, -0.00327 ),\\t\\tvec3( -0.53108,  1.10813, -0.07276 ),\\n\\t\\tvec3( -0.07367, -0.00605,  1.07602 )\\n\\t);\\n\\tcolor *= toneMappingExposure / 0.6;\\n\\tcolor = ACESInputMat * color;\\n\\tcolor = RRTAndODTFit( color );\\n\\tcolor = ACESOutputMat * color;\\n\\treturn saturate( color );\\n}\\nvec3 CustomToneMapping( vec3 color ) { return color; }\",transmission_fragment:\"#ifdef USE_TRANSMISSION\\n\\tfloat transmissionAlpha = 1.0;\\n\\tfloat transmissionFactor = transmission;\\n\\tfloat thicknessFactor = thickness;\\n\\t#ifdef USE_TRANSMISSIONMAP\\n\\t\\ttransmissionFactor *= texture2D( transmissionMap, vUv ).r;\\n\\t#endif\\n\\t#ifdef USE_THICKNESSMAP\\n\\t\\tthicknessFactor *= texture2D( thicknessMap, vUv ).g;\\n\\t#endif\\n\\tvec3 pos = vWorldPosition;\\n\\tvec3 v = normalize( cameraPosition - pos );\\n\\tvec3 n = inverseTransformDirection( normal, viewMatrix );\\n\\tvec4 transmission = getIBLVolumeRefraction(\\n\\t\\tn, v, roughnessFactor, material.diffuseColor, material.specularColor, material.specularF90,\\n\\t\\tpos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,\\n\\t\\tattenuationTint, attenuationDistance );\\n\\ttotalDiffuse = mix( totalDiffuse, transmission.rgb, transmissionFactor );\\n\\ttransmissionAlpha = transmission.a;\\n#endif\",transmission_pars_fragment:\"#ifdef USE_TRANSMISSION\\n\\tuniform float transmission;\\n\\tuniform float thickness;\\n\\tuniform float attenuationDistance;\\n\\tuniform vec3 attenuationTint;\\n\\t#ifdef USE_TRANSMISSIONMAP\\n\\t\\tuniform sampler2D transmissionMap;\\n\\t#endif\\n\\t#ifdef USE_THICKNESSMAP\\n\\t\\tuniform sampler2D thicknessMap;\\n\\t#endif\\n\\tuniform vec2 transmissionSamplerSize;\\n\\tuniform sampler2D transmissionSamplerMap;\\n\\tuniform mat4 modelMatrix;\\n\\tuniform mat4 projectionMatrix;\\n\\tvarying vec3 vWorldPosition;\\n\\tvec3 getVolumeTransmissionRay( vec3 n, vec3 v, float thickness, float ior, mat4 modelMatrix ) {\\n\\t\\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\\n\\t\\tvec3 modelScale;\\n\\t\\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\\n\\t\\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\\n\\t\\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\\n\\t\\treturn normalize( refractionVector ) * thickness * modelScale;\\n\\t}\\n\\tfloat applyIorToRoughness( float roughness, float ior ) {\\n\\t\\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\\n\\t}\\n\\tvec4 getTransmissionSample( vec2 fragCoord, float roughness, float ior ) {\\n\\t\\tfloat framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\\n\\t\\t#ifdef TEXTURE_LOD_EXT\\n\\t\\t\\treturn texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );\\n\\t\\t#else\\n\\t\\t\\treturn texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );\\n\\t\\t#endif\\n\\t}\\n\\tvec3 applyVolumeAttenuation( vec3 radiance, float transmissionDistance, vec3 attenuationColor, float attenuationDistance ) {\\n\\t\\tif ( attenuationDistance == 0.0 ) {\\n\\t\\t\\treturn radiance;\\n\\t\\t} else {\\n\\t\\t\\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\\n\\t\\t\\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\\t\\t\\treturn transmittance * radiance;\\n\\t\\t}\\n\\t}\\n\\tvec4 getIBLVolumeRefraction( vec3 n, vec3 v, float roughness, vec3 diffuseColor, vec3 specularColor, float specularF90,\\n\\t\\tvec3 position, mat4 modelMatrix, mat4 viewMatrix, mat4 projMatrix, float ior, float thickness,\\n\\t\\tvec3 attenuationColor, float attenuationDistance ) {\\n\\t\\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\\n\\t\\tvec3 refractedRayExit = position + transmissionRay;\\n\\t\\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\\n\\t\\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\\n\\t\\trefractionCoords += 1.0;\\n\\t\\trefractionCoords /= 2.0;\\n\\t\\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\\n\\t\\tvec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );\\n\\t\\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\\n\\t\\treturn vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );\\n\\t}\\n#endif\",uv_pars_fragment:\"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\\n\\tvarying vec2 vUv;\\n#endif\",uv_pars_vertex:\"#ifdef USE_UV\\n\\t#ifdef UVS_VERTEX_ONLY\\n\\t\\tvec2 vUv;\\n\\t#else\\n\\t\\tvarying vec2 vUv;\\n\\t#endif\\n\\tuniform mat3 uvTransform;\\n#endif\",uv_vertex:\"#ifdef USE_UV\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n#endif\",uv2_pars_fragment:\"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvarying vec2 vUv2;\\n#endif\",uv2_pars_vertex:\"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tattribute vec2 uv2;\\n\\tvarying vec2 vUv2;\\n\\tuniform mat3 uv2Transform;\\n#endif\",uv2_vertex:\"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\\n#endif\",worldpos_vertex:\"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )\\n\\tvec4 worldPosition = vec4( transformed, 1.0 );\\n\\t#ifdef USE_INSTANCING\\n\\t\\tworldPosition = instanceMatrix * worldPosition;\\n\\t#endif\\n\\tworldPosition = modelMatrix * worldPosition;\\n#endif\",background_frag:\"uniform sampler2D t2D;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec4 texColor = texture2D( t2D, vUv );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\",background_vert:\"varying vec2 vUv;\\nuniform mat3 uvTransform;\\nvoid main() {\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n\\tgl_Position = vec4( position.xy, 1.0, 1.0 );\\n}\",cube_frag:\"#include <envmap_common_pars_fragment>\\nuniform float opacity;\\nvarying vec3 vWorldDirection;\\n#include <cube_uv_reflection_fragment>\\nvoid main() {\\n\\tvec3 vReflect = vWorldDirection;\\n\\t#include <envmap_fragment>\\n\\tgl_FragColor = envColor;\\n\\tgl_FragColor.a *= opacity;\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\",cube_vert:\"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\",depth_frag:\"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( fragCoordZ );\\n\\t#endif\\n}\",depth_vert:\"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvHighPrecisionZW = gl_Position.zw;\\n}\",distanceRGBA_frag:\"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\",distanceRGBA_vert:\"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\",equirect_frag:\"uniform sampler2D tEquirect;\\nvarying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldDirection );\\n\\tvec2 sampleUV = equirectUv( direction );\\n\\tvec4 texColor = texture2D( tEquirect, sampleUV );\\n\\tgl_FragColor = mapTexelToLinear( texColor );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n}\",equirect_vert:\"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\",linedashed_frag:\"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\",linedashed_vert:\"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvLineDistance = scale * lineDistance;\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\",meshbasic_frag:\"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\\n\\t\\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\",meshbasic_vert:\"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinbase_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\",meshlambert_frag:\"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <emissivemap_fragment>\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vIndirectFront;\\n\\t#endif\\n\\t#include <lightmap_fragment>\\n\\treflectedLight.indirectDiffuse *= BRDF_Lambert( diffuseColor.rgb );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\\t#else\\n\\t\\treflectedLight.directDiffuse = vLightFront;\\n\\t#endif\\n\\treflectedLight.directDiffuse *= BRDF_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\",meshlambert_vert:\"#define LAMBERT\\nvarying vec3 vLightFront;\\nvarying vec3 vIndirectFront;\\n#ifdef DOUBLE_SIDED\\n\\tvarying vec3 vLightBack;\\n\\tvarying vec3 vIndirectBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <lights_lambert_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\",meshmatcap_frag:\"#define MATCAP\\nuniform vec3 diffuse;\\nuniform float opacity;\\nuniform sampler2D matcap;\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <normal_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tvec3 viewDir = normalize( vViewPosition );\\n\\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\\n\\tvec3 y = cross( viewDir, x );\\n\\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\\n\\t#ifdef USE_MATCAP\\n\\t\\tvec4 matcapColor = texture2D( matcap, uv );\\n\\t\\tmatcapColor = matcapTexelToLinear( matcapColor );\\n\\t#else\\n\\t\\tvec4 matcapColor = vec4( 1.0 );\\n\\t#endif\\n\\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\",meshmatcap_vert:\"#define MATCAP\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <color_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n}\",meshnormal_frag:\"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <normal_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n}\",meshnormal_vert:\"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\",meshphong_frag:\"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <normal_pars_fragment>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\",meshphong_vert:\"#define PHONG\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\",meshphysical_frag:\"#define STANDARD\\n#ifdef PHYSICAL\\n\\t#define IOR\\n\\t#define SPECULAR\\n#endif\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifdef IOR\\n\\tuniform float ior;\\n#endif\\n#ifdef SPECULAR\\n\\tuniform float specularIntensity;\\n\\tuniform vec3 specularTint;\\n\\t#ifdef USE_SPECULARINTENSITYMAP\\n\\t\\tuniform sampler2D specularIntensityMap;\\n\\t#endif\\n\\t#ifdef USE_SPECULARTINTMAP\\n\\t\\tuniform sampler2D specularTintMap;\\n\\t#endif\\n#endif\\n#ifdef USE_CLEARCOAT\\n\\tuniform float clearcoat;\\n\\tuniform float clearcoatRoughness;\\n#endif\\n#ifdef USE_SHEEN\\n\\tuniform vec3 sheenTint;\\n#endif\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_physical_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <lights_pars_begin>\\n#include <normal_pars_fragment>\\n#include <lights_physical_pars_fragment>\\n#include <transmission_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <clearcoat_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <clearcoat_normal_fragment_begin>\\n\\t#include <clearcoat_normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\\n\\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\\n\\t#include <transmission_fragment>\\n\\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tfloat dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\\n\\t\\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\\n\\t\\toutgoingLight = outgoingLight * ( 1.0 - clearcoat * Fcc ) + clearcoatSpecular * clearcoat;\\n\\t#endif\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\",meshphysical_vert:\"#define STANDARD\\nvarying vec3 vViewPosition;\\n#ifdef USE_TRANSMISSION\\n\\tvarying vec3 vWorldPosition;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n#ifdef USE_TRANSMISSION\\n\\tvWorldPosition = worldPosition.xyz;\\n#endif\\n}\",meshtoon_frag:\"#define TOON\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <normal_pars_fragment>\\n#include <lights_toon_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_toon_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\",meshtoon_vert:\"#define TOON\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <uv2_vertex>\\n\\t#include <color_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\",points_frag:\"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\",points_vert:\"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <color_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\tgl_PointSize = size;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <fog_vertex>\\n}\",shadow_frag:\"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\",shadow_vert:\"#include <common>\\n#include <fog_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\",sprite_frag:\"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\t#include <output_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <encodings_fragment>\\n\\t#include <fog_fragment>\\n}\",sprite_vert:\"uniform float rotation;\\nuniform vec2 center;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\tvec2 scale;\\n\\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\\n\\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\\n\\t#ifndef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) scale *= - mvPosition.z;\\n\\t#endif\\n\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\n\\tvec2 rotatedPosition;\\n\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\n\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\n\\tmvPosition.xy += rotatedPosition;\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\"},Vi={common:{diffuse:{value:new Cs(16777215)},opacity:{value:1},map:{value:null},uvTransform:{value:new Yn},uv2Transform:{value:new Yn},alphaMap:{value:null},alphaTest:{value:0}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98},maxMipLevel:{value:0}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new Kn(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new Cs(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new Cs(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new Yn}},sprite:{diffuse:{value:new Cs(16777215)},opacity:{value:1},center:{value:new Kn(.5,.5)},rotation:{value:0},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new Yn}}},Wi={basic:{uniforms:Si([Vi.common,Vi.specularmap,Vi.envmap,Vi.aomap,Vi.lightmap,Vi.fog]),vertexShader:Ui.meshbasic_vert,fragmentShader:Ui.meshbasic_frag},lambert:{uniforms:Si([Vi.common,Vi.specularmap,Vi.envmap,Vi.aomap,Vi.lightmap,Vi.emissivemap,Vi.fog,Vi.lights,{emissive:{value:new Cs(0)}}]),vertexShader:Ui.meshlambert_vert,fragmentShader:Ui.meshlambert_frag},phong:{uniforms:Si([Vi.common,Vi.specularmap,Vi.envmap,Vi.aomap,Vi.lightmap,Vi.emissivemap,Vi.bumpmap,Vi.normalmap,Vi.displacementmap,Vi.fog,Vi.lights,{emissive:{value:new Cs(0)},specular:{value:new Cs(1118481)},shininess:{value:30}}]),vertexShader:Ui.meshphong_vert,fragmentShader:Ui.meshphong_frag},standard:{uniforms:Si([Vi.common,Vi.envmap,Vi.aomap,Vi.lightmap,Vi.emissivemap,Vi.bumpmap,Vi.normalmap,Vi.displacementmap,Vi.roughnessmap,Vi.metalnessmap,Vi.fog,Vi.lights,{emissive:{value:new Cs(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:Ui.meshphysical_vert,fragmentShader:Ui.meshphysical_frag},toon:{uniforms:Si([Vi.common,Vi.aomap,Vi.lightmap,Vi.emissivemap,Vi.bumpmap,Vi.normalmap,Vi.displacementmap,Vi.gradientmap,Vi.fog,Vi.lights,{emissive:{value:new Cs(0)}}]),vertexShader:Ui.meshtoon_vert,fragmentShader:Ui.meshtoon_frag},matcap:{uniforms:Si([Vi.common,Vi.bumpmap,Vi.normalmap,Vi.displacementmap,Vi.fog,{matcap:{value:null}}]),vertexShader:Ui.meshmatcap_vert,fragmentShader:Ui.meshmatcap_frag},points:{uniforms:Si([Vi.points,Vi.fog]),vertexShader:Ui.points_vert,fragmentShader:Ui.points_frag},dashed:{uniforms:Si([Vi.common,Vi.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:Ui.linedashed_vert,fragmentShader:Ui.linedashed_frag},depth:{uniforms:Si([Vi.common,Vi.displacementmap]),vertexShader:Ui.depth_vert,fragmentShader:Ui.depth_frag},normal:{uniforms:Si([Vi.common,Vi.bumpmap,Vi.normalmap,Vi.displacementmap,{opacity:{value:1}}]),vertexShader:Ui.meshnormal_vert,fragmentShader:Ui.meshnormal_frag},sprite:{uniforms:Si([Vi.sprite,Vi.fog]),vertexShader:Ui.sprite_vert,fragmentShader:Ui.sprite_frag},background:{uniforms:{uvTransform:{value:new Yn},t2D:{value:null}},vertexShader:Ui.background_vert,fragmentShader:Ui.background_frag},cube:{uniforms:Si([Vi.envmap,{opacity:{value:1}}]),vertexShader:Ui.cube_vert,fragmentShader:Ui.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:Ui.equirect_vert,fragmentShader:Ui.equirect_frag},distanceRGBA:{uniforms:Si([Vi.common,Vi.displacementmap,{referencePosition:{value:new or},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:Ui.distanceRGBA_vert,fragmentShader:Ui.distanceRGBA_frag},shadow:{uniforms:Si([Vi.lights,Vi.fog,{color:{value:new Cs(0)},opacity:{value:1}}]),vertexShader:Ui.shadow_vert,fragmentShader:Ui.shadow_frag}};function Gi(t,e,n,r,s){const i=new Cs(0);let a,o,l=0,u=null,c=0,h=null;function d(t,e){n.buffers.color.setClear(t.r,t.g,t.b,e,s)}return{getClearColor:function(){return i},setClearColor:function(t,e=1){i.set(t),l=e,d(i,l)},getClearAlpha:function(){return l},setClearAlpha:function(t){l=t,d(i,l)},render:function(n,s){let p=!1,g=!0===s.isScene?s.background:null;g&&g.isTexture&&(g=e.get(g));const y=t.xr,x=y.getSession&&y.getSession();x&&\"additive\"===x.environmentBlendMode&&(g=null),null===g?d(i,l):g&&g.isColor&&(d(g,1),p=!0),(t.autoClear||p)&&t.clear(t.autoClearColor,t.autoClearDepth,t.autoClearStencil),g&&(g.isCubeTexture||g.mapping===ut)?(void 0===o&&(o=new xi(new vi(1,1,1),new _i({name:\"BackgroundCubeMaterial\",uniforms:wi(Wi.cube.uniforms),vertexShader:Wi.cube.vertexShader,fragmentShader:Wi.cube.fragmentShader,side:m,depthTest:!1,depthWrite:!1,fog:!1})),o.geometry.deleteAttribute(\"normal\"),o.geometry.deleteAttribute(\"uv\"),o.onBeforeRender=function(t,e,n){this.matrixWorld.copyPosition(n.matrixWorld)},Object.defineProperty(o.material,\"envMap\",{get:function(){return this.uniforms.envMap.value}}),r.update(o)),o.material.uniforms.envMap.value=g,o.material.uniforms.flipEnvMap.value=g.isCubeTexture&&!1===g.isRenderTargetTexture?-1:1,u===g&&c===g.version&&h===t.toneMapping||(o.material.needsUpdate=!0,u=g,c=g.version,h=t.toneMapping),n.unshift(o,o.geometry,o.material,0,0,null)):g&&g.isTexture&&(void 0===a&&(a=new xi(new Bi(2,2),new _i({name:\"BackgroundMaterial\",uniforms:wi(Wi.background.uniforms),vertexShader:Wi.background.vertexShader,fragmentShader:Wi.background.fragmentShader,side:f,depthTest:!1,depthWrite:!1,fog:!1})),a.geometry.deleteAttribute(\"normal\"),Object.defineProperty(a.material,\"map\",{get:function(){return this.uniforms.t2D.value}}),r.update(a)),a.material.uniforms.t2D.value=g,!0===g.matrixAutoUpdate&&g.updateMatrix(),a.material.uniforms.uvTransform.value.copy(g.matrix),u===g&&c===g.version&&h===t.toneMapping||(a.material.needsUpdate=!0,u=g,c=g.version,h=t.toneMapping),n.unshift(a,a.geometry,a.material,0,0,null))}}}function Hi(t,e,n,r){const s=t.getParameter(34921),i=r.isWebGL2?null:e.get(\"OES_vertex_array_object\"),a=r.isWebGL2||null!==i,o={},l=d(null);let u=l;function c(e){return r.isWebGL2?t.bindVertexArray(e):i.bindVertexArrayOES(e)}function h(e){return r.isWebGL2?t.deleteVertexArray(e):i.deleteVertexArrayOES(e)}function d(t){const e=[],n=[],r=[];for(let t=0;t<s;t++)e[t]=0,n[t]=0,r[t]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:e,enabledAttributes:n,attributeDivisors:r,object:t,attributes:{},index:null}}function p(){const t=u.newAttributes;for(let e=0,n=t.length;e<n;e++)t[e]=0}function f(t){m(t,0)}function m(n,s){const i=u.newAttributes,a=u.enabledAttributes,o=u.attributeDivisors;i[n]=1,0===a[n]&&(t.enableVertexAttribArray(n),a[n]=1),o[n]!==s&&((r.isWebGL2?t:e.get(\"ANGLE_instanced_arrays\"))[r.isWebGL2?\"vertexAttribDivisor\":\"vertexAttribDivisorANGLE\"](n,s),o[n]=s)}function g(){const e=u.newAttributes,n=u.enabledAttributes;for(let r=0,s=n.length;r<s;r++)n[r]!==e[r]&&(t.disableVertexAttribArray(r),n[r]=0)}function y(e,n,s,i,a,o){!0!==r.isWebGL2||5124!==s&&5125!==s?t.vertexAttribPointer(e,n,s,i,a,o):t.vertexAttribIPointer(e,n,s,a,o)}function x(){b(),u!==l&&(u=l,c(u.object))}function b(){l.geometry=null,l.program=null,l.wireframe=!1}return{setup:function(s,l,h,x,b){let v=!1;if(a){const e=function(e,n,s){const a=!0===s.wireframe;let l=o[e.id];void 0===l&&(l={},o[e.id]=l);let u=l[n.id];void 0===u&&(u={},l[n.id]=u);let c=u[a];return void 0===c&&(c=d(r.isWebGL2?t.createVertexArray():i.createVertexArrayOES()),u[a]=c),c}(x,h,l);u!==e&&(u=e,c(u.object)),v=function(t,e){const n=u.attributes,r=t.attributes;let s=0;for(const t in r){const e=n[t],i=r[t];if(void 0===e)return!0;if(e.attribute!==i)return!0;if(e.data!==i.data)return!0;s++}return u.attributesNum!==s||u.index!==e}(x,b),v&&function(t,e){const n={},r=t.attributes;let s=0;for(const t in r){const e=r[t],i={};i.attribute=e,e.data&&(i.data=e.data),n[t]=i,s++}u.attributes=n,u.attributesNum=s,u.index=e}(x,b)}else{const t=!0===l.wireframe;u.geometry===x.id&&u.program===h.id&&u.wireframe===t||(u.geometry=x.id,u.program=h.id,u.wireframe=t,v=!0)}!0===s.isInstancedMesh&&(v=!0),null!==b&&n.update(b,34963),v&&(function(s,i,a,o){if(!1===r.isWebGL2&&(s.isInstancedMesh||o.isInstancedBufferGeometry)&&null===e.get(\"ANGLE_instanced_arrays\"))return;p();const l=o.attributes,u=a.getAttributes(),c=i.defaultAttributeValues;for(const e in u){const r=u[e];if(r.location>=0){let i=l[e];if(void 0===i&&(\"instanceMatrix\"===e&&s.instanceMatrix&&(i=s.instanceMatrix),\"instanceColor\"===e&&s.instanceColor&&(i=s.instanceColor)),void 0!==i){const e=i.normalized,a=i.itemSize,l=n.get(i);if(void 0===l)continue;const u=l.buffer,c=l.type,h=l.bytesPerElement;if(i.isInterleavedBufferAttribute){const n=i.data,l=n.stride,d=i.offset;if(n&&n.isInstancedInterleavedBuffer){for(let t=0;t<r.locationSize;t++)m(r.location+t,n.meshPerAttribute);!0!==s.isInstancedMesh&&void 0===o._maxInstanceCount&&(o._maxInstanceCount=n.meshPerAttribute*n.count)}else for(let t=0;t<r.locationSize;t++)f(r.location+t);t.bindBuffer(34962,u);for(let t=0;t<r.locationSize;t++)y(r.location+t,a/r.locationSize,c,e,l*h,(d+a/r.locationSize*t)*h)}else{if(i.isInstancedBufferAttribute){for(let t=0;t<r.locationSize;t++)m(r.location+t,i.meshPerAttribute);!0!==s.isInstancedMesh&&void 0===o._maxInstanceCount&&(o._maxInstanceCount=i.meshPerAttribute*i.count)}else for(let t=0;t<r.locationSize;t++)f(r.location+t);t.bindBuffer(34962,u);for(let t=0;t<r.locationSize;t++)y(r.location+t,a/r.locationSize,c,e,a*h,a/r.locationSize*t*h)}}else if(void 0!==c){const n=c[e];if(void 0!==n)switch(n.length){case 2:t.vertexAttrib2fv(r.location,n);break;case 3:t.vertexAttrib3fv(r.location,n);break;case 4:t.vertexAttrib4fv(r.location,n);break;default:t.vertexAttrib1fv(r.location,n)}}}}g()}(s,l,h,x),null!==b&&t.bindBuffer(34963,n.get(b).buffer))},reset:x,resetDefaultState:b,dispose:function(){x();for(const t in o){const e=o[t];for(const t in e){const n=e[t];for(const t in n)h(n[t].object),delete n[t];delete e[t]}delete o[t]}},releaseStatesOfGeometry:function(t){if(void 0===o[t.id])return;const e=o[t.id];for(const t in e){const n=e[t];for(const t in n)h(n[t].object),delete n[t];delete e[t]}delete o[t.id]},releaseStatesOfProgram:function(t){for(const e in o){const n=o[e];if(void 0===n[t.id])continue;const r=n[t.id];for(const t in r)h(r[t].object),delete r[t];delete n[t.id]}},initAttributes:p,enableAttribute:f,disableUnusedAttributes:g}}function ji(t,e,n,r){const s=r.isWebGL2;let i;this.setMode=function(t){i=t},this.render=function(e,r){t.drawArrays(i,e,r),n.update(r,i,1)},this.renderInstances=function(r,a,o){if(0===o)return;let l,u;if(s)l=t,u=\"drawArraysInstanced\";else if(l=e.get(\"ANGLE_instanced_arrays\"),u=\"drawArraysInstancedANGLE\",null===l)return void console.error(\"THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.\");l[u](i,r,a,o),n.update(a,i,o)}}function qi(t,e,n){let r;function s(e){if(\"highp\"===e){if(t.getShaderPrecisionFormat(35633,36338).precision>0&&t.getShaderPrecisionFormat(35632,36338).precision>0)return\"highp\";e=\"mediump\"}return\"mediump\"===e&&t.getShaderPrecisionFormat(35633,36337).precision>0&&t.getShaderPrecisionFormat(35632,36337).precision>0?\"mediump\":\"lowp\"}const i=\"undefined\"!=typeof WebGL2RenderingContext&&t instanceof WebGL2RenderingContext||\"undefined\"!=typeof WebGL2ComputeRenderingContext&&t instanceof WebGL2ComputeRenderingContext;let a=void 0!==n.precision?n.precision:\"highp\";const o=s(a);o!==a&&(console.warn(\"THREE.WebGLRenderer:\",a,\"not supported, using\",o,\"instead.\"),a=o);const l=i||e.has(\"WEBGL_draw_buffers\"),u=!0===n.logarithmicDepthBuffer,c=t.getParameter(34930),h=t.getParameter(35660),d=t.getParameter(3379),p=t.getParameter(34076),f=t.getParameter(34921),m=t.getParameter(36347),g=t.getParameter(36348),y=t.getParameter(36349),x=h>0,b=i||e.has(\"OES_texture_float\");return{isWebGL2:i,drawBuffers:l,getMaxAnisotropy:function(){if(void 0!==r)return r;if(!0===e.has(\"EXT_texture_filter_anisotropic\")){const n=e.get(\"EXT_texture_filter_anisotropic\");r=t.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else r=0;return r},getMaxPrecision:s,precision:a,logarithmicDepthBuffer:u,maxTextures:c,maxVertexTextures:h,maxTextureSize:d,maxCubemapSize:p,maxAttributes:f,maxVertexUniforms:m,maxVaryings:g,maxFragmentUniforms:y,vertexTextures:x,floatFragmentTextures:b,floatVertexTextures:x&&b,maxSamples:i?t.getParameter(36183):0}}function Xi(t){const e=this;let n=null,r=0,s=!1,i=!1;const a=new Di,o=new Yn,l={value:null,needsUpdate:!1};function u(){l.value!==n&&(l.value=n,l.needsUpdate=r>0),e.numPlanes=r,e.numIntersection=0}function c(t,n,r,s){const i=null!==t?t.length:0;let u=null;if(0!==i){if(u=l.value,!0!==s||null===u){const e=r+4*i,s=n.matrixWorldInverse;o.getNormalMatrix(s),(null===u||u.length<e)&&(u=new Float32Array(e));for(let e=0,n=r;e!==i;++e,n+=4)a.copy(t[e]).applyMatrix4(s,o),a.normal.toArray(u,n),u[n+3]=a.constant}l.value=u,l.needsUpdate=!0}return e.numPlanes=i,e.numIntersection=0,u}this.uniform=l,this.numPlanes=0,this.numIntersection=0,this.init=function(t,e,i){const a=0!==t.length||e||0!==r||s;return s=e,n=c(t,i,0),r=t.length,a},this.beginShadows=function(){i=!0,c(null)},this.endShadows=function(){i=!1,u()},this.setState=function(e,a,o){const h=e.clippingPlanes,d=e.clipIntersection,p=e.clipShadows,f=t.get(e);if(!s||null===h||0===h.length||i&&!p)i?c(null):u();else{const t=i?0:r,e=4*t;let s=f.clippingState||null;l.value=s,s=c(h,a,e,o);for(let t=0;t!==e;++t)s[t]=n[t];f.clippingState=s,this.numIntersection=d?this.numPlanes:0,this.numPlanes+=t}}}function Ki(t){let e=new WeakMap;function n(t,e){return e===ot?t.mapping=it:e===lt&&(t.mapping=at),t}function r(t){const n=t.target;n.removeEventListener(\"dispose\",r);const s=e.get(n);void 0!==s&&(e.delete(n),s.dispose())}return{get:function(s){if(s&&s.isTexture&&!1===s.isRenderTargetTexture){const i=s.mapping;if(i===ot||i===lt){if(e.has(s))return n(e.get(s).texture,s.mapping);{const i=s.image;if(i&&i.height>0){const a=t.getRenderTarget(),o=new Ni(i.height/2);return o.fromEquirectangularTexture(t,s),e.set(s,o),t.setRenderTarget(a),s.addEventListener(\"dispose\",r),n(o.texture,s.mapping)}return null}}}return s},dispose:function(){e=new WeakMap}}}Wi.physical={uniforms:Si([Wi.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatNormalScale:{value:new Kn(1,1)},clearcoatNormalMap:{value:null},sheenTint:{value:new Cs(0)},transmission:{value:0},transmissionMap:{value:null},transmissionSamplerSize:{value:new Kn},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},attenuationDistance:{value:0},attenuationTint:{value:new Cs(0)},specularIntensity:{value:0},specularIntensityMap:{value:null},specularTint:{value:new Cs(1,1,1)},specularTintMap:{value:null}}]),vertexShader:Ui.meshphysical_vert,fragmentShader:Ui.meshphysical_frag};class Yi extends Mi{constructor(t=-1,e=1,n=1,r=-1,s=.1,i=2e3){super(),this.type=\"OrthographicCamera\",this.zoom=1,this.view=null,this.left=t,this.right=e,this.top=n,this.bottom=r,this.near=s,this.far=i,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.left=t.left,this.right=t.right,this.top=t.top,this.bottom=t.bottom,this.near=t.near,this.far=t.far,this.zoom=t.zoom,this.view=null===t.view?null:Object.assign({},t.view),this}setViewOffset(t,e,n,r,s,i){null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=n,this.view.offsetY=r,this.view.width=s,this.view.height=i,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=(this.right-this.left)/(2*this.zoom),e=(this.top-this.bottom)/(2*this.zoom),n=(this.right+this.left)/2,r=(this.top+this.bottom)/2;let s=n-t,i=n+t,a=r+e,o=r-e;if(null!==this.view&&this.view.enabled){const t=(this.right-this.left)/this.view.fullWidth/this.zoom,e=(this.top-this.bottom)/this.view.fullHeight/this.zoom;s+=t*this.view.offsetX,i=s+t*this.view.width,a-=e*this.view.offsetY,o=a-e*this.view.height}this.projectionMatrix.makeOrthographic(s,i,a,o,this.near,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.zoom=this.zoom,e.object.left=this.left,e.object.right=this.right,e.object.top=this.top,e.object.bottom=this.bottom,e.object.near=this.near,e.object.far=this.far,null!==this.view&&(e.object.view=Object.assign({},this.view)),e}}Yi.prototype.isOrthographicCamera=!0;class Zi extends _i{constructor(t){super(t),this.type=\"RawShaderMaterial\"}}Zi.prototype.isRawShaderMaterial=!0;const Ji=Math.pow(2,8),Qi=[.125,.215,.35,.446,.526,.582],ta=5+Qi.length,ea={[Ye]:0,[Ze]:1,[Qe]:2,[en]:3,[nn]:4,[rn]:5,[Je]:6},na=new Yi,{_lodPlanes:ra,_sizeLods:sa,_sigmas:ia}=pa(),aa=new Cs;let oa=null;const la=(1+Math.sqrt(5))/2,ua=1/la,ca=[new or(1,1,1),new or(-1,1,1),new or(1,1,-1),new or(-1,1,-1),new or(0,la,ua),new or(0,la,-ua),new or(ua,0,la),new or(-ua,0,la),new or(la,ua,0),new or(-la,ua,0)];class ha{constructor(t){this._renderer=t,this._pingPongRenderTarget=null,this._blurMaterial=function(t){const e=new Float32Array(20),n=new or(0,1,0);return new Zi({name:\"SphericalGaussianBlur\",defines:{n:20},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:e},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:n},inputEncoding:{value:ea[Ye]},outputEncoding:{value:ea[Ye]}},vertexShader:\"\\n\\n\\t\\tprecision mediump float;\\n\\t\\tprecision mediump int;\\n\\n\\t\\tattribute vec3 position;\\n\\t\\tattribute vec2 uv;\\n\\t\\tattribute float faceIndex;\\n\\n\\t\\tvarying vec3 vOutputDirection;\\n\\n\\t\\t// RH coordinate system; PMREM face-indexing convention\\n\\t\\tvec3 getDirection( vec2 uv, float face ) {\\n\\n\\t\\t\\tuv = 2.0 * uv - 1.0;\\n\\n\\t\\t\\tvec3 direction = vec3( uv, 1.0 );\\n\\n\\t\\t\\tif ( face == 0.0 ) {\\n\\n\\t\\t\\t\\tdirection = direction.zyx; // ( 1, v, u ) pos x\\n\\n\\t\\t\\t} else if ( face == 1.0 ) {\\n\\n\\t\\t\\t\\tdirection = direction.xzy;\\n\\t\\t\\t\\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\\n\\n\\t\\t\\t} else if ( face == 2.0 ) {\\n\\n\\t\\t\\t\\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\\n\\n\\t\\t\\t} else if ( face == 3.0 ) {\\n\\n\\t\\t\\t\\tdirection = direction.zyx;\\n\\t\\t\\t\\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\\n\\n\\t\\t\\t} else if ( face == 4.0 ) {\\n\\n\\t\\t\\t\\tdirection = direction.xzy;\\n\\t\\t\\t\\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\\n\\n\\t\\t\\t} else if ( face == 5.0 ) {\\n\\n\\t\\t\\t\\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn direction;\\n\\n\\t\\t}\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\tvOutputDirection = getDirection( uv, faceIndex );\\n\\t\\t\\tgl_Position = vec4( position, 1.0 );\\n\\n\\t\\t}\\n\\t\",fragmentShader:\"\\n\\n\\t\\t\\tprecision mediump float;\\n\\t\\t\\tprecision mediump int;\\n\\n\\t\\t\\tvarying vec3 vOutputDirection;\\n\\n\\t\\t\\tuniform sampler2D envMap;\\n\\t\\t\\tuniform int samples;\\n\\t\\t\\tuniform float weights[ n ];\\n\\t\\t\\tuniform bool latitudinal;\\n\\t\\t\\tuniform float dTheta;\\n\\t\\t\\tuniform float mipInt;\\n\\t\\t\\tuniform vec3 poleAxis;\\n\\n\\t\\t\\t\\n\\n\\t\\tuniform int inputEncoding;\\n\\t\\tuniform int outputEncoding;\\n\\n\\t\\t#include <encodings_pars_fragment>\\n\\n\\t\\tvec4 inputTexelToLinear( vec4 value ) {\\n\\n\\t\\t\\tif ( inputEncoding == 0 ) {\\n\\n\\t\\t\\t\\treturn value;\\n\\n\\t\\t\\t} else if ( inputEncoding == 1 ) {\\n\\n\\t\\t\\t\\treturn sRGBToLinear( value );\\n\\n\\t\\t\\t} else if ( inputEncoding == 2 ) {\\n\\n\\t\\t\\t\\treturn RGBEToLinear( value );\\n\\n\\t\\t\\t} else if ( inputEncoding == 3 ) {\\n\\n\\t\\t\\t\\treturn RGBMToLinear( value, 7.0 );\\n\\n\\t\\t\\t} else if ( inputEncoding == 4 ) {\\n\\n\\t\\t\\t\\treturn RGBMToLinear( value, 16.0 );\\n\\n\\t\\t\\t} else if ( inputEncoding == 5 ) {\\n\\n\\t\\t\\t\\treturn RGBDToLinear( value, 256.0 );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\treturn GammaToLinear( value, 2.2 );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tvec4 linearToOutputTexel( vec4 value ) {\\n\\n\\t\\t\\tif ( outputEncoding == 0 ) {\\n\\n\\t\\t\\t\\treturn value;\\n\\n\\t\\t\\t} else if ( outputEncoding == 1 ) {\\n\\n\\t\\t\\t\\treturn LinearTosRGB( value );\\n\\n\\t\\t\\t} else if ( outputEncoding == 2 ) {\\n\\n\\t\\t\\t\\treturn LinearToRGBE( value );\\n\\n\\t\\t\\t} else if ( outputEncoding == 3 ) {\\n\\n\\t\\t\\t\\treturn LinearToRGBM( value, 7.0 );\\n\\n\\t\\t\\t} else if ( outputEncoding == 4 ) {\\n\\n\\t\\t\\t\\treturn LinearToRGBM( value, 16.0 );\\n\\n\\t\\t\\t} else if ( outputEncoding == 5 ) {\\n\\n\\t\\t\\t\\treturn LinearToRGBD( value, 256.0 );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\treturn LinearToGamma( value, 2.2 );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tvec4 envMapTexelToLinear( vec4 color ) {\\n\\n\\t\\t\\treturn inputTexelToLinear( color );\\n\\n\\t\\t}\\n\\t\\n\\n\\t\\t\\t#define ENVMAP_TYPE_CUBE_UV\\n\\t\\t\\t#include <cube_uv_reflection_fragment>\\n\\n\\t\\t\\tvec3 getSample( float theta, vec3 axis ) {\\n\\n\\t\\t\\t\\tfloat cosTheta = cos( theta );\\n\\t\\t\\t\\t// Rodrigues' axis-angle rotation\\n\\t\\t\\t\\tvec3 sampleDirection = vOutputDirection * cosTheta\\n\\t\\t\\t\\t\\t+ cross( axis, vOutputDirection ) * sin( theta )\\n\\t\\t\\t\\t\\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\\n\\n\\t\\t\\t\\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\\n\\n\\t\\t\\t\\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\\n\\n\\t\\t\\t\\t\\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\taxis = normalize( axis );\\n\\n\\t\\t\\t\\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\t\\t\\t\\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\\n\\n\\t\\t\\t\\tfor ( int i = 1; i < n; i++ ) {\\n\\n\\t\\t\\t\\t\\tif ( i >= samples ) {\\n\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tfloat theta = dTheta * float( i );\\n\\t\\t\\t\\t\\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\\n\\t\\t\\t\\t\\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\\n\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tgl_FragColor = linearToOutputTexel( gl_FragColor );\\n\\n\\t\\t\\t}\\n\\t\\t\",blending:b,depthTest:!1,depthWrite:!1})}(),this._equirectShader=null,this._cubemapShader=null,this._compileMaterial(this._blurMaterial)}fromScene(t,e=0,n=.1,r=100){oa=this._renderer.getRenderTarget();const s=this._allocateTargets();return this._sceneToCubeUV(t,n,r,s),e>0&&this._blur(s,0,0,e),this._applyPMREM(s),this._cleanup(s),s}fromEquirectangular(t){return this._fromTexture(t)}fromCubemap(t){return this._fromTexture(t)}compileCubemapShader(){null===this._cubemapShader&&(this._cubemapShader=ya(),this._compileMaterial(this._cubemapShader))}compileEquirectangularShader(){null===this._equirectShader&&(this._equirectShader=ga(),this._compileMaterial(this._equirectShader))}dispose(){this._blurMaterial.dispose(),null!==this._cubemapShader&&this._cubemapShader.dispose(),null!==this._equirectShader&&this._equirectShader.dispose();for(let t=0;t<ra.length;t++)ra[t].dispose()}_cleanup(t){this._pingPongRenderTarget.dispose(),this._renderer.setRenderTarget(oa),t.scissorTest=!1,ma(t,0,0,t.width,t.height)}_fromTexture(t){oa=this._renderer.getRenderTarget();const e=this._allocateTargets(t);return this._textureToCubeUV(t,e),this._applyPMREM(e),this._cleanup(e),e}_allocateTargets(t){const e={magFilter:ft,minFilter:ft,generateMipmaps:!1,type:_t,format:Ut,encoding:da(t)?t.encoding:Qe,depthBuffer:!1},n=fa(e);return n.depthBuffer=!t,this._pingPongRenderTarget=fa(e),n}_compileMaterial(t){const e=new xi(ra[0],t);this._renderer.compile(e,na)}_sceneToCubeUV(t,e,n,r){const s=new ki(90,1,e,n),i=[1,-1,1,1,1,1],a=[1,1,1,-1,-1,-1],o=this._renderer,l=o.autoClear,u=o.outputEncoding,c=o.toneMapping;o.getClearColor(aa),o.toneMapping=J,o.outputEncoding=Ye,o.autoClear=!1;const h=new Ns({name:\"PMREM.Background\",side:m,depthWrite:!1,depthTest:!1}),d=new xi(new vi,h);let p=!1;const f=t.background;f?f.isColor&&(h.color.copy(f),t.background=null,p=!0):(h.color.copy(aa),p=!0);for(let e=0;e<6;e++){const n=e%3;0==n?(s.up.set(0,i[e],0),s.lookAt(a[e],0,0)):1==n?(s.up.set(0,0,i[e]),s.lookAt(0,a[e],0)):(s.up.set(0,i[e],0),s.lookAt(0,0,a[e])),ma(r,n*Ji,e>2?Ji:0,Ji,Ji),o.setRenderTarget(r),p&&o.render(d,s),o.render(t,s)}d.geometry.dispose(),d.material.dispose(),o.toneMapping=c,o.outputEncoding=u,o.autoClear=l,t.background=f}_textureToCubeUV(t,e){const n=this._renderer;t.isCubeTexture?null==this._cubemapShader&&(this._cubemapShader=ya()):null==this._equirectShader&&(this._equirectShader=ga());const r=t.isCubeTexture?this._cubemapShader:this._equirectShader,s=new xi(ra[0],r),i=r.uniforms;i.envMap.value=t,t.isCubeTexture||i.texelSize.value.set(1/t.image.width,1/t.image.height),i.inputEncoding.value=ea[t.encoding],i.outputEncoding.value=ea[e.texture.encoding],ma(e,0,0,3*Ji,2*Ji),n.setRenderTarget(e),n.render(s,na)}_applyPMREM(t){const e=this._renderer,n=e.autoClear;e.autoClear=!1;for(let e=1;e<ta;e++){const n=Math.sqrt(ia[e]*ia[e]-ia[e-1]*ia[e-1]),r=ca[(e-1)%ca.length];this._blur(t,e-1,e,n,r)}e.autoClear=n}_blur(t,e,n,r,s){const i=this._pingPongRenderTarget;this._halfBlur(t,i,e,n,r,\"latitudinal\",s),this._halfBlur(i,t,n,n,r,\"longitudinal\",s)}_halfBlur(t,e,n,r,s,i,a){const o=this._renderer,l=this._blurMaterial;\"latitudinal\"!==i&&\"longitudinal\"!==i&&console.error(\"blur direction must be either latitudinal or longitudinal!\");const u=new xi(ra[r],l),c=l.uniforms,h=sa[n]-1,d=isFinite(s)?Math.PI/(2*h):2*Math.PI/39,p=s/d,f=isFinite(s)?1+Math.floor(3*p):20;f>20&&console.warn(`sigmaRadians, ${s}, is too large and will clip, as it requested ${f} samples when the maximum is set to 20`);const m=[];let g=0;for(let t=0;t<20;++t){const e=t/p,n=Math.exp(-e*e/2);m.push(n),0==t?g+=n:t<f&&(g+=2*n)}for(let t=0;t<m.length;t++)m[t]=m[t]/g;c.envMap.value=t.texture,c.samples.value=f,c.weights.value=m,c.latitudinal.value=\"latitudinal\"===i,a&&(c.poleAxis.value=a),c.dTheta.value=d,c.mipInt.value=8-n,c.inputEncoding.value=ea[t.texture.encoding],c.outputEncoding.value=ea[t.texture.encoding];const y=sa[r];ma(e,3*Math.max(0,Ji-2*y),(0===r?0:2*Ji)+2*y*(r>4?r-8+4:0),3*y,2*y),o.setRenderTarget(e),o.render(u,na)}}function da(t){return void 0!==t&&t.type===_t&&(t.encoding===Ye||t.encoding===Ze||t.encoding===Je)}function pa(){const t=[],e=[],n=[];let r=8;for(let s=0;s<ta;s++){const i=Math.pow(2,r);e.push(i);let a=1/i;s>4?a=Qi[s-8+4-1]:0==s&&(a=0),n.push(a);const o=1/(i-1),l=-o/2,u=1+o/2,c=[l,l,u,l,u,u,l,l,u,u,l,u],h=6,d=6,p=3,f=2,m=1,g=new Float32Array(p*d*h),y=new Float32Array(f*d*h),x=new Float32Array(m*d*h);for(let t=0;t<h;t++){const e=t%3*2/3-1,n=t>2?0:-1,r=[e,n,0,e+2/3,n,0,e+2/3,n+1,0,e,n,0,e+2/3,n+1,0,e,n+1,0];g.set(r,p*d*t),y.set(c,f*d*t);const s=[t,t,t,t,t,t];x.set(s,m*d*t)}const b=new ti;b.setAttribute(\"position\",new Ls(g,p)),b.setAttribute(\"uv\",new Ls(y,f)),b.setAttribute(\"faceIndex\",new Ls(x,m)),t.push(b),r>4&&r--}return{_lodPlanes:t,_sizeLods:e,_sigmas:n}}function fa(t){const e=new rr(3*Ji,3*Ji,t);return e.texture.mapping=ut,e.texture.name=\"PMREM.cubeUv\",e.scissorTest=!0,e}function ma(t,e,n,r,s){t.viewport.set(e,n,r,s),t.scissor.set(e,n,r,s)}function ga(){const t=new Kn(1,1);return new Zi({name:\"EquirectangularToCubeUV\",uniforms:{envMap:{value:null},texelSize:{value:t},inputEncoding:{value:ea[Ye]},outputEncoding:{value:ea[Ye]}},vertexShader:\"\\n\\n\\t\\tprecision mediump float;\\n\\t\\tprecision mediump int;\\n\\n\\t\\tattribute vec3 position;\\n\\t\\tattribute vec2 uv;\\n\\t\\tattribute float faceIndex;\\n\\n\\t\\tvarying vec3 vOutputDirection;\\n\\n\\t\\t// RH coordinate system; PMREM face-indexing convention\\n\\t\\tvec3 getDirection( vec2 uv, float face ) {\\n\\n\\t\\t\\tuv = 2.0 * uv - 1.0;\\n\\n\\t\\t\\tvec3 direction = vec3( uv, 1.0 );\\n\\n\\t\\t\\tif ( face == 0.0 ) {\\n\\n\\t\\t\\t\\tdirection = direction.zyx; // ( 1, v, u ) pos x\\n\\n\\t\\t\\t} else if ( face == 1.0 ) {\\n\\n\\t\\t\\t\\tdirection = direction.xzy;\\n\\t\\t\\t\\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\\n\\n\\t\\t\\t} else if ( face == 2.0 ) {\\n\\n\\t\\t\\t\\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\\n\\n\\t\\t\\t} else if ( face == 3.0 ) {\\n\\n\\t\\t\\t\\tdirection = direction.zyx;\\n\\t\\t\\t\\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\\n\\n\\t\\t\\t} else if ( face == 4.0 ) {\\n\\n\\t\\t\\t\\tdirection = direction.xzy;\\n\\t\\t\\t\\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\\n\\n\\t\\t\\t} else if ( face == 5.0 ) {\\n\\n\\t\\t\\t\\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn direction;\\n\\n\\t\\t}\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\tvOutputDirection = getDirection( uv, faceIndex );\\n\\t\\t\\tgl_Position = vec4( position, 1.0 );\\n\\n\\t\\t}\\n\\t\",fragmentShader:\"\\n\\n\\t\\t\\tprecision mediump float;\\n\\t\\t\\tprecision mediump int;\\n\\n\\t\\t\\tvarying vec3 vOutputDirection;\\n\\n\\t\\t\\tuniform sampler2D envMap;\\n\\t\\t\\tuniform vec2 texelSize;\\n\\n\\t\\t\\t\\n\\n\\t\\tuniform int inputEncoding;\\n\\t\\tuniform int outputEncoding;\\n\\n\\t\\t#include <encodings_pars_fragment>\\n\\n\\t\\tvec4 inputTexelToLinear( vec4 value ) {\\n\\n\\t\\t\\tif ( inputEncoding == 0 ) {\\n\\n\\t\\t\\t\\treturn value;\\n\\n\\t\\t\\t} else if ( inputEncoding == 1 ) {\\n\\n\\t\\t\\t\\treturn sRGBToLinear( value );\\n\\n\\t\\t\\t} else if ( inputEncoding == 2 ) {\\n\\n\\t\\t\\t\\treturn RGBEToLinear( value );\\n\\n\\t\\t\\t} else if ( inputEncoding == 3 ) {\\n\\n\\t\\t\\t\\treturn RGBMToLinear( value, 7.0 );\\n\\n\\t\\t\\t} else if ( inputEncoding == 4 ) {\\n\\n\\t\\t\\t\\treturn RGBMToLinear( value, 16.0 );\\n\\n\\t\\t\\t} else if ( inputEncoding == 5 ) {\\n\\n\\t\\t\\t\\treturn RGBDToLinear( value, 256.0 );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\treturn GammaToLinear( value, 2.2 );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tvec4 linearToOutputTexel( vec4 value ) {\\n\\n\\t\\t\\tif ( outputEncoding == 0 ) {\\n\\n\\t\\t\\t\\treturn value;\\n\\n\\t\\t\\t} else if ( outputEncoding == 1 ) {\\n\\n\\t\\t\\t\\treturn LinearTosRGB( value );\\n\\n\\t\\t\\t} else if ( outputEncoding == 2 ) {\\n\\n\\t\\t\\t\\treturn LinearToRGBE( value );\\n\\n\\t\\t\\t} else if ( outputEncoding == 3 ) {\\n\\n\\t\\t\\t\\treturn LinearToRGBM( value, 7.0 );\\n\\n\\t\\t\\t} else if ( outputEncoding == 4 ) {\\n\\n\\t\\t\\t\\treturn LinearToRGBM( value, 16.0 );\\n\\n\\t\\t\\t} else if ( outputEncoding == 5 ) {\\n\\n\\t\\t\\t\\treturn LinearToRGBD( value, 256.0 );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\treturn LinearToGamma( value, 2.2 );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tvec4 envMapTexelToLinear( vec4 color ) {\\n\\n\\t\\t\\treturn inputTexelToLinear( color );\\n\\n\\t\\t}\\n\\t\\n\\n\\t\\t\\t#include <common>\\n\\n\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\n\\t\\t\\t\\tvec3 outputDirection = normalize( vOutputDirection );\\n\\t\\t\\t\\tvec2 uv = equirectUv( outputDirection );\\n\\n\\t\\t\\t\\tvec2 f = fract( uv / texelSize - 0.5 );\\n\\t\\t\\t\\tuv -= f * texelSize;\\n\\t\\t\\t\\tvec3 tl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\\n\\t\\t\\t\\tuv.x += texelSize.x;\\n\\t\\t\\t\\tvec3 tr = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\\n\\t\\t\\t\\tuv.y += texelSize.y;\\n\\t\\t\\t\\tvec3 br = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\\n\\t\\t\\t\\tuv.x -= texelSize.x;\\n\\t\\t\\t\\tvec3 bl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\\n\\n\\t\\t\\t\\tvec3 tm = mix( tl, tr, f.x );\\n\\t\\t\\t\\tvec3 bm = mix( bl, br, f.x );\\n\\t\\t\\t\\tgl_FragColor.rgb = mix( tm, bm, f.y );\\n\\n\\t\\t\\t\\tgl_FragColor = linearToOutputTexel( gl_FragColor );\\n\\n\\t\\t\\t}\\n\\t\\t\",blending:b,depthTest:!1,depthWrite:!1})}function ya(){return new Zi({name:\"CubemapToCubeUV\",uniforms:{envMap:{value:null},inputEncoding:{value:ea[Ye]},outputEncoding:{value:ea[Ye]}},vertexShader:\"\\n\\n\\t\\tprecision mediump float;\\n\\t\\tprecision mediump int;\\n\\n\\t\\tattribute vec3 position;\\n\\t\\tattribute vec2 uv;\\n\\t\\tattribute float faceIndex;\\n\\n\\t\\tvarying vec3 vOutputDirection;\\n\\n\\t\\t// RH coordinate system; PMREM face-indexing convention\\n\\t\\tvec3 getDirection( vec2 uv, float face ) {\\n\\n\\t\\t\\tuv = 2.0 * uv - 1.0;\\n\\n\\t\\t\\tvec3 direction = vec3( uv, 1.0 );\\n\\n\\t\\t\\tif ( face == 0.0 ) {\\n\\n\\t\\t\\t\\tdirection = direction.zyx; // ( 1, v, u ) pos x\\n\\n\\t\\t\\t} else if ( face == 1.0 ) {\\n\\n\\t\\t\\t\\tdirection = direction.xzy;\\n\\t\\t\\t\\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\\n\\n\\t\\t\\t} else if ( face == 2.0 ) {\\n\\n\\t\\t\\t\\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\\n\\n\\t\\t\\t} else if ( face == 3.0 ) {\\n\\n\\t\\t\\t\\tdirection = direction.zyx;\\n\\t\\t\\t\\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\\n\\n\\t\\t\\t} else if ( face == 4.0 ) {\\n\\n\\t\\t\\t\\tdirection = direction.xzy;\\n\\t\\t\\t\\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\\n\\n\\t\\t\\t} else if ( face == 5.0 ) {\\n\\n\\t\\t\\t\\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn direction;\\n\\n\\t\\t}\\n\\n\\t\\tvoid main() {\\n\\n\\t\\t\\tvOutputDirection = getDirection( uv, faceIndex );\\n\\t\\t\\tgl_Position = vec4( position, 1.0 );\\n\\n\\t\\t}\\n\\t\",fragmentShader:\"\\n\\n\\t\\t\\tprecision mediump float;\\n\\t\\t\\tprecision mediump int;\\n\\n\\t\\t\\tvarying vec3 vOutputDirection;\\n\\n\\t\\t\\tuniform samplerCube envMap;\\n\\n\\t\\t\\t\\n\\n\\t\\tuniform int inputEncoding;\\n\\t\\tuniform int outputEncoding;\\n\\n\\t\\t#include <encodings_pars_fragment>\\n\\n\\t\\tvec4 inputTexelToLinear( vec4 value ) {\\n\\n\\t\\t\\tif ( inputEncoding == 0 ) {\\n\\n\\t\\t\\t\\treturn value;\\n\\n\\t\\t\\t} else if ( inputEncoding == 1 ) {\\n\\n\\t\\t\\t\\treturn sRGBToLinear( value );\\n\\n\\t\\t\\t} else if ( inputEncoding == 2 ) {\\n\\n\\t\\t\\t\\treturn RGBEToLinear( value );\\n\\n\\t\\t\\t} else if ( inputEncoding == 3 ) {\\n\\n\\t\\t\\t\\treturn RGBMToLinear( value, 7.0 );\\n\\n\\t\\t\\t} else if ( inputEncoding == 4 ) {\\n\\n\\t\\t\\t\\treturn RGBMToLinear( value, 16.0 );\\n\\n\\t\\t\\t} else if ( inputEncoding == 5 ) {\\n\\n\\t\\t\\t\\treturn RGBDToLinear( value, 256.0 );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\treturn GammaToLinear( value, 2.2 );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tvec4 linearToOutputTexel( vec4 value ) {\\n\\n\\t\\t\\tif ( outputEncoding == 0 ) {\\n\\n\\t\\t\\t\\treturn value;\\n\\n\\t\\t\\t} else if ( outputEncoding == 1 ) {\\n\\n\\t\\t\\t\\treturn LinearTosRGB( value );\\n\\n\\t\\t\\t} else if ( outputEncoding == 2 ) {\\n\\n\\t\\t\\t\\treturn LinearToRGBE( value );\\n\\n\\t\\t\\t} else if ( outputEncoding == 3 ) {\\n\\n\\t\\t\\t\\treturn LinearToRGBM( value, 7.0 );\\n\\n\\t\\t\\t} else if ( outputEncoding == 4 ) {\\n\\n\\t\\t\\t\\treturn LinearToRGBM( value, 16.0 );\\n\\n\\t\\t\\t} else if ( outputEncoding == 5 ) {\\n\\n\\t\\t\\t\\treturn LinearToRGBD( value, 256.0 );\\n\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\treturn LinearToGamma( value, 2.2 );\\n\\n\\t\\t\\t}\\n\\n\\t\\t}\\n\\n\\t\\tvec4 envMapTexelToLinear( vec4 color ) {\\n\\n\\t\\t\\treturn inputTexelToLinear( color );\\n\\n\\t\\t}\\n\\t\\n\\n\\t\\t\\tvoid main() {\\n\\n\\t\\t\\t\\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\t\\t\\t\\tgl_FragColor.rgb = envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) ).rgb;\\n\\t\\t\\t\\tgl_FragColor = linearToOutputTexel( gl_FragColor );\\n\\n\\t\\t\\t}\\n\\t\\t\",blending:b,depthTest:!1,depthWrite:!1})}function xa(t){let e=new WeakMap,n=null;function r(t){const n=t.target;n.removeEventListener(\"dispose\",r);const s=e.get(n);void 0!==s&&(e.delete(n),s.dispose())}return{get:function(s){if(s&&s.isTexture&&!1===s.isRenderTargetTexture){const i=s.mapping,a=i===ot||i===lt,o=i===it||i===at;if(a||o){if(e.has(s))return e.get(s).texture;{const i=s.image;if(a&&i&&i.height>0||o&&i&&function(t){let e=0;for(let n=0;n<6;n++)void 0!==t[n]&&e++;return 6===e}(i)){const i=t.getRenderTarget();null===n&&(n=new ha(t));const o=a?n.fromEquirectangular(s):n.fromCubemap(s);return e.set(s,o),t.setRenderTarget(i),s.addEventListener(\"dispose\",r),o.texture}return null}}}return s},dispose:function(){e=new WeakMap,null!==n&&(n.dispose(),n=null)}}}function ba(t){const e={};function n(n){if(void 0!==e[n])return e[n];let r;switch(n){case\"WEBGL_depth_texture\":r=t.getExtension(\"WEBGL_depth_texture\")||t.getExtension(\"MOZ_WEBGL_depth_texture\")||t.getExtension(\"WEBKIT_WEBGL_depth_texture\");break;case\"EXT_texture_filter_anisotropic\":r=t.getExtension(\"EXT_texture_filter_anisotropic\")||t.getExtension(\"MOZ_EXT_texture_filter_anisotropic\")||t.getExtension(\"WEBKIT_EXT_texture_filter_anisotropic\");break;case\"WEBGL_compressed_texture_s3tc\":r=t.getExtension(\"WEBGL_compressed_texture_s3tc\")||t.getExtension(\"MOZ_WEBGL_compressed_texture_s3tc\")||t.getExtension(\"WEBKIT_WEBGL_compressed_texture_s3tc\");break;case\"WEBGL_compressed_texture_pvrtc\":r=t.getExtension(\"WEBGL_compressed_texture_pvrtc\")||t.getExtension(\"WEBKIT_WEBGL_compressed_texture_pvrtc\");break;default:r=t.getExtension(n)}return e[n]=r,r}return{has:function(t){return null!==n(t)},init:function(t){t.isWebGL2?n(\"EXT_color_buffer_float\"):(n(\"WEBGL_depth_texture\"),n(\"OES_texture_float\"),n(\"OES_texture_half_float\"),n(\"OES_texture_half_float_linear\"),n(\"OES_standard_derivatives\"),n(\"OES_element_index_uint\"),n(\"OES_vertex_array_object\"),n(\"ANGLE_instanced_arrays\")),n(\"OES_texture_float_linear\"),n(\"EXT_color_buffer_half_float\")},get:function(t){const e=n(t);return null===e&&console.warn(\"THREE.WebGLRenderer: \"+t+\" extension not supported.\"),e}}}function va(t,e,n,r){const s={},i=new WeakMap;function a(t){const o=t.target;null!==o.index&&e.remove(o.index);for(const t in o.attributes)e.remove(o.attributes[t]);o.removeEventListener(\"dispose\",a),delete s[o.id];const l=i.get(o);l&&(e.remove(l),i.delete(o)),r.releaseStatesOfGeometry(o),!0===o.isInstancedBufferGeometry&&delete o._maxInstanceCount,n.memory.geometries--}function o(t){const n=[],r=t.index,s=t.attributes.position;let a=0;if(null!==r){const t=r.array;a=r.version;for(let e=0,r=t.length;e<r;e+=3){const r=t[e+0],s=t[e+1],i=t[e+2];n.push(r,s,s,i,i,r)}}else{const t=s.array;a=s.version;for(let e=0,r=t.length/3-1;e<r;e+=3){const t=e+0,r=e+1,s=e+2;n.push(t,r,r,s,s,t)}}const o=new(Gs(n)>65535?Bs:Ps)(n,1);o.version=a;const l=i.get(t);l&&e.remove(l),i.set(t,o)}return{get:function(t,e){return!0===s[e.id]||(e.addEventListener(\"dispose\",a),s[e.id]=!0,n.memory.geometries++),e},update:function(t){const n=t.attributes;for(const t in n)e.update(n[t],34962);const r=t.morphAttributes;for(const t in r){const n=r[t];for(let t=0,r=n.length;t<r;t++)e.update(n[t],34962)}},getWireframeAttribute:function(t){const e=i.get(t);if(e){const n=t.index;null!==n&&e.version<n.version&&o(t)}else o(t);return i.get(t)}}}function wa(t,e,n,r){const s=r.isWebGL2;let i,a,o;this.setMode=function(t){i=t},this.setIndex=function(t){a=t.type,o=t.bytesPerElement},this.render=function(e,r){t.drawElements(i,r,a,e*o),n.update(r,i,1)},this.renderInstances=function(r,l,u){if(0===u)return;let c,h;if(s)c=t,h=\"drawElementsInstanced\";else if(c=e.get(\"ANGLE_instanced_arrays\"),h=\"drawElementsInstancedANGLE\",null===c)return void console.error(\"THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.\");c[h](i,l,a,r*o,u),n.update(l,i,u)}}function Sa(t){const e={frame:0,calls:0,triangles:0,points:0,lines:0};return{memory:{geometries:0,textures:0},render:e,programs:null,autoReset:!0,reset:function(){e.frame++,e.calls=0,e.triangles=0,e.points=0,e.lines=0},update:function(t,n,r){switch(e.calls++,n){case 4:e.triangles+=r*(t/3);break;case 1:e.lines+=r*(t/2);break;case 3:e.lines+=r*(t-1);break;case 2:e.lines+=r*t;break;case 0:e.points+=r*t;break;default:console.error(\"THREE.WebGLInfo: Unknown draw mode:\",n)}}}}function Ta(t,e){return t[0]-e[0]}function _a(t,e){return Math.abs(e[1])-Math.abs(t[1])}function Ma(t){const e={},n=new Float32Array(8),r=[];for(let t=0;t<8;t++)r[t]=[t,0];return{update:function(s,i,a,o){const l=s.morphTargetInfluences,u=void 0===l?0:l.length;let c=e[i.id];if(void 0===c||c.length!==u){c=[];for(let t=0;t<u;t++)c[t]=[t,0];e[i.id]=c}for(let t=0;t<u;t++){const e=c[t];e[0]=t,e[1]=l[t]}c.sort(_a);for(let t=0;t<8;t++)t<u&&c[t][1]?(r[t][0]=c[t][0],r[t][1]=c[t][1]):(r[t][0]=Number.MAX_SAFE_INTEGER,r[t][1]=0);r.sort(Ta);const h=i.morphAttributes.position,d=i.morphAttributes.normal;let p=0;for(let t=0;t<8;t++){const e=r[t],s=e[0],a=e[1];s!==Number.MAX_SAFE_INTEGER&&a?(h&&i.getAttribute(\"morphTarget\"+t)!==h[s]&&i.setAttribute(\"morphTarget\"+t,h[s]),d&&i.getAttribute(\"morphNormal\"+t)!==d[s]&&i.setAttribute(\"morphNormal\"+t,d[s]),n[t]=a,p+=a):(h&&!0===i.hasAttribute(\"morphTarget\"+t)&&i.deleteAttribute(\"morphTarget\"+t),d&&!0===i.hasAttribute(\"morphNormal\"+t)&&i.deleteAttribute(\"morphNormal\"+t),n[t]=0)}const f=i.morphTargetsRelative?1:1-p;o.getUniforms().setValue(t,\"morphTargetBaseInfluence\",f),o.getUniforms().setValue(t,\"morphTargetInfluences\",n)}}}function ka(t,e,n,r){let s=new WeakMap;function i(t){const e=t.target;e.removeEventListener(\"dispose\",i),n.remove(e.instanceMatrix),null!==e.instanceColor&&n.remove(e.instanceColor)}return{update:function(t){const a=r.render.frame,o=t.geometry,l=e.get(t,o);return s.get(l)!==a&&(e.update(l),s.set(l,a)),t.isInstancedMesh&&(!1===t.hasEventListener(\"dispose\",i)&&t.addEventListener(\"dispose\",i),n.update(t.instanceMatrix,34962),null!==t.instanceColor&&n.update(t.instanceColor,34962)),l},dispose:function(){s=new WeakMap}}}class Ea extends tr{constructor(t=null,e=1,n=1,r=1){super(null),this.image={data:t,width:e,height:n,depth:r},this.magFilter=ft,this.minFilter=ft,this.wrapR=dt,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}}Ea.prototype.isDataTexture2DArray=!0;class Ia extends tr{constructor(t=null,e=1,n=1,r=1){super(null),this.image={data:t,width:e,height:n,depth:r},this.magFilter=ft,this.minFilter=ft,this.wrapR=dt,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}}Ia.prototype.isDataTexture3D=!0;const Ca=new tr,Na=new Ea,Aa=new Ia,Ra=new Ci,La=[],Da=[],Fa=new Float32Array(16),$a=new Float32Array(9),Oa=new Float32Array(4);function Pa(t,e,n){const r=t[0];if(r<=0||r>0)return t;const s=e*n;let i=La[s];if(void 0===i&&(i=new Float32Array(s),La[s]=i),0!==e){r.toArray(i,0);for(let r=1,s=0;r!==e;++r)s+=n,t[r].toArray(i,s)}return i}function za(t,e){if(t.length!==e.length)return!1;for(let n=0,r=t.length;n<r;n++)if(t[n]!==e[n])return!1;return!0}function Ba(t,e){for(let n=0,r=e.length;n<r;n++)t[n]=e[n]}function Ua(t,e){let n=Da[e];void 0===n&&(n=new Int32Array(e),Da[e]=n);for(let r=0;r!==e;++r)n[r]=t.allocateTextureUnit();return n}function Va(t,e){const n=this.cache;n[0]!==e&&(t.uniform1f(this.addr,e),n[0]=e)}function Wa(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y||(t.uniform2f(this.addr,e.x,e.y),n[0]=e.x,n[1]=e.y);else{if(za(n,e))return;t.uniform2fv(this.addr,e),Ba(n,e)}}function Ga(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y&&n[2]===e.z||(t.uniform3f(this.addr,e.x,e.y,e.z),n[0]=e.x,n[1]=e.y,n[2]=e.z);else if(void 0!==e.r)n[0]===e.r&&n[1]===e.g&&n[2]===e.b||(t.uniform3f(this.addr,e.r,e.g,e.b),n[0]=e.r,n[1]=e.g,n[2]=e.b);else{if(za(n,e))return;t.uniform3fv(this.addr,e),Ba(n,e)}}function Ha(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y&&n[2]===e.z&&n[3]===e.w||(t.uniform4f(this.addr,e.x,e.y,e.z,e.w),n[0]=e.x,n[1]=e.y,n[2]=e.z,n[3]=e.w);else{if(za(n,e))return;t.uniform4fv(this.addr,e),Ba(n,e)}}function ja(t,e){const n=this.cache,r=e.elements;if(void 0===r){if(za(n,e))return;t.uniformMatrix2fv(this.addr,!1,e),Ba(n,e)}else{if(za(n,r))return;Oa.set(r),t.uniformMatrix2fv(this.addr,!1,Oa),Ba(n,r)}}function qa(t,e){const n=this.cache,r=e.elements;if(void 0===r){if(za(n,e))return;t.uniformMatrix3fv(this.addr,!1,e),Ba(n,e)}else{if(za(n,r))return;$a.set(r),t.uniformMatrix3fv(this.addr,!1,$a),Ba(n,r)}}function Xa(t,e){const n=this.cache,r=e.elements;if(void 0===r){if(za(n,e))return;t.uniformMatrix4fv(this.addr,!1,e),Ba(n,e)}else{if(za(n,r))return;Fa.set(r),t.uniformMatrix4fv(this.addr,!1,Fa),Ba(n,r)}}function Ka(t,e){const n=this.cache;n[0]!==e&&(t.uniform1i(this.addr,e),n[0]=e)}function Ya(t,e){const n=this.cache;za(n,e)||(t.uniform2iv(this.addr,e),Ba(n,e))}function Za(t,e){const n=this.cache;za(n,e)||(t.uniform3iv(this.addr,e),Ba(n,e))}function Ja(t,e){const n=this.cache;za(n,e)||(t.uniform4iv(this.addr,e),Ba(n,e))}function Qa(t,e){const n=this.cache;n[0]!==e&&(t.uniform1ui(this.addr,e),n[0]=e)}function to(t,e){const n=this.cache;za(n,e)||(t.uniform2uiv(this.addr,e),Ba(n,e))}function eo(t,e){const n=this.cache;za(n,e)||(t.uniform3uiv(this.addr,e),Ba(n,e))}function no(t,e){const n=this.cache;za(n,e)||(t.uniform4uiv(this.addr,e),Ba(n,e))}function ro(t,e,n){const r=this.cache,s=n.allocateTextureUnit();r[0]!==s&&(t.uniform1i(this.addr,s),r[0]=s),n.safeSetTexture2D(e||Ca,s)}function so(t,e,n){const r=this.cache,s=n.allocateTextureUnit();r[0]!==s&&(t.uniform1i(this.addr,s),r[0]=s),n.setTexture3D(e||Aa,s)}function io(t,e,n){const r=this.cache,s=n.allocateTextureUnit();r[0]!==s&&(t.uniform1i(this.addr,s),r[0]=s),n.safeSetTextureCube(e||Ra,s)}function ao(t,e,n){const r=this.cache,s=n.allocateTextureUnit();r[0]!==s&&(t.uniform1i(this.addr,s),r[0]=s),n.setTexture2DArray(e||Na,s)}function oo(t,e){t.uniform1fv(this.addr,e)}function lo(t,e){const n=Pa(e,this.size,2);t.uniform2fv(this.addr,n)}function uo(t,e){const n=Pa(e,this.size,3);t.uniform3fv(this.addr,n)}function co(t,e){const n=Pa(e,this.size,4);t.uniform4fv(this.addr,n)}function ho(t,e){const n=Pa(e,this.size,4);t.uniformMatrix2fv(this.addr,!1,n)}function po(t,e){const n=Pa(e,this.size,9);t.uniformMatrix3fv(this.addr,!1,n)}function fo(t,e){const n=Pa(e,this.size,16);t.uniformMatrix4fv(this.addr,!1,n)}function mo(t,e){t.uniform1iv(this.addr,e)}function go(t,e){t.uniform2iv(this.addr,e)}function yo(t,e){t.uniform3iv(this.addr,e)}function xo(t,e){t.uniform4iv(this.addr,e)}function bo(t,e){t.uniform1uiv(this.addr,e)}function vo(t,e){t.uniform2uiv(this.addr,e)}function wo(t,e){t.uniform3uiv(this.addr,e)}function So(t,e){t.uniform4uiv(this.addr,e)}function To(t,e,n){const r=e.length,s=Ua(n,r);t.uniform1iv(this.addr,s);for(let t=0;t!==r;++t)n.safeSetTexture2D(e[t]||Ca,s[t])}function _o(t,e,n){const r=e.length,s=Ua(n,r);t.uniform1iv(this.addr,s);for(let t=0;t!==r;++t)n.safeSetTextureCube(e[t]||Ra,s[t])}function Mo(t,e,n){this.id=t,this.addr=n,this.cache=[],this.setValue=function(t){switch(t){case 5126:return Va;case 35664:return Wa;case 35665:return Ga;case 35666:return Ha;case 35674:return ja;case 35675:return qa;case 35676:return Xa;case 5124:case 35670:return Ka;case 35667:case 35671:return Ya;case 35668:case 35672:return Za;case 35669:case 35673:return Ja;case 5125:return Qa;case 36294:return to;case 36295:return eo;case 36296:return no;case 35678:case 36198:case 36298:case 36306:case 35682:return ro;case 35679:case 36299:case 36307:return so;case 35680:case 36300:case 36308:case 36293:return io;case 36289:case 36303:case 36311:case 36292:return ao}}(e.type)}function ko(t,e,n){this.id=t,this.addr=n,this.cache=[],this.size=e.size,this.setValue=function(t){switch(t){case 5126:return oo;case 35664:return lo;case 35665:return uo;case 35666:return co;case 35674:return ho;case 35675:return po;case 35676:return fo;case 5124:case 35670:return mo;case 35667:case 35671:return go;case 35668:case 35672:return yo;case 35669:case 35673:return xo;case 5125:return bo;case 36294:return vo;case 36295:return wo;case 36296:return So;case 35678:case 36198:case 36298:case 36306:case 35682:return To;case 35680:case 36300:case 36308:case 36293:return _o}}(e.type)}function Eo(t){this.id=t,this.seq=[],this.map={}}ko.prototype.updateCache=function(t){const e=this.cache;t instanceof Float32Array&&e.length!==t.length&&(this.cache=new Float32Array(t.length)),Ba(e,t)},Eo.prototype.setValue=function(t,e,n){const r=this.seq;for(let s=0,i=r.length;s!==i;++s){const i=r[s];i.setValue(t,e[i.id],n)}};const Io=/(\\w+)(\\])?(\\[|\\.)?/g;function Co(t,e){t.seq.push(e),t.map[e.id]=e}function No(t,e,n){const r=t.name,s=r.length;for(Io.lastIndex=0;;){const i=Io.exec(r),a=Io.lastIndex;let o=i[1];const l=\"]\"===i[2],u=i[3];if(l&&(o|=0),void 0===u||\"[\"===u&&a+2===s){Co(n,void 0===u?new Mo(o,t,e):new ko(o,t,e));break}{let t=n.map[o];void 0===t&&(t=new Eo(o),Co(n,t)),n=t}}}function Ao(t,e){this.seq=[],this.map={};const n=t.getProgramParameter(e,35718);for(let r=0;r<n;++r){const n=t.getActiveUniform(e,r);No(n,t.getUniformLocation(e,n.name),this)}}function Ro(t,e,n){const r=t.createShader(e);return t.shaderSource(r,n),t.compileShader(r),r}Ao.prototype.setValue=function(t,e,n,r){const s=this.map[e];void 0!==s&&s.setValue(t,n,r)},Ao.prototype.setOptional=function(t,e,n){const r=e[n];void 0!==r&&this.setValue(t,n,r)},Ao.upload=function(t,e,n,r){for(let s=0,i=e.length;s!==i;++s){const i=e[s],a=n[i.id];!1!==a.needsUpdate&&i.setValue(t,a.value,r)}},Ao.seqWithValue=function(t,e){const n=[];for(let r=0,s=t.length;r!==s;++r){const s=t[r];s.id in e&&n.push(s)}return n};let Lo=0;function Do(t){switch(t){case Ye:return[\"Linear\",\"( value )\"];case Ze:return[\"sRGB\",\"( value )\"];case Qe:return[\"RGBE\",\"( value )\"];case en:return[\"RGBM\",\"( value, 7.0 )\"];case nn:return[\"RGBM\",\"( value, 16.0 )\"];case rn:return[\"RGBD\",\"( value, 256.0 )\"];case Je:return[\"Gamma\",\"( value, float( GAMMA_FACTOR ) )\"];case tn:return[\"LogLuv\",\"( value )\"];default:return console.warn(\"THREE.WebGLProgram: Unsupported encoding:\",t),[\"Linear\",\"( value )\"]}}function Fo(t,e,n){const r=t.getShaderParameter(e,35713),s=t.getShaderInfoLog(e).trim();return r&&\"\"===s?\"\":n.toUpperCase()+\"\\n\\n\"+s+\"\\n\\n\"+function(t){const e=t.split(\"\\n\");for(let t=0;t<e.length;t++)e[t]=t+1+\": \"+e[t];return e.join(\"\\n\")}(t.getShaderSource(e))}function $o(t,e){const n=Do(e);return\"vec4 \"+t+\"( vec4 value ) { return \"+n[0]+\"ToLinear\"+n[1]+\"; }\"}function Oo(t,e){const n=Do(e);return\"vec4 \"+t+\"( vec4 value ) { return LinearTo\"+n[0]+n[1]+\"; }\"}function Po(t,e){let n;switch(e){case Q:n=\"Linear\";break;case tt:n=\"Reinhard\";break;case et:n=\"OptimizedCineon\";break;case nt:n=\"ACESFilmic\";break;case rt:n=\"Custom\";break;default:console.warn(\"THREE.WebGLProgram: Unsupported toneMapping:\",e),n=\"Linear\"}return\"vec3 \"+t+\"( vec3 color ) { return \"+n+\"ToneMapping( color ); }\"}function zo(t){return\"\"!==t}function Bo(t,e){return t.replace(/NUM_DIR_LIGHTS/g,e.numDirLights).replace(/NUM_SPOT_LIGHTS/g,e.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,e.numPointLights).replace(/NUM_HEMI_LIGHTS/g,e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g,e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,e.numPointLightShadows)}function Uo(t,e){return t.replace(/NUM_CLIPPING_PLANES/g,e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,e.numClippingPlanes-e.numClipIntersection)}const Vo=/^[ \\t]*#include +<([\\w\\d./]+)>/gm;function Wo(t){return t.replace(Vo,Go)}function Go(t,e){const n=Ui[e];if(void 0===n)throw new Error(\"Can not resolve #include <\"+e+\">\");return Wo(n)}const Ho=/#pragma unroll_loop[\\s]+?for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g,jo=/#pragma unroll_loop_start\\s+for\\s*\\(\\s*int\\s+i\\s*=\\s*(\\d+)\\s*;\\s*i\\s*<\\s*(\\d+)\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{([\\s\\S]+?)}\\s+#pragma unroll_loop_end/g;function qo(t){return t.replace(jo,Ko).replace(Ho,Xo)}function Xo(t,e,n,r){return console.warn(\"WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.\"),Ko(0,e,n,r)}function Ko(t,e,n,r){let s=\"\";for(let t=parseInt(e);t<parseInt(n);t++)s+=r.replace(/\\[\\s*i\\s*\\]/g,\"[ \"+t+\" ]\").replace(/UNROLLED_LOOP_INDEX/g,t);return s}function Yo(t){let e=\"precision \"+t.precision+\" float;\\nprecision \"+t.precision+\" int;\";return\"highp\"===t.precision?e+=\"\\n#define HIGH_PRECISION\":\"mediump\"===t.precision?e+=\"\\n#define MEDIUM_PRECISION\":\"lowp\"===t.precision&&(e+=\"\\n#define LOW_PRECISION\"),e}function Zo(t,e,n,r){const s=t.getContext(),i=n.defines;let a=n.vertexShader,o=n.fragmentShader;const l=function(t){let e=\"SHADOWMAP_TYPE_BASIC\";return t.shadowMapType===h?e=\"SHADOWMAP_TYPE_PCF\":t.shadowMapType===d?e=\"SHADOWMAP_TYPE_PCF_SOFT\":t.shadowMapType===p&&(e=\"SHADOWMAP_TYPE_VSM\"),e}(n),u=function(t){let e=\"ENVMAP_TYPE_CUBE\";if(t.envMap)switch(t.envMapMode){case it:case at:e=\"ENVMAP_TYPE_CUBE\";break;case ut:case ct:e=\"ENVMAP_TYPE_CUBE_UV\"}return e}(n),c=function(t){let e=\"ENVMAP_MODE_REFLECTION\";if(t.envMap)switch(t.envMapMode){case at:case ct:e=\"ENVMAP_MODE_REFRACTION\"}return e}(n),f=function(t){let e=\"ENVMAP_BLENDING_NONE\";if(t.envMap)switch(t.combine){case K:e=\"ENVMAP_BLENDING_MULTIPLY\";break;case Y:e=\"ENVMAP_BLENDING_MIX\";break;case Z:e=\"ENVMAP_BLENDING_ADD\"}return e}(n),m=t.gammaFactor>0?t.gammaFactor:1,g=n.isWebGL2?\"\":function(t){return[t.extensionDerivatives||t.envMapCubeUV||t.bumpMap||t.tangentSpaceNormalMap||t.clearcoatNormalMap||t.flatShading||\"physical\"===t.shaderID?\"#extension GL_OES_standard_derivatives : enable\":\"\",(t.extensionFragDepth||t.logarithmicDepthBuffer)&&t.rendererExtensionFragDepth?\"#extension GL_EXT_frag_depth : enable\":\"\",t.extensionDrawBuffers&&t.rendererExtensionDrawBuffers?\"#extension GL_EXT_draw_buffers : require\":\"\",(t.extensionShaderTextureLOD||t.envMap||t.transmission)&&t.rendererExtensionShaderTextureLod?\"#extension GL_EXT_shader_texture_lod : enable\":\"\"].filter(zo).join(\"\\n\")}(n),y=function(t){const e=[];for(const n in t){const r=t[n];!1!==r&&e.push(\"#define \"+n+\" \"+r)}return e.join(\"\\n\")}(i),x=s.createProgram();let b,v,w=n.glslVersion?\"#version \"+n.glslVersion+\"\\n\":\"\";n.isRawShaderMaterial?(b=[y].filter(zo).join(\"\\n\"),b.length>0&&(b+=\"\\n\"),v=[g,y].filter(zo).join(\"\\n\"),v.length>0&&(v+=\"\\n\")):(b=[Yo(n),\"#define SHADER_NAME \"+n.shaderName,y,n.instancing?\"#define USE_INSTANCING\":\"\",n.instancingColor?\"#define USE_INSTANCING_COLOR\":\"\",n.supportsVertexTextures?\"#define VERTEX_TEXTURES\":\"\",\"#define GAMMA_FACTOR \"+m,\"#define MAX_BONES \"+n.maxBones,n.useFog&&n.fog?\"#define USE_FOG\":\"\",n.useFog&&n.fogExp2?\"#define FOG_EXP2\":\"\",n.map?\"#define USE_MAP\":\"\",n.envMap?\"#define USE_ENVMAP\":\"\",n.envMap?\"#define \"+c:\"\",n.lightMap?\"#define USE_LIGHTMAP\":\"\",n.aoMap?\"#define USE_AOMAP\":\"\",n.emissiveMap?\"#define USE_EMISSIVEMAP\":\"\",n.bumpMap?\"#define USE_BUMPMAP\":\"\",n.normalMap?\"#define USE_NORMALMAP\":\"\",n.normalMap&&n.objectSpaceNormalMap?\"#define OBJECTSPACE_NORMALMAP\":\"\",n.normalMap&&n.tangentSpaceNormalMap?\"#define TANGENTSPACE_NORMALMAP\":\"\",n.clearcoatMap?\"#define USE_CLEARCOATMAP\":\"\",n.clearcoatRoughnessMap?\"#define USE_CLEARCOAT_ROUGHNESSMAP\":\"\",n.clearcoatNormalMap?\"#define USE_CLEARCOAT_NORMALMAP\":\"\",n.displacementMap&&n.supportsVertexTextures?\"#define USE_DISPLACEMENTMAP\":\"\",n.specularMap?\"#define USE_SPECULARMAP\":\"\",n.specularIntensityMap?\"#define USE_SPECULARINTENSITYMAP\":\"\",n.specularTintMap?\"#define USE_SPECULARTINTMAP\":\"\",n.roughnessMap?\"#define USE_ROUGHNESSMAP\":\"\",n.metalnessMap?\"#define USE_METALNESSMAP\":\"\",n.alphaMap?\"#define USE_ALPHAMAP\":\"\",n.transmission?\"#define USE_TRANSMISSION\":\"\",n.transmissionMap?\"#define USE_TRANSMISSIONMAP\":\"\",n.thicknessMap?\"#define USE_THICKNESSMAP\":\"\",n.vertexTangents?\"#define USE_TANGENT\":\"\",n.vertexColors?\"#define USE_COLOR\":\"\",n.vertexAlphas?\"#define USE_COLOR_ALPHA\":\"\",n.vertexUvs?\"#define USE_UV\":\"\",n.uvsVertexOnly?\"#define UVS_VERTEX_ONLY\":\"\",n.flatShading?\"#define FLAT_SHADED\":\"\",n.skinning?\"#define USE_SKINNING\":\"\",n.useVertexTexture?\"#define BONE_TEXTURE\":\"\",n.morphTargets?\"#define USE_MORPHTARGETS\":\"\",n.morphNormals&&!1===n.flatShading?\"#define USE_MORPHNORMALS\":\"\",n.doubleSided?\"#define DOUBLE_SIDED\":\"\",n.flipSided?\"#define FLIP_SIDED\":\"\",n.shadowMapEnabled?\"#define USE_SHADOWMAP\":\"\",n.shadowMapEnabled?\"#define \"+l:\"\",n.sizeAttenuation?\"#define USE_SIZEATTENUATION\":\"\",n.logarithmicDepthBuffer?\"#define USE_LOGDEPTHBUF\":\"\",n.logarithmicDepthBuffer&&n.rendererExtensionFragDepth?\"#define USE_LOGDEPTHBUF_EXT\":\"\",\"uniform mat4 modelMatrix;\",\"uniform mat4 modelViewMatrix;\",\"uniform mat4 projectionMatrix;\",\"uniform mat4 viewMatrix;\",\"uniform mat3 normalMatrix;\",\"uniform vec3 cameraPosition;\",\"uniform bool isOrthographic;\",\"#ifdef USE_INSTANCING\",\"\\tattribute mat4 instanceMatrix;\",\"#endif\",\"#ifdef USE_INSTANCING_COLOR\",\"\\tattribute vec3 instanceColor;\",\"#endif\",\"attribute vec3 position;\",\"attribute vec3 normal;\",\"attribute vec2 uv;\",\"#ifdef USE_TANGENT\",\"\\tattribute vec4 tangent;\",\"#endif\",\"#if defined( USE_COLOR_ALPHA )\",\"\\tattribute vec4 color;\",\"#elif defined( USE_COLOR )\",\"\\tattribute vec3 color;\",\"#endif\",\"#ifdef USE_MORPHTARGETS\",\"\\tattribute vec3 morphTarget0;\",\"\\tattribute vec3 morphTarget1;\",\"\\tattribute vec3 morphTarget2;\",\"\\tattribute vec3 morphTarget3;\",\"\\t#ifdef USE_MORPHNORMALS\",\"\\t\\tattribute vec3 morphNormal0;\",\"\\t\\tattribute vec3 morphNormal1;\",\"\\t\\tattribute vec3 morphNormal2;\",\"\\t\\tattribute vec3 morphNormal3;\",\"\\t#else\",\"\\t\\tattribute vec3 morphTarget4;\",\"\\t\\tattribute vec3 morphTarget5;\",\"\\t\\tattribute vec3 morphTarget6;\",\"\\t\\tattribute vec3 morphTarget7;\",\"\\t#endif\",\"#endif\",\"#ifdef USE_SKINNING\",\"\\tattribute vec4 skinIndex;\",\"\\tattribute vec4 skinWeight;\",\"#endif\",\"\\n\"].filter(zo).join(\"\\n\"),v=[g,Yo(n),\"#define SHADER_NAME \"+n.shaderName,y,\"#define GAMMA_FACTOR \"+m,n.useFog&&n.fog?\"#define USE_FOG\":\"\",n.useFog&&n.fogExp2?\"#define FOG_EXP2\":\"\",n.map?\"#define USE_MAP\":\"\",n.matcap?\"#define USE_MATCAP\":\"\",n.envMap?\"#define USE_ENVMAP\":\"\",n.envMap?\"#define \"+u:\"\",n.envMap?\"#define \"+c:\"\",n.envMap?\"#define \"+f:\"\",n.lightMap?\"#define USE_LIGHTMAP\":\"\",n.aoMap?\"#define USE_AOMAP\":\"\",n.emissiveMap?\"#define USE_EMISSIVEMAP\":\"\",n.bumpMap?\"#define USE_BUMPMAP\":\"\",n.normalMap?\"#define USE_NORMALMAP\":\"\",n.normalMap&&n.objectSpaceNormalMap?\"#define OBJECTSPACE_NORMALMAP\":\"\",n.normalMap&&n.tangentSpaceNormalMap?\"#define TANGENTSPACE_NORMALMAP\":\"\",n.clearcoat?\"#define USE_CLEARCOAT\":\"\",n.clearcoatMap?\"#define USE_CLEARCOATMAP\":\"\",n.clearcoatRoughnessMap?\"#define USE_CLEARCOAT_ROUGHNESSMAP\":\"\",n.clearcoatNormalMap?\"#define USE_CLEARCOAT_NORMALMAP\":\"\",n.specularMap?\"#define USE_SPECULARMAP\":\"\",n.specularIntensityMap?\"#define USE_SPECULARINTENSITYMAP\":\"\",n.specularTintMap?\"#define USE_SPECULARTINTMAP\":\"\",n.roughnessMap?\"#define USE_ROUGHNESSMAP\":\"\",n.metalnessMap?\"#define USE_METALNESSMAP\":\"\",n.alphaMap?\"#define USE_ALPHAMAP\":\"\",n.alphaTest?\"#define USE_ALPHATEST\":\"\",n.sheenTint?\"#define USE_SHEEN\":\"\",n.transmission?\"#define USE_TRANSMISSION\":\"\",n.transmissionMap?\"#define USE_TRANSMISSIONMAP\":\"\",n.thicknessMap?\"#define USE_THICKNESSMAP\":\"\",n.vertexTangents?\"#define USE_TANGENT\":\"\",n.vertexColors||n.instancingColor?\"#define USE_COLOR\":\"\",n.vertexAlphas?\"#define USE_COLOR_ALPHA\":\"\",n.vertexUvs?\"#define USE_UV\":\"\",n.uvsVertexOnly?\"#define UVS_VERTEX_ONLY\":\"\",n.gradientMap?\"#define USE_GRADIENTMAP\":\"\",n.flatShading?\"#define FLAT_SHADED\":\"\",n.doubleSided?\"#define DOUBLE_SIDED\":\"\",n.flipSided?\"#define FLIP_SIDED\":\"\",n.shadowMapEnabled?\"#define USE_SHADOWMAP\":\"\",n.shadowMapEnabled?\"#define \"+l:\"\",n.premultipliedAlpha?\"#define PREMULTIPLIED_ALPHA\":\"\",n.physicallyCorrectLights?\"#define PHYSICALLY_CORRECT_LIGHTS\":\"\",n.logarithmicDepthBuffer?\"#define USE_LOGDEPTHBUF\":\"\",n.logarithmicDepthBuffer&&n.rendererExtensionFragDepth?\"#define USE_LOGDEPTHBUF_EXT\":\"\",(n.extensionShaderTextureLOD||n.envMap)&&n.rendererExtensionShaderTextureLod?\"#define TEXTURE_LOD_EXT\":\"\",\"uniform mat4 viewMatrix;\",\"uniform vec3 cameraPosition;\",\"uniform bool isOrthographic;\",n.toneMapping!==J?\"#define TONE_MAPPING\":\"\",n.toneMapping!==J?Ui.tonemapping_pars_fragment:\"\",n.toneMapping!==J?Po(\"toneMapping\",n.toneMapping):\"\",n.dithering?\"#define DITHERING\":\"\",n.format===Ot?\"#define OPAQUE\":\"\",Ui.encodings_pars_fragment,n.map?$o(\"mapTexelToLinear\",n.mapEncoding):\"\",n.matcap?$o(\"matcapTexelToLinear\",n.matcapEncoding):\"\",n.envMap?$o(\"envMapTexelToLinear\",n.envMapEncoding):\"\",n.emissiveMap?$o(\"emissiveMapTexelToLinear\",n.emissiveMapEncoding):\"\",n.specularTintMap?$o(\"specularTintMapTexelToLinear\",n.specularTintMapEncoding):\"\",n.lightMap?$o(\"lightMapTexelToLinear\",n.lightMapEncoding):\"\",Oo(\"linearToOutputTexel\",n.outputEncoding),n.depthPacking?\"#define DEPTH_PACKING \"+n.depthPacking:\"\",\"\\n\"].filter(zo).join(\"\\n\")),a=Wo(a),a=Bo(a,n),a=Uo(a,n),o=Wo(o),o=Bo(o,n),o=Uo(o,n),a=qo(a),o=qo(o),n.isWebGL2&&!0!==n.isRawShaderMaterial&&(w=\"#version 300 es\\n\",b=[\"#define attribute in\",\"#define varying out\",\"#define texture2D texture\"].join(\"\\n\")+\"\\n\"+b,v=[\"#define varying in\",n.glslVersion===Fn?\"\":\"out highp vec4 pc_fragColor;\",n.glslVersion===Fn?\"\":\"#define gl_FragColor pc_fragColor\",\"#define gl_FragDepthEXT gl_FragDepth\",\"#define texture2D texture\",\"#define textureCube texture\",\"#define texture2DProj textureProj\",\"#define texture2DLodEXT textureLod\",\"#define texture2DProjLodEXT textureProjLod\",\"#define textureCubeLodEXT textureLod\",\"#define texture2DGradEXT textureGrad\",\"#define texture2DProjGradEXT textureProjGrad\",\"#define textureCubeGradEXT textureGrad\"].join(\"\\n\")+\"\\n\"+v);const S=w+v+o,T=Ro(s,35633,w+b+a),_=Ro(s,35632,S);if(s.attachShader(x,T),s.attachShader(x,_),void 0!==n.index0AttributeName?s.bindAttribLocation(x,0,n.index0AttributeName):!0===n.morphTargets&&s.bindAttribLocation(x,0,\"position\"),s.linkProgram(x),t.debug.checkShaderErrors){const t=s.getProgramInfoLog(x).trim(),e=s.getShaderInfoLog(T).trim(),n=s.getShaderInfoLog(_).trim();let r=!0,i=!0;if(!1===s.getProgramParameter(x,35714)){r=!1;const e=Fo(s,T,\"vertex\"),n=Fo(s,_,\"fragment\");console.error(\"THREE.WebGLProgram: Shader Error \"+s.getError()+\" - VALIDATE_STATUS \"+s.getProgramParameter(x,35715)+\"\\n\\nProgram Info Log: \"+t+\"\\n\"+e+\"\\n\"+n)}else\"\"!==t?console.warn(\"THREE.WebGLProgram: Program Info Log:\",t):\"\"!==e&&\"\"!==n||(i=!1);i&&(this.diagnostics={runnable:r,programLog:t,vertexShader:{log:e,prefix:b},fragmentShader:{log:n,prefix:v}})}let M,k;return s.deleteShader(T),s.deleteShader(_),this.getUniforms=function(){return void 0===M&&(M=new Ao(s,x)),M},this.getAttributes=function(){return void 0===k&&(k=function(t,e){const n={},r=t.getProgramParameter(e,35721);for(let s=0;s<r;s++){const r=t.getActiveAttrib(e,s),i=r.name;let a=1;35674===r.type&&(a=2),35675===r.type&&(a=3),35676===r.type&&(a=4),n[i]={type:r.type,location:t.getAttribLocation(e,i),locationSize:a}}return n}(s,x)),k},this.destroy=function(){r.releaseStatesOfProgram(this),s.deleteProgram(x),this.program=void 0},this.name=n.shaderName,this.id=Lo++,this.cacheKey=e,this.usedTimes=1,this.program=x,this.vertexShader=T,this.fragmentShader=_,this}function Jo(t,e,n,r,s,i,a){const o=[],l=s.isWebGL2,u=s.logarithmicDepthBuffer,c=s.floatVertexTextures,h=s.maxVertexUniforms,d=s.vertexTextures;let p=s.precision;const f={MeshDepthMaterial:\"depth\",MeshDistanceMaterial:\"distanceRGBA\",MeshNormalMaterial:\"normal\",MeshBasicMaterial:\"basic\",MeshLambertMaterial:\"lambert\",MeshPhongMaterial:\"phong\",MeshToonMaterial:\"toon\",MeshStandardMaterial:\"physical\",MeshPhysicalMaterial:\"physical\",MeshMatcapMaterial:\"matcap\",LineBasicMaterial:\"basic\",LineDashedMaterial:\"dashed\",PointsMaterial:\"points\",ShadowMaterial:\"shadow\",SpriteMaterial:\"sprite\"},y=[\"precision\",\"isWebGL2\",\"supportsVertexTextures\",\"outputEncoding\",\"instancing\",\"instancingColor\",\"map\",\"mapEncoding\",\"matcap\",\"matcapEncoding\",\"envMap\",\"envMapMode\",\"envMapEncoding\",\"envMapCubeUV\",\"lightMap\",\"lightMapEncoding\",\"aoMap\",\"emissiveMap\",\"emissiveMapEncoding\",\"bumpMap\",\"normalMap\",\"objectSpaceNormalMap\",\"tangentSpaceNormalMap\",\"clearcoat\",\"clearcoatMap\",\"clearcoatRoughnessMap\",\"clearcoatNormalMap\",\"displacementMap\",\"specularMap\",\"specularIntensityMap\",\"specularTintMap\",\"specularTintMapEncoding\",\"roughnessMap\",\"metalnessMap\",\"gradientMap\",\"alphaMap\",\"alphaTest\",\"combine\",\"vertexColors\",\"vertexAlphas\",\"vertexTangents\",\"vertexUvs\",\"uvsVertexOnly\",\"fog\",\"useFog\",\"fogExp2\",\"flatShading\",\"sizeAttenuation\",\"logarithmicDepthBuffer\",\"skinning\",\"maxBones\",\"useVertexTexture\",\"morphTargets\",\"morphNormals\",\"premultipliedAlpha\",\"numDirLights\",\"numPointLights\",\"numSpotLights\",\"numHemiLights\",\"numRectAreaLights\",\"numDirLightShadows\",\"numPointLightShadows\",\"numSpotLightShadows\",\"shadowMapEnabled\",\"shadowMapType\",\"toneMapping\",\"physicallyCorrectLights\",\"doubleSided\",\"flipSided\",\"numClippingPlanes\",\"numClipIntersection\",\"depthPacking\",\"dithering\",\"format\",\"sheenTint\",\"transmission\",\"transmissionMap\",\"thicknessMap\"];function x(t){let e;return t&&t.isTexture?e=t.encoding:t&&t.isWebGLRenderTarget?(console.warn(\"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\"),e=t.texture.encoding):e=Ye,e}return{getParameters:function(i,o,y,b,v){const w=b.fog,S=i.isMeshStandardMaterial?b.environment:null,T=(i.isMeshStandardMaterial?n:e).get(i.envMap||S),_=f[i.type],M=v.isSkinnedMesh?function(t){const e=t.skeleton.bones;if(c)return 1024;{const t=h,n=Math.floor((t-20)/4),r=Math.min(n,e.length);return r<e.length?(console.warn(\"THREE.WebGLRenderer: Skeleton has \"+e.length+\" bones. This GPU supports \"+r+\".\"),0):r}}(v):0;let k,E;if(null!==i.precision&&(p=s.getMaxPrecision(i.precision),p!==i.precision&&console.warn(\"THREE.WebGLProgram.getParameters:\",i.precision,\"not supported, using\",p,\"instead.\")),_){const t=Wi[_];k=t.vertexShader,E=t.fragmentShader}else k=i.vertexShader,E=i.fragmentShader;const I=t.getRenderTarget(),C=i.alphaTest>0,N=i.clearcoat>0;return{isWebGL2:l,shaderID:_,shaderName:i.type,vertexShader:k,fragmentShader:E,defines:i.defines,isRawShaderMaterial:!0===i.isRawShaderMaterial,glslVersion:i.glslVersion,precision:p,instancing:!0===v.isInstancedMesh,instancingColor:!0===v.isInstancedMesh&&null!==v.instanceColor,supportsVertexTextures:d,outputEncoding:null!==I?x(I.texture):t.outputEncoding,map:!!i.map,mapEncoding:x(i.map),matcap:!!i.matcap,matcapEncoding:x(i.matcap),envMap:!!T,envMapMode:T&&T.mapping,envMapEncoding:x(T),envMapCubeUV:!!T&&(T.mapping===ut||T.mapping===ct),lightMap:!!i.lightMap,lightMapEncoding:x(i.lightMap),aoMap:!!i.aoMap,emissiveMap:!!i.emissiveMap,emissiveMapEncoding:x(i.emissiveMap),bumpMap:!!i.bumpMap,normalMap:!!i.normalMap,objectSpaceNormalMap:i.normalMapType===ln,tangentSpaceNormalMap:i.normalMapType===on,clearcoat:N,clearcoatMap:N&&!!i.clearcoatMap,clearcoatRoughnessMap:N&&!!i.clearcoatRoughnessMap,clearcoatNormalMap:N&&!!i.clearcoatNormalMap,displacementMap:!!i.displacementMap,roughnessMap:!!i.roughnessMap,metalnessMap:!!i.metalnessMap,specularMap:!!i.specularMap,specularIntensityMap:!!i.specularIntensityMap,specularTintMap:!!i.specularTintMap,specularTintMapEncoding:x(i.specularTintMap),alphaMap:!!i.alphaMap,alphaTest:C,gradientMap:!!i.gradientMap,sheenTint:!!i.sheenTint&&(i.sheenTint.r>0||i.sheenTint.g>0||i.sheenTint.b>0),transmission:i.transmission>0,transmissionMap:!!i.transmissionMap,thicknessMap:!!i.thicknessMap,combine:i.combine,vertexTangents:!!i.normalMap&&!!v.geometry&&!!v.geometry.attributes.tangent,vertexColors:i.vertexColors,vertexAlphas:!0===i.vertexColors&&!!v.geometry&&!!v.geometry.attributes.color&&4===v.geometry.attributes.color.itemSize,vertexUvs:!!(i.map||i.bumpMap||i.normalMap||i.specularMap||i.alphaMap||i.emissiveMap||i.roughnessMap||i.metalnessMap||i.clearcoatMap||i.clearcoatRoughnessMap||i.clearcoatNormalMap||i.displacementMap||i.transmissionMap||i.thicknessMap||i.specularIntensityMap||i.specularTintMap),uvsVertexOnly:!(i.map||i.bumpMap||i.normalMap||i.specularMap||i.alphaMap||i.emissiveMap||i.roughnessMap||i.metalnessMap||i.clearcoatNormalMap||i.transmission>0||i.transmissionMap||i.thicknessMap||i.specularIntensityMap||i.specularTintMap||!i.displacementMap),fog:!!w,useFog:i.fog,fogExp2:w&&w.isFogExp2,flatShading:!!i.flatShading,sizeAttenuation:i.sizeAttenuation,logarithmicDepthBuffer:u,skinning:!0===v.isSkinnedMesh&&M>0,maxBones:M,useVertexTexture:c,morphTargets:!!v.geometry&&!!v.geometry.morphAttributes.position,morphNormals:!!v.geometry&&!!v.geometry.morphAttributes.normal,numDirLights:o.directional.length,numPointLights:o.point.length,numSpotLights:o.spot.length,numRectAreaLights:o.rectArea.length,numHemiLights:o.hemi.length,numDirLightShadows:o.directionalShadowMap.length,numPointLightShadows:o.pointShadowMap.length,numSpotLightShadows:o.spotShadowMap.length,numClippingPlanes:a.numPlanes,numClipIntersection:a.numIntersection,format:i.format,dithering:i.dithering,shadowMapEnabled:t.shadowMap.enabled&&y.length>0,shadowMapType:t.shadowMap.type,toneMapping:i.toneMapped?t.toneMapping:J,physicallyCorrectLights:t.physicallyCorrectLights,premultipliedAlpha:i.premultipliedAlpha,doubleSided:i.side===g,flipSided:i.side===m,depthPacking:void 0!==i.depthPacking&&i.depthPacking,index0AttributeName:i.index0AttributeName,extensionDerivatives:i.extensions&&i.extensions.derivatives,extensionFragDepth:i.extensions&&i.extensions.fragDepth,extensionDrawBuffers:i.extensions&&i.extensions.drawBuffers,extensionShaderTextureLOD:i.extensions&&i.extensions.shaderTextureLOD,rendererExtensionFragDepth:l||r.has(\"EXT_frag_depth\"),rendererExtensionDrawBuffers:l||r.has(\"WEBGL_draw_buffers\"),rendererExtensionShaderTextureLod:l||r.has(\"EXT_shader_texture_lod\"),customProgramCacheKey:i.customProgramCacheKey()}},getProgramCacheKey:function(e){const n=[];if(e.shaderID?n.push(e.shaderID):(n.push(e.fragmentShader),n.push(e.vertexShader)),void 0!==e.defines)for(const t in e.defines)n.push(t),n.push(e.defines[t]);if(!1===e.isRawShaderMaterial){for(let t=0;t<y.length;t++)n.push(e[y[t]]);n.push(t.outputEncoding),n.push(t.gammaFactor)}return n.push(e.customProgramCacheKey),n.join()},getUniforms:function(t){const e=f[t.type];let n;if(e){const t=Wi[e];n=Ti.clone(t.uniforms)}else n=t.uniforms;return n},acquireProgram:function(e,n){let r;for(let t=0,e=o.length;t<e;t++){const e=o[t];if(e.cacheKey===n){r=e,++r.usedTimes;break}}return void 0===r&&(r=new Zo(t,n,e,i),o.push(r)),r},releaseProgram:function(t){if(0==--t.usedTimes){const e=o.indexOf(t);o[e]=o[o.length-1],o.pop(),t.destroy()}},programs:o}}function Qo(){let t=new WeakMap;return{get:function(e){let n=t.get(e);return void 0===n&&(n={},t.set(e,n)),n},remove:function(e){t.delete(e)},update:function(e,n,r){t.get(e)[n]=r},dispose:function(){t=new WeakMap}}}function tl(t,e){return t.groupOrder!==e.groupOrder?t.groupOrder-e.groupOrder:t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.program!==e.program?t.program.id-e.program.id:t.material.id!==e.material.id?t.material.id-e.material.id:t.z!==e.z?t.z-e.z:t.id-e.id}function el(t,e){return t.groupOrder!==e.groupOrder?t.groupOrder-e.groupOrder:t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.z!==e.z?e.z-t.z:t.id-e.id}function nl(t){const e=[];let n=0;const r=[],s=[],i=[],a={id:-1};function o(r,s,i,o,l,u){let c=e[n];const h=t.get(i);return void 0===c?(c={id:r.id,object:r,geometry:s,material:i,program:h.program||a,groupOrder:o,renderOrder:r.renderOrder,z:l,group:u},e[n]=c):(c.id=r.id,c.object=r,c.geometry=s,c.material=i,c.program=h.program||a,c.groupOrder=o,c.renderOrder=r.renderOrder,c.z=l,c.group=u),n++,c}return{opaque:r,transmissive:s,transparent:i,init:function(){n=0,r.length=0,s.length=0,i.length=0},push:function(t,e,n,a,l,u){const c=o(t,e,n,a,l,u);n.transmission>0?s.push(c):!0===n.transparent?i.push(c):r.push(c)},unshift:function(t,e,n,a,l,u){const c=o(t,e,n,a,l,u);n.transmission>0?s.unshift(c):!0===n.transparent?i.unshift(c):r.unshift(c)},finish:function(){for(let t=n,r=e.length;t<r;t++){const n=e[t];if(null===n.id)break;n.id=null,n.object=null,n.geometry=null,n.material=null,n.program=null,n.group=null}},sort:function(t,e){r.length>1&&r.sort(t||tl),s.length>1&&s.sort(e||el),i.length>1&&i.sort(e||el)}}}function rl(t){let e=new WeakMap;return{get:function(n,r){let s;return!1===e.has(n)?(s=new nl(t),e.set(n,[s])):r>=e.get(n).length?(s=new nl(t),e.get(n).push(s)):s=e.get(n)[r],s},dispose:function(){e=new WeakMap}}}function sl(){const t={};return{get:function(e){if(void 0!==t[e.id])return t[e.id];let n;switch(e.type){case\"DirectionalLight\":n={direction:new or,color:new Cs};break;case\"SpotLight\":n={position:new or,direction:new or,color:new Cs,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case\"PointLight\":n={position:new or,color:new Cs,distance:0,decay:0};break;case\"HemisphereLight\":n={direction:new or,skyColor:new Cs,groundColor:new Cs};break;case\"RectAreaLight\":n={color:new Cs,position:new or,halfWidth:new or,halfHeight:new or}}return t[e.id]=n,n}}}let il=0;function al(t,e){return(e.castShadow?1:0)-(t.castShadow?1:0)}function ol(t,e){const n=new sl,r=function(){const t={};return{get:function(e){if(void 0!==t[e.id])return t[e.id];let n;switch(e.type){case\"DirectionalLight\":case\"SpotLight\":n={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Kn};break;case\"PointLight\":n={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Kn,shadowCameraNear:1,shadowCameraFar:1e3}}return t[e.id]=n,n}}}(),s={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadow:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]};for(let t=0;t<9;t++)s.probe.push(new or);const i=new or,a=new Pr,o=new Pr;return{setup:function(i,a){let o=0,l=0,u=0;for(let t=0;t<9;t++)s.probe[t].set(0,0,0);let c=0,h=0,d=0,p=0,f=0,m=0,g=0,y=0;i.sort(al);const x=!0!==a?Math.PI:1;for(let t=0,e=i.length;t<e;t++){const e=i[t],a=e.color,b=e.intensity,v=e.distance,w=e.shadow&&e.shadow.map?e.shadow.map.texture:null;if(e.isAmbientLight)o+=a.r*b*x,l+=a.g*b*x,u+=a.b*b*x;else if(e.isLightProbe)for(let t=0;t<9;t++)s.probe[t].addScaledVector(e.sh.coefficients[t],b);else if(e.isDirectionalLight){const t=n.get(e);if(t.color.copy(e.color).multiplyScalar(e.intensity*x),e.castShadow){const t=e.shadow,n=r.get(e);n.shadowBias=t.bias,n.shadowNormalBias=t.normalBias,n.shadowRadius=t.radius,n.shadowMapSize=t.mapSize,s.directionalShadow[c]=n,s.directionalShadowMap[c]=w,s.directionalShadowMatrix[c]=e.shadow.matrix,m++}s.directional[c]=t,c++}else if(e.isSpotLight){const t=n.get(e);if(t.position.setFromMatrixPosition(e.matrixWorld),t.color.copy(a).multiplyScalar(b*x),t.distance=v,t.coneCos=Math.cos(e.angle),t.penumbraCos=Math.cos(e.angle*(1-e.penumbra)),t.decay=e.decay,e.castShadow){const t=e.shadow,n=r.get(e);n.shadowBias=t.bias,n.shadowNormalBias=t.normalBias,n.shadowRadius=t.radius,n.shadowMapSize=t.mapSize,s.spotShadow[d]=n,s.spotShadowMap[d]=w,s.spotShadowMatrix[d]=e.shadow.matrix,y++}s.spot[d]=t,d++}else if(e.isRectAreaLight){const t=n.get(e);t.color.copy(a).multiplyScalar(b),t.halfWidth.set(.5*e.width,0,0),t.halfHeight.set(0,.5*e.height,0),s.rectArea[p]=t,p++}else if(e.isPointLight){const t=n.get(e);if(t.color.copy(e.color).multiplyScalar(e.intensity*x),t.distance=e.distance,t.decay=e.decay,e.castShadow){const t=e.shadow,n=r.get(e);n.shadowBias=t.bias,n.shadowNormalBias=t.normalBias,n.shadowRadius=t.radius,n.shadowMapSize=t.mapSize,n.shadowCameraNear=t.camera.near,n.shadowCameraFar=t.camera.far,s.pointShadow[h]=n,s.pointShadowMap[h]=w,s.pointShadowMatrix[h]=e.shadow.matrix,g++}s.point[h]=t,h++}else if(e.isHemisphereLight){const t=n.get(e);t.skyColor.copy(e.color).multiplyScalar(b*x),t.groundColor.copy(e.groundColor).multiplyScalar(b*x),s.hemi[f]=t,f++}}p>0&&(e.isWebGL2||!0===t.has(\"OES_texture_float_linear\")?(s.rectAreaLTC1=Vi.LTC_FLOAT_1,s.rectAreaLTC2=Vi.LTC_FLOAT_2):!0===t.has(\"OES_texture_half_float_linear\")?(s.rectAreaLTC1=Vi.LTC_HALF_1,s.rectAreaLTC2=Vi.LTC_HALF_2):console.error(\"THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.\")),s.ambient[0]=o,s.ambient[1]=l,s.ambient[2]=u;const b=s.hash;b.directionalLength===c&&b.pointLength===h&&b.spotLength===d&&b.rectAreaLength===p&&b.hemiLength===f&&b.numDirectionalShadows===m&&b.numPointShadows===g&&b.numSpotShadows===y||(s.directional.length=c,s.spot.length=d,s.rectArea.length=p,s.point.length=h,s.hemi.length=f,s.directionalShadow.length=m,s.directionalShadowMap.length=m,s.pointShadow.length=g,s.pointShadowMap.length=g,s.spotShadow.length=y,s.spotShadowMap.length=y,s.directionalShadowMatrix.length=m,s.pointShadowMatrix.length=g,s.spotShadowMatrix.length=y,b.directionalLength=c,b.pointLength=h,b.spotLength=d,b.rectAreaLength=p,b.hemiLength=f,b.numDirectionalShadows=m,b.numPointShadows=g,b.numSpotShadows=y,s.version=il++)},setupView:function(t,e){let n=0,r=0,l=0,u=0,c=0;const h=e.matrixWorldInverse;for(let e=0,d=t.length;e<d;e++){const d=t[e];if(d.isDirectionalLight){const t=s.directional[n];t.direction.setFromMatrixPosition(d.matrixWorld),i.setFromMatrixPosition(d.target.matrixWorld),t.direction.sub(i),t.direction.transformDirection(h),n++}else if(d.isSpotLight){const t=s.spot[l];t.position.setFromMatrixPosition(d.matrixWorld),t.position.applyMatrix4(h),t.direction.setFromMatrixPosition(d.matrixWorld),i.setFromMatrixPosition(d.target.matrixWorld),t.direction.sub(i),t.direction.transformDirection(h),l++}else if(d.isRectAreaLight){const t=s.rectArea[u];t.position.setFromMatrixPosition(d.matrixWorld),t.position.applyMatrix4(h),o.identity(),a.copy(d.matrixWorld),a.premultiply(h),o.extractRotation(a),t.halfWidth.set(.5*d.width,0,0),t.halfHeight.set(0,.5*d.height,0),t.halfWidth.applyMatrix4(o),t.halfHeight.applyMatrix4(o),u++}else if(d.isPointLight){const t=s.point[r];t.position.setFromMatrixPosition(d.matrixWorld),t.position.applyMatrix4(h),r++}else if(d.isHemisphereLight){const t=s.hemi[c];t.direction.setFromMatrixPosition(d.matrixWorld),t.direction.transformDirection(h),t.direction.normalize(),c++}}},state:s}}function ll(t,e){const n=new ol(t,e),r=[],s=[];return{init:function(){r.length=0,s.length=0},state:{lightsArray:r,shadowsArray:s,lights:n},setupLights:function(t){n.setup(r,t)},setupLightsView:function(t){n.setupView(r,t)},pushLight:function(t){r.push(t)},pushShadow:function(t){s.push(t)}}}function ul(t,e){let n=new WeakMap;return{get:function(r,s=0){let i;return!1===n.has(r)?(i=new ll(t,e),n.set(r,[i])):s>=n.get(r).length?(i=new ll(t,e),n.get(r).push(i)):i=n.get(r)[s],i},dispose:function(){n=new WeakMap}}}class cl extends Ss{constructor(t){super(),this.type=\"MeshDepthMaterial\",this.depthPacking=sn,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.setValues(t)}copy(t){return super.copy(t),this.depthPacking=t.depthPacking,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this}}cl.prototype.isMeshDepthMaterial=!0;class hl extends Ss{constructor(t){super(),this.type=\"MeshDistanceMaterial\",this.referencePosition=new or,this.nearDistance=1,this.farDistance=1e3,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.fog=!1,this.setValues(t)}copy(t){return super.copy(t),this.referencePosition.copy(t.referencePosition),this.nearDistance=t.nearDistance,this.farDistance=t.farDistance,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this}}function dl(t,e,n){let r=new Oi;const s=new Kn,i=new Kn,a=new nr,o=new cl({depthPacking:an}),l=new hl,u={},c=n.maxTextureSize,d={0:m,1:f,2:g},y=new _i({uniforms:{shadow_pass:{value:null},resolution:{value:new Kn},radius:{value:4},samples:{value:8}},vertexShader:\"void main() {\\n\\tgl_Position = vec4( position, 1.0 );\\n}\",fragmentShader:\"uniform sampler2D shadow_pass;\\nuniform vec2 resolution;\\nuniform float radius;\\nuniform float samples;\\n#include <packing>\\nvoid main() {\\n\\tfloat mean = 0.0;\\n\\tfloat squared_mean = 0.0;\\n\\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\\n\\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\\n\\tfor ( float i = 0.0; i < samples; i ++ ) {\\n\\t\\tfloat uvOffset = uvStart + i * uvStride;\\n\\t\\t#ifdef HORIZONTAL_PASS\\n\\t\\t\\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\\n\\t\\t\\tmean += distribution.x;\\n\\t\\t\\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\\n\\t\\t#else\\n\\t\\t\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\\n\\t\\t\\tmean += depth;\\n\\t\\t\\tsquared_mean += depth * depth;\\n\\t\\t#endif\\n\\t}\\n\\tmean = mean / samples;\\n\\tsquared_mean = squared_mean / samples;\\n\\tfloat std_dev = sqrt( squared_mean - mean * mean );\\n\\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\\n}\"}),x=y.clone();x.defines.HORIZONTAL_PASS=1;const v=new ti;v.setAttribute(\"position\",new Ls(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const w=new xi(v,y),S=this;function T(n,r){const s=e.update(w);y.uniforms.shadow_pass.value=n.map.texture,y.uniforms.resolution.value=n.mapSize,y.uniforms.radius.value=n.radius,y.uniforms.samples.value=n.blurSamples,t.setRenderTarget(n.mapPass),t.clear(),t.renderBufferDirect(r,null,s,y,w,null),x.uniforms.shadow_pass.value=n.mapPass.texture,x.uniforms.resolution.value=n.mapSize,x.uniforms.radius.value=n.radius,x.uniforms.samples.value=n.blurSamples,t.setRenderTarget(n.map),t.clear(),t.renderBufferDirect(r,null,s,x,w,null)}function _(e,n,r,s,i,a,c){let h=null;const f=!0===s.isPointLight?e.customDistanceMaterial:e.customDepthMaterial;if(h=void 0!==f?f:!0===s.isPointLight?l:o,t.localClippingEnabled&&!0===r.clipShadows&&0!==r.clippingPlanes.length||r.displacementMap&&0!==r.displacementScale||r.alphaMap&&r.alphaTest>0){const t=h.uuid,e=r.uuid;let n=u[t];void 0===n&&(n={},u[t]=n);let s=n[e];void 0===s&&(s=h.clone(),n[e]=s),h=s}return h.visible=r.visible,h.wireframe=r.wireframe,h.side=c===p?null!==r.shadowSide?r.shadowSide:r.side:null!==r.shadowSide?r.shadowSide:d[r.side],h.alphaMap=r.alphaMap,h.alphaTest=r.alphaTest,h.clipShadows=r.clipShadows,h.clippingPlanes=r.clippingPlanes,h.clipIntersection=r.clipIntersection,h.displacementMap=r.displacementMap,h.displacementScale=r.displacementScale,h.displacementBias=r.displacementBias,h.wireframeLinewidth=r.wireframeLinewidth,h.linewidth=r.linewidth,!0===s.isPointLight&&!0===h.isMeshDistanceMaterial&&(h.referencePosition.setFromMatrixPosition(s.matrixWorld),h.nearDistance=i,h.farDistance=a),h}function M(n,s,i,a,o){if(!1===n.visible)return;if(n.layers.test(s.layers)&&(n.isMesh||n.isLine||n.isPoints)&&(n.castShadow||n.receiveShadow&&o===p)&&(!n.frustumCulled||r.intersectsObject(n))){n.modelViewMatrix.multiplyMatrices(i.matrixWorldInverse,n.matrixWorld);const r=e.update(n),s=n.material;if(Array.isArray(s)){const e=r.groups;for(let l=0,u=e.length;l<u;l++){const u=e[l],c=s[u.materialIndex];if(c&&c.visible){const e=_(n,0,c,a,i.near,i.far,o);t.renderBufferDirect(i,null,r,e,n,u)}}}else if(s.visible){const e=_(n,0,s,a,i.near,i.far,o);t.renderBufferDirect(i,null,r,e,n,null)}}const l=n.children;for(let t=0,e=l.length;t<e;t++)M(l[t],s,i,a,o)}this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=h,this.render=function(e,n,o){if(!1===S.enabled)return;if(!1===S.autoUpdate&&!1===S.needsUpdate)return;if(0===e.length)return;const l=t.getRenderTarget(),u=t.getActiveCubeFace(),h=t.getActiveMipmapLevel(),d=t.state;d.setBlending(b),d.buffers.color.setClear(1,1,1,1),d.buffers.depth.setTest(!0),d.setScissorTest(!1);for(let l=0,u=e.length;l<u;l++){const u=e[l],h=u.shadow;if(void 0===h){console.warn(\"THREE.WebGLShadowMap:\",u,\"has no shadow.\");continue}if(!1===h.autoUpdate&&!1===h.needsUpdate)continue;s.copy(h.mapSize);const f=h.getFrameExtents();if(s.multiply(f),i.copy(h.mapSize),(s.x>c||s.y>c)&&(s.x>c&&(i.x=Math.floor(c/f.x),s.x=i.x*f.x,h.mapSize.x=i.x),s.y>c&&(i.y=Math.floor(c/f.y),s.y=i.y*f.y,h.mapSize.y=i.y)),null===h.map&&!h.isPointLightShadow&&this.type===p){const t={minFilter:bt,magFilter:bt,format:Pt};h.map=new rr(s.x,s.y,t),h.map.texture.name=u.name+\".shadowMap\",h.mapPass=new rr(s.x,s.y,t),h.camera.updateProjectionMatrix()}if(null===h.map){const t={minFilter:ft,magFilter:ft,format:Pt};h.map=new rr(s.x,s.y,t),h.map.texture.name=u.name+\".shadowMap\",h.camera.updateProjectionMatrix()}t.setRenderTarget(h.map),t.clear();const m=h.getViewportCount();for(let t=0;t<m;t++){const e=h.getViewport(t);a.set(i.x*e.x,i.y*e.y,i.x*e.z,i.y*e.w),d.viewport(a),h.updateMatrices(u,t),r=h.getFrustum(),M(n,o,h.camera,u,this.type)}h.isPointLightShadow||this.type!==p||T(h,o),h.needsUpdate=!1}S.needsUpdate=!1,t.setRenderTarget(l,u,h)}}function pl(t,e,n){const r=n.isWebGL2,s=new function(){let e=!1;const n=new nr;let r=null;const s=new nr(0,0,0,0);return{setMask:function(n){r===n||e||(t.colorMask(n,n,n,n),r=n)},setLocked:function(t){e=t},setClear:function(e,r,i,a,o){!0===o&&(e*=a,r*=a,i*=a),n.set(e,r,i,a),!1===s.equals(n)&&(t.clearColor(e,r,i,a),s.copy(n))},reset:function(){e=!1,r=null,s.set(-1,0,0,0)}}},i=new function(){let e=!1,n=null,r=null,s=null;return{setTest:function(t){t?xt(2929):bt(2929)},setMask:function(r){n===r||e||(t.depthMask(r),n=r)},setFunc:function(e){if(r!==e){if(e)switch(e){case U:t.depthFunc(512);break;case V:t.depthFunc(519);break;case W:t.depthFunc(513);break;case G:t.depthFunc(515);break;case H:t.depthFunc(514);break;case j:t.depthFunc(518);break;case q:t.depthFunc(516);break;case X:t.depthFunc(517);break;default:t.depthFunc(515)}else t.depthFunc(515);r=e}},setLocked:function(t){e=t},setClear:function(e){s!==e&&(t.clearDepth(e),s=e)},reset:function(){e=!1,n=null,r=null,s=null}}},u=new function(){let e=!1,n=null,r=null,s=null,i=null,a=null,o=null,l=null,u=null;return{setTest:function(t){e||(t?xt(2960):bt(2960))},setMask:function(r){n===r||e||(t.stencilMask(r),n=r)},setFunc:function(e,n,a){r===e&&s===n&&i===a||(t.stencilFunc(e,n,a),r=e,s=n,i=a)},setOp:function(e,n,r){a===e&&o===n&&l===r||(t.stencilOp(e,n,r),a=e,o=n,l=r)},setLocked:function(t){e=t},setClear:function(e){u!==e&&(t.clearStencil(e),u=e)},reset:function(){e=!1,n=null,r=null,s=null,i=null,a=null,o=null,l=null,u=null}}};let c={},h=null,d={},p=null,f=!1,y=null,x=null,K=null,Y=null,Z=null,J=null,Q=null,tt=!1,et=null,nt=null,rt=null,st=null,it=null;const at=t.getParameter(35661);let ot=!1,lt=0;const ut=t.getParameter(7938);-1!==ut.indexOf(\"WebGL\")?(lt=parseFloat(/^WebGL (\\d)/.exec(ut)[1]),ot=lt>=1):-1!==ut.indexOf(\"OpenGL ES\")&&(lt=parseFloat(/^OpenGL ES (\\d)/.exec(ut)[1]),ot=lt>=2);let ct=null,ht={};const dt=t.getParameter(3088),pt=t.getParameter(2978),ft=(new nr).fromArray(dt),mt=(new nr).fromArray(pt);function gt(e,n,r){const s=new Uint8Array(4),i=t.createTexture();t.bindTexture(e,i),t.texParameteri(e,10241,9728),t.texParameteri(e,10240,9728);for(let e=0;e<r;e++)t.texImage2D(n+e,0,6408,1,1,0,6408,5121,s);return i}const yt={};function xt(e){!0!==c[e]&&(t.enable(e),c[e]=!0)}function bt(e){!1!==c[e]&&(t.disable(e),c[e]=!1)}yt[3553]=gt(3553,3553,1),yt[34067]=gt(34067,34069,6),s.setClear(0,0,0,1),i.setClear(1),u.setClear(0),xt(2929),i.setFunc(G),Tt(!1),_t(o),xt(2884),St(b);const vt={[M]:32774,[k]:32778,[E]:32779};if(r)vt[I]=32775,vt[C]=32776;else{const t=e.get(\"EXT_blend_minmax\");null!==t&&(vt[I]=t.MIN_EXT,vt[C]=t.MAX_EXT)}const wt={[N]:0,[A]:1,[R]:768,[D]:770,[B]:776,[P]:774,[$]:772,[L]:769,[F]:771,[z]:775,[O]:773};function St(e,n,r,s,i,a,o,l){if(e!==b){if(!1===f&&(xt(3042),f=!0),e===_)i=i||n,a=a||r,o=o||s,n===x&&i===Z||(t.blendEquationSeparate(vt[n],vt[i]),x=n,Z=i),r===K&&s===Y&&a===J&&o===Q||(t.blendFuncSeparate(wt[r],wt[s],wt[a],wt[o]),K=r,Y=s,J=a,Q=o),y=e,tt=null;else if(e!==y||l!==tt){if(x===M&&Z===M||(t.blendEquation(32774),x=M,Z=M),l)switch(e){case v:t.blendFuncSeparate(1,771,1,771);break;case w:t.blendFunc(1,1);break;case S:t.blendFuncSeparate(0,0,769,771);break;case T:t.blendFuncSeparate(0,768,0,770);break;default:console.error(\"THREE.WebGLState: Invalid blending: \",e)}else switch(e){case v:t.blendFuncSeparate(770,771,1,771);break;case w:t.blendFunc(770,1);break;case S:t.blendFunc(0,769);break;case T:t.blendFunc(0,768);break;default:console.error(\"THREE.WebGLState: Invalid blending: \",e)}K=null,Y=null,J=null,Q=null,y=e,tt=l}}else!0===f&&(bt(3042),f=!1)}function Tt(e){et!==e&&(e?t.frontFace(2304):t.frontFace(2305),et=e)}function _t(e){e!==a?(xt(2884),e!==nt&&(e===o?t.cullFace(1029):e===l?t.cullFace(1028):t.cullFace(1032))):bt(2884),nt=e}function Mt(e,n,r){e?(xt(32823),st===n&&it===r||(t.polygonOffset(n,r),st=n,it=r)):bt(32823)}function kt(e){void 0===e&&(e=33984+at-1),ct!==e&&(t.activeTexture(e),ct=e)}return{buffers:{color:s,depth:i,stencil:u},enable:xt,disable:bt,bindFramebuffer:function(e,n){return null===n&&null!==h&&(n=h),d[e]!==n&&(t.bindFramebuffer(e,n),d[e]=n,r&&(36009===e&&(d[36160]=n),36160===e&&(d[36009]=n)),!0)},bindXRFramebuffer:function(e){e!==h&&(t.bindFramebuffer(36160,e),h=e)},useProgram:function(e){return p!==e&&(t.useProgram(e),p=e,!0)},setBlending:St,setMaterial:function(t,e){t.side===g?bt(2884):xt(2884);let n=t.side===m;e&&(n=!n),Tt(n),t.blending===v&&!1===t.transparent?St(b):St(t.blending,t.blendEquation,t.blendSrc,t.blendDst,t.blendEquationAlpha,t.blendSrcAlpha,t.blendDstAlpha,t.premultipliedAlpha),i.setFunc(t.depthFunc),i.setTest(t.depthTest),i.setMask(t.depthWrite),s.setMask(t.colorWrite);const r=t.stencilWrite;u.setTest(r),r&&(u.setMask(t.stencilWriteMask),u.setFunc(t.stencilFunc,t.stencilRef,t.stencilFuncMask),u.setOp(t.stencilFail,t.stencilZFail,t.stencilZPass)),Mt(t.polygonOffset,t.polygonOffsetFactor,t.polygonOffsetUnits),!0===t.alphaToCoverage?xt(32926):bt(32926)},setFlipSided:Tt,setCullFace:_t,setLineWidth:function(e){e!==rt&&(ot&&t.lineWidth(e),rt=e)},setPolygonOffset:Mt,setScissorTest:function(t){t?xt(3089):bt(3089)},activeTexture:kt,bindTexture:function(e,n){null===ct&&kt();let r=ht[ct];void 0===r&&(r={type:void 0,texture:void 0},ht[ct]=r),r.type===e&&r.texture===n||(t.bindTexture(e,n||yt[e]),r.type=e,r.texture=n)},unbindTexture:function(){const e=ht[ct];void 0!==e&&void 0!==e.type&&(t.bindTexture(e.type,null),e.type=void 0,e.texture=void 0)},compressedTexImage2D:function(){try{t.compressedTexImage2D.apply(t,arguments)}catch(t){console.error(\"THREE.WebGLState:\",t)}},texImage2D:function(){try{t.texImage2D.apply(t,arguments)}catch(t){console.error(\"THREE.WebGLState:\",t)}},texImage3D:function(){try{t.texImage3D.apply(t,arguments)}catch(t){console.error(\"THREE.WebGLState:\",t)}},scissor:function(e){!1===ft.equals(e)&&(t.scissor(e.x,e.y,e.z,e.w),ft.copy(e))},viewport:function(e){!1===mt.equals(e)&&(t.viewport(e.x,e.y,e.z,e.w),mt.copy(e))},reset:function(){t.disable(3042),t.disable(2884),t.disable(2929),t.disable(32823),t.disable(3089),t.disable(2960),t.disable(32926),t.blendEquation(32774),t.blendFunc(1,0),t.blendFuncSeparate(1,0,1,0),t.colorMask(!0,!0,!0,!0),t.clearColor(0,0,0,0),t.depthMask(!0),t.depthFunc(513),t.clearDepth(1),t.stencilMask(4294967295),t.stencilFunc(519,0,4294967295),t.stencilOp(7680,7680,7680),t.clearStencil(0),t.cullFace(1029),t.frontFace(2305),t.polygonOffset(0,0),t.activeTexture(33984),t.bindFramebuffer(36160,null),!0===r&&(t.bindFramebuffer(36009,null),t.bindFramebuffer(36008,null)),t.useProgram(null),t.lineWidth(1),t.scissor(0,0,t.canvas.width,t.canvas.height),t.viewport(0,0,t.canvas.width,t.canvas.height),c={},ct=null,ht={},h=null,d={},p=null,f=!1,y=null,x=null,K=null,Y=null,Z=null,J=null,Q=null,tt=!1,et=null,nt=null,rt=null,st=null,it=null,ft.set(0,0,t.canvas.width,t.canvas.height),mt.set(0,0,t.canvas.width,t.canvas.height),s.reset(),i.reset(),u.reset()}}}function fl(t,e,n,r,s,i,a){const o=s.isWebGL2,l=s.maxTextures,u=s.maxCubemapSize,c=s.maxTextureSize,h=s.maxSamples,d=new WeakMap;let p,f=!1;try{f=\"undefined\"!=typeof OffscreenCanvas&&null!==new OffscreenCanvas(1,1).getContext(\"2d\")}catch(t){}function m(t,e){return f?new OffscreenCanvas(t,e):document.createElementNS(\"http://www.w3.org/1999/xhtml\",\"canvas\")}function g(t,e,n,r){let s=1;if((t.width>r||t.height>r)&&(s=r/Math.max(t.width,t.height)),s<1||!0===e){if(\"undefined\"!=typeof HTMLImageElement&&t instanceof HTMLImageElement||\"undefined\"!=typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement||\"undefined\"!=typeof ImageBitmap&&t instanceof ImageBitmap){const r=e?qn:Math.floor,i=r(s*t.width),a=r(s*t.height);void 0===p&&(p=m(i,a));const o=n?m(i,a):p;return o.width=i,o.height=a,o.getContext(\"2d\").drawImage(t,0,0,i,a),console.warn(\"THREE.WebGLRenderer: Texture has been resized from (\"+t.width+\"x\"+t.height+\") to (\"+i+\"x\"+a+\").\"),o}return\"data\"in t&&console.warn(\"THREE.WebGLRenderer: Image in DataTexture is too big (\"+t.width+\"x\"+t.height+\").\"),t}return t}function y(t){return Hn(t.width)&&Hn(t.height)}function x(t,e){return t.generateMipmaps&&e&&t.minFilter!==ft&&t.minFilter!==bt}function b(e,n,s,i,a=1){t.generateMipmap(e),r.get(n).__maxMipLevel=Math.log2(Math.max(s,i,a))}function v(n,r,s){if(!1===o)return r;if(null!==n){if(void 0!==t[n])return t[n];console.warn(\"THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '\"+n+\"'\")}let i=r;return 6403===r&&(5126===s&&(i=33326),5131===s&&(i=33325),5121===s&&(i=33321)),6407===r&&(5126===s&&(i=34837),5131===s&&(i=34843),5121===s&&(i=32849)),6408===r&&(5126===s&&(i=34836),5131===s&&(i=34842),5121===s&&(i=32856)),33325!==i&&33326!==i&&34842!==i&&34836!==i||e.get(\"EXT_color_buffer_float\"),i}function w(t){return t===ft||t===mt||t===yt?9728:9729}function S(e){const n=e.target;n.removeEventListener(\"dispose\",S),function(e){const n=r.get(e);void 0!==n.__webglInit&&(t.deleteTexture(n.__webglTexture),r.remove(e))}(n),n.isVideoTexture&&d.delete(n),a.memory.textures--}function T(e){const n=e.target;n.removeEventListener(\"dispose\",T),function(e){const n=e.texture,s=r.get(e),i=r.get(n);if(e){if(void 0!==i.__webglTexture&&(t.deleteTexture(i.__webglTexture),a.memory.textures--),e.depthTexture&&e.depthTexture.dispose(),e.isWebGLCubeRenderTarget)for(let e=0;e<6;e++)t.deleteFramebuffer(s.__webglFramebuffer[e]),s.__webglDepthbuffer&&t.deleteRenderbuffer(s.__webglDepthbuffer[e]);else t.deleteFramebuffer(s.__webglFramebuffer),s.__webglDepthbuffer&&t.deleteRenderbuffer(s.__webglDepthbuffer),s.__webglMultisampledFramebuffer&&t.deleteFramebuffer(s.__webglMultisampledFramebuffer),s.__webglColorRenderbuffer&&t.deleteRenderbuffer(s.__webglColorRenderbuffer),s.__webglDepthRenderbuffer&&t.deleteRenderbuffer(s.__webglDepthRenderbuffer);if(e.isWebGLMultipleRenderTargets)for(let e=0,s=n.length;e<s;e++){const s=r.get(n[e]);s.__webglTexture&&(t.deleteTexture(s.__webglTexture),a.memory.textures--),r.remove(n[e])}r.remove(n),r.remove(e)}}(n)}let _=0;function M(t,e){const s=r.get(t);if(t.isVideoTexture&&function(t){const e=a.render.frame;d.get(t)!==e&&(d.set(t,e),t.update())}(t),t.version>0&&s.__version!==t.version){const n=t.image;if(void 0===n)console.warn(\"THREE.WebGLRenderer: Texture marked for update but image is undefined\");else{if(!1!==n.complete)return void A(s,t,e);console.warn(\"THREE.WebGLRenderer: Texture marked for update but image is incomplete\")}}n.activeTexture(33984+e),n.bindTexture(3553,s.__webglTexture)}function k(e,s){const a=r.get(e);e.version>0&&a.__version!==e.version?function(e,r,s){if(6!==r.image.length)return;N(e,r),n.activeTexture(33984+s),n.bindTexture(34067,e.__webglTexture),t.pixelStorei(37440,r.flipY),t.pixelStorei(37441,r.premultiplyAlpha),t.pixelStorei(3317,r.unpackAlignment),t.pixelStorei(37443,0);const a=r&&(r.isCompressedTexture||r.image[0].isCompressedTexture),l=r.image[0]&&r.image[0].isDataTexture,c=[];for(let t=0;t<6;t++)c[t]=a||l?l?r.image[t].image:r.image[t]:g(r.image[t],!1,!0,u);const h=c[0],d=y(h)||o,p=i.convert(r.format),f=i.convert(r.type),m=v(r.internalFormat,p,f);let w;if(C(34067,r,d),a){for(let t=0;t<6;t++){w=c[t].mipmaps;for(let e=0;e<w.length;e++){const s=w[e];r.format!==Pt&&r.format!==Ot?null!==p?n.compressedTexImage2D(34069+t,e,m,s.width,s.height,0,s.data):console.warn(\"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()\"):n.texImage2D(34069+t,e,m,s.width,s.height,0,p,f,s.data)}}e.__maxMipLevel=w.length-1}else{w=r.mipmaps;for(let t=0;t<6;t++)if(l){n.texImage2D(34069+t,0,m,c[t].width,c[t].height,0,p,f,c[t].data);for(let e=0;e<w.length;e++){const r=w[e].image[t].image;n.texImage2D(34069+t,e+1,m,r.width,r.height,0,p,f,r.data)}}else{n.texImage2D(34069+t,0,m,p,f,c[t]);for(let e=0;e<w.length;e++){const r=w[e];n.texImage2D(34069+t,e+1,m,p,f,r.image[t])}}e.__maxMipLevel=w.length}x(r,d)&&b(34067,r,h.width,h.height),e.__version=r.version,r.onUpdate&&r.onUpdate(r)}(a,e,s):(n.activeTexture(33984+s),n.bindTexture(34067,a.__webglTexture))}const E={[ht]:10497,[dt]:33071,[pt]:33648},I={[ft]:9728,[mt]:9984,[yt]:9986,[bt]:9729,[vt]:9985,[St]:9987};function C(n,i,a){if(a?(t.texParameteri(n,10242,E[i.wrapS]),t.texParameteri(n,10243,E[i.wrapT]),32879!==n&&35866!==n||t.texParameteri(n,32882,E[i.wrapR]),t.texParameteri(n,10240,I[i.magFilter]),t.texParameteri(n,10241,I[i.minFilter])):(t.texParameteri(n,10242,33071),t.texParameteri(n,10243,33071),32879!==n&&35866!==n||t.texParameteri(n,32882,33071),i.wrapS===dt&&i.wrapT===dt||console.warn(\"THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.\"),t.texParameteri(n,10240,w(i.magFilter)),t.texParameteri(n,10241,w(i.minFilter)),i.minFilter!==ft&&i.minFilter!==bt&&console.warn(\"THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.\")),!0===e.has(\"EXT_texture_filter_anisotropic\")){const a=e.get(\"EXT_texture_filter_anisotropic\");if(i.type===Nt&&!1===e.has(\"OES_texture_float_linear\"))return;if(!1===o&&i.type===At&&!1===e.has(\"OES_texture_half_float_linear\"))return;(i.anisotropy>1||r.get(i).__currentAnisotropy)&&(t.texParameterf(n,a.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(i.anisotropy,s.getMaxAnisotropy())),r.get(i).__currentAnisotropy=i.anisotropy)}}function N(e,n){void 0===e.__webglInit&&(e.__webglInit=!0,n.addEventListener(\"dispose\",S),e.__webglTexture=t.createTexture(),a.memory.textures++)}function A(e,r,s){let a=3553;r.isDataTexture2DArray&&(a=35866),r.isDataTexture3D&&(a=32879),N(e,r),n.activeTexture(33984+s),n.bindTexture(a,e.__webglTexture),t.pixelStorei(37440,r.flipY),t.pixelStorei(37441,r.premultiplyAlpha),t.pixelStorei(3317,r.unpackAlignment),t.pixelStorei(37443,0);const l=function(t){return!o&&(t.wrapS!==dt||t.wrapT!==dt||t.minFilter!==ft&&t.minFilter!==bt)}(r)&&!1===y(r.image),u=g(r.image,l,!1,c),h=y(u)||o,d=i.convert(r.format);let p,f=i.convert(r.type),m=v(r.internalFormat,d,f);C(a,r,h);const w=r.mipmaps;if(r.isDepthTexture)m=6402,o?m=r.type===Nt?36012:r.type===Ct?33190:r.type===Ft?35056:33189:r.type===Nt&&console.error(\"WebGLRenderer: Floating point depth texture requires WebGL2.\"),r.format===Vt&&6402===m&&r.type!==Et&&r.type!==Ct&&(console.warn(\"THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.\"),r.type=Et,f=i.convert(r.type)),r.format===Wt&&6402===m&&(m=34041,r.type!==Ft&&(console.warn(\"THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.\"),r.type=Ft,f=i.convert(r.type))),n.texImage2D(3553,0,m,u.width,u.height,0,d,f,null);else if(r.isDataTexture)if(w.length>0&&h){for(let t=0,e=w.length;t<e;t++)p=w[t],n.texImage2D(3553,t,m,p.width,p.height,0,d,f,p.data);r.generateMipmaps=!1,e.__maxMipLevel=w.length-1}else n.texImage2D(3553,0,m,u.width,u.height,0,d,f,u.data),e.__maxMipLevel=0;else if(r.isCompressedTexture){for(let t=0,e=w.length;t<e;t++)p=w[t],r.format!==Pt&&r.format!==Ot?null!==d?n.compressedTexImage2D(3553,t,m,p.width,p.height,0,p.data):console.warn(\"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()\"):n.texImage2D(3553,t,m,p.width,p.height,0,d,f,p.data);e.__maxMipLevel=w.length-1}else if(r.isDataTexture2DArray)n.texImage3D(35866,0,m,u.width,u.height,u.depth,0,d,f,u.data),e.__maxMipLevel=0;else if(r.isDataTexture3D)n.texImage3D(32879,0,m,u.width,u.height,u.depth,0,d,f,u.data),e.__maxMipLevel=0;else if(w.length>0&&h){for(let t=0,e=w.length;t<e;t++)p=w[t],n.texImage2D(3553,t,m,d,f,p);r.generateMipmaps=!1,e.__maxMipLevel=w.length-1}else n.texImage2D(3553,0,m,d,f,u),e.__maxMipLevel=0;x(r,h)&&b(a,r,u.width,u.height),e.__version=r.version,r.onUpdate&&r.onUpdate(r)}function R(e,s,a,o,l){const u=i.convert(a.format),c=i.convert(a.type),h=v(a.internalFormat,u,c);32879===l||35866===l?n.texImage3D(l,0,h,s.width,s.height,s.depth,0,u,c,null):n.texImage2D(l,0,h,s.width,s.height,0,u,c,null),n.bindFramebuffer(36160,e),t.framebufferTexture2D(36160,o,l,r.get(a).__webglTexture,0),n.bindFramebuffer(36160,null)}function L(e,n,r){if(t.bindRenderbuffer(36161,e),n.depthBuffer&&!n.stencilBuffer){let s=33189;if(r){const e=n.depthTexture;e&&e.isDepthTexture&&(e.type===Nt?s=36012:e.type===Ct&&(s=33190));const r=D(n);t.renderbufferStorageMultisample(36161,r,s,n.width,n.height)}else t.renderbufferStorage(36161,s,n.width,n.height);t.framebufferRenderbuffer(36160,36096,36161,e)}else if(n.depthBuffer&&n.stencilBuffer){if(r){const e=D(n);t.renderbufferStorageMultisample(36161,e,35056,n.width,n.height)}else t.renderbufferStorage(36161,34041,n.width,n.height);t.framebufferRenderbuffer(36160,33306,36161,e)}else{const e=!0===n.isWebGLMultipleRenderTargets?n.texture[0]:n.texture,s=i.convert(e.format),a=i.convert(e.type),o=v(e.internalFormat,s,a);if(r){const e=D(n);t.renderbufferStorageMultisample(36161,e,o,n.width,n.height)}else t.renderbufferStorage(36161,o,n.width,n.height)}t.bindRenderbuffer(36161,null)}function D(t){return o&&t.isWebGLMultisampleRenderTarget?Math.min(h,t.samples):0}let F=!1,$=!1;this.allocateTextureUnit=function(){const t=_;return t>=l&&console.warn(\"THREE.WebGLTextures: Trying to use \"+t+\" texture units while this GPU supports only \"+l),_+=1,t},this.resetTextureUnits=function(){_=0},this.setTexture2D=M,this.setTexture2DArray=function(t,e){const s=r.get(t);t.version>0&&s.__version!==t.version?A(s,t,e):(n.activeTexture(33984+e),n.bindTexture(35866,s.__webglTexture))},this.setTexture3D=function(t,e){const s=r.get(t);t.version>0&&s.__version!==t.version?A(s,t,e):(n.activeTexture(33984+e),n.bindTexture(32879,s.__webglTexture))},this.setTextureCube=k,this.setupRenderTarget=function(e){const l=e.texture,u=r.get(e),c=r.get(l);e.addEventListener(\"dispose\",T),!0!==e.isWebGLMultipleRenderTargets&&(c.__webglTexture=t.createTexture(),c.__version=l.version,a.memory.textures++);const h=!0===e.isWebGLCubeRenderTarget,d=!0===e.isWebGLMultipleRenderTargets,p=!0===e.isWebGLMultisampleRenderTarget,f=l.isDataTexture3D||l.isDataTexture2DArray,m=y(e)||o;if(!o||l.format!==Ot||l.type!==Nt&&l.type!==At||(l.format=Pt,console.warn(\"THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.\")),h){u.__webglFramebuffer=[];for(let e=0;e<6;e++)u.__webglFramebuffer[e]=t.createFramebuffer()}else if(u.__webglFramebuffer=t.createFramebuffer(),d)if(s.drawBuffers){const n=e.texture;for(let e=0,s=n.length;e<s;e++){const s=r.get(n[e]);void 0===s.__webglTexture&&(s.__webglTexture=t.createTexture(),a.memory.textures++)}}else console.warn(\"THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.\");else if(p)if(o){u.__webglMultisampledFramebuffer=t.createFramebuffer(),u.__webglColorRenderbuffer=t.createRenderbuffer(),t.bindRenderbuffer(36161,u.__webglColorRenderbuffer);const r=i.convert(l.format),s=i.convert(l.type),a=v(l.internalFormat,r,s),o=D(e);t.renderbufferStorageMultisample(36161,o,a,e.width,e.height),n.bindFramebuffer(36160,u.__webglMultisampledFramebuffer),t.framebufferRenderbuffer(36160,36064,36161,u.__webglColorRenderbuffer),t.bindRenderbuffer(36161,null),e.depthBuffer&&(u.__webglDepthRenderbuffer=t.createRenderbuffer(),L(u.__webglDepthRenderbuffer,e,!0)),n.bindFramebuffer(36160,null)}else console.warn(\"THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.\");if(h){n.bindTexture(34067,c.__webglTexture),C(34067,l,m);for(let t=0;t<6;t++)R(u.__webglFramebuffer[t],e,l,36064,34069+t);x(l,m)&&b(34067,l,e.width,e.height),n.unbindTexture()}else if(d){const t=e.texture;for(let s=0,i=t.length;s<i;s++){const i=t[s],a=r.get(i);n.bindTexture(3553,a.__webglTexture),C(3553,i,m),R(u.__webglFramebuffer,e,i,36064+s,3553),x(i,m)&&b(3553,i,e.width,e.height)}n.unbindTexture()}else{let t=3553;f&&(o?t=l.isDataTexture3D?32879:35866:console.warn(\"THREE.DataTexture3D and THREE.DataTexture2DArray only supported with WebGL2.\")),n.bindTexture(t,c.__webglTexture),C(t,l,m),R(u.__webglFramebuffer,e,l,36064,t),x(l,m)&&b(t,l,e.width,e.height,e.depth),n.unbindTexture()}e.depthBuffer&&function(e){const s=r.get(e),i=!0===e.isWebGLCubeRenderTarget;if(e.depthTexture){if(i)throw new Error(\"target.depthTexture not supported in Cube render targets\");!function(e,s){if(s&&s.isWebGLCubeRenderTarget)throw new Error(\"Depth Texture with cube render targets is not supported\");if(n.bindFramebuffer(36160,e),!s.depthTexture||!s.depthTexture.isDepthTexture)throw new Error(\"renderTarget.depthTexture must be an instance of THREE.DepthTexture\");r.get(s.depthTexture).__webglTexture&&s.depthTexture.image.width===s.width&&s.depthTexture.image.height===s.height||(s.depthTexture.image.width=s.width,s.depthTexture.image.height=s.height,s.depthTexture.needsUpdate=!0),M(s.depthTexture,0);const i=r.get(s.depthTexture).__webglTexture;if(s.depthTexture.format===Vt)t.framebufferTexture2D(36160,36096,3553,i,0);else{if(s.depthTexture.format!==Wt)throw new Error(\"Unknown depthTexture format\");t.framebufferTexture2D(36160,33306,3553,i,0)}}(s.__webglFramebuffer,e)}else if(i){s.__webglDepthbuffer=[];for(let r=0;r<6;r++)n.bindFramebuffer(36160,s.__webglFramebuffer[r]),s.__webglDepthbuffer[r]=t.createRenderbuffer(),L(s.__webglDepthbuffer[r],e,!1)}else n.bindFramebuffer(36160,s.__webglFramebuffer),s.__webglDepthbuffer=t.createRenderbuffer(),L(s.__webglDepthbuffer,e,!1);n.bindFramebuffer(36160,null)}(e)},this.updateRenderTargetMipmap=function(t){const e=y(t)||o,s=!0===t.isWebGLMultipleRenderTargets?t.texture:[t.texture];for(let i=0,a=s.length;i<a;i++){const a=s[i];if(x(a,e)){const e=t.isWebGLCubeRenderTarget?34067:3553,s=r.get(a).__webglTexture;n.bindTexture(e,s),b(e,a,t.width,t.height),n.unbindTexture()}}},this.updateMultisampleRenderTarget=function(e){if(e.isWebGLMultisampleRenderTarget)if(o){const s=e.width,i=e.height;let a=16384;e.depthBuffer&&(a|=256),e.stencilBuffer&&(a|=1024);const o=r.get(e);n.bindFramebuffer(36008,o.__webglMultisampledFramebuffer),n.bindFramebuffer(36009,o.__webglFramebuffer),t.blitFramebuffer(0,0,s,i,0,0,s,i,a,9728),n.bindFramebuffer(36008,null),n.bindFramebuffer(36009,o.__webglMultisampledFramebuffer)}else console.warn(\"THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.\")},this.safeSetTexture2D=function(t,e){t&&t.isWebGLRenderTarget&&(!1===F&&(console.warn(\"THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead.\"),F=!0),t=t.texture),M(t,e)},this.safeSetTextureCube=function(t,e){t&&t.isWebGLCubeRenderTarget&&(!1===$&&(console.warn(\"THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead.\"),$=!0),t=t.texture),k(t,e)}}function ml(t,e,n){const r=n.isWebGL2;return{convert:function(t){let n;if(t===_t)return 5121;if(t===Rt)return 32819;if(t===Lt)return 32820;if(t===Dt)return 33635;if(t===Mt)return 5120;if(t===kt)return 5122;if(t===Et)return 5123;if(t===It)return 5124;if(t===Ct)return 5125;if(t===Nt)return 5126;if(t===At)return r?5131:(n=e.get(\"OES_texture_half_float\"),null!==n?n.HALF_FLOAT_OES:null);if(t===$t)return 6406;if(t===Ot)return 6407;if(t===Pt)return 6408;if(t===zt)return 6409;if(t===Bt)return 6410;if(t===Vt)return 6402;if(t===Wt)return 34041;if(t===Gt)return 6403;if(t===Ht)return 36244;if(t===jt)return 33319;if(t===qt)return 33320;if(t===Xt)return 36248;if(t===Kt)return 36249;if(t===Yt||t===Zt||t===Jt||t===Qt){if(n=e.get(\"WEBGL_compressed_texture_s3tc\"),null===n)return null;if(t===Yt)return n.COMPRESSED_RGB_S3TC_DXT1_EXT;if(t===Zt)return n.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(t===Jt)return n.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(t===Qt)return n.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(t===te||t===ee||t===ne||t===re){if(n=e.get(\"WEBGL_compressed_texture_pvrtc\"),null===n)return null;if(t===te)return n.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(t===ee)return n.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(t===ne)return n.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(t===re)return n.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(t===se)return n=e.get(\"WEBGL_compressed_texture_etc1\"),null!==n?n.COMPRESSED_RGB_ETC1_WEBGL:null;if((t===ie||t===ae)&&(n=e.get(\"WEBGL_compressed_texture_etc\"),null!==n)){if(t===ie)return n.COMPRESSED_RGB8_ETC2;if(t===ae)return n.COMPRESSED_RGBA8_ETC2_EAC}return t===oe||t===le||t===ue||t===ce||t===he||t===de||t===pe||t===fe||t===me||t===ge||t===ye||t===xe||t===be||t===ve||t===Se||t===Te||t===_e||t===Me||t===ke||t===Ee||t===Ie||t===Ce||t===Ne||t===Ae||t===Re||t===Le||t===De||t===Fe?(n=e.get(\"WEBGL_compressed_texture_astc\"),null!==n?t:null):t===we?(n=e.get(\"EXT_texture_compression_bptc\"),null!==n?t:null):t===Ft?r?34042:(n=e.get(\"WEBGL_depth_texture\"),null!==n?n.UNSIGNED_INT_24_8_WEBGL:null):void 0}}}hl.prototype.isMeshDistanceMaterial=!0;class gl extends ki{constructor(t=[]){super(),this.cameras=t}}gl.prototype.isArrayCamera=!0;class yl extends us{constructor(){super(),this.type=\"Group\"}}yl.prototype.isGroup=!0;const xl={type:\"move\"};class bl{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return null===this._hand&&(this._hand=new yl,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return null===this._targetRay&&(this._targetRay=new yl,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new or,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new or),this._targetRay}getGripSpace(){return null===this._grip&&(this._grip=new yl,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new or,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new or),this._grip}dispatchEvent(t){return null!==this._targetRay&&this._targetRay.dispatchEvent(t),null!==this._grip&&this._grip.dispatchEvent(t),null!==this._hand&&this._hand.dispatchEvent(t),this}disconnect(t){return this.dispatchEvent({type:\"disconnected\",data:t}),null!==this._targetRay&&(this._targetRay.visible=!1),null!==this._grip&&(this._grip.visible=!1),null!==this._hand&&(this._hand.visible=!1),this}update(t,e,n){let r=null,s=null,i=null;const a=this._targetRay,o=this._grip,l=this._hand;if(t&&\"visible-blurred\"!==e.session.visibilityState)if(null!==a&&(r=e.getPose(t.targetRaySpace,n),null!==r&&(a.matrix.fromArray(r.transform.matrix),a.matrix.decompose(a.position,a.rotation,a.scale),r.linearVelocity?(a.hasLinearVelocity=!0,a.linearVelocity.copy(r.linearVelocity)):a.hasLinearVelocity=!1,r.angularVelocity?(a.hasAngularVelocity=!0,a.angularVelocity.copy(r.angularVelocity)):a.hasAngularVelocity=!1,this.dispatchEvent(xl))),l&&t.hand){i=!0;for(const r of t.hand.values()){const t=e.getJointPose(r,n);if(void 0===l.joints[r.jointName]){const t=new yl;t.matrixAutoUpdate=!1,t.visible=!1,l.joints[r.jointName]=t,l.add(t)}const s=l.joints[r.jointName];null!==t&&(s.matrix.fromArray(t.transform.matrix),s.matrix.decompose(s.position,s.rotation,s.scale),s.jointRadius=t.radius),s.visible=null!==t}const r=l.joints[\"index-finger-tip\"],s=l.joints[\"thumb-tip\"],a=r.position.distanceTo(s.position),o=.02,u=.005;l.inputState.pinching&&a>o+u?(l.inputState.pinching=!1,this.dispatchEvent({type:\"pinchend\",handedness:t.handedness,target:this})):!l.inputState.pinching&&a<=o-u&&(l.inputState.pinching=!0,this.dispatchEvent({type:\"pinchstart\",handedness:t.handedness,target:this}))}else null!==o&&t.gripSpace&&(s=e.getPose(t.gripSpace,n),null!==s&&(o.matrix.fromArray(s.transform.matrix),o.matrix.decompose(o.position,o.rotation,o.scale),s.linearVelocity?(o.hasLinearVelocity=!0,o.linearVelocity.copy(s.linearVelocity)):o.hasLinearVelocity=!1,s.angularVelocity?(o.hasAngularVelocity=!0,o.angularVelocity.copy(s.angularVelocity)):o.hasAngularVelocity=!1));return null!==a&&(a.visible=null!==r),null!==o&&(o.visible=null!==s),null!==l&&(l.visible=null!==i),this}}class vl extends $n{constructor(t,e){super();const n=this,r=t.state;let s=null,i=1,a=null,o=\"local-floor\",l=null,u=null,c=null,h=null,d=null,p=!1,f=null,m=null,g=null,y=null,x=null,b=null;const v=[],w=new Map,S=new ki;S.layers.enable(1),S.viewport=new nr;const T=new ki;T.layers.enable(2),T.viewport=new nr;const _=[S,T],M=new gl;M.layers.enable(1),M.layers.enable(2);let k=null,E=null;function I(t){const e=w.get(t.inputSource);e&&e.dispatchEvent({type:t.type,data:t.inputSource})}function C(){w.forEach((function(t,e){t.disconnect(e)})),w.clear(),k=null,E=null,r.bindXRFramebuffer(null),t.setRenderTarget(t.getRenderTarget()),c&&e.deleteFramebuffer(c),f&&e.deleteFramebuffer(f),m&&e.deleteRenderbuffer(m),g&&e.deleteRenderbuffer(g),c=null,f=null,m=null,g=null,d=null,h=null,u=null,s=null,F.stop(),n.isPresenting=!1,n.dispatchEvent({type:\"sessionend\"})}function N(t){const e=s.inputSources;for(let t=0;t<v.length;t++)w.set(e[t],v[t]);for(let e=0;e<t.removed.length;e++){const n=t.removed[e],r=w.get(n);r&&(r.dispatchEvent({type:\"disconnected\",data:n}),w.delete(n))}for(let e=0;e<t.added.length;e++){const n=t.added[e],r=w.get(n);r&&r.dispatchEvent({type:\"connected\",data:n})}}this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(t){let e=v[t];return void 0===e&&(e=new bl,v[t]=e),e.getTargetRaySpace()},this.getControllerGrip=function(t){let e=v[t];return void 0===e&&(e=new bl,v[t]=e),e.getGripSpace()},this.getHand=function(t){let e=v[t];return void 0===e&&(e=new bl,v[t]=e),e.getHandSpace()},this.setFramebufferScaleFactor=function(t){i=t,!0===n.isPresenting&&console.warn(\"THREE.WebXRManager: Cannot change framebuffer scale while presenting.\")},this.setReferenceSpaceType=function(t){o=t,!0===n.isPresenting&&console.warn(\"THREE.WebXRManager: Cannot change reference space type while presenting.\")},this.getReferenceSpace=function(){return a},this.getBaseLayer=function(){return null!==h?h:d},this.getBinding=function(){return u},this.getFrame=function(){return y},this.getSession=function(){return s},this.setSession=async function(t){if(s=t,null!==s){s.addEventListener(\"select\",I),s.addEventListener(\"selectstart\",I),s.addEventListener(\"selectend\",I),s.addEventListener(\"squeeze\",I),s.addEventListener(\"squeezestart\",I),s.addEventListener(\"squeezeend\",I),s.addEventListener(\"end\",C),s.addEventListener(\"inputsourceschange\",N);const t=e.getContextAttributes();if(!0!==t.xrCompatible&&await e.makeXRCompatible(),void 0===s.renderState.layers){const n={antialias:t.antialias,alpha:t.alpha,depth:t.depth,stencil:t.stencil,framebufferScaleFactor:i};d=new XRWebGLLayer(s,e,n),s.updateRenderState({baseLayer:d})}else if(e instanceof WebGLRenderingContext){const n={antialias:!0,alpha:t.alpha,depth:t.depth,stencil:t.stencil,framebufferScaleFactor:i};d=new XRWebGLLayer(s,e,n),s.updateRenderState({layers:[d]})}else{p=t.antialias;let n=null;t.depth&&(b=256,t.stencil&&(b|=1024),x=t.stencil?33306:36096,n=t.stencil?35056:33190);const a={colorFormat:t.alpha?32856:32849,depthFormat:n,scaleFactor:i};u=new XRWebGLBinding(s,e),h=u.createProjectionLayer(a),c=e.createFramebuffer(),s.updateRenderState({layers:[h]}),p&&(f=e.createFramebuffer(),m=e.createRenderbuffer(),e.bindRenderbuffer(36161,m),e.renderbufferStorageMultisample(36161,4,32856,h.textureWidth,h.textureHeight),r.bindFramebuffer(36160,f),e.framebufferRenderbuffer(36160,36064,36161,m),e.bindRenderbuffer(36161,null),null!==n&&(g=e.createRenderbuffer(),e.bindRenderbuffer(36161,g),e.renderbufferStorageMultisample(36161,4,n,h.textureWidth,h.textureHeight),e.framebufferRenderbuffer(36160,x,36161,g),e.bindRenderbuffer(36161,null)),r.bindFramebuffer(36160,null))}a=await s.requestReferenceSpace(o),F.setContext(s),F.start(),n.isPresenting=!0,n.dispatchEvent({type:\"sessionstart\"})}};const A=new or,R=new or;function L(t,e){null===e?t.matrixWorld.copy(t.matrix):t.matrixWorld.multiplyMatrices(e.matrixWorld,t.matrix),t.matrixWorldInverse.copy(t.matrixWorld).invert()}this.updateCamera=function(t){if(null===s)return;M.near=T.near=S.near=t.near,M.far=T.far=S.far=t.far,k===M.near&&E===M.far||(s.updateRenderState({depthNear:M.near,depthFar:M.far}),k=M.near,E=M.far);const e=t.parent,n=M.cameras;L(M,e);for(let t=0;t<n.length;t++)L(n[t],e);M.matrixWorld.decompose(M.position,M.quaternion,M.scale),t.position.copy(M.position),t.quaternion.copy(M.quaternion),t.scale.copy(M.scale),t.matrix.copy(M.matrix),t.matrixWorld.copy(M.matrixWorld);const r=t.children;for(let t=0,e=r.length;t<e;t++)r[t].updateMatrixWorld(!0);2===n.length?function(t,e,n){A.setFromMatrixPosition(e.matrixWorld),R.setFromMatrixPosition(n.matrixWorld);const r=A.distanceTo(R),s=e.projectionMatrix.elements,i=n.projectionMatrix.elements,a=s[14]/(s[10]-1),o=s[14]/(s[10]+1),l=(s[9]+1)/s[5],u=(s[9]-1)/s[5],c=(s[8]-1)/s[0],h=(i[8]+1)/i[0],d=a*c,p=a*h,f=r/(-c+h),m=f*-c;e.matrixWorld.decompose(t.position,t.quaternion,t.scale),t.translateX(m),t.translateZ(f),t.matrixWorld.compose(t.position,t.quaternion,t.scale),t.matrixWorldInverse.copy(t.matrixWorld).invert();const g=a+f,y=o+f,x=d-m,b=p+(r-m),v=l*o/y*g,w=u*o/y*g;t.projectionMatrix.makePerspective(x,b,v,w,g,y)}(M,S,T):M.projectionMatrix.copy(S.projectionMatrix)},this.getCamera=function(){return M},this.getFoveation=function(){return null!==h?h.fixedFoveation:null!==d?d.fixedFoveation:void 0},this.setFoveation=function(t){null!==h&&(h.fixedFoveation=t),null!==d&&void 0!==d.fixedFoveation&&(d.fixedFoveation=t)};let D=null;const F=new Pi;F.setAnimationLoop((function(t,n){if(l=n.getViewerPose(a),y=n,null!==l){const t=l.views;null!==d&&r.bindXRFramebuffer(d.framebuffer);let n=!1;t.length!==M.cameras.length&&(M.cameras.length=0,n=!0);for(let s=0;s<t.length;s++){const i=t[s];let a=null;if(null!==d)a=d.getViewport(i);else{const t=u.getViewSubImage(h,i);r.bindXRFramebuffer(c),void 0!==t.depthStencilTexture&&e.framebufferTexture2D(36160,x,3553,t.depthStencilTexture,0),e.framebufferTexture2D(36160,36064,3553,t.colorTexture,0),a=t.viewport}const o=_[s];o.matrix.fromArray(i.transform.matrix),o.projectionMatrix.fromArray(i.projectionMatrix),o.viewport.set(a.x,a.y,a.width,a.height),0===s&&M.matrix.copy(o.matrix),!0===n&&M.cameras.push(o)}p&&(r.bindXRFramebuffer(f),null!==b&&e.clear(b))}const i=s.inputSources;for(let t=0;t<v.length;t++){const e=v[t],r=i[t];e.update(r,n,a)}if(D&&D(t,n),p){const t=h.textureWidth,n=h.textureHeight;r.bindFramebuffer(36008,f),r.bindFramebuffer(36009,c),e.invalidateFramebuffer(36008,[x]),e.invalidateFramebuffer(36009,[x]),e.blitFramebuffer(0,0,t,n,0,0,t,n,16384,9728),e.invalidateFramebuffer(36008,[36064]),r.bindFramebuffer(36008,null),r.bindFramebuffer(36009,null),r.bindFramebuffer(36160,f)}y=null})),this.setAnimationLoop=function(t){D=t},this.dispose=function(){}}}function wl(t){function e(e,n){e.opacity.value=n.opacity,n.color&&e.diffuse.value.copy(n.color),n.emissive&&e.emissive.value.copy(n.emissive).multiplyScalar(n.emissiveIntensity),n.map&&(e.map.value=n.map),n.alphaMap&&(e.alphaMap.value=n.alphaMap),n.specularMap&&(e.specularMap.value=n.specularMap),n.alphaTest>0&&(e.alphaTest.value=n.alphaTest);const r=t.get(n).envMap;if(r){e.envMap.value=r,e.flipEnvMap.value=r.isCubeTexture&&!1===r.isRenderTargetTexture?-1:1,e.reflectivity.value=n.reflectivity,e.ior.value=n.ior,e.refractionRatio.value=n.refractionRatio;const s=t.get(r).__maxMipLevel;void 0!==s&&(e.maxMipLevel.value=s)}let s,i;n.lightMap&&(e.lightMap.value=n.lightMap,e.lightMapIntensity.value=n.lightMapIntensity),n.aoMap&&(e.aoMap.value=n.aoMap,e.aoMapIntensity.value=n.aoMapIntensity),n.map?s=n.map:n.specularMap?s=n.specularMap:n.displacementMap?s=n.displacementMap:n.normalMap?s=n.normalMap:n.bumpMap?s=n.bumpMap:n.roughnessMap?s=n.roughnessMap:n.metalnessMap?s=n.metalnessMap:n.alphaMap?s=n.alphaMap:n.emissiveMap?s=n.emissiveMap:n.clearcoatMap?s=n.clearcoatMap:n.clearcoatNormalMap?s=n.clearcoatNormalMap:n.clearcoatRoughnessMap?s=n.clearcoatRoughnessMap:n.specularIntensityMap?s=n.specularIntensityMap:n.specularTintMap?s=n.specularTintMap:n.transmissionMap?s=n.transmissionMap:n.thicknessMap&&(s=n.thicknessMap),void 0!==s&&(s.isWebGLRenderTarget&&(s=s.texture),!0===s.matrixAutoUpdate&&s.updateMatrix(),e.uvTransform.value.copy(s.matrix)),n.aoMap?i=n.aoMap:n.lightMap&&(i=n.lightMap),void 0!==i&&(i.isWebGLRenderTarget&&(i=i.texture),!0===i.matrixAutoUpdate&&i.updateMatrix(),e.uv2Transform.value.copy(i.matrix))}function n(e,n){e.roughness.value=n.roughness,e.metalness.value=n.metalness,n.roughnessMap&&(e.roughnessMap.value=n.roughnessMap),n.metalnessMap&&(e.metalnessMap.value=n.metalnessMap),n.emissiveMap&&(e.emissiveMap.value=n.emissiveMap),n.bumpMap&&(e.bumpMap.value=n.bumpMap,e.bumpScale.value=n.bumpScale,n.side===m&&(e.bumpScale.value*=-1)),n.normalMap&&(e.normalMap.value=n.normalMap,e.normalScale.value.copy(n.normalScale),n.side===m&&e.normalScale.value.negate()),n.displacementMap&&(e.displacementMap.value=n.displacementMap,e.displacementScale.value=n.displacementScale,e.displacementBias.value=n.displacementBias),t.get(n).envMap&&(e.envMapIntensity.value=n.envMapIntensity)}return{refreshFogUniforms:function(t,e){t.fogColor.value.copy(e.color),e.isFog?(t.fogNear.value=e.near,t.fogFar.value=e.far):e.isFogExp2&&(t.fogDensity.value=e.density)},refreshMaterialUniforms:function(t,r,s,i,a){r.isMeshBasicMaterial?e(t,r):r.isMeshLambertMaterial?(e(t,r),function(t,e){e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap)}(t,r)):r.isMeshToonMaterial?(e(t,r),function(t,e){e.gradientMap&&(t.gradientMap.value=e.gradientMap),e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap),e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,e.side===m&&(t.bumpScale.value*=-1)),e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),e.side===m&&t.normalScale.value.negate()),e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(t,r)):r.isMeshPhongMaterial?(e(t,r),function(t,e){t.specular.value.copy(e.specular),t.shininess.value=Math.max(e.shininess,1e-4),e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap),e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,e.side===m&&(t.bumpScale.value*=-1)),e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),e.side===m&&t.normalScale.value.negate()),e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(t,r)):r.isMeshStandardMaterial?(e(t,r),r.isMeshPhysicalMaterial?function(t,e,r){n(t,e),t.ior.value=e.ior,e.sheenTint&&t.sheenTint.value.copy(e.sheenTint),e.clearcoat>0&&(t.clearcoat.value=e.clearcoat,t.clearcoatRoughness.value=e.clearcoatRoughness,e.clearcoatMap&&(t.clearcoatMap.value=e.clearcoatMap),e.clearcoatRoughnessMap&&(t.clearcoatRoughnessMap.value=e.clearcoatRoughnessMap),e.clearcoatNormalMap&&(t.clearcoatNormalScale.value.copy(e.clearcoatNormalScale),t.clearcoatNormalMap.value=e.clearcoatNormalMap,e.side===m&&t.clearcoatNormalScale.value.negate())),e.transmission>0&&(t.transmission.value=e.transmission,t.transmissionSamplerMap.value=r.texture,t.transmissionSamplerSize.value.set(r.width,r.height),e.transmissionMap&&(t.transmissionMap.value=e.transmissionMap),t.thickness.value=e.thickness,e.thicknessMap&&(t.thicknessMap.value=e.thicknessMap),t.attenuationDistance.value=e.attenuationDistance,t.attenuationTint.value.copy(e.attenuationTint)),t.specularIntensity.value=e.specularIntensity,t.specularTint.value.copy(e.specularTint),e.specularIntensityMap&&(t.specularIntensityMap.value=e.specularIntensityMap),e.specularTintMap&&(t.specularTintMap.value=e.specularTintMap)}(t,r,a):n(t,r)):r.isMeshMatcapMaterial?(e(t,r),function(t,e){e.matcap&&(t.matcap.value=e.matcap),e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,e.side===m&&(t.bumpScale.value*=-1)),e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),e.side===m&&t.normalScale.value.negate()),e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(t,r)):r.isMeshDepthMaterial?(e(t,r),function(t,e){e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(t,r)):r.isMeshDistanceMaterial?(e(t,r),function(t,e){e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias),t.referencePosition.value.copy(e.referencePosition),t.nearDistance.value=e.nearDistance,t.farDistance.value=e.farDistance}(t,r)):r.isMeshNormalMaterial?(e(t,r),function(t,e){e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,e.side===m&&(t.bumpScale.value*=-1)),e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),e.side===m&&t.normalScale.value.negate()),e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(t,r)):r.isLineBasicMaterial?(function(t,e){t.diffuse.value.copy(e.color),t.opacity.value=e.opacity}(t,r),r.isLineDashedMaterial&&function(t,e){t.dashSize.value=e.dashSize,t.totalSize.value=e.dashSize+e.gapSize,t.scale.value=e.scale}(t,r)):r.isPointsMaterial?function(t,e,n,r){let s;t.diffuse.value.copy(e.color),t.opacity.value=e.opacity,t.size.value=e.size*n,t.scale.value=.5*r,e.map&&(t.map.value=e.map),e.alphaMap&&(t.alphaMap.value=e.alphaMap),e.alphaTest>0&&(t.alphaTest.value=e.alphaTest),e.map?s=e.map:e.alphaMap&&(s=e.alphaMap),void 0!==s&&(!0===s.matrixAutoUpdate&&s.updateMatrix(),t.uvTransform.value.copy(s.matrix))}(t,r,s,i):r.isSpriteMaterial?function(t,e){let n;t.diffuse.value.copy(e.color),t.opacity.value=e.opacity,t.rotation.value=e.rotation,e.map&&(t.map.value=e.map),e.alphaMap&&(t.alphaMap.value=e.alphaMap),e.alphaTest>0&&(t.alphaTest.value=e.alphaTest),e.map?n=e.map:e.alphaMap&&(n=e.alphaMap),void 0!==n&&(!0===n.matrixAutoUpdate&&n.updateMatrix(),t.uvTransform.value.copy(n.matrix))}(t,r):r.isShadowMaterial?(t.color.value.copy(r.color),t.opacity.value=r.opacity):r.isShaderMaterial&&(r.uniformsNeedUpdate=!1)}}}function Sl(t={}){const e=void 0!==t.canvas?t.canvas:function(){const t=document.createElementNS(\"http://www.w3.org/1999/xhtml\",\"canvas\");return t.style.display=\"block\",t}(),n=void 0!==t.context?t.context:null,r=void 0!==t.alpha&&t.alpha,s=void 0===t.depth||t.depth,i=void 0===t.stencil||t.stencil,a=void 0!==t.antialias&&t.antialias,o=void 0===t.premultipliedAlpha||t.premultipliedAlpha,l=void 0!==t.preserveDrawingBuffer&&t.preserveDrawingBuffer,u=void 0!==t.powerPreference?t.powerPreference:\"default\",c=void 0!==t.failIfMajorPerformanceCaveat&&t.failIfMajorPerformanceCaveat;let h=null,d=null;const p=[],y=[];this.domElement=e,this.debug={checkShaderErrors:!0},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.gammaFactor=2,this.outputEncoding=Ye,this.physicallyCorrectLights=!1,this.toneMapping=J,this.toneMappingExposure=1;const x=this;let b=!1,v=0,w=0,S=null,T=-1,_=null;const M=new nr,k=new nr;let E=null,I=e.width,C=e.height,N=1,A=null,R=null;const L=new nr(0,0,I,C),D=new nr(0,0,I,C);let F=!1;const $=[],O=new Oi;let P=!1,z=!1,B=null;const U=new Pr,V=new or,W={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};function G(){return null===S?N:1}let H,j,q,X,K,Y,Z,Q,tt,et,nt,rt,st,it,at,ot,lt,ut,ct,ht,pt,mt,gt,yt=n;function xt(t,n){for(let r=0;r<t.length;r++){const s=t[r],i=e.getContext(s,n);if(null!==i)return i}return null}try{const t={alpha:r,depth:s,stencil:i,antialias:a,premultipliedAlpha:o,preserveDrawingBuffer:l,powerPreference:u,failIfMajorPerformanceCaveat:c};if(e.addEventListener(\"webglcontextlost\",wt,!1),e.addEventListener(\"webglcontextrestored\",Tt,!1),null===yt){const e=[\"webgl2\",\"webgl\",\"experimental-webgl\"];if(!0===x.isWebGL1Renderer&&e.shift(),yt=xt(e,t),null===yt)throw xt(e)?new Error(\"Error creating WebGL context with your selected attributes.\"):new Error(\"Error creating WebGL context.\")}void 0===yt.getShaderPrecisionFormat&&(yt.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(t){throw console.error(\"THREE.WebGLRenderer: \"+t.message),t}function bt(){H=new ba(yt),j=new qi(yt,H,t),H.init(j),mt=new ml(yt,H,j),q=new pl(yt,H,j),$[0]=1029,X=new Sa(yt),K=new Qo,Y=new fl(yt,H,q,K,j,mt,X),Z=new Ki(x),Q=new xa(x),tt=new zi(yt,j),gt=new Hi(yt,H,tt,j),et=new va(yt,tt,X,gt),nt=new ka(yt,et,tt,X),ct=new Ma(yt),ot=new Xi(K),rt=new Jo(x,Z,Q,H,j,gt,ot),st=new wl(K),it=new rl(K),at=new ul(H,j),ut=new Gi(x,Z,q,nt,o),lt=new dl(x,nt,j),ht=new ji(yt,H,X,j),pt=new wa(yt,H,X,j),X.programs=rt.programs,x.capabilities=j,x.extensions=H,x.properties=K,x.renderLists=it,x.shadowMap=lt,x.state=q,x.info=X}bt();const vt=new vl(x,yt);function wt(t){t.preventDefault(),console.log(\"THREE.WebGLRenderer: Context Lost.\"),b=!0}function Tt(){console.log(\"THREE.WebGLRenderer: Context Restored.\"),b=!1;const t=X.autoReset,e=lt.enabled,n=lt.autoUpdate,r=lt.needsUpdate,s=lt.type;bt(),X.autoReset=t,lt.enabled=e,lt.autoUpdate=n,lt.needsUpdate=r,lt.type=s}function Mt(t){const e=t.target;e.removeEventListener(\"dispose\",Mt),function(t){(function(t){const e=K.get(t).programs;void 0!==e&&e.forEach((function(t){rt.releaseProgram(t)}))})(t),K.remove(t)}(e)}this.xr=vt,this.getContext=function(){return yt},this.getContextAttributes=function(){return yt.getContextAttributes()},this.forceContextLoss=function(){const t=H.get(\"WEBGL_lose_context\");t&&t.loseContext()},this.forceContextRestore=function(){const t=H.get(\"WEBGL_lose_context\");t&&t.restoreContext()},this.getPixelRatio=function(){return N},this.setPixelRatio=function(t){void 0!==t&&(N=t,this.setSize(I,C,!1))},this.getSize=function(t){return t.set(I,C)},this.setSize=function(t,n,r){vt.isPresenting?console.warn(\"THREE.WebGLRenderer: Can't change size while VR device is presenting.\"):(I=t,C=n,e.width=Math.floor(t*N),e.height=Math.floor(n*N),!1!==r&&(e.style.width=t+\"px\",e.style.height=n+\"px\"),this.setViewport(0,0,t,n))},this.getDrawingBufferSize=function(t){return t.set(I*N,C*N).floor()},this.setDrawingBufferSize=function(t,n,r){I=t,C=n,N=r,e.width=Math.floor(t*r),e.height=Math.floor(n*r),this.setViewport(0,0,t,n)},this.getCurrentViewport=function(t){return t.copy(M)},this.getViewport=function(t){return t.copy(L)},this.setViewport=function(t,e,n,r){t.isVector4?L.set(t.x,t.y,t.z,t.w):L.set(t,e,n,r),q.viewport(M.copy(L).multiplyScalar(N).floor())},this.getScissor=function(t){return t.copy(D)},this.setScissor=function(t,e,n,r){t.isVector4?D.set(t.x,t.y,t.z,t.w):D.set(t,e,n,r),q.scissor(k.copy(D).multiplyScalar(N).floor())},this.getScissorTest=function(){return F},this.setScissorTest=function(t){q.setScissorTest(F=t)},this.setOpaqueSort=function(t){A=t},this.setTransparentSort=function(t){R=t},this.getClearColor=function(t){return t.copy(ut.getClearColor())},this.setClearColor=function(){ut.setClearColor.apply(ut,arguments)},this.getClearAlpha=function(){return ut.getClearAlpha()},this.setClearAlpha=function(){ut.setClearAlpha.apply(ut,arguments)},this.clear=function(t,e,n){let r=0;(void 0===t||t)&&(r|=16384),(void 0===e||e)&&(r|=256),(void 0===n||n)&&(r|=1024),yt.clear(r)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){e.removeEventListener(\"webglcontextlost\",wt,!1),e.removeEventListener(\"webglcontextrestored\",Tt,!1),it.dispose(),at.dispose(),K.dispose(),Z.dispose(),Q.dispose(),nt.dispose(),gt.dispose(),vt.dispose(),vt.removeEventListener(\"sessionstart\",Et),vt.removeEventListener(\"sessionend\",It),B&&(B.dispose(),B=null),Ct.stop()},this.renderBufferImmediate=function(t,e){gt.initAttributes();const n=K.get(t);t.hasPositions&&!n.position&&(n.position=yt.createBuffer()),t.hasNormals&&!n.normal&&(n.normal=yt.createBuffer()),t.hasUvs&&!n.uv&&(n.uv=yt.createBuffer()),t.hasColors&&!n.color&&(n.color=yt.createBuffer());const r=e.getAttributes();t.hasPositions&&(yt.bindBuffer(34962,n.position),yt.bufferData(34962,t.positionArray,35048),gt.enableAttribute(r.position.location),yt.vertexAttribPointer(r.position.location,3,5126,!1,0,0)),t.hasNormals&&(yt.bindBuffer(34962,n.normal),yt.bufferData(34962,t.normalArray,35048),gt.enableAttribute(r.normal.location),yt.vertexAttribPointer(r.normal.location,3,5126,!1,0,0)),t.hasUvs&&(yt.bindBuffer(34962,n.uv),yt.bufferData(34962,t.uvArray,35048),gt.enableAttribute(r.uv.location),yt.vertexAttribPointer(r.uv.location,2,5126,!1,0,0)),t.hasColors&&(yt.bindBuffer(34962,n.color),yt.bufferData(34962,t.colorArray,35048),gt.enableAttribute(r.color.location),yt.vertexAttribPointer(r.color.location,3,5126,!1,0,0)),gt.disableUnusedAttributes(),yt.drawArrays(4,0,t.count),t.count=0},this.renderBufferDirect=function(t,e,n,r,s,i){null===e&&(e=W);const a=s.isMesh&&s.matrixWorld.determinant()<0,o=zt(t,e,r,s);q.setMaterial(r,a);let l=n.index;const u=n.attributes.position;if(null===l){if(void 0===u||0===u.count)return}else if(0===l.count)return;let c,h=1;!0===r.wireframe&&(l=et.getWireframeAttribute(n),h=2),void 0===n.morphAttributes.position&&void 0===n.morphAttributes.normal||ct.update(s,n,r,o),gt.setup(s,r,o,n,l);let d=ht;null!==l&&(c=tt.get(l),d=pt,d.setIndex(c));const p=null!==l?l.count:u.count,f=n.drawRange.start*h,m=n.drawRange.count*h,g=null!==i?i.start*h:0,y=null!==i?i.count*h:1/0,x=Math.max(f,g),b=Math.min(p,f+m,g+y)-1,v=Math.max(0,b-x+1);if(0!==v){if(s.isMesh)!0===r.wireframe?(q.setLineWidth(r.wireframeLinewidth*G()),d.setMode(1)):d.setMode(4);else if(s.isLine){let t=r.linewidth;void 0===t&&(t=1),q.setLineWidth(t*G()),s.isLineSegments?d.setMode(1):s.isLineLoop?d.setMode(2):d.setMode(3)}else s.isPoints?d.setMode(0):s.isSprite&&d.setMode(4);if(s.isInstancedMesh)d.renderInstances(x,v,s.count);else if(n.isInstancedBufferGeometry){const t=Math.min(n.instanceCount,n._maxInstanceCount);d.renderInstances(x,v,t)}else d.render(x,v)}},this.compile=function(t,e){d=at.get(t),d.init(),y.push(d),t.traverseVisible((function(t){t.isLight&&t.layers.test(e.layers)&&(d.pushLight(t),t.castShadow&&d.pushShadow(t))})),d.setupLights(x.physicallyCorrectLights),t.traverse((function(e){const n=e.material;if(n)if(Array.isArray(n))for(let r=0;r<n.length;r++)$t(n[r],t,e);else $t(n,t,e)})),y.pop(),d=null};let kt=null;function Et(){Ct.stop()}function It(){Ct.start()}const Ct=new Pi;function Rt(t,e,n,r){if(!1===t.visible)return;if(t.layers.test(e.layers))if(t.isGroup)n=t.renderOrder;else if(t.isLOD)!0===t.autoUpdate&&t.update(e);else if(t.isLight)d.pushLight(t),t.castShadow&&d.pushShadow(t);else if(t.isSprite){if(!t.frustumCulled||O.intersectsSprite(t)){r&&V.setFromMatrixPosition(t.matrixWorld).applyMatrix4(U);const e=nt.update(t),s=t.material;s.visible&&h.push(t,e,s,n,V.z,null)}}else if(t.isImmediateRenderObject)r&&V.setFromMatrixPosition(t.matrixWorld).applyMatrix4(U),h.push(t,null,t.material,n,V.z,null);else if((t.isMesh||t.isLine||t.isPoints)&&(t.isSkinnedMesh&&t.skeleton.frame!==X.render.frame&&(t.skeleton.update(),t.skeleton.frame=X.render.frame),!t.frustumCulled||O.intersectsObject(t))){r&&V.setFromMatrixPosition(t.matrixWorld).applyMatrix4(U);const e=nt.update(t),s=t.material;if(Array.isArray(s)){const r=e.groups;for(let i=0,a=r.length;i<a;i++){const a=r[i],o=s[a.materialIndex];o&&o.visible&&h.push(t,e,o,n,V.z,a)}}else s.visible&&h.push(t,e,s,n,V.z,null)}const s=t.children;for(let t=0,i=s.length;t<i;t++)Rt(s[t],e,n,r)}function Lt(t,e,n,r){const s=t.opaque,i=t.transmissive,o=t.transparent;d.setupLightsView(n),i.length>0&&function(t,e,n){if(null===B){const t=!0===a&&!0===j.isWebGL2;B=new(t?ir:rr)(1024,1024,{generateMipmaps:!0,type:null!==mt.convert(At)?At:_t,minFilter:St,magFilter:ft,wrapS:dt,wrapT:dt})}const r=x.getRenderTarget();x.setRenderTarget(B),x.clear();const s=x.toneMapping;x.toneMapping=J,Dt(t,e,n),x.toneMapping=s,Y.updateMultisampleRenderTarget(B),Y.updateRenderTargetMipmap(B),x.setRenderTarget(r)}(s,e,n),r&&q.viewport(M.copy(r)),s.length>0&&Dt(s,e,n),i.length>0&&Dt(i,e,n),o.length>0&&Dt(o,e,n)}function Dt(t,e,n){const r=!0===e.isScene?e.overrideMaterial:null;for(let s=0,i=t.length;s<i;s++){const i=t[s],a=i.object,o=i.geometry,l=null===r?i.material:r,u=i.group;a.layers.test(n.layers)&&Ft(a,e,n,o,l,u)}}function Ft(t,e,n,r,s,i){if(t.onBeforeRender(x,e,n,r,s,i),t.modelViewMatrix.multiplyMatrices(n.matrixWorldInverse,t.matrixWorld),t.normalMatrix.getNormalMatrix(t.modelViewMatrix),t.isImmediateRenderObject){const r=zt(n,e,s,t);q.setMaterial(s),gt.reset(),function(t,e){t.render((function(t){x.renderBufferImmediate(t,e)}))}(t,r)}else!0===s.transparent&&s.side===g?(s.side=m,s.needsUpdate=!0,x.renderBufferDirect(n,e,r,s,t,i),s.side=f,s.needsUpdate=!0,x.renderBufferDirect(n,e,r,s,t,i),s.side=g):x.renderBufferDirect(n,e,r,s,t,i);t.onAfterRender(x,e,n,r,s,i)}function $t(t,e,n){!0!==e.isScene&&(e=W);const r=K.get(t),s=d.state.lights,i=d.state.shadowsArray,a=s.state.version,o=rt.getParameters(t,s.state,i,e,n),l=rt.getProgramCacheKey(o);let u=r.programs;r.environment=t.isMeshStandardMaterial?e.environment:null,r.fog=e.fog,r.envMap=(t.isMeshStandardMaterial?Q:Z).get(t.envMap||r.environment),void 0===u&&(t.addEventListener(\"dispose\",Mt),u=new Map,r.programs=u);let c=u.get(l);if(void 0!==c){if(r.currentProgram===c&&r.lightsStateVersion===a)return Ot(t,o),c}else o.uniforms=rt.getUniforms(t),t.onBuild(o,x),t.onBeforeCompile(o,x),c=rt.acquireProgram(o,l),u.set(l,c),r.uniforms=o.uniforms;const h=r.uniforms;(t.isShaderMaterial||t.isRawShaderMaterial)&&!0!==t.clipping||(h.clippingPlanes=ot.uniform),Ot(t,o),r.needsLights=function(t){return t.isMeshLambertMaterial||t.isMeshToonMaterial||t.isMeshPhongMaterial||t.isMeshStandardMaterial||t.isShadowMaterial||t.isShaderMaterial&&!0===t.lights}(t),r.lightsStateVersion=a,r.needsLights&&(h.ambientLightColor.value=s.state.ambient,h.lightProbe.value=s.state.probe,h.directionalLights.value=s.state.directional,h.directionalLightShadows.value=s.state.directionalShadow,h.spotLights.value=s.state.spot,h.spotLightShadows.value=s.state.spotShadow,h.rectAreaLights.value=s.state.rectArea,h.ltc_1.value=s.state.rectAreaLTC1,h.ltc_2.value=s.state.rectAreaLTC2,h.pointLights.value=s.state.point,h.pointLightShadows.value=s.state.pointShadow,h.hemisphereLights.value=s.state.hemi,h.directionalShadowMap.value=s.state.directionalShadowMap,h.directionalShadowMatrix.value=s.state.directionalShadowMatrix,h.spotShadowMap.value=s.state.spotShadowMap,h.spotShadowMatrix.value=s.state.spotShadowMatrix,h.pointShadowMap.value=s.state.pointShadowMap,h.pointShadowMatrix.value=s.state.pointShadowMatrix);const p=c.getUniforms(),f=Ao.seqWithValue(p.seq,h);return r.currentProgram=c,r.uniformsList=f,c}function Ot(t,e){const n=K.get(t);n.outputEncoding=e.outputEncoding,n.instancing=e.instancing,n.skinning=e.skinning,n.morphTargets=e.morphTargets,n.morphNormals=e.morphNormals,n.numClippingPlanes=e.numClippingPlanes,n.numIntersection=e.numClipIntersection,n.vertexAlphas=e.vertexAlphas,n.vertexTangents=e.vertexTangents}function zt(t,e,n,r){!0!==e.isScene&&(e=W),Y.resetTextureUnits();const s=e.fog,i=n.isMeshStandardMaterial?e.environment:null,a=null===S?x.outputEncoding:S.texture.encoding,o=(n.isMeshStandardMaterial?Q:Z).get(n.envMap||i),l=!0===n.vertexColors&&!!r.geometry&&!!r.geometry.attributes.color&&4===r.geometry.attributes.color.itemSize,u=!!r.geometry&&!!r.geometry.attributes.tangent,c=!!r.geometry&&!!r.geometry.morphAttributes.position,h=!!r.geometry&&!!r.geometry.morphAttributes.normal,p=K.get(n),f=d.state.lights;if(!0===P&&(!0===z||t!==_)){const e=t===_&&n.id===T;ot.setState(n,t,e)}let m=!1;n.version===p.__version?p.needsLights&&p.lightsStateVersion!==f.state.version||p.outputEncoding!==a||r.isInstancedMesh&&!1===p.instancing?m=!0:r.isInstancedMesh||!0!==p.instancing?r.isSkinnedMesh&&!1===p.skinning?m=!0:r.isSkinnedMesh||!0!==p.skinning?p.envMap!==o||n.fog&&p.fog!==s?m=!0:void 0===p.numClippingPlanes||p.numClippingPlanes===ot.numPlanes&&p.numIntersection===ot.numIntersection?(p.vertexAlphas!==l||p.vertexTangents!==u||p.morphTargets!==c||p.morphNormals!==h)&&(m=!0):m=!0:m=!0:m=!0:(m=!0,p.__version=n.version);let g=p.currentProgram;!0===m&&(g=$t(n,e,r));let y=!1,b=!1,v=!1;const w=g.getUniforms(),M=p.uniforms;if(q.useProgram(g.program)&&(y=!0,b=!0,v=!0),n.id!==T&&(T=n.id,b=!0),y||_!==t){if(w.setValue(yt,\"projectionMatrix\",t.projectionMatrix),j.logarithmicDepthBuffer&&w.setValue(yt,\"logDepthBufFC\",2/(Math.log(t.far+1)/Math.LN2)),_!==t&&(_=t,b=!0,v=!0),n.isShaderMaterial||n.isMeshPhongMaterial||n.isMeshToonMaterial||n.isMeshStandardMaterial||n.envMap){const e=w.map.cameraPosition;void 0!==e&&e.setValue(yt,V.setFromMatrixPosition(t.matrixWorld))}(n.isMeshPhongMaterial||n.isMeshToonMaterial||n.isMeshLambertMaterial||n.isMeshBasicMaterial||n.isMeshStandardMaterial||n.isShaderMaterial)&&w.setValue(yt,\"isOrthographic\",!0===t.isOrthographicCamera),(n.isMeshPhongMaterial||n.isMeshToonMaterial||n.isMeshLambertMaterial||n.isMeshBasicMaterial||n.isMeshStandardMaterial||n.isShaderMaterial||n.isShadowMaterial||r.isSkinnedMesh)&&w.setValue(yt,\"viewMatrix\",t.matrixWorldInverse)}if(r.isSkinnedMesh){w.setOptional(yt,r,\"bindMatrix\"),w.setOptional(yt,r,\"bindMatrixInverse\");const t=r.skeleton;t&&(j.floatVertexTextures?(null===t.boneTexture&&t.computeBoneTexture(),w.setValue(yt,\"boneTexture\",t.boneTexture,Y),w.setValue(yt,\"boneTextureSize\",t.boneTextureSize)):w.setOptional(yt,t,\"boneMatrices\"))}var k,E;return(b||p.receiveShadow!==r.receiveShadow)&&(p.receiveShadow=r.receiveShadow,w.setValue(yt,\"receiveShadow\",r.receiveShadow)),b&&(w.setValue(yt,\"toneMappingExposure\",x.toneMappingExposure),p.needsLights&&(E=v,(k=M).ambientLightColor.needsUpdate=E,k.lightProbe.needsUpdate=E,k.directionalLights.needsUpdate=E,k.directionalLightShadows.needsUpdate=E,k.pointLights.needsUpdate=E,k.pointLightShadows.needsUpdate=E,k.spotLights.needsUpdate=E,k.spotLightShadows.needsUpdate=E,k.rectAreaLights.needsUpdate=E,k.hemisphereLights.needsUpdate=E),s&&n.fog&&st.refreshFogUniforms(M,s),st.refreshMaterialUniforms(M,n,N,C,B),Ao.upload(yt,p.uniformsList,M,Y)),n.isShaderMaterial&&!0===n.uniformsNeedUpdate&&(Ao.upload(yt,p.uniformsList,M,Y),n.uniformsNeedUpdate=!1),n.isSpriteMaterial&&w.setValue(yt,\"center\",r.center),w.setValue(yt,\"modelViewMatrix\",r.modelViewMatrix),w.setValue(yt,\"normalMatrix\",r.normalMatrix),w.setValue(yt,\"modelMatrix\",r.matrixWorld),g}Ct.setAnimationLoop((function(t){kt&&kt(t)})),\"undefined\"!=typeof window&&Ct.setContext(window),this.setAnimationLoop=function(t){kt=t,vt.setAnimationLoop(t),null===t?Ct.stop():Ct.start()},vt.addEventListener(\"sessionstart\",Et),vt.addEventListener(\"sessionend\",It),this.render=function(t,e){if(void 0!==e&&!0!==e.isCamera)return void console.error(\"THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.\");if(!0===b)return;!0===t.autoUpdate&&t.updateMatrixWorld(),null===e.parent&&e.updateMatrixWorld(),!0===vt.enabled&&!0===vt.isPresenting&&(!0===vt.cameraAutoUpdate&&vt.updateCamera(e),e=vt.getCamera()),!0===t.isScene&&t.onBeforeRender(x,t,e,S),d=at.get(t,y.length),d.init(),y.push(d),U.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),O.setFromProjectionMatrix(U),z=this.localClippingEnabled,P=ot.init(this.clippingPlanes,z,e),h=it.get(t,p.length),h.init(),p.push(h),Rt(t,e,0,x.sortObjects),h.finish(),!0===x.sortObjects&&h.sort(A,R),!0===P&&ot.beginShadows();const n=d.state.shadowsArray;if(lt.render(n,t,e),!0===P&&ot.endShadows(),!0===this.info.autoReset&&this.info.reset(),ut.render(h,t),d.setupLights(x.physicallyCorrectLights),e.isArrayCamera){const n=e.cameras;for(let e=0,r=n.length;e<r;e++){const r=n[e];Lt(h,t,r,r.viewport)}}else Lt(h,t,e);null!==S&&(Y.updateMultisampleRenderTarget(S),Y.updateRenderTargetMipmap(S)),!0===t.isScene&&t.onAfterRender(x,t,e),q.buffers.depth.setTest(!0),q.buffers.depth.setMask(!0),q.buffers.color.setMask(!0),q.setPolygonOffset(!1),gt.resetDefaultState(),T=-1,_=null,y.pop(),d=y.length>0?y[y.length-1]:null,p.pop(),h=p.length>0?p[p.length-1]:null},this.getActiveCubeFace=function(){return v},this.getActiveMipmapLevel=function(){return w},this.getRenderTarget=function(){return S},this.setRenderTarget=function(t,e=0,n=0){S=t,v=e,w=n,t&&void 0===K.get(t).__webglFramebuffer&&Y.setupRenderTarget(t);let r=null,s=!1,i=!1;if(t){const n=t.texture;(n.isDataTexture3D||n.isDataTexture2DArray)&&(i=!0);const a=K.get(t).__webglFramebuffer;t.isWebGLCubeRenderTarget?(r=a[e],s=!0):r=t.isWebGLMultisampleRenderTarget?K.get(t).__webglMultisampledFramebuffer:a,M.copy(t.viewport),k.copy(t.scissor),E=t.scissorTest}else M.copy(L).multiplyScalar(N).floor(),k.copy(D).multiplyScalar(N).floor(),E=F;if(q.bindFramebuffer(36160,r)&&j.drawBuffers){let e=!1;if(t)if(t.isWebGLMultipleRenderTargets){const n=t.texture;if($.length!==n.length||36064!==$[0]){for(let t=0,e=n.length;t<e;t++)$[t]=36064+t;$.length=n.length,e=!0}}else 1===$.length&&36064===$[0]||($[0]=36064,$.length=1,e=!0);else 1===$.length&&1029===$[0]||($[0]=1029,$.length=1,e=!0);e&&(j.isWebGL2?yt.drawBuffers($):H.get(\"WEBGL_draw_buffers\").drawBuffersWEBGL($))}if(q.viewport(M),q.scissor(k),q.setScissorTest(E),s){const r=K.get(t.texture);yt.framebufferTexture2D(36160,36064,34069+e,r.__webglTexture,n)}else if(i){const r=K.get(t.texture),s=e||0;yt.framebufferTextureLayer(36160,36064,r.__webglTexture,n||0,s)}T=-1},this.readRenderTargetPixels=function(t,e,n,r,s,i,a){if(!t||!t.isWebGLRenderTarget)return void console.error(\"THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.\");let o=K.get(t).__webglFramebuffer;if(t.isWebGLCubeRenderTarget&&void 0!==a&&(o=o[a]),o){q.bindFramebuffer(36160,o);try{const a=t.texture,o=a.format,l=a.type;if(o!==Pt&&mt.convert(o)!==yt.getParameter(35739))return void console.error(\"THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.\");const u=l===At&&(H.has(\"EXT_color_buffer_half_float\")||j.isWebGL2&&H.has(\"EXT_color_buffer_float\"));if(!(l===_t||mt.convert(l)===yt.getParameter(35738)||l===Nt&&(j.isWebGL2||H.has(\"OES_texture_float\")||H.has(\"WEBGL_color_buffer_float\"))||u))return void console.error(\"THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.\");36053===yt.checkFramebufferStatus(36160)?e>=0&&e<=t.width-r&&n>=0&&n<=t.height-s&&yt.readPixels(e,n,r,s,mt.convert(o),mt.convert(l),i):console.error(\"THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.\")}finally{const t=null!==S?K.get(S).__webglFramebuffer:null;q.bindFramebuffer(36160,t)}}},this.copyFramebufferToTexture=function(t,e,n=0){const r=Math.pow(2,-n),s=Math.floor(e.image.width*r),i=Math.floor(e.image.height*r);let a=mt.convert(e.format);j.isWebGL2&&(6407===a&&(a=32849),6408===a&&(a=32856)),Y.setTexture2D(e,0),yt.copyTexImage2D(3553,n,a,t.x,t.y,s,i,0),q.unbindTexture()},this.copyTextureToTexture=function(t,e,n,r=0){const s=e.image.width,i=e.image.height,a=mt.convert(n.format),o=mt.convert(n.type);Y.setTexture2D(n,0),yt.pixelStorei(37440,n.flipY),yt.pixelStorei(37441,n.premultiplyAlpha),yt.pixelStorei(3317,n.unpackAlignment),e.isDataTexture?yt.texSubImage2D(3553,r,t.x,t.y,s,i,a,o,e.image.data):e.isCompressedTexture?yt.compressedTexSubImage2D(3553,r,t.x,t.y,e.mipmaps[0].width,e.mipmaps[0].height,a,e.mipmaps[0].data):yt.texSubImage2D(3553,r,t.x,t.y,a,o,e.image),0===r&&n.generateMipmaps&&yt.generateMipmap(3553),q.unbindTexture()},this.copyTextureToTexture3D=function(t,e,n,r,s=0){if(x.isWebGL1Renderer)return void console.warn(\"THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.\");const i=t.max.x-t.min.x+1,a=t.max.y-t.min.y+1,o=t.max.z-t.min.z+1,l=mt.convert(r.format),u=mt.convert(r.type);let c;if(r.isDataTexture3D)Y.setTexture3D(r,0),c=32879;else{if(!r.isDataTexture2DArray)return void console.warn(\"THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.\");Y.setTexture2DArray(r,0),c=35866}yt.pixelStorei(37440,r.flipY),yt.pixelStorei(37441,r.premultiplyAlpha),yt.pixelStorei(3317,r.unpackAlignment);const h=yt.getParameter(3314),d=yt.getParameter(32878),p=yt.getParameter(3316),f=yt.getParameter(3315),m=yt.getParameter(32877),g=n.isCompressedTexture?n.mipmaps[0]:n.image;yt.pixelStorei(3314,g.width),yt.pixelStorei(32878,g.height),yt.pixelStorei(3316,t.min.x),yt.pixelStorei(3315,t.min.y),yt.pixelStorei(32877,t.min.z),n.isDataTexture||n.isDataTexture3D?yt.texSubImage3D(c,s,e.x,e.y,e.z,i,a,o,l,u,g.data):n.isCompressedTexture?(console.warn(\"THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture.\"),yt.compressedTexSubImage3D(c,s,e.x,e.y,e.z,i,a,o,l,g.data)):yt.texSubImage3D(c,s,e.x,e.y,e.z,i,a,o,l,u,g),yt.pixelStorei(3314,h),yt.pixelStorei(32878,d),yt.pixelStorei(3316,p),yt.pixelStorei(3315,f),yt.pixelStorei(32877,m),0===s&&r.generateMipmaps&&yt.generateMipmap(c),q.unbindTexture()},this.initTexture=function(t){Y.setTexture2D(t,0),q.unbindTexture()},this.resetState=function(){v=0,w=0,S=null,q.reset(),gt.reset()},\"undefined\"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent(\"observe\",{detail:this}))}class Tl extends Sl{}Tl.prototype.isWebGL1Renderer=!0;class _l{constructor(t,e=25e-5){this.name=\"\",this.color=new Cs(t),this.density=e}clone(){return new _l(this.color,this.density)}toJSON(){return{type:\"FogExp2\",color:this.color.getHex(),density:this.density}}}_l.prototype.isFogExp2=!0;class Ml{constructor(t,e=1,n=1e3){this.name=\"\",this.color=new Cs(t),this.near=e,this.far=n}clone(){return new Ml(this.color,this.near,this.far)}toJSON(){return{type:\"Fog\",color:this.color.getHex(),near:this.near,far:this.far}}}Ml.prototype.isFog=!0;class kl extends us{constructor(){super(),this.type=\"Scene\",this.background=null,this.environment=null,this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0,\"undefined\"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent(\"observe\",{detail:this}))}copy(t,e){return super.copy(t,e),null!==t.background&&(this.background=t.background.clone()),null!==t.environment&&(this.environment=t.environment.clone()),null!==t.fog&&(this.fog=t.fog.clone()),null!==t.overrideMaterial&&(this.overrideMaterial=t.overrideMaterial.clone()),this.autoUpdate=t.autoUpdate,this.matrixAutoUpdate=t.matrixAutoUpdate,this}toJSON(t){const e=super.toJSON(t);return null!==this.fog&&(e.object.fog=this.fog.toJSON()),e}}kl.prototype.isScene=!0;class El{constructor(t,e){this.array=t,this.stride=e,this.count=void 0!==t?t.length/e:0,this.usage=Mn,this.updateRange={offset:0,count:-1},this.version=0,this.uuid=Un()}onUploadCallback(){}set needsUpdate(t){!0===t&&this.version++}setUsage(t){return this.usage=t,this}copy(t){return this.array=new t.array.constructor(t.array),this.count=t.count,this.stride=t.stride,this.usage=t.usage,this}copyAt(t,e,n){t*=this.stride,n*=e.stride;for(let r=0,s=this.stride;r<s;r++)this.array[t+r]=e.array[n+r];return this}set(t,e=0){return this.array.set(t,e),this}clone(t){void 0===t.arrayBuffers&&(t.arrayBuffers={}),void 0===this.array.buffer._uuid&&(this.array.buffer._uuid=Un()),void 0===t.arrayBuffers[this.array.buffer._uuid]&&(t.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const e=new this.array.constructor(t.arrayBuffers[this.array.buffer._uuid]),n=new this.constructor(e,this.stride);return n.setUsage(this.usage),n}onUpload(t){return this.onUploadCallback=t,this}toJSON(t){return void 0===t.arrayBuffers&&(t.arrayBuffers={}),void 0===this.array.buffer._uuid&&(this.array.buffer._uuid=Un()),void 0===t.arrayBuffers[this.array.buffer._uuid]&&(t.arrayBuffers[this.array.buffer._uuid]=Array.prototype.slice.call(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}}El.prototype.isInterleavedBuffer=!0;const Il=new or;class Cl{constructor(t,e,n,r=!1){this.name=\"\",this.data=t,this.itemSize=e,this.offset=n,this.normalized=!0===r}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(t){this.data.needsUpdate=t}applyMatrix4(t){for(let e=0,n=this.data.count;e<n;e++)Il.x=this.getX(e),Il.y=this.getY(e),Il.z=this.getZ(e),Il.applyMatrix4(t),this.setXYZ(e,Il.x,Il.y,Il.z);return this}applyNormalMatrix(t){for(let e=0,n=this.count;e<n;e++)Il.x=this.getX(e),Il.y=this.getY(e),Il.z=this.getZ(e),Il.applyNormalMatrix(t),this.setXYZ(e,Il.x,Il.y,Il.z);return this}transformDirection(t){for(let e=0,n=this.count;e<n;e++)Il.x=this.getX(e),Il.y=this.getY(e),Il.z=this.getZ(e),Il.transformDirection(t),this.setXYZ(e,Il.x,Il.y,Il.z);return this}setX(t,e){return this.data.array[t*this.data.stride+this.offset]=e,this}setY(t,e){return this.data.array[t*this.data.stride+this.offset+1]=e,this}setZ(t,e){return this.data.array[t*this.data.stride+this.offset+2]=e,this}setW(t,e){return this.data.array[t*this.data.stride+this.offset+3]=e,this}getX(t){return this.data.array[t*this.data.stride+this.offset]}getY(t){return this.data.array[t*this.data.stride+this.offset+1]}getZ(t){return this.data.array[t*this.data.stride+this.offset+2]}getW(t){return this.data.array[t*this.data.stride+this.offset+3]}setXY(t,e,n){return t=t*this.data.stride+this.offset,this.data.array[t+0]=e,this.data.array[t+1]=n,this}setXYZ(t,e,n,r){return t=t*this.data.stride+this.offset,this.data.array[t+0]=e,this.data.array[t+1]=n,this.data.array[t+2]=r,this}setXYZW(t,e,n,r,s){return t=t*this.data.stride+this.offset,this.data.array[t+0]=e,this.data.array[t+1]=n,this.data.array[t+2]=r,this.data.array[t+3]=s,this}clone(t){if(void 0===t){console.log(\"THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.\");const t=[];for(let e=0;e<this.count;e++){const n=e*this.data.stride+this.offset;for(let e=0;e<this.itemSize;e++)t.push(this.data.array[n+e])}return new Ls(new this.array.constructor(t),this.itemSize,this.normalized)}return void 0===t.interleavedBuffers&&(t.interleavedBuffers={}),void 0===t.interleavedBuffers[this.data.uuid]&&(t.interleavedBuffers[this.data.uuid]=this.data.clone(t)),new Cl(t.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(t){if(void 0===t){console.log(\"THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.\");const t=[];for(let e=0;e<this.count;e++){const n=e*this.data.stride+this.offset;for(let e=0;e<this.itemSize;e++)t.push(this.data.array[n+e])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:t,normalized:this.normalized}}return void 0===t.interleavedBuffers&&(t.interleavedBuffers={}),void 0===t.interleavedBuffers[this.data.uuid]&&(t.interleavedBuffers[this.data.uuid]=this.data.toJSON(t)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}}Cl.prototype.isInterleavedBufferAttribute=!0;class Nl extends Ss{constructor(t){super(),this.type=\"SpriteMaterial\",this.color=new Cs(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.alphaMap=t.alphaMap,this.rotation=t.rotation,this.sizeAttenuation=t.sizeAttenuation,this}}let Al;Nl.prototype.isSpriteMaterial=!0;const Rl=new or,Ll=new or,Dl=new or,Fl=new Kn,$l=new Kn,Ol=new Pr,Pl=new or,zl=new or,Bl=new or,Ul=new Kn,Vl=new Kn,Wl=new Kn;class Gl extends us{constructor(t){if(super(),this.type=\"Sprite\",void 0===Al){Al=new ti;const t=new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),e=new El(t,5);Al.setIndex([0,1,2,0,2,3]),Al.setAttribute(\"position\",new Cl(e,3,0,!1)),Al.setAttribute(\"uv\",new Cl(e,2,3,!1))}this.geometry=Al,this.material=void 0!==t?t:new Nl,this.center=new Kn(.5,.5)}raycast(t,e){null===t.camera&&console.error('THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.'),Ll.setFromMatrixScale(this.matrixWorld),Ol.copy(t.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(t.camera.matrixWorldInverse,this.matrixWorld),Dl.setFromMatrixPosition(this.modelViewMatrix),t.camera.isPerspectiveCamera&&!1===this.material.sizeAttenuation&&Ll.multiplyScalar(-Dl.z);const n=this.material.rotation;let r,s;0!==n&&(s=Math.cos(n),r=Math.sin(n));const i=this.center;Hl(Pl.set(-.5,-.5,0),Dl,i,Ll,r,s),Hl(zl.set(.5,-.5,0),Dl,i,Ll,r,s),Hl(Bl.set(.5,.5,0),Dl,i,Ll,r,s),Ul.set(0,0),Vl.set(1,0),Wl.set(1,1);let a=t.ray.intersectTriangle(Pl,zl,Bl,!1,Rl);if(null===a&&(Hl(zl.set(-.5,.5,0),Dl,i,Ll,r,s),Vl.set(0,1),a=t.ray.intersectTriangle(Pl,Bl,zl,!1,Rl),null===a))return;const o=t.ray.origin.distanceTo(Rl);o<t.near||o>t.far||e.push({distance:o,point:Rl.clone(),uv:vs.getUV(Rl,Pl,zl,Bl,Ul,Vl,Wl,new Kn),face:null,object:this})}copy(t){return super.copy(t),void 0!==t.center&&this.center.copy(t.center),this.material=t.material,this}}function Hl(t,e,n,r,s,i){Fl.subVectors(t,n).addScalar(.5).multiply(r),void 0!==s?($l.x=i*Fl.x-s*Fl.y,$l.y=s*Fl.x+i*Fl.y):$l.copy(Fl),t.copy(e),t.x+=$l.x,t.y+=$l.y,t.applyMatrix4(Ol)}Gl.prototype.isSprite=!0;const jl=new or,ql=new or;class Xl extends us{constructor(){super(),this._currentLevel=0,this.type=\"LOD\",Object.defineProperties(this,{levels:{enumerable:!0,value:[]},isLOD:{value:!0}}),this.autoUpdate=!0}copy(t){super.copy(t,!1);const e=t.levels;for(let t=0,n=e.length;t<n;t++){const n=e[t];this.addLevel(n.object.clone(),n.distance)}return this.autoUpdate=t.autoUpdate,this}addLevel(t,e=0){e=Math.abs(e);const n=this.levels;let r;for(r=0;r<n.length&&!(e<n[r].distance);r++);return n.splice(r,0,{distance:e,object:t}),this.add(t),this}getCurrentLevel(){return this._currentLevel}getObjectForDistance(t){const e=this.levels;if(e.length>0){let n,r;for(n=1,r=e.length;n<r&&!(t<e[n].distance);n++);return e[n-1].object}return null}raycast(t,e){if(this.levels.length>0){jl.setFromMatrixPosition(this.matrixWorld);const n=t.ray.origin.distanceTo(jl);this.getObjectForDistance(n).raycast(t,e)}}update(t){const e=this.levels;if(e.length>1){jl.setFromMatrixPosition(t.matrixWorld),ql.setFromMatrixPosition(this.matrixWorld);const n=jl.distanceTo(ql)/t.zoom;let r,s;for(e[0].object.visible=!0,r=1,s=e.length;r<s&&n>=e[r].distance;r++)e[r-1].object.visible=!1,e[r].object.visible=!0;for(this._currentLevel=r-1;r<s;r++)e[r].object.visible=!1}}toJSON(t){const e=super.toJSON(t);!1===this.autoUpdate&&(e.object.autoUpdate=!1),e.object.levels=[];const n=this.levels;for(let t=0,r=n.length;t<r;t++){const r=n[t];e.object.levels.push({object:r.object.uuid,distance:r.distance})}return e}}const Kl=new or,Yl=new nr,Zl=new nr,Jl=new or,Ql=new Pr;class tu extends xi{constructor(t,e){super(t,e),this.type=\"SkinnedMesh\",this.bindMode=\"attached\",this.bindMatrix=new Pr,this.bindMatrixInverse=new Pr}copy(t){return super.copy(t),this.bindMode=t.bindMode,this.bindMatrix.copy(t.bindMatrix),this.bindMatrixInverse.copy(t.bindMatrixInverse),this.skeleton=t.skeleton,this}bind(t,e){this.skeleton=t,void 0===e&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),e=this.matrixWorld),this.bindMatrix.copy(e),this.bindMatrixInverse.copy(e).invert()}pose(){this.skeleton.pose()}normalizeSkinWeights(){const t=new nr,e=this.geometry.attributes.skinWeight;for(let n=0,r=e.count;n<r;n++){t.x=e.getX(n),t.y=e.getY(n),t.z=e.getZ(n),t.w=e.getW(n);const r=1/t.manhattanLength();r!==1/0?t.multiplyScalar(r):t.set(1,0,0,0),e.setXYZW(n,t.x,t.y,t.z,t.w)}}updateMatrixWorld(t){super.updateMatrixWorld(t),\"attached\"===this.bindMode?this.bindMatrixInverse.copy(this.matrixWorld).invert():\"detached\"===this.bindMode?this.bindMatrixInverse.copy(this.bindMatrix).invert():console.warn(\"THREE.SkinnedMesh: Unrecognized bindMode: \"+this.bindMode)}boneTransform(t,e){const n=this.skeleton,r=this.geometry;Yl.fromBufferAttribute(r.attributes.skinIndex,t),Zl.fromBufferAttribute(r.attributes.skinWeight,t),Kl.fromBufferAttribute(r.attributes.position,t).applyMatrix4(this.bindMatrix),e.set(0,0,0);for(let t=0;t<4;t++){const r=Zl.getComponent(t);if(0!==r){const s=Yl.getComponent(t);Ql.multiplyMatrices(n.bones[s].matrixWorld,n.boneInverses[s]),e.addScaledVector(Jl.copy(Kl).applyMatrix4(Ql),r)}}return e.applyMatrix4(this.bindMatrixInverse)}}tu.prototype.isSkinnedMesh=!0;class eu extends us{constructor(){super(),this.type=\"Bone\"}}eu.prototype.isBone=!0;class nu extends tr{constructor(t=null,e=1,n=1,r,s,i,a,o,l=ft,u=ft,c,h){super(null,i,a,o,l,u,r,s,c,h),this.image={data:t,width:e,height:n},this.magFilter=l,this.minFilter=u,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}}nu.prototype.isDataTexture=!0;const ru=new Pr,su=new Pr;class iu{constructor(t=[],e=[]){this.uuid=Un(),this.bones=t.slice(0),this.boneInverses=e,this.boneMatrices=null,this.boneTexture=null,this.boneTextureSize=0,this.frame=-1,this.init()}init(){const t=this.bones,e=this.boneInverses;if(this.boneMatrices=new Float32Array(16*t.length),0===e.length)this.calculateInverses();else if(t.length!==e.length){console.warn(\"THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.\"),this.boneInverses=[];for(let t=0,e=this.bones.length;t<e;t++)this.boneInverses.push(new Pr)}}calculateInverses(){this.boneInverses.length=0;for(let t=0,e=this.bones.length;t<e;t++){const e=new Pr;this.bones[t]&&e.copy(this.bones[t].matrixWorld).invert(),this.boneInverses.push(e)}}pose(){for(let t=0,e=this.bones.length;t<e;t++){const e=this.bones[t];e&&e.matrixWorld.copy(this.boneInverses[t]).invert()}for(let t=0,e=this.bones.length;t<e;t++){const e=this.bones[t];e&&(e.parent&&e.parent.isBone?(e.matrix.copy(e.parent.matrixWorld).invert(),e.matrix.multiply(e.matrixWorld)):e.matrix.copy(e.matrixWorld),e.matrix.decompose(e.position,e.quaternion,e.scale))}}update(){const t=this.bones,e=this.boneInverses,n=this.boneMatrices,r=this.boneTexture;for(let r=0,s=t.length;r<s;r++){const s=t[r]?t[r].matrixWorld:su;ru.multiplyMatrices(s,e[r]),ru.toArray(n,16*r)}null!==r&&(r.needsUpdate=!0)}clone(){return new iu(this.bones,this.boneInverses)}computeBoneTexture(){let t=Math.sqrt(4*this.bones.length);t=jn(t),t=Math.max(t,4);const e=new Float32Array(t*t*4);e.set(this.boneMatrices);const n=new nu(e,t,t,Pt,Nt);return this.boneMatrices=e,this.boneTexture=n,this.boneTextureSize=t,this}getBoneByName(t){for(let e=0,n=this.bones.length;e<n;e++){const n=this.bones[e];if(n.name===t)return n}}dispose(){null!==this.boneTexture&&(this.boneTexture.dispose(),this.boneTexture=null)}fromJSON(t,e){this.uuid=t.uuid;for(let n=0,r=t.bones.length;n<r;n++){const r=t.bones[n];let s=e[r];void 0===s&&(console.warn(\"THREE.Skeleton: No bone found with UUID:\",r),s=new eu),this.bones.push(s),this.boneInverses.push((new Pr).fromArray(t.boneInverses[n]))}return this.init(),this}toJSON(){const t={metadata:{version:4.5,type:\"Skeleton\",generator:\"Skeleton.toJSON\"},bones:[],boneInverses:[]};t.uuid=this.uuid;const e=this.bones,n=this.boneInverses;for(let r=0,s=e.length;r<s;r++){const s=e[r];t.bones.push(s.uuid);const i=n[r];t.boneInverses.push(i.toArray())}return t}}class au extends Ls{constructor(t,e,n,r=1){\"number\"==typeof n&&(r=n,n=!1,console.error(\"THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.\")),super(t,e,n),this.meshPerAttribute=r}copy(t){return super.copy(t),this.meshPerAttribute=t.meshPerAttribute,this}toJSON(){const t=super.toJSON();return t.meshPerAttribute=this.meshPerAttribute,t.isInstancedBufferAttribute=!0,t}}au.prototype.isInstancedBufferAttribute=!0;const ou=new Pr,lu=new Pr,uu=[],cu=new xi;class hu extends xi{constructor(t,e,n){super(t,e),this.instanceMatrix=new au(new Float32Array(16*n),16),this.instanceColor=null,this.count=n,this.frustumCulled=!1}copy(t){return super.copy(t),this.instanceMatrix.copy(t.instanceMatrix),null!==t.instanceColor&&(this.instanceColor=t.instanceColor.clone()),this.count=t.count,this}getColorAt(t,e){e.fromArray(this.instanceColor.array,3*t)}getMatrixAt(t,e){e.fromArray(this.instanceMatrix.array,16*t)}raycast(t,e){const n=this.matrixWorld,r=this.count;if(cu.geometry=this.geometry,cu.material=this.material,void 0!==cu.material)for(let s=0;s<r;s++){this.getMatrixAt(s,ou),lu.multiplyMatrices(n,ou),cu.matrixWorld=lu,cu.raycast(t,uu);for(let t=0,n=uu.length;t<n;t++){const n=uu[t];n.instanceId=s,n.object=this,e.push(n)}uu.length=0}}setColorAt(t,e){null===this.instanceColor&&(this.instanceColor=new au(new Float32Array(3*this.instanceMatrix.count),3)),e.toArray(this.instanceColor.array,3*t)}setMatrixAt(t,e){e.toArray(this.instanceMatrix.array,16*t)}updateMorphTargets(){}dispose(){this.dispatchEvent({type:\"dispose\"})}}hu.prototype.isInstancedMesh=!0;class du extends Ss{constructor(t){super(),this.type=\"LineBasicMaterial\",this.color=new Cs(16777215),this.linewidth=1,this.linecap=\"round\",this.linejoin=\"round\",this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.linewidth=t.linewidth,this.linecap=t.linecap,this.linejoin=t.linejoin,this}}du.prototype.isLineBasicMaterial=!0;const pu=new or,fu=new or,mu=new Pr,gu=new Or,yu=new Cr;class xu extends us{constructor(t=new ti,e=new du){super(),this.type=\"Line\",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t){return super.copy(t),this.material=t.material,this.geometry=t.geometry,this}computeLineDistances(){const t=this.geometry;if(t.isBufferGeometry)if(null===t.index){const e=t.attributes.position,n=[0];for(let t=1,r=e.count;t<r;t++)pu.fromBufferAttribute(e,t-1),fu.fromBufferAttribute(e,t),n[t]=n[t-1],n[t]+=pu.distanceTo(fu);t.setAttribute(\"lineDistance\",new Vs(n,1))}else console.warn(\"THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.\");else t.isGeometry&&console.error(\"THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.\");return this}raycast(t,e){const n=this.geometry,r=this.matrixWorld,s=t.params.Line.threshold,i=n.drawRange;if(null===n.boundingSphere&&n.computeBoundingSphere(),yu.copy(n.boundingSphere),yu.applyMatrix4(r),yu.radius+=s,!1===t.ray.intersectsSphere(yu))return;mu.copy(r).invert(),gu.copy(t.ray).applyMatrix4(mu);const a=s/((this.scale.x+this.scale.y+this.scale.z)/3),o=a*a,l=new or,u=new or,c=new or,h=new or,d=this.isLineSegments?2:1;if(n.isBufferGeometry){const r=n.index,s=n.attributes.position;if(null!==r)for(let n=Math.max(0,i.start),a=Math.min(r.count,i.start+i.count)-1;n<a;n+=d){const i=r.getX(n),a=r.getX(n+1);if(l.fromBufferAttribute(s,i),u.fromBufferAttribute(s,a),gu.distanceSqToSegment(l,u,h,c)>o)continue;h.applyMatrix4(this.matrixWorld);const d=t.ray.origin.distanceTo(h);d<t.near||d>t.far||e.push({distance:d,point:c.clone().applyMatrix4(this.matrixWorld),index:n,face:null,faceIndex:null,object:this})}else for(let n=Math.max(0,i.start),r=Math.min(s.count,i.start+i.count)-1;n<r;n+=d){if(l.fromBufferAttribute(s,n),u.fromBufferAttribute(s,n+1),gu.distanceSqToSegment(l,u,h,c)>o)continue;h.applyMatrix4(this.matrixWorld);const r=t.ray.origin.distanceTo(h);r<t.near||r>t.far||e.push({distance:r,point:c.clone().applyMatrix4(this.matrixWorld),index:n,face:null,faceIndex:null,object:this})}}else n.isGeometry&&console.error(\"THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.\")}updateMorphTargets(){const t=this.geometry;if(t.isBufferGeometry){const e=t.morphAttributes,n=Object.keys(e);if(n.length>0){const t=e[n[0]];if(void 0!==t){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let e=0,n=t.length;e<n;e++){const n=t[e].name||String(e);this.morphTargetInfluences.push(0),this.morphTargetDictionary[n]=e}}}}else{const e=t.morphTargets;void 0!==e&&e.length>0&&console.error(\"THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.\")}}}xu.prototype.isLine=!0;const bu=new or,vu=new or;class wu extends xu{constructor(t,e){super(t,e),this.type=\"LineSegments\"}computeLineDistances(){const t=this.geometry;if(t.isBufferGeometry)if(null===t.index){const e=t.attributes.position,n=[];for(let t=0,r=e.count;t<r;t+=2)bu.fromBufferAttribute(e,t),vu.fromBufferAttribute(e,t+1),n[t]=0===t?0:n[t-1],n[t+1]=n[t]+bu.distanceTo(vu);t.setAttribute(\"lineDistance\",new Vs(n,1))}else console.warn(\"THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.\");else t.isGeometry&&console.error(\"THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.\");return this}}wu.prototype.isLineSegments=!0;class Su extends xu{constructor(t,e){super(t,e),this.type=\"LineLoop\"}}Su.prototype.isLineLoop=!0;class Tu extends Ss{constructor(t){super(),this.type=\"PointsMaterial\",this.color=new Cs(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.alphaMap=t.alphaMap,this.size=t.size,this.sizeAttenuation=t.sizeAttenuation,this}}Tu.prototype.isPointsMaterial=!0;const _u=new Pr,Mu=new Or,ku=new Cr,Eu=new or;class Iu extends us{constructor(t=new ti,e=new Tu){super(),this.type=\"Points\",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t){return super.copy(t),this.material=t.material,this.geometry=t.geometry,this}raycast(t,e){const n=this.geometry,r=this.matrixWorld,s=t.params.Points.threshold,i=n.drawRange;if(null===n.boundingSphere&&n.computeBoundingSphere(),ku.copy(n.boundingSphere),ku.applyMatrix4(r),ku.radius+=s,!1===t.ray.intersectsSphere(ku))return;_u.copy(r).invert(),Mu.copy(t.ray).applyMatrix4(_u);const a=s/((this.scale.x+this.scale.y+this.scale.z)/3),o=a*a;if(n.isBufferGeometry){const s=n.index,a=n.attributes.position;if(null!==s)for(let n=Math.max(0,i.start),l=Math.min(s.count,i.start+i.count);n<l;n++){const i=s.getX(n);Eu.fromBufferAttribute(a,i),Cu(Eu,i,o,r,t,e,this)}else for(let n=Math.max(0,i.start),s=Math.min(a.count,i.start+i.count);n<s;n++)Eu.fromBufferAttribute(a,n),Cu(Eu,n,o,r,t,e,this)}else console.error(\"THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.\")}updateMorphTargets(){const t=this.geometry;if(t.isBufferGeometry){const e=t.morphAttributes,n=Object.keys(e);if(n.length>0){const t=e[n[0]];if(void 0!==t){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let e=0,n=t.length;e<n;e++){const n=t[e].name||String(e);this.morphTargetInfluences.push(0),this.morphTargetDictionary[n]=e}}}}else{const e=t.morphTargets;void 0!==e&&e.length>0&&console.error(\"THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.\")}}}function Cu(t,e,n,r,s,i,a){const o=Mu.distanceSqToPoint(t);if(o<n){const n=new or;Mu.closestPointToPoint(t,n),n.applyMatrix4(r);const l=s.ray.origin.distanceTo(n);if(l<s.near||l>s.far)return;i.push({distance:l,distanceToRay:Math.sqrt(o),point:n,index:e,face:null,object:a})}}Iu.prototype.isPoints=!0;class Nu extends tr{constructor(t,e,n,r,s,i,a,o,l){super(t,e,n,r,s,i,a,o,l),this.format=void 0!==a?a:Ot,this.minFilter=void 0!==i?i:bt,this.magFilter=void 0!==s?s:bt,this.generateMipmaps=!1;const u=this;\"requestVideoFrameCallback\"in t&&t.requestVideoFrameCallback((function e(){u.needsUpdate=!0,t.requestVideoFrameCallback(e)}))}clone(){return new this.constructor(this.image).copy(this)}update(){const t=this.image;!1==\"requestVideoFrameCallback\"in t&&t.readyState>=t.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}}Nu.prototype.isVideoTexture=!0;class Au extends tr{constructor(t,e,n,r,s,i,a,o,l,u,c,h){super(null,i,a,o,l,u,r,s,c,h),this.image={width:e,height:n},this.mipmaps=t,this.flipY=!1,this.generateMipmaps=!1}}Au.prototype.isCompressedTexture=!0;class Ru extends tr{constructor(t,e,n,r,s,i,a,o,l){super(t,e,n,r,s,i,a,o,l),this.needsUpdate=!0}}Ru.prototype.isCanvasTexture=!0;class Lu extends tr{constructor(t,e,n,r,s,i,a,o,l,u){if((u=void 0!==u?u:Vt)!==Vt&&u!==Wt)throw new Error(\"DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat\");void 0===n&&u===Vt&&(n=Et),void 0===n&&u===Wt&&(n=Ft),super(null,r,s,i,a,o,u,n,l),this.image={width:t,height:e},this.magFilter=void 0!==a?a:ft,this.minFilter=void 0!==o?o:ft,this.flipY=!1,this.generateMipmaps=!1}}Lu.prototype.isDepthTexture=!0;class Du extends ti{constructor(t=1,e=8,n=0,r=2*Math.PI){super(),this.type=\"CircleGeometry\",this.parameters={radius:t,segments:e,thetaStart:n,thetaLength:r},e=Math.max(3,e);const s=[],i=[],a=[],o=[],l=new or,u=new Kn;i.push(0,0,0),a.push(0,0,1),o.push(.5,.5);for(let s=0,c=3;s<=e;s++,c+=3){const h=n+s/e*r;l.x=t*Math.cos(h),l.y=t*Math.sin(h),i.push(l.x,l.y,l.z),a.push(0,0,1),u.x=(i[c]/t+1)/2,u.y=(i[c+1]/t+1)/2,o.push(u.x,u.y)}for(let t=1;t<=e;t++)s.push(t,t+1,0);this.setIndex(s),this.setAttribute(\"position\",new Vs(i,3)),this.setAttribute(\"normal\",new Vs(a,3)),this.setAttribute(\"uv\",new Vs(o,2))}static fromJSON(t){return new Du(t.radius,t.segments,t.thetaStart,t.thetaLength)}}class Fu extends ti{constructor(t=1,e=1,n=1,r=8,s=1,i=!1,a=0,o=2*Math.PI){super(),this.type=\"CylinderGeometry\",this.parameters={radiusTop:t,radiusBottom:e,height:n,radialSegments:r,heightSegments:s,openEnded:i,thetaStart:a,thetaLength:o};const l=this;r=Math.floor(r),s=Math.floor(s);const u=[],c=[],h=[],d=[];let p=0;const f=[],m=n/2;let g=0;function y(n){const s=p,i=new Kn,f=new or;let y=0;const x=!0===n?t:e,b=!0===n?1:-1;for(let t=1;t<=r;t++)c.push(0,m*b,0),h.push(0,b,0),d.push(.5,.5),p++;const v=p;for(let t=0;t<=r;t++){const e=t/r*o+a,n=Math.cos(e),s=Math.sin(e);f.x=x*s,f.y=m*b,f.z=x*n,c.push(f.x,f.y,f.z),h.push(0,b,0),i.x=.5*n+.5,i.y=.5*s*b+.5,d.push(i.x,i.y),p++}for(let t=0;t<r;t++){const e=s+t,r=v+t;!0===n?u.push(r,r+1,e):u.push(r+1,r,e),y+=3}l.addGroup(g,y,!0===n?1:2),g+=y}!function(){const i=new or,y=new or;let x=0;const b=(e-t)/n;for(let l=0;l<=s;l++){const u=[],g=l/s,x=g*(e-t)+t;for(let t=0;t<=r;t++){const e=t/r,s=e*o+a,l=Math.sin(s),f=Math.cos(s);y.x=x*l,y.y=-g*n+m,y.z=x*f,c.push(y.x,y.y,y.z),i.set(l,b,f).normalize(),h.push(i.x,i.y,i.z),d.push(e,1-g),u.push(p++)}f.push(u)}for(let t=0;t<r;t++)for(let e=0;e<s;e++){const n=f[e][t],r=f[e+1][t],s=f[e+1][t+1],i=f[e][t+1];u.push(n,r,i),u.push(r,s,i),x+=6}l.addGroup(g,x,0),g+=x}(),!1===i&&(t>0&&y(!0),e>0&&y(!1)),this.setIndex(u),this.setAttribute(\"position\",new Vs(c,3)),this.setAttribute(\"normal\",new Vs(h,3)),this.setAttribute(\"uv\",new Vs(d,2))}static fromJSON(t){return new Fu(t.radiusTop,t.radiusBottom,t.height,t.radialSegments,t.heightSegments,t.openEnded,t.thetaStart,t.thetaLength)}}class $u extends Fu{constructor(t=1,e=1,n=8,r=1,s=!1,i=0,a=2*Math.PI){super(0,t,e,n,r,s,i,a),this.type=\"ConeGeometry\",this.parameters={radius:t,height:e,radialSegments:n,heightSegments:r,openEnded:s,thetaStart:i,thetaLength:a}}static fromJSON(t){return new $u(t.radius,t.height,t.radialSegments,t.heightSegments,t.openEnded,t.thetaStart,t.thetaLength)}}class Ou extends ti{constructor(t,e,n=1,r=0){super(),this.type=\"PolyhedronGeometry\",this.parameters={vertices:t,indices:e,radius:n,detail:r};const s=[],i=[];function a(t,e,n,r){const s=r+1,i=[];for(let r=0;r<=s;r++){i[r]=[];const a=t.clone().lerp(n,r/s),o=e.clone().lerp(n,r/s),l=s-r;for(let t=0;t<=l;t++)i[r][t]=0===t&&r===s?a:a.clone().lerp(o,t/l)}for(let t=0;t<s;t++)for(let e=0;e<2*(s-t)-1;e++){const n=Math.floor(e/2);e%2==0?(o(i[t][n+1]),o(i[t+1][n]),o(i[t][n])):(o(i[t][n+1]),o(i[t+1][n+1]),o(i[t+1][n]))}}function o(t){s.push(t.x,t.y,t.z)}function l(e,n){const r=3*e;n.x=t[r+0],n.y=t[r+1],n.z=t[r+2]}function u(t,e,n,r){r<0&&1===t.x&&(i[e]=t.x-1),0===n.x&&0===n.z&&(i[e]=r/2/Math.PI+.5)}function c(t){return Math.atan2(t.z,-t.x)}!function(t){const n=new or,r=new or,s=new or;for(let i=0;i<e.length;i+=3)l(e[i+0],n),l(e[i+1],r),l(e[i+2],s),a(n,r,s,t)}(r),function(t){const e=new or;for(let n=0;n<s.length;n+=3)e.x=s[n+0],e.y=s[n+1],e.z=s[n+2],e.normalize().multiplyScalar(t),s[n+0]=e.x,s[n+1]=e.y,s[n+2]=e.z}(n),function(){const t=new or;for(let n=0;n<s.length;n+=3){t.x=s[n+0],t.y=s[n+1],t.z=s[n+2];const r=c(t)/2/Math.PI+.5,a=(e=t,Math.atan2(-e.y,Math.sqrt(e.x*e.x+e.z*e.z))/Math.PI+.5);i.push(r,1-a)}var e;(function(){const t=new or,e=new or,n=new or,r=new or,a=new Kn,o=new Kn,l=new Kn;for(let h=0,d=0;h<s.length;h+=9,d+=6){t.set(s[h+0],s[h+1],s[h+2]),e.set(s[h+3],s[h+4],s[h+5]),n.set(s[h+6],s[h+7],s[h+8]),a.set(i[d+0],i[d+1]),o.set(i[d+2],i[d+3]),l.set(i[d+4],i[d+5]),r.copy(t).add(e).add(n).divideScalar(3);const p=c(r);u(a,d+0,t,p),u(o,d+2,e,p),u(l,d+4,n,p)}})(),function(){for(let t=0;t<i.length;t+=6){const e=i[t+0],n=i[t+2],r=i[t+4],s=Math.max(e,n,r),a=Math.min(e,n,r);s>.9&&a<.1&&(e<.2&&(i[t+0]+=1),n<.2&&(i[t+2]+=1),r<.2&&(i[t+4]+=1))}}()}(),this.setAttribute(\"position\",new Vs(s,3)),this.setAttribute(\"normal\",new Vs(s.slice(),3)),this.setAttribute(\"uv\",new Vs(i,2)),0===r?this.computeVertexNormals():this.normalizeNormals()}static fromJSON(t){return new Ou(t.vertices,t.indices,t.radius,t.details)}}class Pu extends Ou{constructor(t=1,e=0){const n=(1+Math.sqrt(5))/2,r=1/n;super([-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-r,-n,0,-r,n,0,r,-n,0,r,n,-r,-n,0,-r,n,0,r,-n,0,r,n,0,-n,0,-r,n,0,-r,-n,0,r,n,0,r],[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9],t,e),this.type=\"DodecahedronGeometry\",this.parameters={radius:t,detail:e}}static fromJSON(t){return new Pu(t.radius,t.detail)}}const zu=new or,Bu=new or,Uu=new or,Vu=new vs;class Wu extends ti{constructor(t,e){if(super(),this.type=\"EdgesGeometry\",this.parameters={thresholdAngle:e},e=void 0!==e?e:1,!0===t.isGeometry)return void console.error(\"THREE.EdgesGeometry no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.\");const n=Math.pow(10,4),r=Math.cos(zn*e),s=t.getIndex(),i=t.getAttribute(\"position\"),a=s?s.count:i.count,o=[0,0,0],l=[\"a\",\"b\",\"c\"],u=new Array(3),c={},h=[];for(let t=0;t<a;t+=3){s?(o[0]=s.getX(t),o[1]=s.getX(t+1),o[2]=s.getX(t+2)):(o[0]=t,o[1]=t+1,o[2]=t+2);const{a:e,b:a,c:d}=Vu;if(e.fromBufferAttribute(i,o[0]),a.fromBufferAttribute(i,o[1]),d.fromBufferAttribute(i,o[2]),Vu.getNormal(Uu),u[0]=`${Math.round(e.x*n)},${Math.round(e.y*n)},${Math.round(e.z*n)}`,u[1]=`${Math.round(a.x*n)},${Math.round(a.y*n)},${Math.round(a.z*n)}`,u[2]=`${Math.round(d.x*n)},${Math.round(d.y*n)},${Math.round(d.z*n)}`,u[0]!==u[1]&&u[1]!==u[2]&&u[2]!==u[0])for(let t=0;t<3;t++){const e=(t+1)%3,n=u[t],s=u[e],i=Vu[l[t]],a=Vu[l[e]],d=`${n}_${s}`,p=`${s}_${n}`;p in c&&c[p]?(Uu.dot(c[p].normal)<=r&&(h.push(i.x,i.y,i.z),h.push(a.x,a.y,a.z)),c[p]=null):d in c||(c[d]={index0:o[t],index1:o[e],normal:Uu.clone()})}}for(const t in c)if(c[t]){const{index0:e,index1:n}=c[t];zu.fromBufferAttribute(i,e),Bu.fromBufferAttribute(i,n),h.push(zu.x,zu.y,zu.z),h.push(Bu.x,Bu.y,Bu.z)}this.setAttribute(\"position\",new Vs(h,3))}}class Gu{constructor(){this.type=\"Curve\",this.arcLengthDivisions=200}getPoint(){return console.warn(\"THREE.Curve: .getPoint() not implemented.\"),null}getPointAt(t,e){const n=this.getUtoTmapping(t);return this.getPoint(n,e)}getPoints(t=5){const e=[];for(let n=0;n<=t;n++)e.push(this.getPoint(n/t));return e}getSpacedPoints(t=5){const e=[];for(let n=0;n<=t;n++)e.push(this.getPointAt(n/t));return e}getLength(){const t=this.getLengths();return t[t.length-1]}getLengths(t=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===t+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;const e=[];let n,r=this.getPoint(0),s=0;e.push(0);for(let i=1;i<=t;i++)n=this.getPoint(i/t),s+=n.distanceTo(r),e.push(s),r=n;return this.cacheArcLengths=e,e}updateArcLengths(){this.needsUpdate=!0,this.getLengths()}getUtoTmapping(t,e){const n=this.getLengths();let r=0;const s=n.length;let i;i=e||t*n[s-1];let a,o=0,l=s-1;for(;o<=l;)if(r=Math.floor(o+(l-o)/2),a=n[r]-i,a<0)o=r+1;else{if(!(a>0)){l=r;break}l=r-1}if(r=l,n[r]===i)return r/(s-1);const u=n[r];return(r+(i-u)/(n[r+1]-u))/(s-1)}getTangent(t,e){const n=1e-4;let r=t-n,s=t+n;r<0&&(r=0),s>1&&(s=1);const i=this.getPoint(r),a=this.getPoint(s),o=e||(i.isVector2?new Kn:new or);return o.copy(a).sub(i).normalize(),o}getTangentAt(t,e){const n=this.getUtoTmapping(t);return this.getTangent(n,e)}computeFrenetFrames(t,e){const n=new or,r=[],s=[],i=[],a=new or,o=new Pr;for(let e=0;e<=t;e++){const n=e/t;r[e]=this.getTangentAt(n,new or),r[e].normalize()}s[0]=new or,i[0]=new or;let l=Number.MAX_VALUE;const u=Math.abs(r[0].x),c=Math.abs(r[0].y),h=Math.abs(r[0].z);u<=l&&(l=u,n.set(1,0,0)),c<=l&&(l=c,n.set(0,1,0)),h<=l&&n.set(0,0,1),a.crossVectors(r[0],n).normalize(),s[0].crossVectors(r[0],a),i[0].crossVectors(r[0],s[0]);for(let e=1;e<=t;e++){if(s[e]=s[e-1].clone(),i[e]=i[e-1].clone(),a.crossVectors(r[e-1],r[e]),a.length()>Number.EPSILON){a.normalize();const t=Math.acos(Vn(r[e-1].dot(r[e]),-1,1));s[e].applyMatrix4(o.makeRotationAxis(a,t))}i[e].crossVectors(r[e],s[e])}if(!0===e){let e=Math.acos(Vn(s[0].dot(s[t]),-1,1));e/=t,r[0].dot(a.crossVectors(s[0],s[t]))>0&&(e=-e);for(let n=1;n<=t;n++)s[n].applyMatrix4(o.makeRotationAxis(r[n],e*n)),i[n].crossVectors(r[n],s[n])}return{tangents:r,normals:s,binormals:i}}clone(){return(new this.constructor).copy(this)}copy(t){return this.arcLengthDivisions=t.arcLengthDivisions,this}toJSON(){const t={metadata:{version:4.5,type:\"Curve\",generator:\"Curve.toJSON\"}};return t.arcLengthDivisions=this.arcLengthDivisions,t.type=this.type,t}fromJSON(t){return this.arcLengthDivisions=t.arcLengthDivisions,this}}class Hu extends Gu{constructor(t=0,e=0,n=1,r=1,s=0,i=2*Math.PI,a=!1,o=0){super(),this.type=\"EllipseCurve\",this.aX=t,this.aY=e,this.xRadius=n,this.yRadius=r,this.aStartAngle=s,this.aEndAngle=i,this.aClockwise=a,this.aRotation=o}getPoint(t,e){const n=e||new Kn,r=2*Math.PI;let s=this.aEndAngle-this.aStartAngle;const i=Math.abs(s)<Number.EPSILON;for(;s<0;)s+=r;for(;s>r;)s-=r;s<Number.EPSILON&&(s=i?0:r),!0!==this.aClockwise||i||(s===r?s=-r:s-=r);const a=this.aStartAngle+t*s;let o=this.aX+this.xRadius*Math.cos(a),l=this.aY+this.yRadius*Math.sin(a);if(0!==this.aRotation){const t=Math.cos(this.aRotation),e=Math.sin(this.aRotation),n=o-this.aX,r=l-this.aY;o=n*t-r*e+this.aX,l=n*e+r*t+this.aY}return n.set(o,l)}copy(t){return super.copy(t),this.aX=t.aX,this.aY=t.aY,this.xRadius=t.xRadius,this.yRadius=t.yRadius,this.aStartAngle=t.aStartAngle,this.aEndAngle=t.aEndAngle,this.aClockwise=t.aClockwise,this.aRotation=t.aRotation,this}toJSON(){const t=super.toJSON();return t.aX=this.aX,t.aY=this.aY,t.xRadius=this.xRadius,t.yRadius=this.yRadius,t.aStartAngle=this.aStartAngle,t.aEndAngle=this.aEndAngle,t.aClockwise=this.aClockwise,t.aRotation=this.aRotation,t}fromJSON(t){return super.fromJSON(t),this.aX=t.aX,this.aY=t.aY,this.xRadius=t.xRadius,this.yRadius=t.yRadius,this.aStartAngle=t.aStartAngle,this.aEndAngle=t.aEndAngle,this.aClockwise=t.aClockwise,this.aRotation=t.aRotation,this}}Hu.prototype.isEllipseCurve=!0;class ju extends Hu{constructor(t,e,n,r,s,i){super(t,e,n,n,r,s,i),this.type=\"ArcCurve\"}}function qu(){let t=0,e=0,n=0,r=0;function s(s,i,a,o){t=s,e=a,n=-3*s+3*i-2*a-o,r=2*s-2*i+a+o}return{initCatmullRom:function(t,e,n,r,i){s(e,n,i*(n-t),i*(r-e))},initNonuniformCatmullRom:function(t,e,n,r,i,a,o){let l=(e-t)/i-(n-t)/(i+a)+(n-e)/a,u=(n-e)/a-(r-e)/(a+o)+(r-n)/o;l*=a,u*=a,s(e,n,l,u)},calc:function(s){const i=s*s;return t+e*s+n*i+r*(i*s)}}}ju.prototype.isArcCurve=!0;const Xu=new or,Ku=new qu,Yu=new qu,Zu=new qu;class Ju extends Gu{constructor(t=[],e=!1,n=\"centripetal\",r=.5){super(),this.type=\"CatmullRomCurve3\",this.points=t,this.closed=e,this.curveType=n,this.tension=r}getPoint(t,e=new or){const n=e,r=this.points,s=r.length,i=(s-(this.closed?0:1))*t;let a,o,l=Math.floor(i),u=i-l;this.closed?l+=l>0?0:(Math.floor(Math.abs(l)/s)+1)*s:0===u&&l===s-1&&(l=s-2,u=1),this.closed||l>0?a=r[(l-1)%s]:(Xu.subVectors(r[0],r[1]).add(r[0]),a=Xu);const c=r[l%s],h=r[(l+1)%s];if(this.closed||l+2<s?o=r[(l+2)%s]:(Xu.subVectors(r[s-1],r[s-2]).add(r[s-1]),o=Xu),\"centripetal\"===this.curveType||\"chordal\"===this.curveType){const t=\"chordal\"===this.curveType?.5:.25;let e=Math.pow(a.distanceToSquared(c),t),n=Math.pow(c.distanceToSquared(h),t),r=Math.pow(h.distanceToSquared(o),t);n<1e-4&&(n=1),e<1e-4&&(e=n),r<1e-4&&(r=n),Ku.initNonuniformCatmullRom(a.x,c.x,h.x,o.x,e,n,r),Yu.initNonuniformCatmullRom(a.y,c.y,h.y,o.y,e,n,r),Zu.initNonuniformCatmullRom(a.z,c.z,h.z,o.z,e,n,r)}else\"catmullrom\"===this.curveType&&(Ku.initCatmullRom(a.x,c.x,h.x,o.x,this.tension),Yu.initCatmullRom(a.y,c.y,h.y,o.y,this.tension),Zu.initCatmullRom(a.z,c.z,h.z,o.z,this.tension));return n.set(Ku.calc(u),Yu.calc(u),Zu.calc(u)),n}copy(t){super.copy(t),this.points=[];for(let e=0,n=t.points.length;e<n;e++){const n=t.points[e];this.points.push(n.clone())}return this.closed=t.closed,this.curveType=t.curveType,this.tension=t.tension,this}toJSON(){const t=super.toJSON();t.points=[];for(let e=0,n=this.points.length;e<n;e++){const n=this.points[e];t.points.push(n.toArray())}return t.closed=this.closed,t.curveType=this.curveType,t.tension=this.tension,t}fromJSON(t){super.fromJSON(t),this.points=[];for(let e=0,n=t.points.length;e<n;e++){const n=t.points[e];this.points.push((new or).fromArray(n))}return this.closed=t.closed,this.curveType=t.curveType,this.tension=t.tension,this}}function Qu(t,e,n,r,s){const i=.5*(r-e),a=.5*(s-n),o=t*t;return(2*n-2*r+i+a)*(t*o)+(-3*n+3*r-2*i-a)*o+i*t+n}function tc(t,e,n,r){return function(t,e){const n=1-t;return n*n*e}(t,e)+function(t,e){return 2*(1-t)*t*e}(t,n)+function(t,e){return t*t*e}(t,r)}function ec(t,e,n,r,s){return function(t,e){const n=1-t;return n*n*n*e}(t,e)+function(t,e){const n=1-t;return 3*n*n*t*e}(t,n)+function(t,e){return 3*(1-t)*t*t*e}(t,r)+function(t,e){return t*t*t*e}(t,s)}Ju.prototype.isCatmullRomCurve3=!0;class nc extends Gu{constructor(t=new Kn,e=new Kn,n=new Kn,r=new Kn){super(),this.type=\"CubicBezierCurve\",this.v0=t,this.v1=e,this.v2=n,this.v3=r}getPoint(t,e=new Kn){const n=e,r=this.v0,s=this.v1,i=this.v2,a=this.v3;return n.set(ec(t,r.x,s.x,i.x,a.x),ec(t,r.y,s.y,i.y,a.y)),n}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this.v3.copy(t.v3),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t.v3=this.v3.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this.v3.fromArray(t.v3),this}}nc.prototype.isCubicBezierCurve=!0;class rc extends Gu{constructor(t=new or,e=new or,n=new or,r=new or){super(),this.type=\"CubicBezierCurve3\",this.v0=t,this.v1=e,this.v2=n,this.v3=r}getPoint(t,e=new or){const n=e,r=this.v0,s=this.v1,i=this.v2,a=this.v3;return n.set(ec(t,r.x,s.x,i.x,a.x),ec(t,r.y,s.y,i.y,a.y),ec(t,r.z,s.z,i.z,a.z)),n}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this.v3.copy(t.v3),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t.v3=this.v3.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this.v3.fromArray(t.v3),this}}rc.prototype.isCubicBezierCurve3=!0;class sc extends Gu{constructor(t=new Kn,e=new Kn){super(),this.type=\"LineCurve\",this.v1=t,this.v2=e}getPoint(t,e=new Kn){const n=e;return 1===t?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(t).add(this.v1)),n}getPointAt(t,e){return this.getPoint(t,e)}getTangent(t,e){const n=e||new Kn;return n.copy(this.v2).sub(this.v1).normalize(),n}copy(t){return super.copy(t),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}sc.prototype.isLineCurve=!0;class ic extends Gu{constructor(t=new or,e=new or){super(),this.type=\"LineCurve3\",this.isLineCurve3=!0,this.v1=t,this.v2=e}getPoint(t,e=new or){const n=e;return 1===t?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(t).add(this.v1)),n}getPointAt(t,e){return this.getPoint(t,e)}copy(t){return super.copy(t),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}class ac extends Gu{constructor(t=new Kn,e=new Kn,n=new Kn){super(),this.type=\"QuadraticBezierCurve\",this.v0=t,this.v1=e,this.v2=n}getPoint(t,e=new Kn){const n=e,r=this.v0,s=this.v1,i=this.v2;return n.set(tc(t,r.x,s.x,i.x),tc(t,r.y,s.y,i.y)),n}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}ac.prototype.isQuadraticBezierCurve=!0;class oc extends Gu{constructor(t=new or,e=new or,n=new or){super(),this.type=\"QuadraticBezierCurve3\",this.v0=t,this.v1=e,this.v2=n}getPoint(t,e=new or){const n=e,r=this.v0,s=this.v1,i=this.v2;return n.set(tc(t,r.x,s.x,i.x),tc(t,r.y,s.y,i.y),tc(t,r.z,s.z,i.z)),n}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}oc.prototype.isQuadraticBezierCurve3=!0;class lc extends Gu{constructor(t=[]){super(),this.type=\"SplineCurve\",this.points=t}getPoint(t,e=new Kn){const n=e,r=this.points,s=(r.length-1)*t,i=Math.floor(s),a=s-i,o=r[0===i?i:i-1],l=r[i],u=r[i>r.length-2?r.length-1:i+1],c=r[i>r.length-3?r.length-1:i+2];return n.set(Qu(a,o.x,l.x,u.x,c.x),Qu(a,o.y,l.y,u.y,c.y)),n}copy(t){super.copy(t),this.points=[];for(let e=0,n=t.points.length;e<n;e++){const n=t.points[e];this.points.push(n.clone())}return this}toJSON(){const t=super.toJSON();t.points=[];for(let e=0,n=this.points.length;e<n;e++){const n=this.points[e];t.points.push(n.toArray())}return t}fromJSON(t){super.fromJSON(t),this.points=[];for(let e=0,n=t.points.length;e<n;e++){const n=t.points[e];this.points.push((new Kn).fromArray(n))}return this}}lc.prototype.isSplineCurve=!0;var uc=Object.freeze({__proto__:null,ArcCurve:ju,CatmullRomCurve3:Ju,CubicBezierCurve:nc,CubicBezierCurve3:rc,EllipseCurve:Hu,LineCurve:sc,LineCurve3:ic,QuadraticBezierCurve:ac,QuadraticBezierCurve3:oc,SplineCurve:lc});function cc(t,e,n,r,s){let i,a;if(s===function(t,e,n,r){let s=0;for(let i=e,a=n-r;i<n;i+=r)s+=(t[a]-t[i])*(t[i+1]+t[a+1]),a=i;return s}(t,e,n,r)>0)for(i=e;i<n;i+=r)a=Ac(i,t[i],t[i+1],a);else for(i=n-r;i>=e;i-=r)a=Ac(i,t[i],t[i+1],a);return a&&Mc(a,a.next)&&(Rc(a),a=a.next),a}function hc(t,e){if(!t)return t;e||(e=t);let n,r=t;do{if(n=!1,r.steiner||!Mc(r,r.next)&&0!==_c(r.prev,r,r.next))r=r.next;else{if(Rc(r),r=e=r.prev,r===r.next)break;n=!0}}while(n||r!==e);return e}function dc(t,e,n,r,s,i,a){if(!t)return;!a&&i&&function(t,e,n,r){let s=t;do{null===s.z&&(s.z=vc(s.x,s.y,e,n,r)),s.prevZ=s.prev,s.nextZ=s.next,s=s.next}while(s!==t);s.prevZ.nextZ=null,s.prevZ=null,function(t){let e,n,r,s,i,a,o,l,u=1;do{for(n=t,t=null,i=null,a=0;n;){for(a++,r=n,o=0,e=0;e<u&&(o++,r=r.nextZ,r);e++);for(l=u;o>0||l>0&&r;)0!==o&&(0===l||!r||n.z<=r.z)?(s=n,n=n.nextZ,o--):(s=r,r=r.nextZ,l--),i?i.nextZ=s:t=s,s.prevZ=i,i=s;n=r}i.nextZ=null,u*=2}while(a>1)}(s)}(t,r,s,i);let o,l,u=t;for(;t.prev!==t.next;)if(o=t.prev,l=t.next,i?fc(t,r,s,i):pc(t))e.push(o.i/n),e.push(t.i/n),e.push(l.i/n),Rc(t),t=l.next,u=l.next;else if((t=l)===u){a?1===a?dc(t=mc(hc(t),e,n),e,n,r,s,i,2):2===a&&gc(t,e,n,r,s,i):dc(hc(t),e,n,r,s,i,1);break}}function pc(t){const e=t.prev,n=t,r=t.next;if(_c(e,n,r)>=0)return!1;let s=t.next.next;for(;s!==t.prev;){if(Sc(e.x,e.y,n.x,n.y,r.x,r.y,s.x,s.y)&&_c(s.prev,s,s.next)>=0)return!1;s=s.next}return!0}function fc(t,e,n,r){const s=t.prev,i=t,a=t.next;if(_c(s,i,a)>=0)return!1;const o=s.x<i.x?s.x<a.x?s.x:a.x:i.x<a.x?i.x:a.x,l=s.y<i.y?s.y<a.y?s.y:a.y:i.y<a.y?i.y:a.y,u=s.x>i.x?s.x>a.x?s.x:a.x:i.x>a.x?i.x:a.x,c=s.y>i.y?s.y>a.y?s.y:a.y:i.y>a.y?i.y:a.y,h=vc(o,l,e,n,r),d=vc(u,c,e,n,r);let p=t.prevZ,f=t.nextZ;for(;p&&p.z>=h&&f&&f.z<=d;){if(p!==t.prev&&p!==t.next&&Sc(s.x,s.y,i.x,i.y,a.x,a.y,p.x,p.y)&&_c(p.prev,p,p.next)>=0)return!1;if(p=p.prevZ,f!==t.prev&&f!==t.next&&Sc(s.x,s.y,i.x,i.y,a.x,a.y,f.x,f.y)&&_c(f.prev,f,f.next)>=0)return!1;f=f.nextZ}for(;p&&p.z>=h;){if(p!==t.prev&&p!==t.next&&Sc(s.x,s.y,i.x,i.y,a.x,a.y,p.x,p.y)&&_c(p.prev,p,p.next)>=0)return!1;p=p.prevZ}for(;f&&f.z<=d;){if(f!==t.prev&&f!==t.next&&Sc(s.x,s.y,i.x,i.y,a.x,a.y,f.x,f.y)&&_c(f.prev,f,f.next)>=0)return!1;f=f.nextZ}return!0}function mc(t,e,n){let r=t;do{const s=r.prev,i=r.next.next;!Mc(s,i)&&kc(s,r,r.next,i)&&Cc(s,i)&&Cc(i,s)&&(e.push(s.i/n),e.push(r.i/n),e.push(i.i/n),Rc(r),Rc(r.next),r=t=i),r=r.next}while(r!==t);return hc(r)}function gc(t,e,n,r,s,i){let a=t;do{let t=a.next.next;for(;t!==a.prev;){if(a.i!==t.i&&Tc(a,t)){let o=Nc(a,t);return a=hc(a,a.next),o=hc(o,o.next),dc(a,e,n,r,s,i),void dc(o,e,n,r,s,i)}t=t.next}a=a.next}while(a!==t)}function yc(t,e){return t.x-e.x}function xc(t,e){if(e=function(t,e){let n=e;const r=t.x,s=t.y;let i,a=-1/0;do{if(s<=n.y&&s>=n.next.y&&n.next.y!==n.y){const t=n.x+(s-n.y)*(n.next.x-n.x)/(n.next.y-n.y);if(t<=r&&t>a){if(a=t,t===r){if(s===n.y)return n;if(s===n.next.y)return n.next}i=n.x<n.next.x?n:n.next}}n=n.next}while(n!==e);if(!i)return null;if(r===a)return i;const o=i,l=i.x,u=i.y;let c,h=1/0;n=i;do{r>=n.x&&n.x>=l&&r!==n.x&&Sc(s<u?r:a,s,l,u,s<u?a:r,s,n.x,n.y)&&(c=Math.abs(s-n.y)/(r-n.x),Cc(n,t)&&(c<h||c===h&&(n.x>i.x||n.x===i.x&&bc(i,n)))&&(i=n,h=c)),n=n.next}while(n!==o);return i}(t,e)){const n=Nc(e,t);hc(e,e.next),hc(n,n.next)}}function bc(t,e){return _c(t.prev,t,e.prev)<0&&_c(e.next,t,t.next)<0}function vc(t,e,n,r,s){return(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=32767*(t-n)*s)|t<<8))|t<<4))|t<<2))|t<<1))|(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=32767*(e-r)*s)|e<<8))|e<<4))|e<<2))|e<<1))<<1}function wc(t){let e=t,n=t;do{(e.x<n.x||e.x===n.x&&e.y<n.y)&&(n=e),e=e.next}while(e!==t);return n}function Sc(t,e,n,r,s,i,a,o){return(s-a)*(e-o)-(t-a)*(i-o)>=0&&(t-a)*(r-o)-(n-a)*(e-o)>=0&&(n-a)*(i-o)-(s-a)*(r-o)>=0}function Tc(t,e){return t.next.i!==e.i&&t.prev.i!==e.i&&!function(t,e){let n=t;do{if(n.i!==t.i&&n.next.i!==t.i&&n.i!==e.i&&n.next.i!==e.i&&kc(n,n.next,t,e))return!0;n=n.next}while(n!==t);return!1}(t,e)&&(Cc(t,e)&&Cc(e,t)&&function(t,e){let n=t,r=!1;const s=(t.x+e.x)/2,i=(t.y+e.y)/2;do{n.y>i!=n.next.y>i&&n.next.y!==n.y&&s<(n.next.x-n.x)*(i-n.y)/(n.next.y-n.y)+n.x&&(r=!r),n=n.next}while(n!==t);return r}(t,e)&&(_c(t.prev,t,e.prev)||_c(t,e.prev,e))||Mc(t,e)&&_c(t.prev,t,t.next)>0&&_c(e.prev,e,e.next)>0)}function _c(t,e,n){return(e.y-t.y)*(n.x-e.x)-(e.x-t.x)*(n.y-e.y)}function Mc(t,e){return t.x===e.x&&t.y===e.y}function kc(t,e,n,r){const s=Ic(_c(t,e,n)),i=Ic(_c(t,e,r)),a=Ic(_c(n,r,t)),o=Ic(_c(n,r,e));return s!==i&&a!==o||!(0!==s||!Ec(t,n,e))||!(0!==i||!Ec(t,r,e))||!(0!==a||!Ec(n,t,r))||!(0!==o||!Ec(n,e,r))}function Ec(t,e,n){return e.x<=Math.max(t.x,n.x)&&e.x>=Math.min(t.x,n.x)&&e.y<=Math.max(t.y,n.y)&&e.y>=Math.min(t.y,n.y)}function Ic(t){return t>0?1:t<0?-1:0}function Cc(t,e){return _c(t.prev,t,t.next)<0?_c(t,e,t.next)>=0&&_c(t,t.prev,e)>=0:_c(t,e,t.prev)<0||_c(t,t.next,e)<0}function Nc(t,e){const n=new Lc(t.i,t.x,t.y),r=new Lc(e.i,e.x,e.y),s=t.next,i=e.prev;return t.next=e,e.prev=t,n.next=s,s.prev=n,r.next=n,n.prev=r,i.next=r,r.prev=i,r}function Ac(t,e,n,r){const s=new Lc(t,e,n);return r?(s.next=r.next,s.prev=r,r.next.prev=s,r.next=s):(s.prev=s,s.next=s),s}function Rc(t){t.next.prev=t.prev,t.prev.next=t.next,t.prevZ&&(t.prevZ.nextZ=t.nextZ),t.nextZ&&(t.nextZ.prevZ=t.prevZ)}function Lc(t,e,n){this.i=t,this.x=e,this.y=n,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}class Dc{static area(t){const e=t.length;let n=0;for(let r=e-1,s=0;s<e;r=s++)n+=t[r].x*t[s].y-t[s].x*t[r].y;return.5*n}static isClockWise(t){return Dc.area(t)<0}static triangulateShape(t,e){const n=[],r=[],s=[];Fc(t),$c(n,t);let i=t.length;e.forEach(Fc);for(let t=0;t<e.length;t++)r.push(i),i+=e[t].length,$c(n,e[t]);const a=function(t,e,n=2){const r=e&&e.length,s=r?e[0]*n:t.length;let i=cc(t,0,s,n,!0);const a=[];if(!i||i.next===i.prev)return a;let o,l,u,c,h,d,p;if(r&&(i=function(t,e,n,r){const s=[];let i,a,o,l,u;for(i=0,a=e.length;i<a;i++)o=e[i]*r,l=i<a-1?e[i+1]*r:t.length,u=cc(t,o,l,r,!1),u===u.next&&(u.steiner=!0),s.push(wc(u));for(s.sort(yc),i=0;i<s.length;i++)xc(s[i],n),n=hc(n,n.next);return n}(t,e,i,n)),t.length>80*n){o=u=t[0],l=c=t[1];for(let e=n;e<s;e+=n)h=t[e],d=t[e+1],h<o&&(o=h),d<l&&(l=d),h>u&&(u=h),d>c&&(c=d);p=Math.max(u-o,c-l),p=0!==p?1/p:0}return dc(i,a,n,o,l,p),a}(n,r);for(let t=0;t<a.length;t+=3)s.push(a.slice(t,t+3));return s}}function Fc(t){const e=t.length;e>2&&t[e-1].equals(t[0])&&t.pop()}function $c(t,e){for(let n=0;n<e.length;n++)t.push(e[n].x),t.push(e[n].y)}class Oc extends ti{constructor(t,e){super(),this.type=\"ExtrudeGeometry\",this.parameters={shapes:t,options:e},t=Array.isArray(t)?t:[t];const n=this,r=[],s=[];for(let e=0,n=t.length;e<n;e++)i(t[e]);function i(t){const i=[],a=void 0!==e.curveSegments?e.curveSegments:12,o=void 0!==e.steps?e.steps:1;let l=void 0!==e.depth?e.depth:100,u=void 0===e.bevelEnabled||e.bevelEnabled,c=void 0!==e.bevelThickness?e.bevelThickness:6,h=void 0!==e.bevelSize?e.bevelSize:c-2,d=void 0!==e.bevelOffset?e.bevelOffset:0,p=void 0!==e.bevelSegments?e.bevelSegments:3;const f=e.extrudePath,m=void 0!==e.UVGenerator?e.UVGenerator:Pc;void 0!==e.amount&&(console.warn(\"THREE.ExtrudeBufferGeometry: amount has been renamed to depth.\"),l=e.amount);let g,y,x,b,v,w=!1;f&&(g=f.getSpacedPoints(o),w=!0,u=!1,y=f.computeFrenetFrames(o,!1),x=new or,b=new or,v=new or),u||(p=0,c=0,h=0,d=0);const S=t.extractPoints(a);let T=S.shape;const _=S.holes;if(!Dc.isClockWise(T)){T=T.reverse();for(let t=0,e=_.length;t<e;t++){const e=_[t];Dc.isClockWise(e)&&(_[t]=e.reverse())}}const M=Dc.triangulateShape(T,_),k=T;for(let t=0,e=_.length;t<e;t++){const e=_[t];T=T.concat(e)}function E(t,e,n){return e||console.error(\"THREE.ExtrudeGeometry: vec does not exist\"),e.clone().multiplyScalar(n).add(t)}const I=T.length,C=M.length;function N(t,e,n){let r,s,i;const a=t.x-e.x,o=t.y-e.y,l=n.x-t.x,u=n.y-t.y,c=a*a+o*o,h=a*u-o*l;if(Math.abs(h)>Number.EPSILON){const h=Math.sqrt(c),d=Math.sqrt(l*l+u*u),p=e.x-o/h,f=e.y+a/h,m=((n.x-u/d-p)*u-(n.y+l/d-f)*l)/(a*u-o*l);r=p+a*m-t.x,s=f+o*m-t.y;const g=r*r+s*s;if(g<=2)return new Kn(r,s);i=Math.sqrt(g/2)}else{let t=!1;a>Number.EPSILON?l>Number.EPSILON&&(t=!0):a<-Number.EPSILON?l<-Number.EPSILON&&(t=!0):Math.sign(o)===Math.sign(u)&&(t=!0),t?(r=-o,s=a,i=Math.sqrt(c)):(r=a,s=o,i=Math.sqrt(c/2))}return new Kn(r/i,s/i)}const A=[];for(let t=0,e=k.length,n=e-1,r=t+1;t<e;t++,n++,r++)n===e&&(n=0),r===e&&(r=0),A[t]=N(k[t],k[n],k[r]);const R=[];let L,D=A.concat();for(let t=0,e=_.length;t<e;t++){const e=_[t];L=[];for(let t=0,n=e.length,r=n-1,s=t+1;t<n;t++,r++,s++)r===n&&(r=0),s===n&&(s=0),L[t]=N(e[t],e[r],e[s]);R.push(L),D=D.concat(L)}for(let t=0;t<p;t++){const e=t/p,n=c*Math.cos(e*Math.PI/2),r=h*Math.sin(e*Math.PI/2)+d;for(let t=0,e=k.length;t<e;t++){const e=E(k[t],A[t],r);O(e.x,e.y,-n)}for(let t=0,e=_.length;t<e;t++){const e=_[t];L=R[t];for(let t=0,s=e.length;t<s;t++){const s=E(e[t],L[t],r);O(s.x,s.y,-n)}}}const F=h+d;for(let t=0;t<I;t++){const e=u?E(T[t],D[t],F):T[t];w?(b.copy(y.normals[0]).multiplyScalar(e.x),x.copy(y.binormals[0]).multiplyScalar(e.y),v.copy(g[0]).add(b).add(x),O(v.x,v.y,v.z)):O(e.x,e.y,0)}for(let t=1;t<=o;t++)for(let e=0;e<I;e++){const n=u?E(T[e],D[e],F):T[e];w?(b.copy(y.normals[t]).multiplyScalar(n.x),x.copy(y.binormals[t]).multiplyScalar(n.y),v.copy(g[t]).add(b).add(x),O(v.x,v.y,v.z)):O(n.x,n.y,l/o*t)}for(let t=p-1;t>=0;t--){const e=t/p,n=c*Math.cos(e*Math.PI/2),r=h*Math.sin(e*Math.PI/2)+d;for(let t=0,e=k.length;t<e;t++){const e=E(k[t],A[t],r);O(e.x,e.y,l+n)}for(let t=0,e=_.length;t<e;t++){const e=_[t];L=R[t];for(let t=0,s=e.length;t<s;t++){const s=E(e[t],L[t],r);w?O(s.x,s.y+g[o-1].y,g[o-1].x+n):O(s.x,s.y,l+n)}}}function $(t,e){let n=t.length;for(;--n>=0;){const r=n;let s=n-1;s<0&&(s=t.length-1);for(let t=0,n=o+2*p;t<n;t++){const n=I*t,i=I*(t+1);z(e+r+n,e+s+n,e+s+i,e+r+i)}}}function O(t,e,n){i.push(t),i.push(e),i.push(n)}function P(t,e,s){B(t),B(e),B(s);const i=r.length/3,a=m.generateTopUV(n,r,i-3,i-2,i-1);U(a[0]),U(a[1]),U(a[2])}function z(t,e,s,i){B(t),B(e),B(i),B(e),B(s),B(i);const a=r.length/3,o=m.generateSideWallUV(n,r,a-6,a-3,a-2,a-1);U(o[0]),U(o[1]),U(o[3]),U(o[1]),U(o[2]),U(o[3])}function B(t){r.push(i[3*t+0]),r.push(i[3*t+1]),r.push(i[3*t+2])}function U(t){s.push(t.x),s.push(t.y)}!function(){const t=r.length/3;if(u){let t=0,e=I*t;for(let t=0;t<C;t++){const n=M[t];P(n[2]+e,n[1]+e,n[0]+e)}t=o+2*p,e=I*t;for(let t=0;t<C;t++){const n=M[t];P(n[0]+e,n[1]+e,n[2]+e)}}else{for(let t=0;t<C;t++){const e=M[t];P(e[2],e[1],e[0])}for(let t=0;t<C;t++){const e=M[t];P(e[0]+I*o,e[1]+I*o,e[2]+I*o)}}n.addGroup(t,r.length/3-t,0)}(),function(){const t=r.length/3;let e=0;$(k,e),e+=k.length;for(let t=0,n=_.length;t<n;t++){const n=_[t];$(n,e),e+=n.length}n.addGroup(t,r.length/3-t,1)}()}this.setAttribute(\"position\",new Vs(r,3)),this.setAttribute(\"uv\",new Vs(s,2)),this.computeVertexNormals()}toJSON(){const t=super.toJSON();return function(t,e,n){if(n.shapes=[],Array.isArray(t))for(let e=0,r=t.length;e<r;e++){const r=t[e];n.shapes.push(r.uuid)}else n.shapes.push(t.uuid);return void 0!==e.extrudePath&&(n.options.extrudePath=e.extrudePath.toJSON()),n}(this.parameters.shapes,this.parameters.options,t)}static fromJSON(t,e){const n=[];for(let r=0,s=t.shapes.length;r<s;r++){const s=e[t.shapes[r]];n.push(s)}const r=t.options.extrudePath;return void 0!==r&&(t.options.extrudePath=(new uc[r.type]).fromJSON(r)),new Oc(n,t.options)}}const Pc={generateTopUV:function(t,e,n,r,s){const i=e[3*n],a=e[3*n+1],o=e[3*r],l=e[3*r+1],u=e[3*s],c=e[3*s+1];return[new Kn(i,a),new Kn(o,l),new Kn(u,c)]},generateSideWallUV:function(t,e,n,r,s,i){const a=e[3*n],o=e[3*n+1],l=e[3*n+2],u=e[3*r],c=e[3*r+1],h=e[3*r+2],d=e[3*s],p=e[3*s+1],f=e[3*s+2],m=e[3*i],g=e[3*i+1],y=e[3*i+2];return Math.abs(o-c)<Math.abs(a-u)?[new Kn(a,1-l),new Kn(u,1-h),new Kn(d,1-f),new Kn(m,1-y)]:[new Kn(o,1-l),new Kn(c,1-h),new Kn(p,1-f),new Kn(g,1-y)]}};class zc extends Ou{constructor(t=1,e=0){const n=(1+Math.sqrt(5))/2;super([-1,n,0,1,n,0,-1,-n,0,1,-n,0,0,-1,n,0,1,n,0,-1,-n,0,1,-n,n,0,-1,n,0,1,-n,0,-1,-n,0,1],[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1],t,e),this.type=\"IcosahedronGeometry\",this.parameters={radius:t,detail:e}}static fromJSON(t){return new zc(t.radius,t.detail)}}class Bc extends ti{constructor(t,e=12,n=0,r=2*Math.PI){super(),this.type=\"LatheGeometry\",this.parameters={points:t,segments:e,phiStart:n,phiLength:r},e=Math.floor(e),r=Vn(r,0,2*Math.PI);const s=[],i=[],a=[],o=1/e,l=new or,u=new Kn;for(let s=0;s<=e;s++){const c=n+s*o*r,h=Math.sin(c),d=Math.cos(c);for(let n=0;n<=t.length-1;n++)l.x=t[n].x*h,l.y=t[n].y,l.z=t[n].x*d,i.push(l.x,l.y,l.z),u.x=s/e,u.y=n/(t.length-1),a.push(u.x,u.y)}for(let n=0;n<e;n++)for(let e=0;e<t.length-1;e++){const r=e+n*t.length,i=r,a=r+t.length,o=r+t.length+1,l=r+1;s.push(i,a,l),s.push(a,o,l)}if(this.setIndex(s),this.setAttribute(\"position\",new Vs(i,3)),this.setAttribute(\"uv\",new Vs(a,2)),this.computeVertexNormals(),r===2*Math.PI){const n=this.attributes.normal.array,r=new or,s=new or,i=new or,a=e*t.length*3;for(let e=0,o=0;e<t.length;e++,o+=3)r.x=n[o+0],r.y=n[o+1],r.z=n[o+2],s.x=n[a+o+0],s.y=n[a+o+1],s.z=n[a+o+2],i.addVectors(r,s).normalize(),n[o+0]=n[a+o+0]=i.x,n[o+1]=n[a+o+1]=i.y,n[o+2]=n[a+o+2]=i.z}}static fromJSON(t){return new Bc(t.points,t.segments,t.phiStart,t.phiLength)}}class Uc extends Ou{constructor(t=1,e=0){super([1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2],t,e),this.type=\"OctahedronGeometry\",this.parameters={radius:t,detail:e}}static fromJSON(t){return new Uc(t.radius,t.detail)}}class Vc extends ti{constructor(t,e,n){super(),this.type=\"ParametricGeometry\",this.parameters={func:t,slices:e,stacks:n};const r=[],s=[],i=[],a=[],o=1e-5,l=new or,u=new or,c=new or,h=new or,d=new or;t.length<3&&console.error(\"THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.\");const p=e+1;for(let r=0;r<=n;r++){const p=r/n;for(let n=0;n<=e;n++){const r=n/e;t(r,p,u),s.push(u.x,u.y,u.z),r-o>=0?(t(r-o,p,c),h.subVectors(u,c)):(t(r+o,p,c),h.subVectors(c,u)),p-o>=0?(t(r,p-o,c),d.subVectors(u,c)):(t(r,p+o,c),d.subVectors(c,u)),l.crossVectors(h,d).normalize(),i.push(l.x,l.y,l.z),a.push(r,p)}}for(let t=0;t<n;t++)for(let n=0;n<e;n++){const e=t*p+n,s=t*p+n+1,i=(t+1)*p+n+1,a=(t+1)*p+n;r.push(e,s,a),r.push(s,i,a)}this.setIndex(r),this.setAttribute(\"position\",new Vs(s,3)),this.setAttribute(\"normal\",new Vs(i,3)),this.setAttribute(\"uv\",new Vs(a,2))}}class Wc extends ti{constructor(t=.5,e=1,n=8,r=1,s=0,i=2*Math.PI){super(),this.type=\"RingGeometry\",this.parameters={innerRadius:t,outerRadius:e,thetaSegments:n,phiSegments:r,thetaStart:s,thetaLength:i},n=Math.max(3,n);const a=[],o=[],l=[],u=[];let c=t;const h=(e-t)/(r=Math.max(1,r)),d=new or,p=new Kn;for(let t=0;t<=r;t++){for(let t=0;t<=n;t++){const r=s+t/n*i;d.x=c*Math.cos(r),d.y=c*Math.sin(r),o.push(d.x,d.y,d.z),l.push(0,0,1),p.x=(d.x/e+1)/2,p.y=(d.y/e+1)/2,u.push(p.x,p.y)}c+=h}for(let t=0;t<r;t++){const e=t*(n+1);for(let t=0;t<n;t++){const r=t+e,s=r,i=r+n+1,o=r+n+2,l=r+1;a.push(s,i,l),a.push(i,o,l)}}this.setIndex(a),this.setAttribute(\"position\",new Vs(o,3)),this.setAttribute(\"normal\",new Vs(l,3)),this.setAttribute(\"uv\",new Vs(u,2))}static fromJSON(t){return new Wc(t.innerRadius,t.outerRadius,t.thetaSegments,t.phiSegments,t.thetaStart,t.thetaLength)}}class Gc extends ti{constructor(t,e=12){super(),this.type=\"ShapeGeometry\",this.parameters={shapes:t,curveSegments:e};const n=[],r=[],s=[],i=[];let a=0,o=0;if(!1===Array.isArray(t))l(t);else for(let e=0;e<t.length;e++)l(t[e]),this.addGroup(a,o,e),a+=o,o=0;function l(t){const a=r.length/3,l=t.extractPoints(e);let u=l.shape;const c=l.holes;!1===Dc.isClockWise(u)&&(u=u.reverse());for(let t=0,e=c.length;t<e;t++){const e=c[t];!0===Dc.isClockWise(e)&&(c[t]=e.reverse())}const h=Dc.triangulateShape(u,c);for(let t=0,e=c.length;t<e;t++){const e=c[t];u=u.concat(e)}for(let t=0,e=u.length;t<e;t++){const e=u[t];r.push(e.x,e.y,0),s.push(0,0,1),i.push(e.x,e.y)}for(let t=0,e=h.length;t<e;t++){const e=h[t],r=e[0]+a,s=e[1]+a,i=e[2]+a;n.push(r,s,i),o+=3}}this.setIndex(n),this.setAttribute(\"position\",new Vs(r,3)),this.setAttribute(\"normal\",new Vs(s,3)),this.setAttribute(\"uv\",new Vs(i,2))}toJSON(){const t=super.toJSON();return function(t,e){if(e.shapes=[],Array.isArray(t))for(let n=0,r=t.length;n<r;n++){const r=t[n];e.shapes.push(r.uuid)}else e.shapes.push(t.uuid);return e}(this.parameters.shapes,t)}static fromJSON(t,e){const n=[];for(let r=0,s=t.shapes.length;r<s;r++){const s=e[t.shapes[r]];n.push(s)}return new Gc(n,t.curveSegments)}}class Hc extends ti{constructor(t=1,e=32,n=16,r=0,s=2*Math.PI,i=0,a=Math.PI){super(),this.type=\"SphereGeometry\",this.parameters={radius:t,widthSegments:e,heightSegments:n,phiStart:r,phiLength:s,thetaStart:i,thetaLength:a},e=Math.max(3,Math.floor(e)),n=Math.max(2,Math.floor(n));const o=Math.min(i+a,Math.PI);let l=0;const u=[],c=new or,h=new or,d=[],p=[],f=[],m=[];for(let d=0;d<=n;d++){const g=[],y=d/n;let x=0;0==d&&0==i?x=.5/e:d==n&&o==Math.PI&&(x=-.5/e);for(let n=0;n<=e;n++){const o=n/e;c.x=-t*Math.cos(r+o*s)*Math.sin(i+y*a),c.y=t*Math.cos(i+y*a),c.z=t*Math.sin(r+o*s)*Math.sin(i+y*a),p.push(c.x,c.y,c.z),h.copy(c).normalize(),f.push(h.x,h.y,h.z),m.push(o+x,1-y),g.push(l++)}u.push(g)}for(let t=0;t<n;t++)for(let r=0;r<e;r++){const e=u[t][r+1],s=u[t][r],a=u[t+1][r],l=u[t+1][r+1];(0!==t||i>0)&&d.push(e,s,l),(t!==n-1||o<Math.PI)&&d.push(s,a,l)}this.setIndex(d),this.setAttribute(\"position\",new Vs(p,3)),this.setAttribute(\"normal\",new Vs(f,3)),this.setAttribute(\"uv\",new Vs(m,2))}static fromJSON(t){return new Hc(t.radius,t.widthSegments,t.heightSegments,t.phiStart,t.phiLength,t.thetaStart,t.thetaLength)}}class jc extends Ou{constructor(t=1,e=0){super([1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],[2,1,0,0,3,2,1,3,0,2,3,1],t,e),this.type=\"TetrahedronGeometry\",this.parameters={radius:t,detail:e}}static fromJSON(t){return new jc(t.radius,t.detail)}}class qc extends Oc{constructor(t,e={}){const n=e.font;if(!n||!n.isFont)return console.error(\"THREE.TextGeometry: font parameter is not an instance of THREE.Font.\"),new ti;const r=n.generateShapes(t,e.size);e.depth=void 0!==e.height?e.height:50,void 0===e.bevelThickness&&(e.bevelThickness=10),void 0===e.bevelSize&&(e.bevelSize=8),void 0===e.bevelEnabled&&(e.bevelEnabled=!1),super(r,e),this.type=\"TextGeometry\"}}class Xc extends ti{constructor(t=1,e=.4,n=8,r=6,s=2*Math.PI){super(),this.type=\"TorusGeometry\",this.parameters={radius:t,tube:e,radialSegments:n,tubularSegments:r,arc:s},n=Math.floor(n),r=Math.floor(r);const i=[],a=[],o=[],l=[],u=new or,c=new or,h=new or;for(let i=0;i<=n;i++)for(let d=0;d<=r;d++){const p=d/r*s,f=i/n*Math.PI*2;c.x=(t+e*Math.cos(f))*Math.cos(p),c.y=(t+e*Math.cos(f))*Math.sin(p),c.z=e*Math.sin(f),a.push(c.x,c.y,c.z),u.x=t*Math.cos(p),u.y=t*Math.sin(p),h.subVectors(c,u).normalize(),o.push(h.x,h.y,h.z),l.push(d/r),l.push(i/n)}for(let t=1;t<=n;t++)for(let e=1;e<=r;e++){const n=(r+1)*t+e-1,s=(r+1)*(t-1)+e-1,a=(r+1)*(t-1)+e,o=(r+1)*t+e;i.push(n,s,o),i.push(s,a,o)}this.setIndex(i),this.setAttribute(\"position\",new Vs(a,3)),this.setAttribute(\"normal\",new Vs(o,3)),this.setAttribute(\"uv\",new Vs(l,2))}static fromJSON(t){return new Xc(t.radius,t.tube,t.radialSegments,t.tubularSegments,t.arc)}}class Kc extends ti{constructor(t=1,e=.4,n=64,r=8,s=2,i=3){super(),this.type=\"TorusKnotGeometry\",this.parameters={radius:t,tube:e,tubularSegments:n,radialSegments:r,p:s,q:i},n=Math.floor(n),r=Math.floor(r);const a=[],o=[],l=[],u=[],c=new or,h=new or,d=new or,p=new or,f=new or,m=new or,g=new or;for(let a=0;a<=n;++a){const x=a/n*s*Math.PI*2;y(x,s,i,t,d),y(x+.01,s,i,t,p),m.subVectors(p,d),g.addVectors(p,d),f.crossVectors(m,g),g.crossVectors(f,m),f.normalize(),g.normalize();for(let t=0;t<=r;++t){const s=t/r*Math.PI*2,i=-e*Math.cos(s),p=e*Math.sin(s);c.x=d.x+(i*g.x+p*f.x),c.y=d.y+(i*g.y+p*f.y),c.z=d.z+(i*g.z+p*f.z),o.push(c.x,c.y,c.z),h.subVectors(c,d).normalize(),l.push(h.x,h.y,h.z),u.push(a/n),u.push(t/r)}}for(let t=1;t<=n;t++)for(let e=1;e<=r;e++){const n=(r+1)*(t-1)+(e-1),s=(r+1)*t+(e-1),i=(r+1)*t+e,o=(r+1)*(t-1)+e;a.push(n,s,o),a.push(s,i,o)}function y(t,e,n,r,s){const i=Math.cos(t),a=Math.sin(t),o=n/e*t,l=Math.cos(o);s.x=r*(2+l)*.5*i,s.y=r*(2+l)*a*.5,s.z=r*Math.sin(o)*.5}this.setIndex(a),this.setAttribute(\"position\",new Vs(o,3)),this.setAttribute(\"normal\",new Vs(l,3)),this.setAttribute(\"uv\",new Vs(u,2))}static fromJSON(t){return new Kc(t.radius,t.tube,t.tubularSegments,t.radialSegments,t.p,t.q)}}class Yc extends ti{constructor(t,e=64,n=1,r=8,s=!1){super(),this.type=\"TubeGeometry\",this.parameters={path:t,tubularSegments:e,radius:n,radialSegments:r,closed:s};const i=t.computeFrenetFrames(e,s);this.tangents=i.tangents,this.normals=i.normals,this.binormals=i.binormals;const a=new or,o=new or,l=new Kn;let u=new or;const c=[],h=[],d=[],p=[];function f(s){u=t.getPointAt(s/e,u);const l=i.normals[s],d=i.binormals[s];for(let t=0;t<=r;t++){const e=t/r*Math.PI*2,s=Math.sin(e),i=-Math.cos(e);o.x=i*l.x+s*d.x,o.y=i*l.y+s*d.y,o.z=i*l.z+s*d.z,o.normalize(),h.push(o.x,o.y,o.z),a.x=u.x+n*o.x,a.y=u.y+n*o.y,a.z=u.z+n*o.z,c.push(a.x,a.y,a.z)}}!function(){for(let t=0;t<e;t++)f(t);f(!1===s?e:0),function(){for(let t=0;t<=e;t++)for(let n=0;n<=r;n++)l.x=t/e,l.y=n/r,d.push(l.x,l.y)}(),function(){for(let t=1;t<=e;t++)for(let e=1;e<=r;e++){const n=(r+1)*(t-1)+(e-1),s=(r+1)*t+(e-1),i=(r+1)*t+e,a=(r+1)*(t-1)+e;p.push(n,s,a),p.push(s,i,a)}}()}(),this.setIndex(p),this.setAttribute(\"position\",new Vs(c,3)),this.setAttribute(\"normal\",new Vs(h,3)),this.setAttribute(\"uv\",new Vs(d,2))}toJSON(){const t=super.toJSON();return t.path=this.parameters.path.toJSON(),t}static fromJSON(t){return new Yc((new uc[t.path.type]).fromJSON(t.path),t.tubularSegments,t.radius,t.radialSegments,t.closed)}}class Zc extends ti{constructor(t){if(super(),this.type=\"WireframeGeometry\",!0===t.isGeometry)return void console.error(\"THREE.WireframeGeometry no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.\");const e=[],n=new Set,r=new or,s=new or;if(null!==t.index){const i=t.attributes.position,a=t.index;let o=t.groups;0===o.length&&(o=[{start:0,count:a.count,materialIndex:0}]);for(let t=0,l=o.length;t<l;++t){const l=o[t],u=l.start;for(let t=u,o=u+l.count;t<o;t+=3)for(let o=0;o<3;o++){const l=a.getX(t+o),u=a.getX(t+(o+1)%3);r.fromBufferAttribute(i,l),s.fromBufferAttribute(i,u),!0===Jc(r,s,n)&&(e.push(r.x,r.y,r.z),e.push(s.x,s.y,s.z))}}}else{const i=t.attributes.position;for(let t=0,a=i.count/3;t<a;t++)for(let a=0;a<3;a++){const o=3*t+a,l=3*t+(a+1)%3;r.fromBufferAttribute(i,o),s.fromBufferAttribute(i,l),!0===Jc(r,s,n)&&(e.push(r.x,r.y,r.z),e.push(s.x,s.y,s.z))}}this.setAttribute(\"position\",new Vs(e,3))}}function Jc(t,e,n){const r=`${t.x},${t.y},${t.z}-${e.x},${e.y},${e.z}`,s=`${e.x},${e.y},${e.z}-${t.x},${t.y},${t.z}`;return!0!==n.has(r)&&!0!==n.has(s)&&(n.add(r,s),!0)}var Qc=Object.freeze({__proto__:null,BoxGeometry:vi,BoxBufferGeometry:vi,CircleGeometry:Du,CircleBufferGeometry:Du,ConeGeometry:$u,ConeBufferGeometry:$u,CylinderGeometry:Fu,CylinderBufferGeometry:Fu,DodecahedronGeometry:Pu,DodecahedronBufferGeometry:Pu,EdgesGeometry:Wu,ExtrudeGeometry:Oc,ExtrudeBufferGeometry:Oc,IcosahedronGeometry:zc,IcosahedronBufferGeometry:zc,LatheGeometry:Bc,LatheBufferGeometry:Bc,OctahedronGeometry:Uc,OctahedronBufferGeometry:Uc,ParametricGeometry:Vc,ParametricBufferGeometry:Vc,PlaneGeometry:Bi,PlaneBufferGeometry:Bi,PolyhedronGeometry:Ou,PolyhedronBufferGeometry:Ou,RingGeometry:Wc,RingBufferGeometry:Wc,ShapeGeometry:Gc,ShapeBufferGeometry:Gc,SphereGeometry:Hc,SphereBufferGeometry:Hc,TetrahedronGeometry:jc,TetrahedronBufferGeometry:jc,TextGeometry:qc,TextBufferGeometry:qc,TorusGeometry:Xc,TorusBufferGeometry:Xc,TorusKnotGeometry:Kc,TorusKnotBufferGeometry:Kc,TubeGeometry:Yc,TubeBufferGeometry:Yc,WireframeGeometry:Zc});class th extends Ss{constructor(t){super(),this.type=\"ShadowMaterial\",this.color=new Cs(0),this.transparent=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this}}th.prototype.isShadowMaterial=!0;class eh extends Ss{constructor(t){super(),this.defines={STANDARD:\"\"},this.type=\"MeshStandardMaterial\",this.color=new Cs(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Cs(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=on,this.normalScale=new Kn(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap=\"round\",this.wireframeLinejoin=\"round\",this.flatShading=!1,this.setValues(t)}copy(t){return super.copy(t),this.defines={STANDARD:\"\"},this.color.copy(t.color),this.roughness=t.roughness,this.metalness=t.metalness,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.roughnessMap=t.roughnessMap,this.metalnessMap=t.metalnessMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapIntensity=t.envMapIntensity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.flatShading=t.flatShading,this}}eh.prototype.isMeshStandardMaterial=!0;class nh extends eh{constructor(t){super(),this.defines={STANDARD:\"\",PHYSICAL:\"\"},this.type=\"MeshPhysicalMaterial\",this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new Kn(1,1),this.clearcoatNormalMap=null,this.ior=1.5,Object.defineProperty(this,\"reflectivity\",{get:function(){return Vn(2.5*(this.ior-1)/(this.ior+1),0,1)},set:function(t){this.ior=(1+.4*t)/(1-.4*t)}}),this.sheenTint=new Cs(0),this.transmission=0,this.transmissionMap=null,this.thickness=.01,this.thicknessMap=null,this.attenuationDistance=0,this.attenuationTint=new Cs(1,1,1),this.specularIntensity=1,this.specularIntensityMap=null,this.specularTint=new Cs(1,1,1),this.specularTintMap=null,this._clearcoat=0,this._transmission=0,this.setValues(t)}get clearcoat(){return this._clearcoat}set clearcoat(t){this._clearcoat>0!=t>0&&this.version++,this._clearcoat=t}get transmission(){return this._transmission}set transmission(t){this._transmission>0!=t>0&&this.version++,this._transmission=t}copy(t){return super.copy(t),this.defines={STANDARD:\"\",PHYSICAL:\"\"},this.clearcoat=t.clearcoat,this.clearcoatMap=t.clearcoatMap,this.clearcoatRoughness=t.clearcoatRoughness,this.clearcoatRoughnessMap=t.clearcoatRoughnessMap,this.clearcoatNormalMap=t.clearcoatNormalMap,this.clearcoatNormalScale.copy(t.clearcoatNormalScale),this.ior=t.ior,this.sheenTint.copy(t.sheenTint),this.transmission=t.transmission,this.transmissionMap=t.transmissionMap,this.thickness=t.thickness,this.thicknessMap=t.thicknessMap,this.attenuationDistance=t.attenuationDistance,this.attenuationTint.copy(t.attenuationTint),this.specularIntensity=t.specularIntensity,this.specularIntensityMap=t.specularIntensityMap,this.specularTint.copy(t.specularTint),this.specularTintMap=t.specularTintMap,this}}nh.prototype.isMeshPhysicalMaterial=!0;class rh extends Ss{constructor(t){super(),this.type=\"MeshPhongMaterial\",this.color=new Cs(16777215),this.specular=new Cs(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Cs(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=on,this.normalScale=new Kn(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=K,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap=\"round\",this.wireframeLinejoin=\"round\",this.flatShading=!1,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.specular.copy(t.specular),this.shininess=t.shininess,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.flatShading=t.flatShading,this}}rh.prototype.isMeshPhongMaterial=!0;class sh extends Ss{constructor(t){super(),this.defines={TOON:\"\"},this.type=\"MeshToonMaterial\",this.color=new Cs(16777215),this.map=null,this.gradientMap=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Cs(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=on,this.normalScale=new Kn(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap=\"round\",this.wireframeLinejoin=\"round\",this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.gradientMap=t.gradientMap,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.alphaMap=t.alphaMap,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this}}sh.prototype.isMeshToonMaterial=!0;class ih extends Ss{constructor(t){super(),this.type=\"MeshNormalMaterial\",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=on,this.normalScale=new Kn(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.flatShading=!1,this.setValues(t)}copy(t){return super.copy(t),this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.flatShading=t.flatShading,this}}ih.prototype.isMeshNormalMaterial=!0;class ah extends Ss{constructor(t){super(),this.type=\"MeshLambertMaterial\",this.color=new Cs(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Cs(0),this.emissiveIntensity=1,this.emissiveMap=null,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=K,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap=\"round\",this.wireframeLinejoin=\"round\",this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this}}ah.prototype.isMeshLambertMaterial=!0;class oh extends Ss{constructor(t){super(),this.defines={MATCAP:\"\"},this.type=\"MeshMatcapMaterial\",this.color=new Cs(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=on,this.normalScale=new Kn(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.flatShading=!1,this.setValues(t)}copy(t){return super.copy(t),this.defines={MATCAP:\"\"},this.color.copy(t.color),this.matcap=t.matcap,this.map=t.map,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.alphaMap=t.alphaMap,this.flatShading=t.flatShading,this}}oh.prototype.isMeshMatcapMaterial=!0;class lh extends du{constructor(t){super(),this.type=\"LineDashedMaterial\",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(t)}copy(t){return super.copy(t),this.scale=t.scale,this.dashSize=t.dashSize,this.gapSize=t.gapSize,this}}lh.prototype.isLineDashedMaterial=!0;var uh=Object.freeze({__proto__:null,ShadowMaterial:th,SpriteMaterial:Nl,RawShaderMaterial:Zi,ShaderMaterial:_i,PointsMaterial:Tu,MeshPhysicalMaterial:nh,MeshStandardMaterial:eh,MeshPhongMaterial:rh,MeshToonMaterial:sh,MeshNormalMaterial:ih,MeshLambertMaterial:ah,MeshDepthMaterial:cl,MeshDistanceMaterial:hl,MeshBasicMaterial:Ns,MeshMatcapMaterial:oh,LineDashedMaterial:lh,LineBasicMaterial:du,Material:Ss});const ch={arraySlice:function(t,e,n){return ch.isTypedArray(t)?new t.constructor(t.subarray(e,void 0!==n?n:t.length)):t.slice(e,n)},convertArray:function(t,e,n){return!t||!n&&t.constructor===e?t:\"number\"==typeof e.BYTES_PER_ELEMENT?new e(t):Array.prototype.slice.call(t)},isTypedArray:function(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)},getKeyframeOrder:function(t){const e=t.length,n=new Array(e);for(let t=0;t!==e;++t)n[t]=t;return n.sort((function(e,n){return t[e]-t[n]})),n},sortedArray:function(t,e,n){const r=t.length,s=new t.constructor(r);for(let i=0,a=0;a!==r;++i){const r=n[i]*e;for(let n=0;n!==e;++n)s[a++]=t[r+n]}return s},flattenJSON:function(t,e,n,r){let s=1,i=t[0];for(;void 0!==i&&void 0===i[r];)i=t[s++];if(void 0===i)return;let a=i[r];if(void 0!==a)if(Array.isArray(a))do{a=i[r],void 0!==a&&(e.push(i.time),n.push.apply(n,a)),i=t[s++]}while(void 0!==i);else if(void 0!==a.toArray)do{a=i[r],void 0!==a&&(e.push(i.time),a.toArray(n,n.length)),i=t[s++]}while(void 0!==i);else do{a=i[r],void 0!==a&&(e.push(i.time),n.push(a)),i=t[s++]}while(void 0!==i)},subclip:function(t,e,n,r,s=30){const i=t.clone();i.name=e;const a=[];for(let t=0;t<i.tracks.length;++t){const e=i.tracks[t],o=e.getValueSize(),l=[],u=[];for(let t=0;t<e.times.length;++t){const i=e.times[t]*s;if(!(i<n||i>=r)){l.push(e.times[t]);for(let n=0;n<o;++n)u.push(e.values[t*o+n])}}0!==l.length&&(e.times=ch.convertArray(l,e.times.constructor),e.values=ch.convertArray(u,e.values.constructor),a.push(e))}i.tracks=a;let o=1/0;for(let t=0;t<i.tracks.length;++t)o>i.tracks[t].times[0]&&(o=i.tracks[t].times[0]);for(let t=0;t<i.tracks.length;++t)i.tracks[t].shift(-1*o);return i.resetDuration(),i},makeClipAdditive:function(t,e=0,n=t,r=30){r<=0&&(r=30);const s=n.tracks.length,i=e/r;for(let e=0;e<s;++e){const r=n.tracks[e],s=r.ValueTypeName;if(\"bool\"===s||\"string\"===s)continue;const a=t.tracks.find((function(t){return t.name===r.name&&t.ValueTypeName===s}));if(void 0===a)continue;let o=0;const l=r.getValueSize();r.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(o=l/3);let u=0;const c=a.getValueSize();a.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(u=c/3);const h=r.times.length-1;let d;if(i<=r.times[0]){const t=o,e=l-o;d=ch.arraySlice(r.values,t,e)}else if(i>=r.times[h]){const t=h*l+o,e=t+l-o;d=ch.arraySlice(r.values,t,e)}else{const t=r.createInterpolant(),e=o,n=l-o;t.evaluate(i),d=ch.arraySlice(t.resultBuffer,e,n)}\"quaternion\"===s&&(new ar).fromArray(d).normalize().conjugate().toArray(d);const p=a.times.length;for(let t=0;t<p;++t){const e=t*c+u;if(\"quaternion\"===s)ar.multiplyQuaternionsFlat(a.values,e,d,0,a.values,e);else{const t=c-2*u;for(let n=0;n<t;++n)a.values[e+n]-=d[n]}}}return t.blendMode=je,t}};class hh{constructor(t,e,n,r){this.parameterPositions=t,this._cachedIndex=0,this.resultBuffer=void 0!==r?r:new e.constructor(n),this.sampleValues=e,this.valueSize=n,this.settings=null,this.DefaultSettings_={}}evaluate(t){const e=this.parameterPositions;let n=this._cachedIndex,r=e[n],s=e[n-1];t:{e:{let i;n:{r:if(!(t<r)){for(let i=n+2;;){if(void 0===r){if(t<s)break r;return n=e.length,this._cachedIndex=n,this.afterEnd_(n-1,t,s)}if(n===i)break;if(s=r,r=e[++n],t<r)break e}i=e.length;break n}if(t>=s)break t;{const a=e[1];t<a&&(n=2,s=a);for(let i=n-2;;){if(void 0===s)return this._cachedIndex=0,this.beforeStart_(0,t,r);if(n===i)break;if(r=s,s=e[--n-1],t>=s)break e}i=n,n=0}}for(;n<i;){const r=n+i>>>1;t<e[r]?i=r:n=r+1}if(r=e[n],s=e[n-1],void 0===s)return this._cachedIndex=0,this.beforeStart_(0,t,r);if(void 0===r)return n=e.length,this._cachedIndex=n,this.afterEnd_(n-1,s,t)}this._cachedIndex=n,this.intervalChanged_(n,s,r)}return this.interpolate_(n,s,t,r)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(t){const e=this.resultBuffer,n=this.sampleValues,r=this.valueSize,s=t*r;for(let t=0;t!==r;++t)e[t]=n[s+t];return e}interpolate_(){throw new Error(\"call to abstract method\")}intervalChanged_(){}}hh.prototype.beforeStart_=hh.prototype.copySampleValue_,hh.prototype.afterEnd_=hh.prototype.copySampleValue_;class dh extends hh{constructor(t,e,n,r){super(t,e,n,r),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0,this.DefaultSettings_={endingStart:Ve,endingEnd:Ve}}intervalChanged_(t,e,n){const r=this.parameterPositions;let s=t-2,i=t+1,a=r[s],o=r[i];if(void 0===a)switch(this.getSettings_().endingStart){case We:s=t,a=2*e-n;break;case Ge:s=r.length-2,a=e+r[s]-r[s+1];break;default:s=t,a=n}if(void 0===o)switch(this.getSettings_().endingEnd){case We:i=t,o=2*n-e;break;case Ge:i=1,o=n+r[1]-r[0];break;default:i=t-1,o=e}const l=.5*(n-e),u=this.valueSize;this._weightPrev=l/(e-a),this._weightNext=l/(o-n),this._offsetPrev=s*u,this._offsetNext=i*u}interpolate_(t,e,n,r){const s=this.resultBuffer,i=this.sampleValues,a=this.valueSize,o=t*a,l=o-a,u=this._offsetPrev,c=this._offsetNext,h=this._weightPrev,d=this._weightNext,p=(n-e)/(r-e),f=p*p,m=f*p,g=-h*m+2*h*f-h*p,y=(1+h)*m+(-1.5-2*h)*f+(-.5+h)*p+1,x=(-1-d)*m+(1.5+d)*f+.5*p,b=d*m-d*f;for(let t=0;t!==a;++t)s[t]=g*i[u+t]+y*i[l+t]+x*i[o+t]+b*i[c+t];return s}}class ph extends hh{constructor(t,e,n,r){super(t,e,n,r)}interpolate_(t,e,n,r){const s=this.resultBuffer,i=this.sampleValues,a=this.valueSize,o=t*a,l=o-a,u=(n-e)/(r-e),c=1-u;for(let t=0;t!==a;++t)s[t]=i[l+t]*c+i[o+t]*u;return s}}class fh extends hh{constructor(t,e,n,r){super(t,e,n,r)}interpolate_(t){return this.copySampleValue_(t-1)}}class mh{constructor(t,e,n,r){if(void 0===t)throw new Error(\"THREE.KeyframeTrack: track name is undefined\");if(void 0===e||0===e.length)throw new Error(\"THREE.KeyframeTrack: no keyframes in track named \"+t);this.name=t,this.times=ch.convertArray(e,this.TimeBufferType),this.values=ch.convertArray(n,this.ValueBufferType),this.setInterpolation(r||this.DefaultInterpolation)}static toJSON(t){const e=t.constructor;let n;if(e.toJSON!==this.toJSON)n=e.toJSON(t);else{n={name:t.name,times:ch.convertArray(t.times,Array),values:ch.convertArray(t.values,Array)};const e=t.getInterpolation();e!==t.DefaultInterpolation&&(n.interpolation=e)}return n.type=t.ValueTypeName,n}InterpolantFactoryMethodDiscrete(t){return new fh(this.times,this.values,this.getValueSize(),t)}InterpolantFactoryMethodLinear(t){return new ph(this.times,this.values,this.getValueSize(),t)}InterpolantFactoryMethodSmooth(t){return new dh(this.times,this.values,this.getValueSize(),t)}setInterpolation(t){let e;switch(t){case ze:e=this.InterpolantFactoryMethodDiscrete;break;case Be:e=this.InterpolantFactoryMethodLinear;break;case Ue:e=this.InterpolantFactoryMethodSmooth}if(void 0===e){const e=\"unsupported interpolation for \"+this.ValueTypeName+\" keyframe track named \"+this.name;if(void 0===this.createInterpolant){if(t===this.DefaultInterpolation)throw new Error(e);this.setInterpolation(this.DefaultInterpolation)}return console.warn(\"THREE.KeyframeTrack:\",e),this}return this.createInterpolant=e,this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return ze;case this.InterpolantFactoryMethodLinear:return Be;case this.InterpolantFactoryMethodSmooth:return Ue}}getValueSize(){return this.values.length/this.times.length}shift(t){if(0!==t){const e=this.times;for(let n=0,r=e.length;n!==r;++n)e[n]+=t}return this}scale(t){if(1!==t){const e=this.times;for(let n=0,r=e.length;n!==r;++n)e[n]*=t}return this}trim(t,e){const n=this.times,r=n.length;let s=0,i=r-1;for(;s!==r&&n[s]<t;)++s;for(;-1!==i&&n[i]>e;)--i;if(++i,0!==s||i!==r){s>=i&&(i=Math.max(i,1),s=i-1);const t=this.getValueSize();this.times=ch.arraySlice(n,s,i),this.values=ch.arraySlice(this.values,s*t,i*t)}return this}validate(){let t=!0;const e=this.getValueSize();e-Math.floor(e)!=0&&(console.error(\"THREE.KeyframeTrack: Invalid value size in track.\",this),t=!1);const n=this.times,r=this.values,s=n.length;0===s&&(console.error(\"THREE.KeyframeTrack: Track is empty.\",this),t=!1);let i=null;for(let e=0;e!==s;e++){const r=n[e];if(\"number\"==typeof r&&isNaN(r)){console.error(\"THREE.KeyframeTrack: Time is not a valid number.\",this,e,r),t=!1;break}if(null!==i&&i>r){console.error(\"THREE.KeyframeTrack: Out of order keys.\",this,e,r,i),t=!1;break}i=r}if(void 0!==r&&ch.isTypedArray(r))for(let e=0,n=r.length;e!==n;++e){const n=r[e];if(isNaN(n)){console.error(\"THREE.KeyframeTrack: Value is not a valid number.\",this,e,n),t=!1;break}}return t}optimize(){const t=ch.arraySlice(this.times),e=ch.arraySlice(this.values),n=this.getValueSize(),r=this.getInterpolation()===Ue,s=t.length-1;let i=1;for(let a=1;a<s;++a){let s=!1;const o=t[a];if(o!==t[a+1]&&(1!==a||o!==t[0]))if(r)s=!0;else{const t=a*n,r=t-n,i=t+n;for(let a=0;a!==n;++a){const n=e[t+a];if(n!==e[r+a]||n!==e[i+a]){s=!0;break}}}if(s){if(a!==i){t[i]=t[a];const r=a*n,s=i*n;for(let t=0;t!==n;++t)e[s+t]=e[r+t]}++i}}if(s>0){t[i]=t[s];for(let t=s*n,r=i*n,a=0;a!==n;++a)e[r+a]=e[t+a];++i}return i!==t.length?(this.times=ch.arraySlice(t,0,i),this.values=ch.arraySlice(e,0,i*n)):(this.times=t,this.values=e),this}clone(){const t=ch.arraySlice(this.times,0),e=ch.arraySlice(this.values,0),n=new(0,this.constructor)(this.name,t,e);return n.createInterpolant=this.createInterpolant,n}}mh.prototype.TimeBufferType=Float32Array,mh.prototype.ValueBufferType=Float32Array,mh.prototype.DefaultInterpolation=Be;class gh extends mh{}gh.prototype.ValueTypeName=\"bool\",gh.prototype.ValueBufferType=Array,gh.prototype.DefaultInterpolation=ze,gh.prototype.InterpolantFactoryMethodLinear=void 0,gh.prototype.InterpolantFactoryMethodSmooth=void 0;class yh extends mh{}yh.prototype.ValueTypeName=\"color\";class xh extends mh{}xh.prototype.ValueTypeName=\"number\";class bh extends hh{constructor(t,e,n,r){super(t,e,n,r)}interpolate_(t,e,n,r){const s=this.resultBuffer,i=this.sampleValues,a=this.valueSize,o=(n-e)/(r-e);let l=t*a;for(let t=l+a;l!==t;l+=4)ar.slerpFlat(s,0,i,l-a,i,l,o);return s}}class vh extends mh{InterpolantFactoryMethodLinear(t){return new bh(this.times,this.values,this.getValueSize(),t)}}vh.prototype.ValueTypeName=\"quaternion\",vh.prototype.DefaultInterpolation=Be,vh.prototype.InterpolantFactoryMethodSmooth=void 0;class wh extends mh{}wh.prototype.ValueTypeName=\"string\",wh.prototype.ValueBufferType=Array,wh.prototype.DefaultInterpolation=ze,wh.prototype.InterpolantFactoryMethodLinear=void 0,wh.prototype.InterpolantFactoryMethodSmooth=void 0;class Sh extends mh{}Sh.prototype.ValueTypeName=\"vector\";class Th{constructor(t,e=-1,n,r=He){this.name=t,this.tracks=n,this.duration=e,this.blendMode=r,this.uuid=Un(),this.duration<0&&this.resetDuration()}static parse(t){const e=[],n=t.tracks,r=1/(t.fps||1);for(let t=0,s=n.length;t!==s;++t)e.push(_h(n[t]).scale(r));const s=new this(t.name,t.duration,e,t.blendMode);return s.uuid=t.uuid,s}static toJSON(t){const e=[],n=t.tracks,r={name:t.name,duration:t.duration,tracks:e,uuid:t.uuid,blendMode:t.blendMode};for(let t=0,r=n.length;t!==r;++t)e.push(mh.toJSON(n[t]));return r}static CreateFromMorphTargetSequence(t,e,n,r){const s=e.length,i=[];for(let t=0;t<s;t++){let a=[],o=[];a.push((t+s-1)%s,t,(t+1)%s),o.push(0,1,0);const l=ch.getKeyframeOrder(a);a=ch.sortedArray(a,1,l),o=ch.sortedArray(o,1,l),r||0!==a[0]||(a.push(s),o.push(o[0])),i.push(new xh(\".morphTargetInfluences[\"+e[t].name+\"]\",a,o).scale(1/n))}return new this(t,-1,i)}static findByName(t,e){let n=t;if(!Array.isArray(t)){const e=t;n=e.geometry&&e.geometry.animations||e.animations}for(let t=0;t<n.length;t++)if(n[t].name===e)return n[t];return null}static CreateClipsFromMorphTargetSequences(t,e,n){const r={},s=/^([\\w-]*?)([\\d]+)$/;for(let e=0,n=t.length;e<n;e++){const n=t[e],i=n.name.match(s);if(i&&i.length>1){const t=i[1];let e=r[t];e||(r[t]=e=[]),e.push(n)}}const i=[];for(const t in r)i.push(this.CreateFromMorphTargetSequence(t,r[t],e,n));return i}static parseAnimation(t,e){if(!t)return console.error(\"THREE.AnimationClip: No animation in JSONLoader data.\"),null;const n=function(t,e,n,r,s){if(0!==n.length){const i=[],a=[];ch.flattenJSON(n,i,a,r),0!==i.length&&s.push(new t(e,i,a))}},r=[],s=t.name||\"default\",i=t.fps||30,a=t.blendMode;let o=t.length||-1;const l=t.hierarchy||[];for(let t=0;t<l.length;t++){const s=l[t].keys;if(s&&0!==s.length)if(s[0].morphTargets){const t={};let e;for(e=0;e<s.length;e++)if(s[e].morphTargets)for(let n=0;n<s[e].morphTargets.length;n++)t[s[e].morphTargets[n]]=-1;for(const n in t){const t=[],i=[];for(let r=0;r!==s[e].morphTargets.length;++r){const r=s[e];t.push(r.time),i.push(r.morphTarget===n?1:0)}r.push(new xh(\".morphTargetInfluence[\"+n+\"]\",t,i))}o=t.length*(i||1)}else{const i=\".bones[\"+e[t].name+\"]\";n(Sh,i+\".position\",s,\"pos\",r),n(vh,i+\".quaternion\",s,\"rot\",r),n(Sh,i+\".scale\",s,\"scl\",r)}}return 0===r.length?null:new this(s,o,r,a)}resetDuration(){let t=0;for(let e=0,n=this.tracks.length;e!==n;++e){const n=this.tracks[e];t=Math.max(t,n.times[n.times.length-1])}return this.duration=t,this}trim(){for(let t=0;t<this.tracks.length;t++)this.tracks[t].trim(0,this.duration);return this}validate(){let t=!0;for(let e=0;e<this.tracks.length;e++)t=t&&this.tracks[e].validate();return t}optimize(){for(let t=0;t<this.tracks.length;t++)this.tracks[t].optimize();return this}clone(){const t=[];for(let e=0;e<this.tracks.length;e++)t.push(this.tracks[e].clone());return new this.constructor(this.name,this.duration,t,this.blendMode)}toJSON(){return this.constructor.toJSON(this)}}function _h(t){if(void 0===t.type)throw new Error(\"THREE.KeyframeTrack: track type undefined, can not parse\");const e=function(t){switch(t.toLowerCase()){case\"scalar\":case\"double\":case\"float\":case\"number\":case\"integer\":return xh;case\"vector\":case\"vector2\":case\"vector3\":case\"vector4\":return Sh;case\"color\":return yh;case\"quaternion\":return vh;case\"bool\":case\"boolean\":return gh;case\"string\":return wh}throw new Error(\"THREE.KeyframeTrack: Unsupported typeName: \"+t)}(t.type);if(void 0===t.times){const e=[],n=[];ch.flattenJSON(t.keys,e,n,\"value\"),t.times=e,t.values=n}return void 0!==e.parse?e.parse(t):new e(t.name,t.times,t.values,t.interpolation)}const Mh={enabled:!1,files:{},add:function(t,e){!1!==this.enabled&&(this.files[t]=e)},get:function(t){if(!1!==this.enabled)return this.files[t]},remove:function(t){delete this.files[t]},clear:function(){this.files={}}};class kh{constructor(t,e,n){const r=this;let s,i=!1,a=0,o=0;const l=[];this.onStart=void 0,this.onLoad=t,this.onProgress=e,this.onError=n,this.itemStart=function(t){o++,!1===i&&void 0!==r.onStart&&r.onStart(t,a,o),i=!0},this.itemEnd=function(t){a++,void 0!==r.onProgress&&r.onProgress(t,a,o),a===o&&(i=!1,void 0!==r.onLoad&&r.onLoad())},this.itemError=function(t){void 0!==r.onError&&r.onError(t)},this.resolveURL=function(t){return s?s(t):t},this.setURLModifier=function(t){return s=t,this},this.addHandler=function(t,e){return l.push(t,e),this},this.removeHandler=function(t){const e=l.indexOf(t);return-1!==e&&l.splice(e,2),this},this.getHandler=function(t){for(let e=0,n=l.length;e<n;e+=2){const n=l[e],r=l[e+1];if(n.global&&(n.lastIndex=0),n.test(t))return r}return null}}}const Eh=new kh;class Ih{constructor(t){this.manager=void 0!==t?t:Eh,this.crossOrigin=\"anonymous\",this.withCredentials=!1,this.path=\"\",this.resourcePath=\"\",this.requestHeader={}}load(){}loadAsync(t,e){const n=this;return new Promise((function(r,s){n.load(t,r,e,s)}))}parse(){}setCrossOrigin(t){return this.crossOrigin=t,this}setWithCredentials(t){return this.withCredentials=t,this}setPath(t){return this.path=t,this}setResourcePath(t){return this.resourcePath=t,this}setRequestHeader(t){return this.requestHeader=t,this}}const Ch={};class Nh extends Ih{constructor(t){super(t)}load(t,e,n,r){void 0===t&&(t=\"\"),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);const s=this,i=Mh.get(t);if(void 0!==i)return s.manager.itemStart(t),setTimeout((function(){e&&e(i),s.manager.itemEnd(t)}),0),i;if(void 0!==Ch[t])return void Ch[t].push({onLoad:e,onProgress:n,onError:r});const a=t.match(/^data:(.*?)(;base64)?,(.*)$/);let o;if(a){const n=a[1],i=!!a[2];let o=a[3];o=decodeURIComponent(o),i&&(o=atob(o));try{let r;const i=(this.responseType||\"\").toLowerCase();switch(i){case\"arraybuffer\":case\"blob\":const t=new Uint8Array(o.length);for(let e=0;e<o.length;e++)t[e]=o.charCodeAt(e);r=\"blob\"===i?new Blob([t.buffer],{type:n}):t.buffer;break;case\"document\":const e=new DOMParser;r=e.parseFromString(o,n);break;case\"json\":r=JSON.parse(o);break;default:r=o}setTimeout((function(){e&&e(r),s.manager.itemEnd(t)}),0)}catch(e){setTimeout((function(){r&&r(e),s.manager.itemError(t),s.manager.itemEnd(t)}),0)}}else{Ch[t]=[],Ch[t].push({onLoad:e,onProgress:n,onError:r}),o=new XMLHttpRequest,o.open(\"GET\",t,!0),o.addEventListener(\"load\",(function(e){const n=this.response,r=Ch[t];if(delete Ch[t],200===this.status||0===this.status){0===this.status&&console.warn(\"THREE.FileLoader: HTTP Status 0 received.\"),Mh.add(t,n);for(let t=0,e=r.length;t<e;t++){const e=r[t];e.onLoad&&e.onLoad(n)}s.manager.itemEnd(t)}else{for(let t=0,n=r.length;t<n;t++){const n=r[t];n.onError&&n.onError(e)}s.manager.itemError(t),s.manager.itemEnd(t)}}),!1),o.addEventListener(\"progress\",(function(e){const n=Ch[t];for(let t=0,r=n.length;t<r;t++){const r=n[t];r.onProgress&&r.onProgress(e)}}),!1),o.addEventListener(\"error\",(function(e){const n=Ch[t];delete Ch[t];for(let t=0,r=n.length;t<r;t++){const r=n[t];r.onError&&r.onError(e)}s.manager.itemError(t),s.manager.itemEnd(t)}),!1),o.addEventListener(\"abort\",(function(e){const n=Ch[t];delete Ch[t];for(let t=0,r=n.length;t<r;t++){const r=n[t];r.onError&&r.onError(e)}s.manager.itemError(t),s.manager.itemEnd(t)}),!1),void 0!==this.responseType&&(o.responseType=this.responseType),void 0!==this.withCredentials&&(o.withCredentials=this.withCredentials),o.overrideMimeType&&o.overrideMimeType(void 0!==this.mimeType?this.mimeType:\"text/plain\");for(const t in this.requestHeader)o.setRequestHeader(t,this.requestHeader[t]);o.send(null)}return s.manager.itemStart(t),o}setResponseType(t){return this.responseType=t,this}setMimeType(t){return this.mimeType=t,this}}class Ah extends Ih{constructor(t){super(t)}load(t,e,n,r){const s=this,i=new Nh(this.manager);i.setPath(this.path),i.setRequestHeader(this.requestHeader),i.setWithCredentials(this.withCredentials),i.load(t,(function(n){try{e(s.parse(JSON.parse(n)))}catch(e){r?r(e):console.error(e),s.manager.itemError(t)}}),n,r)}parse(t){const e=[];for(let n=0;n<t.length;n++){const r=Th.parse(t[n]);e.push(r)}return e}}class Rh extends Ih{constructor(t){super(t)}load(t,e,n,r){const s=this,i=[],a=new Au,o=new Nh(this.manager);o.setPath(this.path),o.setResponseType(\"arraybuffer\"),o.setRequestHeader(this.requestHeader),o.setWithCredentials(s.withCredentials);let l=0;function u(u){o.load(t[u],(function(t){const n=s.parse(t,!0);i[u]={width:n.width,height:n.height,format:n.format,mipmaps:n.mipmaps},l+=1,6===l&&(1===n.mipmapCount&&(a.minFilter=bt),a.image=i,a.format=n.format,a.needsUpdate=!0,e&&e(a))}),n,r)}if(Array.isArray(t))for(let e=0,n=t.length;e<n;++e)u(e);else o.load(t,(function(t){const n=s.parse(t,!0);if(n.isCubemap){const t=n.mipmaps.length/n.mipmapCount;for(let e=0;e<t;e++){i[e]={mipmaps:[]};for(let t=0;t<n.mipmapCount;t++)i[e].mipmaps.push(n.mipmaps[e*n.mipmapCount+t]),i[e].format=n.format,i[e].width=n.width,i[e].height=n.height}a.image=i}else a.image.width=n.width,a.image.height=n.height,a.mipmaps=n.mipmaps;1===n.mipmapCount&&(a.minFilter=bt),a.format=n.format,a.needsUpdate=!0,e&&e(a)}),n,r);return a}}class Lh extends Ih{constructor(t){super(t)}load(t,e,n,r){void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);const s=this,i=Mh.get(t);if(void 0!==i)return s.manager.itemStart(t),setTimeout((function(){e&&e(i),s.manager.itemEnd(t)}),0),i;const a=document.createElementNS(\"http://www.w3.org/1999/xhtml\",\"img\");function o(){a.removeEventListener(\"load\",o,!1),a.removeEventListener(\"error\",l,!1),Mh.add(t,this),e&&e(this),s.manager.itemEnd(t)}function l(e){a.removeEventListener(\"load\",o,!1),a.removeEventListener(\"error\",l,!1),r&&r(e),s.manager.itemError(t),s.manager.itemEnd(t)}return a.addEventListener(\"load\",o,!1),a.addEventListener(\"error\",l,!1),\"data:\"!==t.substr(0,5)&&void 0!==this.crossOrigin&&(a.crossOrigin=this.crossOrigin),s.manager.itemStart(t),a.src=t,a}}class Dh extends Ih{constructor(t){super(t)}load(t,e,n,r){const s=new Ci,i=new Lh(this.manager);i.setCrossOrigin(this.crossOrigin),i.setPath(this.path);let a=0;function o(n){i.load(t[n],(function(t){s.images[n]=t,a++,6===a&&(s.needsUpdate=!0,e&&e(s))}),void 0,r)}for(let e=0;e<t.length;++e)o(e);return s}}class Fh extends Ih{constructor(t){super(t)}load(t,e,n,r){const s=this,i=new nu,a=new Nh(this.manager);return a.setResponseType(\"arraybuffer\"),a.setRequestHeader(this.requestHeader),a.setPath(this.path),a.setWithCredentials(s.withCredentials),a.load(t,(function(t){const n=s.parse(t);n&&(void 0!==n.image?i.image=n.image:void 0!==n.data&&(i.image.width=n.width,i.image.height=n.height,i.image.data=n.data),i.wrapS=void 0!==n.wrapS?n.wrapS:dt,i.wrapT=void 0!==n.wrapT?n.wrapT:dt,i.magFilter=void 0!==n.magFilter?n.magFilter:bt,i.minFilter=void 0!==n.minFilter?n.minFilter:bt,i.anisotropy=void 0!==n.anisotropy?n.anisotropy:1,void 0!==n.encoding&&(i.encoding=n.encoding),void 0!==n.flipY&&(i.flipY=n.flipY),void 0!==n.format&&(i.format=n.format),void 0!==n.type&&(i.type=n.type),void 0!==n.mipmaps&&(i.mipmaps=n.mipmaps,i.minFilter=St),1===n.mipmapCount&&(i.minFilter=bt),void 0!==n.generateMipmaps&&(i.generateMipmaps=n.generateMipmaps),i.needsUpdate=!0,e&&e(i,n))}),n,r),i}}class $h extends Ih{constructor(t){super(t)}load(t,e,n,r){const s=new tr,i=new Lh(this.manager);return i.setCrossOrigin(this.crossOrigin),i.setPath(this.path),i.load(t,(function(n){s.image=n;const r=t.search(/\\.jpe?g($|\\?)/i)>0||0===t.search(/^data\\:image\\/jpeg/);s.format=r?Ot:Pt,s.needsUpdate=!0,void 0!==e&&e(s)}),n,r),s}}class Oh extends Gu{constructor(){super(),this.type=\"CurvePath\",this.curves=[],this.autoClose=!1}add(t){this.curves.push(t)}closePath(){const t=this.curves[0].getPoint(0),e=this.curves[this.curves.length-1].getPoint(1);t.equals(e)||this.curves.push(new sc(e,t))}getPoint(t){const e=t*this.getLength(),n=this.getCurveLengths();let r=0;for(;r<n.length;){if(n[r]>=e){const t=n[r]-e,s=this.curves[r],i=s.getLength(),a=0===i?0:1-t/i;return s.getPointAt(a)}r++}return null}getLength(){const t=this.getCurveLengths();return t[t.length-1]}updateArcLengths(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()}getCurveLengths(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;const t=[];let e=0;for(let n=0,r=this.curves.length;n<r;n++)e+=this.curves[n].getLength(),t.push(e);return this.cacheLengths=t,t}getSpacedPoints(t=40){const e=[];for(let n=0;n<=t;n++)e.push(this.getPoint(n/t));return this.autoClose&&e.push(e[0]),e}getPoints(t=12){const e=[];let n;for(let r=0,s=this.curves;r<s.length;r++){const i=s[r],a=i&&i.isEllipseCurve?2*t:i&&(i.isLineCurve||i.isLineCurve3)?1:i&&i.isSplineCurve?t*i.points.length:t,o=i.getPoints(a);for(let t=0;t<o.length;t++){const r=o[t];n&&n.equals(r)||(e.push(r),n=r)}}return this.autoClose&&e.length>1&&!e[e.length-1].equals(e[0])&&e.push(e[0]),e}copy(t){super.copy(t),this.curves=[];for(let e=0,n=t.curves.length;e<n;e++){const n=t.curves[e];this.curves.push(n.clone())}return this.autoClose=t.autoClose,this}toJSON(){const t=super.toJSON();t.autoClose=this.autoClose,t.curves=[];for(let e=0,n=this.curves.length;e<n;e++){const n=this.curves[e];t.curves.push(n.toJSON())}return t}fromJSON(t){super.fromJSON(t),this.autoClose=t.autoClose,this.curves=[];for(let e=0,n=t.curves.length;e<n;e++){const n=t.curves[e];this.curves.push((new uc[n.type]).fromJSON(n))}return this}}class Ph extends Oh{constructor(t){super(),this.type=\"Path\",this.currentPoint=new Kn,t&&this.setFromPoints(t)}setFromPoints(t){this.moveTo(t[0].x,t[0].y);for(let e=1,n=t.length;e<n;e++)this.lineTo(t[e].x,t[e].y);return this}moveTo(t,e){return this.currentPoint.set(t,e),this}lineTo(t,e){const n=new sc(this.currentPoint.clone(),new Kn(t,e));return this.curves.push(n),this.currentPoint.set(t,e),this}quadraticCurveTo(t,e,n,r){const s=new ac(this.currentPoint.clone(),new Kn(t,e),new Kn(n,r));return this.curves.push(s),this.currentPoint.set(n,r),this}bezierCurveTo(t,e,n,r,s,i){const a=new nc(this.currentPoint.clone(),new Kn(t,e),new Kn(n,r),new Kn(s,i));return this.curves.push(a),this.currentPoint.set(s,i),this}splineThru(t){const e=[this.currentPoint.clone()].concat(t),n=new lc(e);return this.curves.push(n),this.currentPoint.copy(t[t.length-1]),this}arc(t,e,n,r,s,i){const a=this.currentPoint.x,o=this.currentPoint.y;return this.absarc(t+a,e+o,n,r,s,i),this}absarc(t,e,n,r,s,i){return this.absellipse(t,e,n,n,r,s,i),this}ellipse(t,e,n,r,s,i,a,o){const l=this.currentPoint.x,u=this.currentPoint.y;return this.absellipse(t+l,e+u,n,r,s,i,a,o),this}absellipse(t,e,n,r,s,i,a,o){const l=new Hu(t,e,n,r,s,i,a,o);if(this.curves.length>0){const t=l.getPoint(0);t.equals(this.currentPoint)||this.lineTo(t.x,t.y)}this.curves.push(l);const u=l.getPoint(1);return this.currentPoint.copy(u),this}copy(t){return super.copy(t),this.currentPoint.copy(t.currentPoint),this}toJSON(){const t=super.toJSON();return t.currentPoint=this.currentPoint.toArray(),t}fromJSON(t){return super.fromJSON(t),this.currentPoint.fromArray(t.currentPoint),this}}class zh extends Ph{constructor(t){super(t),this.uuid=Un(),this.type=\"Shape\",this.holes=[]}getPointsHoles(t){const e=[];for(let n=0,r=this.holes.length;n<r;n++)e[n]=this.holes[n].getPoints(t);return e}extractPoints(t){return{shape:this.getPoints(t),holes:this.getPointsHoles(t)}}copy(t){super.copy(t),this.holes=[];for(let e=0,n=t.holes.length;e<n;e++){const n=t.holes[e];this.holes.push(n.clone())}return this}toJSON(){const t=super.toJSON();t.uuid=this.uuid,t.holes=[];for(let e=0,n=this.holes.length;e<n;e++){const n=this.holes[e];t.holes.push(n.toJSON())}return t}fromJSON(t){super.fromJSON(t),this.uuid=t.uuid,this.holes=[];for(let e=0,n=t.holes.length;e<n;e++){const n=t.holes[e];this.holes.push((new Ph).fromJSON(n))}return this}}class Bh extends us{constructor(t,e=1){super(),this.type=\"Light\",this.color=new Cs(t),this.intensity=e}dispose(){}copy(t){return super.copy(t),this.color.copy(t.color),this.intensity=t.intensity,this}toJSON(t){const e=super.toJSON(t);return e.object.color=this.color.getHex(),e.object.intensity=this.intensity,void 0!==this.groundColor&&(e.object.groundColor=this.groundColor.getHex()),void 0!==this.distance&&(e.object.distance=this.distance),void 0!==this.angle&&(e.object.angle=this.angle),void 0!==this.decay&&(e.object.decay=this.decay),void 0!==this.penumbra&&(e.object.penumbra=this.penumbra),void 0!==this.shadow&&(e.object.shadow=this.shadow.toJSON()),e}}Bh.prototype.isLight=!0;class Uh extends Bh{constructor(t,e,n){super(t,n),this.type=\"HemisphereLight\",this.position.copy(us.DefaultUp),this.updateMatrix(),this.groundColor=new Cs(e)}copy(t){return Bh.prototype.copy.call(this,t),this.groundColor.copy(t.groundColor),this}}Uh.prototype.isHemisphereLight=!0;const Vh=new Pr,Wh=new or,Gh=new or;class Hh{constructor(t){this.camera=t,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new Kn(512,512),this.map=null,this.mapPass=null,this.matrix=new Pr,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new Oi,this._frameExtents=new Kn(1,1),this._viewportCount=1,this._viewports=[new nr(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(t){const e=this.camera,n=this.matrix;Wh.setFromMatrixPosition(t.matrixWorld),e.position.copy(Wh),Gh.setFromMatrixPosition(t.target.matrixWorld),e.lookAt(Gh),e.updateMatrixWorld(),Vh.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),this._frustum.setFromProjectionMatrix(Vh),n.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),n.multiply(e.projectionMatrix),n.multiply(e.matrixWorldInverse)}getViewport(t){return this._viewports[t]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(t){return this.camera=t.camera.clone(),this.bias=t.bias,this.radius=t.radius,this.mapSize.copy(t.mapSize),this}clone(){return(new this.constructor).copy(this)}toJSON(){const t={};return 0!==this.bias&&(t.bias=this.bias),0!==this.normalBias&&(t.normalBias=this.normalBias),1!==this.radius&&(t.radius=this.radius),512===this.mapSize.x&&512===this.mapSize.y||(t.mapSize=this.mapSize.toArray()),t.camera=this.camera.toJSON(!1).object,delete t.camera.matrix,t}}class jh extends Hh{constructor(){super(new ki(50,1,.5,500)),this.focus=1}updateMatrices(t){const e=this.camera,n=2*Bn*t.angle*this.focus,r=this.mapSize.width/this.mapSize.height,s=t.distance||e.far;n===e.fov&&r===e.aspect&&s===e.far||(e.fov=n,e.aspect=r,e.far=s,e.updateProjectionMatrix()),super.updateMatrices(t)}copy(t){return super.copy(t),this.focus=t.focus,this}}jh.prototype.isSpotLightShadow=!0;class qh extends Bh{constructor(t,e,n=0,r=Math.PI/3,s=0,i=1){super(t,e),this.type=\"SpotLight\",this.position.copy(us.DefaultUp),this.updateMatrix(),this.target=new us,this.distance=n,this.angle=r,this.penumbra=s,this.decay=i,this.shadow=new jh}get power(){return this.intensity*Math.PI}set power(t){this.intensity=t/Math.PI}dispose(){this.shadow.dispose()}copy(t){return super.copy(t),this.distance=t.distance,this.angle=t.angle,this.penumbra=t.penumbra,this.decay=t.decay,this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}qh.prototype.isSpotLight=!0;const Xh=new Pr,Kh=new or,Yh=new or;class Zh extends Hh{constructor(){super(new ki(90,1,.5,500)),this._frameExtents=new Kn(4,2),this._viewportCount=6,this._viewports=[new nr(2,1,1,1),new nr(0,1,1,1),new nr(3,1,1,1),new nr(1,1,1,1),new nr(3,0,1,1),new nr(1,0,1,1)],this._cubeDirections=[new or(1,0,0),new or(-1,0,0),new or(0,0,1),new or(0,0,-1),new or(0,1,0),new or(0,-1,0)],this._cubeUps=[new or(0,1,0),new or(0,1,0),new or(0,1,0),new or(0,1,0),new or(0,0,1),new or(0,0,-1)]}updateMatrices(t,e=0){const n=this.camera,r=this.matrix,s=t.distance||n.far;s!==n.far&&(n.far=s,n.updateProjectionMatrix()),Kh.setFromMatrixPosition(t.matrixWorld),n.position.copy(Kh),Yh.copy(n.position),Yh.add(this._cubeDirections[e]),n.up.copy(this._cubeUps[e]),n.lookAt(Yh),n.updateMatrixWorld(),r.makeTranslation(-Kh.x,-Kh.y,-Kh.z),Xh.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse),this._frustum.setFromProjectionMatrix(Xh)}}Zh.prototype.isPointLightShadow=!0;class Jh extends Bh{constructor(t,e,n=0,r=1){super(t,e),this.type=\"PointLight\",this.distance=n,this.decay=r,this.shadow=new Zh}get power(){return 4*this.intensity*Math.PI}set power(t){this.intensity=t/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(t){return super.copy(t),this.distance=t.distance,this.decay=t.decay,this.shadow=t.shadow.clone(),this}}Jh.prototype.isPointLight=!0;class Qh extends Hh{constructor(){super(new Yi(-5,5,5,-5,.5,500))}}Qh.prototype.isDirectionalLightShadow=!0;class td extends Bh{constructor(t,e){super(t,e),this.type=\"DirectionalLight\",this.position.copy(us.DefaultUp),this.updateMatrix(),this.target=new us,this.shadow=new Qh}dispose(){this.shadow.dispose()}copy(t){return super.copy(t),this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}td.prototype.isDirectionalLight=!0;class ed extends Bh{constructor(t,e){super(t,e),this.type=\"AmbientLight\"}}ed.prototype.isAmbientLight=!0;class nd extends Bh{constructor(t,e,n=10,r=10){super(t,e),this.type=\"RectAreaLight\",this.width=n,this.height=r}get power(){return this.intensity*this.width*this.height*Math.PI}set power(t){this.intensity=t/(this.width*this.height*Math.PI)}copy(t){return super.copy(t),this.width=t.width,this.height=t.height,this}toJSON(t){const e=super.toJSON(t);return e.object.width=this.width,e.object.height=this.height,e}}nd.prototype.isRectAreaLight=!0;class rd{constructor(){this.coefficients=[];for(let t=0;t<9;t++)this.coefficients.push(new or)}set(t){for(let e=0;e<9;e++)this.coefficients[e].copy(t[e]);return this}zero(){for(let t=0;t<9;t++)this.coefficients[t].set(0,0,0);return this}getAt(t,e){const n=t.x,r=t.y,s=t.z,i=this.coefficients;return e.copy(i[0]).multiplyScalar(.282095),e.addScaledVector(i[1],.488603*r),e.addScaledVector(i[2],.488603*s),e.addScaledVector(i[3],.488603*n),e.addScaledVector(i[4],n*r*1.092548),e.addScaledVector(i[5],r*s*1.092548),e.addScaledVector(i[6],.315392*(3*s*s-1)),e.addScaledVector(i[7],n*s*1.092548),e.addScaledVector(i[8],.546274*(n*n-r*r)),e}getIrradianceAt(t,e){const n=t.x,r=t.y,s=t.z,i=this.coefficients;return e.copy(i[0]).multiplyScalar(.886227),e.addScaledVector(i[1],1.023328*r),e.addScaledVector(i[2],1.023328*s),e.addScaledVector(i[3],1.023328*n),e.addScaledVector(i[4],.858086*n*r),e.addScaledVector(i[5],.858086*r*s),e.addScaledVector(i[6],.743125*s*s-.247708),e.addScaledVector(i[7],.858086*n*s),e.addScaledVector(i[8],.429043*(n*n-r*r)),e}add(t){for(let e=0;e<9;e++)this.coefficients[e].add(t.coefficients[e]);return this}addScaledSH(t,e){for(let n=0;n<9;n++)this.coefficients[n].addScaledVector(t.coefficients[n],e);return this}scale(t){for(let e=0;e<9;e++)this.coefficients[e].multiplyScalar(t);return this}lerp(t,e){for(let n=0;n<9;n++)this.coefficients[n].lerp(t.coefficients[n],e);return this}equals(t){for(let e=0;e<9;e++)if(!this.coefficients[e].equals(t.coefficients[e]))return!1;return!0}copy(t){return this.set(t.coefficients)}clone(){return(new this.constructor).copy(this)}fromArray(t,e=0){const n=this.coefficients;for(let r=0;r<9;r++)n[r].fromArray(t,e+3*r);return this}toArray(t=[],e=0){const n=this.coefficients;for(let r=0;r<9;r++)n[r].toArray(t,e+3*r);return t}static getBasisAt(t,e){const n=t.x,r=t.y,s=t.z;e[0]=.282095,e[1]=.488603*r,e[2]=.488603*s,e[3]=.488603*n,e[4]=1.092548*n*r,e[5]=1.092548*r*s,e[6]=.315392*(3*s*s-1),e[7]=1.092548*n*s,e[8]=.546274*(n*n-r*r)}}rd.prototype.isSphericalHarmonics3=!0;class sd extends Bh{constructor(t=new rd,e=1){super(void 0,e),this.sh=t}copy(t){return super.copy(t),this.sh.copy(t.sh),this}fromJSON(t){return this.intensity=t.intensity,this.sh.fromArray(t.sh),this}toJSON(t){const e=super.toJSON(t);return e.object.sh=this.sh.toArray(),e}}sd.prototype.isLightProbe=!0;class id extends Ih{constructor(t){super(t),this.textures={}}load(t,e,n,r){const s=this,i=new Nh(s.manager);i.setPath(s.path),i.setRequestHeader(s.requestHeader),i.setWithCredentials(s.withCredentials),i.load(t,(function(n){try{e(s.parse(JSON.parse(n)))}catch(e){r?r(e):console.error(e),s.manager.itemError(t)}}),n,r)}parse(t){const e=this.textures;function n(t){return void 0===e[t]&&console.warn(\"THREE.MaterialLoader: Undefined texture\",t),e[t]}const r=new uh[t.type];if(void 0!==t.uuid&&(r.uuid=t.uuid),void 0!==t.name&&(r.name=t.name),void 0!==t.color&&void 0!==r.color&&r.color.setHex(t.color),void 0!==t.roughness&&(r.roughness=t.roughness),void 0!==t.metalness&&(r.metalness=t.metalness),void 0!==t.sheenTint&&(r.sheenTint=(new Cs).setHex(t.sheenTint)),void 0!==t.emissive&&void 0!==r.emissive&&r.emissive.setHex(t.emissive),void 0!==t.specular&&void 0!==r.specular&&r.specular.setHex(t.specular),void 0!==t.specularIntensity&&(r.specularIntensity=t.specularIntensity),void 0!==t.specularTint&&void 0!==r.specularTint&&r.specularTint.setHex(t.specularTint),void 0!==t.shininess&&(r.shininess=t.shininess),void 0!==t.clearcoat&&(r.clearcoat=t.clearcoat),void 0!==t.clearcoatRoughness&&(r.clearcoatRoughness=t.clearcoatRoughness),void 0!==t.transmission&&(r.transmission=t.transmission),void 0!==t.thickness&&(r.thickness=t.thickness),void 0!==t.attenuationDistance&&(r.attenuationDistance=t.attenuationDistance),void 0!==t.attenuationTint&&void 0!==r.attenuationTint&&r.attenuationTint.setHex(t.attenuationTint),void 0!==t.fog&&(r.fog=t.fog),void 0!==t.flatShading&&(r.flatShading=t.flatShading),void 0!==t.blending&&(r.blending=t.blending),void 0!==t.combine&&(r.combine=t.combine),void 0!==t.side&&(r.side=t.side),void 0!==t.shadowSide&&(r.shadowSide=t.shadowSide),void 0!==t.opacity&&(r.opacity=t.opacity),void 0!==t.format&&(r.format=t.format),void 0!==t.transparent&&(r.transparent=t.transparent),void 0!==t.alphaTest&&(r.alphaTest=t.alphaTest),void 0!==t.depthTest&&(r.depthTest=t.depthTest),void 0!==t.depthWrite&&(r.depthWrite=t.depthWrite),void 0!==t.colorWrite&&(r.colorWrite=t.colorWrite),void 0!==t.stencilWrite&&(r.stencilWrite=t.stencilWrite),void 0!==t.stencilWriteMask&&(r.stencilWriteMask=t.stencilWriteMask),void 0!==t.stencilFunc&&(r.stencilFunc=t.stencilFunc),void 0!==t.stencilRef&&(r.stencilRef=t.stencilRef),void 0!==t.stencilFuncMask&&(r.stencilFuncMask=t.stencilFuncMask),void 0!==t.stencilFail&&(r.stencilFail=t.stencilFail),void 0!==t.stencilZFail&&(r.stencilZFail=t.stencilZFail),void 0!==t.stencilZPass&&(r.stencilZPass=t.stencilZPass),void 0!==t.wireframe&&(r.wireframe=t.wireframe),void 0!==t.wireframeLinewidth&&(r.wireframeLinewidth=t.wireframeLinewidth),void 0!==t.wireframeLinecap&&(r.wireframeLinecap=t.wireframeLinecap),void 0!==t.wireframeLinejoin&&(r.wireframeLinejoin=t.wireframeLinejoin),void 0!==t.rotation&&(r.rotation=t.rotation),1!==t.linewidth&&(r.linewidth=t.linewidth),void 0!==t.dashSize&&(r.dashSize=t.dashSize),void 0!==t.gapSize&&(r.gapSize=t.gapSize),void 0!==t.scale&&(r.scale=t.scale),void 0!==t.polygonOffset&&(r.polygonOffset=t.polygonOffset),void 0!==t.polygonOffsetFactor&&(r.polygonOffsetFactor=t.polygonOffsetFactor),void 0!==t.polygonOffsetUnits&&(r.polygonOffsetUnits=t.polygonOffsetUnits),void 0!==t.dithering&&(r.dithering=t.dithering),void 0!==t.alphaToCoverage&&(r.alphaToCoverage=t.alphaToCoverage),void 0!==t.premultipliedAlpha&&(r.premultipliedAlpha=t.premultipliedAlpha),void 0!==t.visible&&(r.visible=t.visible),void 0!==t.toneMapped&&(r.toneMapped=t.toneMapped),void 0!==t.userData&&(r.userData=t.userData),void 0!==t.vertexColors&&(\"number\"==typeof t.vertexColors?r.vertexColors=t.vertexColors>0:r.vertexColors=t.vertexColors),void 0!==t.uniforms)for(const e in t.uniforms){const s=t.uniforms[e];switch(r.uniforms[e]={},s.type){case\"t\":r.uniforms[e].value=n(s.value);break;case\"c\":r.uniforms[e].value=(new Cs).setHex(s.value);break;case\"v2\":r.uniforms[e].value=(new Kn).fromArray(s.value);break;case\"v3\":r.uniforms[e].value=(new or).fromArray(s.value);break;case\"v4\":r.uniforms[e].value=(new nr).fromArray(s.value);break;case\"m3\":r.uniforms[e].value=(new Yn).fromArray(s.value);break;case\"m4\":r.uniforms[e].value=(new Pr).fromArray(s.value);break;default:r.uniforms[e].value=s.value}}if(void 0!==t.defines&&(r.defines=t.defines),void 0!==t.vertexShader&&(r.vertexShader=t.vertexShader),void 0!==t.fragmentShader&&(r.fragmentShader=t.fragmentShader),void 0!==t.extensions)for(const e in t.extensions)r.extensions[e]=t.extensions[e];if(void 0!==t.shading&&(r.flatShading=1===t.shading),void 0!==t.size&&(r.size=t.size),void 0!==t.sizeAttenuation&&(r.sizeAttenuation=t.sizeAttenuation),void 0!==t.map&&(r.map=n(t.map)),void 0!==t.matcap&&(r.matcap=n(t.matcap)),void 0!==t.alphaMap&&(r.alphaMap=n(t.alphaMap)),void 0!==t.bumpMap&&(r.bumpMap=n(t.bumpMap)),void 0!==t.bumpScale&&(r.bumpScale=t.bumpScale),void 0!==t.normalMap&&(r.normalMap=n(t.normalMap)),void 0!==t.normalMapType&&(r.normalMapType=t.normalMapType),void 0!==t.normalScale){let e=t.normalScale;!1===Array.isArray(e)&&(e=[e,e]),r.normalScale=(new Kn).fromArray(e)}return void 0!==t.displacementMap&&(r.displacementMap=n(t.displacementMap)),void 0!==t.displacementScale&&(r.displacementScale=t.displacementScale),void 0!==t.displacementBias&&(r.displacementBias=t.displacementBias),void 0!==t.roughnessMap&&(r.roughnessMap=n(t.roughnessMap)),void 0!==t.metalnessMap&&(r.metalnessMap=n(t.metalnessMap)),void 0!==t.emissiveMap&&(r.emissiveMap=n(t.emissiveMap)),void 0!==t.emissiveIntensity&&(r.emissiveIntensity=t.emissiveIntensity),void 0!==t.specularMap&&(r.specularMap=n(t.specularMap)),void 0!==t.specularIntensityMap&&(r.specularIntensityMap=n(t.specularIntensityMap)),void 0!==t.specularTintMap&&(r.specularTintMap=n(t.specularTintMap)),void 0!==t.envMap&&(r.envMap=n(t.envMap)),void 0!==t.envMapIntensity&&(r.envMapIntensity=t.envMapIntensity),void 0!==t.reflectivity&&(r.reflectivity=t.reflectivity),void 0!==t.refractionRatio&&(r.refractionRatio=t.refractionRatio),void 0!==t.lightMap&&(r.lightMap=n(t.lightMap)),void 0!==t.lightMapIntensity&&(r.lightMapIntensity=t.lightMapIntensity),void 0!==t.aoMap&&(r.aoMap=n(t.aoMap)),void 0!==t.aoMapIntensity&&(r.aoMapIntensity=t.aoMapIntensity),void 0!==t.gradientMap&&(r.gradientMap=n(t.gradientMap)),void 0!==t.clearcoatMap&&(r.clearcoatMap=n(t.clearcoatMap)),void 0!==t.clearcoatRoughnessMap&&(r.clearcoatRoughnessMap=n(t.clearcoatRoughnessMap)),void 0!==t.clearcoatNormalMap&&(r.clearcoatNormalMap=n(t.clearcoatNormalMap)),void 0!==t.clearcoatNormalScale&&(r.clearcoatNormalScale=(new Kn).fromArray(t.clearcoatNormalScale)),void 0!==t.transmissionMap&&(r.transmissionMap=n(t.transmissionMap)),void 0!==t.thicknessMap&&(r.thicknessMap=n(t.thicknessMap)),r}setTextures(t){return this.textures=t,this}}class ad{static decodeText(t){if(\"undefined\"!=typeof TextDecoder)return(new TextDecoder).decode(t);let e=\"\";for(let n=0,r=t.length;n<r;n++)e+=String.fromCharCode(t[n]);try{return decodeURIComponent(escape(e))}catch(t){return e}}static extractUrlBase(t){const e=t.lastIndexOf(\"/\");return-1===e?\"./\":t.substr(0,e+1)}}class od extends ti{constructor(){super(),this.type=\"InstancedBufferGeometry\",this.instanceCount=1/0}copy(t){return super.copy(t),this.instanceCount=t.instanceCount,this}clone(){return(new this.constructor).copy(this)}toJSON(){const t=super.toJSON(this);return t.instanceCount=this.instanceCount,t.isInstancedBufferGeometry=!0,t}}od.prototype.isInstancedBufferGeometry=!0;class ld extends Ih{constructor(t){super(t)}load(t,e,n,r){const s=this,i=new Nh(s.manager);i.setPath(s.path),i.setRequestHeader(s.requestHeader),i.setWithCredentials(s.withCredentials),i.load(t,(function(n){try{e(s.parse(JSON.parse(n)))}catch(e){r?r(e):console.error(e),s.manager.itemError(t)}}),n,r)}parse(t){const e={},n={};function r(t,r){if(void 0!==e[r])return e[r];const s=t.interleavedBuffers[r],i=function(t,e){if(void 0!==n[e])return n[e];const r=t.arrayBuffers[e],s=new Uint32Array(r).buffer;return n[e]=s,s}(t,s.buffer),a=js(s.type,i),o=new El(a,s.stride);return o.uuid=s.uuid,e[r]=o,o}const s=t.isInstancedBufferGeometry?new od:new ti,i=t.data.index;if(void 0!==i){const t=js(i.type,i.array);s.setIndex(new Ls(t,1))}const a=t.data.attributes;for(const e in a){const n=a[e];let i;if(n.isInterleavedBufferAttribute){const e=r(t.data,n.data);i=new Cl(e,n.itemSize,n.offset,n.normalized)}else{const t=js(n.type,n.array);i=new(n.isInstancedBufferAttribute?au:Ls)(t,n.itemSize,n.normalized)}void 0!==n.name&&(i.name=n.name),void 0!==n.usage&&i.setUsage(n.usage),void 0!==n.updateRange&&(i.updateRange.offset=n.updateRange.offset,i.updateRange.count=n.updateRange.count),s.setAttribute(e,i)}const o=t.data.morphAttributes;if(o)for(const e in o){const n=o[e],i=[];for(let e=0,s=n.length;e<s;e++){const s=n[e];let a;if(s.isInterleavedBufferAttribute){const e=r(t.data,s.data);a=new Cl(e,s.itemSize,s.offset,s.normalized)}else{const t=js(s.type,s.array);a=new Ls(t,s.itemSize,s.normalized)}void 0!==s.name&&(a.name=s.name),i.push(a)}s.morphAttributes[e]=i}t.data.morphTargetsRelative&&(s.morphTargetsRelative=!0);const l=t.data.groups||t.data.drawcalls||t.data.offsets;if(void 0!==l)for(let t=0,e=l.length;t!==e;++t){const e=l[t];s.addGroup(e.start,e.count,e.materialIndex)}const u=t.data.boundingSphere;if(void 0!==u){const t=new or;void 0!==u.center&&t.fromArray(u.center),s.boundingSphere=new Cr(t,u.radius)}return t.name&&(s.name=t.name),t.userData&&(s.userData=t.userData),s}}class ud extends Ih{constructor(t){super(t)}load(t,e,n,r){const s=this,i=\"\"===this.path?ad.extractUrlBase(t):this.path;this.resourcePath=this.resourcePath||i;const a=new Nh(this.manager);a.setPath(this.path),a.setRequestHeader(this.requestHeader),a.setWithCredentials(this.withCredentials),a.load(t,(function(n){let i=null;try{i=JSON.parse(n)}catch(e){return void 0!==r&&r(e),void console.error(\"THREE:ObjectLoader: Can't parse \"+t+\".\",e.message)}const a=i.metadata;void 0!==a&&void 0!==a.type&&\"geometry\"!==a.type.toLowerCase()?s.parse(i,e):console.error(\"THREE.ObjectLoader: Can't load \"+t)}),n,r)}async loadAsync(t,e){const n=\"\"===this.path?ad.extractUrlBase(t):this.path;this.resourcePath=this.resourcePath||n;const r=new Nh(this.manager);r.setPath(this.path),r.setRequestHeader(this.requestHeader),r.setWithCredentials(this.withCredentials);const s=await r.loadAsync(t,e),i=JSON.parse(s),a=i.metadata;if(void 0===a||void 0===a.type||\"geometry\"===a.type.toLowerCase())throw new Error(\"THREE.ObjectLoader: Can't load \"+t);return await this.parseAsync(i)}parse(t,e){const n=this.parseAnimations(t.animations),r=this.parseShapes(t.shapes),s=this.parseGeometries(t.geometries,r),i=this.parseImages(t.images,(function(){void 0!==e&&e(l)})),a=this.parseTextures(t.textures,i),o=this.parseMaterials(t.materials,a),l=this.parseObject(t.object,s,o,a,n),u=this.parseSkeletons(t.skeletons,l);if(this.bindSkeletons(l,u),void 0!==e){let t=!1;for(const e in i)if(i[e]instanceof HTMLImageElement){t=!0;break}!1===t&&e(l)}return l}async parseAsync(t){const e=this.parseAnimations(t.animations),n=this.parseShapes(t.shapes),r=this.parseGeometries(t.geometries,n),s=await this.parseImagesAsync(t.images),i=this.parseTextures(t.textures,s),a=this.parseMaterials(t.materials,i),o=this.parseObject(t.object,r,a,i,e),l=this.parseSkeletons(t.skeletons,o);return this.bindSkeletons(o,l),o}parseShapes(t){const e={};if(void 0!==t)for(let n=0,r=t.length;n<r;n++){const r=(new zh).fromJSON(t[n]);e[r.uuid]=r}return e}parseSkeletons(t,e){const n={},r={};if(e.traverse((function(t){t.isBone&&(r[t.uuid]=t)})),void 0!==t)for(let e=0,s=t.length;e<s;e++){const s=(new iu).fromJSON(t[e],r);n[s.uuid]=s}return n}parseGeometries(t,e){const n={};if(void 0!==t){const r=new ld;for(let s=0,i=t.length;s<i;s++){let i;const a=t[s];switch(a.type){case\"BufferGeometry\":case\"InstancedBufferGeometry\":i=r.parse(a);break;case\"Geometry\":console.error(\"THREE.ObjectLoader: The legacy Geometry type is no longer supported.\");break;default:a.type in Qc?i=Qc[a.type].fromJSON(a,e):console.warn(`THREE.ObjectLoader: Unsupported geometry type \"${a.type}\"`)}i.uuid=a.uuid,void 0!==a.name&&(i.name=a.name),!0===i.isBufferGeometry&&void 0!==a.userData&&(i.userData=a.userData),n[a.uuid]=i}}return n}parseMaterials(t,e){const n={},r={};if(void 0!==t){const s=new id;s.setTextures(e);for(let e=0,i=t.length;e<i;e++){const i=t[e];if(\"MultiMaterial\"===i.type){const t=[];for(let e=0;e<i.materials.length;e++){const r=i.materials[e];void 0===n[r.uuid]&&(n[r.uuid]=s.parse(r)),t.push(n[r.uuid])}r[i.uuid]=t}else void 0===n[i.uuid]&&(n[i.uuid]=s.parse(i)),r[i.uuid]=n[i.uuid]}}return r}parseAnimations(t){const e={};if(void 0!==t)for(let n=0;n<t.length;n++){const r=t[n],s=Th.parse(r);e[s.uuid]=s}return e}parseImages(t,e){const n=this,r={};let s;function i(t){if(\"string\"==typeof t){const e=t;return function(t){return n.manager.itemStart(t),s.load(t,(function(){n.manager.itemEnd(t)}),void 0,(function(){n.manager.itemError(t),n.manager.itemEnd(t)}))}(/^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test(e)?e:n.resourcePath+e)}return t.data?{data:js(t.type,t.data),width:t.width,height:t.height}:null}if(void 0!==t&&t.length>0){const n=new kh(e);s=new Lh(n),s.setCrossOrigin(this.crossOrigin);for(let e=0,n=t.length;e<n;e++){const n=t[e],s=n.url;if(Array.isArray(s)){r[n.uuid]=[];for(let t=0,e=s.length;t<e;t++){const e=i(s[t]);null!==e&&(e instanceof HTMLImageElement?r[n.uuid].push(e):r[n.uuid].push(new nu(e.data,e.width,e.height)))}}else{const t=i(n.url);null!==t&&(r[n.uuid]=t)}}}return r}async parseImagesAsync(t){const e=this,n={};let r;async function s(t){if(\"string\"==typeof t){const n=t,s=/^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test(n)?n:e.resourcePath+n;return await r.loadAsync(s)}return t.data?{data:js(t.type,t.data),width:t.width,height:t.height}:null}if(void 0!==t&&t.length>0){r=new Lh(this.manager),r.setCrossOrigin(this.crossOrigin);for(let e=0,r=t.length;e<r;e++){const r=t[e],i=r.url;if(Array.isArray(i)){n[r.uuid]=[];for(let t=0,e=i.length;t<e;t++){const e=i[t],a=await s(e);null!==a&&(a instanceof HTMLImageElement?n[r.uuid].push(a):n[r.uuid].push(new nu(a.data,a.width,a.height)))}}else{const t=await s(r.url);null!==t&&(n[r.uuid]=t)}}}return n}parseTextures(t,e){function n(t,e){return\"number\"==typeof t?t:(console.warn(\"THREE.ObjectLoader.parseTexture: Constant should be in numeric form.\",t),e[t])}const r={};if(void 0!==t)for(let s=0,i=t.length;s<i;s++){const i=t[s];let a;void 0===i.image&&console.warn('THREE.ObjectLoader: No \"image\" specified for',i.uuid),void 0===e[i.image]&&console.warn(\"THREE.ObjectLoader: Undefined image\",i.image);const o=e[i.image];Array.isArray(o)?(a=new Ci(o),6===o.length&&(a.needsUpdate=!0)):(a=o&&o.data?new nu(o.data,o.width,o.height):new tr(o),o&&(a.needsUpdate=!0)),a.uuid=i.uuid,void 0!==i.name&&(a.name=i.name),void 0!==i.mapping&&(a.mapping=n(i.mapping,cd)),void 0!==i.offset&&a.offset.fromArray(i.offset),void 0!==i.repeat&&a.repeat.fromArray(i.repeat),void 0!==i.center&&a.center.fromArray(i.center),void 0!==i.rotation&&(a.rotation=i.rotation),void 0!==i.wrap&&(a.wrapS=n(i.wrap[0],hd),a.wrapT=n(i.wrap[1],hd)),void 0!==i.format&&(a.format=i.format),void 0!==i.type&&(a.type=i.type),void 0!==i.encoding&&(a.encoding=i.encoding),void 0!==i.minFilter&&(a.minFilter=n(i.minFilter,dd)),void 0!==i.magFilter&&(a.magFilter=n(i.magFilter,dd)),void 0!==i.anisotropy&&(a.anisotropy=i.anisotropy),void 0!==i.flipY&&(a.flipY=i.flipY),void 0!==i.premultiplyAlpha&&(a.premultiplyAlpha=i.premultiplyAlpha),void 0!==i.unpackAlignment&&(a.unpackAlignment=i.unpackAlignment),r[i.uuid]=a}return r}parseObject(t,e,n,r,s){let i,a,o;function l(t){return void 0===e[t]&&console.warn(\"THREE.ObjectLoader: Undefined geometry\",t),e[t]}function u(t){if(void 0!==t){if(Array.isArray(t)){const e=[];for(let r=0,s=t.length;r<s;r++){const s=t[r];void 0===n[s]&&console.warn(\"THREE.ObjectLoader: Undefined material\",s),e.push(n[s])}return e}return void 0===n[t]&&console.warn(\"THREE.ObjectLoader: Undefined material\",t),n[t]}}function c(t){return void 0===r[t]&&console.warn(\"THREE.ObjectLoader: Undefined texture\",t),r[t]}switch(t.type){case\"Scene\":i=new kl,void 0!==t.background&&(Number.isInteger(t.background)?i.background=new Cs(t.background):i.background=c(t.background)),void 0!==t.environment&&(i.environment=c(t.environment)),void 0!==t.fog&&(\"Fog\"===t.fog.type?i.fog=new Ml(t.fog.color,t.fog.near,t.fog.far):\"FogExp2\"===t.fog.type&&(i.fog=new _l(t.fog.color,t.fog.density)));break;case\"PerspectiveCamera\":i=new ki(t.fov,t.aspect,t.near,t.far),void 0!==t.focus&&(i.focus=t.focus),void 0!==t.zoom&&(i.zoom=t.zoom),void 0!==t.filmGauge&&(i.filmGauge=t.filmGauge),void 0!==t.filmOffset&&(i.filmOffset=t.filmOffset),void 0!==t.view&&(i.view=Object.assign({},t.view));break;case\"OrthographicCamera\":i=new Yi(t.left,t.right,t.top,t.bottom,t.near,t.far),void 0!==t.zoom&&(i.zoom=t.zoom),void 0!==t.view&&(i.view=Object.assign({},t.view));break;case\"AmbientLight\":i=new ed(t.color,t.intensity);break;case\"DirectionalLight\":i=new td(t.color,t.intensity);break;case\"PointLight\":i=new Jh(t.color,t.intensity,t.distance,t.decay);break;case\"RectAreaLight\":i=new nd(t.color,t.intensity,t.width,t.height);break;case\"SpotLight\":i=new qh(t.color,t.intensity,t.distance,t.angle,t.penumbra,t.decay);break;case\"HemisphereLight\":i=new Uh(t.color,t.groundColor,t.intensity);break;case\"LightProbe\":i=(new sd).fromJSON(t);break;case\"SkinnedMesh\":a=l(t.geometry),o=u(t.material),i=new tu(a,o),void 0!==t.bindMode&&(i.bindMode=t.bindMode),void 0!==t.bindMatrix&&i.bindMatrix.fromArray(t.bindMatrix),void 0!==t.skeleton&&(i.skeleton=t.skeleton);break;case\"Mesh\":a=l(t.geometry),o=u(t.material),i=new xi(a,o);break;case\"InstancedMesh\":a=l(t.geometry),o=u(t.material);const e=t.count,n=t.instanceMatrix,r=t.instanceColor;i=new hu(a,o,e),i.instanceMatrix=new au(new Float32Array(n.array),16),void 0!==r&&(i.instanceColor=new au(new Float32Array(r.array),r.itemSize));break;case\"LOD\":i=new Xl;break;case\"Line\":i=new xu(l(t.geometry),u(t.material));break;case\"LineLoop\":i=new Su(l(t.geometry),u(t.material));break;case\"LineSegments\":i=new wu(l(t.geometry),u(t.material));break;case\"PointCloud\":case\"Points\":i=new Iu(l(t.geometry),u(t.material));break;case\"Sprite\":i=new Gl(u(t.material));break;case\"Group\":i=new yl;break;case\"Bone\":i=new eu;break;default:i=new us}if(i.uuid=t.uuid,void 0!==t.name&&(i.name=t.name),void 0!==t.matrix?(i.matrix.fromArray(t.matrix),void 0!==t.matrixAutoUpdate&&(i.matrixAutoUpdate=t.matrixAutoUpdate),i.matrixAutoUpdate&&i.matrix.decompose(i.position,i.quaternion,i.scale)):(void 0!==t.position&&i.position.fromArray(t.position),void 0!==t.rotation&&i.rotation.fromArray(t.rotation),void 0!==t.quaternion&&i.quaternion.fromArray(t.quaternion),void 0!==t.scale&&i.scale.fromArray(t.scale)),void 0!==t.castShadow&&(i.castShadow=t.castShadow),void 0!==t.receiveShadow&&(i.receiveShadow=t.receiveShadow),t.shadow&&(void 0!==t.shadow.bias&&(i.shadow.bias=t.shadow.bias),void 0!==t.shadow.normalBias&&(i.shadow.normalBias=t.shadow.normalBias),void 0!==t.shadow.radius&&(i.shadow.radius=t.shadow.radius),void 0!==t.shadow.mapSize&&i.shadow.mapSize.fromArray(t.shadow.mapSize),void 0!==t.shadow.camera&&(i.shadow.camera=this.parseObject(t.shadow.camera))),void 0!==t.visible&&(i.visible=t.visible),void 0!==t.frustumCulled&&(i.frustumCulled=t.frustumCulled),void 0!==t.renderOrder&&(i.renderOrder=t.renderOrder),void 0!==t.userData&&(i.userData=t.userData),void 0!==t.layers&&(i.layers.mask=t.layers),void 0!==t.children){const a=t.children;for(let t=0;t<a.length;t++)i.add(this.parseObject(a[t],e,n,r,s))}if(void 0!==t.animations){const e=t.animations;for(let t=0;t<e.length;t++){const n=e[t];i.animations.push(s[n])}}if(\"LOD\"===t.type){void 0!==t.autoUpdate&&(i.autoUpdate=t.autoUpdate);const e=t.levels;for(let t=0;t<e.length;t++){const n=e[t],r=i.getObjectByProperty(\"uuid\",n.object);void 0!==r&&i.addLevel(r,n.distance)}}return i}bindSkeletons(t,e){0!==Object.keys(e).length&&t.traverse((function(t){if(!0===t.isSkinnedMesh&&void 0!==t.skeleton){const n=e[t.skeleton];void 0===n?console.warn(\"THREE.ObjectLoader: No skeleton found with UUID:\",t.skeleton):t.bind(n,t.bindMatrix)}}))}setTexturePath(t){return console.warn(\"THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().\"),this.setResourcePath(t)}}const cd={UVMapping:st,CubeReflectionMapping:it,CubeRefractionMapping:at,EquirectangularReflectionMapping:ot,EquirectangularRefractionMapping:lt,CubeUVReflectionMapping:ut,CubeUVRefractionMapping:ct},hd={RepeatWrapping:ht,ClampToEdgeWrapping:dt,MirroredRepeatWrapping:pt},dd={NearestFilter:ft,NearestMipmapNearestFilter:mt,NearestMipmapLinearFilter:yt,LinearFilter:bt,LinearMipmapNearestFilter:vt,LinearMipmapLinearFilter:St};class pd extends Ih{constructor(t){super(t),\"undefined\"==typeof createImageBitmap&&console.warn(\"THREE.ImageBitmapLoader: createImageBitmap() not supported.\"),\"undefined\"==typeof fetch&&console.warn(\"THREE.ImageBitmapLoader: fetch() not supported.\"),this.options={premultiplyAlpha:\"none\"}}setOptions(t){return this.options=t,this}load(t,e,n,r){void 0===t&&(t=\"\"),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);const s=this,i=Mh.get(t);if(void 0!==i)return s.manager.itemStart(t),setTimeout((function(){e&&e(i),s.manager.itemEnd(t)}),0),i;const a={};a.credentials=\"anonymous\"===this.crossOrigin?\"same-origin\":\"include\",a.headers=this.requestHeader,fetch(t,a).then((function(t){return t.blob()})).then((function(t){return createImageBitmap(t,Object.assign(s.options,{colorSpaceConversion:\"none\"}))})).then((function(n){Mh.add(t,n),e&&e(n),s.manager.itemEnd(t)})).catch((function(e){r&&r(e),s.manager.itemError(t),s.manager.itemEnd(t)})),s.manager.itemStart(t)}}pd.prototype.isImageBitmapLoader=!0;class fd{constructor(){this.type=\"ShapePath\",this.color=new Cs,this.subPaths=[],this.currentPath=null}moveTo(t,e){return this.currentPath=new Ph,this.subPaths.push(this.currentPath),this.currentPath.moveTo(t,e),this}lineTo(t,e){return this.currentPath.lineTo(t,e),this}quadraticCurveTo(t,e,n,r){return this.currentPath.quadraticCurveTo(t,e,n,r),this}bezierCurveTo(t,e,n,r,s,i){return this.currentPath.bezierCurveTo(t,e,n,r,s,i),this}splineThru(t){return this.currentPath.splineThru(t),this}toShapes(t,e){function n(t){const e=[];for(let n=0,r=t.length;n<r;n++){const r=t[n],s=new zh;s.curves=r.curves,e.push(s)}return e}function r(t,e){const n=e.length;let r=!1;for(let s=n-1,i=0;i<n;s=i++){let n=e[s],a=e[i],o=a.x-n.x,l=a.y-n.y;if(Math.abs(l)>Number.EPSILON){if(l<0&&(n=e[i],o=-o,a=e[s],l=-l),t.y<n.y||t.y>a.y)continue;if(t.y===n.y){if(t.x===n.x)return!0}else{const e=l*(t.x-n.x)-o*(t.y-n.y);if(0===e)return!0;if(e<0)continue;r=!r}}else{if(t.y!==n.y)continue;if(a.x<=t.x&&t.x<=n.x||n.x<=t.x&&t.x<=a.x)return!0}}return r}const s=Dc.isClockWise,i=this.subPaths;if(0===i.length)return[];if(!0===e)return n(i);let a,o,l;const u=[];if(1===i.length)return o=i[0],l=new zh,l.curves=o.curves,u.push(l),u;let c=!s(i[0].getPoints());c=t?!c:c;const h=[],d=[];let p,f,m=[],g=0;d[g]=void 0,m[g]=[];for(let e=0,n=i.length;e<n;e++)o=i[e],p=o.getPoints(),a=s(p),a=t?!a:a,a?(!c&&d[g]&&g++,d[g]={s:new zh,p},d[g].s.curves=o.curves,c&&g++,m[g]=[]):m[g].push({h:o,p:p[0]});if(!d[0])return n(i);if(d.length>1){let t=!1;const e=[];for(let t=0,e=d.length;t<e;t++)h[t]=[];for(let n=0,s=d.length;n<s;n++){const s=m[n];for(let i=0;i<s.length;i++){const a=s[i];let o=!0;for(let s=0;s<d.length;s++)r(a.p,d[s].p)&&(n!==s&&e.push({froms:n,tos:s,hole:i}),o?(o=!1,h[s].push(a)):t=!0);o&&h[n].push(a)}}e.length>0&&(t||(m=h))}for(let t=0,e=d.length;t<e;t++){l=d[t].s,u.push(l),f=m[t];for(let t=0,e=f.length;t<e;t++)l.holes.push(f[t].h)}return u}}class md{constructor(t){this.type=\"Font\",this.data=t}generateShapes(t,e=100){const n=[],r=function(t,e,n){const r=Array.from(t),s=e/n.resolution,i=(n.boundingBox.yMax-n.boundingBox.yMin+n.underlineThickness)*s,a=[];let o=0,l=0;for(let t=0;t<r.length;t++){const e=r[t];if(\"\\n\"===e)o=0,l-=i;else{const t=gd(e,s,o,l,n);o+=t.offsetX,a.push(t.path)}}return a}(t,e,this.data);for(let t=0,e=r.length;t<e;t++)Array.prototype.push.apply(n,r[t].toShapes());return n}}function gd(t,e,n,r,s){const i=s.glyphs[t]||s.glyphs[\"?\"];if(!i)return void console.error('THREE.Font: character \"'+t+'\" does not exists in font family '+s.familyName+\".\");const a=new fd;let o,l,u,c,h,d,p,f;if(i.o){const t=i._cachedOutline||(i._cachedOutline=i.o.split(\" \"));for(let s=0,i=t.length;s<i;)switch(t[s++]){case\"m\":o=t[s++]*e+n,l=t[s++]*e+r,a.moveTo(o,l);break;case\"l\":o=t[s++]*e+n,l=t[s++]*e+r,a.lineTo(o,l);break;case\"q\":u=t[s++]*e+n,c=t[s++]*e+r,h=t[s++]*e+n,d=t[s++]*e+r,a.quadraticCurveTo(h,d,u,c);break;case\"b\":u=t[s++]*e+n,c=t[s++]*e+r,h=t[s++]*e+n,d=t[s++]*e+r,p=t[s++]*e+n,f=t[s++]*e+r,a.bezierCurveTo(h,d,p,f,u,c)}}return{offsetX:i.ha*e,path:a}}md.prototype.isFont=!0;class yd extends Ih{constructor(t){super(t)}load(t,e,n,r){const s=this,i=new Nh(this.manager);i.setPath(this.path),i.setRequestHeader(this.requestHeader),i.setWithCredentials(s.withCredentials),i.load(t,(function(t){let n;try{n=JSON.parse(t)}catch(e){console.warn(\"THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.\"),n=JSON.parse(t.substring(65,t.length-2))}const r=s.parse(n);e&&e(r)}),n,r)}parse(t){return new md(t)}}let xd;const bd={getContext:function(){return void 0===xd&&(xd=new(window.AudioContext||window.webkitAudioContext)),xd},setContext:function(t){xd=t}};class vd extends Ih{constructor(t){super(t)}load(t,e,n,r){const s=this,i=new Nh(this.manager);i.setResponseType(\"arraybuffer\"),i.setPath(this.path),i.setRequestHeader(this.requestHeader),i.setWithCredentials(this.withCredentials),i.load(t,(function(n){try{const t=n.slice(0);bd.getContext().decodeAudioData(t,(function(t){e(t)}))}catch(e){r?r(e):console.error(e),s.manager.itemError(t)}}),n,r)}}class wd extends sd{constructor(t,e,n=1){super(void 0,n);const r=(new Cs).set(t),s=(new Cs).set(e),i=new or(r.r,r.g,r.b),a=new or(s.r,s.g,s.b),o=Math.sqrt(Math.PI),l=o*Math.sqrt(.75);this.sh.coefficients[0].copy(i).add(a).multiplyScalar(o),this.sh.coefficients[1].copy(i).sub(a).multiplyScalar(l)}}wd.prototype.isHemisphereLightProbe=!0;class Sd extends sd{constructor(t,e=1){super(void 0,e);const n=(new Cs).set(t);this.sh.coefficients[0].set(n.r,n.g,n.b).multiplyScalar(2*Math.sqrt(Math.PI))}}Sd.prototype.isAmbientLightProbe=!0;const Td=new Pr,_d=new Pr;class Md{constructor(){this.type=\"StereoCamera\",this.aspect=1,this.eyeSep=.064,this.cameraL=new ki,this.cameraL.layers.enable(1),this.cameraL.matrixAutoUpdate=!1,this.cameraR=new ki,this.cameraR.layers.enable(2),this.cameraR.matrixAutoUpdate=!1,this._cache={focus:null,fov:null,aspect:null,near:null,far:null,zoom:null,eyeSep:null}}update(t){const e=this._cache;if(e.focus!==t.focus||e.fov!==t.fov||e.aspect!==t.aspect*this.aspect||e.near!==t.near||e.far!==t.far||e.zoom!==t.zoom||e.eyeSep!==this.eyeSep){e.focus=t.focus,e.fov=t.fov,e.aspect=t.aspect*this.aspect,e.near=t.near,e.far=t.far,e.zoom=t.zoom,e.eyeSep=this.eyeSep;const n=t.projectionMatrix.clone(),r=e.eyeSep/2,s=r*e.near/e.focus,i=e.near*Math.tan(zn*e.fov*.5)/e.zoom;let a,o;_d.elements[12]=-r,Td.elements[12]=r,a=-i*e.aspect+s,o=i*e.aspect+s,n.elements[0]=2*e.near/(o-a),n.elements[8]=(o+a)/(o-a),this.cameraL.projectionMatrix.copy(n),a=-i*e.aspect-s,o=i*e.aspect-s,n.elements[0]=2*e.near/(o-a),n.elements[8]=(o+a)/(o-a),this.cameraR.projectionMatrix.copy(n)}this.cameraL.matrixWorld.copy(t.matrixWorld).multiply(_d),this.cameraR.matrixWorld.copy(t.matrixWorld).multiply(Td)}}class kd{constructor(t=!0){this.autoStart=t,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1}start(){this.startTime=Ed(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0}stop(){this.getElapsedTime(),this.running=!1,this.autoStart=!1}getElapsedTime(){return this.getDelta(),this.elapsedTime}getDelta(){let t=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){const e=Ed();t=(e-this.oldTime)/1e3,this.oldTime=e,this.elapsedTime+=t}return t}}function Ed(){return(\"undefined\"==typeof performance?Date:performance).now()}const Id=new or,Cd=new ar,Nd=new or,Ad=new or;class Rd extends us{constructor(){super(),this.type=\"AudioListener\",this.context=bd.getContext(),this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.filter=null,this.timeDelta=0,this._clock=new kd}getInput(){return this.gain}removeFilter(){return null!==this.filter&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null),this}getFilter(){return this.filter}setFilter(t){return null!==this.filter?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=t,this.gain.connect(this.filter),this.filter.connect(this.context.destination),this}getMasterVolume(){return this.gain.gain.value}setMasterVolume(t){return this.gain.gain.setTargetAtTime(t,this.context.currentTime,.01),this}updateMatrixWorld(t){super.updateMatrixWorld(t);const e=this.context.listener,n=this.up;if(this.timeDelta=this._clock.getDelta(),this.matrixWorld.decompose(Id,Cd,Nd),Ad.set(0,0,-1).applyQuaternion(Cd),e.positionX){const t=this.context.currentTime+this.timeDelta;e.positionX.linearRampToValueAtTime(Id.x,t),e.positionY.linearRampToValueAtTime(Id.y,t),e.positionZ.linearRampToValueAtTime(Id.z,t),e.forwardX.linearRampToValueAtTime(Ad.x,t),e.forwardY.linearRampToValueAtTime(Ad.y,t),e.forwardZ.linearRampToValueAtTime(Ad.z,t),e.upX.linearRampToValueAtTime(n.x,t),e.upY.linearRampToValueAtTime(n.y,t),e.upZ.linearRampToValueAtTime(n.z,t)}else e.setPosition(Id.x,Id.y,Id.z),e.setOrientation(Ad.x,Ad.y,Ad.z,n.x,n.y,n.z)}}class Ld extends us{constructor(t){super(),this.type=\"Audio\",this.listener=t,this.context=t.context,this.gain=this.context.createGain(),this.gain.connect(t.getInput()),this.autoplay=!1,this.buffer=null,this.detune=0,this.loop=!1,this.loopStart=0,this.loopEnd=0,this.offset=0,this.duration=void 0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.source=null,this.sourceType=\"empty\",this._startedAt=0,this._progress=0,this._connected=!1,this.filters=[]}getOutput(){return this.gain}setNodeSource(t){return this.hasPlaybackControl=!1,this.sourceType=\"audioNode\",this.source=t,this.connect(),this}setMediaElementSource(t){return this.hasPlaybackControl=!1,this.sourceType=\"mediaNode\",this.source=this.context.createMediaElementSource(t),this.connect(),this}setMediaStreamSource(t){return this.hasPlaybackControl=!1,this.sourceType=\"mediaStreamNode\",this.source=this.context.createMediaStreamSource(t),this.connect(),this}setBuffer(t){return this.buffer=t,this.sourceType=\"buffer\",this.autoplay&&this.play(),this}play(t=0){if(!0===this.isPlaying)return void console.warn(\"THREE.Audio: Audio is already playing.\");if(!1===this.hasPlaybackControl)return void console.warn(\"THREE.Audio: this Audio has no playback control.\");this._startedAt=this.context.currentTime+t;const e=this.context.createBufferSource();return e.buffer=this.buffer,e.loop=this.loop,e.loopStart=this.loopStart,e.loopEnd=this.loopEnd,e.onended=this.onEnded.bind(this),e.start(this._startedAt,this._progress+this.offset,this.duration),this.isPlaying=!0,this.source=e,this.setDetune(this.detune),this.setPlaybackRate(this.playbackRate),this.connect()}pause(){if(!1!==this.hasPlaybackControl)return!0===this.isPlaying&&(this._progress+=Math.max(this.context.currentTime-this._startedAt,0)*this.playbackRate,!0===this.loop&&(this._progress=this._progress%(this.duration||this.buffer.duration)),this.source.stop(),this.source.onended=null,this.isPlaying=!1),this;console.warn(\"THREE.Audio: this Audio has no playback control.\")}stop(){if(!1!==this.hasPlaybackControl)return this._progress=0,this.source.stop(),this.source.onended=null,this.isPlaying=!1,this;console.warn(\"THREE.Audio: this Audio has no playback control.\")}connect(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(let t=1,e=this.filters.length;t<e;t++)this.filters[t-1].connect(this.filters[t]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this._connected=!0,this}disconnect(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(let t=1,e=this.filters.length;t<e;t++)this.filters[t-1].disconnect(this.filters[t]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this._connected=!1,this}getFilters(){return this.filters}setFilters(t){return t||(t=[]),!0===this._connected?(this.disconnect(),this.filters=t.slice(),this.connect()):this.filters=t.slice(),this}setDetune(t){if(this.detune=t,void 0!==this.source.detune)return!0===this.isPlaying&&this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01),this}getDetune(){return this.detune}getFilter(){return this.getFilters()[0]}setFilter(t){return this.setFilters(t?[t]:[])}setPlaybackRate(t){if(!1!==this.hasPlaybackControl)return this.playbackRate=t,!0===this.isPlaying&&this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01),this;console.warn(\"THREE.Audio: this Audio has no playback control.\")}getPlaybackRate(){return this.playbackRate}onEnded(){this.isPlaying=!1}getLoop(){return!1===this.hasPlaybackControl?(console.warn(\"THREE.Audio: this Audio has no playback control.\"),!1):this.loop}setLoop(t){if(!1!==this.hasPlaybackControl)return this.loop=t,!0===this.isPlaying&&(this.source.loop=this.loop),this;console.warn(\"THREE.Audio: this Audio has no playback control.\")}setLoopStart(t){return this.loopStart=t,this}setLoopEnd(t){return this.loopEnd=t,this}getVolume(){return this.gain.gain.value}setVolume(t){return this.gain.gain.setTargetAtTime(t,this.context.currentTime,.01),this}}const Dd=new or,Fd=new ar,$d=new or,Od=new or;class Pd extends Ld{constructor(t){super(t),this.panner=this.context.createPanner(),this.panner.panningModel=\"HRTF\",this.panner.connect(this.gain)}getOutput(){return this.panner}getRefDistance(){return this.panner.refDistance}setRefDistance(t){return this.panner.refDistance=t,this}getRolloffFactor(){return this.panner.rolloffFactor}setRolloffFactor(t){return this.panner.rolloffFactor=t,this}getDistanceModel(){return this.panner.distanceModel}setDistanceModel(t){return this.panner.distanceModel=t,this}getMaxDistance(){return this.panner.maxDistance}setMaxDistance(t){return this.panner.maxDistance=t,this}setDirectionalCone(t,e,n){return this.panner.coneInnerAngle=t,this.panner.coneOuterAngle=e,this.panner.coneOuterGain=n,this}updateMatrixWorld(t){if(super.updateMatrixWorld(t),!0===this.hasPlaybackControl&&!1===this.isPlaying)return;this.matrixWorld.decompose(Dd,Fd,$d),Od.set(0,0,1).applyQuaternion(Fd);const e=this.panner;if(e.positionX){const t=this.context.currentTime+this.listener.timeDelta;e.positionX.linearRampToValueAtTime(Dd.x,t),e.positionY.linearRampToValueAtTime(Dd.y,t),e.positionZ.linearRampToValueAtTime(Dd.z,t),e.orientationX.linearRampToValueAtTime(Od.x,t),e.orientationY.linearRampToValueAtTime(Od.y,t),e.orientationZ.linearRampToValueAtTime(Od.z,t)}else e.setPosition(Dd.x,Dd.y,Dd.z),e.setOrientation(Od.x,Od.y,Od.z)}}class zd{constructor(t,e=2048){this.analyser=t.context.createAnalyser(),this.analyser.fftSize=e,this.data=new Uint8Array(this.analyser.frequencyBinCount),t.getOutput().connect(this.analyser)}getFrequencyData(){return this.analyser.getByteFrequencyData(this.data),this.data}getAverageFrequency(){let t=0;const e=this.getFrequencyData();for(let n=0;n<e.length;n++)t+=e[n];return t/e.length}}class Bd{constructor(t,e,n){let r,s,i;switch(this.binding=t,this.valueSize=n,e){case\"quaternion\":r=this._slerp,s=this._slerpAdditive,i=this._setAdditiveIdentityQuaternion,this.buffer=new Float64Array(6*n),this._workIndex=5;break;case\"string\":case\"bool\":r=this._select,s=this._select,i=this._setAdditiveIdentityOther,this.buffer=new Array(5*n);break;default:r=this._lerp,s=this._lerpAdditive,i=this._setAdditiveIdentityNumeric,this.buffer=new Float64Array(5*n)}this._mixBufferRegion=r,this._mixBufferRegionAdditive=s,this._setIdentity=i,this._origIndex=3,this._addIndex=4,this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,this.useCount=0,this.referenceCount=0}accumulate(t,e){const n=this.buffer,r=this.valueSize,s=t*r+r;let i=this.cumulativeWeight;if(0===i){for(let t=0;t!==r;++t)n[s+t]=n[t];i=e}else{i+=e;const t=e/i;this._mixBufferRegion(n,s,0,t,r)}this.cumulativeWeight=i}accumulateAdditive(t){const e=this.buffer,n=this.valueSize,r=n*this._addIndex;0===this.cumulativeWeightAdditive&&this._setIdentity(),this._mixBufferRegionAdditive(e,r,0,t,n),this.cumulativeWeightAdditive+=t}apply(t){const e=this.valueSize,n=this.buffer,r=t*e+e,s=this.cumulativeWeight,i=this.cumulativeWeightAdditive,a=this.binding;if(this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,s<1){const t=e*this._origIndex;this._mixBufferRegion(n,r,t,1-s,e)}i>0&&this._mixBufferRegionAdditive(n,r,this._addIndex*e,1,e);for(let t=e,s=e+e;t!==s;++t)if(n[t]!==n[t+e]){a.setValue(n,r);break}}saveOriginalState(){const t=this.binding,e=this.buffer,n=this.valueSize,r=n*this._origIndex;t.getValue(e,r);for(let t=n,s=r;t!==s;++t)e[t]=e[r+t%n];this._setIdentity(),this.cumulativeWeight=0,this.cumulativeWeightAdditive=0}restoreOriginalState(){const t=3*this.valueSize;this.binding.setValue(this.buffer,t)}_setAdditiveIdentityNumeric(){const t=this._addIndex*this.valueSize,e=t+this.valueSize;for(let n=t;n<e;n++)this.buffer[n]=0}_setAdditiveIdentityQuaternion(){this._setAdditiveIdentityNumeric(),this.buffer[this._addIndex*this.valueSize+3]=1}_setAdditiveIdentityOther(){const t=this._origIndex*this.valueSize,e=this._addIndex*this.valueSize;for(let n=0;n<this.valueSize;n++)this.buffer[e+n]=this.buffer[t+n]}_select(t,e,n,r,s){if(r>=.5)for(let r=0;r!==s;++r)t[e+r]=t[n+r]}_slerp(t,e,n,r){ar.slerpFlat(t,e,t,e,t,n,r)}_slerpAdditive(t,e,n,r,s){const i=this._workIndex*s;ar.multiplyQuaternionsFlat(t,i,t,e,t,n),ar.slerpFlat(t,e,t,e,t,i,r)}_lerp(t,e,n,r,s){const i=1-r;for(let a=0;a!==s;++a){const s=e+a;t[s]=t[s]*i+t[n+a]*r}}_lerpAdditive(t,e,n,r,s){for(let i=0;i!==s;++i){const s=e+i;t[s]=t[s]+t[n+i]*r}}}const Ud=new RegExp(\"[\\\\[\\\\]\\\\.:\\\\/]\",\"g\"),Vd=\"[^\\\\[\\\\]\\\\.:\\\\/]\",Wd=\"[^\"+\"\\\\[\\\\]\\\\.:\\\\/\".replace(\"\\\\.\",\"\")+\"]\",Gd=/((?:WC+[\\/:])*)/.source.replace(\"WC\",Vd),Hd=/(WCOD+)?/.source.replace(\"WCOD\",Wd),jd=/(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace(\"WC\",Vd),qd=/\\.(WC+)(?:\\[(.+)\\])?/.source.replace(\"WC\",Vd),Xd=new RegExp(\"^\"+Gd+Hd+jd+qd+\"$\"),Kd=[\"material\",\"materials\",\"bones\"];class Yd{constructor(t,e,n){this.path=e,this.parsedPath=n||Yd.parseTrackName(e),this.node=Yd.findNode(t,this.parsedPath.nodeName)||t,this.rootNode=t,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}static create(t,e,n){return t&&t.isAnimationObjectGroup?new Yd.Composite(t,e,n):new Yd(t,e,n)}static sanitizeNodeName(t){return t.replace(/\\s/g,\"_\").replace(Ud,\"\")}static parseTrackName(t){const e=Xd.exec(t);if(!e)throw new Error(\"PropertyBinding: Cannot parse trackName: \"+t);const n={nodeName:e[2],objectName:e[3],objectIndex:e[4],propertyName:e[5],propertyIndex:e[6]},r=n.nodeName&&n.nodeName.lastIndexOf(\".\");if(void 0!==r&&-1!==r){const t=n.nodeName.substring(r+1);-1!==Kd.indexOf(t)&&(n.nodeName=n.nodeName.substring(0,r),n.objectName=t)}if(null===n.propertyName||0===n.propertyName.length)throw new Error(\"PropertyBinding: can not parse propertyName from trackName: \"+t);return n}static findNode(t,e){if(!e||\"\"===e||\".\"===e||-1===e||e===t.name||e===t.uuid)return t;if(t.skeleton){const n=t.skeleton.getBoneByName(e);if(void 0!==n)return n}if(t.children){const n=function(t){for(let r=0;r<t.length;r++){const s=t[r];if(s.name===e||s.uuid===e)return s;const i=n(s.children);if(i)return i}return null},r=n(t.children);if(r)return r}return null}_getValue_unavailable(){}_setValue_unavailable(){}_getValue_direct(t,e){t[e]=this.targetObject[this.propertyName]}_getValue_array(t,e){const n=this.resolvedProperty;for(let r=0,s=n.length;r!==s;++r)t[e++]=n[r]}_getValue_arrayElement(t,e){t[e]=this.resolvedProperty[this.propertyIndex]}_getValue_toArray(t,e){this.resolvedProperty.toArray(t,e)}_setValue_direct(t,e){this.targetObject[this.propertyName]=t[e]}_setValue_direct_setNeedsUpdate(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.needsUpdate=!0}_setValue_direct_setMatrixWorldNeedsUpdate(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_array(t,e){const n=this.resolvedProperty;for(let r=0,s=n.length;r!==s;++r)n[r]=t[e++]}_setValue_array_setNeedsUpdate(t,e){const n=this.resolvedProperty;for(let r=0,s=n.length;r!==s;++r)n[r]=t[e++];this.targetObject.needsUpdate=!0}_setValue_array_setMatrixWorldNeedsUpdate(t,e){const n=this.resolvedProperty;for(let r=0,s=n.length;r!==s;++r)n[r]=t[e++];this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_arrayElement(t,e){this.resolvedProperty[this.propertyIndex]=t[e]}_setValue_arrayElement_setNeedsUpdate(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.needsUpdate=!0}_setValue_arrayElement_setMatrixWorldNeedsUpdate(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_fromArray(t,e){this.resolvedProperty.fromArray(t,e)}_setValue_fromArray_setNeedsUpdate(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.needsUpdate=!0}_setValue_fromArray_setMatrixWorldNeedsUpdate(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.matrixWorldNeedsUpdate=!0}_getValue_unbound(t,e){this.bind(),this.getValue(t,e)}_setValue_unbound(t,e){this.bind(),this.setValue(t,e)}bind(){let t=this.node;const e=this.parsedPath,n=e.objectName,r=e.propertyName;let s=e.propertyIndex;if(t||(t=Yd.findNode(this.rootNode,e.nodeName)||this.rootNode,this.node=t),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!t)return void console.error(\"THREE.PropertyBinding: Trying to update node for track: \"+this.path+\" but it wasn't found.\");if(n){let r=e.objectIndex;switch(n){case\"materials\":if(!t.material)return void console.error(\"THREE.PropertyBinding: Can not bind to material as node does not have a material.\",this);if(!t.material.materials)return void console.error(\"THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.\",this);t=t.material.materials;break;case\"bones\":if(!t.skeleton)return void console.error(\"THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.\",this);t=t.skeleton.bones;for(let e=0;e<t.length;e++)if(t[e].name===r){r=e;break}break;default:if(void 0===t[n])return void console.error(\"THREE.PropertyBinding: Can not bind to objectName of node undefined.\",this);t=t[n]}if(void 0!==r){if(void 0===t[r])return void console.error(\"THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.\",this,t);t=t[r]}}const i=t[r];if(void 0===i){const n=e.nodeName;return void console.error(\"THREE.PropertyBinding: Trying to update property for track: \"+n+\".\"+r+\" but it wasn't found.\",t)}let a=this.Versioning.None;this.targetObject=t,void 0!==t.needsUpdate?a=this.Versioning.NeedsUpdate:void 0!==t.matrixWorldNeedsUpdate&&(a=this.Versioning.MatrixWorldNeedsUpdate);let o=this.BindingType.Direct;if(void 0!==s){if(\"morphTargetInfluences\"===r){if(!t.geometry)return void console.error(\"THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.\",this);if(!t.geometry.isBufferGeometry)return void console.error(\"THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.\",this);if(!t.geometry.morphAttributes)return void console.error(\"THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.\",this);void 0!==t.morphTargetDictionary[s]&&(s=t.morphTargetDictionary[s])}o=this.BindingType.ArrayElement,this.resolvedProperty=i,this.propertyIndex=s}else void 0!==i.fromArray&&void 0!==i.toArray?(o=this.BindingType.HasFromToArray,this.resolvedProperty=i):Array.isArray(i)?(o=this.BindingType.EntireArray,this.resolvedProperty=i):this.propertyName=r;this.getValue=this.GetterByBindingType[o],this.setValue=this.SetterByBindingTypeAndVersioning[o][a]}unbind(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}Yd.Composite=class{constructor(t,e,n){const r=n||Yd.parseTrackName(e);this._targetGroup=t,this._bindings=t.subscribe_(e,r)}getValue(t,e){this.bind();const n=this._targetGroup.nCachedObjects_,r=this._bindings[n];void 0!==r&&r.getValue(t,e)}setValue(t,e){const n=this._bindings;for(let r=this._targetGroup.nCachedObjects_,s=n.length;r!==s;++r)n[r].setValue(t,e)}bind(){const t=this._bindings;for(let e=this._targetGroup.nCachedObjects_,n=t.length;e!==n;++e)t[e].bind()}unbind(){const t=this._bindings;for(let e=this._targetGroup.nCachedObjects_,n=t.length;e!==n;++e)t[e].unbind()}},Yd.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Yd.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},Yd.prototype.GetterByBindingType=[Yd.prototype._getValue_direct,Yd.prototype._getValue_array,Yd.prototype._getValue_arrayElement,Yd.prototype._getValue_toArray],Yd.prototype.SetterByBindingTypeAndVersioning=[[Yd.prototype._setValue_direct,Yd.prototype._setValue_direct_setNeedsUpdate,Yd.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[Yd.prototype._setValue_array,Yd.prototype._setValue_array_setNeedsUpdate,Yd.prototype._setValue_array_setMatrixWorldNeedsUpdate],[Yd.prototype._setValue_arrayElement,Yd.prototype._setValue_arrayElement_setNeedsUpdate,Yd.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[Yd.prototype._setValue_fromArray,Yd.prototype._setValue_fromArray_setNeedsUpdate,Yd.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];class Zd{constructor(){this.uuid=Un(),this._objects=Array.prototype.slice.call(arguments),this.nCachedObjects_=0;const t={};this._indicesByUUID=t;for(let e=0,n=arguments.length;e!==n;++e)t[arguments[e].uuid]=e;this._paths=[],this._parsedPaths=[],this._bindings=[],this._bindingsIndicesByPath={};const e=this;this.stats={objects:{get total(){return e._objects.length},get inUse(){return this.total-e.nCachedObjects_}},get bindingsPerObject(){return e._bindings.length}}}add(){const t=this._objects,e=this._indicesByUUID,n=this._paths,r=this._parsedPaths,s=this._bindings,i=s.length;let a,o=t.length,l=this.nCachedObjects_;for(let u=0,c=arguments.length;u!==c;++u){const c=arguments[u],h=c.uuid;let d=e[h];if(void 0===d){d=o++,e[h]=d,t.push(c);for(let t=0,e=i;t!==e;++t)s[t].push(new Yd(c,n[t],r[t]))}else if(d<l){a=t[d];const o=--l,u=t[o];e[u.uuid]=d,t[d]=u,e[h]=o,t[o]=c;for(let t=0,e=i;t!==e;++t){const e=s[t],i=e[o];let a=e[d];e[d]=i,void 0===a&&(a=new Yd(c,n[t],r[t])),e[o]=a}}else t[d]!==a&&console.error(\"THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.\")}this.nCachedObjects_=l}remove(){const t=this._objects,e=this._indicesByUUID,n=this._bindings,r=n.length;let s=this.nCachedObjects_;for(let i=0,a=arguments.length;i!==a;++i){const a=arguments[i],o=a.uuid,l=e[o];if(void 0!==l&&l>=s){const i=s++,u=t[i];e[u.uuid]=l,t[l]=u,e[o]=i,t[i]=a;for(let t=0,e=r;t!==e;++t){const e=n[t],r=e[i],s=e[l];e[l]=r,e[i]=s}}}this.nCachedObjects_=s}uncache(){const t=this._objects,e=this._indicesByUUID,n=this._bindings,r=n.length;let s=this.nCachedObjects_,i=t.length;for(let a=0,o=arguments.length;a!==o;++a){const o=arguments[a].uuid,l=e[o];if(void 0!==l)if(delete e[o],l<s){const a=--s,o=t[a],u=--i,c=t[u];e[o.uuid]=l,t[l]=o,e[c.uuid]=a,t[a]=c,t.pop();for(let t=0,e=r;t!==e;++t){const e=n[t],r=e[a],s=e[u];e[l]=r,e[a]=s,e.pop()}}else{const s=--i,a=t[s];s>0&&(e[a.uuid]=l),t[l]=a,t.pop();for(let t=0,e=r;t!==e;++t){const e=n[t];e[l]=e[s],e.pop()}}}this.nCachedObjects_=s}subscribe_(t,e){const n=this._bindingsIndicesByPath;let r=n[t];const s=this._bindings;if(void 0!==r)return s[r];const i=this._paths,a=this._parsedPaths,o=this._objects,l=o.length,u=this.nCachedObjects_,c=new Array(l);r=s.length,n[t]=r,i.push(t),a.push(e),s.push(c);for(let n=u,r=o.length;n!==r;++n){const r=o[n];c[n]=new Yd(r,t,e)}return c}unsubscribe_(t){const e=this._bindingsIndicesByPath,n=e[t];if(void 0!==n){const r=this._paths,s=this._parsedPaths,i=this._bindings,a=i.length-1,o=i[a];e[t[a]]=n,i[n]=o,i.pop(),s[n]=s[a],s.pop(),r[n]=r[a],r.pop()}}}Zd.prototype.isAnimationObjectGroup=!0;class Jd{constructor(t,e,n=null,r=e.blendMode){this._mixer=t,this._clip=e,this._localRoot=n,this.blendMode=r;const s=e.tracks,i=s.length,a=new Array(i),o={endingStart:Ve,endingEnd:Ve};for(let t=0;t!==i;++t){const e=s[t].createInterpolant(null);a[t]=e,e.settings=o}this._interpolantSettings=o,this._interpolants=a,this._propertyBindings=new Array(i),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=Oe,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}play(){return this._mixer._activateAction(this),this}stop(){return this._mixer._deactivateAction(this),this.reset()}reset(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()}isRunning(){return this.enabled&&!this.paused&&0!==this.timeScale&&null===this._startTime&&this._mixer._isActiveAction(this)}isScheduled(){return this._mixer._isActiveAction(this)}startAt(t){return this._startTime=t,this}setLoop(t,e){return this.loop=t,this.repetitions=e,this}setEffectiveWeight(t){return this.weight=t,this._effectiveWeight=this.enabled?t:0,this.stopFading()}getEffectiveWeight(){return this._effectiveWeight}fadeIn(t){return this._scheduleFading(t,0,1)}fadeOut(t){return this._scheduleFading(t,1,0)}crossFadeFrom(t,e,n){if(t.fadeOut(e),this.fadeIn(e),n){const n=this._clip.duration,r=t._clip.duration,s=r/n,i=n/r;t.warp(1,s,e),this.warp(i,1,e)}return this}crossFadeTo(t,e,n){return t.crossFadeFrom(this,e,n)}stopFading(){const t=this._weightInterpolant;return null!==t&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this}setEffectiveTimeScale(t){return this.timeScale=t,this._effectiveTimeScale=this.paused?0:t,this.stopWarping()}getEffectiveTimeScale(){return this._effectiveTimeScale}setDuration(t){return this.timeScale=this._clip.duration/t,this.stopWarping()}syncWith(t){return this.time=t.time,this.timeScale=t.timeScale,this.stopWarping()}halt(t){return this.warp(this._effectiveTimeScale,0,t)}warp(t,e,n){const r=this._mixer,s=r.time,i=this.timeScale;let a=this._timeScaleInterpolant;null===a&&(a=r._lendControlInterpolant(),this._timeScaleInterpolant=a);const o=a.parameterPositions,l=a.sampleValues;return o[0]=s,o[1]=s+n,l[0]=t/i,l[1]=e/i,this}stopWarping(){const t=this._timeScaleInterpolant;return null!==t&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this}getMixer(){return this._mixer}getClip(){return this._clip}getRoot(){return this._localRoot||this._mixer._root}_update(t,e,n,r){if(!this.enabled)return void this._updateWeight(t);const s=this._startTime;if(null!==s){const r=(t-s)*n;if(r<0||0===n)return;this._startTime=null,e=n*r}e*=this._updateTimeScale(t);const i=this._updateTime(e),a=this._updateWeight(t);if(a>0){const t=this._interpolants,e=this._propertyBindings;switch(this.blendMode){case je:for(let n=0,r=t.length;n!==r;++n)t[n].evaluate(i),e[n].accumulateAdditive(a);break;case He:default:for(let n=0,s=t.length;n!==s;++n)t[n].evaluate(i),e[n].accumulate(r,a)}}}_updateWeight(t){let e=0;if(this.enabled){e=this.weight;const n=this._weightInterpolant;if(null!==n){const r=n.evaluate(t)[0];e*=r,t>n.parameterPositions[1]&&(this.stopFading(),0===r&&(this.enabled=!1))}}return this._effectiveWeight=e,e}_updateTimeScale(t){let e=0;if(!this.paused){e=this.timeScale;const n=this._timeScaleInterpolant;null!==n&&(e*=n.evaluate(t)[0],t>n.parameterPositions[1]&&(this.stopWarping(),0===e?this.paused=!0:this.timeScale=e))}return this._effectiveTimeScale=e,e}_updateTime(t){const e=this._clip.duration,n=this.loop;let r=this.time+t,s=this._loopCount;const i=n===Pe;if(0===t)return-1===s?r:i&&1==(1&s)?e-r:r;if(n===$e){-1===s&&(this._loopCount=0,this._setEndings(!0,!0,!1));t:{if(r>=e)r=e;else{if(!(r<0)){this.time=r;break t}r=0}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this.time=r,this._mixer.dispatchEvent({type:\"finished\",action:this,direction:t<0?-1:1})}}else{if(-1===s&&(t>=0?(s=0,this._setEndings(!0,0===this.repetitions,i)):this._setEndings(0===this.repetitions,!0,i)),r>=e||r<0){const n=Math.floor(r/e);r-=e*n,s+=Math.abs(n);const a=this.repetitions-s;if(a<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,r=t>0?e:0,this.time=r,this._mixer.dispatchEvent({type:\"finished\",action:this,direction:t>0?1:-1});else{if(1===a){const e=t<0;this._setEndings(e,!e,i)}else this._setEndings(!1,!1,i);this._loopCount=s,this.time=r,this._mixer.dispatchEvent({type:\"loop\",action:this,loopDelta:n})}}else this.time=r;if(i&&1==(1&s))return e-r}return r}_setEndings(t,e,n){const r=this._interpolantSettings;n?(r.endingStart=We,r.endingEnd=We):(r.endingStart=t?this.zeroSlopeAtStart?We:Ve:Ge,r.endingEnd=e?this.zeroSlopeAtEnd?We:Ve:Ge)}_scheduleFading(t,e,n){const r=this._mixer,s=r.time;let i=this._weightInterpolant;null===i&&(i=r._lendControlInterpolant(),this._weightInterpolant=i);const a=i.parameterPositions,o=i.sampleValues;return a[0]=s,o[0]=e,a[1]=s+t,o[1]=n,this}}class Qd extends $n{constructor(t){super(),this._root=t,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}_bindAction(t,e){const n=t._localRoot||this._root,r=t._clip.tracks,s=r.length,i=t._propertyBindings,a=t._interpolants,o=n.uuid,l=this._bindingsByRootAndName;let u=l[o];void 0===u&&(u={},l[o]=u);for(let t=0;t!==s;++t){const s=r[t],l=s.name;let c=u[l];if(void 0!==c)i[t]=c;else{if(c=i[t],void 0!==c){null===c._cacheIndex&&(++c.referenceCount,this._addInactiveBinding(c,o,l));continue}const r=e&&e._propertyBindings[t].binding.parsedPath;c=new Bd(Yd.create(n,l,r),s.ValueTypeName,s.getValueSize()),++c.referenceCount,this._addInactiveBinding(c,o,l),i[t]=c}a[t].resultBuffer=c.buffer}}_activateAction(t){if(!this._isActiveAction(t)){if(null===t._cacheIndex){const e=(t._localRoot||this._root).uuid,n=t._clip.uuid,r=this._actionsByClip[n];this._bindAction(t,r&&r.knownActions[0]),this._addInactiveAction(t,n,e)}const e=t._propertyBindings;for(let t=0,n=e.length;t!==n;++t){const n=e[t];0==n.useCount++&&(this._lendBinding(n),n.saveOriginalState())}this._lendAction(t)}}_deactivateAction(t){if(this._isActiveAction(t)){const e=t._propertyBindings;for(let t=0,n=e.length;t!==n;++t){const n=e[t];0==--n.useCount&&(n.restoreOriginalState(),this._takeBackBinding(n))}this._takeBackAction(t)}}_initMemoryManager(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;const t=this;this.stats={actions:{get total(){return t._actions.length},get inUse(){return t._nActiveActions}},bindings:{get total(){return t._bindings.length},get inUse(){return t._nActiveBindings}},controlInterpolants:{get total(){return t._controlInterpolants.length},get inUse(){return t._nActiveControlInterpolants}}}}_isActiveAction(t){const e=t._cacheIndex;return null!==e&&e<this._nActiveActions}_addInactiveAction(t,e,n){const r=this._actions,s=this._actionsByClip;let i=s[e];if(void 0===i)i={knownActions:[t],actionByRoot:{}},t._byClipCacheIndex=0,s[e]=i;else{const e=i.knownActions;t._byClipCacheIndex=e.length,e.push(t)}t._cacheIndex=r.length,r.push(t),i.actionByRoot[n]=t}_removeInactiveAction(t){const e=this._actions,n=e[e.length-1],r=t._cacheIndex;n._cacheIndex=r,e[r]=n,e.pop(),t._cacheIndex=null;const s=t._clip.uuid,i=this._actionsByClip,a=i[s],o=a.knownActions,l=o[o.length-1],u=t._byClipCacheIndex;l._byClipCacheIndex=u,o[u]=l,o.pop(),t._byClipCacheIndex=null,delete a.actionByRoot[(t._localRoot||this._root).uuid],0===o.length&&delete i[s],this._removeInactiveBindingsForAction(t)}_removeInactiveBindingsForAction(t){const e=t._propertyBindings;for(let t=0,n=e.length;t!==n;++t){const n=e[t];0==--n.referenceCount&&this._removeInactiveBinding(n)}}_lendAction(t){const e=this._actions,n=t._cacheIndex,r=this._nActiveActions++,s=e[r];t._cacheIndex=r,e[r]=t,s._cacheIndex=n,e[n]=s}_takeBackAction(t){const e=this._actions,n=t._cacheIndex,r=--this._nActiveActions,s=e[r];t._cacheIndex=r,e[r]=t,s._cacheIndex=n,e[n]=s}_addInactiveBinding(t,e,n){const r=this._bindingsByRootAndName,s=this._bindings;let i=r[e];void 0===i&&(i={},r[e]=i),i[n]=t,t._cacheIndex=s.length,s.push(t)}_removeInactiveBinding(t){const e=this._bindings,n=t.binding,r=n.rootNode.uuid,s=n.path,i=this._bindingsByRootAndName,a=i[r],o=e[e.length-1],l=t._cacheIndex;o._cacheIndex=l,e[l]=o,e.pop(),delete a[s],0===Object.keys(a).length&&delete i[r]}_lendBinding(t){const e=this._bindings,n=t._cacheIndex,r=this._nActiveBindings++,s=e[r];t._cacheIndex=r,e[r]=t,s._cacheIndex=n,e[n]=s}_takeBackBinding(t){const e=this._bindings,n=t._cacheIndex,r=--this._nActiveBindings,s=e[r];t._cacheIndex=r,e[r]=t,s._cacheIndex=n,e[n]=s}_lendControlInterpolant(){const t=this._controlInterpolants,e=this._nActiveControlInterpolants++;let n=t[e];return void 0===n&&(n=new ph(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer),n.__cacheIndex=e,t[e]=n),n}_takeBackControlInterpolant(t){const e=this._controlInterpolants,n=t.__cacheIndex,r=--this._nActiveControlInterpolants,s=e[r];t.__cacheIndex=r,e[r]=t,s.__cacheIndex=n,e[n]=s}clipAction(t,e,n){const r=e||this._root,s=r.uuid;let i=\"string\"==typeof t?Th.findByName(r,t):t;const a=null!==i?i.uuid:t,o=this._actionsByClip[a];let l=null;if(void 0===n&&(n=null!==i?i.blendMode:He),void 0!==o){const t=o.actionByRoot[s];if(void 0!==t&&t.blendMode===n)return t;l=o.knownActions[0],null===i&&(i=l._clip)}if(null===i)return null;const u=new Jd(this,i,e,n);return this._bindAction(u,l),this._addInactiveAction(u,a,s),u}existingAction(t,e){const n=e||this._root,r=n.uuid,s=\"string\"==typeof t?Th.findByName(n,t):t,i=s?s.uuid:t,a=this._actionsByClip[i];return void 0!==a&&a.actionByRoot[r]||null}stopAllAction(){const t=this._actions;for(let e=this._nActiveActions-1;e>=0;--e)t[e].stop();return this}update(t){t*=this.timeScale;const e=this._actions,n=this._nActiveActions,r=this.time+=t,s=Math.sign(t),i=this._accuIndex^=1;for(let a=0;a!==n;++a)e[a]._update(r,t,s,i);const a=this._bindings,o=this._nActiveBindings;for(let t=0;t!==o;++t)a[t].apply(i);return this}setTime(t){this.time=0;for(let t=0;t<this._actions.length;t++)this._actions[t].time=0;return this.update(t)}getRoot(){return this._root}uncacheClip(t){const e=this._actions,n=t.uuid,r=this._actionsByClip,s=r[n];if(void 0!==s){const t=s.knownActions;for(let n=0,r=t.length;n!==r;++n){const r=t[n];this._deactivateAction(r);const s=r._cacheIndex,i=e[e.length-1];r._cacheIndex=null,r._byClipCacheIndex=null,i._cacheIndex=s,e[s]=i,e.pop(),this._removeInactiveBindingsForAction(r)}delete r[n]}}uncacheRoot(t){const e=t.uuid,n=this._actionsByClip;for(const t in n){const r=n[t].actionByRoot[e];void 0!==r&&(this._deactivateAction(r),this._removeInactiveAction(r))}const r=this._bindingsByRootAndName[e];if(void 0!==r)for(const t in r){const e=r[t];e.restoreOriginalState(),this._removeInactiveBinding(e)}}uncacheAction(t,e){const n=this.existingAction(t,e);null!==n&&(this._deactivateAction(n),this._removeInactiveAction(n))}}Qd.prototype._controlInterpolantsResultBuffer=new Float32Array(1);class tp{constructor(t){\"string\"==typeof t&&(console.warn(\"THREE.Uniform: Type parameter is no longer needed.\"),t=arguments[1]),this.value=t}clone(){return new tp(void 0===this.value.clone?this.value:this.value.clone())}}class ep extends El{constructor(t,e,n=1){super(t,e),this.meshPerAttribute=n}copy(t){return super.copy(t),this.meshPerAttribute=t.meshPerAttribute,this}clone(t){const e=super.clone(t);return e.meshPerAttribute=this.meshPerAttribute,e}toJSON(t){const e=super.toJSON(t);return e.isInstancedInterleavedBuffer=!0,e.meshPerAttribute=this.meshPerAttribute,e}}ep.prototype.isInstancedInterleavedBuffer=!0;class np{constructor(t,e,n,r,s){this.buffer=t,this.type=e,this.itemSize=n,this.elementSize=r,this.count=s,this.version=0}set needsUpdate(t){!0===t&&this.version++}setBuffer(t){return this.buffer=t,this}setType(t,e){return this.type=t,this.elementSize=e,this}setItemSize(t){return this.itemSize=t,this}setCount(t){return this.count=t,this}}np.prototype.isGLBufferAttribute=!0;class rp{constructor(t,e,n=0,r=1/0){this.ray=new Or(t,e),this.near=n,this.far=r,this.camera=null,this.layers=new Kr,this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}}}set(t,e){this.ray.set(t,e)}setFromCamera(t,e){e&&e.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(e.matrixWorld),this.ray.direction.set(t.x,t.y,.5).unproject(e).sub(this.ray.origin).normalize(),this.camera=e):e&&e.isOrthographicCamera?(this.ray.origin.set(t.x,t.y,(e.near+e.far)/(e.near-e.far)).unproject(e),this.ray.direction.set(0,0,-1).transformDirection(e.matrixWorld),this.camera=e):console.error(\"THREE.Raycaster: Unsupported camera type: \"+e.type)}intersectObject(t,e=!1,n=[]){return ip(t,this,n,e),n.sort(sp),n}intersectObjects(t,e=!1,n=[]){for(let r=0,s=t.length;r<s;r++)ip(t[r],this,n,e);return n.sort(sp),n}}function sp(t,e){return t.distance-e.distance}function ip(t,e,n,r){if(t.layers.test(e.layers)&&t.raycast(e,n),!0===r){const r=t.children;for(let t=0,s=r.length;t<s;t++)ip(r[t],e,n,!0)}}class ap{constructor(t=1,e=0,n=0){return this.radius=t,this.phi=e,this.theta=n,this}set(t,e,n){return this.radius=t,this.phi=e,this.theta=n,this}copy(t){return this.radius=t.radius,this.phi=t.phi,this.theta=t.theta,this}makeSafe(){const t=1e-6;return this.phi=Math.max(t,Math.min(Math.PI-t,this.phi)),this}setFromVector3(t){return this.setFromCartesianCoords(t.x,t.y,t.z)}setFromCartesianCoords(t,e,n){return this.radius=Math.sqrt(t*t+e*e+n*n),0===this.radius?(this.theta=0,this.phi=0):(this.theta=Math.atan2(t,n),this.phi=Math.acos(Vn(e/this.radius,-1,1))),this}clone(){return(new this.constructor).copy(this)}}class op{constructor(t=1,e=0,n=0){return this.radius=t,this.theta=e,this.y=n,this}set(t,e,n){return this.radius=t,this.theta=e,this.y=n,this}copy(t){return this.radius=t.radius,this.theta=t.theta,this.y=t.y,this}setFromVector3(t){return this.setFromCartesianCoords(t.x,t.y,t.z)}setFromCartesianCoords(t,e,n){return this.radius=Math.sqrt(t*t+n*n),this.theta=Math.atan2(t,n),this.y=e,this}clone(){return(new this.constructor).copy(this)}}const lp=new Kn;class up{constructor(t=new Kn(1/0,1/0),e=new Kn(-1/0,-1/0)){this.min=t,this.max=e}set(t,e){return this.min.copy(t),this.max.copy(e),this}setFromPoints(t){this.makeEmpty();for(let e=0,n=t.length;e<n;e++)this.expandByPoint(t[e]);return this}setFromCenterAndSize(t,e){const n=lp.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(n),this.max.copy(t).add(n),this}clone(){return(new this.constructor).copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=1/0,this.max.x=this.max.y=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y}getCenter(t){return this.isEmpty()?t.set(0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}containsPoint(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y)}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y}getParameter(t,e){return e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y))}intersectsBox(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y)}clampPoint(t,e){return e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return lp.copy(t).clamp(this.min,this.max).sub(t).length()}intersect(t){return this.min.max(t.min),this.max.min(t.max),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}up.prototype.isBox2=!0;const cp=new or,hp=new or;class dp{constructor(t=new or,e=new or){this.start=t,this.end=e}set(t,e){return this.start.copy(t),this.end.copy(e),this}copy(t){return this.start.copy(t.start),this.end.copy(t.end),this}getCenter(t){return t.addVectors(this.start,this.end).multiplyScalar(.5)}delta(t){return t.subVectors(this.end,this.start)}distanceSq(){return this.start.distanceToSquared(this.end)}distance(){return this.start.distanceTo(this.end)}at(t,e){return this.delta(e).multiplyScalar(t).add(this.start)}closestPointToPointParameter(t,e){cp.subVectors(t,this.start),hp.subVectors(this.end,this.start);const n=hp.dot(hp);let r=hp.dot(cp)/n;return e&&(r=Vn(r,0,1)),r}closestPointToPoint(t,e,n){const r=this.closestPointToPointParameter(t,e);return this.delta(n).multiplyScalar(r).add(this.start)}applyMatrix4(t){return this.start.applyMatrix4(t),this.end.applyMatrix4(t),this}equals(t){return t.start.equals(this.start)&&t.end.equals(this.end)}clone(){return(new this.constructor).copy(this)}}class pp extends us{constructor(t){super(),this.material=t,this.render=function(){},this.hasPositions=!1,this.hasNormals=!1,this.hasColors=!1,this.hasUvs=!1,this.positionArray=null,this.normalArray=null,this.colorArray=null,this.uvArray=null,this.count=0}}pp.prototype.isImmediateRenderObject=!0;const fp=new or;class mp extends us{constructor(t,e){super(),this.light=t,this.light.updateMatrixWorld(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=e;const n=new ti,r=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1];for(let t=0,e=1,n=32;t<n;t++,e++){const s=t/n*Math.PI*2,i=e/n*Math.PI*2;r.push(Math.cos(s),Math.sin(s),1,Math.cos(i),Math.sin(i),1)}n.setAttribute(\"position\",new Vs(r,3));const s=new du({fog:!1,toneMapped:!1});this.cone=new wu(n,s),this.add(this.cone),this.update()}dispose(){this.cone.geometry.dispose(),this.cone.material.dispose()}update(){this.light.updateMatrixWorld();const t=this.light.distance?this.light.distance:1e3,e=t*Math.tan(this.light.angle);this.cone.scale.set(e,e,t),fp.setFromMatrixPosition(this.light.target.matrixWorld),this.cone.lookAt(fp),void 0!==this.color?this.cone.material.color.set(this.color):this.cone.material.color.copy(this.light.color)}}const gp=new or,yp=new Pr,xp=new Pr;class bp extends wu{constructor(t){const e=vp(t),n=new ti,r=[],s=[],i=new Cs(0,0,1),a=new Cs(0,1,0);for(let t=0;t<e.length;t++){const n=e[t];n.parent&&n.parent.isBone&&(r.push(0,0,0),r.push(0,0,0),s.push(i.r,i.g,i.b),s.push(a.r,a.g,a.b))}n.setAttribute(\"position\",new Vs(r,3)),n.setAttribute(\"color\",new Vs(s,3)),super(n,new du({vertexColors:!0,depthTest:!1,depthWrite:!1,toneMapped:!1,transparent:!0})),this.type=\"SkeletonHelper\",this.isSkeletonHelper=!0,this.root=t,this.bones=e,this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1}updateMatrixWorld(t){const e=this.bones,n=this.geometry,r=n.getAttribute(\"position\");xp.copy(this.root.matrixWorld).invert();for(let t=0,n=0;t<e.length;t++){const s=e[t];s.parent&&s.parent.isBone&&(yp.multiplyMatrices(xp,s.matrixWorld),gp.setFromMatrixPosition(yp),r.setXYZ(n,gp.x,gp.y,gp.z),yp.multiplyMatrices(xp,s.parent.matrixWorld),gp.setFromMatrixPosition(yp),r.setXYZ(n+1,gp.x,gp.y,gp.z),n+=2)}n.getAttribute(\"position\").needsUpdate=!0,super.updateMatrixWorld(t)}}function vp(t){const e=[];t&&t.isBone&&e.push(t);for(let n=0;n<t.children.length;n++)e.push.apply(e,vp(t.children[n]));return e}class wp extends xi{constructor(t,e,n){super(new Hc(e,4,2),new Ns({wireframe:!0,fog:!1,toneMapped:!1})),this.light=t,this.light.updateMatrixWorld(),this.color=n,this.type=\"PointLightHelper\",this.matrix=this.light.matrixWorld,this.matrixAutoUpdate=!1,this.update()}dispose(){this.geometry.dispose(),this.material.dispose()}update(){void 0!==this.color?this.material.color.set(this.color):this.material.color.copy(this.light.color)}}const Sp=new or,Tp=new Cs,_p=new Cs;class Mp extends us{constructor(t,e,n){super(),this.light=t,this.light.updateMatrixWorld(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=n;const r=new Uc(e);r.rotateY(.5*Math.PI),this.material=new Ns({wireframe:!0,fog:!1,toneMapped:!1}),void 0===this.color&&(this.material.vertexColors=!0);const s=r.getAttribute(\"position\"),i=new Float32Array(3*s.count);r.setAttribute(\"color\",new Ls(i,3)),this.add(new xi(r,this.material)),this.update()}dispose(){this.children[0].geometry.dispose(),this.children[0].material.dispose()}update(){const t=this.children[0];if(void 0!==this.color)this.material.color.set(this.color);else{const e=t.geometry.getAttribute(\"color\");Tp.copy(this.light.color),_p.copy(this.light.groundColor);for(let t=0,n=e.count;t<n;t++){const r=t<n/2?Tp:_p;e.setXYZ(t,r.r,r.g,r.b)}e.needsUpdate=!0}t.lookAt(Sp.setFromMatrixPosition(this.light.matrixWorld).negate())}}class kp extends wu{constructor(t=10,e=10,n=4473924,r=8947848){n=new Cs(n),r=new Cs(r);const s=e/2,i=t/e,a=t/2,o=[],l=[];for(let t=0,u=0,c=-a;t<=e;t++,c+=i){o.push(-a,0,c,a,0,c),o.push(c,0,-a,c,0,a);const e=t===s?n:r;e.toArray(l,u),u+=3,e.toArray(l,u),u+=3,e.toArray(l,u),u+=3,e.toArray(l,u),u+=3}const u=new ti;u.setAttribute(\"position\",new Vs(o,3)),u.setAttribute(\"color\",new Vs(l,3)),super(u,new du({vertexColors:!0,toneMapped:!1})),this.type=\"GridHelper\"}}class Ep extends wu{constructor(t=10,e=16,n=8,r=64,s=4473924,i=8947848){s=new Cs(s),i=new Cs(i);const a=[],o=[];for(let n=0;n<=e;n++){const r=n/e*(2*Math.PI),l=Math.sin(r)*t,u=Math.cos(r)*t;a.push(0,0,0),a.push(l,0,u);const c=1&n?s:i;o.push(c.r,c.g,c.b),o.push(c.r,c.g,c.b)}for(let e=0;e<=n;e++){const l=1&e?s:i,u=t-t/n*e;for(let t=0;t<r;t++){let e=t/r*(2*Math.PI),n=Math.sin(e)*u,s=Math.cos(e)*u;a.push(n,0,s),o.push(l.r,l.g,l.b),e=(t+1)/r*(2*Math.PI),n=Math.sin(e)*u,s=Math.cos(e)*u,a.push(n,0,s),o.push(l.r,l.g,l.b)}}const l=new ti;l.setAttribute(\"position\",new Vs(a,3)),l.setAttribute(\"color\",new Vs(o,3)),super(l,new du({vertexColors:!0,toneMapped:!1})),this.type=\"PolarGridHelper\"}}const Ip=new or,Cp=new or,Np=new or;class Ap extends us{constructor(t,e,n){super(),this.light=t,this.light.updateMatrixWorld(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=n,void 0===e&&(e=1);let r=new ti;r.setAttribute(\"position\",new Vs([-e,e,0,e,e,0,e,-e,0,-e,-e,0,-e,e,0],3));const s=new du({fog:!1,toneMapped:!1});this.lightPlane=new xu(r,s),this.add(this.lightPlane),r=new ti,r.setAttribute(\"position\",new Vs([0,0,0,0,0,1],3)),this.targetLine=new xu(r,s),this.add(this.targetLine),this.update()}dispose(){this.lightPlane.geometry.dispose(),this.lightPlane.material.dispose(),this.targetLine.geometry.dispose(),this.targetLine.material.dispose()}update(){Ip.setFromMatrixPosition(this.light.matrixWorld),Cp.setFromMatrixPosition(this.light.target.matrixWorld),Np.subVectors(Cp,Ip),this.lightPlane.lookAt(Cp),void 0!==this.color?(this.lightPlane.material.color.set(this.color),this.targetLine.material.color.set(this.color)):(this.lightPlane.material.color.copy(this.light.color),this.targetLine.material.color.copy(this.light.color)),this.targetLine.lookAt(Cp),this.targetLine.scale.z=Np.length()}}const Rp=new or,Lp=new Mi;class Dp extends wu{constructor(t){const e=new ti,n=new du({color:16777215,vertexColors:!0,toneMapped:!1}),r=[],s=[],i={},a=new Cs(16755200),o=new Cs(16711680),l=new Cs(43775),u=new Cs(16777215),c=new Cs(3355443);function h(t,e,n){d(t,n),d(e,n)}function d(t,e){r.push(0,0,0),s.push(e.r,e.g,e.b),void 0===i[t]&&(i[t]=[]),i[t].push(r.length/3-1)}h(\"n1\",\"n2\",a),h(\"n2\",\"n4\",a),h(\"n4\",\"n3\",a),h(\"n3\",\"n1\",a),h(\"f1\",\"f2\",a),h(\"f2\",\"f4\",a),h(\"f4\",\"f3\",a),h(\"f3\",\"f1\",a),h(\"n1\",\"f1\",a),h(\"n2\",\"f2\",a),h(\"n3\",\"f3\",a),h(\"n4\",\"f4\",a),h(\"p\",\"n1\",o),h(\"p\",\"n2\",o),h(\"p\",\"n3\",o),h(\"p\",\"n4\",o),h(\"u1\",\"u2\",l),h(\"u2\",\"u3\",l),h(\"u3\",\"u1\",l),h(\"c\",\"t\",u),h(\"p\",\"c\",c),h(\"cn1\",\"cn2\",c),h(\"cn3\",\"cn4\",c),h(\"cf1\",\"cf2\",c),h(\"cf3\",\"cf4\",c),e.setAttribute(\"position\",new Vs(r,3)),e.setAttribute(\"color\",new Vs(s,3)),super(e,n),this.type=\"CameraHelper\",this.camera=t,this.camera.updateProjectionMatrix&&this.camera.updateProjectionMatrix(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.pointMap=i,this.update()}update(){const t=this.geometry,e=this.pointMap;Lp.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse),Fp(\"c\",e,t,Lp,0,0,-1),Fp(\"t\",e,t,Lp,0,0,1),Fp(\"n1\",e,t,Lp,-1,-1,-1),Fp(\"n2\",e,t,Lp,1,-1,-1),Fp(\"n3\",e,t,Lp,-1,1,-1),Fp(\"n4\",e,t,Lp,1,1,-1),Fp(\"f1\",e,t,Lp,-1,-1,1),Fp(\"f2\",e,t,Lp,1,-1,1),Fp(\"f3\",e,t,Lp,-1,1,1),Fp(\"f4\",e,t,Lp,1,1,1),Fp(\"u1\",e,t,Lp,.7,1.1,-1),Fp(\"u2\",e,t,Lp,-.7,1.1,-1),Fp(\"u3\",e,t,Lp,0,2,-1),Fp(\"cf1\",e,t,Lp,-1,0,1),Fp(\"cf2\",e,t,Lp,1,0,1),Fp(\"cf3\",e,t,Lp,0,-1,1),Fp(\"cf4\",e,t,Lp,0,1,1),Fp(\"cn1\",e,t,Lp,-1,0,-1),Fp(\"cn2\",e,t,Lp,1,0,-1),Fp(\"cn3\",e,t,Lp,0,-1,-1),Fp(\"cn4\",e,t,Lp,0,1,-1),t.getAttribute(\"position\").needsUpdate=!0}dispose(){this.geometry.dispose(),this.material.dispose()}}function Fp(t,e,n,r,s,i,a){Rp.set(s,i,a).unproject(r);const o=e[t];if(void 0!==o){const t=n.getAttribute(\"position\");for(let e=0,n=o.length;e<n;e++)t.setXYZ(o[e],Rp.x,Rp.y,Rp.z)}}const $p=new cr;class Op extends wu{constructor(t,e=16776960){const n=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),r=new Float32Array(24),s=new ti;s.setIndex(new Ls(n,1)),s.setAttribute(\"position\",new Ls(r,3)),super(s,new du({color:e,toneMapped:!1})),this.object=t,this.type=\"BoxHelper\",this.matrixAutoUpdate=!1,this.update()}update(t){if(void 0!==t&&console.warn(\"THREE.BoxHelper: .update() has no longer arguments.\"),void 0!==this.object&&$p.setFromObject(this.object),$p.isEmpty())return;const e=$p.min,n=$p.max,r=this.geometry.attributes.position,s=r.array;s[0]=n.x,s[1]=n.y,s[2]=n.z,s[3]=e.x,s[4]=n.y,s[5]=n.z,s[6]=e.x,s[7]=e.y,s[8]=n.z,s[9]=n.x,s[10]=e.y,s[11]=n.z,s[12]=n.x,s[13]=n.y,s[14]=e.z,s[15]=e.x,s[16]=n.y,s[17]=e.z,s[18]=e.x,s[19]=e.y,s[20]=e.z,s[21]=n.x,s[22]=e.y,s[23]=e.z,r.needsUpdate=!0,this.geometry.computeBoundingSphere()}setFromObject(t){return this.object=t,this.update(),this}copy(t){return wu.prototype.copy.call(this,t),this.object=t.object,this}}class Pp extends wu{constructor(t,e=16776960){const n=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),r=new ti;r.setIndex(new Ls(n,1)),r.setAttribute(\"position\",new Vs([1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1],3)),super(r,new du({color:e,toneMapped:!1})),this.box=t,this.type=\"Box3Helper\",this.geometry.computeBoundingSphere()}updateMatrixWorld(t){const e=this.box;e.isEmpty()||(e.getCenter(this.position),e.getSize(this.scale),this.scale.multiplyScalar(.5),super.updateMatrixWorld(t))}}class zp extends xu{constructor(t,e=1,n=16776960){const r=n,s=new ti;s.setAttribute(\"position\",new Vs([1,-1,1,-1,1,1,-1,-1,1,1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,1,0,0,1,0,0,0],3)),s.computeBoundingSphere(),super(s,new du({color:r,toneMapped:!1})),this.type=\"PlaneHelper\",this.plane=t,this.size=e;const i=new ti;i.setAttribute(\"position\",new Vs([1,1,1,-1,1,1,-1,-1,1,1,1,1,-1,-1,1,1,-1,1],3)),i.computeBoundingSphere(),this.add(new xi(i,new Ns({color:r,opacity:.2,transparent:!0,depthWrite:!1,toneMapped:!1})))}updateMatrixWorld(t){let e=-this.plane.constant;Math.abs(e)<1e-8&&(e=1e-8),this.scale.set(.5*this.size,.5*this.size,e),this.children[0].material.side=e<0?m:f,this.lookAt(this.plane.normal),super.updateMatrixWorld(t)}}const Bp=new or;let Up,Vp;class Wp extends us{constructor(t=new or(0,0,1),e=new or(0,0,0),n=1,r=16776960,s=.2*n,i=.2*s){super(),this.type=\"ArrowHelper\",void 0===Up&&(Up=new ti,Up.setAttribute(\"position\",new Vs([0,0,0,0,1,0],3)),Vp=new Fu(0,.5,1,5,1),Vp.translate(0,-.5,0)),this.position.copy(e),this.line=new xu(Up,new du({color:r,toneMapped:!1})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new xi(Vp,new Ns({color:r,toneMapped:!1})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(t),this.setLength(n,s,i)}setDirection(t){if(t.y>.99999)this.quaternion.set(0,0,0,1);else if(t.y<-.99999)this.quaternion.set(1,0,0,0);else{Bp.set(t.z,0,-t.x).normalize();const e=Math.acos(t.y);this.quaternion.setFromAxisAngle(Bp,e)}}setLength(t,e=.2*t,n=.2*e){this.line.scale.set(1,Math.max(1e-4,t-e),1),this.line.updateMatrix(),this.cone.scale.set(n,e,n),this.cone.position.y=t,this.cone.updateMatrix()}setColor(t){this.line.material.color.set(t),this.cone.material.color.set(t)}copy(t){return super.copy(t,!1),this.line.copy(t.line),this.cone.copy(t.cone),this}}class Gp extends wu{constructor(t=1){const e=[0,0,0,t,0,0,0,0,0,0,t,0,0,0,0,0,0,t],n=new ti;n.setAttribute(\"position\",new Vs(e,3)),n.setAttribute(\"color\",new Vs([1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],3)),super(n,new du({vertexColors:!0,toneMapped:!1})),this.type=\"AxesHelper\"}setColors(t,e,n){const r=new Cs,s=this.geometry.attributes.color.array;return r.set(t),r.toArray(s,0),r.toArray(s,3),r.set(e),r.toArray(s,6),r.toArray(s,9),r.set(n),r.toArray(s,12),r.toArray(s,15),this.geometry.attributes.color.needsUpdate=!0,this}dispose(){this.geometry.dispose(),this.material.dispose()}}const Hp=new Float32Array(1),jp=new Int32Array(Hp.buffer);class qp{static toHalfFloat(t){Hp[0]=t;const e=jp[0];let n=e>>16&32768,r=e>>12&2047;const s=e>>23&255;return s<103?n:s>142?(n|=31744,n|=(255==s?0:1)&&8388607&e,n):s<113?(r|=2048,n|=(r>>114-s)+(r>>113-s&1),n):(n|=s-112<<10|r>>1,n+=1&r,n)}}const Xp=0,Kp=1,Yp=0,Zp=1,Jp=2;function Qp(t){return console.warn(\"THREE.MeshFaceMaterial has been removed. Use an Array instead.\"),t}function tf(t=[]){return console.warn(\"THREE.MultiMaterial has been removed. Use an Array instead.\"),t.isMultiMaterial=!0,t.materials=t,t.clone=function(){return t.slice()},t}function ef(t,e){return console.warn(\"THREE.PointCloud has been renamed to THREE.Points.\"),new Iu(t,e)}function nf(t){return console.warn(\"THREE.Particle has been renamed to THREE.Sprite.\"),new Gl(t)}function rf(t,e){return console.warn(\"THREE.ParticleSystem has been renamed to THREE.Points.\"),new Iu(t,e)}function sf(t){return console.warn(\"THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.\"),new Tu(t)}function af(t){return console.warn(\"THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.\"),new Tu(t)}function of(t){return console.warn(\"THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.\"),new Tu(t)}function lf(t,e,n){return console.warn(\"THREE.Vertex has been removed. Use THREE.Vector3 instead.\"),new or(t,e,n)}function uf(t,e){return console.warn(\"THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead.\"),new Ls(t,e).setUsage(kn)}function cf(t,e){return console.warn(\"THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.\"),new Ds(t,e)}function hf(t,e){return console.warn(\"THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.\"),new Fs(t,e)}function df(t,e){return console.warn(\"THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.\"),new $s(t,e)}function pf(t,e){return console.warn(\"THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.\"),new Os(t,e)}function ff(t,e){return console.warn(\"THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.\"),new Ps(t,e)}function mf(t,e){return console.warn(\"THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.\"),new zs(t,e)}function gf(t,e){return console.warn(\"THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.\"),new Bs(t,e)}function yf(t,e){return console.warn(\"THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.\"),new Vs(t,e)}function xf(t,e){return console.warn(\"THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.\"),new Ws(t,e)}function bf(t){return console.warn(\"THREE.AxisHelper has been renamed to THREE.AxesHelper.\"),new Gp(t)}function vf(t,e){return console.warn(\"THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.\"),new Op(t,e)}function wf(t,e){return console.warn(\"THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.\"),new wu(new Wu(t.geometry),new du({color:void 0!==e?e:16777215}))}function Sf(t,e){return console.warn(\"THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.\"),new wu(new Zc(t.geometry),new du({color:void 0!==e?e:16777215}))}function Tf(t){return console.warn(\"THREE.XHRLoader has been renamed to THREE.FileLoader.\"),new Nh(t)}function _f(t){return console.warn(\"THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.\"),new Fh(t)}function Mf(t,e,n){return console.warn(\"THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options ).\"),new Ni(t,n)}function kf(){console.error(\"THREE.CanvasRenderer has been removed\")}function Ef(){console.error(\"THREE.JSONLoader has been removed.\")}Gu.create=function(t,e){return console.log(\"THREE.Curve.create() has been deprecated\"),t.prototype=Object.create(Gu.prototype),t.prototype.constructor=t,t.prototype.getPoint=e,t},Ph.prototype.fromPoints=function(t){return console.warn(\"THREE.Path: .fromPoints() has been renamed to .setFromPoints().\"),this.setFromPoints(t)},kp.prototype.setColors=function(){console.error(\"THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.\")},bp.prototype.update=function(){console.error(\"THREE.SkeletonHelper: update() no longer needs to be called.\")},Ih.prototype.extractUrlBase=function(t){return console.warn(\"THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.\"),ad.extractUrlBase(t)},Ih.Handlers={add:function(){console.error(\"THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.\")},get:function(){console.error(\"THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.\")}},up.prototype.center=function(t){return console.warn(\"THREE.Box2: .center() has been renamed to .getCenter().\"),this.getCenter(t)},up.prototype.empty=function(){return console.warn(\"THREE.Box2: .empty() has been renamed to .isEmpty().\"),this.isEmpty()},up.prototype.isIntersectionBox=function(t){return console.warn(\"THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().\"),this.intersectsBox(t)},up.prototype.size=function(t){return console.warn(\"THREE.Box2: .size() has been renamed to .getSize().\"),this.getSize(t)},cr.prototype.center=function(t){return console.warn(\"THREE.Box3: .center() has been renamed to .getCenter().\"),this.getCenter(t)},cr.prototype.empty=function(){return console.warn(\"THREE.Box3: .empty() has been renamed to .isEmpty().\"),this.isEmpty()},cr.prototype.isIntersectionBox=function(t){return console.warn(\"THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().\"),this.intersectsBox(t)},cr.prototype.isIntersectionSphere=function(t){return console.warn(\"THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().\"),this.intersectsSphere(t)},cr.prototype.size=function(t){return console.warn(\"THREE.Box3: .size() has been renamed to .getSize().\"),this.getSize(t)},Cr.prototype.empty=function(){return console.warn(\"THREE.Sphere: .empty() has been renamed to .isEmpty().\"),this.isEmpty()},Oi.prototype.setFromMatrix=function(t){return console.warn(\"THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().\"),this.setFromProjectionMatrix(t)},dp.prototype.center=function(t){return console.warn(\"THREE.Line3: .center() has been renamed to .getCenter().\"),this.getCenter(t)},Yn.prototype.flattenToArrayOffset=function(t,e){return console.warn(\"THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\"),this.toArray(t,e)},Yn.prototype.multiplyVector3=function(t){return console.warn(\"THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.\"),t.applyMatrix3(this)},Yn.prototype.multiplyVector3Array=function(){console.error(\"THREE.Matrix3: .multiplyVector3Array() has been removed.\")},Yn.prototype.applyToBufferAttribute=function(t){return console.warn(\"THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.\"),t.applyMatrix3(this)},Yn.prototype.applyToVector3Array=function(){console.error(\"THREE.Matrix3: .applyToVector3Array() has been removed.\")},Yn.prototype.getInverse=function(t){return console.warn(\"THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.\"),this.copy(t).invert()},Pr.prototype.extractPosition=function(t){return console.warn(\"THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().\"),this.copyPosition(t)},Pr.prototype.flattenToArrayOffset=function(t,e){return console.warn(\"THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.\"),this.toArray(t,e)},Pr.prototype.getPosition=function(){return console.warn(\"THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.\"),(new or).setFromMatrixColumn(this,3)},Pr.prototype.setRotationFromQuaternion=function(t){return console.warn(\"THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().\"),this.makeRotationFromQuaternion(t)},Pr.prototype.multiplyToArray=function(){console.warn(\"THREE.Matrix4: .multiplyToArray() has been removed.\")},Pr.prototype.multiplyVector3=function(t){return console.warn(\"THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.\"),t.applyMatrix4(this)},Pr.prototype.multiplyVector4=function(t){return console.warn(\"THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.\"),t.applyMatrix4(this)},Pr.prototype.multiplyVector3Array=function(){console.error(\"THREE.Matrix4: .multiplyVector3Array() has been removed.\")},Pr.prototype.rotateAxis=function(t){console.warn(\"THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.\"),t.transformDirection(this)},Pr.prototype.crossVector=function(t){return console.warn(\"THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.\"),t.applyMatrix4(this)},Pr.prototype.translate=function(){console.error(\"THREE.Matrix4: .translate() has been removed.\")},Pr.prototype.rotateX=function(){console.error(\"THREE.Matrix4: .rotateX() has been removed.\")},Pr.prototype.rotateY=function(){console.error(\"THREE.Matrix4: .rotateY() has been removed.\")},Pr.prototype.rotateZ=function(){console.error(\"THREE.Matrix4: .rotateZ() has been removed.\")},Pr.prototype.rotateByAxis=function(){console.error(\"THREE.Matrix4: .rotateByAxis() has been removed.\")},Pr.prototype.applyToBufferAttribute=function(t){return console.warn(\"THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.\"),t.applyMatrix4(this)},Pr.prototype.applyToVector3Array=function(){console.error(\"THREE.Matrix4: .applyToVector3Array() has been removed.\")},Pr.prototype.makeFrustum=function(t,e,n,r,s,i){return console.warn(\"THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.\"),this.makePerspective(t,e,r,n,s,i)},Pr.prototype.getInverse=function(t){return console.warn(\"THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.\"),this.copy(t).invert()},Di.prototype.isIntersectionLine=function(t){return console.warn(\"THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().\"),this.intersectsLine(t)},ar.prototype.multiplyVector3=function(t){return console.warn(\"THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.\"),t.applyQuaternion(this)},ar.prototype.inverse=function(){return console.warn(\"THREE.Quaternion: .inverse() has been renamed to invert().\"),this.invert()},Or.prototype.isIntersectionBox=function(t){return console.warn(\"THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().\"),this.intersectsBox(t)},Or.prototype.isIntersectionPlane=function(t){return console.warn(\"THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().\"),this.intersectsPlane(t)},Or.prototype.isIntersectionSphere=function(t){return console.warn(\"THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().\"),this.intersectsSphere(t)},vs.prototype.area=function(){return console.warn(\"THREE.Triangle: .area() has been renamed to .getArea().\"),this.getArea()},vs.prototype.barycoordFromPoint=function(t,e){return console.warn(\"THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().\"),this.getBarycoord(t,e)},vs.prototype.midpoint=function(t){return console.warn(\"THREE.Triangle: .midpoint() has been renamed to .getMidpoint().\"),this.getMidpoint(t)},vs.prototypenormal=function(t){return console.warn(\"THREE.Triangle: .normal() has been renamed to .getNormal().\"),this.getNormal(t)},vs.prototype.plane=function(t){return console.warn(\"THREE.Triangle: .plane() has been renamed to .getPlane().\"),this.getPlane(t)},vs.barycoordFromPoint=function(t,e,n,r,s){return console.warn(\"THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().\"),vs.getBarycoord(t,e,n,r,s)},vs.normal=function(t,e,n,r){return console.warn(\"THREE.Triangle: .normal() has been renamed to .getNormal().\"),vs.getNormal(t,e,n,r)},zh.prototype.extractAllPoints=function(t){return console.warn(\"THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.\"),this.extractPoints(t)},zh.prototype.extrude=function(t){return console.warn(\"THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.\"),new Oc(this,t)},zh.prototype.makeGeometry=function(t){return console.warn(\"THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.\"),new Gc(this,t)},Kn.prototype.fromAttribute=function(t,e,n){return console.warn(\"THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().\"),this.fromBufferAttribute(t,e,n)},Kn.prototype.distanceToManhattan=function(t){return console.warn(\"THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().\"),this.manhattanDistanceTo(t)},Kn.prototype.lengthManhattan=function(){return console.warn(\"THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().\"),this.manhattanLength()},or.prototype.setEulerFromRotationMatrix=function(){console.error(\"THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.\")},or.prototype.setEulerFromQuaternion=function(){console.error(\"THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.\")},or.prototype.getPositionFromMatrix=function(t){return console.warn(\"THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().\"),this.setFromMatrixPosition(t)},or.prototype.getScaleFromMatrix=function(t){return console.warn(\"THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().\"),this.setFromMatrixScale(t)},or.prototype.getColumnFromMatrix=function(t,e){return console.warn(\"THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().\"),this.setFromMatrixColumn(e,t)},or.prototype.applyProjection=function(t){return console.warn(\"THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.\"),this.applyMatrix4(t)},or.prototype.fromAttribute=function(t,e,n){return console.warn(\"THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().\"),this.fromBufferAttribute(t,e,n)},or.prototype.distanceToManhattan=function(t){return console.warn(\"THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().\"),this.manhattanDistanceTo(t)},or.prototype.lengthManhattan=function(){return console.warn(\"THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().\"),this.manhattanLength()},nr.prototype.fromAttribute=function(t,e,n){return console.warn(\"THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().\"),this.fromBufferAttribute(t,e,n)},nr.prototype.lengthManhattan=function(){return console.warn(\"THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().\"),this.manhattanLength()},us.prototype.getChildByName=function(t){return console.warn(\"THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().\"),this.getObjectByName(t)},us.prototype.renderDepth=function(){console.warn(\"THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.\")},us.prototype.translate=function(t,e){return console.warn(\"THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.\"),this.translateOnAxis(e,t)},us.prototype.getWorldRotation=function(){console.error(\"THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.\")},us.prototype.applyMatrix=function(t){return console.warn(\"THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().\"),this.applyMatrix4(t)},Object.defineProperties(us.prototype,{eulerOrder:{get:function(){return console.warn(\"THREE.Object3D: .eulerOrder is now .rotation.order.\"),this.rotation.order},set:function(t){console.warn(\"THREE.Object3D: .eulerOrder is now .rotation.order.\"),this.rotation.order=t}},useQuaternion:{get:function(){console.warn(\"THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.\")},set:function(){console.warn(\"THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.\")}}}),xi.prototype.setDrawMode=function(){console.error(\"THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.\")},Object.defineProperties(xi.prototype,{drawMode:{get:function(){return console.error(\"THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.\"),qe},set:function(){console.error(\"THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.\")}}}),tu.prototype.initBones=function(){console.error(\"THREE.SkinnedMesh: initBones() has been removed.\")},ki.prototype.setLens=function(t,e){console.warn(\"THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup.\"),void 0!==e&&(this.filmGauge=e),this.setFocalLength(t)},Object.defineProperties(Bh.prototype,{onlyShadow:{set:function(){console.warn(\"THREE.Light: .onlyShadow has been removed.\")}},shadowCameraFov:{set:function(t){console.warn(\"THREE.Light: .shadowCameraFov is now .shadow.camera.fov.\"),this.shadow.camera.fov=t}},shadowCameraLeft:{set:function(t){console.warn(\"THREE.Light: .shadowCameraLeft is now .shadow.camera.left.\"),this.shadow.camera.left=t}},shadowCameraRight:{set:function(t){console.warn(\"THREE.Light: .shadowCameraRight is now .shadow.camera.right.\"),this.shadow.camera.right=t}},shadowCameraTop:{set:function(t){console.warn(\"THREE.Light: .shadowCameraTop is now .shadow.camera.top.\"),this.shadow.camera.top=t}},shadowCameraBottom:{set:function(t){console.warn(\"THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.\"),this.shadow.camera.bottom=t}},shadowCameraNear:{set:function(t){console.warn(\"THREE.Light: .shadowCameraNear is now .shadow.camera.near.\"),this.shadow.camera.near=t}},shadowCameraFar:{set:function(t){console.warn(\"THREE.Light: .shadowCameraFar is now .shadow.camera.far.\"),this.shadow.camera.far=t}},shadowCameraVisible:{set:function(){console.warn(\"THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.\")}},shadowBias:{set:function(t){console.warn(\"THREE.Light: .shadowBias is now .shadow.bias.\"),this.shadow.bias=t}},shadowDarkness:{set:function(){console.warn(\"THREE.Light: .shadowDarkness has been removed.\")}},shadowMapWidth:{set:function(t){console.warn(\"THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.\"),this.shadow.mapSize.width=t}},shadowMapHeight:{set:function(t){console.warn(\"THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.\"),this.shadow.mapSize.height=t}}}),Object.defineProperties(Ls.prototype,{length:{get:function(){return console.warn(\"THREE.BufferAttribute: .length has been deprecated. Use .count instead.\"),this.array.length}},dynamic:{get:function(){return console.warn(\"THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.\"),this.usage===kn},set:function(){console.warn(\"THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.\"),this.setUsage(kn)}}}),Ls.prototype.setDynamic=function(t){return console.warn(\"THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.\"),this.setUsage(!0===t?kn:Mn),this},Ls.prototype.copyIndicesArray=function(){console.error(\"THREE.BufferAttribute: .copyIndicesArray() has been removed.\")},Ls.prototype.setArray=function(){console.error(\"THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers\")},ti.prototype.addIndex=function(t){console.warn(\"THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().\"),this.setIndex(t)},ti.prototype.addAttribute=function(t,e){return console.warn(\"THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().\"),e&&e.isBufferAttribute||e&&e.isInterleavedBufferAttribute?\"index\"===t?(console.warn(\"THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.\"),this.setIndex(e),this):this.setAttribute(t,e):(console.warn(\"THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).\"),this.setAttribute(t,new Ls(arguments[1],arguments[2])))},ti.prototype.addDrawCall=function(t,e,n){void 0!==n&&console.warn(\"THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.\"),console.warn(\"THREE.BufferGeometry: .addDrawCall() is now .addGroup().\"),this.addGroup(t,e)},ti.prototype.clearDrawCalls=function(){console.warn(\"THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().\"),this.clearGroups()},ti.prototype.computeOffsets=function(){console.warn(\"THREE.BufferGeometry: .computeOffsets() has been removed.\")},ti.prototype.removeAttribute=function(t){return console.warn(\"THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().\"),this.deleteAttribute(t)},ti.prototype.applyMatrix=function(t){return console.warn(\"THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().\"),this.applyMatrix4(t)},Object.defineProperties(ti.prototype,{drawcalls:{get:function(){return console.error(\"THREE.BufferGeometry: .drawcalls has been renamed to .groups.\"),this.groups}},offsets:{get:function(){return console.warn(\"THREE.BufferGeometry: .offsets has been renamed to .groups.\"),this.groups}}}),El.prototype.setDynamic=function(t){return console.warn(\"THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.\"),this.setUsage(!0===t?kn:Mn),this},El.prototype.setArray=function(){console.error(\"THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers\")},Oc.prototype.getArrays=function(){console.error(\"THREE.ExtrudeGeometry: .getArrays() has been removed.\")},Oc.prototype.addShapeList=function(){console.error(\"THREE.ExtrudeGeometry: .addShapeList() has been removed.\")},Oc.prototype.addShape=function(){console.error(\"THREE.ExtrudeGeometry: .addShape() has been removed.\")},kl.prototype.dispose=function(){console.error(\"THREE.Scene: .dispose() has been removed.\")},tp.prototype.onUpdate=function(){return console.warn(\"THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.\"),this},Object.defineProperties(Ss.prototype,{wrapAround:{get:function(){console.warn(\"THREE.Material: .wrapAround has been removed.\")},set:function(){console.warn(\"THREE.Material: .wrapAround has been removed.\")}},overdraw:{get:function(){console.warn(\"THREE.Material: .overdraw has been removed.\")},set:function(){console.warn(\"THREE.Material: .overdraw has been removed.\")}},wrapRGB:{get:function(){return console.warn(\"THREE.Material: .wrapRGB has been removed.\"),new Cs}},shading:{get:function(){console.error(\"THREE.\"+this.type+\": .shading has been removed. Use the boolean .flatShading instead.\")},set:function(t){console.warn(\"THREE.\"+this.type+\": .shading has been removed. Use the boolean .flatShading instead.\"),this.flatShading=t===y}},stencilMask:{get:function(){return console.warn(\"THREE.\"+this.type+\": .stencilMask has been removed. Use .stencilFuncMask instead.\"),this.stencilFuncMask},set:function(t){console.warn(\"THREE.\"+this.type+\": .stencilMask has been removed. Use .stencilFuncMask instead.\"),this.stencilFuncMask=t}},vertexTangents:{get:function(){console.warn(\"THREE.\"+this.type+\": .vertexTangents has been removed.\")},set:function(){console.warn(\"THREE.\"+this.type+\": .vertexTangents has been removed.\")}}}),Object.defineProperties(_i.prototype,{derivatives:{get:function(){return console.warn(\"THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.\"),this.extensions.derivatives},set:function(t){console.warn(\"THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.\"),this.extensions.derivatives=t}}}),Sl.prototype.clearTarget=function(t,e,n,r){console.warn(\"THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.\"),this.setRenderTarget(t),this.clear(e,n,r)},Sl.prototype.animate=function(t){console.warn(\"THREE.WebGLRenderer: .animate() is now .setAnimationLoop().\"),this.setAnimationLoop(t)},Sl.prototype.getCurrentRenderTarget=function(){return console.warn(\"THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().\"),this.getRenderTarget()},Sl.prototype.getMaxAnisotropy=function(){return console.warn(\"THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().\"),this.capabilities.getMaxAnisotropy()},Sl.prototype.getPrecision=function(){return console.warn(\"THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.\"),this.capabilities.precision},Sl.prototype.resetGLState=function(){return console.warn(\"THREE.WebGLRenderer: .resetGLState() is now .state.reset().\"),this.state.reset()},Sl.prototype.supportsFloatTextures=function(){return console.warn(\"THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' ).\"),this.extensions.get(\"OES_texture_float\")},Sl.prototype.supportsHalfFloatTextures=function(){return console.warn(\"THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' ).\"),this.extensions.get(\"OES_texture_half_float\")},Sl.prototype.supportsStandardDerivatives=function(){return console.warn(\"THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' ).\"),this.extensions.get(\"OES_standard_derivatives\")},Sl.prototype.supportsCompressedTextureS3TC=function(){return console.warn(\"THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' ).\"),this.extensions.get(\"WEBGL_compressed_texture_s3tc\")},Sl.prototype.supportsCompressedTexturePVRTC=function(){return console.warn(\"THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' ).\"),this.extensions.get(\"WEBGL_compressed_texture_pvrtc\")},Sl.prototype.supportsBlendMinMax=function(){return console.warn(\"THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' ).\"),this.extensions.get(\"EXT_blend_minmax\")},Sl.prototype.supportsVertexTextures=function(){return console.warn(\"THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.\"),this.capabilities.vertexTextures},Sl.prototype.supportsInstancedArrays=function(){return console.warn(\"THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' ).\"),this.extensions.get(\"ANGLE_instanced_arrays\")},Sl.prototype.enableScissorTest=function(t){console.warn(\"THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().\"),this.setScissorTest(t)},Sl.prototype.initMaterial=function(){console.warn(\"THREE.WebGLRenderer: .initMaterial() has been removed.\")},Sl.prototype.addPrePlugin=function(){console.warn(\"THREE.WebGLRenderer: .addPrePlugin() has been removed.\")},Sl.prototype.addPostPlugin=function(){console.warn(\"THREE.WebGLRenderer: .addPostPlugin() has been removed.\")},Sl.prototype.updateShadowMap=function(){console.warn(\"THREE.WebGLRenderer: .updateShadowMap() has been removed.\")},Sl.prototype.setFaceCulling=function(){console.warn(\"THREE.WebGLRenderer: .setFaceCulling() has been removed.\")},Sl.prototype.allocTextureUnit=function(){console.warn(\"THREE.WebGLRenderer: .allocTextureUnit() has been removed.\")},Sl.prototype.setTexture=function(){console.warn(\"THREE.WebGLRenderer: .setTexture() has been removed.\")},Sl.prototype.setTexture2D=function(){console.warn(\"THREE.WebGLRenderer: .setTexture2D() has been removed.\")},Sl.prototype.setTextureCube=function(){console.warn(\"THREE.WebGLRenderer: .setTextureCube() has been removed.\")},Sl.prototype.getActiveMipMapLevel=function(){return console.warn(\"THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().\"),this.getActiveMipmapLevel()},Object.defineProperties(Sl.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(t){console.warn(\"THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.\"),this.shadowMap.enabled=t}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(t){console.warn(\"THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.\"),this.shadowMap.type=t}},shadowMapCullFace:{get:function(){console.warn(\"THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.\")},set:function(){console.warn(\"THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.\")}},context:{get:function(){return console.warn(\"THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.\"),this.getContext()}},vr:{get:function(){return console.warn(\"THREE.WebGLRenderer: .vr has been renamed to .xr\"),this.xr}},gammaInput:{get:function(){return console.warn(\"THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.\"),!1},set:function(){console.warn(\"THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.\")}},gammaOutput:{get:function(){return console.warn(\"THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.\"),!1},set:function(t){console.warn(\"THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.\"),this.outputEncoding=!0===t?Ze:Ye}},toneMappingWhitePoint:{get:function(){return console.warn(\"THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.\"),1},set:function(){console.warn(\"THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.\")}}}),Object.defineProperties(dl.prototype,{cullFace:{get:function(){console.warn(\"THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.\")},set:function(){console.warn(\"THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.\")}},renderReverseSided:{get:function(){console.warn(\"THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.\")},set:function(){console.warn(\"THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.\")}},renderSingleSided:{get:function(){console.warn(\"THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.\")},set:function(){console.warn(\"THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.\")}}}),Object.defineProperties(rr.prototype,{wrapS:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.\"),this.texture.wrapS},set:function(t){console.warn(\"THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.\"),this.texture.wrapS=t}},wrapT:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.\"),this.texture.wrapT},set:function(t){console.warn(\"THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.\"),this.texture.wrapT=t}},magFilter:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.\"),this.texture.magFilter},set:function(t){console.warn(\"THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.\"),this.texture.magFilter=t}},minFilter:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.\"),this.texture.minFilter},set:function(t){console.warn(\"THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.\"),this.texture.minFilter=t}},anisotropy:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.\"),this.texture.anisotropy},set:function(t){console.warn(\"THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.\"),this.texture.anisotropy=t}},offset:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .offset is now .texture.offset.\"),this.texture.offset},set:function(t){console.warn(\"THREE.WebGLRenderTarget: .offset is now .texture.offset.\"),this.texture.offset=t}},repeat:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .repeat is now .texture.repeat.\"),this.texture.repeat},set:function(t){console.warn(\"THREE.WebGLRenderTarget: .repeat is now .texture.repeat.\"),this.texture.repeat=t}},format:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .format is now .texture.format.\"),this.texture.format},set:function(t){console.warn(\"THREE.WebGLRenderTarget: .format is now .texture.format.\"),this.texture.format=t}},type:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .type is now .texture.type.\"),this.texture.type},set:function(t){console.warn(\"THREE.WebGLRenderTarget: .type is now .texture.type.\"),this.texture.type=t}},generateMipmaps:{get:function(){return console.warn(\"THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.\"),this.texture.generateMipmaps},set:function(t){console.warn(\"THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.\"),this.texture.generateMipmaps=t}}}),Ld.prototype.load=function(t){console.warn(\"THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.\");const e=this;return(new vd).load(t,(function(t){e.setBuffer(t)})),this},zd.prototype.getData=function(){return console.warn(\"THREE.AudioAnalyser: .getData() is now .getFrequencyData().\"),this.getFrequencyData()},Ii.prototype.updateCubeMap=function(t,e){return console.warn(\"THREE.CubeCamera: .updateCubeMap() is now .update().\"),this.update(t,e)},Ii.prototype.clear=function(t,e,n,r){return console.warn(\"THREE.CubeCamera: .clear() is now .renderTarget.clear().\"),this.renderTarget.clear(t,e,n,r)},Jn.crossOrigin=void 0,Jn.loadTexture=function(t,e,n,r){console.warn(\"THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.\");const s=new $h;s.setCrossOrigin(this.crossOrigin);const i=s.load(t,n,void 0,r);return e&&(i.mapping=e),i},Jn.loadTextureCube=function(t,e,n,r){console.warn(\"THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.\");const s=new Dh;s.setCrossOrigin(this.crossOrigin);const i=s.load(t,n,void 0,r);return e&&(i.mapping=e),i},Jn.loadCompressedTexture=function(){console.error(\"THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.\")},Jn.loadCompressedTextureCube=function(){console.error(\"THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.\")};const If={createMultiMaterialObject:function(){console.error(\"THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js\")},detach:function(){console.error(\"THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js\")},attach:function(){console.error(\"THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js\")}};function Cf(){console.error(\"THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js\")}\"undefined\"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent(\"register\",{detail:{revision:r}})),\"undefined\"!=typeof window&&(window.__THREE__?console.warn(\"WARNING: Multiple instances of Three.js being imported.\"):window.__THREE__=r)},21564:(t,e,n)=>{\"use strict\";n.r(e),n.d(e,{CSS3DObject:()=>o,CSS3DSprite:()=>l,CSS3DRenderer:()=>h});var r=n(2212);const s=new r.Vector3,i=new r.Quaternion,a=new r.Vector3;class o extends r.Object3D{constructor(t){super(),this.element=t||document.createElement(\"div\"),this.element.style.position=\"absolute\",this.element.style.pointerEvents=\"auto\",this.element.style.userSelect=\"none\",this.element.setAttribute(\"draggable\",!1),this.addEventListener(\"removed\",(function(){this.traverse((function(t){t.element instanceof Element&&null!==t.element.parentNode&&t.element.parentNode.removeChild(t.element)}))}))}copy(t,e){return super.copy(t,e),this.element=t.element.cloneNode(!0),this}}o.prototype.isCSS3DObject=!0;class l extends o{constructor(t){super(t),this.rotation2D=0}copy(t,e){return super.copy(t,e),this.rotation2D=t.rotation2D,this}}l.prototype.isCSS3DSprite=!0;const u=new r.Matrix4,c=new r.Matrix4;class h{constructor(){const t=this;let e,n,r,o;const l={camera:{fov:0,style:\"\"},objects:new WeakMap},h=document.createElement(\"div\");h.style.overflow=\"hidden\",this.domElement=h;const d=document.createElement(\"div\");function p(t){return Math.abs(t)<1e-10?0:t}function f(t){const e=t.elements;return\"matrix3d(\"+p(e[0])+\",\"+p(-e[1])+\",\"+p(e[2])+\",\"+p(e[3])+\",\"+p(e[4])+\",\"+p(-e[5])+\",\"+p(e[6])+\",\"+p(e[7])+\",\"+p(e[8])+\",\"+p(-e[9])+\",\"+p(e[10])+\",\"+p(e[11])+\",\"+p(e[12])+\",\"+p(-e[13])+\",\"+p(e[14])+\",\"+p(e[15])+\")\"}function m(t){const e=t.elements;return\"translate(-50%,-50%)matrix3d(\"+p(e[0])+\",\"+p(e[1])+\",\"+p(e[2])+\",\"+p(e[3])+\",\"+p(-e[4])+\",\"+p(-e[5])+\",\"+p(-e[6])+\",\"+p(-e[7])+\",\"+p(e[8])+\",\"+p(e[9])+\",\"+p(e[10])+\",\"+p(e[11])+\",\"+p(e[12])+\",\"+p(e[13])+\",\"+p(e[14])+\",\"+p(e[15])+\")\"}function g(e,n,r,o){if(e.isCSS3DObject){let o;e.onBeforeRender(t,n,r),e.isCSS3DSprite?(u.copy(r.matrixWorldInverse),u.transpose(),0!==e.rotation2D&&u.multiply(c.makeRotationZ(e.rotation2D)),e.matrixWorld.decompose(s,i,a),u.setPosition(s),u.scale(a),u.elements[3]=0,u.elements[7]=0,u.elements[11]=0,u.elements[15]=1,o=m(u)):o=m(e.matrixWorld);const h=e.element,p=l.objects.get(e);if(void 0===p||p.style!==o){h.style.transform=o;const t={style:o};l.objects.set(e,t)}h.style.display=e.visible?\"\":\"none\",h.parentNode!==d&&d.appendChild(h),e.onAfterRender(t,n,r)}for(let t=0,s=e.children.length;t<s;t++)g(e.children[t],n,r,o)}d.style.transformStyle=\"preserve-3d\",d.style.pointerEvents=\"none\",h.appendChild(d),this.getSize=function(){return{width:e,height:n}},this.render=function(t,e){const n=e.projectionMatrix.elements[5]*o;let s,i;l.camera.fov!==n&&(h.style.perspective=e.isPerspectiveCamera?n+\"px\":\"\",l.camera.fov=n),!0===t.autoUpdate&&t.updateMatrixWorld(),null===e.parent&&e.updateMatrixWorld(),e.isOrthographicCamera&&(s=-(e.right+e.left)/2,i=(e.top+e.bottom)/2);const a=e.isOrthographicCamera?\"scale(\"+n+\")translate(\"+p(s)+\"px,\"+p(i)+\"px)\"+f(e.matrixWorldInverse):\"translateZ(\"+n+\"px)\"+f(e.matrixWorldInverse),u=a+\"translate(\"+r+\"px,\"+o+\"px)\";l.camera.style!==u&&(d.style.transform=u,l.camera.style=u),g(t,t,e,a)},this.setSize=function(t,s){e=t,n=s,r=e/2,o=n/2,h.style.width=t+\"px\",h.style.height=s+\"px\",d.style.width=t+\"px\",d.style.height=s+\"px\"}}}},80383:(t,e,n)=>{t.exports=function(){return n(69855)('(()=>{var t={508:(t,e,r)=>{const{resize:a}=r(140);t.exports={buildImageList:t=>{const e=[];let r=100/Math.min(t.width,t.height);for(;;)if(e.push(r),r*=Math.pow(2,1/3),r>=.95){r=1;break}e.push(r),e.reverse();const i=[];for(let r=0;r<e.length;r++)t.width,e[r],t.height,e[r],i.push(Object.assign(a({image:t,ratio:e[r]}),{scale:e[r]}));return i},buildTrackingImageList:t=>{const e=Math.min(t.width,t.height),r=[],i=[];r.push(256/e),r.push(128/e);for(let e=0;e<r.length;e++)i.push(Object.assign(a({image:t,ratio:r[e]}),{scale:r[e]}));return i}}},589:(t,e,r)=>{const{Cumsum:a}=r(535),i=({image:t,cx:e,cy:r,sdThresh:a,imageDataCumsum:i,imageDataSqrCumsum:s})=>{if(e-6<0||e+6>=t.width)return null;if(r-6<0||r+6>=t.height)return null;let h=i.query(e-6,r-6,e+6,r+6);h/=169;let o=s.query(e-6,r-6,e+6,r+6);return o-=2*h*i.query(e-6,r-6,e+6,r+6),o+=169*h*h,o/169<a*a?null:(o=Math.sqrt(o),o)},s=t=>{const{image:e,cx:r,cy:a,vlen:i,tx:s,ty:h,imageDataCumsum:o,imageDataSqrCumsum:l}=t,{data:u,width:n,height:m}=e;if(r-6<0||r+6>=n)return null;if(a-6<0||a+6>=m)return null;let c=o.query(r-6,a-6,r+6,a+6),f=l.query(r-6,a-6,r+6,a+6),g=0,d=(a-6)*n+(r-6),p=(h-6)*n+(s-6),w=n-13;for(let t=0;t<13;t++){for(let t=0;t<13;t++)g+=u[d]*u[p],d+=1,p+=1;d+=w,p+=w}let M=o.query(s-6,h-6,s+6,h+6);M/=169,g-=M*c;let y=f-c*c/169;return 0==y?null:(y=Math.sqrt(y),1*g/(i*y))};t.exports={extract:t=>{const{data:e,width:r,height:h,scale:o}=t,l=[r*h];for(let t=0;t<l.length;t++)l[t]=!1;const u=new Float32Array(e.length);for(let t=0;t<r;t++)u[t]=-1,u[r*(h-1)+t]=-1;for(let t=0;t<h;t++)u[t*r]=-1,u[t*r+r-1]=-1;for(let t=1;t<r-1;t++)for(let a=1;a<h-1;a++){let i=t+r*a,s=0,h=0;for(let t=-1;t<=1;t++)s+=e[i+r*t+1]-e[i+r*t-1],h+=e[i+r+t]-e[i-r+t];s/=768,h/=768,u[i]=Math.sqrt((s*s+h*h)/2)}const n=new Uint32Array(1e3);for(let t=0;t<1e3;t++)n[t]=0;const m=[-1,1,-r,r];let c=0;for(let t=1;t<r-1;t++)for(let e=1;e<h-1;e++){let a=t+r*e,i=!0;for(let t=0;t<m.length;t++)if(u[a]<=u[a+m[t]]){i=!1;break}if(i){let t=Math.floor(1e3*u[a]);t>999&&(t=999),t<0&&(t=0),n[t]+=1,c+=1,l[a]=!0}}const f=.02*r*h;let g=999,d=0;for(;g>=0&&(d+=n[g],!(d>f));)g--;for(let t=0;t<l.length;t++)l[t]&&1e3*u[t]<g&&(l[t]=!1);const p=[];for(let t=0;t<e.length;t++)p[t]=e[t]*e[t];const w=new a(e,r,h),M=new a(p,r,h),y=new Float32Array(e.length);for(let e=0;e<r;e++)for(let a=0;a<h;a++){const h=a*r+e;if(!l[h]){y[h]=1;continue}const o=i({image:t,cx:e,cy:a,sdThresh:5,imageDataCumsum:w,imageDataSqrCumsum:M});if(null===o){y[h]=1;continue}let u=-1;for(let r=-10;r<=10;r++){for(let i=-10;i<=10;i++){if(i*i+r*r<=4)continue;const h=s({image:t,cx:e+i,cy:a+r,vlen:o,tx:e,ty:a,imageDataCumsum:w,imageDataSqrCumsum:M});if(null!==h&&h>u&&(u=h,u>.95))break}if(u>.95)break}y[h]=u}return(t=>{let{image:e,featureMap:r,templateSize:a,searchSize:h,occSize:o,maxSimThresh:l,minSimThresh:u,sdThresh:n,imageDataCumsum:m,imageDataSqrCumsum:c}=t;const{data:f,width:g,height:d,scale:p}=e;o=Math.floor(Math.min(e.width,e.height)/10);const w=3*(2*a+1),M=Math.floor(g/w),y=Math.floor(d/w);let x=Math.floor(g/o)*Math.floor(d/o)+M*y;const q=[],C=new Float32Array(f.length);for(let t=0;t<C.length;t++)C[t]=r[t];let S=0;for(;S<x;){let t=l,r=-1,f=-1;for(let e=0;e<d;e++)for(let a=0;a<g;a++)C[e*g+a]<t&&(t=C[e*g+a],r=a,f=e);if(-1===r)break;const p=i({image:e,cx:r,cy:f,sdThresh:0,imageDataCumsum:m,imageDataSqrCumsum:c});if(null===p){C[f*g+r]=1;continue}if(p/(2*a+1)<n){C[f*g+r]=1;continue}let w=1,M=-1;for(let a=-h;a<=h;a++){for(let i=-h;i<=h;i++){if(i*i+a*a>h*h)continue;if(0===i&&0===a)continue;const o=s({image:e,vlen:p,cx:r+i,cy:f+a,tx:r,ty:f,imageDataCumsum:m,imageDataSqrCumsum:c});if(null!==o){if(o<w&&(w=o,w<u&&w<t))break;if(o>M&&(M=o,M>.99))break}}if(w<u&&w<t||M>.99)break}if(w<u&&w<t||M>.99)C[f*g+r]=1;else{q.push({x:r,y:f}),S+=1;for(let t=-o;t<=o;t++)for(let e=-o;e<=o;e++)f+t<0||f+t>=d||r+e<0||r+e>=g||(C[(f+t)*g+(r+e)]=1)}}return q})({image:t,featureMap:y,templateSize:6,searchSize:2,occSize:16,maxSimThresh:.9,minSimThresh:.2,sdThresh:8,imageDataCumsum:w,imageDataSqrCumsum:M})}}},535:t=>{t.exports={Cumsum:class{constructor(t,e,r){this.cumsum=[];for(let t=0;t<r;t++){this.cumsum.push([]);for(let r=0;r<e;r++)this.cumsum[t].push(0)}this.cumsum[0][0]=t[0];for(let r=1;r<e;r++)this.cumsum[0][r]=this.cumsum[0][r-1]+t[r];for(let a=1;a<r;a++)this.cumsum[a][0]=this.cumsum[a-1][0]+t[a*e];for(let a=1;a<r;a++)for(let r=1;r<e;r++)this.cumsum[a][r]=t[a*e+r]+this.cumsum[a-1][r]+this.cumsum[a][r-1]-this.cumsum[a-1][r-1]}query(t,e,r,a){let i=this.cumsum[a][r];return e>0&&(i-=this.cumsum[e-1][r]),t>0&&(i-=this.cumsum[a][t-1]),t>0&&e>0&&(i+=this.cumsum[e-1][t-1]),i}}}},140:t=>{t.exports={downsampleBilinear:({image:t})=>{const{data:e,width:r,height:a}=t,i=Math.floor(r/2),s=Math.floor(a/2),h=new Float32Array(i*s),o=[0,1,r,r+1];for(let t=0;t<s;t++)for(let a=0;a<i;a++){let s=2*t*r+2*a,l=0;for(let t=0;t<o.length;t++)l+=e[s+o[t]];l*=.25,h[t*i+a]=l}return{data:h,width:i,height:s}},upsampleBilinear:({image:t,padOneWidth:e,padOneHeight:r})=>{const{width:a,height:i,data:s}=t,h=2*t.width+(e?1:0),o=2*t.height+(r?1:0),l=new Float32Array(h*o);for(let t=0;t<h;t++){const e=.5*t-.25;let r=Math.floor(e),u=Math.ceil(e);r<0&&(r=0),u>=a&&(u=a-1);for(let n=0;n<o;n++){const o=.5*n-.25;let m=Math.floor(o),c=Math.ceil(o);m<0&&(m=0),c>=i&&(c=i-1);const f=(u-e)*(c-o)*s[m*a+r]+(u-e)*(o-m)*s[c*a+r]+(e-r)*(c-o)*s[m*a+u]+(e-r)*(o-m)*s[c*a+u];l[n*h+t]=f}}return{data:l,width:h,height:o}},resize:({image:t,ratio:e})=>{const r=Math.round(t.width*e),a=Math.round(t.height*e),i=new Uint8Array(r*a);for(let s=0;s<r;s++){let h=Math.round(1*s/e),o=Math.round(1*(s+1)/e)-1;o>=t.width&&(o=t.width-1);for(let l=0;l<a;l++){let a=Math.round(1*l/e),u=Math.round(1*(l+1)/e)-1;u>=t.height&&(u=t.height-1);let n=0,m=0;for(let e=h;e<=o;e++)for(let r=a;r<=u;r++)n+=1*t.data[r*t.width+e],m+=1;i[l*r+s]=Math.floor(n/m)}}return{data:i,width:r,height:a}}}}},e={};function r(a){if(e[a])return e[a].exports;var i=e[a]={exports:{}};return t[a](i,i.exports,r),i.exports}(()=>{const{extract:t}=r(589),{buildTrackingImageList:e}=r(508);onmessage=t=>{const{data:r}=t;if(\"compile\"===r.type){const{targetImages:t}=r,i=50/t.length;let s=0;const h=[];for(let r=0;r<t.length;r++){const o=t[r],l=e(o),u=i/l.length,n=a(l,(t=>{s+=u,postMessage({type:\"progress\",percent:s})}));h.push(n)}postMessage({type:\"compileDone\",list:h})}};const a=(e,r)=>{const a=[];for(let i=0;i<e.length;i++){const s=e[i],h=t(s),o={data:s.data,scale:s.scale,width:s.width,height:s.height,points:h};a.push(o),r(i)}return a}})()})();',n.p+\"compiler.worker.prod.js\")}},71077:(t,e,n)=>{t.exports=function(){return n(69855)('(()=>{var t={331:(t,e,r)=>{\"use strict\";r.r(e),r.d(e,{AbstractMatrix:()=>v,CHO:()=>tt,CholeskyDecomposition:()=>tt,EVD:()=>K,EigenvalueDecomposition:()=>K,LU:()=>H,LuDecomposition:()=>H,Matrix:()=>k,MatrixColumnSelectionView:()=>T,MatrixColumnView:()=>I,MatrixFlipColumnView:()=>A,MatrixFlipRowView:()=>q,MatrixRowSelectionView:()=>P,MatrixRowView:()=>C,MatrixSelectionView:()=>V,MatrixSubView:()=>N,MatrixTransposeView:()=>j,NIPALS:()=>et,Nipals:()=>et,QR:()=>$,QrDecomposition:()=>$,SVD:()=>L,SingularValueDecomposition:()=>L,WrapperMatrix1D:()=>z,WrapperMatrix2D:()=>F,correlation:()=>J,covariance:()=>B,default:()=>k,determinant:()=>X,inverse:()=>O,linearDependencies:()=>Q,pseudoInverse:()=>W,solve:()=>U,wrap:()=>D});const s=Object.prototype.toString;function o(t){return s.call(t).endsWith(\"Array]\")}const n=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!o(t))throw new TypeError(\"input must be an array\");if(0===t.length)throw new TypeError(\"input must not be empty\");var r=e.fromIndex,s=void 0===r?0:r,n=e.toIndex,i=void 0===n?t.length:n;if(s<0||s>=t.length||!Number.isInteger(s))throw new Error(\"fromIndex must be a positive integer smaller than length\");if(i<=s||i>t.length||!Number.isInteger(i))throw new Error(\"toIndex must be an integer greater than fromIndex and at most equal to length\");for(var h=t[s],l=s+1;l<i;l++)t[l]>h&&(h=t[l]);return h},i=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!o(t))throw new TypeError(\"input must be an array\");if(0===t.length)throw new TypeError(\"input must not be empty\");var r=e.fromIndex,s=void 0===r?0:r,n=e.toIndex,i=void 0===n?t.length:n;if(s<0||s>=t.length||!Number.isInteger(s))throw new Error(\"fromIndex must be a positive integer smaller than length\");if(i<=s||i>t.length||!Number.isInteger(i))throw new Error(\"toIndex must be an integer greater than fromIndex and at most equal to length\");for(var h=t[s],l=s+1;l<i;l++)t[l]<h&&(h=t[l]);return h},h=function(t){var e,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!o(t))throw new TypeError(\"input must be an array\");if(0===t.length)throw new TypeError(\"input must not be empty\");if(void 0!==r.output){if(!o(r.output))throw new TypeError(\"output option must be an array if specified\");e=r.output}else e=new Array(t.length);var s=i(t),h=n(t);if(s===h)throw new RangeError(\"minimum and maximum input values are equal. Cannot rescale a constant array\");var l=r.min,u=void 0===l?r.autoMinMax?s:0:l,a=r.max,c=void 0===a?r.autoMinMax?h:1:a;if(u>=c)throw new RangeError(\"min option must be smaller than max option\");for(var f=(c-u)/(h-s),m=0;m<t.length;m++)e[m]=(t[m]-s)*f+u;return e},l=\" \".repeat(2),u=\" \".repeat(4);function a(t,e={}){const{maxRows:r=15,maxColumns:s=10,maxNumSize:o=8}=e;return`${t.constructor.name} {\\\\n${l}[\\\\n${u}${function(t,e,r,s){const{rows:o,columns:n}=t,i=Math.min(o,e),h=Math.min(n,r),l=[];for(let e=0;e<i;e++){let r=[];for(let o=0;o<h;o++)r.push(c(t.get(e,o),s));l.push(`${r.join(\" \")}`)}return h!==n&&(l[l.length-1]+=` ... ${n-r} more columns`),i!==o&&l.push(`... ${o-e} more rows`),l.join(`\\\\n${u}`)}(t,r,s,o)}\\\\n${l}]\\\\n${l}rows: ${t.rows}\\\\n${l}columns: ${t.columns}\\\\n}`}function c(t,e){const r=String(t);if(r.length<=e)return r.padEnd(e,\" \");const s=t.toPrecision(e-2);if(s.length<=e)return s;const o=t.toExponential(e-2),n=o.indexOf(\"e\"),i=o.slice(n);return o.slice(0,e-i.length)+i}function f(t,e,r){let s=r?t.rows:t.rows-1;if(e<0||e>s)throw new RangeError(\"Row index out of range\")}function m(t,e,r){let s=r?t.columns:t.columns-1;if(e<0||e>s)throw new RangeError(\"Column index out of range\")}function g(t,e){if(e.to1DArray&&(e=e.to1DArray()),e.length!==t.columns)throw new RangeError(\"vector size must be the same as the number of columns\");return e}function w(t,e){if(e.to1DArray&&(e=e.to1DArray()),e.length!==t.rows)throw new RangeError(\"vector size must be the same as the number of rows\");return e}function p(t,e,r){return{row:d(t,e),column:y(t,r)}}function d(t,e){if(\"object\"!=typeof e)throw new TypeError(\"unexpected type for row indices\");if(e.some((e=>e<0||e>=t.rows)))throw new RangeError(\"row indices are out of range\");return Array.isArray(e)||(e=Array.from(e)),e}function y(t,e){if(\"object\"!=typeof e)throw new TypeError(\"unexpected type for column indices\");if(e.some((e=>e<0||e>=t.columns)))throw new RangeError(\"column indices are out of range\");return Array.isArray(e)||(e=Array.from(e)),e}function M(t,e,r,s,o){if(5!==arguments.length)throw new RangeError(\"expected 4 arguments\");if(x(\"startRow\",e),x(\"endRow\",r),x(\"startColumn\",s),x(\"endColumn\",o),e>r||s>o||e<0||e>=t.rows||r<0||r>=t.rows||s<0||s>=t.columns||o<0||o>=t.columns)throw new RangeError(\"Submatrix indices are out of range\")}function b(t,e=0){let r=[];for(let s=0;s<t;s++)r.push(e);return r}function x(t,e){if(\"number\"!=typeof e)throw new TypeError(`${t} must be a number`)}function E(t){if(t.isEmpty())throw new Error(\"Empty matrix has no elements to index\")}class v{static from1DArray(t,e,r){if(t*e!==r.length)throw new RangeError(\"data length does not match given dimensions\");let s=new k(t,e);for(let o=0;o<t;o++)for(let t=0;t<e;t++)s.set(o,t,r[o*e+t]);return s}static rowVector(t){let e=new k(1,t.length);for(let r=0;r<t.length;r++)e.set(0,r,t[r]);return e}static columnVector(t){let e=new k(t.length,1);for(let r=0;r<t.length;r++)e.set(r,0,t[r]);return e}static zeros(t,e){return new k(t,e)}static ones(t,e){return new k(t,e).fill(1)}static rand(t,e,r={}){if(\"object\"!=typeof r)throw new TypeError(\"options must be an object\");const{random:s=Math.random}=r;let o=new k(t,e);for(let r=0;r<t;r++)for(let t=0;t<e;t++)o.set(r,t,s());return o}static randInt(t,e,r={}){if(\"object\"!=typeof r)throw new TypeError(\"options must be an object\");const{min:s=0,max:o=1e3,random:n=Math.random}=r;if(!Number.isInteger(s))throw new TypeError(\"min must be an integer\");if(!Number.isInteger(o))throw new TypeError(\"max must be an integer\");if(s>=o)throw new RangeError(\"min must be smaller than max\");let i=o-s,h=new k(t,e);for(let r=0;r<t;r++)for(let t=0;t<e;t++){let e=s+Math.round(n()*i);h.set(r,t,e)}return h}static eye(t,e,r){void 0===e&&(e=t),void 0===r&&(r=1);let s=Math.min(t,e),o=this.zeros(t,e);for(let t=0;t<s;t++)o.set(t,t,r);return o}static diag(t,e,r){let s=t.length;void 0===e&&(e=s),void 0===r&&(r=e);let o=Math.min(s,e,r),n=this.zeros(e,r);for(let e=0;e<o;e++)n.set(e,e,t[e]);return n}static min(t,e){t=this.checkMatrix(t),e=this.checkMatrix(e);let r=t.rows,s=t.columns,o=new k(r,s);for(let n=0;n<r;n++)for(let r=0;r<s;r++)o.set(n,r,Math.min(t.get(n,r),e.get(n,r)));return o}static max(t,e){t=this.checkMatrix(t),e=this.checkMatrix(e);let r=t.rows,s=t.columns,o=new this(r,s);for(let n=0;n<r;n++)for(let r=0;r<s;r++)o.set(n,r,Math.max(t.get(n,r),e.get(n,r)));return o}static checkMatrix(t){return v.isMatrix(t)?t:new k(t)}static isMatrix(t){return null!=t&&\"Matrix\"===t.klass}get size(){return this.rows*this.columns}apply(t){if(\"function\"!=typeof t)throw new TypeError(\"callback must be a function\");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)t.call(this,e,r);return this}to1DArray(){let t=[];for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)t.push(this.get(e,r));return t}to2DArray(){let t=[];for(let e=0;e<this.rows;e++){t.push([]);for(let r=0;r<this.columns;r++)t[e].push(this.get(e,r))}return t}toJSON(){return this.to2DArray()}isRowVector(){return 1===this.rows}isColumnVector(){return 1===this.columns}isVector(){return 1===this.rows||1===this.columns}isSquare(){return this.rows===this.columns}isEmpty(){return 0===this.rows||0===this.columns}isSymmetric(){if(this.isSquare()){for(let t=0;t<this.rows;t++)for(let e=0;e<=t;e++)if(this.get(t,e)!==this.get(e,t))return!1;return!0}return!1}isEchelonForm(){let t=0,e=0,r=-1,s=!0,o=!1;for(;t<this.rows&&s;){for(e=0,o=!1;e<this.columns&&!1===o;)0===this.get(t,e)?e++:1===this.get(t,e)&&e>r?(o=!0,r=e):(s=!1,o=!0);t++}return s}isReducedEchelonForm(){let t=0,e=0,r=-1,s=!0,o=!1;for(;t<this.rows&&s;){for(e=0,o=!1;e<this.columns&&!1===o;)0===this.get(t,e)?e++:1===this.get(t,e)&&e>r?(o=!0,r=e):(s=!1,o=!0);for(let r=e+1;r<this.rows;r++)0!==this.get(t,r)&&(s=!1);t++}return s}echelonForm(){let t=this.clone(),e=0,r=0;for(;e<t.rows&&r<t.columns;){let s=e;for(let o=e;o<t.rows;o++)t.get(o,r)>t.get(s,r)&&(s=o);if(0===t.get(s,r))r++;else{t.swapRows(e,s);let o=t.get(e,r);for(let s=r;s<t.columns;s++)t.set(e,s,t.get(e,s)/o);for(let s=e+1;s<t.rows;s++){let o=t.get(s,r)/t.get(e,r);t.set(s,r,0);for(let n=r+1;n<t.columns;n++)t.set(s,n,t.get(s,n)-t.get(e,n)*o)}e++,r++}}return t}reducedEchelonForm(){let t=this.echelonForm(),e=t.columns,r=t.rows,s=r-1;for(;s>=0;)if(0===t.maxRow(s))s--;else{let o=0,n=!1;for(;o<r&&!1===n;)1===t.get(s,o)?n=!0:o++;for(let r=0;r<s;r++){let n=t.get(r,o);for(let i=o;i<e;i++){let e=t.get(r,i)-n*t.get(s,i);t.set(r,i,e)}}s--}return t}set(){throw new Error(\"set method is unimplemented\")}get(){throw new Error(\"get method is unimplemented\")}repeat(t={}){if(\"object\"!=typeof t)throw new TypeError(\"options must be an object\");const{rows:e=1,columns:r=1}=t;if(!Number.isInteger(e)||e<=0)throw new TypeError(\"rows must be a positive integer\");if(!Number.isInteger(r)||r<=0)throw new TypeError(\"columns must be a positive integer\");let s=new k(this.rows*e,this.columns*r);for(let t=0;t<e;t++)for(let e=0;e<r;e++)s.setSubMatrix(this,this.rows*t,this.columns*e);return s}fill(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,t);return this}neg(){return this.mulS(-1)}getRow(t){f(this,t);let e=[];for(let r=0;r<this.columns;r++)e.push(this.get(t,r));return e}getRowVector(t){return k.rowVector(this.getRow(t))}setRow(t,e){f(this,t),e=g(this,e);for(let r=0;r<this.columns;r++)this.set(t,r,e[r]);return this}swapRows(t,e){f(this,t),f(this,e);for(let r=0;r<this.columns;r++){let s=this.get(t,r);this.set(t,r,this.get(e,r)),this.set(e,r,s)}return this}getColumn(t){m(this,t);let e=[];for(let r=0;r<this.rows;r++)e.push(this.get(r,t));return e}getColumnVector(t){return k.columnVector(this.getColumn(t))}setColumn(t,e){m(this,t),e=w(this,e);for(let r=0;r<this.rows;r++)this.set(r,t,e[r]);return this}swapColumns(t,e){m(this,t),m(this,e);for(let r=0;r<this.rows;r++){let s=this.get(r,t);this.set(r,t,this.get(r,e)),this.set(r,e,s)}return this}addRowVector(t){t=g(this,t);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)+t[r]);return this}subRowVector(t){t=g(this,t);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)-t[r]);return this}mulRowVector(t){t=g(this,t);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)*t[r]);return this}divRowVector(t){t=g(this,t);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)/t[r]);return this}addColumnVector(t){t=w(this,t);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)+t[e]);return this}subColumnVector(t){t=w(this,t);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)-t[e]);return this}mulColumnVector(t){t=w(this,t);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)*t[e]);return this}divColumnVector(t){t=w(this,t);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)/t[e]);return this}mulRow(t,e){f(this,t);for(let r=0;r<this.columns;r++)this.set(t,r,this.get(t,r)*e);return this}mulColumn(t,e){m(this,t);for(let r=0;r<this.rows;r++)this.set(r,t,this.get(r,t)*e);return this}max(){if(this.isEmpty())return NaN;let t=this.get(0,0);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.get(e,r)>t&&(t=this.get(e,r));return t}maxIndex(){E(this);let t=this.get(0,0),e=[0,0];for(let r=0;r<this.rows;r++)for(let s=0;s<this.columns;s++)this.get(r,s)>t&&(t=this.get(r,s),e[0]=r,e[1]=s);return e}min(){if(this.isEmpty())return NaN;let t=this.get(0,0);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.get(e,r)<t&&(t=this.get(e,r));return t}minIndex(){E(this);let t=this.get(0,0),e=[0,0];for(let r=0;r<this.rows;r++)for(let s=0;s<this.columns;s++)this.get(r,s)<t&&(t=this.get(r,s),e[0]=r,e[1]=s);return e}maxRow(t){if(f(this,t),this.isEmpty())return NaN;let e=this.get(t,0);for(let r=1;r<this.columns;r++)this.get(t,r)>e&&(e=this.get(t,r));return e}maxRowIndex(t){f(this,t),E(this);let e=this.get(t,0),r=[t,0];for(let s=1;s<this.columns;s++)this.get(t,s)>e&&(e=this.get(t,s),r[1]=s);return r}minRow(t){if(f(this,t),this.isEmpty())return NaN;let e=this.get(t,0);for(let r=1;r<this.columns;r++)this.get(t,r)<e&&(e=this.get(t,r));return e}minRowIndex(t){f(this,t),E(this);let e=this.get(t,0),r=[t,0];for(let s=1;s<this.columns;s++)this.get(t,s)<e&&(e=this.get(t,s),r[1]=s);return r}maxColumn(t){if(m(this,t),this.isEmpty())return NaN;let e=this.get(0,t);for(let r=1;r<this.rows;r++)this.get(r,t)>e&&(e=this.get(r,t));return e}maxColumnIndex(t){m(this,t),E(this);let e=this.get(0,t),r=[0,t];for(let s=1;s<this.rows;s++)this.get(s,t)>e&&(e=this.get(s,t),r[0]=s);return r}minColumn(t){if(m(this,t),this.isEmpty())return NaN;let e=this.get(0,t);for(let r=1;r<this.rows;r++)this.get(r,t)<e&&(e=this.get(r,t));return e}minColumnIndex(t){m(this,t),E(this);let e=this.get(0,t),r=[0,t];for(let s=1;s<this.rows;s++)this.get(s,t)<e&&(e=this.get(s,t),r[0]=s);return r}diag(){let t=Math.min(this.rows,this.columns),e=[];for(let r=0;r<t;r++)e.push(this.get(r,r));return e}norm(t=\"frobenius\"){let e=0;if(\"max\"===t)return this.max();if(\"frobenius\"===t){for(let t=0;t<this.rows;t++)for(let r=0;r<this.columns;r++)e+=this.get(t,r)*this.get(t,r);return Math.sqrt(e)}throw new RangeError(`unknown norm type: ${t}`)}cumulativeSum(){let t=0;for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)t+=this.get(e,r),this.set(e,r,t);return this}dot(t){v.isMatrix(t)&&(t=t.to1DArray());let e=this.to1DArray();if(e.length!==t.length)throw new RangeError(\"vectors do not have the same size\");let r=0;for(let s=0;s<e.length;s++)r+=e[s]*t[s];return r}mmul(t){t=k.checkMatrix(t);let e=this.rows,r=this.columns,s=t.columns,o=new k(e,s),n=new Float64Array(r);for(let i=0;i<s;i++){for(let e=0;e<r;e++)n[e]=t.get(e,i);for(let t=0;t<e;t++){let e=0;for(let s=0;s<r;s++)e+=this.get(t,s)*n[s];o.set(t,i,e)}}return o}strassen2x2(t){t=k.checkMatrix(t);let e=new k(2,2);const r=this.get(0,0),s=t.get(0,0),o=this.get(0,1),n=t.get(0,1),i=this.get(1,0),h=t.get(1,0),l=this.get(1,1),u=t.get(1,1),a=(r+l)*(s+u),c=(i+l)*s,f=r*(n-u),m=l*(h-s),g=(r+o)*u,w=a+m-g+(o-l)*(h+u),p=f+g,d=c+m,y=a-c+f+(i-r)*(s+n);return e.set(0,0,w),e.set(0,1,p),e.set(1,0,d),e.set(1,1,y),e}strassen3x3(t){t=k.checkMatrix(t);let e=new k(3,3);const r=this.get(0,0),s=this.get(0,1),o=this.get(0,2),n=this.get(1,0),i=this.get(1,1),h=this.get(1,2),l=this.get(2,0),u=this.get(2,1),a=this.get(2,2),c=t.get(0,0),f=t.get(0,1),m=t.get(0,2),g=t.get(1,0),w=t.get(1,1),p=t.get(1,2),d=t.get(2,0),y=t.get(2,1),M=t.get(2,2),b=(r-n)*(-f+w),x=(-r+n+i)*(c-f+w),E=(n+i)*(-c+f),v=r*c,S=(-r+l+u)*(c-m+p),R=(-r+l)*(m-p),I=(l+u)*(-c+m),T=(-o+u+a)*(w+d-y),A=(o-a)*(w-y),q=o*d,C=(u+a)*(-d+y),P=(-o+i+h)*(p+d-M),V=(o-h)*(p-M),N=(i+h)*(-d+M),j=v+q+s*g,z=(r+s+o-n-i-u-a)*w+x+E+v+T+q+C,F=v+S+I+(r+s+o-i-h-l-u)*p+q+P+N,D=b+i*(-c+f+g-w-p-d+M)+x+v+q+P+V,H=b+x+E+v+h*y,_=q+P+V+N+n*m,$=v+S+R+u*(-c+m+g-w-p-d+y)+T+A+q,L=T+A+q+C+l*f,O=v+S+R+I+a*M;return e.set(0,0,j),e.set(0,1,z),e.set(0,2,F),e.set(1,0,D),e.set(1,1,H),e.set(1,2,_),e.set(2,0,$),e.set(2,1,L),e.set(2,2,O),e}mmulStrassen(t){t=k.checkMatrix(t);let e=this.clone(),r=e.rows,s=e.columns,o=t.rows,n=t.columns;function i(t,e,r){let s=t.rows,o=t.columns;if(s===e&&o===r)return t;{let s=v.zeros(e,r);return s=s.setSubMatrix(t,0,0),s}}s!==o&&console.warn(`Multiplying ${r} x ${s} and ${o} x ${n} matrix: dimensions do not match.`);let h=Math.max(r,o),l=Math.max(s,n);return e=i(e,h,l),function t(e,r,s,o){if(s<=512||o<=512)return e.mmul(r);s%2==1&&o%2==1?(e=i(e,s+1,o+1),r=i(r,s+1,o+1)):s%2==1?(e=i(e,s+1,o),r=i(r,s+1,o)):o%2==1&&(e=i(e,s,o+1),r=i(r,s,o+1));let n=parseInt(e.rows/2,10),h=parseInt(e.columns/2,10),l=e.subMatrix(0,n-1,0,h-1),u=r.subMatrix(0,n-1,0,h-1),a=e.subMatrix(0,n-1,h,e.columns-1),c=r.subMatrix(0,n-1,h,r.columns-1),f=e.subMatrix(n,e.rows-1,0,h-1),m=r.subMatrix(n,r.rows-1,0,h-1),g=e.subMatrix(n,e.rows-1,h,e.columns-1),w=r.subMatrix(n,r.rows-1,h,r.columns-1),p=t(v.add(l,g),v.add(u,w),n,h),d=t(v.add(f,g),u,n,h),y=t(l,v.sub(c,w),n,h),M=t(g,v.sub(m,u),n,h),b=t(v.add(l,a),w,n,h),x=t(v.sub(f,l),v.add(u,c),n,h),E=t(v.sub(a,g),v.add(m,w),n,h),S=v.add(p,M);S.sub(b),S.add(E);let k=v.add(y,b),R=v.add(d,M),I=v.sub(p,d);I.add(y),I.add(x);let T=v.zeros(2*S.rows,2*S.columns);return T=T.setSubMatrix(S,0,0),T=T.setSubMatrix(k,S.rows,0),T=T.setSubMatrix(R,0,S.columns),T=T.setSubMatrix(I,S.rows,S.columns),T.subMatrix(0,s-1,0,o-1)}(e,t=i(t,h,l),h,l)}scaleRows(t={}){if(\"object\"!=typeof t)throw new TypeError(\"options must be an object\");const{min:e=0,max:r=1}=t;if(!Number.isFinite(e))throw new TypeError(\"min must be a number\");if(!Number.isFinite(r))throw new TypeError(\"max must be a number\");if(e>=r)throw new RangeError(\"min must be smaller than max\");let s=new k(this.rows,this.columns);for(let t=0;t<this.rows;t++){const o=this.getRow(t);o.length>0&&h(o,{min:e,max:r,output:o}),s.setRow(t,o)}return s}scaleColumns(t={}){if(\"object\"!=typeof t)throw new TypeError(\"options must be an object\");const{min:e=0,max:r=1}=t;if(!Number.isFinite(e))throw new TypeError(\"min must be a number\");if(!Number.isFinite(r))throw new TypeError(\"max must be a number\");if(e>=r)throw new RangeError(\"min must be smaller than max\");let s=new k(this.rows,this.columns);for(let t=0;t<this.columns;t++){const o=this.getColumn(t);o.length&&h(o,{min:e,max:r,output:o}),s.setColumn(t,o)}return s}flipRows(){const t=Math.ceil(this.columns/2);for(let e=0;e<this.rows;e++)for(let r=0;r<t;r++){let t=this.get(e,r),s=this.get(e,this.columns-1-r);this.set(e,r,s),this.set(e,this.columns-1-r,t)}return this}flipColumns(){const t=Math.ceil(this.rows/2);for(let e=0;e<this.columns;e++)for(let r=0;r<t;r++){let t=this.get(r,e),s=this.get(this.rows-1-r,e);this.set(r,e,s),this.set(this.rows-1-r,e,t)}return this}kroneckerProduct(t){t=k.checkMatrix(t);let e=this.rows,r=this.columns,s=t.rows,o=t.columns,n=new k(e*s,r*o);for(let i=0;i<e;i++)for(let e=0;e<r;e++)for(let r=0;r<s;r++)for(let h=0;h<o;h++)n.set(s*i+r,o*e+h,this.get(i,e)*t.get(r,h));return n}transpose(){let t=new k(this.columns,this.rows);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)t.set(r,e,this.get(e,r));return t}sortRows(t=S){for(let e=0;e<this.rows;e++)this.setRow(e,this.getRow(e).sort(t));return this}sortColumns(t=S){for(let e=0;e<this.columns;e++)this.setColumn(e,this.getColumn(e).sort(t));return this}subMatrix(t,e,r,s){M(this,t,e,r,s);let o=new k(e-t+1,s-r+1);for(let n=t;n<=e;n++)for(let e=r;e<=s;e++)o.set(n-t,e-r,this.get(n,e));return o}subMatrixRow(t,e,r){if(void 0===e&&(e=0),void 0===r&&(r=this.columns-1),e>r||e<0||e>=this.columns||r<0||r>=this.columns)throw new RangeError(\"Argument out of range\");let s=new k(t.length,r-e+1);for(let o=0;o<t.length;o++)for(let n=e;n<=r;n++){if(t[o]<0||t[o]>=this.rows)throw new RangeError(`Row index out of range: ${t[o]}`);s.set(o,n-e,this.get(t[o],n))}return s}subMatrixColumn(t,e,r){if(void 0===e&&(e=0),void 0===r&&(r=this.rows-1),e>r||e<0||e>=this.rows||r<0||r>=this.rows)throw new RangeError(\"Argument out of range\");let s=new k(r-e+1,t.length);for(let o=0;o<t.length;o++)for(let n=e;n<=r;n++){if(t[o]<0||t[o]>=this.columns)throw new RangeError(`Column index out of range: ${t[o]}`);s.set(n-e,o,this.get(n,t[o]))}return s}setSubMatrix(t,e,r){if((t=k.checkMatrix(t)).isEmpty())return this;M(this,e,e+t.rows-1,r,r+t.columns-1);for(let s=0;s<t.rows;s++)for(let o=0;o<t.columns;o++)this.set(e+s,r+o,t.get(s,o));return this}selection(t,e){let r=p(this,t,e),s=new k(t.length,e.length);for(let t=0;t<r.row.length;t++){let e=r.row[t];for(let o=0;o<r.column.length;o++){let n=r.column[o];s.set(t,o,this.get(e,n))}}return s}trace(){let t=Math.min(this.rows,this.columns),e=0;for(let r=0;r<t;r++)e+=this.get(r,r);return e}clone(){let t=new k(this.rows,this.columns);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)t.set(e,r,this.get(e,r));return t}sum(t){switch(t){case\"row\":return function(t){let e=b(t.rows);for(let r=0;r<t.rows;++r)for(let s=0;s<t.columns;++s)e[r]+=t.get(r,s);return e}(this);case\"column\":return function(t){let e=b(t.columns);for(let r=0;r<t.rows;++r)for(let s=0;s<t.columns;++s)e[s]+=t.get(r,s);return e}(this);case void 0:return function(t){let e=0;for(let r=0;r<t.rows;r++)for(let s=0;s<t.columns;s++)e+=t.get(r,s);return e}(this);default:throw new Error(`invalid option: ${t}`)}}product(t){switch(t){case\"row\":return function(t){let e=b(t.rows,1);for(let r=0;r<t.rows;++r)for(let s=0;s<t.columns;++s)e[r]*=t.get(r,s);return e}(this);case\"column\":return function(t){let e=b(t.columns,1);for(let r=0;r<t.rows;++r)for(let s=0;s<t.columns;++s)e[s]*=t.get(r,s);return e}(this);case void 0:return function(t){let e=1;for(let r=0;r<t.rows;r++)for(let s=0;s<t.columns;s++)e*=t.get(r,s);return e}(this);default:throw new Error(`invalid option: ${t}`)}}mean(t){const e=this.sum(t);switch(t){case\"row\":for(let t=0;t<this.rows;t++)e[t]/=this.columns;return e;case\"column\":for(let t=0;t<this.columns;t++)e[t]/=this.rows;return e;case void 0:return e/this.size;default:throw new Error(`invalid option: ${t}`)}}variance(t,e={}){if(\"object\"==typeof t&&(e=t,t=void 0),\"object\"!=typeof e)throw new TypeError(\"options must be an object\");const{unbiased:r=!0,mean:s=this.mean(t)}=e;if(\"boolean\"!=typeof r)throw new TypeError(\"unbiased must be a boolean\");switch(t){case\"row\":if(!Array.isArray(s))throw new TypeError(\"mean must be an array\");return function(t,e,r){const s=t.rows,o=t.columns,n=[];for(let i=0;i<s;i++){let s=0,h=0,l=0;for(let e=0;e<o;e++)l=t.get(i,e)-r[i],s+=l,h+=l*l;e?n.push((h-s*s/o)/(o-1)):n.push((h-s*s/o)/o)}return n}(this,r,s);case\"column\":if(!Array.isArray(s))throw new TypeError(\"mean must be an array\");return function(t,e,r){const s=t.rows,o=t.columns,n=[];for(let i=0;i<o;i++){let o=0,h=0,l=0;for(let e=0;e<s;e++)l=t.get(e,i)-r[i],o+=l,h+=l*l;e?n.push((h-o*o/s)/(s-1)):n.push((h-o*o/s)/s)}return n}(this,r,s);case void 0:if(\"number\"!=typeof s)throw new TypeError(\"mean must be a number\");return function(t,e,r){const s=t.rows,o=t.columns,n=s*o;let i=0,h=0,l=0;for(let e=0;e<s;e++)for(let s=0;s<o;s++)l=t.get(e,s)-r,i+=l,h+=l*l;return e?(h-i*i/n)/(n-1):(h-i*i/n)/n}(this,r,s);default:throw new Error(`invalid option: ${t}`)}}standardDeviation(t,e){\"object\"==typeof t&&(e=t,t=void 0);const r=this.variance(t,e);if(void 0===t)return Math.sqrt(r);for(let t=0;t<r.length;t++)r[t]=Math.sqrt(r[t]);return r}center(t,e={}){if(\"object\"==typeof t&&(e=t,t=void 0),\"object\"!=typeof e)throw new TypeError(\"options must be an object\");const{center:r=this.mean(t)}=e;switch(t){case\"row\":if(!Array.isArray(r))throw new TypeError(\"center must be an array\");return function(t,e){for(let r=0;r<t.rows;r++)for(let s=0;s<t.columns;s++)t.set(r,s,t.get(r,s)-e[r])}(this,r),this;case\"column\":if(!Array.isArray(r))throw new TypeError(\"center must be an array\");return function(t,e){for(let r=0;r<t.rows;r++)for(let s=0;s<t.columns;s++)t.set(r,s,t.get(r,s)-e[s])}(this,r),this;case void 0:if(\"number\"!=typeof r)throw new TypeError(\"center must be a number\");return function(t,e){for(let r=0;r<t.rows;r++)for(let s=0;s<t.columns;s++)t.set(r,s,t.get(r,s)-e)}(this,r),this;default:throw new Error(`invalid option: ${t}`)}}scale(t,e={}){if(\"object\"==typeof t&&(e=t,t=void 0),\"object\"!=typeof e)throw new TypeError(\"options must be an object\");let r=e.scale;switch(t){case\"row\":if(void 0===r)r=function(t){const e=[];for(let r=0;r<t.rows;r++){let s=0;for(let e=0;e<t.columns;e++)s+=Math.pow(t.get(r,e),2)/(t.columns-1);e.push(Math.sqrt(s))}return e}(this);else if(!Array.isArray(r))throw new TypeError(\"scale must be an array\");return function(t,e){for(let r=0;r<t.rows;r++)for(let s=0;s<t.columns;s++)t.set(r,s,t.get(r,s)/e[r])}(this,r),this;case\"column\":if(void 0===r)r=function(t){const e=[];for(let r=0;r<t.columns;r++){let s=0;for(let e=0;e<t.rows;e++)s+=Math.pow(t.get(e,r),2)/(t.rows-1);e.push(Math.sqrt(s))}return e}(this);else if(!Array.isArray(r))throw new TypeError(\"scale must be an array\");return function(t,e){for(let r=0;r<t.rows;r++)for(let s=0;s<t.columns;s++)t.set(r,s,t.get(r,s)/e[s])}(this,r),this;case void 0:if(void 0===r)r=function(t){const e=t.size-1;let r=0;for(let s=0;s<t.columns;s++)for(let o=0;o<t.rows;o++)r+=Math.pow(t.get(o,s),2)/e;return Math.sqrt(r)}(this);else if(\"number\"!=typeof r)throw new TypeError(\"scale must be a number\");return function(t,e){for(let r=0;r<t.rows;r++)for(let s=0;s<t.columns;s++)t.set(r,s,t.get(r,s)/e)}(this,r),this;default:throw new Error(`invalid option: ${t}`)}}toString(t){return a(this,t)}}function S(t,e){return t-e}v.prototype.klass=\"Matrix\",\"undefined\"!=typeof Symbol&&(v.prototype[Symbol.for(\"nodejs.util.inspect.custom\")]=function(){return a(this)}),v.random=v.rand,v.randomInt=v.randInt,v.diagonal=v.diag,v.prototype.diagonal=v.prototype.diag,v.identity=v.eye,v.prototype.negate=v.prototype.neg,v.prototype.tensorProduct=v.prototype.kroneckerProduct;class k extends v{constructor(t,e){if(super(),k.isMatrix(t))return t.clone();if(Number.isInteger(t)&&t>=0){if(this.data=[],!(Number.isInteger(e)&&e>=0))throw new TypeError(\"nColumns must be a positive integer\");for(let r=0;r<t;r++)this.data.push(new Float64Array(e))}else{if(!Array.isArray(t))throw new TypeError(\"First argument must be a positive number or an array\");{const r=t;if(\"number\"!=typeof(e=(t=r.length)?r[0].length:0))throw new TypeError(\"Data must be a 2D array with at least one element\");this.data=[];for(let s=0;s<t;s++){if(r[s].length!==e)throw new RangeError(\"Inconsistent array dimensions\");this.data.push(Float64Array.from(r[s]))}}}this.rows=t,this.columns=e}set(t,e,r){return this.data[t][e]=r,this}get(t,e){return this.data[t][e]}removeRow(t){return f(this,t),this.data.splice(t,1),this.rows-=1,this}addRow(t,e){return void 0===e&&(e=t,t=this.rows),f(this,t,!0),e=Float64Array.from(g(this,e)),this.data.splice(t,0,e),this.rows+=1,this}removeColumn(t){m(this,t);for(let e=0;e<this.rows;e++){const r=new Float64Array(this.columns-1);for(let s=0;s<t;s++)r[s]=this.data[e][s];for(let s=t+1;s<this.columns;s++)r[s-1]=this.data[e][s];this.data[e]=r}return this.columns-=1,this}addColumn(t,e){void 0===e&&(e=t,t=this.columns),m(this,t,!0),e=w(this,e);for(let r=0;r<this.rows;r++){const s=new Float64Array(this.columns+1);let o=0;for(;o<t;o++)s[o]=this.data[r][o];for(s[o++]=e[r];o<this.columns+1;o++)s[o]=this.data[r][o-1];this.data[r]=s}return this.columns+=1,this}}!function(t,e){t.prototype.add=function(t){return\"number\"==typeof t?this.addS(t):this.addM(t)},t.prototype.addS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)+t);return this},t.prototype.addM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError(\"Matrices dimensions must be equal\");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)+t.get(e,r));return this},t.add=function(t,r){return new e(t).add(r)},t.prototype.sub=function(t){return\"number\"==typeof t?this.subS(t):this.subM(t)},t.prototype.subS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)-t);return this},t.prototype.subM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError(\"Matrices dimensions must be equal\");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)-t.get(e,r));return this},t.sub=function(t,r){return new e(t).sub(r)},t.prototype.subtract=t.prototype.sub,t.prototype.subtractS=t.prototype.subS,t.prototype.subtractM=t.prototype.subM,t.subtract=t.sub,t.prototype.mul=function(t){return\"number\"==typeof t?this.mulS(t):this.mulM(t)},t.prototype.mulS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)*t);return this},t.prototype.mulM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError(\"Matrices dimensions must be equal\");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)*t.get(e,r));return this},t.mul=function(t,r){return new e(t).mul(r)},t.prototype.multiply=t.prototype.mul,t.prototype.multiplyS=t.prototype.mulS,t.prototype.multiplyM=t.prototype.mulM,t.multiply=t.mul,t.prototype.div=function(t){return\"number\"==typeof t?this.divS(t):this.divM(t)},t.prototype.divS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)/t);return this},t.prototype.divM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError(\"Matrices dimensions must be equal\");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)/t.get(e,r));return this},t.div=function(t,r){return new e(t).div(r)},t.prototype.divide=t.prototype.div,t.prototype.divideS=t.prototype.divS,t.prototype.divideM=t.prototype.divM,t.divide=t.div,t.prototype.mod=function(t){return\"number\"==typeof t?this.modS(t):this.modM(t)},t.prototype.modS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)%t);return this},t.prototype.modM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError(\"Matrices dimensions must be equal\");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)%t.get(e,r));return this},t.mod=function(t,r){return new e(t).mod(r)},t.prototype.modulus=t.prototype.mod,t.prototype.modulusS=t.prototype.modS,t.prototype.modulusM=t.prototype.modM,t.modulus=t.mod,t.prototype.and=function(t){return\"number\"==typeof t?this.andS(t):this.andM(t)},t.prototype.andS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)&t);return this},t.prototype.andM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError(\"Matrices dimensions must be equal\");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)&t.get(e,r));return this},t.and=function(t,r){return new e(t).and(r)},t.prototype.or=function(t){return\"number\"==typeof t?this.orS(t):this.orM(t)},t.prototype.orS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)|t);return this},t.prototype.orM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError(\"Matrices dimensions must be equal\");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)|t.get(e,r));return this},t.or=function(t,r){return new e(t).or(r)},t.prototype.xor=function(t){return\"number\"==typeof t?this.xorS(t):this.xorM(t)},t.prototype.xorS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)^t);return this},t.prototype.xorM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError(\"Matrices dimensions must be equal\");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)^t.get(e,r));return this},t.xor=function(t,r){return new e(t).xor(r)},t.prototype.leftShift=function(t){return\"number\"==typeof t?this.leftShiftS(t):this.leftShiftM(t)},t.prototype.leftShiftS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)<<t);return this},t.prototype.leftShiftM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError(\"Matrices dimensions must be equal\");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)<<t.get(e,r));return this},t.leftShift=function(t,r){return new e(t).leftShift(r)},t.prototype.signPropagatingRightShift=function(t){return\"number\"==typeof t?this.signPropagatingRightShiftS(t):this.signPropagatingRightShiftM(t)},t.prototype.signPropagatingRightShiftS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)>>t);return this},t.prototype.signPropagatingRightShiftM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError(\"Matrices dimensions must be equal\");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)>>t.get(e,r));return this},t.signPropagatingRightShift=function(t,r){return new e(t).signPropagatingRightShift(r)},t.prototype.rightShift=function(t){return\"number\"==typeof t?this.rightShiftS(t):this.rightShiftM(t)},t.prototype.rightShiftS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)>>>t);return this},t.prototype.rightShiftM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError(\"Matrices dimensions must be equal\");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)>>>t.get(e,r));return this},t.rightShift=function(t,r){return new e(t).rightShift(r)},t.prototype.zeroFillRightShift=t.prototype.rightShift,t.prototype.zeroFillRightShiftS=t.prototype.rightShiftS,t.prototype.zeroFillRightShiftM=t.prototype.rightShiftM,t.zeroFillRightShift=t.rightShift,t.prototype.not=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,~this.get(t,e));return this},t.not=function(t){return new e(t).not()},t.prototype.abs=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.abs(this.get(t,e)));return this},t.abs=function(t){return new e(t).abs()},t.prototype.acos=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.acos(this.get(t,e)));return this},t.acos=function(t){return new e(t).acos()},t.prototype.acosh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.acosh(this.get(t,e)));return this},t.acosh=function(t){return new e(t).acosh()},t.prototype.asin=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.asin(this.get(t,e)));return this},t.asin=function(t){return new e(t).asin()},t.prototype.asinh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.asinh(this.get(t,e)));return this},t.asinh=function(t){return new e(t).asinh()},t.prototype.atan=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.atan(this.get(t,e)));return this},t.atan=function(t){return new e(t).atan()},t.prototype.atanh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.atanh(this.get(t,e)));return this},t.atanh=function(t){return new e(t).atanh()},t.prototype.cbrt=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.cbrt(this.get(t,e)));return this},t.cbrt=function(t){return new e(t).cbrt()},t.prototype.ceil=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.ceil(this.get(t,e)));return this},t.ceil=function(t){return new e(t).ceil()},t.prototype.clz32=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.clz32(this.get(t,e)));return this},t.clz32=function(t){return new e(t).clz32()},t.prototype.cos=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.cos(this.get(t,e)));return this},t.cos=function(t){return new e(t).cos()},t.prototype.cosh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.cosh(this.get(t,e)));return this},t.cosh=function(t){return new e(t).cosh()},t.prototype.exp=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.exp(this.get(t,e)));return this},t.exp=function(t){return new e(t).exp()},t.prototype.expm1=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.expm1(this.get(t,e)));return this},t.expm1=function(t){return new e(t).expm1()},t.prototype.floor=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.floor(this.get(t,e)));return this},t.floor=function(t){return new e(t).floor()},t.prototype.fround=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.fround(this.get(t,e)));return this},t.fround=function(t){return new e(t).fround()},t.prototype.log=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.log(this.get(t,e)));return this},t.log=function(t){return new e(t).log()},t.prototype.log1p=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.log1p(this.get(t,e)));return this},t.log1p=function(t){return new e(t).log1p()},t.prototype.log10=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.log10(this.get(t,e)));return this},t.log10=function(t){return new e(t).log10()},t.prototype.log2=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.log2(this.get(t,e)));return this},t.log2=function(t){return new e(t).log2()},t.prototype.round=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.round(this.get(t,e)));return this},t.round=function(t){return new e(t).round()},t.prototype.sign=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.sign(this.get(t,e)));return this},t.sign=function(t){return new e(t).sign()},t.prototype.sin=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.sin(this.get(t,e)));return this},t.sin=function(t){return new e(t).sin()},t.prototype.sinh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.sinh(this.get(t,e)));return this},t.sinh=function(t){return new e(t).sinh()},t.prototype.sqrt=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.sqrt(this.get(t,e)));return this},t.sqrt=function(t){return new e(t).sqrt()},t.prototype.tan=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.tan(this.get(t,e)));return this},t.tan=function(t){return new e(t).tan()},t.prototype.tanh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.tanh(this.get(t,e)));return this},t.tanh=function(t){return new e(t).tanh()},t.prototype.trunc=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.trunc(this.get(t,e)));return this},t.trunc=function(t){return new e(t).trunc()},t.pow=function(t,r){return new e(t).pow(r)},t.prototype.pow=function(t){return\"number\"==typeof t?this.powS(t):this.powM(t)},t.prototype.powS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,Math.pow(this.get(e,r),t));return this},t.prototype.powM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError(\"Matrices dimensions must be equal\");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,Math.pow(this.get(e,r),t.get(e,r)));return this}}(v,k);class R extends v{constructor(t,e,r){super(),this.matrix=t,this.rows=e,this.columns=r}}class I extends R{constructor(t,e){m(t,e),super(t,t.rows,1),this.column=e}set(t,e,r){return this.matrix.set(t,this.column,r),this}get(t){return this.matrix.get(t,this.column)}}class T extends R{constructor(t,e){e=y(t,e),super(t,t.rows,e.length),this.columnIndices=e}set(t,e,r){return this.matrix.set(t,this.columnIndices[e],r),this}get(t,e){return this.matrix.get(t,this.columnIndices[e])}}class A extends R{constructor(t){super(t,t.rows,t.columns)}set(t,e,r){return this.matrix.set(t,this.columns-e-1,r),this}get(t,e){return this.matrix.get(t,this.columns-e-1)}}class q extends R{constructor(t){super(t,t.rows,t.columns)}set(t,e,r){return this.matrix.set(this.rows-t-1,e,r),this}get(t,e){return this.matrix.get(this.rows-t-1,e)}}class C extends R{constructor(t,e){f(t,e),super(t,1,t.columns),this.row=e}set(t,e,r){return this.matrix.set(this.row,e,r),this}get(t,e){return this.matrix.get(this.row,e)}}class P extends R{constructor(t,e){super(t,(e=d(t,e)).length,t.columns),this.rowIndices=e}set(t,e,r){return this.matrix.set(this.rowIndices[t],e,r),this}get(t,e){return this.matrix.get(this.rowIndices[t],e)}}class V extends R{constructor(t,e,r){let s=p(t,e,r);super(t,s.row.length,s.column.length),this.rowIndices=s.row,this.columnIndices=s.column}set(t,e,r){return this.matrix.set(this.rowIndices[t],this.columnIndices[e],r),this}get(t,e){return this.matrix.get(this.rowIndices[t],this.columnIndices[e])}}class N extends R{constructor(t,e,r,s,o){M(t,e,r,s,o),super(t,r-e+1,o-s+1),this.startRow=e,this.startColumn=s}set(t,e,r){return this.matrix.set(this.startRow+t,this.startColumn+e,r),this}get(t,e){return this.matrix.get(this.startRow+t,this.startColumn+e)}}class j extends R{constructor(t){super(t,t.columns,t.rows)}set(t,e,r){return this.matrix.set(e,t,r),this}get(t,e){return this.matrix.get(e,t)}}class z extends v{constructor(t,e={}){const{rows:r=1}=e;if(t.length%r!=0)throw new Error(\"the data length is not divisible by the number of rows\");super(),this.rows=r,this.columns=t.length/r,this.data=t}set(t,e,r){let s=this._calculateIndex(t,e);return this.data[s]=r,this}get(t,e){let r=this._calculateIndex(t,e);return this.data[r]}_calculateIndex(t,e){return t*this.columns+e}}class F extends v{constructor(t){super(),this.data=t,this.rows=t.length,this.columns=t[0].length}set(t,e,r){return this.data[t][e]=r,this}get(t,e){return this.data[t][e]}}function D(t,e){if(Array.isArray(t))return t[0]&&Array.isArray(t[0])?new F(t):new z(t,e);throw new Error(\"the argument is not an array\")}class H{constructor(t){let e,r,s,o,n,i,h,l,u,a=(t=F.checkMatrix(t)).clone(),c=a.rows,f=a.columns,m=new Float64Array(c),g=1;for(e=0;e<c;e++)m[e]=e;for(l=new Float64Array(c),r=0;r<f;r++){for(e=0;e<c;e++)l[e]=a.get(e,r);for(e=0;e<c;e++){for(u=Math.min(e,r),n=0,s=0;s<u;s++)n+=a.get(e,s)*l[s];l[e]-=n,a.set(e,r,l[e])}for(o=r,e=r+1;e<c;e++)Math.abs(l[e])>Math.abs(l[o])&&(o=e);if(o!==r){for(s=0;s<f;s++)i=a.get(o,s),a.set(o,s,a.get(r,s)),a.set(r,s,i);h=m[o],m[o]=m[r],m[r]=h,g=-g}if(r<c&&0!==a.get(r,r))for(e=r+1;e<c;e++)a.set(e,r,a.get(e,r)/a.get(r,r))}this.LU=a,this.pivotVector=m,this.pivotSign=g}isSingular(){let t=this.LU,e=t.columns;for(let r=0;r<e;r++)if(0===t.get(r,r))return!0;return!1}solve(t){t=k.checkMatrix(t);let e=this.LU;if(e.rows!==t.rows)throw new Error(\"Invalid matrix dimensions\");if(this.isSingular())throw new Error(\"LU matrix is singular\");let r,s,o,n=t.columns,i=t.subMatrixRow(this.pivotVector,0,n-1),h=e.columns;for(o=0;o<h;o++)for(r=o+1;r<h;r++)for(s=0;s<n;s++)i.set(r,s,i.get(r,s)-i.get(o,s)*e.get(r,o));for(o=h-1;o>=0;o--){for(s=0;s<n;s++)i.set(o,s,i.get(o,s)/e.get(o,o));for(r=0;r<o;r++)for(s=0;s<n;s++)i.set(r,s,i.get(r,s)-i.get(o,s)*e.get(r,o))}return i}get determinant(){let t=this.LU;if(!t.isSquare())throw new Error(\"Matrix must be square\");let e=this.pivotSign,r=t.columns;for(let s=0;s<r;s++)e*=t.get(s,s);return e}get lowerTriangularMatrix(){let t=this.LU,e=t.rows,r=t.columns,s=new k(e,r);for(let o=0;o<e;o++)for(let e=0;e<r;e++)o>e?s.set(o,e,t.get(o,e)):o===e?s.set(o,e,1):s.set(o,e,0);return s}get upperTriangularMatrix(){let t=this.LU,e=t.rows,r=t.columns,s=new k(e,r);for(let o=0;o<e;o++)for(let e=0;e<r;e++)o<=e?s.set(o,e,t.get(o,e)):s.set(o,e,0);return s}get pivotPermutationVector(){return Array.from(this.pivotVector)}}function _(t,e){let r=0;return Math.abs(t)>Math.abs(e)?(r=e/t,Math.abs(t)*Math.sqrt(1+r*r)):0!==e?(r=t/e,Math.abs(e)*Math.sqrt(1+r*r)):0}class ${constructor(t){let e,r,s,o,n=(t=F.checkMatrix(t)).clone(),i=t.rows,h=t.columns,l=new Float64Array(h);for(s=0;s<h;s++){let t=0;for(e=s;e<i;e++)t=_(t,n.get(e,s));if(0!==t){for(n.get(s,s)<0&&(t=-t),e=s;e<i;e++)n.set(e,s,n.get(e,s)/t);for(n.set(s,s,n.get(s,s)+1),r=s+1;r<h;r++){for(o=0,e=s;e<i;e++)o+=n.get(e,s)*n.get(e,r);for(o=-o/n.get(s,s),e=s;e<i;e++)n.set(e,r,n.get(e,r)+o*n.get(e,s))}}l[s]=-t}this.QR=n,this.Rdiag=l}solve(t){t=k.checkMatrix(t);let e=this.QR,r=e.rows;if(t.rows!==r)throw new Error(\"Matrix row dimensions must agree\");if(!this.isFullRank())throw new Error(\"Matrix is rank deficient\");let s,o,n,i,h=t.columns,l=t.clone(),u=e.columns;for(n=0;n<u;n++)for(o=0;o<h;o++){for(i=0,s=n;s<r;s++)i+=e.get(s,n)*l.get(s,o);for(i=-i/e.get(n,n),s=n;s<r;s++)l.set(s,o,l.get(s,o)+i*e.get(s,n))}for(n=u-1;n>=0;n--){for(o=0;o<h;o++)l.set(n,o,l.get(n,o)/this.Rdiag[n]);for(s=0;s<n;s++)for(o=0;o<h;o++)l.set(s,o,l.get(s,o)-l.get(n,o)*e.get(s,n))}return l.subMatrix(0,u-1,0,h-1)}isFullRank(){let t=this.QR.columns;for(let e=0;e<t;e++)if(0===this.Rdiag[e])return!1;return!0}get upperTriangularMatrix(){let t,e,r=this.QR,s=r.columns,o=new k(s,s);for(t=0;t<s;t++)for(e=0;e<s;e++)t<e?o.set(t,e,r.get(t,e)):t===e?o.set(t,e,this.Rdiag[t]):o.set(t,e,0);return o}get orthogonalMatrix(){let t,e,r,s,o=this.QR,n=o.rows,i=o.columns,h=new k(n,i);for(r=i-1;r>=0;r--){for(t=0;t<n;t++)h.set(t,r,0);for(h.set(r,r,1),e=r;e<i;e++)if(0!==o.get(r,r)){for(s=0,t=r;t<n;t++)s+=o.get(t,r)*h.get(t,e);for(s=-s/o.get(r,r),t=r;t<n;t++)h.set(t,e,h.get(t,e)+s*o.get(t,r))}}return h}}class L{constructor(t,e={}){if((t=F.checkMatrix(t)).isEmpty())throw new Error(\"Matrix must be non-empty\");let r=t.rows,s=t.columns;const{computeLeftSingularVectors:o=!0,computeRightSingularVectors:n=!0,autoTranspose:i=!1}=e;let h,l=Boolean(o),u=Boolean(n),a=!1;if(r<s)if(i){h=t.transpose(),r=h.rows,s=h.columns,a=!0;let e=l;l=u,u=e}else h=t.clone(),console.warn(\"Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose\");else h=t.clone();let c=Math.min(r,s),f=Math.min(r+1,s),m=new Float64Array(f),g=new k(r,c),w=new k(s,s),p=new Float64Array(s),d=new Float64Array(r),y=new Float64Array(f);for(let t=0;t<f;t++)y[t]=t;let M=Math.min(r-1,s),b=Math.max(0,Math.min(s-2,r)),x=Math.max(M,b);for(let t=0;t<x;t++){if(t<M){m[t]=0;for(let e=t;e<r;e++)m[t]=_(m[t],h.get(e,t));if(0!==m[t]){h.get(t,t)<0&&(m[t]=-m[t]);for(let e=t;e<r;e++)h.set(e,t,h.get(e,t)/m[t]);h.set(t,t,h.get(t,t)+1)}m[t]=-m[t]}for(let e=t+1;e<s;e++){if(t<M&&0!==m[t]){let s=0;for(let o=t;o<r;o++)s+=h.get(o,t)*h.get(o,e);s=-s/h.get(t,t);for(let o=t;o<r;o++)h.set(o,e,h.get(o,e)+s*h.get(o,t))}p[e]=h.get(t,e)}if(l&&t<M)for(let e=t;e<r;e++)g.set(e,t,h.get(e,t));if(t<b){p[t]=0;for(let e=t+1;e<s;e++)p[t]=_(p[t],p[e]);if(0!==p[t]){p[t+1]<0&&(p[t]=0-p[t]);for(let e=t+1;e<s;e++)p[e]/=p[t];p[t+1]+=1}if(p[t]=-p[t],t+1<r&&0!==p[t]){for(let e=t+1;e<r;e++)d[e]=0;for(let e=t+1;e<r;e++)for(let r=t+1;r<s;r++)d[e]+=p[r]*h.get(e,r);for(let e=t+1;e<s;e++){let s=-p[e]/p[t+1];for(let o=t+1;o<r;o++)h.set(o,e,h.get(o,e)+s*d[o])}}if(u)for(let e=t+1;e<s;e++)w.set(e,t,p[e])}}let E=Math.min(s,r+1);if(M<s&&(m[M]=h.get(M,M)),r<E&&(m[E-1]=0),b+1<E&&(p[b]=h.get(b,E-1)),p[E-1]=0,l){for(let t=M;t<c;t++){for(let e=0;e<r;e++)g.set(e,t,0);g.set(t,t,1)}for(let t=M-1;t>=0;t--)if(0!==m[t]){for(let e=t+1;e<c;e++){let s=0;for(let o=t;o<r;o++)s+=g.get(o,t)*g.get(o,e);s=-s/g.get(t,t);for(let o=t;o<r;o++)g.set(o,e,g.get(o,e)+s*g.get(o,t))}for(let e=t;e<r;e++)g.set(e,t,-g.get(e,t));g.set(t,t,1+g.get(t,t));for(let e=0;e<t-1;e++)g.set(e,t,0)}else{for(let e=0;e<r;e++)g.set(e,t,0);g.set(t,t,1)}}if(u)for(let t=s-1;t>=0;t--){if(t<b&&0!==p[t])for(let e=t+1;e<s;e++){let r=0;for(let o=t+1;o<s;o++)r+=w.get(o,t)*w.get(o,e);r=-r/w.get(t+1,t);for(let o=t+1;o<s;o++)w.set(o,e,w.get(o,e)+r*w.get(o,t))}for(let e=0;e<s;e++)w.set(e,t,0);w.set(t,t,1)}let v=E-1,S=0,R=Number.EPSILON;for(;E>0;){let t,e;for(t=E-2;t>=-1&&-1!==t;t--){const e=Number.MIN_VALUE+R*Math.abs(m[t]+Math.abs(m[t+1]));if(Math.abs(p[t])<=e||Number.isNaN(p[t])){p[t]=0;break}}if(t===E-2)e=4;else{let r;for(r=E-1;r>=t&&r!==t;r--){let e=(r!==E?Math.abs(p[r]):0)+(r!==t+1?Math.abs(p[r-1]):0);if(Math.abs(m[r])<=R*e){m[r]=0;break}}r===t?e=3:r===E-1?e=1:(e=2,t=r)}switch(t++,e){case 1:{let e=p[E-2];p[E-2]=0;for(let r=E-2;r>=t;r--){let o=_(m[r],e),n=m[r]/o,i=e/o;if(m[r]=o,r!==t&&(e=-i*p[r-1],p[r-1]=n*p[r-1]),u)for(let t=0;t<s;t++)o=n*w.get(t,r)+i*w.get(t,E-1),w.set(t,E-1,-i*w.get(t,r)+n*w.get(t,E-1)),w.set(t,r,o)}break}case 2:{let e=p[t-1];p[t-1]=0;for(let s=t;s<E;s++){let o=_(m[s],e),n=m[s]/o,i=e/o;if(m[s]=o,e=-i*p[s],p[s]=n*p[s],l)for(let e=0;e<r;e++)o=n*g.get(e,s)+i*g.get(e,t-1),g.set(e,t-1,-i*g.get(e,s)+n*g.get(e,t-1)),g.set(e,s,o)}break}case 3:{const e=Math.max(Math.abs(m[E-1]),Math.abs(m[E-2]),Math.abs(p[E-2]),Math.abs(m[t]),Math.abs(p[t])),o=m[E-1]/e,n=m[E-2]/e,i=p[E-2]/e,h=m[t]/e,a=p[t]/e,c=((n+o)*(n-o)+i*i)/2,f=o*i*(o*i);let d=0;0===c&&0===f||(d=c<0?0-Math.sqrt(c*c+f):Math.sqrt(c*c+f),d=f/(c+d));let y=(h+o)*(h-o)+d,M=h*a;for(let e=t;e<E-1;e++){let o=_(y,M);0===o&&(o=Number.MIN_VALUE);let n=y/o,i=M/o;if(e!==t&&(p[e-1]=o),y=n*m[e]+i*p[e],p[e]=n*p[e]-i*m[e],M=i*m[e+1],m[e+1]=n*m[e+1],u)for(let t=0;t<s;t++)o=n*w.get(t,e)+i*w.get(t,e+1),w.set(t,e+1,-i*w.get(t,e)+n*w.get(t,e+1)),w.set(t,e,o);if(o=_(y,M),0===o&&(o=Number.MIN_VALUE),n=y/o,i=M/o,m[e]=o,y=n*p[e]+i*m[e+1],m[e+1]=-i*p[e]+n*m[e+1],M=i*p[e+1],p[e+1]=n*p[e+1],l&&e<r-1)for(let t=0;t<r;t++)o=n*g.get(t,e)+i*g.get(t,e+1),g.set(t,e+1,-i*g.get(t,e)+n*g.get(t,e+1)),g.set(t,e,o)}p[E-2]=y,S+=1;break}case 4:if(m[t]<=0&&(m[t]=m[t]<0?-m[t]:0,u))for(let e=0;e<=v;e++)w.set(e,t,-w.get(e,t));for(;t<v&&!(m[t]>=m[t+1]);){let e=m[t];if(m[t]=m[t+1],m[t+1]=e,u&&t<s-1)for(let r=0;r<s;r++)e=w.get(r,t+1),w.set(r,t+1,w.get(r,t)),w.set(r,t,e);if(l&&t<r-1)for(let s=0;s<r;s++)e=g.get(s,t+1),g.set(s,t+1,g.get(s,t)),g.set(s,t,e);t++}S=0,E--}}if(a){let t=w;w=g,g=t}this.m=r,this.n=s,this.s=m,this.U=g,this.V=w}solve(t){let e=t,r=this.threshold,s=this.s.length,o=k.zeros(s,s);for(let t=0;t<s;t++)Math.abs(this.s[t])<=r?o.set(t,t,0):o.set(t,t,1/this.s[t]);let n=this.U,i=this.rightSingularVectors,h=i.mmul(o),l=i.rows,u=n.rows,a=k.zeros(l,u);for(let t=0;t<l;t++)for(let e=0;e<u;e++){let r=0;for(let o=0;o<s;o++)r+=h.get(t,o)*n.get(e,o);a.set(t,e,r)}return a.mmul(e)}solveForDiagonal(t){return this.solve(k.diag(t))}inverse(){let t=this.V,e=this.threshold,r=t.rows,s=t.columns,o=new k(r,this.s.length);for(let n=0;n<r;n++)for(let r=0;r<s;r++)Math.abs(this.s[r])>e&&o.set(n,r,t.get(n,r)/this.s[r]);let n=this.U,i=n.rows,h=n.columns,l=new k(r,i);for(let t=0;t<r;t++)for(let e=0;e<i;e++){let r=0;for(let s=0;s<h;s++)r+=o.get(t,s)*n.get(e,s);l.set(t,e,r)}return l}get condition(){return this.s[0]/this.s[Math.min(this.m,this.n)-1]}get norm2(){return this.s[0]}get rank(){let t=Math.max(this.m,this.n)*this.s[0]*Number.EPSILON,e=0,r=this.s;for(let s=0,o=r.length;s<o;s++)r[s]>t&&e++;return e}get diagonal(){return Array.from(this.s)}get threshold(){return Number.EPSILON/2*Math.max(this.m,this.n)*this.s[0]}get leftSingularVectors(){return this.U}get rightSingularVectors(){return this.V}get diagonalMatrix(){return k.diag(this.s)}}function O(t,e=!1){return t=F.checkMatrix(t),e?new L(t).inverse():U(t,k.eye(t.rows))}function U(t,e,r=!1){return t=F.checkMatrix(t),e=F.checkMatrix(e),r?new L(t).solve(e):t.isSquare()?new H(t).solve(e):new $(t).solve(e)}function X(t){if((t=k.checkMatrix(t)).isSquare()){if(0===t.columns)return 1;let e,r,s,o;if(2===t.columns)return e=t.get(0,0),r=t.get(0,1),s=t.get(1,0),o=t.get(1,1),e*o-r*s;if(3===t.columns){let o,n,i;return o=new V(t,[1,2],[1,2]),n=new V(t,[1,2],[0,2]),i=new V(t,[1,2],[0,1]),e=t.get(0,0),r=t.get(0,1),s=t.get(0,2),e*X(o)-r*X(n)+s*X(i)}return new H(t).determinant}throw Error(\"determinant can only be calculated for a square matrix\")}function Y(t,e){let r=[];for(let s=0;s<t;s++)s!==e&&r.push(s);return r}function G(t,e,r,s=1e-9,o=1e-9){if(t>o)return new Array(e.rows+1).fill(0);{let t=e.addRow(r,[0]);for(let e=0;e<t.rows;e++)Math.abs(t.get(e,0))<s&&t.set(e,0,0);return t.to1DArray()}}function Q(t,e={}){const{thresholdValue:r=1e-9,thresholdError:s=1e-9}=e;let o=(t=k.checkMatrix(t)).rows,n=new k(o,o);for(let e=0;e<o;e++){let i=k.columnVector(t.getRow(e)),h=t.subMatrixRow(Y(o,e)).transpose(),l=new L(h).solve(i),u=k.sub(i,h.mmul(l)).abs().max();n.setRow(e,G(u,l,e,r,s))}return n}function W(t,e=Number.EPSILON){if((t=k.checkMatrix(t)).isEmpty())return t.transpose();let r=new L(t,{autoTranspose:!0}),s=r.leftSingularVectors,o=r.rightSingularVectors,n=r.diagonal;for(let t=0;t<n.length;t++)Math.abs(n[t])>e?n[t]=1/n[t]:n[t]=0;return o.mmul(k.diag(n).mmul(s.transpose()))}function B(t,e=t,r={}){t=new k(t);let s=!1;if(\"object\"!=typeof e||k.isMatrix(e)||Array.isArray(e)?e=new k(e):(r=e,e=t,s=!0),t.rows!==e.rows)throw new TypeError(\"Both matrices must have the same number of rows\");const{center:o=!0}=r;o&&(t=t.center(\"column\"),s||(e=e.center(\"column\")));const n=t.transpose().mmul(e);for(let e=0;e<n.rows;e++)for(let r=0;r<n.columns;r++)n.set(e,r,n.get(e,r)*(1/(t.rows-1)));return n}function J(t,e=t,r={}){t=new k(t);let s=!1;if(\"object\"!=typeof e||k.isMatrix(e)||Array.isArray(e)?e=new k(e):(r=e,e=t,s=!0),t.rows!==e.rows)throw new TypeError(\"Both matrices must have the same number of rows\");const{center:o=!0,scale:n=!0}=r;o&&(t.center(\"column\"),s||e.center(\"column\")),n&&(t.scale(\"column\"),s||e.scale(\"column\"));const i=t.standardDeviation(\"column\",{unbiased:!0}),h=s?i:e.standardDeviation(\"column\",{unbiased:!0}),l=t.transpose().mmul(e);for(let e=0;e<l.rows;e++)for(let r=0;r<l.columns;r++)l.set(e,r,l.get(e,r)*(1/(i[e]*h[r]))*(1/(t.rows-1)));return l}class K{constructor(t,e={}){const{assumeSymmetric:r=!1}=e;if(!(t=F.checkMatrix(t)).isSquare())throw new Error(\"Matrix is not a square matrix\");if(t.isEmpty())throw new Error(\"Matrix must be non-empty\");let s,o,n=t.columns,i=new k(n,n),h=new Float64Array(n),l=new Float64Array(n),u=t,a=!1;if(a=!!r||t.isSymmetric(),a){for(s=0;s<n;s++)for(o=0;o<n;o++)i.set(s,o,u.get(s,o));!function(t,e,r,s){let o,n,i,h,l,u,a,c;for(l=0;l<t;l++)r[l]=s.get(t-1,l);for(h=t-1;h>0;h--){for(c=0,i=0,u=0;u<h;u++)c+=Math.abs(r[u]);if(0===c)for(e[h]=r[h-1],l=0;l<h;l++)r[l]=s.get(h-1,l),s.set(h,l,0),s.set(l,h,0);else{for(u=0;u<h;u++)r[u]/=c,i+=r[u]*r[u];for(o=r[h-1],n=Math.sqrt(i),o>0&&(n=-n),e[h]=c*n,i-=o*n,r[h-1]=o-n,l=0;l<h;l++)e[l]=0;for(l=0;l<h;l++){for(o=r[l],s.set(l,h,o),n=e[l]+s.get(l,l)*o,u=l+1;u<=h-1;u++)n+=s.get(u,l)*r[u],e[u]+=s.get(u,l)*o;e[l]=n}for(o=0,l=0;l<h;l++)e[l]/=i,o+=e[l]*r[l];for(a=o/(i+i),l=0;l<h;l++)e[l]-=a*r[l];for(l=0;l<h;l++){for(o=r[l],n=e[l],u=l;u<=h-1;u++)s.set(u,l,s.get(u,l)-(o*e[u]+n*r[u]));r[l]=s.get(h-1,l),s.set(h,l,0)}}r[h]=i}for(h=0;h<t-1;h++){if(s.set(t-1,h,s.get(h,h)),s.set(h,h,1),i=r[h+1],0!==i){for(u=0;u<=h;u++)r[u]=s.get(u,h+1)/i;for(l=0;l<=h;l++){for(n=0,u=0;u<=h;u++)n+=s.get(u,h+1)*s.get(u,l);for(u=0;u<=h;u++)s.set(u,l,s.get(u,l)-n*r[u])}}for(u=0;u<=h;u++)s.set(u,h+1,0)}for(l=0;l<t;l++)r[l]=s.get(t-1,l),s.set(t-1,l,0);s.set(t-1,t-1,1),e[0]=0}(n,l,h,i),function(t,e,r,s){let o,n,i,h,l,u,a,c,f,m,g,w,p,d,y,M,b;for(i=1;i<t;i++)e[i-1]=e[i];e[t-1]=0;let x=0,E=0,v=Number.EPSILON;for(u=0;u<t;u++){for(E=Math.max(E,Math.abs(r[u])+Math.abs(e[u])),a=u;a<t&&!(Math.abs(e[a])<=v*E);)a++;if(a>u){b=0;do{for(b+=1,o=r[u],c=(r[u+1]-o)/(2*e[u]),f=_(c,1),c<0&&(f=-f),r[u]=e[u]/(c+f),r[u+1]=e[u]*(c+f),m=r[u+1],n=o-r[u],i=u+2;i<t;i++)r[i]-=n;for(x+=n,c=r[a],g=1,w=g,p=g,d=e[u+1],y=0,M=0,i=a-1;i>=u;i--)for(p=w,w=g,M=y,o=g*e[i],n=g*c,f=_(c,e[i]),e[i+1]=y*f,y=e[i]/f,g=c/f,c=g*r[i]-y*o,r[i+1]=n+y*(g*o+y*r[i]),l=0;l<t;l++)n=s.get(l,i+1),s.set(l,i+1,y*s.get(l,i)+g*n),s.set(l,i,g*s.get(l,i)-y*n);c=-y*M*p*d*e[u]/m,e[u]=y*c,r[u]=g*c}while(Math.abs(e[u])>v*E)}r[u]=r[u]+x,e[u]=0}for(i=0;i<t-1;i++){for(l=i,c=r[i],h=i+1;h<t;h++)r[h]<c&&(l=h,c=r[h]);if(l!==i)for(r[l]=r[i],r[i]=c,h=0;h<t;h++)c=s.get(h,i),s.set(h,i,s.get(h,l)),s.set(h,l,c)}}(n,l,h,i)}else{let t=new k(n,n),e=new Float64Array(n);for(o=0;o<n;o++)for(s=0;s<n;s++)t.set(s,o,u.get(s,o));!function(t,e,r,s){let o,n,i,h,l,u,a,c=t-1;for(u=1;u<=c-1;u++){for(a=0,h=u;h<=c;h++)a+=Math.abs(e.get(h,u-1));if(0!==a){for(i=0,h=c;h>=u;h--)r[h]=e.get(h,u-1)/a,i+=r[h]*r[h];for(n=Math.sqrt(i),r[u]>0&&(n=-n),i-=r[u]*n,r[u]=r[u]-n,l=u;l<t;l++){for(o=0,h=c;h>=u;h--)o+=r[h]*e.get(h,l);for(o/=i,h=u;h<=c;h++)e.set(h,l,e.get(h,l)-o*r[h])}for(h=0;h<=c;h++){for(o=0,l=c;l>=u;l--)o+=r[l]*e.get(h,l);for(o/=i,l=u;l<=c;l++)e.set(h,l,e.get(h,l)-o*r[l])}r[u]=a*r[u],e.set(u,u-1,a*n)}}for(h=0;h<t;h++)for(l=0;l<t;l++)s.set(h,l,h===l?1:0);for(u=c-1;u>=1;u--)if(0!==e.get(u,u-1)){for(h=u+1;h<=c;h++)r[h]=e.get(h,u-1);for(l=u;l<=c;l++){for(n=0,h=u;h<=c;h++)n+=r[h]*s.get(h,l);for(n=n/r[u]/e.get(u,u-1),h=u;h<=c;h++)s.set(h,l,s.get(h,l)+n*r[h])}}}(n,t,e,i),function(t,e,r,s,o){let n,i,h,l,u,a,c,f,m,g,w,p,d,y,M,b=t-1,x=t-1,E=Number.EPSILON,v=0,S=0,k=0,R=0,I=0,T=0,A=0,q=0;for(n=0;n<t;n++)for((n<0||n>x)&&(r[n]=o.get(n,n),e[n]=0),i=Math.max(n-1,0);i<t;i++)S+=Math.abs(o.get(n,i));for(;b>=0;){for(l=b;l>0&&(T=Math.abs(o.get(l-1,l-1))+Math.abs(o.get(l,l)),0===T&&(T=S),!(Math.abs(o.get(l,l-1))<E*T));)l--;if(l===b)o.set(b,b,o.get(b,b)+v),r[b]=o.get(b,b),e[b]=0,b--,q=0;else if(l===b-1){if(c=o.get(b,b-1)*o.get(b-1,b),k=(o.get(b-1,b-1)-o.get(b,b))/2,R=k*k+c,A=Math.sqrt(Math.abs(R)),o.set(b,b,o.get(b,b)+v),o.set(b-1,b-1,o.get(b-1,b-1)+v),f=o.get(b,b),R>=0){for(A=k>=0?k+A:k-A,r[b-1]=f+A,r[b]=r[b-1],0!==A&&(r[b]=f-c/A),e[b-1]=0,e[b]=0,f=o.get(b,b-1),T=Math.abs(f)+Math.abs(A),k=f/T,R=A/T,I=Math.sqrt(k*k+R*R),k/=I,R/=I,i=b-1;i<t;i++)A=o.get(b-1,i),o.set(b-1,i,R*A+k*o.get(b,i)),o.set(b,i,R*o.get(b,i)-k*A);for(n=0;n<=b;n++)A=o.get(n,b-1),o.set(n,b-1,R*A+k*o.get(n,b)),o.set(n,b,R*o.get(n,b)-k*A);for(n=0;n<=x;n++)A=s.get(n,b-1),s.set(n,b-1,R*A+k*s.get(n,b)),s.set(n,b,R*s.get(n,b)-k*A)}else r[b-1]=f+k,r[b]=f+k,e[b-1]=A,e[b]=-A;b-=2,q=0}else{if(f=o.get(b,b),m=0,c=0,l<b&&(m=o.get(b-1,b-1),c=o.get(b,b-1)*o.get(b-1,b)),10===q){for(v+=f,n=0;n<=b;n++)o.set(n,n,o.get(n,n)-f);T=Math.abs(o.get(b,b-1))+Math.abs(o.get(b-1,b-2)),f=m=.75*T,c=-.4375*T*T}if(30===q&&(T=(m-f)/2,T=T*T+c,T>0)){for(T=Math.sqrt(T),m<f&&(T=-T),T=f-c/((m-f)/2+T),n=0;n<=b;n++)o.set(n,n,o.get(n,n)-T);v+=T,f=m=c=.964}for(q+=1,u=b-2;u>=l&&(A=o.get(u,u),I=f-A,T=m-A,k=(I*T-c)/o.get(u+1,u)+o.get(u,u+1),R=o.get(u+1,u+1)-A-I-T,I=o.get(u+2,u+1),T=Math.abs(k)+Math.abs(R)+Math.abs(I),k/=T,R/=T,I/=T,u!==l)&&!(Math.abs(o.get(u,u-1))*(Math.abs(R)+Math.abs(I))<E*(Math.abs(k)*(Math.abs(o.get(u-1,u-1))+Math.abs(A)+Math.abs(o.get(u+1,u+1)))));)u--;for(n=u+2;n<=b;n++)o.set(n,n-2,0),n>u+2&&o.set(n,n-3,0);for(h=u;h<=b-1&&(y=h!==b-1,h!==u&&(k=o.get(h,h-1),R=o.get(h+1,h-1),I=y?o.get(h+2,h-1):0,f=Math.abs(k)+Math.abs(R)+Math.abs(I),0!==f&&(k/=f,R/=f,I/=f)),0!==f);h++)if(T=Math.sqrt(k*k+R*R+I*I),k<0&&(T=-T),0!==T){for(h!==u?o.set(h,h-1,-T*f):l!==u&&o.set(h,h-1,-o.get(h,h-1)),k+=T,f=k/T,m=R/T,A=I/T,R/=k,I/=k,i=h;i<t;i++)k=o.get(h,i)+R*o.get(h+1,i),y&&(k+=I*o.get(h+2,i),o.set(h+2,i,o.get(h+2,i)-k*A)),o.set(h,i,o.get(h,i)-k*f),o.set(h+1,i,o.get(h+1,i)-k*m);for(n=0;n<=Math.min(b,h+3);n++)k=f*o.get(n,h)+m*o.get(n,h+1),y&&(k+=A*o.get(n,h+2),o.set(n,h+2,o.get(n,h+2)-k*I)),o.set(n,h,o.get(n,h)-k),o.set(n,h+1,o.get(n,h+1)-k*R);for(n=0;n<=x;n++)k=f*s.get(n,h)+m*s.get(n,h+1),y&&(k+=A*s.get(n,h+2),s.set(n,h+2,s.get(n,h+2)-k*I)),s.set(n,h,s.get(n,h)-k),s.set(n,h+1,s.get(n,h+1)-k*R)}}}if(0!==S){for(b=t-1;b>=0;b--)if(k=r[b],R=e[b],0===R)for(l=b,o.set(b,b,1),n=b-1;n>=0;n--){for(c=o.get(n,n)-k,I=0,i=l;i<=b;i++)I+=o.get(n,i)*o.get(i,b);if(e[n]<0)A=c,T=I;else if(l=n,0===e[n]?o.set(n,b,0!==c?-I/c:-I/(E*S)):(f=o.get(n,n+1),m=o.get(n+1,n),R=(r[n]-k)*(r[n]-k)+e[n]*e[n],a=(f*T-A*I)/R,o.set(n,b,a),o.set(n+1,b,Math.abs(f)>Math.abs(A)?(-I-c*a)/f:(-T-m*a)/A)),a=Math.abs(o.get(n,b)),E*a*a>1)for(i=n;i<=b;i++)o.set(i,b,o.get(i,b)/a)}else if(R<0)for(l=b-1,Math.abs(o.get(b,b-1))>Math.abs(o.get(b-1,b))?(o.set(b-1,b-1,R/o.get(b,b-1)),o.set(b-1,b,-(o.get(b,b)-k)/o.get(b,b-1))):(M=Z(0,-o.get(b-1,b),o.get(b-1,b-1)-k,R),o.set(b-1,b-1,M[0]),o.set(b-1,b,M[1])),o.set(b,b-1,0),o.set(b,b,1),n=b-2;n>=0;n--){for(g=0,w=0,i=l;i<=b;i++)g+=o.get(n,i)*o.get(i,b-1),w+=o.get(n,i)*o.get(i,b);if(c=o.get(n,n)-k,e[n]<0)A=c,I=g,T=w;else if(l=n,0===e[n]?(M=Z(-g,-w,c,R),o.set(n,b-1,M[0]),o.set(n,b,M[1])):(f=o.get(n,n+1),m=o.get(n+1,n),p=(r[n]-k)*(r[n]-k)+e[n]*e[n]-R*R,d=2*(r[n]-k)*R,0===p&&0===d&&(p=E*S*(Math.abs(c)+Math.abs(R)+Math.abs(f)+Math.abs(m)+Math.abs(A))),M=Z(f*I-A*g+R*w,f*T-A*w-R*g,p,d),o.set(n,b-1,M[0]),o.set(n,b,M[1]),Math.abs(f)>Math.abs(A)+Math.abs(R)?(o.set(n+1,b-1,(-g-c*o.get(n,b-1)+R*o.get(n,b))/f),o.set(n+1,b,(-w-c*o.get(n,b)-R*o.get(n,b-1))/f)):(M=Z(-I-m*o.get(n,b-1),-T-m*o.get(n,b),A,R),o.set(n+1,b-1,M[0]),o.set(n+1,b,M[1]))),a=Math.max(Math.abs(o.get(n,b-1)),Math.abs(o.get(n,b))),E*a*a>1)for(i=n;i<=b;i++)o.set(i,b-1,o.get(i,b-1)/a),o.set(i,b,o.get(i,b)/a)}for(n=0;n<t;n++)if(n<0||n>x)for(i=n;i<t;i++)s.set(n,i,o.get(n,i));for(i=t-1;i>=0;i--)for(n=0;n<=x;n++){for(A=0,h=0;h<=Math.min(i,x);h++)A+=s.get(n,h)*o.get(h,i);s.set(n,i,A)}}}(n,l,h,i,t)}this.n=n,this.e=l,this.d=h,this.V=i}get realEigenvalues(){return Array.from(this.d)}get imaginaryEigenvalues(){return Array.from(this.e)}get eigenvectorMatrix(){return this.V}get diagonalMatrix(){let t,e,r=this.n,s=this.e,o=this.d,n=new k(r,r);for(t=0;t<r;t++){for(e=0;e<r;e++)n.set(t,e,0);n.set(t,t,o[t]),s[t]>0?n.set(t,t+1,s[t]):s[t]<0&&n.set(t,t-1,s[t])}return n}}function Z(t,e,r,s){let o,n;return Math.abs(r)>Math.abs(s)?(o=s/r,n=r+o*s,[(t+o*e)/n,(e-o*t)/n]):(o=r/s,n=s+o*r,[(o*t+e)/n,(o*e-t)/n])}class tt{constructor(t){if(!(t=F.checkMatrix(t)).isSymmetric())throw new Error(\"Matrix is not symmetric\");let e,r,s,o=t,n=o.rows,i=new k(n,n),h=!0;for(r=0;r<n;r++){let t=0;for(s=0;s<r;s++){let n=0;for(e=0;e<s;e++)n+=i.get(s,e)*i.get(r,e);n=(o.get(r,s)-n)/i.get(s,s),i.set(r,s,n),t+=n*n}for(t=o.get(r,r)-t,h&=t>0,i.set(r,r,Math.sqrt(Math.max(t,0))),s=r+1;s<n;s++)i.set(r,s,0)}this.L=i,this.positiveDefinite=Boolean(h)}isPositiveDefinite(){return this.positiveDefinite}solve(t){t=F.checkMatrix(t);let e=this.L,r=e.rows;if(t.rows!==r)throw new Error(\"Matrix dimensions do not match\");if(!1===this.isPositiveDefinite())throw new Error(\"Matrix is not positive definite\");let s,o,n,i=t.columns,h=t.clone();for(n=0;n<r;n++)for(o=0;o<i;o++){for(s=0;s<n;s++)h.set(n,o,h.get(n,o)-h.get(s,o)*e.get(n,s));h.set(n,o,h.get(n,o)/e.get(n,n))}for(n=r-1;n>=0;n--)for(o=0;o<i;o++){for(s=n+1;s<r;s++)h.set(n,o,h.get(n,o)-h.get(s,o)*e.get(s,n));h.set(n,o,h.get(n,o)/e.get(n,n))}return h}get lowerTriangularMatrix(){return this.L}}class et{constructor(t,e={}){t=F.checkMatrix(t);let{Y:r}=e;const{scaleScores:s=!1,maxIterations:o=1e3,terminationCriteria:n=1e-10}=e;let i;if(r){if(r=Array.isArray(r)&&\"number\"==typeof r[0]?k.columnVector(r):F.checkMatrix(r),!r.isColumnVector()||r.rows!==t.rows)throw new Error(\"Y must be a column vector of length X.rows\");i=r}else i=t.getColumnVector(0);let h,l,u,a,c=1;for(let e=0;e<o&&c>n;e++)u=t.transpose().mmul(i).div(i.transpose().mmul(i).get(0,0)),u=u.div(u.norm()),h=t.mmul(u).div(u.transpose().mmul(u).get(0,0)),e>0&&(c=h.clone().sub(a).pow(2).sum()),a=h.clone(),r?(l=r.transpose().mmul(h).div(h.transpose().mmul(h).get(0,0)),l=l.div(l.norm()),i=r.mmul(l).div(l.transpose().mmul(l).get(0,0))):i=h;if(r){let e=t.transpose().mmul(h).div(h.transpose().mmul(h).get(0,0));e=e.div(e.norm());let s=t.clone().sub(h.clone().mmul(e.transpose())),o=i.transpose().mmul(h).div(h.transpose().mmul(h).get(0,0)),n=r.clone().sub(h.clone().mulS(o.get(0,0)).mmul(l.transpose()));this.t=h,this.p=e.transpose(),this.w=u.transpose(),this.q=l,this.u=i,this.s=h.transpose().mmul(h),this.xResidual=s,this.yResidual=n,this.betas=o}else this.w=u.transpose(),this.s=h.transpose().mmul(h).sqrt(),this.t=s?h.clone().div(this.s.get(0,0)):h,this.xResidual=t.sub(h.mmul(u.transpose()))}}},842:(t,e,r)=>{\"use strict\";r.d(e,{Z:()=>s});class s{constructor(t=[],e=o){if(this.data=t,this.length=this.data.length,this.compare=e,this.length>0)for(let t=(this.length>>1)-1;t>=0;t--)this._down(t)}push(t){this.data.push(t),this.length++,this._up(this.length-1)}pop(){if(0===this.length)return;const t=this.data[0],e=this.data.pop();return this.length--,this.length>0&&(this.data[0]=e,this._down(0)),t}peek(){return this.data[0]}_up(t){const{data:e,compare:r}=this,s=e[t];for(;t>0;){const o=t-1>>1,n=e[o];if(r(s,n)>=0)break;e[t]=n,t=o}e[t]=s}_down(t){const{data:e,compare:r}=this,s=this.length>>1,o=e[t];for(;t<s;){let s=1+(t<<1),n=e[s];const i=s+1;if(i<this.length&&r(e[i],n)<0&&(s=i,n=e[i]),r(n,o)>=0)break;e[t]=n,t=s}e[t]=o}}function o(t,e){return t<e?-1:t>e?1:0}},902:(t,e,r)=>{const{Matrix:s,inverse:o}=r(331),{solveHomography:n}=r(450);t.exports={estimate:({screenCoords:t,worldCoords:e,projectionTransform:r})=>{const i=n(e.map((t=>[t.x,t.y])),t.map((t=>[t.x,t.y]))),h=new s([[i[0],i[1],i[2]],[i[3],i[4],i[5]],[i[6],i[7],i[8]]]),l=new s(r),u=o(l).mmul(h).to1DArray(),a=Math.sqrt(u[0]*u[0]+u[3]*u[3]+u[6]*u[6]),c=Math.sqrt(u[1]*u[1]+u[4]*u[4]+u[7]*u[7]),f=(a+c)/2,m=[];m[0]=u[0]/a,m[3]=u[3]/a,m[6]=u[6]/a,m[1]=u[1]/c,m[4]=u[4]/c,m[7]=u[7]/c,m[2]=m[3]*m[7]-m[6]*m[4],m[5]=m[6]*m[1]-m[0]*m[7],m[8]=m[0]*m[4]-m[1]*m[3];const g=Math.sqrt(m[2]*m[2]+m[5]*m[5]+m[8]*m[8]);m[2]/=g,m[5]/=g,m[8]/=g;const w=[];return w[0]=u[2]/f,w[1]=u[5]/f,w[2]=u[8]/f,[[m[0],m[1],m[2],w[0]],[m[3],m[4],m[5],w[1]],[m[6],m[7],m[8],w[2]]]}}},421:(t,e,r)=>{const{estimate:s}=r(902),{refineEstimate:o}=r(269);t.exports={Estimator:class{constructor(t){this.projectionTransform=t}estimate({screenCoords:t,worldCoords:e}){return s({screenCoords:t,worldCoords:e,projectionTransform:this.projectionTransform})}refineEstimate({initialModelViewTransform:t,worldCoords:e,screenCoords:r}){return o({initialModelViewTransform:t,worldCoords:e,screenCoords:r,projectionTransform:this.projectionTransform})}}}},269:(t,e,r)=>{const{Matrix:s,inverse:o}=r(331),{normalizePoints:n,applyModelViewProjectionTransform:i,buildModelViewProjectionTransform:h,computeScreenCoordiate:l}=r(420);let u=[[],[],[]],a=[[],[]],c=[[],[],[]];const f=({initialModelViewTransform:t,projectionTransform:e,worldCoords:r,screenCoords:s,inlierProb:o})=>{const n=o<1;let i=t,u=0,a=0,c=new Array(r.length),f=new Array(r.length),p=new Array(r.length),d=new Array(r.length);for(let t=0;t<=10;t++){const y=h(e,i);for(let t=0;t<r.length;t++){const e=l(y,r[t].x,r[t].y,r[t].z),o=s[t].x-e.x,n=s[t].y-e.y;p[t]=o,d[t]=n,c[t]=o*o+n*n}let M;if(a=0,n){const t=Math.max(3,Math.floor(r.length*o)-1);for(let t=0;t<r.length;t++)f[t]=c[t];f.sort(((t,e)=>t-e)),M=Math.max(4*f[t],16);for(let t=0;t<r.length;t++)f[t]>M?a+=M/6:a+=M/6*(1-(1-f[t]/M)*(1-f[t]/M)*(1-f[t]/M))}else for(let t=0;t<r.length;t++)a+=c[t];if(a/=r.length,a<.1)break;if(t>0&&a/u>.99)break;if(10===t)break;u=a;const b=[],x=[];for(let t=0;t<r.length;t++){if(n&&c[t]>M)continue;const s=w({modelViewProjectionTransform:y,modelViewTransform:i,projectionTransform:e,worldCoord:r[t]});if(n){const e=(1-c[t]/M)*(1-c[t]/M);for(let t=0;t<2;t++)for(let r=0;r<6;r++)s[t][r]*=e;b.push([p[t]*e]),b.push([d[t]*e])}else b.push([p[t]]),b.push([d[t]]);for(let t=0;t<s.length;t++)x.push(s[t])}const E=g({dU:b,J_U_S:x});if(null===E)break;i=m({modelViewTransform:i,dS:E})}return{modelViewTransform:i,err:a}},m=({modelViewTransform:t,dS:e})=>{let r,s,o,n=e[0]*e[0]+e[1]*e[1]+e[2]*e[2];n<1e-6?(r=1,s=0,o=0,n=0):(n=Math.sqrt(n),r=e[0]/n,s=e[1]/n,o=e[2]/n);const i=Math.cos(n),h=Math.sin(n),l=1-i;u[0][0]=r*r*l+i,u[0][1]=r*s*l-o*h,u[0][2]=r*o*l+s*h,u[0][3]=e[3],u[1][0]=s*r*l+o*h,u[1][1]=s*s*l+i,u[1][2]=s*o*l-r*h,u[1][3]=e[4],u[2][0]=o*r*l-s*h,u[2][1]=o*s*l+r*h,u[2][2]=o*o*l+i,u[2][3]=e[5];const a=[[],[],[]];for(let e=0;e<3;e++){for(let r=0;r<4;r++)a[e][r]=t[e][0]*u[0][r]+t[e][1]*u[1][r]+t[e][2]*u[2][r];a[e][3]+=t[e][3]}return a},g=({dU:t,J_U_S:e})=>{const r=new s(e),n=new s(t),i=r.transpose(),h=i.mmul(r),l=i.mmul(n);let u;try{u=o(h)}catch(t){return null}return u.mmul(l).to1DArray()},w=({modelViewProjectionTransform:t,modelViewTransform:e,projectionTransform:r,worldCoord:s})=>{const o=e,{x:n,y:h,z:l}=s,u=i(t,n,h,l),f=u.z*u.z;a[0][0]=r[0][0]*u.z/f,a[0][1]=r[0][1]*u.z/f,a[0][2]=(r[0][2]*u.z-r[2][2]*u.x)/f,a[1][0]=r[1][0]*u.z/f,a[1][1]=r[1][1]*u.z/f,a[1][2]=(r[1][2]*u.z-r[2][2]*u.y)/f,c[0][0]=o[0][2]*h,c[0][1]=-o[0][2]*n,c[0][2]=o[0][1]*n-o[0][0]*h,c[0][3]=o[0][0],c[0][4]=o[0][1],c[0][5]=o[0][2],c[1][0]=o[1][2]*h,c[1][1]=-o[1][2]*n,c[1][2]=o[1][1]*n-o[1][0]*h,c[1][3]=o[1][0],c[1][4]=o[1][1],c[1][5]=o[1][2],c[2][0]=o[2][2]*h,c[2][1]=-o[2][2]*n,c[2][2]=o[2][1]*n-o[2][0]*h,c[2][3]=o[2][0],c[2][4]=o[2][1],c[2][5]=o[2][2];const m=[[],[]];for(let t=0;t<2;t++)for(let e=0;e<6;e++){m[t][e]=0;for(let r=0;r<3;r++)m[t][e]+=a[t][r]*c[r][e]}return m};t.exports={refineEstimate:({initialModelViewTransform:t,projectionTransform:e,worldCoords:r,screenCoords:s})=>{let o=0,n=0;for(let t=0;t<r.length;t++)o+=r[t].x,n+=r[t].y;o/=r.length,n/=r.length;const i=[];for(let t=0;t<r.length;t++)i.push({x:r[t].x-o,y:r[t].y-n,z:r[t].z});const h=[[],[],[]];for(let e=0;e<3;e++)for(let r=0;r<3;r++)h[e][r]=t[e][r];h[0][3]=t[0][0]*o+t[0][1]*n+t[0][3],h[1][3]=t[1][0]*o+t[1][1]*n+t[1][3],h[2][3]=t[2][0]*o+t[2][1]*n+t[2][3];const l=[1,.8,.6,.4,0];let u=h,a=null;for(let t=0;t<l.length;t++){const r=f({initialModelViewTransform:u,projectionTransform:e,worldCoords:i,screenCoords:s,inlierProb:l[t]});if(u=r.modelViewTransform,r.err<5){a=u;break}}return null===a?null:(a[0][3]=a[0][3]-a[0][0]*o-a[0][1]*n,a[1][3]=a[1][3]-a[1][0]*o-a[1][1]*n,a[2][3]=a[2][3]-a[2][0]*o-a[2][1]*n,a)}}},420:t=>{const e=(t,e,r,s)=>({x:t[0][0]*e+t[0][1]*r+t[0][3],y:t[1][0]*e+t[1][1]*r+t[1][3],z:t[2][0]*e+t[2][1]*r+t[2][3]});t.exports={buildModelViewProjectionTransform:(t,e)=>[[t[0][0]*e[0][0]+t[0][2]*e[2][0],t[0][0]*e[0][1]+t[0][2]*e[2][1],t[0][0]*e[0][2]+t[0][2]*e[2][2],t[0][0]*e[0][3]+t[0][2]*e[2][3]],[t[1][1]*e[1][0]+t[1][2]*e[2][0],t[1][1]*e[1][1]+t[1][2]*e[2][1],t[1][1]*e[1][2]+t[1][2]*e[2][2],t[1][1]*e[1][3]+t[1][2]*e[2][3]],[e[2][0],e[2][1],e[2][2],e[2][3]]],applyModelViewProjectionTransform:e,computeScreenCoordiate:(t,r,s,o)=>{const{x:n,y:i,z:h}=e(t,r,s);return{x:n/h,y:i/h}}}},233:t=>{t.exports={compute:t=>{const{v1:e,v2:r}=t;let s=0;for(let t=0;t<e.length;t++){let i=(e[t]^r[t])>>>0;s+=(n=void 0,((n=((n=((n=((n=(o=i)-(o>>1&1431655765))>>2&858993459)+(858993459&n))>>4)+n&252645135)>>8)+n&16711935)>>16)+n&65535)}var o,n;return s}}},934:t=>{const e=({querypoint:t,keypoint:e,keycenterX:r,keycenterY:s,scaleOneOverLogK:o})=>{let n=t.angle-e.angle;n<=-Math.PI?n+=2*Math.PI:n>Math.PI&&(n-=2*Math.PI);const i=t.scale/e.scale,h=i*Math.cos(n),l=i*Math.sin(n),u=[h,-l,l,h],a=[u[0]*e.x+u[1]*e.y,u[2]*e.x+u[3]*e.y],c=t.x-a[0],f=t.y-a[1];return{x:u[0]*r+u[1]*s+c,y:u[2]*r+u[3]*s+f,angle:n,scale:Math.log(i)*o}};t.exports={computeHoughMatches:t=>{const{keywidth:r,keyheight:s,querywidth:o,queryheight:n,matches:i}=t,h=1.2*o,l=-h,u=1.2*n,a=-u,c=12,f=1/Math.log(10),m=Math.max(r,s),g=Math.floor(r/2),w=Math.floor(s/2),p=[];for(let t=0;t<i.length;t++){const e=i[t].querypoint.scale,r=i[t].keypoint.scale;0==r&&console.log(\"ERROR divide zero\");const s=e/r;p.push(s*m)}p.sort(((t,e)=>t-e));const d=.25*p[Math.floor(p.length/2)-(p.length%2==0?1:0)-1],y=Math.max(5,Math.ceil((h-l)/d)),M=Math.max(5,Math.ceil((u-a)/d)),b=y*M,x=b*c,E=[],v=[],S={};for(let t=0;t<i.length;t++){const r=i[t].querypoint,s=i[t].keypoint,{x:o,y:n,scale:m,angle:p}=e({querypoint:r,keypoint:s,keycenterX:g,keycenterY:w,scaleOneOverLogK:f});if(o<l||o>=h||n<a||n>=u||p<=-Math.PI||p>Math.PI||m<-1||m>=1){E[t]=!1;continue}let d=y*(o-l)/(h-l),k=M*(n-a)/(u-a),R=c*(p+Math.PI)/(2*Math.PI),I=10*(m- -1)/2;v[t]={binX:d,binY:k,binAngle:R,binScale:I};let T=Math.floor(d-.5),A=Math.floor(k-.5),q=Math.floor(I-.5),C=(Math.floor(R-.5)+c)%c;if(T<0||T+1>=y||A<0||A+1>=M||q<0||q+1>=10)E[t]=!1;else{for(let t=0;t<2;t++){let e=T+t;for(let t=0;t<2;t++){let r=A+t;for(let t=0;t<2;t++){let s=(C+t)%c;for(let t=0;t<2;t++){const o=e+r*y+s*b+(q+t)*x;void 0===S[o]&&(S[o]=0),S[o]+=1}}}}E[t]=!0}}let k=0,R=-1;if(Object.keys(S).forEach((t=>{S[t]>k&&(k=S[t],R=t)})),k<3)return[];const I=Math.floor(R%x%b%y),T=Math.floor((R-I)%x%b/y),A=Math.floor((R-I-T*y)%x/b),q=Math.floor((R-I-T*y-A*b)/x),C=[];for(let t=0;t<i.length;t++){if(!E[t])continue;const e=v[t];if(Math.abs(e.binX-(I+.5))>=1)continue;if(Math.abs(e.binY-(T+.5))>=1)continue;if(Math.abs(e.binScale-(q+.5))>=1)continue;const r=Math.abs(e.binAngle-(A+.5));Math.min(r,c-r)>=1||C.push(i[t])}return C}}},582:(t,e,r)=>{const{match:s}=r(492);t.exports={Matcher:class{constructor(t,e,r=!1){this.queryWidth=t,this.queryHeight=e,this.debugMode=r}matchDetection(t,e){let r={frames:[]},o=null;for(let n=0;n<t.length;n++){const{H:i,matches:h,debugExtra:l}=s({keyframe:t[n],querypoints:e,querywidth:this.queryWidth,queryheight:this.queryHeight,debugMode:this.debugMode});r.frames.push(l),i&&(null===o||o.matches.length<h.length)&&(o={keyframeIndex:n,H:i,matches:h})}if(null===o)return{keyframeIndex:-1,debugExtra:r};const n=[],i=[],h=t[o.keyframeIndex];for(let t=0;t<o.matches.length;t++){const e=o.matches[t].querypoint,r=o.matches[t].keypoint;n.push({x:e.x,y:e.y}),i.push({x:(r.x+.5)/h.scale,y:(r.y+.5)/h.scale,z:0})}return{screenCoords:n,worldCoords:i,keyframeIndex:o.keyframeIndex,debugExtra:r}}}}},492:(t,e,r)=>{const s=r(842).Z,{compute:o}=r(233),{computeHoughMatches:n}=r(934),{computeHomography:i}=r(838),{multiplyPointHomographyInhomogenous:h,matrixInverse33:l}=r(289),u=({node:t,keypoints:e,querypoint:r,queue:s,keypointIndexes:n,numPop:i})=>{if(t.leaf){for(let e=0;e<t.pointIndexes.length;e++)n.push(t.pointIndexes[e]);return}const h=[];for(let s=0;s<t.children.length;s++){const n=t.children[s].centerPointIndex,i=o({v1:e[n].descriptors,v2:r.descriptors});h.push(i)}let l=Number.MAX_SAFE_INTEGER;for(let e=0;e<t.children.length;e++)l=Math.min(l,h[e]);for(let e=0;e<t.children.length;e++)h[e]!==l&&s.push({node:t.children[e],d:h[e]});for(let o=0;o<t.children.length;o++)h[o]===l&&u({node:t.children[o],keypoints:e,querypoint:r,queue:s,keypointIndexes:n,numPop:i});if(i<8&&s.length>0){const{node:t,d:o}=s.pop();u({node:t,keypoints:e,querypoint:r,queue:s,keypointIndexes:n,numPop:i+=1})}},a=t=>{const{H:e,matches:r,threshold:s}=t,o=s*s,n=[];for(let t=0;t<r.length;t++){const s=r[t].querypoint,i=r[t].keypoint,l=h([i.x,i.y],e);(l[0]-s.x)*(l[0]-s.x)+(l[1]-s.y)*(l[1]-s.y)<=o&&n.push(r[t])}return n};t.exports={match:({keyframe:t,querypoints:e,querywidth:r,queryheight:c,debugMode:f})=>{let m={};const g=[];for(let r=0;r<e.length;r++){const n=e[r],i=n.maxima?t.maximaPoints:t.minimaPoints;if(0===i.length)continue;const h=n.maxima?t.maximaPointsCluster.rootNode:t.minimaPointsCluster.rootNode,l=[],a=new s([],((t,e)=>t.d-e.d));u({node:h,keypoints:i,querypoint:n,queue:a,keypointIndexes:l,numPop:0});let c=-1,f=Number.MAX_SAFE_INTEGER,m=Number.MAX_SAFE_INTEGER;for(let t=0;t<l.length;t++){const e=i[l[t]],r=o({v1:e.descriptors,v2:n.descriptors});r<f?(m=f,f=r,c=l[t]):r<m&&(m=r)}-1!==c&&(m===Number.MAX_SAFE_INTEGER||1*f/m<.7)&&g.push({querypoint:n,keypoint:i[c]})}if(f&&(m.matches=g),g.length<6)return{debugExtra:m};const w=n({keywidth:t.width,keyheight:t.height,querywidth:r,queryheight:c,matches:g});f&&(m.houghMatches=w);const p=i({srcPoints:w.map((t=>[t.keypoint.x,t.keypoint.y])),dstPoints:w.map((t=>[t.querypoint.x,t.querypoint.y])),keyframe:t});if(null===p)return{debugExtra:m};const d=a({H:p,matches:w,threshold:3});if(f&&(m.inlierMatches=d),d.length<6)return{debugExtra:m};const y=l(p,1e-5),M=[];for(let r=0;r<e.length;r++){const s=e[r],n=h([s.x,s.y],y);let i=-1,l=Number.MAX_SAFE_INTEGER,u=Number.MAX_SAFE_INTEGER;const a=s.maxima?t.maximaPoints:t.minimaPoints;for(let t=0;t<a.length;t++){const e=a[t];if((e.x-n[0])*(e.x-n[0])+(e.y-n[1])*(e.y-n[1])>100)continue;const r=o({v1:e.descriptors,v2:s.descriptors});r<l?(u=l,l=r,i=t):r<u&&(u=r)}-1!==i&&(u===Number.MAX_SAFE_INTEGER||1*l/u<.7)&&M.push({querypoint:s,keypoint:a[i]})}f&&(m.matches2=M);const b=n({keywidth:t.width,keyheight:t.height,querywidth:r,queryheight:c,matches:M});f&&(m.houghMatches2=b);const x=i({srcPoints:b.map((t=>[t.keypoint.x,t.keypoint.y])),dstPoints:b.map((t=>[t.querypoint.x,t.querypoint.y])),keyframe:t});if(null===x)return{debugExtra:m};const E=a({H:x,matches:b,threshold:3});return f&&(m.inlierMatches2=E),{H:x,matches:E,debugExtra:m}}}},838:(t,e,r)=>{const{Matrix:s,inverse:o}=r(331),{createRandomizer:n}=r(48),{quadrilateralConvex:i,matrixInverse33:h,smallestTriangleArea:l,multiplyPointHomographyInhomogenous:u,checkThreePointsConsistent:a,checkFourPointsConsistent:c,determinant:f}=r(289),{solveHomography:m}=r(450),g=({H:t,testPoints:e,keyframe:r})=>{const s=h(t,1e-5);if(null===s)return!1;const o=[];for(let t=0;t<e.length;t++)o.push(u(e[t],s));return!(l(o[0],o[1],o[2],o[3])<r.width*r.height*1e-4||!i(o[0],o[1],o[2],o[3]))},w=({inH:t})=>{const e=1/t[8],r=[];for(let s=0;s<8;s++)r[s]=t[s]*e;return r[8]=1,r},p=({H:t,srcPoint:e,dstPoint:r,oneOverScale2:s})=>{const o=u(e,t),n=[o[0]-r[0],o[1]-r[1]];return Math.log(1+(n[0]*n[0]+n[1]*n[1])*s)},d=({H:t,testPoints:e})=>{const r=[];for(let s=0;s<e.length;s++)r[s]=u(e[s],t);for(let t=0;t<e.length;t++){const s=t,o=(t+1)%e.length,n=(t+2)%e.length;if(!a(e[s],e[o],e[n],r[s],r[o],r[n]))return!1}return!0};t.exports={computeHomography:t=>{const{srcPoints:e,dstPoints:r,keyframe:s,quickMode:o}=t,i=[[0,0],[s.width,0],[s.width,s.height],[0,s.height]];if(e.length<4)return null;const h=Math.min(10,e.length),l=n(),u=[];for(let t=0;t<e.length;t++)u[t]=t;l.arrayShuffle({arr:u,sampleSize:u.length});const a=o?10:20,f=2*a;let y=0;const M=[];for(;y<f&&M.length<a;){if(y+=1,l.arrayShuffle({arr:u,sampleSize:4}),!c(e[u[0]],e[u[1]],e[u[2]],e[u[3]],r[u[0]],r[u[1]],r[u[2]],r[u[3]]))continue;const t=m([e[u[0]],e[u[1]],e[u[2]],e[u[3]]],[r[u[0]],r[u[1]],r[u[2]],r[u[3]]]);null!==t&&d({H:t,testPoints:i})&&M.push(t)}if(0===M.length)return null;const b=[];for(let t=0;t<M.length;t++)b.push({H:M[t],cost:0});let x=h;for(let t=0;t<e.length&&b.length>2;t+=x){x=Math.min(h,e.length-t);let s=t+x;for(let o=0;o<b.length;o++)for(let n=t;n<s;n++){const t=p({H:b[o].H,srcPoint:e[n],dstPoint:r[n],oneOverScale2:1e4});b[o].cost+=t}b.sort(((t,e)=>t.cost-e.cost)),b.splice(-Math.floor((b.length+1)/2))}let E=null;for(let t=0;t<b.length;t++){const e=w({inH:b[t].H});if(g({H:e,testPoints:i,keyframe:s})){E=e;break}}return E}}},289:t=>{const e=(t,e,r)=>(e[0]-t[0])*(r[1]-t[1])-(e[1]-t[1])*(r[0]-t[0]),r=t=>{const e=t[4]*t[8]-t[5]*t[7],r=t[3]*t[8]-t[5]*t[6],s=t[3]*t[7]-t[4]*t[6];return t[0]*e-t[1]*r+t[2]*s},s=(t,e)=>[t[0]-e[0],t[1]-e[1]],o=(t,e)=>{const r=t[0]*e[1]-t[1]*e[0];return.5*Math.abs(r)};t.exports={matrixInverse33:(t,e)=>{const s=r(t);if(Math.abs(s)<=e)return null;const o=1/s;return[(t[4]*t[8]-t[5]*t[7])*o,(t[2]*t[7]-t[1]*t[8])*o,(t[1]*t[5]-t[2]*t[4])*o,(t[5]*t[6]-t[3]*t[8])*o,(t[0]*t[8]-t[2]*t[6])*o,(t[2]*t[3]-t[0]*t[5])*o,(t[3]*t[7]-t[4]*t[6])*o,(t[1]*t[6]-t[0]*t[7])*o,(t[0]*t[4]-t[1]*t[3])*o]},matrixMul33:(t,e)=>{const r=[];return r[0]=t[0]*e[0]+t[1]*e[3]+t[2]*e[6],r[1]=t[0]*e[1]+t[1]*e[4]+t[2]*e[7],r[2]=t[0]*e[2]+t[1]*e[5]+t[2]*e[8],r[3]=t[3]*e[0]+t[4]*e[3]+t[5]*e[6],r[4]=t[3]*e[1]+t[4]*e[4]+t[5]*e[7],r[5]=t[3]*e[2]+t[4]*e[5]+t[5]*e[8],r[6]=t[6]*e[0]+t[7]*e[3]+t[8]*e[6],r[7]=t[6]*e[1]+t[7]*e[4]+t[8]*e[7],r[8]=t[6]*e[2]+t[7]*e[5]+t[8]*e[8],r},quadrilateralConvex:(t,r,s,o)=>{const n=e(t,r,s)<=0;return e(r,s,o)<=0===n&&e(s,o,t)<=0===n&&e(o,t,r)<=0===n},smallestTriangleArea:(t,e,r,n)=>{const i=s(e,t),h=s(r,t),l=s(n,t),u=s(e,r),a=s(n,r),c=o(i,h),f=o(h,l),m=o(i,l),g=o(u,a);return Math.min(Math.min(Math.min(c,f),m),g)},multiplyPointHomographyInhomogenous:(t,e)=>{const r=e[6]*t[0]+e[7]*t[1]+e[8],s=[];return s[0]=(e[0]*t[0]+e[1]*t[1]+e[2])/r,s[1]=(e[3]*t[0]+e[4]*t[1]+e[5])/r,s},checkThreePointsConsistent:(t,r,s,o,n,i)=>e(t,r,s)>0==e(o,n,i)>0,checkFourPointsConsistent:(t,r,s,o,n,i,h,l)=>e(t,r,s)>0==e(n,i,h)>0&&e(r,s,o)>0==e(i,h,l)>0&&e(s,o,t)>0==e(h,l,n)>0&&e(o,t,r)>0==e(l,n,i)>0,determinant:r}},450:(t,e,r)=>{const{Matrix:s,inverse:o}=r(331),n=t=>{let e=0,r=0;for(let s=0;s<t.length;s++)e+=t[s][0],r+=t[s][1];let s=e/t.length,o=r/t.length,n=0;for(let e=0;e<t.length;e++){const r=t[e][0]-s,i=t[e][1]-o;n+=Math.sqrt(r*r+i*i)}let i=Math.sqrt(2)*t.length/n;const h=[];for(let e=0;e<t.length;e++)h.push([(t[e][0]-s)*i,(t[e][1]-o)*i]);return{normPoints:h,param:{meanX:s,meanY:o,s:i}}};t.exports={solveHomography:(t,e)=>{const{normPoints:r,param:i}=n(t),{normPoints:h,param:l}=n(e),u=h.length,a=[],c=[];for(let t=0;t<u;t++){const e=[r[t][0],r[t][1],1,0,0,0,-r[t][0]*h[t][0],-r[t][1]*h[t][0]],s=[0,0,0,r[t][0],r[t][1],1,-r[t][0]*h[t][1],-r[t][1]*h[t][1]];a.push(e),a.push(s),c.push([h[t][0]]),c.push([h[t][1]])}try{const t=new s(a),e=new s(c),r=t.transpose(),n=r.mmul(t),h=r.mmul(e);return((t,e,r)=>{const s=r.s*r.meanX,o=r.s*r.meanY,n=[t[0]+s*t[6],t[1]+s*t[7],(t[0]+s*t[6])*-e.meanX+(t[1]+s*t[7])*-e.meanY+(t[2]+s)/e.s,t[3]+o*t[6],t[4]+o*t[7],(t[3]+o*t[6])*-e.meanX+(t[4]+o*t[7])*-e.meanY+(t[5]+o)/e.s,r.s*t[6],r.s*t[7],r.s*t[6]*-e.meanX+r.s*t[7]*-e.meanY+r.s/e.s];for(let t=0;t<9;t++)n[t]=n[t]/n[8];return n})(o(n).mmul(h).to1DArray(),i,l)}catch(t){return null}}}},48:t=>{t.exports={createRandomizer:()=>({seed:1234,arrayShuffle(t){const{arr:e,sampleSize:r}=t;for(let t=0;t<r;t++){this.seed=(214013*this.seed+2531011)%(1<<31);let r=this.seed>>16&32767;r%=e.length;let s=e[t];e[t]=e[r],e[r]=s}},nextInt(t){this.seed=(214013*this.seed+2531011)%(1<<31);let e=this.seed>>16&32767;return e%=t,e}})}}},e={};function r(s){if(e[s])return e[s].exports;var o=e[s]={exports:{}};return t[s](o,o.exports,r),o.exports}r.d=(t,e)=>{for(var s in e)r.o(e,s)&&!r.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:e[s]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.r=t=>{\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(t,\"__esModule\",{value:!0})},(()=>{const{Matcher:t}=r(582),{Estimator:e}=r(421);let s=null,o=null,n=!1,i=null,h=null;onmessage=r=>{const{data:l}=r;if(\"setup\"===l.type)s=l.projectionTransform,o=l.matchingDataList,n=l.debugMode,i=new t(l.inputWidth,l.inputHeight,n),h=new e(l.projectionTransform);else if(\"match\"===l.type){const t=l.targetIndexes;let e=-1,r=null,s=null;for(let n=0;n<t.length;n++){const u=t[n],{keyframeIndex:a,screenCoords:c,worldCoords:f,debugExtra:m}=i.matchDetection(o[u],l.featurePoints);if(s=m,-1!==a){const t=h.estimate({screenCoords:c,worldCoords:f});t&&(e=u,r=t);break}}postMessage({type:\"matchDone\",targetIndex:e,modelViewTransform:r,debugExtra:s})}else if(\"trackUpdate\"===l.type){const{modelViewTransform:t,worldCoords:e,screenCoords:r}=l,s=h.refineEstimate({initialModelViewTransform:t,worldCoords:e,screenCoords:r});postMessage({type:\"trackUpdateDone\",modelViewTransform:s})}}})()})();',n.p+\"controller.worker.prod.js\")}},69855:t=>{\"use strict\";var e=window.URL||window.webkitURL;t.exports=function(t,n){try{try{var r;try{(r=new(window.BlobBuilder||window.WebKitBlobBuilder||window.MozBlobBuilder||window.MSBlobBuilder)).append(t),r=r.getBlob()}catch(e){r=new Blob([t])}return new Worker(e.createObjectURL(r))}catch(e){return new Worker(\"data:application/javascript,\"+encodeURIComponent(t))}}catch(t){if(!n)throw Error(\"Inline worker is not supported\");return new Worker(n)}}},95217:(t,e,n)=>{const r=n(80383),{Detector:s}=n(66416),{buildImageList:i,buildTrackingImageList:a}=n(17508),{build:o}=n(80723),l=n(61113),u=n(75042),c=async(t,e)=>{const n=[];for(let r=0;r<t.length;r++){const i=t[r],a=new s(i.width,i.height);await u.nextFrame(),u.tidy((()=>{const t=u.tensor(i.data,[i.data.length],\"float32\").reshape([i.height,i.width]),{featurePoints:s}=a.detect(t),l=s.filter((t=>t.maxima)),c=s.filter((t=>!t.maxima)),h=o({points:l}),d=o({points:c});n.push({maximaPoints:l,minimaPoints:c,maximaPointsCluster:h,minimaPointsCluster:d,width:i.width,height:i.height,scale:i.scale}),e(r)}))}return n};t.exports={Compiler:class{constructor(){this.data=null}compileImageTargets(t,e){return new Promise((async(n,s)=>{const o=[];for(let e=0;e<t.length;e++){const n=t[e],r=document.createElement(\"canvas\");r.width=n.width,r.height=n.height;const s=r.getContext(\"2d\");s.drawImage(n,0,0,n.width,n.height);const i=s.getImageData(0,0,n.width,n.height),a=new Uint8Array(n.width*n.height);for(let t=0;t<a.length;t++){const e=4*t;a[t]=Math.floor((i.data[e]+i.data[e+1]+i.data[e+2])/3)}const l={data:a,height:n.height,width:n.width};o.push(l)}const l=50/o.length;let u=0;this.data=[];for(let t=0;t<o.length;t++){const n=o[t],r=i(n),s=l/r.length,a=await c(r,(()=>{u+=s,e(u)}));this.data.push({targetImage:n,imageList:r,matchingData:a})}for(let t=0;t<o.length;t++){const e=a(o[t]);this.data[t].trackingImageList=e}const h=await new Promise(((t,n)=>{const s=new r;s.onmessage=n=>{\"progress\"===n.data.type?e(50+n.data.percent):\"compileDone\"===n.data.type&&t(n.data.list)},s.postMessage({type:\"compile\",targetImages:o})}));for(let t=0;t<o.length;t++)this.data[t].trackingData=h[t];n(this.data)}))}exportData(){const t=[];for(let e=0;e<this.data.length;e++)t.push({targetImage:{width:this.data[e].targetImage.width,height:this.data[e].targetImage.height},trackingData:this.data[e].trackingData,matchingData:this.data[e].matchingData});return l.encode({v:2,dataList:t})}importData(t){const e=l.decode(new Uint8Array(t));if(!e.v||2!==e.v)return console.error(\"Your compiled .mind might be outdated. Please recompile\"),[];const{dataList:n}=e;this.data=[];for(let t=0;t<n.length;t++)this.data.push({targetImage:n[t].targetImage,trackingData:n[t].trackingData,matchingData:n[t].matchingData});return this.data}}}},57957:(t,e,n)=>{const r=n(75042),s=n(71077),{Tracker:i}=n(46417),{CropDetector:a}=n(47051),{Compiler:o}=n(95217),{InputLoader:l}=n(37325);t.exports={Controller:class{constructor({inputWidth:t,inputHeight:e,onUpdate:n=null,debugMode:r=!1,maxTrack:i=1}){this.inputWidth=t,this.inputHeight=e,this.maxTrack=i,this.cropDetector=new a(this.inputWidth,this.inputHeight,r),this.inputLoader=new l(this.inputWidth,this.inputHeight),this.markerDimensions=null,this.onUpdate=n,this.debugMode=r,this.processingVideo=!1,this.shouldCaptureRegion=!1,this.capturedRegion=null,this.interestedTargetIndex=-1,this.trackingStates=[];const o=45*Math.PI/180,u=this.inputHeight/2/Math.tan(o/2);this.projectionTransform=[[u,0,this.inputWidth/2],[0,u,this.inputHeight/2],[0,0,1]],this.projectionMatrix=this._glProjectionMatrix({projectionTransform:this.projectionTransform,width:this.inputWidth,height:this.inputHeight,near:10,far:1e5}),this.worker=new s,this.workerMatchDone=null,this.workerTrackDone=null,this.worker.onmessage=t=>{\"matchDone\"===t.data.type&&null!==this.workerMatchDone&&this.workerMatchDone(t.data),\"trackUpdateDone\"===t.data.type&&null!==this.workerTrackDone&&this.workerTrackDone(t.data)}}showTFStats(){console.log(r.memory().numTensors),console.table(r.memory())}addImageTargets(t){return new Promise((async(e,n)=>{const r=await fetch(t),s=await r.arrayBuffer();e(this.addImageTargetsFromBuffer(s))}))}addImageTargetsFromBuffer(t){const e=(new o).importData(t),n=[],r=[],s=[];for(let t=0;t<e.length;t++)r.push(e[t].matchingData),n.push(e[t].trackingData),s.push([e[t].targetImage.width,e[t].targetImage.height]);return this.tracker=new i(s,n,this.projectionTransform,this.inputWidth,this.inputHeight,this.debugMode),this.worker.postMessage({type:\"setup\",inputWidth:this.inputWidth,inputHeight:this.inputHeight,projectionTransform:this.projectionTransform,debugMode:this.debugMode,matchingDataList:r}),this.markerDimensions=s,{dimensions:s,matchingDataList:r,trackingDataList:n}}dummyRun(t){const e=this.inputLoader.loadInput(t);this.cropDetector.detect(e),this.tracker.dummyRun(e),e.dispose()}getProjectionMatrix(){return this.projectionMatrix}getWorldMatrix(t,e){return this._glModelViewMatrix(t,e)}async _detectAndMatch(t,e){const{featurePoints:n}=this.cropDetector.detectMoving(t),{targetIndex:r,modelViewTransform:s}=await this._workerMatch(n,e);return{targetIndex:r,modelViewTransform:s}}async _trackAndUpdate(t,e,n){const{worldCoords:r,screenCoords:s}=this.tracker.track(t,e,n);return r.length<4?null:await this._workerTrackUpdate(e,{worldCoords:r,screenCoords:s})}processVideo(t){if(!this.processingVideo){this.processingVideo=!0,this.trackingStates=[];for(let t=0;t<this.markerDimensions.length;t++)this.trackingStates.push({showing:!1,isTracking:!1,currentModelViewTransform:null,trackCount:0,trackMiss:0});(async()=>{for(;this.processingVideo;){const e=this.inputLoader.loadInput(t);let n=!1;if(this.trackingStates.reduce(((t,e)=>t+(e.isTracking?1:0)),0)<this.maxTrack){const t=[];for(let e=0;e<this.trackingStates.length;e++)!0!==this.trackingStates[e].isTracking&&(-1!==this.interestedTargetIndex&&this.interestedTargetIndex!==e||t.push(e));const{targetIndex:r,modelViewTransform:s}=await this._detectAndMatch(e,t);-1!==r&&(this.trackingStates[r].isTracking=!0,this.trackingStates[r].currentModelViewTransform=s,this.shouldCaptureRegion&&(n=!0))}for(let r=0;r<this.trackingStates.length;r++){const s=this.trackingStates[r];if(s.isTracking){let i=await this._trackAndUpdate(e,s.currentModelViewTransform,r);null===i?s.isTracking=!1:(s.currentModelViewTransform=i,n&&(this.capturedRegion=this.captureRegion(t,i,r)))}if(s.showing||s.isTracking&&(s.trackMiss=0,s.trackCount+=1,s.trackCount>10&&(s.showing=!0,s.trackingMatrix=null)),s.showing&&(s.isTracking?s.trackMiss=0:(s.trackCount=0,s.trackMiss+=1,s.trackMiss>15&&(s.showing=!1,s.trackingMatrix=null,this.onUpdate&&this.onUpdate({type:\"updateMatrix\",targetIndex:r,worldMatrix:null})))),s.showing){const t=this._glModelViewMatrix(s.currentModelViewTransform,r);if(null===s.trackingMatrix)s.trackingMatrix=t;else for(let e=0;e<t.length;e++)s.trackingMatrix[e]=s.trackingMatrix[e]+(t[e]-s.trackingMatrix[e])/5;const e=[];for(let n=0;n<t.length;n++)e[n]=s.trackingMatrix[n];this.onUpdate&&this.onUpdate({type:\"updateMatrix\",targetIndex:r,worldMatrix:e})}}e.dispose(),this.onUpdate&&this.onUpdate({type:\"processDone\"}),await r.nextFrame()}})()}}stopProcessVideo(){this.processingVideo=!1}async detect(t){const e=this.inputLoader.loadInput(t),{featurePoints:n,debugExtra:r}=await this.cropDetector.detect(e);return e.dispose(),{featurePoints:n,debugExtra:r}}async match(t,e){const{modelViewTransform:n,debugExtra:r}=await this._workerMatch(t,[e]);return{modelViewTransform:n,debugExtra:r}}async track(t,e,n){const r=this.inputLoader.loadInput(t),s=this.tracker.track(r,e,n);return r.dispose(),s}captureRegion(t,e,n){const s=r.browser.fromPixels(t),i=this.markerDimensions[n],a=Math.floor(800*i[1]/i[0]),o=this.tracker.captureRegion(s,e,n,800,a);return s.dispose(),o}async trackUpdate(t,e){return e.worldCoords.length<4?null:await this._workerTrackUpdate(t,e)}_workerMatch(t,e){return new Promise((async(n,r)=>{this.workerMatchDone=t=>{n({targetIndex:t.targetIndex,modelViewTransform:t.modelViewTransform,debugExtra:t.debugExtra})},this.worker.postMessage({type:\"match\",featurePoints:t,targetIndexes:e})}))}_workerTrackUpdate(t,e){return new Promise((async(n,r)=>{this.workerTrackDone=t=>{n(t.modelViewTransform)};const{worldCoords:s,screenCoords:i}=e;this.worker.postMessage({type:\"trackUpdate\",modelViewTransform:t,worldCoords:s,screenCoords:i})}))}_glModelViewMatrix(t,e){const n=this.markerDimensions[e][1];return[t[0][0],-t[1][0],-t[2][0],0,-t[0][1],t[1][1],t[2][1],0,-t[0][2],t[1][2],t[2][2],0,t[0][1]*n+t[0][3],-(t[1][1]*n+t[1][3]),-(t[2][1]*n+t[2][3]),1]}_glProjectionMatrix({projectionTransform:t,width:e,height:n,near:r,far:s}){const i=[[2*t[0][0]/e,0,-(2*t[0][2]/e-1),0],[0,2*t[1][1]/n,-(2*t[1][2]/n-1),0],[0,0,-(s+r)/(s-r),-2*s*r/(s-r)],[0,0,-1,0]],a=[];for(let t=0;t<4;t++)for(let e=0;e<4;e++)a.push(i[e][t]);return a}}}},47051:(t,e,n)=>{n(75042);const{Detector:r}=n(66416),{buildModelViewProjectionTransform:s,computeScreenCoordiate:i}=n(47420);t.exports={CropDetector:class{constructor(t,e,n=!1){this.debugMode=n,this.width=t,this.height=e;let s=Math.min(t,e)/2,i=Math.pow(2,Math.round(Math.log(s)/Math.log(2)));this.cropSize=i,this.detector=new r(i,i,n),this.kernelCaches={},this.lastRandomIndex=4}detect(t){const e=Math.floor(this.height/2-this.cropSize/2),n=Math.floor(this.width/2-this.cropSize/2),r=this._detect(t,n,e);return this.debugMode&&(r.debugExtra.crop={startX:n,startY:e,cropSize:this.cropSize}),r}detectMoving(t){const e=this.lastRandomIndex%3,n=Math.floor(this.lastRandomIndex/3);let r=Math.floor(this.height/2-this.cropSize+n*this.cropSize/2),s=Math.floor(this.width/2-this.cropSize+e*this.cropSize/2);return s<0&&(s=0),r<0&&(r=0),s>=this.width-this.cropSize&&(s=this.width-this.cropSize-1),r>=this.height-this.cropSize&&(r=this.height-this.cropSize-1),this.lastRandomIndex=(this.lastRandomIndex+1)%9,this._detect(t,s,r)}_detect(t,e,n){const r=t.slice([n,e],[this.cropSize,this.cropSize]),{featurePoints:s,debugExtra:i}=this.detector.detect(r);return s.forEach((t=>{t.x+=e,t.y+=n})),this.debugMode&&(i.projectedImage=r.arraySync()),r.dispose(),{featurePoints:s,debugExtra:i}}}}},66416:(t,e,n)=>{const r=n(75042),{FREAKPOINTS:s}=n(12793),i=(s.length-1)*s.length/2;t.exports={Detector:class{constructor(t,e,n=!1){this.debugMode=n,this.width=t,this.height=e;let r=0;for(;t>=8&&e>=8&&(t/=2,e/=2,r++,5!==r););this.numOctaves=r,this.tensorCaches={},this.kernelCaches={}}detectImageData(t){const e=new Uint8ClampedArray(4*t.length);for(let n=0;n<t.length;n++)e[4*n]=t[n],e[4*n+1]=t[n],e[4*n+2]=t[n],e[4*n+3]=255;const n=new ImageData(e,this.width,this.height);return this.detect(n)}detect(t){let e=null;const n=[];for(let e=0;e<this.numOctaves;e++){let r,s;r=0===e?this._applyFilter(t):this._downsampleBilinear(n[e-1][n[e-1].length-1]),s=this._applyFilter(r),n.push([r,s])}const r=[];for(let t=0;t<this.numOctaves;t++){let e=this._differenceImageBinomial(n[t][0],n[t][1]);r.push(e)}const s=[];for(let t=1;t<this.numOctaves-1;t++){const e=this._buildExtremas(r[t-1],r[t],r[t+1]);s.push(e)}const i=this._applyPrune(s),a=this._computeLocalization(i,r),o=this._computeOrientationHistograms(a,n),l=this._smoothHistograms(o),u=this._computeExtremaAngles(l),c=this._computeExtremaFreak(n,a,u),h=this._computeFreakDescriptors(c),d=a.arraySync(),p=u.arraySync(),f=h.arraySync();this.debugMode&&(e={pyramidImages:n.map((t=>t.map((t=>t.arraySync())))),dogPyramidImages:r.map((t=>t?t.arraySync():null)),extremasResults:s.map((t=>t.arraySync())),extremaAngles:u.arraySync(),prunedExtremas:i,localizedExtremas:a.arraySync()}),n.forEach((t=>t.forEach((t=>t.dispose())))),r.forEach((t=>t&&t.dispose())),s.forEach((t=>t.dispose())),a.dispose(),o.dispose(),l.dispose(),u.dispose(),c.dispose(),h.dispose();const m=[];for(let t=0;t<d.length;t++){if(0==d[t][0])continue;const e=[];for(let n=0;n<f[t].length;n+=4){let r=16777216*f[t][n]+65536*f[t][n+1]+256*f[t][n+2]+f[t][n+3];e.push(r)}const n=d[t][1],r=d[t][2],s=d[t][3]*Math.pow(2,n)+Math.pow(2,n-1)-.5,i=r*Math.pow(2,n)+Math.pow(2,n-1)-.5,a=Math.pow(2,n);m.push({maxima:d[t][0]>0,x:s,y:i,scale:a,angle:p[t],descriptors:e})}return{featurePoints:m,debugExtra:e}}_computeFreakDescriptors(t){if(!this.tensorCaches.computeFreakDescriptors){const e=[],n=[];for(let r=0;r<t.shape[1];r++)for(let s=r+1;s<t.shape[1];s++)e.push(r),n.push(s);const s=r.tensor(e,[e.length]).cast(\"int32\"),i=r.tensor(n,[n.length]).cast(\"int32\");this.tensorCaches.computeFreakDescriptors={positionT:r.keep(r.stack([s,i],1))}}const{positionT:e}=this.tensorCaches.computeFreakDescriptors,n=Math.ceil(i/8);if(!this.kernelCaches.computeFreakDescriptors){const e={variableNames:[\"freak\",\"p\"],outputShape:[t.shape[0],n],userCode:`\\n\\t  void main() {\\n\\t    ivec2 coords = getOutputCoords();\\n\\t    int featureIndex = coords[0];\\n\\t    int descIndex = coords[1] * 8;\\n\\n\\t    int sum = 0;\\n\\t    for (int i = 0; i < 8; i++) {\\n\\t      if (descIndex + i >= ${i}) {\\n\\t\\tcontinue;\\n\\t      }\\n\\n\\t      int p1 = int(getP(descIndex + i, 0));\\n\\t      int p2 = int(getP(descIndex + i, 1));\\n\\n\\t      float v1 = getFreak(featureIndex, p1);\\n\\t      float v2 = getFreak(featureIndex, p2);\\n\\n\\t      if (v1 < v2 + 0.01) {\\n\\t        sum += int(pow(2.0, float(7 - i)));\\n\\t      }\\n\\t    }\\n\\t    setOutput(float(sum));\\n\\t  }\\n\\t`};this.kernelCaches.computeFreakDescriptors=[e]}return r.tidy((()=>{const[n]=this.kernelCaches.computeFreakDescriptors;return this._runWebGLProgram(n,[t,e],\"int32\")}))}_computeExtremaFreak(t,e,n){this.tensorCaches._computeExtremaFreak||r.tidy((()=>{const t=r.tensor(s);this.tensorCaches._computeExtremaFreak={freakPointsT:r.keep(t)}}));const{freakPointsT:i}=this.tensorCaches._computeExtremaFreak,a=[];for(let e=1;e<t.length;e++)a.push(t[e][1]);if(!this.kernelCaches._computeExtremaFreak){const n=[];for(let e=1;e<t.length;e++)n.push(\"image\"+e);let r=\"float getPixel(int octave, int y, int x) {\";for(let e=1;e<t.length;e++)r+=`\\n\\t  if (octave == ${e}) {\\n\\t    return getImage${e}(y, x);\\n\\t  }\\n\\t`;r+=\"}\";const i={variableNames:[...n,\"extrema\",\"angles\",\"freakPoints\"],outputShape:[e.shape[0],s.length],userCode:`\\n\\t  ${r}\\n\\t  void main() {\\n\\t    ivec2 coords = getOutputCoords();\\n\\t    int featureIndex = coords[0];\\n\\t    int freakIndex = coords[1];\\n\\n\\t    float freakSigma = getFreakPoints(freakIndex, 0);\\n\\t    float freakX = getFreakPoints(freakIndex, 1);\\n\\t    float freakY = getFreakPoints(freakIndex, 2);\\n\\n\\t    int octave = int(getExtrema(featureIndex, 1));\\n\\t    float inputY = getExtrema(featureIndex, 2);\\n\\t    float inputX = getExtrema(featureIndex, 3);\\n\\t    float inputAngle = getAngles(featureIndex);\\n            float cos = 7. * cos(inputAngle);\\n            float sin = 7. * sin(inputAngle);\\n\\n\\t    float yp = inputY + freakX * sin + freakY * cos;\\n\\t    float xp = inputX + freakX * cos + freakY * -sin;\\n\\n\\t    int x0 = int(floor(xp));\\n\\t    int x1 = x0 + 1;\\n\\t    int y0 = int(floor(yp));\\n\\t    int y1 = y0 + 1;\\n\\n\\t    float f1 = getPixel(octave, y0, x0);\\n\\t    float f2 = getPixel(octave, y0, x1);\\n\\t    float f3 = getPixel(octave, y1, x0);\\n\\t    float f4 = getPixel(octave, y1, x1);\\n\\n\\t    float x1f = float(x1);\\n\\t    float y1f = float(y1);\\n\\t    float x0f = float(x0);\\n\\t    float y0f = float(y0);\\n\\n\\t    // ratio for interpolation between four neighbouring points\\n\\t    float value = (x1f - xp) * (y1f - yp) * f1\\n\\t\\t\\t+ (xp - x0f) * (y1f - yp) * f2\\n\\t\\t\\t+ (x1f - xp) * (yp - y0f) * f3\\n\\t\\t\\t+ (xp - x0f) * (yp - y0f) * f4;\\n\\n\\t    setOutput(value);\\n\\t  }\\n\\t`};this.kernelCaches._computeExtremaFreak=[i]}return r.tidy((()=>{const[t]=this.kernelCaches._computeExtremaFreak;return this._compileAndRun(t,[...a,e,n,i])}))}_computeExtremaAngles(t){if(!this.kernelCaches.computeExtremaAngles){const e={variableNames:[\"histogram\"],outputShape:[t.shape[0]],userCode:`\\n\\t  void main() {\\n\\t    int featureIndex = getOutputCoords();\\n\\n\\t    int maxIndex = 0;\\n\\t    for (int i = 1; i < 36; i++) {\\n\\t      if (getHistogram(featureIndex, i) > getHistogram(featureIndex, maxIndex)) {\\n\\t\\tmaxIndex = i;\\n\\t      }\\n\\t    }\\n\\n\\t    int prev = imod(maxIndex - 1 + 36, 36);\\n\\t    int next = imod(maxIndex + 1, 36);\\n\\n\\t    /**\\n\\t     * Fit a quatratic to 3 points. The system of equations is:\\n\\t     *\\n\\t     * y0 = A*x0^2 + B*x0 + C\\n\\t     * y1 = A*x1^2 + B*x1 + C\\n\\t     * y2 = A*x2^2 + B*x2 + C\\n\\t     *\\n\\t     * This system of equations is solved for A,B,C.\\n\\t     */\\n\\t    float p10 = float(maxIndex - 1);\\n\\t    float p11 = getHistogram(featureIndex, prev); \\n\\t    float p20 = float(maxIndex);\\n\\t    float p21 = getHistogram(featureIndex, maxIndex); \\n\\t    float p30 = float(maxIndex + 1);\\n\\t    float p31 = getHistogram(featureIndex, next); \\n\\n\\t    float d1 = (p30-p20)*(p30-p10);\\n\\t    float d2 = (p10-p20)*(p30-p10);\\n\\t    float d3 = p10-p20;\\n\\n\\t    // If any of the denominators are zero then, just use maxIndex.\\n            float fbin = float(maxIndex);\\n\\t    if ( abs(d1) > 0.00001 && abs(d2) > 0.00001 && abs(d3) > 0.00001) {\\n\\t      float a = p10*p10;\\n\\t      float b = p20*p20;\\n\\n\\t      // Solve for the coefficients A,B,C\\n\\t      float A = ((p31-p21)/d1)-((p11-p21)/d2);\\n\\t      float B = ((p11-p21)+(A*(b-a)))/d3;\\n\\t      float C = p11-(A*a)-(B*p10);\\n\\t      fbin = -B / (2. * A);\\n\\t    }\\n\\n\\t    float an = 2.0 *${Math.PI} * (fbin + 0.5) / 36. - ${Math.PI};\\n\\t    setOutput(an);\\n\\t  }\\n\\t`};this.kernelCaches.computeExtremaAngles=e}return r.tidy((()=>{const e=this.kernelCaches.computeExtremaAngles;return this._compileAndRun(e,[t])}))}_computeOrientationHistograms(t,e){const n=[];for(let t=1;t<e.length;t++)n.push(e[t][1]);this.tensorCaches.orientationHistograms||r.tidy((()=>{const t=Math.ceil(4.5),e=[];for(let n=-t;n<=t;n++)for(let r=-t;r<=t;r++){const t=r*r+n*n;if(t<=20.25){const s=-.05555555555555555*t;let i=.0013888888*(720+s*(720+s*(360+s*(120+s*(30+s*(6+s))))));e.push([n,r,i])}}this.tensorCaches.orientationHistograms={radialPropertiesT:r.keep(r.tensor(e,[e.length,3]))}}));const{radialPropertiesT:s}=this.tensorCaches.orientationHistograms;if(!this.kernelCaches.computeOrientationHistograms){const n=[];for(let t=1;t<e.length;t++)n.push(\"image\"+t);let r=\"float getPixel(int octave, int y, int x) {\";for(let t=1;t<e.length;t++)r+=`\\n\\t  if (octave == ${t}) {\\n\\t    return getImage${t}(y, x);\\n\\t  }\\n\\t`;r+=\"}\";const i={variableNames:[...n,\"extrema\",\"radial\"],outputShape:[t.shape[0],s.shape[0],2],userCode:`\\n\\t  ${r}\\n\\n\\t  void main() {\\n\\t    ivec3 coords = getOutputCoords();\\n\\t    int featureIndex = coords[0];\\n\\t    int radialIndex = coords[1];\\n\\t    int propertyIndex = coords[2];\\n\\n\\t    int radialY = int(getRadial(radialIndex, 0));\\n\\t    int radialX = int(getRadial(radialIndex, 1));\\n\\t    float radialW = getRadial(radialIndex, 2);\\n\\n\\t    int octave = int(getExtrema(featureIndex, 1));\\n\\t    int y = int(getExtrema(featureIndex, 2));\\n\\t    int x = int(getExtrema(featureIndex, 3));\\n\\n\\t    int xp = x + radialX;\\n\\t    int yp = y + radialY;\\n\\n\\t    float dy = getPixel(octave, yp+1, xp) - getPixel(octave, yp-1, xp);\\n\\t    float dx = getPixel(octave, yp, xp+1) - getPixel(octave, yp, xp-1);\\n\\n\\t    if (propertyIndex == 0) {\\n\\t      // be careful that atan(0, 0) gives 1.57 instead of 0 (different from js), but doesn't matter here, coz magnitude is 0\\n\\t      \\n\\t      float angle = atan(dy, dx) + ${Math.PI};\\n\\t      float fbin = angle * 36. * 0.159154943091895;\\n\\t      setOutput(fbin);\\n\\t      return;\\n\\t    }\\n\\n\\t    if (propertyIndex == 1) {\\n\\t      float mag = sqrt(dx * dx + dy * dy);\\n\\t      float magnitude = radialW * mag;\\n\\t      setOutput(magnitude);\\n\\t      return;\\n\\t    }\\n\\t  }\\n\\n\\t`},a={variableNames:[\"fbinMag\"],outputShape:[t.shape[0],36],userCode:`\\n\\t  void main() {\\n\\t    ivec2 coords = getOutputCoords();\\n\\t    int featureIndex = coords[0];\\n\\t    int binIndex = coords[1];\\n\\n\\t    float sum = 0.;\\n\\t    for (int i = 0; i < ${s.shape[0]}; i++) {\\n\\t      float fbin = getFbinMag(featureIndex, i, 0);\\n\\t      int bin = int(floor(fbin - 0.5));\\n\\t      int b1 = imod(bin + 36, 36);\\n\\t      int b2 = imod(bin + 1 + 36, 36);\\n\\n\\t      if (b1 == binIndex || b2 == binIndex) {\\n\\t\\tfloat magnitude = getFbinMag(featureIndex, i, 1);\\n\\t\\tfloat w2 = fbin - float(bin) - 0.5;\\n\\t\\tfloat w1 = w2 * -1. + 1.;\\n\\n\\t\\tif (b1 == binIndex) {\\n\\t\\t  sum += w1 * magnitude;\\n\\t\\t}\\n\\t\\tif (b2 == binIndex) {\\n\\t\\t  sum += w2 * magnitude;\\n\\t\\t}\\n\\t      }\\n\\t    }\\n\\t    setOutput(sum);\\n\\t  }\\n\\t`};this.kernelCaches.computeOrientationHistograms=[i,a]}return r.tidy((()=>{const[e,r]=this.kernelCaches.computeOrientationHistograms,i=this._compileAndRun(e,[...n,t,s]);return this._compileAndRun(r,[i])}))}_smoothHistograms(t){if(!this.kernelCaches.smoothHistograms){const e={variableNames:[\"histogram\"],outputShape:[t.shape[0],36],userCode:\"\\n\\t  void main() {\\n\\t    ivec2 coords = getOutputCoords();\\n\\n\\t    int featureIndex = coords[0];\\n\\t    int binIndex = coords[1];\\n\\n\\t    int prevBin = imod(binIndex - 1 + 36, 36);\\n\\t    int nextBin = imod(binIndex + 1, 36);\\n\\n            float result = 0.274068619061197 * getHistogram(featureIndex, prevBin) + 0.451862761877606 * getHistogram(featureIndex, binIndex) + 0.274068619061197 * getHistogram(featureIndex, nextBin);\\n\\n\\t    setOutput(result);\\n\\t  }\\n\\t\"};this.kernelCaches.smoothHistograms=e}return r.tidy((()=>{const e=this.kernelCaches.smoothHistograms;for(let n=0;n<5;n++)t=this._compileAndRun(e,[t]);return t}))}_computeLocalization(t,e){if(!this.kernelCaches.computeLocalization){const n=[];let r=\"float getPixel(int octave, int y, int x) {\";for(let t=1;t<e.length;t++)n.push(\"image\"+t),r+=`\\n\\t  if (octave == ${t}) {\\n\\t    return getImage${t}(y, x);\\n\\t  }\\n \\t`;r+=\"}\";const s={variableNames:[...n,\"extrema\"],outputShape:[t.length,3,3],userCode:`\\n\\t  ${r}\\n\\n\\t  void main() {\\n\\t    ivec3 coords = getOutputCoords();\\n\\t    int featureIndex = coords[0];\\n\\t    float score = getExtrema(featureIndex, 0);\\n\\t    if (score == 0.0) {\\n\\t      return;\\n\\t    }\\n\\n\\t    int dy = coords[1]-1;\\n\\t    int dx = coords[2]-1;\\n\\t    int octave = int(getExtrema(featureIndex, 1));\\n\\t    int y = int(getExtrema(featureIndex, 2));\\n\\t    int x = int(getExtrema(featureIndex, 3));\\n\\t    setOutput(getPixel(octave, y+dy, x+dx));\\n\\t  }\\n\\t`};this.kernelCaches.computeLocalization=[s]}return r.tidy((()=>{const n=this.kernelCaches.computeLocalization[0],s=r.tensor(t,[t.length,t[0].length],\"int32\"),i=this._compileAndRun(n,[...e.slice(1),s]).arraySync(),a=[];for(let t=0;t<i.length;t++){a.push([]);for(let e=0;e<i[t].length;e++)a[t].push([])}const o=[];for(let e=0;e<t.length;e++)o[e]=[t[e][0],t[e][1],t[e][2],t[e][3]];for(let t=0;t<o.length;t++){if(0===o[t][0])continue;const e=i[t],n=.5*(e[1][2]-e[1][0]),r=.5*(e[2][1]-e[0][1]),s=e[1][2]+e[1][0]-2*e[1][1],a=e[2][1]+e[0][1]-2*e[1][1],l=.25*(e[0][0]+e[2][2]-e[0][2]-e[2][0]),u=s*a-l*l,c=(a*-n+-l*-r)/u,h=(-l*-n+s*-r)/u,d=o[t][2]+h,p=o[t][3]+c;Math.abs(u)<1e-4||(o[t][2]=d,o[t][3]=p)}return r.tensor(o,[o.length,o[0].length],\"float32\")}))}_applyPrune(t){if(!this.kernelCaches.applyPrune){const e=[];for(let n=0;n<t.length;n++){const r=t[n].shape[0],s=t[n].shape[1],i={variableNames:[\"extrema\"],outputShape:[Math.floor(r/2),Math.floor(s/2)],userCode:\"\\n\\t    void main() {\\n\\t      ivec2 coords = getOutputCoords();\\n\\t      int y = coords[0] * 2;\\n\\t      int x = coords[1] * 2;\\n\\n\\t      float location = 0.0;\\n\\t      float values = getExtrema(y, x);\\n\\n\\t      if (getExtrema(y+1, x) != 0.0) {\\n\\t        location = 1.0;\\n\\t\\tvalues = getExtrema(y+1, x);\\n\\t      }\\n\\t      else if (getExtrema(y, x+1) != 0.0) {\\n\\t        location = 2.0;\\n\\t\\tvalues = getExtrema(y, x+1);\\n\\t      }\\n\\t      else if (getExtrema(y+1, x+1) != 0.0) {\\n\\t        location = 3.0;\\n\\t\\tvalues = getExtrema(y+1, x+1);\\n\\t      }\\n\\n\\t      if (values < 0.0) {\\n\\t        setOutput(location * -1000.0 + values);\\n\\t      } else {\\n\\t        setOutput(location * 1000.0 + values);\\n\\t      }\\n\\t    }\\n\\t  \"};e.push(i)}this.kernelCaches.applyPrune={reductionKernels:e}}const e=[],n=[];for(let t=0;t<100;t++){n.push([]),e.push([]);for(let r=0;r<5;r++)n[t].push([0,0,0,0]),e[t].push(0)}r.tidy((()=>{const{reductionKernels:r}=this.kernelCaches.applyPrune;for(let s=0;s<t.length;s++){const i=r[s],a=this._compileAndRun(i,[t[s]]),o=s+1,l=a.arraySync(),u=a.shape[0],c=a.shape[1],h=2*c/10,d=2*u/10;for(let t=0;t<u;t++)for(let r=0;r<c;r++){const s=l[t][r];if(0==s)continue;const i=s%1e3,a=Math.floor(Math.abs(s)/1e3),u=2*r+(2===a||3===a?1:0),c=2*t+(1===a||3===a?1:0),p=Math.floor(u/h),f=10*Math.floor(c/d)+p,m=Math.abs(i);let g=5;for(;g>=1&&m>e[f][g-1];)g-=1;if(g<5){for(let t=4;t>=g+1;t--)e[f][t]=e[f][t-1],n[f][t][0]=n[f][t-1][0],n[f][t][1]=n[f][t-1][1],n[f][t][2]=n[f][t-1][2],n[f][t][3]=n[f][t-1][3];e[f][g]=m,n[f][g][0]=i,n[f][g][1]=o,n[f][g][2]=c,n[f][g][3]=u}}}}));const s=[];for(let t=0;t<100;t++)for(let e=0;e<5;e++)s.push(n[t][e]);return s}_buildExtremas(t,e,n){const s=e.shape[0],i=e.shape[1],a=\"w\"+i;if(this.kernelCaches.buildExtremas||(this.kernelCaches.buildExtremas={}),!this.kernelCaches.buildExtremas[a]){const t={variableNames:[\"image0\",\"image1\",\"image2\"],outputShape:[s,i],userCode:`\\n\\t  void main() {\\n\\t    ivec2 coords = getOutputCoords();\\n\\n\\t    int y = coords[0];\\n\\t    int x = coords[1];\\n\\n\\t    float value = getImage1(y, x);\\n\\n\\t    // Step 1: find local maxima/minima\\n\\t    if (value * value < 9.) {\\n\\t      setOutput(0.);\\n\\t      return;\\n\\t    }\\n\\t    if (y < 7 || y > ${s-1-7}) {\\n\\t      setOutput(0.);\\n\\t      return;\\n\\t    }\\n\\t    if (x < 7 || x > ${i-1-7}) {\\n\\t      setOutput(0.);\\n\\t      return;\\n\\t    }\\n\\n\\t    bool isMax = true;\\n\\t    bool isMin = true;\\n\\t    for (int dy = -1; dy <= 1; dy++) {\\n\\t      for (int dx = -1; dx <= 1; dx++) {\\n\\t        float value0 = getImage0(y+dy, x+dx);\\n\\t        float value1 = getImage1(y+dy, x+dx);\\n\\t        float value2 = getImage2(y+dy, x+dx);\\n\\n\\t\\tif (value < value0 || value < value1 || value < value2) {\\n\\t\\t  isMax = false;\\n\\t\\t}\\n\\t\\tif (value > value0 || value > value1 || value > value2) {\\n\\t\\t  isMin = false;\\n\\t\\t}\\n\\t      }\\n\\t    }\\n\\n\\t    if (!isMax && !isMin) {\\n\\t      setOutput(0.);\\n\\t      return;\\n\\t    }\\n\\n\\t    // compute edge score and reject based on threshold\\n\\t    float dxx = getImage1(y, x+1) + getImage1(y, x-1) - 2. * getImage1(y, x);\\n\\t    float dyy = getImage1(y+1, x) + getImage1(y-1, x) - 2. * getImage1(y, x);\\n\\t    float dxy = 0.25 * (getImage1(y-1,x-1) + getImage1(y+1,x+1) - getImage1(y-1,x+1) - getImage1(y+1,x-1));\\n\\n\\t    float det = (dxx * dyy) - (dxy * dxy);\\n\\n\\t    if (abs(det) < 0.0001) { // determinant undefined. no solution\\n\\t      setOutput(0.);\\n\\t      return;\\n\\t    }\\n\\n\\t    float edgeScore = (dxx + dyy) * (dxx + dyy) / det;\\n\\n\\t    if (abs(edgeScore) >= 6.25 ) {\\n\\t      setOutput(0.);\\n\\t      return;\\n\\t    }\\n\\t    setOutput(getImage1(y,x));\\n\\t  }\\n\\t`};this.kernelCaches.buildExtremas[a]=t}return r.tidy((()=>{const r=this.kernelCaches.buildExtremas[a];return t=this._downsampleBilinear(t),n=this._upsampleBilinear(n,e),this._compileAndRun(r,[t,e,n])}))}_differenceImageBinomial(t,e){return r.tidy((()=>t.sub(e)))}_applyFilter(t){const e=t.shape[0],n=t.shape[1],s=\"w\"+n;if(this.kernelCaches.applyFilter||(this.kernelCaches.applyFilter={}),!this.kernelCaches.applyFilter[s]){const t={variableNames:[\"p\"],outputShape:[e,n],userCode:\"\\n\\t  void main() {\\n\\t    ivec2 coords = getOutputCoords();\\n\\n\\t    float sum = getP(coords[0], coords[1]-2);\\n\\t    sum += getP(coords[0], coords[1]-1) * 4.;\\n\\t    sum += getP(coords[0], coords[1]) * 6.;\\n\\t    sum += getP(coords[0], coords[1]+1) * 4.;\\n\\t    sum += getP(coords[0], coords[1]+2);\\n\\t    setOutput(sum);\\n\\t  }\\n\\t\"},r={variableNames:[\"p\"],outputShape:[e,n],userCode:\"\\n\\t  void main() {\\n\\t    ivec2 coords = getOutputCoords();\\n\\n\\t    float sum = getP(coords[0]-2, coords[1]);\\n\\t    sum += getP(coords[0]-1, coords[1]) * 4.;\\n\\t    sum += getP(coords[0], coords[1]) * 6.;\\n\\t    sum += getP(coords[0]+1, coords[1]) * 4.;\\n\\t    sum += getP(coords[0]+2, coords[1]);\\n\\t    sum /= 256.;\\n\\t    setOutput(sum);\\n\\t  }\\n\\t\"};this.kernelCaches.applyFilter[s]=[t,r]}return r.tidy((()=>{const[e,n]=this.kernelCaches.applyFilter[s],r=this._compileAndRun(e,[t]);return this._compileAndRun(n,[r])}))}_upsampleBilinear(t,e){t.shape[0];const n=\"w\"+t.shape[1];if(this.kernelCaches.upsampleBilinear||(this.kernelCaches.upsampleBilinear={}),!this.kernelCaches.upsampleBilinear[n]){const t={variableNames:[\"p\"],outputShape:[e.shape[0],e.shape[1]],userCode:\"\\n\\t  void main() {\\n\\t    ivec2 coords = getOutputCoords();\\n\\t    int j = coords[0];\\n\\t    int i = coords[1];\\n\\n\\t    float sj = 0.5 * float(j) - 0.25; \\n\\t    float si = 0.5 * float(i) - 0.25;\\n\\n\\t    float sj0 = floor(sj);\\n\\t    float sj1 = ceil(sj);\\n\\t    float si0 = floor(si);\\n\\t    float si1 = ceil(si);\\n\\n\\t    int sj0I = int(sj0);\\n\\t    int sj1I = int(sj1);\\n\\t    int si0I = int(si0);\\n\\t    int si1I = int(si1);\\n\\n\\t    float sum = 0.0;\\n\\t    sum += getP(sj0I, si0I) * (si1 - si) * (sj1 - sj);\\n\\t    sum += getP(sj1I, si0I) * (si1 - si) * (sj - sj0);\\n\\t    sum += getP(sj0I, si1I) * (si - si0) * (sj1 - sj);\\n\\t    sum += getP(sj1I, si1I) * (si - si0) * (sj - sj0);\\n\\t    setOutput(sum);\\n\\t  }\\n\\t\"};this.kernelCaches.upsampleBilinear[n]=t}return r.tidy((()=>{const e=this.kernelCaches.upsampleBilinear[n];return this._compileAndRun(e,[t])}))}_downsampleBilinear(t){const e=t.shape[0],n=t.shape[1],s=\"w\"+n;if(this.kernelCaches.downsampleBilinear||(this.kernelCaches.downsampleBilinear={}),!this.kernelCaches.downsampleBilinear[s]){const t={variableNames:[\"p\"],outputShape:[Math.floor(e/2),Math.floor(n/2)],userCode:\"\\n\\t  void main() {\\n\\t    ivec2 coords = getOutputCoords();\\n\\t    int y = coords[0] * 2;\\n\\t    int x = coords[1] * 2;\\n\\n\\t    float sum = getP(y, x) * 0.25;\\n\\t    sum += getP(y+1,x) * 0.25; \\n\\t    sum += getP(y, x+1) * 0.25; \\n\\t    sum += getP(y+1,x+1) * 0.25;\\n\\t    setOutput(sum);\\n\\t  }\\n\\t\"};this.kernelCaches.downsampleBilinear[s]=t}return r.tidy((()=>{const e=this.kernelCaches.downsampleBilinear[s];return this._compileAndRun(e,[t])}))}_compileAndRun(t,e){const n=r.backend().compileAndRun(t,e);return r.engine().makeTensorFromDataId(n.dataId,n.shape,n.dtype)}_runWebGLProgram(t,e,n){const s=r.backend().runWebGLProgram(t,e,n);return r.engine().makeTensorFromDataId(s.dataId,s.shape,s.dtype)}}}},12793:t=>{const e=[{sigma:.55,points:[[-1,0],[-.5,-.866025],[.5,-.866025],[1,-0],[.5,.866025],[-.5,.866025]]},{sigma:.475,points:[[0,.930969],[-.806243,.465485],[-.806243,-.465485],[-0,-.930969],[.806243,-.465485],[.806243,.465485]]},{sigma:.4,points:[[.847306,-0],[.423653,.733789],[-.423653,.733789],[-.847306,0],[-.423653,-.733789],[.423653,-.733789]]},{sigma:.325,points:[[-0,-.741094],[.641806,-.370547],[.641806,.370547],[0,.741094],[-.641806,.370547],[-.641806,-.370547]]},{sigma:.25,points:[[-.595502,0],[-.297751,-.51572],[.297751,-.51572],[.595502,-0],[.297751,.51572],[-.297751,.51572]]},{sigma:.175,points:[[0,.362783],[-.314179,.181391],[-.314179,-.181391],[-0,-.362783],[.314179,-.181391],[.314179,.181391]]},{sigma:.1,points:[[0,0]]}],n=[];for(let t=0;t<e.length;t++){const r=e[t].sigma;for(let s=0;s<e[t].points.length;s++){const i=e[t].points[s];n.push([r,i[0],i[1]])}}t.exports={FREAKPOINTS:n}},47420:t=>{const e=(t,e,n,r)=>({x:t[0][0]*e+t[0][1]*n+t[0][3],y:t[1][0]*e+t[1][1]*n+t[1][3],z:t[2][0]*e+t[2][1]*n+t[2][3]});t.exports={buildModelViewProjectionTransform:(t,e)=>[[t[0][0]*e[0][0]+t[0][2]*e[2][0],t[0][0]*e[0][1]+t[0][2]*e[2][1],t[0][0]*e[0][2]+t[0][2]*e[2][2],t[0][0]*e[0][3]+t[0][2]*e[2][3]],[t[1][1]*e[1][0]+t[1][2]*e[2][0],t[1][1]*e[1][1]+t[1][2]*e[2][1],t[1][1]*e[1][2]+t[1][2]*e[2][2],t[1][1]*e[1][3]+t[1][2]*e[2][3]],[e[2][0],e[2][1],e[2][2],e[2][3]]],applyModelViewProjectionTransform:e,computeScreenCoordiate:(t,n,r,s)=>{const{x:i,y:a,z:o}=e(t,n,r);return{x:i/o,y:a/o}}}},17508:(t,e,n)=>{const{resize:r}=n(9140);t.exports={buildImageList:t=>{const e=[];let n=100/Math.min(t.width,t.height);for(;;)if(e.push(n),n*=Math.pow(2,1/3),n>=.95){n=1;break}e.push(n),e.reverse();const s=[];for(let n=0;n<e.length;n++)t.width,e[n],t.height,e[n],s.push(Object.assign(r({image:t,ratio:e[n]}),{scale:e[n]}));return s},buildTrackingImageList:t=>{const e=Math.min(t.width,t.height),n=[],s=[];n.push(256/e),n.push(128/e);for(let e=0;e<n.length;e++)s.push(Object.assign(r({image:t,ratio:n[e]}),{scale:n[e]}));return s}}},37325:(t,e,n)=>{const r=n(75042);t.exports={InputLoader:class{constructor(t,e){this.width=t,this.height=e,this.texShape=[e,t];const n=document.createElement(\"canvas\").getContext(\"2d\");n.canvas.width=t,n.canvas.height=e,this.context=n,this.program=this.buildProgram(t,e);const s=r.backend();this.tempPixelHandle=s.makeTensorInfo(this.texShape,\"float32\"),s.texData.get(this.tempPixelHandle.dataId).usage=2}_loadInput(t){return r.tidy((()=>{let e=r.browser.fromPixels(t);return e=e.mean(2),e}))}loadInput(t){this.context.drawImage(t,0,0,this.width,this.height);const e=r.backend();return e.gpgpu.uploadPixelDataToTexture(e.getTexture(this.tempPixelHandle.dataId),this.context.canvas),this._compileAndRun(this.program,[this.tempPixelHandle])}buildProgram(t,e){const n=2===r.env().getNumber(\"WEBGL_VERSION\")?\"texture\":\"texture2D\";return{variableNames:[\"A\"],outputShape:this.texShape,userCode:`\\n\\tvoid main() {\\n\\t  ivec2 coords = getOutputCoords();\\n\\t  int texR = coords[0];\\n\\t  int texC = coords[1];\\n\\t  vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${t}.0, ${e}.0);\\n\\n\\t  vec4 values = ${n}(A, uv);\\n\\t  setOutput((0.299 * values.r + 0.587 * values.g + 0.114 * values.b) * 255.0);\\n\\t}\\n      `}}_compileAndRun(t,e){const n=r.backend().compileAndRun(t,e);return r.engine().makeTensorFromDataId(n.dataId,n.shape,n.dtype)}_runWebGLProgram(t,e,n){const s=r.backend().runWebGLProgram(t,e,n);return r.engine().makeTensorFromDataId(s.dataId,s.shape,s.dtype)}}}},32233:t=>{t.exports={compute:t=>{const{v1:e,v2:n}=t;let r=0;for(let t=0;t<e.length;t++){let a=(e[t]^n[t])>>>0;r+=(i=void 0,((i=((i=((i=((i=(s=a)-(s>>1&1431655765))>>2&858993459)+(858993459&i))>>4)+i&252645135)>>8)+i&16711935)>>16)+i&65535)}var s,i;return r}}},80723:(t,e,n)=>{const{compute:r}=n(32233),{createRandomizer:s}=n(6048),i=t=>{const{points:e,pointIndexes:n,centerPointIndex:r,randomizer:s}=t;let a=!1;(n.length<=8||n.length<=16)&&(a=!0);const o={};if(!a){const t=_computeKMedoids({points:e,pointIndexes:n,randomizer:s});for(let e=0;e<t.length;e++)void 0===o[n[t[e]]]&&(o[n[t[e]]]=[]),o[n[t[e]]].push(n[e])}1===Object.keys(o).length&&(a=!0);const l={centerPointIndex:r};if(a){l.leaf=!0,l.pointIndexes=[];for(let t=0;t<n.length;t++)l.pointIndexes.push(n[t]);return l}return l.leaf=!1,l.children=[],Object.keys(o).forEach((t=>{l.children.push(i({points:e,pointIndexes:o[t],centerPointIndex:t,randomizer:s}))})),l};_computeKMedoids=t=>{const{points:e,pointIndexes:n,randomizer:s}=t,i=[];for(let t=0;t<n.length;t++)i.push(t);let a=Number.MAX_SAFE_INTEGER,o=-1;const l=[];for(let t=0;t<128;t++){s.arrayShuffle({arr:i,sampleSize:8});let u=0;const c=[];for(let t=0;t<n.length;t++){let s=Number.MAX_SAFE_INTEGER;for(let a=0;a<8;a++){const o=n[i[a]],l=r({v1:e[n[t]].descriptors,v2:e[o].descriptors});l<s&&(c[t]=i[a],s=l)}u+=s}l.push(c),u<a&&(a=u,o=t)}return l[o]},t.exports={build:({points:t})=>{const e=[];for(let n=0;n<t.length;n++)e.push(n);const n=s();return{rootNode:i({points:t,pointIndexes:e,centerPointIndex:null,randomizer:n})}}}},46417:(t,e,n)=>{const r=n(75042),{buildModelViewProjectionTransform:s,computeScreenCoordiate:i}=n(47420);t.exports={Tracker:class{constructor(t,e,n,r,s,i=!1){this.markerDimensions=t,this.trackingDataList=e,this.projectionTransform=n,this.debugMode=i,this.trackingKeyframeList=[];for(let t=0;t<e.length;t++)this.trackingKeyframeList.push(e[t][1]);let a=0;for(let t=0;t<this.trackingKeyframeList.length;t++)a=Math.max(a,this.trackingKeyframeList[t].points.length);this.featurePointsListT=[],this.imagePixelsListT=[],this.imagePropertiesListT=[];for(let t=0;t<this.trackingKeyframeList.length;t++){const{featurePoints:e,imagePixels:n,imageProperties:r}=this._prebuild(this.trackingKeyframeList[t],a);this.featurePointsListT[t]=e,this.imagePixelsListT[t]=n,this.imagePropertiesListT[t]=r}this.kernelCaches={}}dummyRun(t){let e=[[1,1,1,1],[1,1,1,1],[1,1,1,1]];for(let n=0;n<this.featurePointsListT.length;n++)this.track(t,e,n)}captureRegion(t,e,n,r,i){const a=s(this.projectionTransform,e),o=this._buildAdjustedModelViewTransform(a),l=this._computeColoredProjection(o,t,n,r,i),u=l.arraySync();return o.dispose(),l.dispose(),u}track(t,e,n){let r={};const a=s(this.projectionTransform,e),o=this._buildAdjustedModelViewTransform(a),l=(this.markerDimensions[n][0],this.markerDimensions[n][1],this.trackingKeyframeList[n].width,this.trackingKeyframeList[n].height,this.featurePointsListT[n]),u=this.imagePixelsListT[n],c=this.imagePropertiesListT[n],h=this._computeProjection(o,t,n),{matchingPointsT:d,simT:p}=this._computeMatching(l,u,c,h),f=d.arraySync(),m=p.arraySync(),g=this.trackingKeyframeList[n],y=[],x=[],b=[];for(let t=0;t<f.length;t++)if(m[t]>.8&&t<g.points.length){b.push(t);const e=i(a,f[t][0],f[t][1]);x.push(e),y.push({x:g.points[t].x/g.scale,y:g.points[t].y/g.scale,z:0})}return this.debugMode&&(r={projectedImage:h.arraySync(),matchingPoints:d.arraySync(),goodTrack:b,trackedPoints:x}),o.dispose(),h.dispose(),d.dispose(),p.dispose(),{worldCoords:y,screenCoords:x,debugExtra:r}}_computeMatching(t,e,n,s){const i=s.shape[0],a=s.shape[1],o=t.shape[0];if(!this.kernelCaches.computeMatching){const t={variableNames:[\"features\",\"markerPixels\",\"markerProperties\",\"targetPixels\"],outputShape:[o,441],userCode:`\\n\\t  void main() {\\n\\t    ivec2 coords = getOutputCoords();\\n\\n\\t    int featureIndex = coords[0];\\n\\t    int searchOffsetIndex = coords[1];\\n\\n\\t    int markerWidth = int(getMarkerProperties(0));\\n\\t    int markerHeight = int(getMarkerProperties(1));\\n\\t    float markerScale = getMarkerProperties(2);\\n\\n\\t    int searchOffsetX = imod(searchOffsetIndex, 21) * 1;\\n\\t    int searchOffsetY = searchOffsetIndex / 21 * 1;\\n\\n\\t    int sCenterX = int(getFeatures(featureIndex, 0) * markerScale);\\n\\t    int sCenterY = int(getFeatures(featureIndex, 1) * markerScale);\\n\\n\\t    int sx = sCenterX + searchOffsetX - 10;\\n\\t    int sy = sCenterY + searchOffsetY - 10;\\n\\n\\t    if (sx < 6 || sx >= (${a} - 6) || sy < 6 || sy >= (${i} - 6)) {\\n\\t      setOutput(-2.);\\n\\t    } \\n\\t    else {\\n\\t      float sumPoint = 0.;\\n\\t      float sumPointSquare = 0.;\\n\\t      float sumTemplate = 0.;\\n\\t      float sumTemplateSquare = 0.;\\n\\t      float sumPointTemplate = 0.;\\n\\n\\t      for (int templateOffsetY = 0; templateOffsetY < 13; templateOffsetY++) {\\n\\t\\tfor (int templateOffsetX = 0; templateOffsetX < 13; templateOffsetX++) {\\n\\t\\t  int fx2 = sCenterX + templateOffsetX - 6;\\n\\t\\t  int fy2 = sCenterY + templateOffsetY - 6;\\n\\n\\t\\t  int sx2 = sx + templateOffsetX - 6;\\n\\t\\t  int sy2 = sy + templateOffsetY - 6;\\n\\n\\t\\t  int markerPixelIndex = fy2 * markerWidth + fx2;\\n\\t\\t  float markerPixel = getMarkerPixels(markerPixelIndex);\\n\\t\\t  float targetPixel = getTargetPixels(sy2, sx2);\\n\\n\\t\\t  sumTemplate += markerPixel;\\n\\t\\t  sumTemplateSquare += markerPixel * markerPixel;\\n\\t\\t  sumPoint += targetPixel;\\n\\t\\t  sumPointSquare += targetPixel * targetPixel;\\n\\t\\t  sumPointTemplate += targetPixel * markerPixel;\\n\\t\\t}\\n\\t      }\\n\\n\\t      // Normalized cross-correlation\\n\\t      // !important divide first avoid overflow (e.g. sumPoint / count * sumPoint)\\n\\t      float count = float(13 * 13);\\n\\t      float pointVariance = sqrt(sumPointSquare - sumPoint / count * sumPoint);\\n\\t      float templateVariance = sqrt(sumTemplateSquare - sumTemplate / count * sumTemplate);\\n\\n\\t      if (pointVariance < 0.0000001) {\\n\\t\\tsetOutput(-3.);\\n\\t      } else if (templateVariance < 0.0000001) {\\n\\t\\t//setOutput(sumTemplate);\\n\\t\\tsetOutput(-4.);\\n\\t      } else {\\n\\t\\tsumPointTemplate -= sumPoint / count * sumTemplate;\\n\\t\\tfloat sim = sumPointTemplate / pointVariance / templateVariance;  \\n\\t\\tsetOutput(sim);\\n\\t      }\\n\\t    }\\n\\t  }\\n\\t`},e={variableNames:[\"featurePoints\",\"markerProperties\",\"maxIndex\"],outputShape:[o,2],userCode:\"\\n\\t  void main() {\\n\\t    ivec2 coords = getOutputCoords();\\n\\n\\t    float markerScale = getMarkerProperties(2);\\n\\n\\t    int featureIndex = coords[0];\\n\\n\\t    int maxIndex = int(getMaxIndex(featureIndex));\\n\\t    int searchLocationIndex = maxIndex / 441;\\n\\t    int searchOffsetIndex = imod(maxIndex, 441);\\n\\n\\t    if (coords[1] == 0) {\\n\\t      int searchOffsetX = imod(searchOffsetIndex, 21) * 1;\\n\\t      setOutput(getFeaturePoints(featureIndex, 0) + float(searchOffsetX - 10) / markerScale);\\n\\t    }\\n\\t    else if (coords[1] == 1) {\\n\\t      int searchOffsetY = searchOffsetIndex / 21 * 1;\\n\\t      setOutput(getFeaturePoints(featureIndex, 1) + float(searchOffsetY - 10) / markerScale);\\n\\t    }\\n\\t  }\\n\\t\"},n={variableNames:[\"sims\",\"maxIndex\"],outputShape:[o],userCode:\"\\n\\t  void main() {\\n\\t    int featureIndex = getOutputCoords();\\n\\t    int maxIndex = int(getMaxIndex(featureIndex));\\n\\t    setOutput(getSims(featureIndex, maxIndex));\\n\\t  }\\n\\t\"};this.kernelCaches.computeMatching=[t,e,n]}return r.tidy((()=>{const r=this.kernelCaches.computeMatching,i=this._compileAndRun(r[0],[t,e,n,s]),a=i.argMax(1);return{matchingPointsT:this._compileAndRun(r[1],[t,n,a]),simT:this._compileAndRun(r[2],[i,a])}}))}_computeProjection(t,e,n){const s=this.trackingKeyframeList[n].width,i=this.trackingKeyframeList[n].height,a=this.trackingKeyframeList[n].scale,o=s+\"-\"+i;if(this.kernelCaches.computeProjection||(this.kernelCaches.computeProjection={}),!this.kernelCaches.computeProjection[o]){const t={variableNames:[\"M\",\"pixel\"],outputShape:[i,s],userCode:`\\n\\t  void main() {\\n\\t      ivec2 coords = getOutputCoords();\\n\\n\\t      float m00 = getM(0, 0) * 1000.;\\n\\t      float m01 = getM(0, 1) * 1000.;\\n\\t      float m03 = getM(0, 3) * 1000.;\\n\\t      float m10 = getM(1, 0) * 1000.;\\n\\t      float m11 = getM(1, 1) * 1000.;\\n\\t      float m13 = getM(1, 3) * 1000.;\\n\\t      float m20 = getM(2, 0) * 1000.;\\n\\t      float m21 = getM(2, 1) * 1000.;\\n\\t      float m23 = getM(2, 3) * 1000.;\\n\\n\\t      float y = float(coords[0]) / float(${a});\\n\\t      float x = float(coords[1]) / float(${a});\\n\\t      float uz = (x * m20) + (y * m21) + m23;\\n\\t      float oneOverUz = 1. / uz;\\n\\n\\t      float ux = (x * m00) + (y * m01) + m03;\\n\\t      float uy = (x * m10) + (y * m11) + m13;\\n\\n\\t      ux = floor(ux * oneOverUz + 0.5);\\n\\t      uy = floor(uy * oneOverUz + 0.5);\\n\\t      setOutput(getPixel(int(uy), int(ux)));\\n\\t    }\\n\\t`};this.kernelCaches.computeProjection[o]=t}return r.tidy((()=>{const n=this.kernelCaches.computeProjection[o];return this._compileAndRun(n,[t,e])}))}_computeColoredProjection(t,e,n,s,i){const a=this.trackingKeyframeList[n].width,o=(this.trackingKeyframeList[n].height,this.trackingKeyframeList[n].scale*s/a),l=s+\"-\"+i;if(this.kernelCaches._computeColoredProjection||(this.kernelCaches._computeColoredProjection={}),!this.kernelCaches._computeColoredProjection[l]){const t={variableNames:[\"M\",\"pixel\"],outputShape:[i,s,3],userCode:`\\n\\t  void main() {\\n\\t      ivec3 coords = getOutputCoords();\\n\\n\\t      float m00 = getM(0, 0) * 1000.;\\n\\t      float m01 = getM(0, 1) * 1000.;\\n\\t      float m03 = getM(0, 3) * 1000.;\\n\\t      float m10 = getM(1, 0) * 1000.;\\n\\t      float m11 = getM(1, 1) * 1000.;\\n\\t      float m13 = getM(1, 3) * 1000.;\\n\\t      float m20 = getM(2, 0) * 1000.;\\n\\t      float m21 = getM(2, 1) * 1000.;\\n\\t      float m23 = getM(2, 3) * 1000.;\\n\\n\\t      float y = float(coords[0]) / float(${o});\\n\\t      float x = float(coords[1]) / float(${o});\\n\\t      float uz = (x * m20) + (y * m21) + m23;\\n\\t      float oneOverUz = 1. / uz;\\n\\n\\t      float ux = (x * m00) + (y * m01) + m03;\\n\\t      float uy = (x * m10) + (y * m11) + m13;\\n\\n\\t      ux = floor(ux * oneOverUz + 0.5);\\n\\t      uy = floor(uy * oneOverUz + 0.5);\\n\\t      setOutput(getPixel(int(uy), int(ux), coords[2]));\\n\\t    }\\n\\t`};this.kernelCaches._computeColoredProjection[l]=t}return r.tidy((()=>{const n=this.kernelCaches._computeColoredProjection[l];return this._compileAndRun(n,[t,e])}))}_buildAdjustedModelViewTransform(t){return r.tidy((()=>{let e=[];for(let n=0;n<t.length;n++){e.push([]);for(let r=0;r<t[n].length;r++)e[n].push(t[n][r]/1e3)}return r.tensor(e,[3,4])}))}_prebuild(t,e){return r.tidy((()=>{const n=t.scale,s=[];for(let r=0;r<e;r++)r<t.points.length?s.push([t.points[r].x/n,t.points[r].y/n]):s.push([-1,-1]);const i=r.tensor(t.data,[t.width*t.height]),a=r.tensor([t.width,t.height,t.scale],[3]);return{featurePoints:r.tensor(s,[s.length,2],\"float32\"),imagePixels:i,imageProperties:a}}))}_compileAndRun(t,e){const n=r.backend().compileAndRun(t,e);return r.engine().makeTensorFromDataId(n.dataId,n.shape,n.dtype)}}}},9140:t=>{t.exports={downsampleBilinear:({image:t})=>{const{data:e,width:n,height:r}=t,s=Math.floor(n/2),i=Math.floor(r/2),a=new Float32Array(s*i),o=[0,1,n,n+1];for(let t=0;t<i;t++)for(let r=0;r<s;r++){let i=2*t*n+2*r,l=0;for(let t=0;t<o.length;t++)l+=e[i+o[t]];l*=.25,a[t*s+r]=l}return{data:a,width:s,height:i}},upsampleBilinear:({image:t,padOneWidth:e,padOneHeight:n})=>{const{width:r,height:s,data:i}=t,a=2*t.width+(e?1:0),o=2*t.height+(n?1:0),l=new Float32Array(a*o);for(let t=0;t<a;t++){const e=.5*t-.25;let n=Math.floor(e),u=Math.ceil(e);n<0&&(n=0),u>=r&&(u=r-1);for(let c=0;c<o;c++){const o=.5*c-.25;let h=Math.floor(o),d=Math.ceil(o);h<0&&(h=0),d>=s&&(d=s-1);const p=(u-e)*(d-o)*i[h*r+n]+(u-e)*(o-h)*i[d*r+n]+(e-n)*(d-o)*i[h*r+u]+(e-n)*(o-h)*i[d*r+u];l[c*a+t]=p}}return{data:l,width:a,height:o}},resize:({image:t,ratio:e})=>{const n=Math.round(t.width*e),r=Math.round(t.height*e),s=new Uint8Array(n*r);for(let i=0;i<n;i++){let a=Math.round(1*i/e),o=Math.round(1*(i+1)/e)-1;o>=t.width&&(o=t.width-1);for(let l=0;l<r;l++){let r=Math.round(1*l/e),u=Math.round(1*(l+1)/e)-1;u>=t.height&&(u=t.height-1);let c=0,h=0;for(let e=a;e<=o;e++)for(let n=r;n<=u;n++)c+=1*t.data[n*t.width+e],h+=1;s[l*n+i]=Math.floor(c/h)}}return{data:s,width:n,height:r}}}},6048:t=>{t.exports={createRandomizer:()=>({seed:1234,arrayShuffle(t){const{arr:e,sampleSize:n}=t;for(let t=0;t<n;t++){this.seed=(214013*this.seed+2531011)%(1<<31);let n=this.seed>>16&32767;n%=e.length;let r=e[t];e[t]=e[n],e[n]=r}},nextInt(t){this.seed=(214013*this.seed+2531011)%(1<<31);let e=this.seed>>16&32767;return e%=t,e}})}},82749:(t,e,n)=>{n(74412);const r=n(69894).Z,s=n(97676).Z,i=n(22810).Z;t.exports={UI:class{constructor({uiLoading:t,uiScanning:e,uiError:n}){\"yes\"===t?this.loadingModal=this._loadHTML(r):\"no\"!==t&&(this.loadingModal=document.querySelector(t)),\"yes\"===n?this.compatibilityModal=this._loadHTML(s):\"no\"!==n&&(this.compatibilityModal=document.querySelector(n)),\"yes\"===e?this.scanningMask=this._loadHTML(i):\"no\"!==e&&(this.scanningMask=document.querySelector(e)),this.hideLoading(),this.hideCompatibility(),this.hideScanning()}showLoading(){this.loadingModal&&this.loadingModal.classList.remove(\"hidden\")}hideLoading(){this.loadingModal&&this.loadingModal.classList.add(\"hidden\")}showCompatibility(){this.compatibilityModal&&this.compatibilityModal.classList.remove(\"hidden\")}hideCompatibility(){this.compatibilityModal&&this.compatibilityModal.classList.add(\"hidden\")}showScanning(){this.scanningMask&&this.scanningMask.classList.remove(\"hidden\")}hideScanning(){this.scanningMask&&this.scanningMask.classList.add(\"hidden\")}_loadHTML(t){const e=document.createElement(\"template\");e.innerHTML=t.trim();const n=e.content.firstChild;return document.getElementsByTagName(\"body\")[0].appendChild(n),n}}}},63906:()=>{},12993:()=>{},78352:()=>{},84589:()=>{},61758:()=>{}},e={};function n(r){if(e[r])return e[r].exports;var s=e[r]={id:r,loaded:!1,exports:{}};return t[r].call(s.exports,s,s.exports,n),s.loaded=!0,s.exports}n.amdD=function(){throw new Error(\"define cannot be used indirect\")},n.amdO={},n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if(\"object\"==typeof globalThis)return globalThis;try{return this||new Function(\"return this\")()}catch(t){if(\"object\"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(t,\"__esModule\",{value:!0})},n.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),n.p=\"\",(()=>{const t=n(2212),e=n(75042),{CSS3DRenderer:r}=n(21564),{Controller:s}=n(57957),{UI:i}=n(82749),a=new t.Matrix4;a.compose(new t.Vector3,new t.Quaternion,new t.Vector3(.001,.001,.001)),window.MINDAR||(window.MINDAR={}),window.MINDAR.IMAGE||(window.MINDAR.IMAGE={}),window.MINDAR.IMAGE.MindARThree=class{constructor({container:e,imageTargetSrc:n,maxTrack:s,captureRegion:a=!1,uiLoading:o=\"yes\",uiScanning:l=\"yes\",uiError:u=\"yes\"}){this.container=e,this.imageTargetSrc=n,this.maxTrack=s,this.captureRegion=a,this.ui=new i({uiLoading:o,uiScanning:l,uiError:u}),this.scene=new t.Scene,this.cssScene=new t.Scene,this.renderer=new t.WebGLRenderer({antialias:!0,alpha:!0}),this.cssRenderer=new r({antialias:!0}),this.renderer.outputEncoding=t.sRGBEncoding,this.renderer.setPixelRatio(window.devicePixelRatio),this.camera=new t.PerspectiveCamera,this.anchors=[],this.renderer.domElement.style.position=\"absolute\",this.cssRenderer.domElement.style.position=\"absolute\",this.container.appendChild(this.renderer.domElement),this.container.appendChild(this.cssRenderer.domElement),window.addEventListener(\"resize\",this.resize.bind(this))}async start(){this.ui.showLoading(),await this._startVideo(),await this._startAR()}stop(){this.controller.stopProcessVideo(),this.video.srcObject.getTracks().forEach((function(t){t.stop()})),this.video.remove()}addAnchor(e){const n=new t.Group;n.visible=!1,n.matrixAutoUpdate=!1;const r={group:n,targetIndex:e,onTargetFound:null,onTargetLost:null,css:!1,visible:!1};return this.anchors.push(r),this.scene.add(n),r}addCSSAnchor(e){const n=new t.Group;n.visible=!1,n.matrixAutoUpdate=!1;const r={group:n,targetIndex:e,onTargetFound:null,onTargetLost:null,css:!0,visible:!1};return this.anchors.push(r),this.cssScene.add(n),r}_startVideo(){return new Promise(((t,e)=>{if(this.video=document.createElement(\"video\"),this.video.setAttribute(\"autoplay\",\"\"),this.video.setAttribute(\"muted\",\"\"),this.video.setAttribute(\"playsinline\",\"\"),this.video.style.position=\"absolute\",this.video.style.top=\"0px\",this.video.style.left=\"0px\",this.video.style.zIndex=\"-2\",this.container.appendChild(this.video),!navigator.mediaDevices||!navigator.mediaDevices.getUserMedia)return this.ui.showCompatibility(),void e();navigator.mediaDevices.getUserMedia({audio:!1,video:{facingMode:\"environment\"}}).then((e=>{this.video.addEventListener(\"loadedmetadata\",(()=>{this.video.setAttribute(\"width\",this.video.videoWidth),this.video.setAttribute(\"height\",this.video.videoHeight),t()})),this.video.srcObject=e})).catch((t=>{console.log(\"getUserMedia error\",t),e()}))}))}_startAR(){return new Promise((async(e,n)=>{const r=this.video;this.container,this.controller=new s({inputWidth:r.videoWidth,inputHeight:r.videoHeight,maxTrack:this.maxTrack,onUpdate:e=>{if(\"updateMatrix\"===e.type){const{targetIndex:n,worldMatrix:r}=e;for(let e=0;e<this.anchors.length;e++)if(this.anchors[e].targetIndex===n){if(this.anchors[e].onTargetLost&&this.anchors[e].visible&&null===r&&(this.anchors[e].onTargetLost(),this.anchors[e].visible=!1),this.anchors[e].onTargetFound&&!this.anchors[e].visible&&null!==r){let t=null;this.captureRegion&&(t=this._pixels3DToImage(this.controller.capturedRegion)),this.anchors[e].onTargetFound({capturedImage:t}),this.anchors[e].visible=!0}if(this.anchors[e].css?this.anchors[e].group.children.forEach((t=>{t.element.style.visibility=null===r?\"hidden\":\"visible\"})):this.anchors[e].group.visible=null!==r,null!==r){let s=new t.Matrix4;s.elements=[...r],s.multiply(this.postMatrixs[n]),this.anchors[e].css&&s.multiply(a),this.anchors[e].group.matrix=s}null!==r&&this.ui.hideScanning()}}}}),this.captureRegion&&(this.controller.shouldCaptureRegion=!0),this.resize();const{dimensions:i}=await this.controller.addImageTargets(this.imageTargetSrc);this.postMatrixs=[];for(let e=0;e<i.length;e++){const n=new t.Vector3,r=new t.Quaternion,s=new t.Vector3,[a,o]=i[e];n.x=a/2,n.y=a/2+(o-a)/2,s.x=a,s.y=a,s.z=a;const l=new t.Matrix4;l.compose(n,r,s),this.postMatrixs.push(l)}await this.controller.dummyRun(this.video),this.ui.hideLoading(),this.ui.showScanning(),this.controller.processVideo(this.video),e()}))}resize(){const{renderer:t,cssRenderer:e,camera:n,container:r,video:s}=this;if(!s)return;let i,a;const o=s.videoWidth/s.videoHeight;o>r.clientWidth/r.clientHeight?(a=r.clientHeight,i=a*o):(i=r.clientWidth,a=i/o);const l=this.controller.getProjectionMatrix(),u=2*Math.atan(1/l[5]/a*r.clientHeight)*180/Math.PI,c=l[14]/(l[10]-1),h=l[14]/(l[10]+1);l[5],l[0],n.fov=u,n.near=c,n.far=h,n.aspect=r.clientWidth/r.clientHeight,n.updateProjectionMatrix(),s.style.top=-(a-r.clientHeight)/2+\"px\",s.style.left=-(i-r.clientWidth)/2+\"px\",s.style.width=i+\"px\",s.style.height=a+\"px\";const d=t.domElement,p=e.domElement;d.style.position=\"absolute\",d.style.left=0,d.style.top=0,d.style.width=r.clientWidth+\"px\",d.style.height=r.clientHeight+\"px\",p.style.position=\"absolute\",p.style.left=0,p.style.top=0,p.style.width=r.clientWidth+\"px\",p.style.height=r.clientHeight+\"px\",t.setSize(r.clientWidth,r.clientHeight),e.setSize(r.clientWidth,r.clientHeight)}_pixels3DToImage(t){const e=t.length,n=t[0].length,r=new Uint8ClampedArray(e*n*4);for(let s=0;s<e;s++)for(let e=0;e<n;e++){const i=s*n+e;r[4*i+0]=t[s][e][0],r[4*i+1]=t[s][e][1],r[4*i+2]=t[s][e][2],r[4*i+3]=255}const s=new ImageData(r,n,e),i=document.createElement(\"canvas\");i.height=e,i.width=n;const a=i.getContext(\"2d\");return a.clearRect(0,0,i.width,i.height),a.putImageData(s,0,0),i.toDataURL(\"image/png\")}},window.MINDAR.IMAGE.THREE=t,window.MINDAR.IMAGE.tf=e})()})();"],"names":[],"sourceRoot":""}